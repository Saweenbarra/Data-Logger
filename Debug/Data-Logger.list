
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000195b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  08019858  08019858  00029858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a1ac  0801a1ac  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a1ac  0801a1ac  0002a1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a1b4  0801a1b4  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a1b4  0801a1b4  0002a1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a1b8  0801a1b8  0002a1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  0801a1bc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b0  240001d8  0801a394  000301d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24002488  0801a394  00032488  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049dfb  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b2e  00000000  00000000  0007a001  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  00083f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  00086078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002805e  00000000  00000000  000c9168  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001785ee  00000000  00000000  000f11c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002697b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f5c  00000000  00000000  00269830  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019840 	.word	0x08019840

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08019840 	.word	0x08019840

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f005 fc24 	bl	8005f08 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f005 fc92 	bl	8005ff4 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f002 fb2b 	bl	8002d30 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f005 fcda 	bl	8006094 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f002 fb23 	bl	8002d30 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f005 fe5a 	bl	80063a8 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f002 fb19 	bl	8002d30 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f005 fca5 	bl	800604e <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b91      	ldr	r3, [pc, #580]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000718:	4a91      	ldr	r2, [pc, #580]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f005 fce5 	bl	80060ec <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 8114 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
			      {
					uint32_t time = HAL_GetTick();
 800072a:	f002 ffe9 	bl	8003700 <HAL_GetTick>
 800072e:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000730:	2101      	movs	r1, #1
 8000732:	488c      	ldr	r0, [pc, #560]	; (8000964 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000734:	f006 fd23 	bl	800717e <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000738:	488b      	ldr	r0, [pc, #556]	; (8000968 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800073a:	f018 f867 	bl	801880c <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073e:	4b88      	ldr	r3, [pc, #544]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d17f      	bne.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						CanFrame.id = RxHeader.Identifier;
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800074c:	6013      	str	r3, [r2, #0]
						switch(RxHeader.DataLength/65536){
 800074e:	4b84      	ldr	r3, [pc, #528]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	3b01      	subs	r3, #1
 8000756:	2b0e      	cmp	r3, #14
 8000758:	d85c      	bhi.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
 800075a:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	0800079d 	.word	0x0800079d
 8000764:	080007a5 	.word	0x080007a5
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007bd 	.word	0x080007bd
 8000774:	080007c5 	.word	0x080007c5
 8000778:	080007cd 	.word	0x080007cd
 800077c:	080007d5 	.word	0x080007d5
 8000780:	080007dd 	.word	0x080007dd
 8000784:	080007e5 	.word	0x080007e5
 8000788:	080007ed 	.word	0x080007ed
 800078c:	080007f5 	.word	0x080007f5
 8000790:	080007fd 	.word	0x080007fd
 8000794:	08000805 	.word	0x08000805
 8000798:	0800080d 	.word	0x0800080d
							case 1:
								CanFrame.length = 1;
 800079c:	4b73      	ldr	r3, [pc, #460]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]
								break;
 80007a2:	e037      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 2:
								CanFrame.length = 2;
 80007a4:	4b71      	ldr	r3, [pc, #452]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	715a      	strb	r2, [r3, #5]
								break;
 80007aa:	e033      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 3:
								CanFrame.length = 3;
 80007ac:	4b6f      	ldr	r3, [pc, #444]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	715a      	strb	r2, [r3, #5]
								break;
 80007b2:	e02f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 4:
								CanFrame.length = 4;
 80007b4:	4b6d      	ldr	r3, [pc, #436]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	715a      	strb	r2, [r3, #5]
								break;
 80007ba:	e02b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 5:
								CanFrame.length = 5;
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007be:	2205      	movs	r2, #5
 80007c0:	715a      	strb	r2, [r3, #5]
								break;
 80007c2:	e027      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 6:
								CanFrame.length = 6;
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007c6:	2206      	movs	r2, #6
 80007c8:	715a      	strb	r2, [r3, #5]
								break;
 80007ca:	e023      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 7:
								CanFrame.length = 7;
 80007cc:	4b67      	ldr	r3, [pc, #412]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	715a      	strb	r2, [r3, #5]
								break;
 80007d2:	e01f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 8:
								CanFrame.length = 8;
 80007d4:	4b65      	ldr	r3, [pc, #404]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	715a      	strb	r2, [r3, #5]
								break;
 80007da:	e01b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 9:
								CanFrame.length = 12;
 80007dc:	4b63      	ldr	r3, [pc, #396]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007de:	220c      	movs	r2, #12
 80007e0:	715a      	strb	r2, [r3, #5]
								break;
 80007e2:	e017      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 10:
								CanFrame.length = 16;
 80007e4:	4b61      	ldr	r3, [pc, #388]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	715a      	strb	r2, [r3, #5]
								break;
 80007ea:	e013      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 11:
								CanFrame.length = 20;
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ee:	2214      	movs	r2, #20
 80007f0:	715a      	strb	r2, [r3, #5]
								break;
 80007f2:	e00f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 12:
								CanFrame.length = 24;
 80007f4:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007f6:	2218      	movs	r2, #24
 80007f8:	715a      	strb	r2, [r3, #5]
								break;
 80007fa:	e00b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 13:
								CanFrame.length = 32;
 80007fc:	4b5b      	ldr	r3, [pc, #364]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007fe:	2220      	movs	r2, #32
 8000800:	715a      	strb	r2, [r3, #5]
								break;
 8000802:	e007      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 14:
								CanFrame.length = 48;
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	715a      	strb	r2, [r3, #5]
								break;
 800080a:	e003      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 15:
								CanFrame.length = 64;
 800080c:	4b57      	ldr	r3, [pc, #348]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	715a      	strb	r2, [r3, #5]
								break;
 8000812:	bf00      	nop
						}
						CanFrame.time = time;
 8000814:	4a55      	ldr	r2, [pc, #340]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <HAL_FDCAN_RxFifo0Callback+0x264>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	461a      	mov	r2, r3
 8000826:	494d      	ldr	r1, [pc, #308]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000828:	4852      	ldr	r0, [pc, #328]	; (8000974 <HAL_FDCAN_RxFifo0Callback+0x268>)
 800082a:	f017 febf 	bl	80185ac <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000836:	d103      	bne.n	8000840 <HAL_FDCAN_RxFifo0Callback+0x134>
							CanFrame.extended = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800083a:	2201      	movs	r2, #1
 800083c:	711a      	strb	r2, [r3, #4]
 800083e:	e002      	b.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						}
						else{
							CanFrame.extended = 0;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000842:	2200      	movs	r2, #0
 8000844:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800084e:	f040 8080 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
						CanFDFrame.id = RxHeader.Identifier;
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a48      	ldr	r2, [pc, #288]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000858:	6013      	str	r3, [r2, #0]

						switch(RxHeader.DataLength/65536){
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	3b01      	subs	r3, #1
 8000862:	2b0e      	cmp	r3, #14
 8000864:	d85c      	bhi.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_FDCAN_RxFifo0Callback+0x160>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008a9 	.word	0x080008a9
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008b9 	.word	0x080008b9
 8000878:	080008c1 	.word	0x080008c1
 800087c:	080008c9 	.word	0x080008c9
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008d9 	.word	0x080008d9
 8000888:	080008e1 	.word	0x080008e1
 800088c:	080008e9 	.word	0x080008e9
 8000890:	080008f1 	.word	0x080008f1
 8000894:	080008f9 	.word	0x080008f9
 8000898:	08000901 	.word	0x08000901
 800089c:	08000909 	.word	0x08000909
 80008a0:	08000911 	.word	0x08000911
 80008a4:	08000919 	.word	0x08000919
							case 1:
								CanFDFrame.length = 1;
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	609a      	str	r2, [r3, #8]
								break;
 80008ae:	e037      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 2:
								CanFDFrame.length = 2;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	609a      	str	r2, [r3, #8]
								break;
 80008b6:	e033      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 3:
								CanFDFrame.length = 3;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	609a      	str	r2, [r3, #8]
								break;
 80008be:	e02f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 4:
								CanFDFrame.length = 4;
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	609a      	str	r2, [r3, #8]
								break;
 80008c6:	e02b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 5:
								CanFDFrame.length = 5;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	609a      	str	r2, [r3, #8]
								break;
 80008ce:	e027      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 6:
								CanFDFrame.length = 6;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	609a      	str	r2, [r3, #8]
								break;
 80008d6:	e023      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 7:
								CanFDFrame.length = 7;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008da:	2207      	movs	r2, #7
 80008dc:	609a      	str	r2, [r3, #8]
								break;
 80008de:	e01f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 8:
								CanFDFrame.length = 8;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	609a      	str	r2, [r3, #8]
								break;
 80008e6:	e01b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 9:
								CanFDFrame.length = 12;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	609a      	str	r2, [r3, #8]
								break;
 80008ee:	e017      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 10:
								CanFDFrame.length = 16;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008f2:	2210      	movs	r2, #16
 80008f4:	609a      	str	r2, [r3, #8]
								break;
 80008f6:	e013      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 11:
								CanFDFrame.length = 20;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008fa:	2214      	movs	r2, #20
 80008fc:	609a      	str	r2, [r3, #8]
								break;
 80008fe:	e00f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 12:
								CanFDFrame.length = 24;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000902:	2218      	movs	r2, #24
 8000904:	609a      	str	r2, [r3, #8]
								break;
 8000906:	e00b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 13:
								CanFDFrame.length = 32;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800090a:	2220      	movs	r2, #32
 800090c:	609a      	str	r2, [r3, #8]
								break;
 800090e:	e007      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 14:
								CanFDFrame.length = 48;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	609a      	str	r2, [r3, #8]
								break;
 8000916:	e003      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 15:
								CanFDFrame.length = 64;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	609a      	str	r2, [r3, #8]
								break;
 800091e:	bf00      	nop
						}

						CanFDFrame.time = time;
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_FDCAN_RxFifo0Callback+0x270>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	461a      	mov	r2, r3
 8000932:	490a      	ldr	r1, [pc, #40]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000936:	f017 fe39 	bl	80185ac <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000942:	d103      	bne.n	800094c <HAL_FDCAN_RxFifo0Callback+0x240>
							CanFDFrame.extended = 1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000946:	2201      	movs	r2, #1
 8000948:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 800094a:	e002      	b.n	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
							CanFDFrame.extended = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800094e:	2200      	movs	r2, #0
 8000950:	711a      	strb	r2, [r3, #4]
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24000ff8 	.word	0x24000ff8
 8000960:	24001088 	.word	0x24001088
 8000964:	58020400 	.word	0x58020400
 8000968:	08019858 	.word	0x08019858
 800096c:	240010b0 	.word	0x240010b0
 8000970:	240001f8 	.word	0x240001f8
 8000974:	240010c0 	.word	0x240010c0
 8000978:	24001038 	.word	0x24001038
 800097c:	240001f4 	.word	0x240001f4
 8000980:	24001048 	.word	0x24001048

08000984 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	; 0x78
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	f7ff fca5 	bl	80002e0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	2b03      	cmp	r3, #3
 800099a:	d001      	beq.n	80009a0 <gps_msg_config+0x1c>
 800099c:	2301      	movs	r3, #1
 800099e:	e052      	b.n	8000a46 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80009a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <gps_msg_config+0xcc>)
 80009ac:	211f      	movs	r1, #31
 80009ae:	f017 ff45 	bl	801883c <sniprintf>

	int checksum_int = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80009ba:	e00b      	b.n	80009d4 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80009bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ca:	4053      	eors	r3, r2
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d0:	3301      	adds	r3, #1
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80009d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <gps_msg_config+0x64>
 80009e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	dde9      	ble.n	80009bc <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80009e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80009ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <gps_msg_config+0xd0>)
 80009f0:	2107      	movs	r1, #7
 80009f2:	f017 ff23 	bl	801883c <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80009f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009fa:	f107 0014 	add.w	r0, r7, #20
 80009fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4613      	mov	r3, r2
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <gps_msg_config+0xd4>)
 8000a08:	2129      	movs	r1, #41	; 0x29
 8000a0a:	f017 ff17 	bl	801883c <sniprintf>
	printf("\n\rSending: ");
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <gps_msg_config+0xd8>)
 8000a10:	f017 fe88 	bl	8018724 <iprintf>
	printf("%s", messagetosend);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <gps_msg_config+0xdc>)
 8000a1c:	f017 fe82 	bl	8018724 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc5b 	bl	80002e0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f107 0114 	add.w	r1, r7, #20
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f00e f94a 	bl	800ecce <HAL_UART_Transmit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <gps_msg_config+0xc0>
		Error_Handler();
 8000a40:	f002 f976 	bl	8002d30 <Error_Handler>
	}
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	0801986c 	.word	0x0801986c
 8000a54:	08019884 	.word	0x08019884
 8000a58:	0801988c 	.word	0x0801988c
 8000a5c:	08019894 	.word	0x08019894
 8000a60:	080198a0 	.word	0x080198a0

08000a64 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4603      	mov	r3, r0
 8000a74:	817b      	strh	r3, [r7, #10]
 8000a76:	460b      	mov	r3, r1
 8000a78:	813b      	strh	r3, [r7, #8]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000a82:	23b5      	movs	r3, #181	; 0xb5
 8000a84:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000a86:	2362      	movs	r3, #98	; 0x62
 8000a88:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000a92:	8bfb      	ldrh	r3, [r7, #30]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000aa6:	893b      	ldrh	r3, [r7, #8]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	e013      	b.n	8000af4 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ada:	4413      	add	r3, r2
 8000adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ae8:	4413      	add	r3, r2
 8000aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	3301      	adds	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b0b      	cmp	r3, #11
 8000af8:	dde8      	ble.n	8000acc <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000afe:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b04:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000b06:	f107 0110 	add.w	r1, r7, #16
 8000b0a:	2364      	movs	r3, #100	; 0x64
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f00e f8dd 	bl	800ecce <HAL_UART_Transmit>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <gps_rate_config+0xbe>
				Error_Handler();
 8000b1a:	f002 f909 	bl	8002d30 <Error_Handler>
				return 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <gps_rate_config+0xc0>
			}
		return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	240001fc 	.word	0x240001fc

08000b4c <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d008      	beq.n	8000b6c <NRF24_csn+0x20>
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <NRF24_csn+0x38>)
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <NRF24_csn+0x3c>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	f006 faf1 	bl	800714c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000b6a:	e007      	b.n	8000b7c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <NRF24_csn+0x38>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <NRF24_csn+0x3c>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	f006 fae8 	bl	800714c <HAL_GPIO_WritePin>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	24000204 	.word	0x24000204
 8000b88:	24000208 	.word	0x24000208

08000b8c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <NRF24_ce+0x20>
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <NRF24_ce+0x38>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <NRF24_ce+0x3c>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f006 fad1 	bl	800714c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000baa:	e007      	b.n	8000bbc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <NRF24_ce+0x38>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <NRF24_ce+0x3c>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f006 fac8 	bl	800714c <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000204 	.word	0x24000204
 8000bc8:	2400020a 	.word	0x2400020a

08000bcc <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ffb8 	bl	8000b4c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 031f 	and.w	r3, r3, #31
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000be6:	f107 010c 	add.w	r1, r7, #12
 8000bea:	2364      	movs	r3, #100	; 0x64
 8000bec:	2201      	movs	r2, #1
 8000bee:	480a      	ldr	r0, [pc, #40]	; (8000c18 <NRF24_read_register+0x4c>)
 8000bf0:	f00d f864 	bl	800dcbc <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	1c59      	adds	r1, r3, #1
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <NRF24_read_register+0x4c>)
 8000c00:	f00d fa4e 	bl	800e0a0 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000c04:	7b7b      	ldrb	r3, [r7, #13]
 8000c06:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff ff9f 	bl	8000b4c <NRF24_csn>
	return retData;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2400020c 	.word	0x2400020c

08000c1c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff ff8d 	bl	8000b4c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 031f 	and.w	r3, r3, #31
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c3c:	f107 010c 	add.w	r1, r7, #12
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	2201      	movs	r2, #1
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <NRF24_read_registerN+0x4c>)
 8000c46:	f00d f839 	bl	800dcbc <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000c4a:	79bb      	ldrb	r3, [r7, #6]
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	2364      	movs	r3, #100	; 0x64
 8000c50:	6839      	ldr	r1, [r7, #0]
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <NRF24_read_registerN+0x4c>)
 8000c54:	f00d fa24 	bl	800e0a0 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff ff77 	bl	8000b4c <NRF24_csn>
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2400020c 	.word	0x2400020c

08000c6c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	460a      	mov	r2, r1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff ff65 	bl	8000b4c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000c90:	f107 010c 	add.w	r1, r7, #12
 8000c94:	2364      	movs	r3, #100	; 0x64
 8000c96:	2202      	movs	r2, #2
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <NRF24_write_register+0x40>)
 8000c9a:	f00d f80f 	bl	800dcbc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff ff54 	bl	8000b4c <NRF24_csn>
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2400020c 	.word	0x2400020c

08000cb0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff ff43 	bl	8000b4c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000cd0:	f107 010c 	add.w	r1, r7, #12
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <NRF24_write_registerN+0x4c>)
 8000cda:	f00c ffef 	bl	800dcbc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	2364      	movs	r3, #100	; 0x64
 8000ce4:	6839      	ldr	r1, [r7, #0]
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <NRF24_write_registerN+0x4c>)
 8000ce8:	f00c ffe8 	bl	800dcbc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f7ff ff2d 	bl	8000b4c <NRF24_csn>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2400020c 	.word	0x2400020c

08000d00 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000d04:	21ff      	movs	r1, #255	; 0xff
 8000d06:	20e1      	movs	r0, #225	; 0xe1
 8000d08:	f7ff ffb0 	bl	8000c6c <NRF24_write_register>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000d14:	21ff      	movs	r1, #255	; 0xff
 8000d16:	20e2      	movs	r0, #226	; 0xe2
 8000d18:	f7ff ffa8 	bl	8000c6c <NRF24_write_register>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000d20:	b082      	sub	sp, #8
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]
 8000d30:	4613      	mov	r3, r2
 8000d32:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000d34:	4b66      	ldr	r3, [pc, #408]	; (8000ed0 <NRF24_begin+0x1b0>)
 8000d36:	4618      	mov	r0, r3
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	2288      	movs	r2, #136	; 0x88
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f017 fc34 	bl	80185ac <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000d44:	4a63      	ldr	r2, [pc, #396]	; (8000ed4 <NRF24_begin+0x1b4>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000d4a:	4a63      	ldr	r2, [pc, #396]	; (8000ed8 <NRF24_begin+0x1b8>)
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000d50:	4a62      	ldr	r2, [pc, #392]	; (8000edc <NRF24_begin+0x1bc>)
 8000d52:	883b      	ldrh	r3, [r7, #0]
 8000d54:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fef8 	bl	8000b4c <NRF24_csn>
	NRF24_ce(0);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ff15 	bl	8000b8c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000d62:	2005      	movs	r0, #5
 8000d64:	f002 fcd8 	bl	8003718 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000d68:	2108      	movs	r1, #8
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff ff7e 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000d70:	213f      	movs	r1, #63	; 0x3f
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff7a 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000d78:	2103      	movs	r1, #3
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f7ff ff76 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000d80:	2103      	movs	r1, #3
 8000d82:	2003      	movs	r0, #3
 8000d84:	f7ff ff72 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000d88:	2103      	movs	r1, #3
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	f7ff ff6e 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000d90:	2102      	movs	r1, #2
 8000d92:	2005      	movs	r0, #5
 8000d94:	f7ff ff6a 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000d98:	210f      	movs	r1, #15
 8000d9a:	2006      	movs	r0, #6
 8000d9c:	f7ff ff66 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000da0:	210e      	movs	r1, #14
 8000da2:	2007      	movs	r0, #7
 8000da4:	f7ff ff62 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000da8:	2100      	movs	r1, #0
 8000daa:	2008      	movs	r0, #8
 8000dac:	f7ff ff5e 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000db0:	2100      	movs	r1, #0
 8000db2:	2009      	movs	r0, #9
 8000db4:	f7ff ff5a 	bl	8000c6c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000db8:	23e7      	movs	r3, #231	; 0xe7
 8000dba:	733b      	strb	r3, [r7, #12]
 8000dbc:	23e7      	movs	r3, #231	; 0xe7
 8000dbe:	72fb      	strb	r3, [r7, #11]
 8000dc0:	23e7      	movs	r3, #231	; 0xe7
 8000dc2:	72bb      	strb	r3, [r7, #10]
 8000dc4:	23e7      	movs	r3, #231	; 0xe7
 8000dc6:	727b      	strb	r3, [r7, #9]
 8000dc8:	23e7      	movs	r3, #231	; 0xe7
 8000dca:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2205      	movs	r2, #5
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	200a      	movs	r0, #10
 8000dd6:	f7ff ff6b 	bl	8000cb0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000dda:	23c2      	movs	r3, #194	; 0xc2
 8000ddc:	733b      	strb	r3, [r7, #12]
 8000dde:	23c2      	movs	r3, #194	; 0xc2
 8000de0:	72fb      	strb	r3, [r7, #11]
 8000de2:	23c2      	movs	r3, #194	; 0xc2
 8000de4:	72bb      	strb	r3, [r7, #10]
 8000de6:	23c2      	movs	r3, #194	; 0xc2
 8000de8:	727b      	strb	r3, [r7, #9]
 8000dea:	23c2      	movs	r3, #194	; 0xc2
 8000dec:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	2205      	movs	r2, #5
 8000df4:	4619      	mov	r1, r3
 8000df6:	200b      	movs	r0, #11
 8000df8:	f7ff ff5a 	bl	8000cb0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000dfc:	21c3      	movs	r1, #195	; 0xc3
 8000dfe:	200c      	movs	r0, #12
 8000e00:	f7ff ff34 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000e04:	21c4      	movs	r1, #196	; 0xc4
 8000e06:	200d      	movs	r0, #13
 8000e08:	f7ff ff30 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000e0c:	21c5      	movs	r1, #197	; 0xc5
 8000e0e:	200e      	movs	r0, #14
 8000e10:	f7ff ff2c 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000e14:	21c6      	movs	r1, #198	; 0xc6
 8000e16:	200f      	movs	r0, #15
 8000e18:	f7ff ff28 	bl	8000c6c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000e1c:	23e7      	movs	r3, #231	; 0xe7
 8000e1e:	733b      	strb	r3, [r7, #12]
 8000e20:	23e7      	movs	r3, #231	; 0xe7
 8000e22:	72fb      	strb	r3, [r7, #11]
 8000e24:	23e7      	movs	r3, #231	; 0xe7
 8000e26:	72bb      	strb	r3, [r7, #10]
 8000e28:	23e7      	movs	r3, #231	; 0xe7
 8000e2a:	727b      	strb	r3, [r7, #9]
 8000e2c:	23e7      	movs	r3, #231	; 0xe7
 8000e2e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	2205      	movs	r2, #5
 8000e36:	4619      	mov	r1, r3
 8000e38:	2010      	movs	r0, #16
 8000e3a:	f7ff ff39 	bl	8000cb0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2011      	movs	r0, #17
 8000e42:	f7ff ff13 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000e46:	2100      	movs	r1, #0
 8000e48:	2012      	movs	r0, #18
 8000e4a:	f7ff ff0f 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2013      	movs	r0, #19
 8000e52:	f7ff ff0b 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000e56:	2100      	movs	r1, #0
 8000e58:	2014      	movs	r0, #20
 8000e5a:	f7ff ff07 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2015      	movs	r0, #21
 8000e62:	f7ff ff03 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000e66:	2100      	movs	r1, #0
 8000e68:	2016      	movs	r0, #22
 8000e6a:	f7ff feff 	bl	8000c6c <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000e6e:	f000 f99b 	bl	80011a8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000e72:	2100      	movs	r1, #0
 8000e74:	201c      	movs	r0, #28
 8000e76:	f7ff fef9 	bl	8000c6c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f7ff fef5 	bl	8000c6c <NRF24_write_register>
	printRadioSettings();
 8000e82:	f000 f9ab 	bl	80011dc <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000e86:	210f      	movs	r1, #15
 8000e88:	200f      	movs	r0, #15
 8000e8a:	f000 f859 	bl	8000f40 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f000 f8cb 	bl	800102a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f000 f901 	bl	800109c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f000 f944 	bl	8001128 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000ea0:	f000 f896 	bl	8000fd0 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000ea4:	2020      	movs	r0, #32
 8000ea6:	f000 f87b 	bl	8000fa0 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000eaa:	f000 f974 	bl	8001196 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000eae:	204c      	movs	r0, #76	; 0x4c
 8000eb0:	f000 f861 	bl	8000f76 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000eb4:	f7ff ff24 	bl	8000d00 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000eb8:	f7ff ff2a 	bl	8000d10 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000ebc:	f000 f95c 	bl	8001178 <NRF24_powerDown>
	
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eca:	b002      	add	sp, #8
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2400020c 	.word	0x2400020c
 8000ed4:	24000204 	.word	0x24000204
 8000ed8:	24000208 	.word	0x24000208
 8000edc:	2400020a 	.word	0x2400020a

08000ee0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fe51 	bl	8000b8c <NRF24_ce>
	NRF24_flush_tx();
 8000eea:	f7ff ff09 	bl	8000d00 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000eee:	f7ff ff0f 	bl	8000d10 <NRF24_flush_rx>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000f02:	463b      	mov	r3, r7
 8000f04:	2205      	movs	r2, #5
 8000f06:	4619      	mov	r1, r3
 8000f08:	200a      	movs	r0, #10
 8000f0a:	f7ff fed1 	bl	8000cb0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2205      	movs	r2, #5
 8000f12:	4619      	mov	r1, r3
 8000f14:	2010      	movs	r0, #16
 8000f16:	f7ff fecb 	bl	8000cb0 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <NRF24_openWritingPipe+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	4293      	cmp	r3, r2
 8000f26:	bf28      	it	cs
 8000f28:	4613      	movcs	r3, r2
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	2011      	movs	r0, #17
 8000f30:	f7ff fe9c 	bl	8000c6c <NRF24_write_register>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	24000200 	.word	0x24000200

08000f40 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	b25a      	sxtb	r2, r3
 8000f56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4619      	mov	r1, r3
 8000f68:	2004      	movs	r0, #4
 8000f6a:	f7ff fe7f 	bl	8000c6c <NRF24_write_register>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000f80:	237f      	movs	r3, #127	; 0x7f
 8000f82:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	bf28      	it	cs
 8000f8c:	4613      	movcs	r3, r2
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4619      	mov	r1, r3
 8000f92:	2005      	movs	r0, #5
 8000f94:	f7ff fe6a 	bl	8000c6c <NRF24_write_register>
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000faa:	2320      	movs	r3, #32
 8000fac:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	bf28      	it	cs
 8000fb6:	4613      	movcs	r3, r2
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <NRF24_setPayloadSize+0x2c>)
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	24000200 	.word	0x24000200

08000fd0 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000fd4:	201d      	movs	r0, #29
 8000fd6:	f7ff fdf9 	bl	8000bcc <NRF24_read_register>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f023 0304 	bic.w	r3, r3, #4
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	201d      	movs	r0, #29
 8000fe6:	f7ff fe41 	bl	8000c6c <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000fea:	2100      	movs	r1, #0
 8000fec:	201c      	movs	r0, #28
 8000fee:	f7ff fe3d 	bl	8000c6c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000ff2:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <NRF24_disableDynamicPayloads+0x2c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	24000201 	.word	0x24000201

08001000 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001010:	213f      	movs	r1, #63	; 0x3f
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff fe2a 	bl	8000c6c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001018:	e003      	b.n	8001022 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800101a:	2100      	movs	r1, #0
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff fe25 	bl	8000c6c <NRF24_write_register>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001034:	2006      	movs	r0, #6
 8001036:	f7ff fdc9 	bl	8000bcc <NRF24_read_register>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f023 0306 	bic.w	r3, r3, #6
 8001044:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d104      	bne.n	8001056 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f043 0306 	orr.w	r3, r3, #6
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e019      	b.n	800108a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d104      	bne.n	8001066 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e011      	b.n	800108a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d104      	bne.n	8001076 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	f043 0302 	orr.w	r3, r3, #2
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e009      	b.n	800108a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b04      	cmp	r3, #4
 8001080:	d103      	bne.n	800108a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	f043 0306 	orr.w	r3, r3, #6
 8001088:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	4619      	mov	r1, r3
 800108e:	2006      	movs	r0, #6
 8001090:	f7ff fdec 	bl	8000c6c <NRF24_write_register>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80010aa:	2006      	movs	r0, #6
 80010ac:	f7ff fd8e 	bl	8000bcc <NRF24_read_register>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <NRF24_setDataRate+0x88>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80010c0:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d107      	bne.n	80010d8 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <NRF24_setDataRate+0x88>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	73bb      	strb	r3, [r7, #14]
 80010d6:	e00d      	b.n	80010f4 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d107      	bne.n	80010ee <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <NRF24_setDataRate+0x88>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	73bb      	strb	r3, [r7, #14]
 80010ec:	e002      	b.n	80010f4 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <NRF24_setDataRate+0x88>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80010f4:	7bbb      	ldrb	r3, [r7, #14]
 80010f6:	4619      	mov	r1, r3
 80010f8:	2006      	movs	r0, #6
 80010fa:	f7ff fdb7 	bl	8000c6c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80010fe:	2006      	movs	r0, #6
 8001100:	f7ff fd64 	bl	8000bcc <NRF24_read_register>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	4293      	cmp	r3, r2
 800110c:	d102      	bne.n	8001114 <NRF24_setDataRate+0x78>
  {
    result = true;
 800110e:	2301      	movs	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	e002      	b.n	800111a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <NRF24_setDataRate+0x88>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	24000202 	.word	0x24000202

08001128 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fd4a 	bl	8000bcc <NRF24_read_register>
 8001138:	4603      	mov	r3, r0
 800113a:	f023 030c 	bic.w	r3, r3, #12
 800113e:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00f      	beq.n	8001166 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d104      	bne.n	8001156 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e007      	b.n	8001166 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	4619      	mov	r1, r3
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff fd7e 	bl	8000c6c <NRF24_write_register>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fd25 	bl	8000bcc <NRF24_read_register>
 8001182:	4603      	mov	r3, r0
 8001184:	f023 0302 	bic.w	r3, r3, #2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4619      	mov	r1, r3
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fd6d 	bl	8000c6c <NRF24_write_register>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}

08001196 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800119a:	2170      	movs	r1, #112	; 0x70
 800119c:	2007      	movs	r0, #7
 800119e:	f7ff fd65 	bl	8000c6c <NRF24_write_register>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fccc 	bl	8000b4c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80011b4:	2350      	movs	r3, #80	; 0x50
 80011b6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80011b8:	2373      	movs	r3, #115	; 0x73
 80011ba:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80011bc:	1d39      	adds	r1, r7, #4
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	2202      	movs	r2, #2
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <NRF24_ACTIVATE_cmd+0x30>)
 80011c4:	f00c fd7a 	bl	800dcbc <HAL_SPI_Transmit>
	NRF24_csn(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fcbf 	bl	8000b4c <NRF24_csn>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2400020c 	.word	0x2400020c

080011dc <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011de:	b0a1      	sub	sp, #132	; 0x84
 80011e0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	4ab6      	ldr	r2, [pc, #728]	; (80014c0 <printRadioSettings+0x2e4>)
 80011e8:	461c      	mov	r4, r3
 80011ea:	4615      	mov	r5, r2
 80011ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	8022      	strh	r2, [r4, #0]
 80011fe:	3402      	adds	r4, #2
 8001200:	0c1b      	lsrs	r3, r3, #16
 8001202:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f869 	bl	80002e0 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	f107 0108 	add.w	r1, r7, #8
 8001216:	230a      	movs	r3, #10
 8001218:	48aa      	ldr	r0, [pc, #680]	; (80014c4 <printRadioSettings+0x2e8>)
 800121a:	f00d fd58 	bl	800ecce <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff fcd4 	bl	8000bcc <NRF24_read_register>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800122a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d020      	beq.n	8001278 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <printRadioSettings+0x7e>
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	4aa0      	ldr	r2, [pc, #640]	; (80014c8 <printRadioSettings+0x2ec>)
 8001248:	461c      	mov	r4, r3
 800124a:	4615      	mov	r5, r2
 800124c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001254:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001258:	e017      	b.n	800128a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4a9b      	ldr	r2, [pc, #620]	; (80014cc <printRadioSettings+0x2f0>)
 8001260:	461c      	mov	r4, r3
 8001262:	4615      	mov	r5, r2
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126c:	c403      	stmia	r4!, {r0, r1}
 800126e:	8022      	strh	r2, [r4, #0]
 8001270:	3402      	adds	r4, #2
 8001272:	0c13      	lsrs	r3, r2, #16
 8001274:	7023      	strb	r3, [r4, #0]
 8001276:	e008      	b.n	800128a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	4a94      	ldr	r2, [pc, #592]	; (80014d0 <printRadioSettings+0x2f4>)
 800127e:	461c      	mov	r4, r3
 8001280:	4615      	mov	r5, r2
 8001282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001286:	682b      	ldr	r3, [r5, #0]
 8001288:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f826 	bl	80002e0 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	f107 0108 	add.w	r1, r7, #8
 800129c:	230a      	movs	r3, #10
 800129e:	4889      	ldr	r0, [pc, #548]	; (80014c4 <printRadioSettings+0x2e8>)
 80012a0:	f00d fd15 	bl	800ecce <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff fc91 	bl	8000bcc <NRF24_read_register>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012b4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bfcc      	ite	gt
 80012bc:	2301      	movgt	r3, #1
 80012be:	2300      	movle	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bfcc      	ite	gt
 80012d0:	2301      	movgt	r3, #1
 80012d2:	2300      	movle	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012dc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bfcc      	ite	gt
 80012e4:	2301      	movgt	r3, #1
 80012e6:	2300      	movle	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012f0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bfcc      	ite	gt
 80012f8:	2301      	movgt	r3, #1
 80012fa:	2300      	movle	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001300:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001304:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001308:	2b00      	cmp	r3, #0
 800130a:	bfcc      	ite	gt
 800130c:	2301      	movgt	r3, #1
 800130e:	2300      	movle	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001314:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001318:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800131c:	2b00      	cmp	r3, #0
 800131e:	bfcc      	ite	gt
 8001320:	2301      	movgt	r3, #1
 8001322:	2300      	movle	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f107 0008 	add.w	r0, r7, #8
 800132a:	9303      	str	r3, [sp, #12]
 800132c:	9402      	str	r4, [sp, #8]
 800132e:	9101      	str	r1, [sp, #4]
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	4633      	mov	r3, r6
 8001334:	462a      	mov	r2, r5
 8001336:	4967      	ldr	r1, [pc, #412]	; (80014d4 <printRadioSettings+0x2f8>)
 8001338:	f017 fab4 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe ffcd 	bl	80002e0 <strlen>
 8001346:	4603      	mov	r3, r0
 8001348:	b29a      	uxth	r2, r3
 800134a:	f107 0108 	add.w	r1, r7, #8
 800134e:	230a      	movs	r3, #10
 8001350:	485c      	ldr	r0, [pc, #368]	; (80014c4 <printRadioSettings+0x2e8>)
 8001352:	f00d fcbc 	bl	800ecce <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001356:	2002      	movs	r0, #2
 8001358:	f7ff fc38 	bl	8000bcc <NRF24_read_register>
 800135c:	4603      	mov	r3, r0
 800135e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001362:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001366:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfcc      	ite	gt
 800136e:	2301      	movgt	r3, #1
 8001370:	2300      	movle	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001376:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800137a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800137e:	2b00      	cmp	r3, #0
 8001380:	bfcc      	ite	gt
 8001382:	2301      	movgt	r3, #1
 8001384:	2300      	movle	r3, #0
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800138a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800138e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfcc      	ite	gt
 8001396:	2301      	movgt	r3, #1
 8001398:	2300      	movle	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800139e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	bfcc      	ite	gt
 80013aa:	2301      	movgt	r3, #1
 80013ac:	2300      	movle	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bfcc      	ite	gt
 80013be:	2301      	movgt	r3, #1
 80013c0:	2300      	movle	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ca:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfcc      	ite	gt
 80013d2:	2301      	movgt	r3, #1
 80013d4:	2300      	movle	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f107 0008 	add.w	r0, r7, #8
 80013dc:	9303      	str	r3, [sp, #12]
 80013de:	9402      	str	r4, [sp, #8]
 80013e0:	9101      	str	r1, [sp, #4]
 80013e2:	9200      	str	r2, [sp, #0]
 80013e4:	4633      	mov	r3, r6
 80013e6:	462a      	mov	r2, r5
 80013e8:	493b      	ldr	r1, [pc, #236]	; (80014d8 <printRadioSettings+0x2fc>)
 80013ea:	f017 fa5b 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe ff74 	bl	80002e0 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f107 0108 	add.w	r1, r7, #8
 8001400:	230a      	movs	r3, #10
 8001402:	4830      	ldr	r0, [pc, #192]	; (80014c4 <printRadioSettings+0x2e8>)
 8001404:	f00d fc63 	bl	800ecce <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001408:	2003      	movs	r0, #3
 800140a:	f7ff fbdf 	bl	8000bcc <NRF24_read_register>
 800140e:	4603      	mov	r3, r0
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001418:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800141c:	3302      	adds	r3, #2
 800141e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001422:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	492c      	ldr	r1, [pc, #176]	; (80014dc <printRadioSettings+0x300>)
 800142c:	4618      	mov	r0, r3
 800142e:	f017 fa39 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe ff52 	bl	80002e0 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	b29a      	uxth	r2, r3
 8001440:	f107 0108 	add.w	r1, r7, #8
 8001444:	230a      	movs	r3, #10
 8001446:	481f      	ldr	r0, [pc, #124]	; (80014c4 <printRadioSettings+0x2e8>)
 8001448:	f00d fc41 	bl	800ecce <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800144c:	2005      	movs	r0, #5
 800144e:	f7ff fbbd 	bl	8000bcc <NRF24_read_register>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001458:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	491e      	ldr	r1, [pc, #120]	; (80014e0 <printRadioSettings+0x304>)
 8001466:	4618      	mov	r0, r3
 8001468:	f017 fa1c 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe ff35 	bl	80002e0 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	f107 0108 	add.w	r1, r7, #8
 800147e:	230a      	movs	r3, #10
 8001480:	4810      	ldr	r0, [pc, #64]	; (80014c4 <printRadioSettings+0x2e8>)
 8001482:	f00d fc24 	bl	800ecce <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001486:	2006      	movs	r0, #6
 8001488:	f7ff fba0 	bl	8000bcc <NRF24_read_register>
 800148c:	4603      	mov	r3, r0
 800148e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001492:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d024      	beq.n	80014e8 <printRadioSettings+0x30c>
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <printRadioSettings+0x308>)
 80014a4:	461c      	mov	r4, r3
 80014a6:	4615      	mov	r5, r2
 80014a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014b0:	6020      	str	r0, [r4, #0]
 80014b2:	3404      	adds	r4, #4
 80014b4:	8021      	strh	r1, [r4, #0]
 80014b6:	3402      	adds	r4, #2
 80014b8:	0c0b      	lsrs	r3, r1, #16
 80014ba:	7023      	strb	r3, [r4, #0]
 80014bc:	e023      	b.n	8001506 <printRadioSettings+0x32a>
 80014be:	bf00      	nop
 80014c0:	080198ac 	.word	0x080198ac
 80014c4:	24000294 	.word	0x24000294
 80014c8:	080198e0 	.word	0x080198e0
 80014cc:	080198fc 	.word	0x080198fc
 80014d0:	08019918 	.word	0x08019918
 80014d4:	0801992c 	.word	0x0801992c
 80014d8:	08019970 	.word	0x08019970
 80014dc:	080199bc 	.word	0x080199bc
 80014e0:	080199d8 	.word	0x080199d8
 80014e4:	080199ec 	.word	0x080199ec
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4a29      	ldr	r2, [pc, #164]	; (8001594 <printRadioSettings+0x3b8>)
 80014ee:	461c      	mov	r4, r3
 80014f0:	4615      	mov	r5, r2
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014fa:	6020      	str	r0, [r4, #0]
 80014fc:	3404      	adds	r4, #4
 80014fe:	8021      	strh	r1, [r4, #0]
 8001500:	3402      	adds	r4, #2
 8001502:	0c0b      	lsrs	r3, r1, #16
 8001504:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	481f      	ldr	r0, [pc, #124]	; (8001598 <printRadioSettings+0x3bc>)
 800151c:	f00d fbd7 	bl	800ecce <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001520:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001524:	f003 0306 	and.w	r3, r3, #6
 8001528:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 800152c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001530:	085b      	lsrs	r3, r3, #1
 8001532:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001536:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <printRadioSettings+0x376>
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4a16      	ldr	r2, [pc, #88]	; (800159c <printRadioSettings+0x3c0>)
 8001544:	461c      	mov	r4, r3
 8001546:	4615      	mov	r5, r2
 8001548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154c:	682b      	ldr	r3, [r5, #0]
 800154e:	6023      	str	r3, [r4, #0]
 8001550:	e037      	b.n	80015c2 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001552:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001556:	2b01      	cmp	r3, #1
 8001558:	d109      	bne.n	800156e <printRadioSettings+0x392>
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <printRadioSettings+0x3c4>)
 8001560:	461c      	mov	r4, r3
 8001562:	4615      	mov	r5, r2
 8001564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	6023      	str	r3, [r4, #0]
 800156c:	e029      	b.n	80015c2 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800156e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001572:	2b02      	cmp	r3, #2
 8001574:	d118      	bne.n	80015a8 <printRadioSettings+0x3cc>
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <printRadioSettings+0x3c8>)
 800157c:	461c      	mov	r4, r3
 800157e:	4615      	mov	r5, r2
 8001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001584:	682b      	ldr	r3, [r5, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	8022      	strh	r2, [r4, #0]
 800158a:	3402      	adds	r4, #2
 800158c:	0c1b      	lsrs	r3, r3, #16
 800158e:	7023      	strb	r3, [r4, #0]
 8001590:	e017      	b.n	80015c2 <printRadioSettings+0x3e6>
 8001592:	bf00      	nop
 8001594:	08019a04 	.word	0x08019a04
 8001598:	24000294 	.word	0x24000294
 800159c:	08019a1c 	.word	0x08019a1c
 80015a0:	08019a30 	.word	0x08019a30
 80015a4:	08019a44 	.word	0x08019a44
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80015a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d108      	bne.n	80015c2 <printRadioSettings+0x3e6>
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	4ad7      	ldr	r2, [pc, #860]	; (8001914 <printRadioSettings+0x738>)
 80015b6:	461c      	mov	r4, r3
 80015b8:	4615      	mov	r5, r2
 80015ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fe8a 	bl	80002e0 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	f107 0108 	add.w	r1, r7, #8
 80015d4:	230a      	movs	r3, #10
 80015d6:	48d0      	ldr	r0, [pc, #832]	; (8001918 <printRadioSettings+0x73c>)
 80015d8:	f00d fb79 	bl	800ecce <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80015dc:	463b      	mov	r3, r7
 80015de:	2205      	movs	r2, #5
 80015e0:	4619      	mov	r1, r3
 80015e2:	200a      	movs	r0, #10
 80015e4:	f7ff fb1a 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015e8:	793b      	ldrb	r3, [r7, #4]
 80015ea:	461c      	mov	r4, r3
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	461d      	mov	r5, r3
 80015f0:	78bb      	ldrb	r3, [r7, #2]
 80015f2:	787a      	ldrb	r2, [r7, #1]
 80015f4:	7839      	ldrb	r1, [r7, #0]
 80015f6:	f107 0008 	add.w	r0, r7, #8
 80015fa:	9102      	str	r1, [sp, #8]
 80015fc:	9201      	str	r2, [sp, #4]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	462b      	mov	r3, r5
 8001602:	4622      	mov	r2, r4
 8001604:	49c5      	ldr	r1, [pc, #788]	; (800191c <printRadioSettings+0x740>)
 8001606:	f017 f94d 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fe66 	bl	80002e0 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	f107 0108 	add.w	r1, r7, #8
 800161c:	230a      	movs	r3, #10
 800161e:	48be      	ldr	r0, [pc, #760]	; (8001918 <printRadioSettings+0x73c>)
 8001620:	f00d fb55 	bl	800ecce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001624:	463b      	mov	r3, r7
 8001626:	2205      	movs	r2, #5
 8001628:	4619      	mov	r1, r3
 800162a:	200b      	movs	r0, #11
 800162c:	f7ff faf6 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001630:	793b      	ldrb	r3, [r7, #4]
 8001632:	461c      	mov	r4, r3
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	461d      	mov	r5, r3
 8001638:	78bb      	ldrb	r3, [r7, #2]
 800163a:	787a      	ldrb	r2, [r7, #1]
 800163c:	7839      	ldrb	r1, [r7, #0]
 800163e:	f107 0008 	add.w	r0, r7, #8
 8001642:	9102      	str	r1, [sp, #8]
 8001644:	9201      	str	r2, [sp, #4]
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	462b      	mov	r3, r5
 800164a:	4622      	mov	r2, r4
 800164c:	49b4      	ldr	r1, [pc, #720]	; (8001920 <printRadioSettings+0x744>)
 800164e:	f017 f929 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fe42 	bl	80002e0 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	f107 0108 	add.w	r1, r7, #8
 8001664:	230a      	movs	r3, #10
 8001666:	48ac      	ldr	r0, [pc, #688]	; (8001918 <printRadioSettings+0x73c>)
 8001668:	f00d fb31 	bl	800ecce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800166c:	463b      	mov	r3, r7
 800166e:	2201      	movs	r2, #1
 8001670:	4619      	mov	r1, r3
 8001672:	200c      	movs	r0, #12
 8001674:	f7ff fad2 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001678:	783b      	ldrb	r3, [r7, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	49a8      	ldr	r1, [pc, #672]	; (8001924 <printRadioSettings+0x748>)
 8001682:	4618      	mov	r0, r3
 8001684:	f017 f90e 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe fe27 	bl	80002e0 <strlen>
 8001692:	4603      	mov	r3, r0
 8001694:	b29a      	uxth	r2, r3
 8001696:	f107 0108 	add.w	r1, r7, #8
 800169a:	230a      	movs	r3, #10
 800169c:	489e      	ldr	r0, [pc, #632]	; (8001918 <printRadioSettings+0x73c>)
 800169e:	f00d fb16 	bl	800ecce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80016a2:	463b      	mov	r3, r7
 80016a4:	2201      	movs	r2, #1
 80016a6:	4619      	mov	r1, r3
 80016a8:	200d      	movs	r0, #13
 80016aa:	f7ff fab7 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80016ae:	783b      	ldrb	r3, [r7, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	499c      	ldr	r1, [pc, #624]	; (8001928 <printRadioSettings+0x74c>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f017 f8f3 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fe0c 	bl	80002e0 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f107 0108 	add.w	r1, r7, #8
 80016d0:	230a      	movs	r3, #10
 80016d2:	4891      	ldr	r0, [pc, #580]	; (8001918 <printRadioSettings+0x73c>)
 80016d4:	f00d fafb 	bl	800ecce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80016d8:	463b      	mov	r3, r7
 80016da:	2201      	movs	r2, #1
 80016dc:	4619      	mov	r1, r3
 80016de:	200e      	movs	r0, #14
 80016e0:	f7ff fa9c 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80016e4:	783b      	ldrb	r3, [r7, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	498f      	ldr	r1, [pc, #572]	; (800192c <printRadioSettings+0x750>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f017 f8d8 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fdf1 	bl	80002e0 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	f107 0108 	add.w	r1, r7, #8
 8001706:	230a      	movs	r3, #10
 8001708:	4883      	ldr	r0, [pc, #524]	; (8001918 <printRadioSettings+0x73c>)
 800170a:	f00d fae0 	bl	800ecce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800170e:	463b      	mov	r3, r7
 8001710:	2201      	movs	r2, #1
 8001712:	4619      	mov	r1, r3
 8001714:	200f      	movs	r0, #15
 8001716:	f7ff fa81 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800171a:	783b      	ldrb	r3, [r7, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	4983      	ldr	r1, [pc, #524]	; (8001930 <printRadioSettings+0x754>)
 8001724:	4618      	mov	r0, r3
 8001726:	f017 f8bd 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fdd6 	bl	80002e0 <strlen>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	f107 0108 	add.w	r1, r7, #8
 800173c:	230a      	movs	r3, #10
 800173e:	4876      	ldr	r0, [pc, #472]	; (8001918 <printRadioSettings+0x73c>)
 8001740:	f00d fac5 	bl	800ecce <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001744:	463b      	mov	r3, r7
 8001746:	2205      	movs	r2, #5
 8001748:	4619      	mov	r1, r3
 800174a:	2010      	movs	r0, #16
 800174c:	f7ff fa66 	bl	8000c1c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001750:	793b      	ldrb	r3, [r7, #4]
 8001752:	461c      	mov	r4, r3
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	461d      	mov	r5, r3
 8001758:	78bb      	ldrb	r3, [r7, #2]
 800175a:	787a      	ldrb	r2, [r7, #1]
 800175c:	7839      	ldrb	r1, [r7, #0]
 800175e:	f107 0008 	add.w	r0, r7, #8
 8001762:	9102      	str	r1, [sp, #8]
 8001764:	9201      	str	r2, [sp, #4]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	462b      	mov	r3, r5
 800176a:	4622      	mov	r2, r4
 800176c:	4971      	ldr	r1, [pc, #452]	; (8001934 <printRadioSettings+0x758>)
 800176e:	f017 f899 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fdb2 	bl	80002e0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	f107 0108 	add.w	r1, r7, #8
 8001784:	230a      	movs	r3, #10
 8001786:	4864      	ldr	r0, [pc, #400]	; (8001918 <printRadioSettings+0x73c>)
 8001788:	f00d faa1 	bl	800ecce <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800178c:	2011      	movs	r0, #17
 800178e:	f7ff fa1d 	bl	8000bcc <NRF24_read_register>
 8001792:	4603      	mov	r3, r0
 8001794:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001798:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800179c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	4964      	ldr	r1, [pc, #400]	; (8001938 <printRadioSettings+0x75c>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f017 f87c 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fd95 	bl	80002e0 <strlen>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f107 0108 	add.w	r1, r7, #8
 80017be:	230a      	movs	r3, #10
 80017c0:	4855      	ldr	r0, [pc, #340]	; (8001918 <printRadioSettings+0x73c>)
 80017c2:	f00d fa84 	bl	800ecce <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80017c6:	2012      	movs	r0, #18
 80017c8:	f7ff fa00 	bl	8000bcc <NRF24_read_register>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	4957      	ldr	r1, [pc, #348]	; (800193c <printRadioSettings+0x760>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f017 f85f 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fd78 	bl	80002e0 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	f107 0108 	add.w	r1, r7, #8
 80017f8:	230a      	movs	r3, #10
 80017fa:	4847      	ldr	r0, [pc, #284]	; (8001918 <printRadioSettings+0x73c>)
 80017fc:	f00d fa67 	bl	800ecce <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001800:	2013      	movs	r0, #19
 8001802:	f7ff f9e3 	bl	8000bcc <NRF24_read_register>
 8001806:	4603      	mov	r3, r0
 8001808:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800180c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001810:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	4949      	ldr	r1, [pc, #292]	; (8001940 <printRadioSettings+0x764>)
 800181a:	4618      	mov	r0, r3
 800181c:	f017 f842 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fd5b 	bl	80002e0 <strlen>
 800182a:	4603      	mov	r3, r0
 800182c:	b29a      	uxth	r2, r3
 800182e:	f107 0108 	add.w	r1, r7, #8
 8001832:	230a      	movs	r3, #10
 8001834:	4838      	ldr	r0, [pc, #224]	; (8001918 <printRadioSettings+0x73c>)
 8001836:	f00d fa4a 	bl	800ecce <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 800183a:	2014      	movs	r0, #20
 800183c:	f7ff f9c6 	bl	8000bcc <NRF24_read_register>
 8001840:	4603      	mov	r3, r0
 8001842:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001846:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800184a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	493c      	ldr	r1, [pc, #240]	; (8001944 <printRadioSettings+0x768>)
 8001854:	4618      	mov	r0, r3
 8001856:	f017 f825 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fd3e 	bl	80002e0 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	b29a      	uxth	r2, r3
 8001868:	f107 0108 	add.w	r1, r7, #8
 800186c:	230a      	movs	r3, #10
 800186e:	482a      	ldr	r0, [pc, #168]	; (8001918 <printRadioSettings+0x73c>)
 8001870:	f00d fa2d 	bl	800ecce <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001874:	2015      	movs	r0, #21
 8001876:	f7ff f9a9 	bl	8000bcc <NRF24_read_register>
 800187a:	4603      	mov	r3, r0
 800187c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001880:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001884:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	492e      	ldr	r1, [pc, #184]	; (8001948 <printRadioSettings+0x76c>)
 800188e:	4618      	mov	r0, r3
 8001890:	f017 f808 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fd21 	bl	80002e0 <strlen>
 800189e:	4603      	mov	r3, r0
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	f107 0108 	add.w	r1, r7, #8
 80018a6:	230a      	movs	r3, #10
 80018a8:	481b      	ldr	r0, [pc, #108]	; (8001918 <printRadioSettings+0x73c>)
 80018aa:	f00d fa10 	bl	800ecce <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80018ae:	2016      	movs	r0, #22
 80018b0:	f7ff f98c 	bl	8000bcc <NRF24_read_register>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80018ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4921      	ldr	r1, [pc, #132]	; (800194c <printRadioSettings+0x770>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f016 ffeb 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd04 	bl	80002e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0108 	add.w	r1, r7, #8
 80018e0:	230a      	movs	r3, #10
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <printRadioSettings+0x73c>)
 80018e4:	f00d f9f3 	bl	800ecce <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80018e8:	201c      	movs	r0, #28
 80018ea:	f7ff f96f 	bl	8000bcc <NRF24_read_register>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018f8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bfcc      	ite	gt
 8001900:	2301      	movgt	r3, #1
 8001902:	2300      	movle	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001908:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	e01e      	b.n	8001950 <printRadioSettings+0x774>
 8001912:	bf00      	nop
 8001914:	08019a58 	.word	0x08019a58
 8001918:	24000294 	.word	0x24000294
 800191c:	08019a6c 	.word	0x08019a6c
 8001920:	08019a9c 	.word	0x08019a9c
 8001924:	08019acc 	.word	0x08019acc
 8001928:	08019af4 	.word	0x08019af4
 800192c:	08019b1c 	.word	0x08019b1c
 8001930:	08019b44 	.word	0x08019b44
 8001934:	08019b6c 	.word	0x08019b6c
 8001938:	08019b98 	.word	0x08019b98
 800193c:	08019bb4 	.word	0x08019bb4
 8001940:	08019bd0 	.word	0x08019bd0
 8001944:	08019bec 	.word	0x08019bec
 8001948:	08019c08 	.word	0x08019c08
 800194c:	08019c24 	.word	0x08019c24
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001950:	2b00      	cmp	r3, #0
 8001952:	bfcc      	ite	gt
 8001954:	2301      	movgt	r3, #1
 8001956:	2300      	movle	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800195c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001960:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001964:	2b00      	cmp	r3, #0
 8001966:	bfcc      	ite	gt
 8001968:	2301      	movgt	r3, #1
 800196a:	2300      	movle	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001970:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001974:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001978:	2b00      	cmp	r3, #0
 800197a:	bfcc      	ite	gt
 800197c:	2301      	movgt	r3, #1
 800197e:	2300      	movle	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001984:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001988:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800198c:	2b00      	cmp	r3, #0
 800198e:	bfcc      	ite	gt
 8001990:	2301      	movgt	r3, #1
 8001992:	2300      	movle	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001998:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800199c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bfcc      	ite	gt
 80019a4:	2301      	movgt	r3, #1
 80019a6:	2300      	movle	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f107 0008 	add.w	r0, r7, #8
 80019ae:	9303      	str	r3, [sp, #12]
 80019b0:	9402      	str	r4, [sp, #8]
 80019b2:	9101      	str	r1, [sp, #4]
 80019b4:	9200      	str	r2, [sp, #0]
 80019b6:	4633      	mov	r3, r6
 80019b8:	462a      	mov	r2, r5
 80019ba:	494a      	ldr	r1, [pc, #296]	; (8001ae4 <printRadioSettings+0x908>)
 80019bc:	f016 ff72 	bl	80188a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fc8b 	bl	80002e0 <strlen>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f107 0108 	add.w	r1, r7, #8
 80019d2:	230a      	movs	r3, #10
 80019d4:	4844      	ldr	r0, [pc, #272]	; (8001ae8 <printRadioSettings+0x90c>)
 80019d6:	f00d f97a 	bl	800ecce <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80019da:	201d      	movs	r0, #29
 80019dc:	f7ff f8f6 	bl	8000bcc <NRF24_read_register>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80019e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00c      	beq.n	8001a0c <printRadioSettings+0x830>
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	4a3d      	ldr	r2, [pc, #244]	; (8001aec <printRadioSettings+0x910>)
 80019f8:	461c      	mov	r4, r3
 80019fa:	4615      	mov	r5, r2
 80019fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a04:	6020      	str	r0, [r4, #0]
 8001a06:	3404      	adds	r4, #4
 8001a08:	8021      	strh	r1, [r4, #0]
 8001a0a:	e00e      	b.n	8001a2a <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001a0c:	f107 0308 	add.w	r3, r7, #8
 8001a10:	4a37      	ldr	r2, [pc, #220]	; (8001af0 <printRadioSettings+0x914>)
 8001a12:	461c      	mov	r4, r3
 8001a14:	4615      	mov	r5, r2
 8001a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a1e:	6020      	str	r0, [r4, #0]
 8001a20:	3404      	adds	r4, #4
 8001a22:	8021      	strh	r1, [r4, #0]
 8001a24:	3402      	adds	r4, #2
 8001a26:	0c0b      	lsrs	r3, r1, #16
 8001a28:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fc56 	bl	80002e0 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f107 0108 	add.w	r1, r7, #8
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	482a      	ldr	r0, [pc, #168]	; (8001ae8 <printRadioSettings+0x90c>)
 8001a40:	f00d f945 	bl	800ecce <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001a44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00b      	beq.n	8001a68 <printRadioSettings+0x88c>
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	4a27      	ldr	r2, [pc, #156]	; (8001af4 <printRadioSettings+0x918>)
 8001a56:	461c      	mov	r4, r3
 8001a58:	4615      	mov	r5, r2
 8001a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a62:	c403      	stmia	r4!, {r0, r1}
 8001a64:	8022      	strh	r2, [r4, #0]
 8001a66:	e00d      	b.n	8001a84 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <printRadioSettings+0x91c>)
 8001a6e:	461c      	mov	r4, r3
 8001a70:	4615      	mov	r5, r2
 8001a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a7a:	c403      	stmia	r4!, {r0, r1}
 8001a7c:	8022      	strh	r2, [r4, #0]
 8001a7e:	3402      	adds	r4, #2
 8001a80:	0c13      	lsrs	r3, r2, #16
 8001a82:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fc29 	bl	80002e0 <strlen>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	f107 0108 	add.w	r1, r7, #8
 8001a96:	230a      	movs	r3, #10
 8001a98:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <printRadioSettings+0x90c>)
 8001a9a:	f00d f918 	bl	800ecce <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4a16      	ldr	r2, [pc, #88]	; (8001afc <printRadioSettings+0x920>)
 8001aa4:	461c      	mov	r4, r3
 8001aa6:	4615      	mov	r5, r2
 8001aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	8022      	strh	r2, [r4, #0]
 8001aba:	3402      	adds	r4, #2
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ac0:	f107 0308 	add.w	r3, r7, #8
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fc0b 	bl	80002e0 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f107 0108 	add.w	r1, r7, #8
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <printRadioSettings+0x90c>)
 8001ad6:	f00d f8fa 	bl	800ecce <HAL_UART_Transmit>
}
 8001ada:	bf00      	nop
 8001adc:	3774      	adds	r7, #116	; 0x74
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	08019c40 	.word	0x08019c40
 8001ae8:	24000294 	.word	0x24000294
 8001aec:	08019c8c 	.word	0x08019c8c
 8001af0:	08019ca4 	.word	0x08019ca4
 8001af4:	08019cbc 	.word	0x08019cbc
 8001af8:	08019cd8 	.word	0x08019cd8
 8001afc:	080198ac 	.word	0x080198ac

08001b00 <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	dd03      	ble.n	8001b18 <WriteToBuff+0x18>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b16:	db01      	blt.n	8001b1c <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e089      	b.n	8001c30 <WriteToBuff+0x130>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <WriteToBuff+0x138>)
 8001b1e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b26:	d238      	bcs.n	8001b9a <WriteToBuff+0x9a>
 8001b28:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <WriteToBuff+0x138>)
 8001b2a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	4413      	add	r3, r2
 8001b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b36:	d330      	bcc.n	8001b9a <WriteToBuff+0x9a>
    DataBuffer.counter = Bufflength;
 8001b38:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <WriteToBuff+0x138>)
 8001b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001b42:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <WriteToBuff+0x138>)
 8001b44:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001b48:	4a3b      	ldr	r2, [pc, #236]	; (8001c38 <WriteToBuff+0x138>)
 8001b4a:	4413      	add	r3, r2
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f016 fd2b 	bl	80185ac <memcpy>
    DataBuffer.counter += len;
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <WriteToBuff+0x138>)
 8001b58:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a35      	ldr	r2, [pc, #212]	; (8001c38 <WriteToBuff+0x138>)
 8001b62:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <WriteToBuff+0x13c>)
 8001b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6c:	4932      	ldr	r1, [pc, #200]	; (8001c38 <WriteToBuff+0x138>)
 8001b6e:	4834      	ldr	r0, [pc, #208]	; (8001c40 <WriteToBuff+0x140>)
 8001b70:	f015 fd6b 	bl	801764a <f_write>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10d      	bne.n	8001b96 <WriteToBuff+0x96>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4830      	ldr	r0, [pc, #192]	; (8001c44 <WriteToBuff+0x144>)
 8001b82:	f016 fd1e 	bl	80185c2 <memset>
    	f_sync(&myFILE);
 8001b86:	482e      	ldr	r0, [pc, #184]	; (8001c40 <WriteToBuff+0x140>)
 8001b88:	f015 fed4 	bl	8017934 <f_sync>
      printf("Buffer 1 has been written\n");
 8001b8c:	482e      	ldr	r0, [pc, #184]	; (8001c48 <WriteToBuff+0x148>)
 8001b8e:	f016 fe3d 	bl	801880c <puts>
      return 1; //buffer 1 has been written
 8001b92:	2301      	movs	r3, #1
 8001b94:	e04c      	b.n	8001c30 <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001b96:	2304      	movs	r3, #4
 8001b98:	e04a      	b.n	8001c30 <WriteToBuff+0x130>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001b9a:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <WriteToBuff+0x138>)
 8001b9c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ba8:	d32f      	bcc.n	8001c0a <WriteToBuff+0x10a>
    DataBuffer.counter = 0;
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <WriteToBuff+0x138>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001bb2:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <WriteToBuff+0x138>)
 8001bb4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <WriteToBuff+0x138>)
 8001bba:	4413      	add	r3, r2
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f016 fcf3 	bl	80185ac <memcpy>
    DataBuffer.counter += len;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <WriteToBuff+0x138>)
 8001bc8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <WriteToBuff+0x138>)
 8001bd2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <WriteToBuff+0x13c>)
 8001bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bdc:	4919      	ldr	r1, [pc, #100]	; (8001c44 <WriteToBuff+0x144>)
 8001bde:	4818      	ldr	r0, [pc, #96]	; (8001c40 <WriteToBuff+0x140>)
 8001be0:	f015 fd33 	bl	801764a <f_write>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <WriteToBuff+0x106>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4811      	ldr	r0, [pc, #68]	; (8001c38 <WriteToBuff+0x138>)
 8001bf2:	f016 fce6 	bl	80185c2 <memset>
    	f_sync(&myFILE);
 8001bf6:	4812      	ldr	r0, [pc, #72]	; (8001c40 <WriteToBuff+0x140>)
 8001bf8:	f015 fe9c 	bl	8017934 <f_sync>
      printf("Buffer 2 has been written\n");
 8001bfc:	4813      	ldr	r0, [pc, #76]	; (8001c4c <WriteToBuff+0x14c>)
 8001bfe:	f016 fe05 	bl	801880c <puts>
      return 2; //buffer 2 has been written
 8001c02:	2302      	movs	r3, #2
 8001c04:	e014      	b.n	8001c30 <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001c06:	2304      	movs	r3, #4
 8001c08:	e012      	b.n	8001c30 <WriteToBuff+0x130>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <WriteToBuff+0x138>)
 8001c0c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001c10:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <WriteToBuff+0x138>)
 8001c12:	4413      	add	r3, r2
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f016 fcc7 	bl	80185ac <memcpy>
  DataBuffer.counter += len;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <WriteToBuff+0x138>)
 8001c20:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <WriteToBuff+0x138>)
 8001c2a:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	24000320 	.word	0x24000320
 8001c3c:	240010c8 	.word	0x240010c8
 8001c40:	24000b90 	.word	0x24000b90
 8001c44:	24000720 	.word	0x24000720
 8001c48:	08019df0 	.word	0x08019df0
 8001c4c:	08019e0c 	.word	0x08019e0c

08001c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c52:	f2ad 7df4 	subw	sp, sp, #2036	; 0x7f4
 8001c56:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c58:	f001 fccc 	bl	80035f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c5c:	f000 fbf8 	bl	8002450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c60:	f000 ff58 	bl	8002b14 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c64:	f000 ff36 	bl	8002ad4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001c68:	f000 fe24 	bl	80028b4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001c6c:	f010 fb64 	bl	8012338 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001c70:	f015 ff64 	bl	8017b3c <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001c74:	f000 fcf6 	bl	8002664 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001c78:	f000 fd5a 	bl	8002730 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001c7c:	f000 fe92 	bl	80029a4 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001c80:	f000 fedc 	bl	8002a3c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001c84:	f000 fe38 	bl	80028f8 <MX_SPI1_Init>
  MX_RTC_Init();
 8001c88:	f000 fdb6 	bl	80027f8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4884      	ldr	r0, [pc, #528]	; (8001ea0 <main+0x250>)
 8001c90:	f005 fa75 	bl	800717e <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001c94:	4c83      	ldr	r4, [pc, #524]	; (8001ea4 <main+0x254>)
 8001c96:	4668      	mov	r0, sp
 8001c98:	1d23      	adds	r3, r4, #4
 8001c9a:	2284      	movs	r2, #132	; 0x84
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f016 fc85 	bl	80185ac <memcpy>
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	487f      	ldr	r0, [pc, #508]	; (8001ea8 <main+0x258>)
 8001caa:	f7ff f839 	bl	8000d20 <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001cae:	f7ff f917 	bl	8000ee0 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001cb2:	4b7e      	ldr	r3, [pc, #504]	; (8001eac <main+0x25c>)
 8001cb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	4621      	mov	r1, r4
 8001cbc:	f7ff f91c 	bl	8000ef8 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f7ff f99d 	bl	8001000 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001cc6:	202a      	movs	r0, #42	; 0x2a
 8001cc8:	f7ff f955 	bl	8000f76 <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001ccc:	2020      	movs	r0, #32
 8001cce:	f7ff f967 	bl	8000fa0 <NRF24_setPayloadSize>

    printRadioSettings();
 8001cd2:	f7ff fa83 	bl	80011dc <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001cd6:	4876      	ldr	r0, [pc, #472]	; (8001eb0 <main+0x260>)
 8001cd8:	f016 fd98 	bl	801880c <puts>
  FDCAN_Config(&hfdcan1);
 8001cdc:	4875      	ldr	r0, [pc, #468]	; (8001eb4 <main+0x264>)
 8001cde:	f7fe fcd7 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001ce2:	2246      	movs	r2, #70	; 0x46
 8001ce4:	4974      	ldr	r1, [pc, #464]	; (8001eb8 <main+0x268>)
 8001ce6:	4875      	ldr	r0, [pc, #468]	; (8001ebc <main+0x26c>)
 8001ce8:	f00d f888 	bl	800edfc <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cf0:	f001 fd12 	bl	8003718 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001cf4:	2364      	movs	r3, #100	; 0x64
 8001cf6:	f8a7 3756 	strh.w	r3, [r7, #1878]	; 0x756
  uint16_t navRate = 1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f8a7 3754 	strh.w	r3, [r7, #1876]	; 0x754
  uint16_t timeRef = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8a7 3752 	strh.w	r3, [r7, #1874]	; 0x752
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001d06:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	; 0x752
 8001d0a:	f8b7 2754 	ldrh.w	r2, [r7, #1876]	; 0x754
 8001d0e:	f8b7 1756 	ldrh.w	r1, [r7, #1878]	; 0x756
 8001d12:	486a      	ldr	r0, [pc, #424]	; (8001ebc <main+0x26c>)
 8001d14:	f7fe fea6 	bl	8000a64 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4969      	ldr	r1, [pc, #420]	; (8001ec0 <main+0x270>)
 8001d1c:	4867      	ldr	r0, [pc, #412]	; (8001ebc <main+0x26c>)
 8001d1e:	f7fe fe31 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	4967      	ldr	r1, [pc, #412]	; (8001ec4 <main+0x274>)
 8001d26:	4865      	ldr	r0, [pc, #404]	; (8001ebc <main+0x26c>)
 8001d28:	f7fe fe2c 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4966      	ldr	r1, [pc, #408]	; (8001ec8 <main+0x278>)
 8001d30:	4862      	ldr	r0, [pc, #392]	; (8001ebc <main+0x26c>)
 8001d32:	f7fe fe27 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001d36:	2200      	movs	r2, #0
 8001d38:	4964      	ldr	r1, [pc, #400]	; (8001ecc <main+0x27c>)
 8001d3a:	4860      	ldr	r0, [pc, #384]	; (8001ebc <main+0x26c>)
 8001d3c:	f7fe fe22 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001d40:	2200      	movs	r2, #0
 8001d42:	4963      	ldr	r1, [pc, #396]	; (8001ed0 <main+0x280>)
 8001d44:	485d      	ldr	r0, [pc, #372]	; (8001ebc <main+0x26c>)
 8001d46:	f7fe fe1d 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4961      	ldr	r1, [pc, #388]	; (8001ed4 <main+0x284>)
 8001d4e:	485b      	ldr	r0, [pc, #364]	; (8001ebc <main+0x26c>)
 8001d50:	f7fe fe18 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	4960      	ldr	r1, [pc, #384]	; (8001ed8 <main+0x288>)
 8001d58:	4858      	ldr	r0, [pc, #352]	; (8001ebc <main+0x26c>)
 8001d5a:	f7fe fe13 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	495e      	ldr	r1, [pc, #376]	; (8001edc <main+0x28c>)
 8001d62:	4856      	ldr	r0, [pc, #344]	; (8001ebc <main+0x26c>)
 8001d64:	f7fe fe0e 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8001d68:	2200      	movs	r2, #0
 8001d6a:	495d      	ldr	r1, [pc, #372]	; (8001ee0 <main+0x290>)
 8001d6c:	4853      	ldr	r0, [pc, #332]	; (8001ebc <main+0x26c>)
 8001d6e:	f7fe fe09 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	495b      	ldr	r1, [pc, #364]	; (8001ee4 <main+0x294>)
 8001d76:	4851      	ldr	r0, [pc, #324]	; (8001ebc <main+0x26c>)
 8001d78:	f7fe fe04 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	495a      	ldr	r1, [pc, #360]	; (8001ee8 <main+0x298>)
 8001d80:	484e      	ldr	r0, [pc, #312]	; (8001ebc <main+0x26c>)
 8001d82:	f7fe fdff 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8001d86:	2200      	movs	r2, #0
 8001d88:	4958      	ldr	r1, [pc, #352]	; (8001eec <main+0x29c>)
 8001d8a:	484c      	ldr	r0, [pc, #304]	; (8001ebc <main+0x26c>)
 8001d8c:	f7fe fdfa 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8001d90:	2200      	movs	r2, #0
 8001d92:	4957      	ldr	r1, [pc, #348]	; (8001ef0 <main+0x2a0>)
 8001d94:	4849      	ldr	r0, [pc, #292]	; (8001ebc <main+0x26c>)
 8001d96:	f7fe fdf5 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4955      	ldr	r1, [pc, #340]	; (8001ef4 <main+0x2a4>)
 8001d9e:	4847      	ldr	r0, [pc, #284]	; (8001ebc <main+0x26c>)
 8001da0:	f7fe fdf0 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	4954      	ldr	r1, [pc, #336]	; (8001ef8 <main+0x2a8>)
 8001da8:	4844      	ldr	r0, [pc, #272]	; (8001ebc <main+0x26c>)
 8001daa:	f7fe fdeb 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8001dae:	2201      	movs	r2, #1
 8001db0:	4952      	ldr	r1, [pc, #328]	; (8001efc <main+0x2ac>)
 8001db2:	4842      	ldr	r0, [pc, #264]	; (8001ebc <main+0x26c>)
 8001db4:	f7fe fde6 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	4951      	ldr	r1, [pc, #324]	; (8001f00 <main+0x2b0>)
 8001dbc:	483f      	ldr	r0, [pc, #252]	; (8001ebc <main+0x26c>)
 8001dbe:	f7fe fde1 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	494f      	ldr	r1, [pc, #316]	; (8001f04 <main+0x2b4>)
 8001dc6:	483d      	ldr	r0, [pc, #244]	; (8001ebc <main+0x26c>)
 8001dc8:	f7fe fddc 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8001dcc:	2200      	movs	r2, #0
 8001dce:	494e      	ldr	r1, [pc, #312]	; (8001f08 <main+0x2b8>)
 8001dd0:	483a      	ldr	r0, [pc, #232]	; (8001ebc <main+0x26c>)
 8001dd2:	f7fe fdd7 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	494c      	ldr	r1, [pc, #304]	; (8001f0c <main+0x2bc>)
 8001dda:	4838      	ldr	r0, [pc, #224]	; (8001ebc <main+0x26c>)
 8001ddc:	f7fe fdd2 	bl	8000984 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8001de0:	2201      	movs	r2, #1
 8001de2:	494b      	ldr	r1, [pc, #300]	; (8001f10 <main+0x2c0>)
 8001de4:	484b      	ldr	r0, [pc, #300]	; (8001f14 <main+0x2c4>)
 8001de6:	f015 f8ed 	bl	8016fc4 <f_mount>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f040 80b3 	bne.w	8001f58 <main+0x308>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "test.csv\0";
 8001df2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001df6:	4a48      	ldr	r2, [pc, #288]	; (8001f18 <main+0x2c8>)
 8001df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dfa:	c303      	stmia	r3!, {r0, r1}
 8001dfc:	801a      	strh	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 8001dfe:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001e02:	4a46      	ldr	r2, [pc, #280]	; (8001f1c <main+0x2cc>)
 8001e04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8001e0a:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4619      	mov	r1, r3
 8001e12:	4843      	ldr	r0, [pc, #268]	; (8001f20 <main+0x2d0>)
 8001e14:	f015 f91c 	bl	8017050 <f_open>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	f040 8088 	bne.w	8001f30 <main+0x2e0>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001e20:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001e24:	220a      	movs	r2, #10
 8001e26:	4619      	mov	r1, r3
 8001e28:	483d      	ldr	r0, [pc, #244]	; (8001f20 <main+0x2d0>)
 8001e2a:	f015 f911 	bl	8017050 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4a3c      	ldr	r2, [pc, #240]	; (8001f24 <main+0x2d4>)
 8001e32:	461c      	mov	r4, r3
 8001e34:	4615      	mov	r5, r2
 8001e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e42:	c403      	stmia	r4!, {r0, r1}
 8001e44:	8022      	strh	r2, [r4, #0]
 8001e46:	3402      	adds	r4, #2
 8001e48:	0c13      	lsrs	r3, r2, #16
 8001e4a:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fa46 	bl	80002e0 <strlen>
 8001e54:	4602      	mov	r2, r0
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a33      	ldr	r2, [pc, #204]	; (8001f28 <main+0x2d8>)
 8001e5c:	4614      	mov	r4, r2
 8001e5e:	469c      	mov	ip, r3
 8001e60:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001e64:	4665      	mov	r5, ip
 8001e66:	4626      	mov	r6, r4
 8001e68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e6a:	6028      	str	r0, [r5, #0]
 8001e6c:	6069      	str	r1, [r5, #4]
 8001e6e:	60aa      	str	r2, [r5, #8]
 8001e70:	60eb      	str	r3, [r5, #12]
 8001e72:	3410      	adds	r4, #16
 8001e74:	f10c 0c10 	add.w	ip, ip, #16
 8001e78:	4574      	cmp	r4, lr
 8001e7a:	d1f3      	bne.n	8001e64 <main+0x214>
 8001e7c:	4662      	mov	r2, ip
 8001e7e:	4623      	mov	r3, r4
 8001e80:	cb03      	ldmia	r3!, {r0, r1}
 8001e82:	6010      	str	r0, [r2, #0]
 8001e84:	6051      	str	r1, [r2, #4]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fa27 	bl	80002e0 <strlen>
 8001e92:	4602      	mov	r2, r0
 8001e94:	1d39      	adds	r1, r7, #4
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <main+0x2dc>)
 8001e98:	4821      	ldr	r0, [pc, #132]	; (8001f20 <main+0x2d0>)
 8001e9a:	f015 fbd6 	bl	801764a <f_write>
 8001e9e:	e051      	b.n	8001f44 <main+0x2f4>
 8001ea0:	58020400 	.word	0x58020400
 8001ea4:	24001618 	.word	0x24001618
 8001ea8:	58020000 	.word	0x58020000
 8001eac:	24000000 	.word	0x24000000
 8001eb0:	08019e28 	.word	0x08019e28
 8001eb4:	240014ec 	.word	0x240014ec
 8001eb8:	240012fc 	.word	0x240012fc
 8001ebc:	240013bc 	.word	0x240013bc
 8001ec0:	08019e34 	.word	0x08019e34
 8001ec4:	08019e38 	.word	0x08019e38
 8001ec8:	08019e3c 	.word	0x08019e3c
 8001ecc:	08019e40 	.word	0x08019e40
 8001ed0:	08019e44 	.word	0x08019e44
 8001ed4:	08019e48 	.word	0x08019e48
 8001ed8:	08019e4c 	.word	0x08019e4c
 8001edc:	08019e50 	.word	0x08019e50
 8001ee0:	08019e54 	.word	0x08019e54
 8001ee4:	08019e58 	.word	0x08019e58
 8001ee8:	08019e5c 	.word	0x08019e5c
 8001eec:	08019e60 	.word	0x08019e60
 8001ef0:	08019e64 	.word	0x08019e64
 8001ef4:	08019e68 	.word	0x08019e68
 8001ef8:	08019e6c 	.word	0x08019e6c
 8001efc:	08019e70 	.word	0x08019e70
 8001f00:	08019e74 	.word	0x08019e74
 8001f04:	08019e78 	.word	0x08019e78
 8001f08:	08019e7c 	.word	0x08019e7c
 8001f0c:	08019e80 	.word	0x08019e80
 8001f10:	24001748 	.word	0x24001748
 8001f14:	24000dc8 	.word	0x24000dc8
 8001f18:	08019f10 	.word	0x08019f10
 8001f1c:	08019f1c 	.word	0x08019f1c
 8001f20:	240010cc 	.word	0x240010cc
 8001f24:	08019e84 	.word	0x08019e84
 8001f28:	08019eb0 	.word	0x08019eb0
 8001f2c:	24000dc4 	.word	0x24000dc4
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe f9d4 	bl	80002e0 <strlen>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	1d39      	adds	r1, r7, #4
 8001f3c:	4b98      	ldr	r3, [pc, #608]	; (80021a0 <main+0x550>)
 8001f3e:	4899      	ldr	r0, [pc, #612]	; (80021a4 <main+0x554>)
 8001f40:	f015 fa44 	bl	80173cc <f_read>
      }
      f_close(&Config);
 8001f44:	4897      	ldr	r0, [pc, #604]	; (80021a4 <main+0x554>)
 8001f46:	f015 fd73 	bl	8017a30 <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001f4a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f4e:	220a      	movs	r2, #10
 8001f50:	4619      	mov	r1, r3
 8001f52:	4895      	ldr	r0, [pc, #596]	; (80021a8 <main+0x558>)
 8001f54:	f015 f87c 	bl	8017050 <f_open>

  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;

  sTime.SecondFraction = 999;
 8001f58:	4b94      	ldr	r3, [pc, #592]	; (80021ac <main+0x55c>)
 8001f5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f5e:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 8001f60:	f001 fbce 	bl	8003700 <HAL_GetTick>
 8001f64:	f8c7 074c 	str.w	r0, [r7, #1868]	; 0x74c
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4990      	ldr	r1, [pc, #576]	; (80021ac <main+0x55c>)
 8001f6c:	4890      	ldr	r0, [pc, #576]	; (80021b0 <main+0x560>)
 8001f6e:	f009 fc29 	bl	800b7c4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001f72:	2200      	movs	r2, #0
 8001f74:	498f      	ldr	r1, [pc, #572]	; (80021b4 <main+0x564>)
 8001f76:	488e      	ldr	r0, [pc, #568]	; (80021b0 <main+0x560>)
 8001f78:	f009 fd08 	bl	800b98c <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 8001f7c:	4b8b      	ldr	r3, [pc, #556]	; (80021ac <main+0x55c>)
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8001f84:	4b8c      	ldr	r3, [pc, #560]	; (80021b8 <main+0x568>)
 8001f86:	fba3 0302 	umull	r0, r3, r3, r2
 8001f8a:	099b      	lsrs	r3, r3, #6
 8001f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f90:	fb00 f303 	mul.w	r3, r0, r3
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	1acb      	subs	r3, r1, r3
 8001f98:	4a84      	ldr	r2, [pc, #528]	; (80021ac <main+0x55c>)
 8001f9a:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 8001f9c:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001fa0:	4a85      	ldr	r2, [pc, #532]	; (80021b8 <main+0x568>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	099b      	lsrs	r3, r3, #6
 8001fa8:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Seconds -= LocalTime % 60;
 8001fac:	4b7f      	ldr	r3, [pc, #508]	; (80021ac <main+0x55c>)
 8001fae:	7898      	ldrb	r0, [r3, #2]
 8001fb0:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001fb4:	4b81      	ldr	r3, [pc, #516]	; (80021bc <main+0x56c>)
 8001fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8001fba:	095a      	lsrs	r2, r3, #5
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	1aca      	subs	r2, r1, r3
 8001fc6:	b2d3      	uxtb	r3, r2
 8001fc8:	1ac3      	subs	r3, r0, r3
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b77      	ldr	r3, [pc, #476]	; (80021ac <main+0x55c>)
 8001fce:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8001fd0:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001fd4:	4a79      	ldr	r2, [pc, #484]	; (80021bc <main+0x56c>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Minutes -= LocalTime % 60;
 8001fe0:	4b72      	ldr	r3, [pc, #456]	; (80021ac <main+0x55c>)
 8001fe2:	7858      	ldrb	r0, [r3, #1]
 8001fe4:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001fe8:	4b74      	ldr	r3, [pc, #464]	; (80021bc <main+0x56c>)
 8001fea:	fba3 2301 	umull	r2, r3, r3, r1
 8001fee:	095a      	lsrs	r2, r3, #5
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	1aca      	subs	r2, r1, r3
 8001ffa:	b2d3      	uxtb	r3, r2
 8001ffc:	1ac3      	subs	r3, r0, r3
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b6a      	ldr	r3, [pc, #424]	; (80021ac <main+0x55c>)
 8002002:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8002004:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8002008:	4a6c      	ldr	r2, [pc, #432]	; (80021bc <main+0x56c>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Hours -= LocalTime % 60;
 8002014:	4b65      	ldr	r3, [pc, #404]	; (80021ac <main+0x55c>)
 8002016:	7818      	ldrb	r0, [r3, #0]
 8002018:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 800201c:	4b67      	ldr	r3, [pc, #412]	; (80021bc <main+0x56c>)
 800201e:	fba3 2301 	umull	r2, r3, r3, r1
 8002022:	095a      	lsrs	r2, r3, #5
 8002024:	4613      	mov	r3, r2
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	1aca      	subs	r2, r1, r3
 800202e:	b2d3      	uxtb	r3, r2
 8002030:	1ac3      	subs	r3, r0, r3
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <main+0x55c>)
 8002036:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
  char CanFDWrite[400];
  int CFDW = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760

  while (end_flag){
 8002044:	e1db      	b.n	80023fe <main+0x7ae>

	  if(GPS_flag){
 8002046:	4b5e      	ldr	r3, [pc, #376]	; (80021c0 <main+0x570>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <main+0x40c>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 800204e:	2146      	movs	r1, #70	; 0x46
 8002050:	485c      	ldr	r0, [pc, #368]	; (80021c4 <main+0x574>)
 8002052:	f7ff fd55 	bl	8001b00 <WriteToBuff>
		  GPS_flag=0;
 8002056:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <main+0x570>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/
	  if(FDCAN_Flag){
 800205c:	4b5a      	ldr	r3, [pc, #360]	; (80021c8 <main+0x578>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80f1 	beq.w	8002248 <main+0x5f8>

		  RTC_TimeTypeDef lTime = sTime;
 8002066:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800206a:	4a50      	ldr	r2, [pc, #320]	; (80021ac <main+0x55c>)
 800206c:	461c      	mov	r4, r3
 800206e:	4615      	mov	r5, r2
 8002070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002074:	682b      	ldr	r3, [r5, #0]
 8002076:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8002078:	4b54      	ldr	r3, [pc, #336]	; (80021cc <main+0x57c>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.SubSeconds += LocalTime % 1000;
 8002080:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002084:	6859      	ldr	r1, [r3, #4]
 8002086:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <main+0x568>)
 800208c:	fba3 0302 	umull	r0, r3, r3, r2
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002096:	fb00 f303 	mul.w	r3, r0, r3
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	18ca      	adds	r2, r1, r3
 800209e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80020a2:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 80020a4:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80020a8:	4a43      	ldr	r2, [pc, #268]	; (80021b8 <main+0x568>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	099b      	lsrs	r3, r3, #6
 80020b0:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Seconds += LocalTime % 60;
 80020b4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80020b8:	7898      	ldrb	r0, [r3, #2]
 80020ba:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <main+0x56c>)
 80020c0:	fba3 2301 	umull	r2, r3, r3, r1
 80020c4:	095a      	lsrs	r2, r3, #5
 80020c6:	4613      	mov	r3, r2
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	1aca      	subs	r2, r1, r3
 80020d0:	b2d3      	uxtb	r3, r2
 80020d2:	4403      	add	r3, r0
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80020da:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 80020dc:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80020e0:	4a36      	ldr	r2, [pc, #216]	; (80021bc <main+0x56c>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Minutes += LocalTime % 60;
 80020ec:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80020f0:	7858      	ldrb	r0, [r3, #1]
 80020f2:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <main+0x56c>)
 80020f8:	fba3 2301 	umull	r2, r3, r3, r1
 80020fc:	095a      	lsrs	r2, r3, #5
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	1aca      	subs	r2, r1, r3
 8002108:	b2d3      	uxtb	r3, r2
 800210a:	4403      	add	r3, r0
 800210c:	b2da      	uxtb	r2, r3
 800210e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002112:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002114:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <main+0x56c>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Hours += LocalTime % 60;
 8002124:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002128:	7818      	ldrb	r0, [r3, #0]
 800212a:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <main+0x56c>)
 8002130:	fba3 2301 	umull	r2, r3, r3, r1
 8002134:	095a      	lsrs	r2, r3, #5
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	1aca      	subs	r2, r1, r3
 8002140:	b2d3      	uxtb	r3, r2
 8002142:	4403      	add	r3, r0
 8002144:	b2da      	uxtb	r2, r3
 8002146:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800214a:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <main+0x564>)
 800214e:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002150:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <main+0x564>)
 8002154:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002156:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <main+0x564>)
 800215a:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800215c:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <main+0x55c>)
 8002160:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002162:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <main+0x55c>)
 8002166:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002168:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <main+0x55c>)
 800216c:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800216e:	461e      	mov	r6, r3
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <main+0x55c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a15      	ldr	r2, [pc, #84]	; (80021cc <main+0x57c>)
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	f207 402c 	addw	r0, r7, #1068	; 0x42c
 800217c:	9205      	str	r2, [sp, #20]
 800217e:	9304      	str	r3, [sp, #16]
 8002180:	9603      	str	r6, [sp, #12]
 8002182:	9502      	str	r5, [sp, #8]
 8002184:	9401      	str	r4, [sp, #4]
 8002186:	9100      	str	r1, [sp, #0]
 8002188:	4673      	mov	r3, lr
 800218a:	4662      	mov	r2, ip
 800218c:	4910      	ldr	r1, [pc, #64]	; (80021d0 <main+0x580>)
 800218e:	f016 fb89 	bl	80188a4 <siprintf>
 8002192:	f8c7 0760 	str.w	r0, [r7, #1888]	; 0x760
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 800219c:	e034      	b.n	8002208 <main+0x5b8>
 800219e:	bf00      	nop
 80021a0:	24000dc0 	.word	0x24000dc0
 80021a4:	240010cc 	.word	0x240010cc
 80021a8:	24000b90 	.word	0x24000b90
 80021ac:	24000b24 	.word	0x24000b24
 80021b0:	240014c8 	.word	0x240014c8
 80021b4:	24000b38 	.word	0x24000b38
 80021b8:	10624dd3 	.word	0x10624dd3
 80021bc:	88888889 	.word	0x88888889
 80021c0:	240001fc 	.word	0x240001fc
 80021c4:	240012fc 	.word	0x240012fc
 80021c8:	240001f4 	.word	0x240001f4
 80021cc:	24001038 	.word	0x24001038
 80021d0:	08019eec 	.word	0x08019eec
			  CFDW += sprintf(CanFDWrite + CFDW, "%c", CanFDFrame.data.bytes[i]);
 80021d4:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80021d8:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 80021dc:	18d0      	adds	r0, r2, r3
 80021de:	4a8f      	ldr	r2, [pc, #572]	; (800241c <main+0x7cc>)
 80021e0:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80021e4:	4413      	add	r3, r2
 80021e6:	3310      	adds	r3, #16
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	498c      	ldr	r1, [pc, #560]	; (8002420 <main+0x7d0>)
 80021ee:	f016 fb59 	bl	80188a4 <siprintf>
 80021f2:	4602      	mov	r2, r0
 80021f4:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80021f8:	4413      	add	r3, r2
 80021fa:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760
		  for(int i = 0; i < CanFDFrame.length; i++){
 80021fe:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 8002202:	3301      	adds	r3, #1
 8002204:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 8002208:	4b84      	ldr	r3, [pc, #528]	; (800241c <main+0x7cc>)
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 8002210:	429a      	cmp	r2, r3
 8002212:	d8df      	bhi.n	80021d4 <main+0x584>
		  }
		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 8002214:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 8002218:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 800221c:	4413      	add	r3, r2
 800221e:	4a81      	ldr	r2, [pc, #516]	; (8002424 <main+0x7d4>)
 8002220:	8811      	ldrh	r1, [r2, #0]
 8002222:	7892      	ldrb	r2, [r2, #2]
 8002224:	8019      	strh	r1, [r3, #0]
 8002226:	709a      	strb	r2, [r3, #2]
 8002228:	2202      	movs	r2, #2
 800222a:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 800222e:	4413      	add	r3, r2
 8002230:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760
		  WriteToBuff(CanFDWrite, CFDW);
 8002234:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8002238:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fc5f 	bl	8001b00 <WriteToBuff>
		  FDCAN_Flag = 0;
 8002242:	4b79      	ldr	r3, [pc, #484]	; (8002428 <main+0x7d8>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 8002248:	4b78      	ldr	r3, [pc, #480]	; (800242c <main+0x7dc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80d6 	beq.w	80023fe <main+0x7ae>

		  RTC_TimeTypeDef lTime = sTime;
 8002252:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002256:	4a76      	ldr	r2, [pc, #472]	; (8002430 <main+0x7e0>)
 8002258:	461c      	mov	r4, r3
 800225a:	4615      	mov	r5, r2
 800225c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002260:	682b      	ldr	r3, [r5, #0]
 8002262:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 8002264:	4b73      	ldr	r3, [pc, #460]	; (8002434 <main+0x7e4>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.SubSeconds += LocalTime % 1000;
 800226c:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8002276:	4b70      	ldr	r3, [pc, #448]	; (8002438 <main+0x7e8>)
 8002278:	fba3 0302 	umull	r0, r3, r3, r2
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002282:	fb00 f303 	mul.w	r3, r0, r3
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	18ca      	adds	r2, r1, r3
 800228a:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800228e:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002290:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8002294:	4a68      	ldr	r2, [pc, #416]	; (8002438 <main+0x7e8>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Seconds += LocalTime % 60;
 80022a0:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80022a4:	7898      	ldrb	r0, [r3, #2]
 80022a6:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80022aa:	4b64      	ldr	r3, [pc, #400]	; (800243c <main+0x7ec>)
 80022ac:	fba3 2301 	umull	r2, r3, r3, r1
 80022b0:	095a      	lsrs	r2, r3, #5
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	1aca      	subs	r2, r1, r3
 80022bc:	b2d3      	uxtb	r3, r2
 80022be:	4403      	add	r3, r0
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80022c6:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 80022c8:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80022cc:	4a5b      	ldr	r2, [pc, #364]	; (800243c <main+0x7ec>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Minutes += LocalTime % 60;
 80022d8:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80022dc:	7858      	ldrb	r0, [r3, #1]
 80022de:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80022e2:	4b56      	ldr	r3, [pc, #344]	; (800243c <main+0x7ec>)
 80022e4:	fba3 2301 	umull	r2, r3, r3, r1
 80022e8:	095a      	lsrs	r2, r3, #5
 80022ea:	4613      	mov	r3, r2
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	1aca      	subs	r2, r1, r3
 80022f4:	b2d3      	uxtb	r3, r2
 80022f6:	4403      	add	r3, r0
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80022fe:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002300:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8002304:	4a4d      	ldr	r2, [pc, #308]	; (800243c <main+0x7ec>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Hours += LocalTime % 60;
 8002310:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002314:	7818      	ldrb	r0, [r3, #0]
 8002316:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 800231a:	4b48      	ldr	r3, [pc, #288]	; (800243c <main+0x7ec>)
 800231c:	fba3 2301 	umull	r2, r3, r3, r1
 8002320:	095a      	lsrs	r2, r3, #5
 8002322:	4613      	mov	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	1aca      	subs	r2, r1, r3
 800232c:	b2d3      	uxtb	r3, r2
 800232e:	4403      	add	r3, r0
 8002330:	b2da      	uxtb	r2, r3
 8002332:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002336:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002338:	4b41      	ldr	r3, [pc, #260]	; (8002440 <main+0x7f0>)
 800233a:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800233c:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800233e:	4b40      	ldr	r3, [pc, #256]	; (8002440 <main+0x7f0>)
 8002340:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002342:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002344:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <main+0x7f0>)
 8002346:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002348:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800234a:	4b39      	ldr	r3, [pc, #228]	; (8002430 <main+0x7e0>)
 800234c:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800234e:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002350:	4b37      	ldr	r3, [pc, #220]	; (8002430 <main+0x7e0>)
 8002352:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002354:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002356:	4b36      	ldr	r3, [pc, #216]	; (8002430 <main+0x7e0>)
 8002358:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800235a:	461e      	mov	r6, r3
 800235c:	4b34      	ldr	r3, [pc, #208]	; (8002430 <main+0x7e0>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a34      	ldr	r2, [pc, #208]	; (8002434 <main+0x7e4>)
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	f207 50bc 	addw	r0, r7, #1468	; 0x5bc
 8002368:	9205      	str	r2, [sp, #20]
 800236a:	9304      	str	r3, [sp, #16]
 800236c:	9603      	str	r6, [sp, #12]
 800236e:	9502      	str	r5, [sp, #8]
 8002370:	9401      	str	r4, [sp, #4]
 8002372:	9100      	str	r1, [sp, #0]
 8002374:	4673      	mov	r3, lr
 8002376:	4662      	mov	r2, ip
 8002378:	4932      	ldr	r1, [pc, #200]	; (8002444 <main+0x7f4>)
 800237a:	f016 fa93 	bl	80188a4 <siprintf>
 800237e:	f8c7 0764 	str.w	r0, [r7, #1892]	; 0x764
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 8002388:	e019      	b.n	80023be <main+0x76e>
			  CW += sprintf(CanWrite + CW, "%c", CanFrame.data.bytes[i]);
 800238a:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 800238e:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 8002392:	18d0      	adds	r0, r2, r3
 8002394:	4a27      	ldr	r2, [pc, #156]	; (8002434 <main+0x7e4>)
 8002396:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 800239a:	4413      	add	r3, r2
 800239c:	3310      	adds	r3, #16
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	491f      	ldr	r1, [pc, #124]	; (8002420 <main+0x7d0>)
 80023a4:	f016 fa7e 	bl	80188a4 <siprintf>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 80023ae:	4413      	add	r3, r2
 80023b0:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
		  for(int i = 0; i < CanFDFrame.length; i++){
 80023b4:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 80023b8:	3301      	adds	r3, #1
 80023ba:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <main+0x7cc>)
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d8df      	bhi.n	800238a <main+0x73a>
		  }
		  CW += sprintf(CanWrite + CW, "\n\r");
 80023ca:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 80023ce:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 80023d2:	4413      	add	r3, r2
 80023d4:	4a13      	ldr	r2, [pc, #76]	; (8002424 <main+0x7d4>)
 80023d6:	8811      	ldrh	r1, [r2, #0]
 80023d8:	7892      	ldrb	r2, [r2, #2]
 80023da:	8019      	strh	r1, [r3, #0]
 80023dc:	709a      	strb	r2, [r3, #2]
 80023de:	2202      	movs	r2, #2
 80023e0:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 80023e4:	4413      	add	r3, r2
 80023e6:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
		  WriteToBuff(CanWrite, CW);
 80023ea:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 80023ee:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fb84 	bl	8001b00 <WriteToBuff>
		  CAN_Flag = 0;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <main+0x7dc>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
  while (end_flag){
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <main+0x7f8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f47f ae1f 	bne.w	8002046 <main+0x3f6>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002408:	2101      	movs	r1, #1
 800240a:	4810      	ldr	r0, [pc, #64]	; (800244c <main+0x7fc>)
 800240c:	f004 feb7 	bl	800717e <HAL_GPIO_TogglePin>
 8002410:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 8002412:	4618      	mov	r0, r3
 8002414:	f207 776c 	addw	r7, r7, #1900	; 0x76c
 8002418:	46bd      	mov	sp, r7
 800241a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241c:	24001038 	.word	0x24001038
 8002420:	08019f08 	.word	0x08019f08
 8002424:	08019f0c 	.word	0x08019f0c
 8002428:	240001f4 	.word	0x240001f4
 800242c:	240001f8 	.word	0x240001f8
 8002430:	24000b24 	.word	0x24000b24
 8002434:	240010b0 	.word	0x240010b0
 8002438:	10624dd3 	.word	0x10624dd3
 800243c:	88888889 	.word	0x88888889
 8002440:	24000b38 	.word	0x24000b38
 8002444:	08019eec 	.word	0x08019eec
 8002448:	24000008 	.word	0x24000008
 800244c:	58020400 	.word	0x58020400

08002450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b0cc      	sub	sp, #304	; 0x130
 8002454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002456:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800245a:	224c      	movs	r2, #76	; 0x4c
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f016 f8af 	bl	80185c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002464:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002468:	2220      	movs	r2, #32
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f016 f8a8 	bl	80185c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	4618      	mov	r0, r3
 8002478:	23bc      	movs	r3, #188	; 0xbc
 800247a:	461a      	mov	r2, r3
 800247c:	2100      	movs	r1, #0
 800247e:	f016 f8a0 	bl	80185c2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002482:	2002      	movs	r0, #2
 8002484:	f006 f976 	bl	8008774 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	4b71      	ldr	r3, [pc, #452]	; (8002654 <SystemClock_Config+0x204>)
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	4a70      	ldr	r2, [pc, #448]	; (8002654 <SystemClock_Config+0x204>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	62d3      	str	r3, [r2, #44]	; 0x2c
 800249a:	4b6e      	ldr	r3, [pc, #440]	; (8002654 <SystemClock_Config+0x204>)
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	f003 0201 	and.w	r2, r3, #1
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <SystemClock_Config+0x208>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	4a6b      	ldr	r2, [pc, #428]	; (8002658 <SystemClock_Config+0x208>)
 80024ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024b0:	6193      	str	r3, [r2, #24]
 80024b2:	4b69      	ldr	r3, [pc, #420]	; (8002658 <SystemClock_Config+0x208>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80024c2:	bf00      	nop
 80024c4:	4b64      	ldr	r3, [pc, #400]	; (8002658 <SystemClock_Config+0x208>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d0:	d1f8      	bne.n	80024c4 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024d2:	f006 f8b5 	bl	8008640 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 80024d6:	f001 f941 	bl	800375c <HAL_GetREVID>
 80024da:	4b60      	ldr	r3, [pc, #384]	; (800265c <SystemClock_Config+0x20c>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4a5f      	ldr	r2, [pc, #380]	; (800265c <SystemClock_Config+0x20c>)
 80024e0:	f043 0318 	orr.w	r3, r3, #24
 80024e4:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80024e6:	4b5d      	ldr	r3, [pc, #372]	; (800265c <SystemClock_Config+0x20c>)
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	4a5b      	ldr	r2, [pc, #364]	; (800265c <SystemClock_Config+0x20c>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80024f6:	2325      	movs	r3, #37	; 0x25
 80024f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002500:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002504:	2301      	movs	r3, #1
 8002506:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800250a:	2301      	movs	r3, #1
 800250c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002510:	2302      	movs	r3, #2
 8002512:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002516:	2302      	movs	r3, #2
 8002518:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800251c:	2302      	movs	r3, #2
 800251e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002522:	2340      	movs	r3, #64	; 0x40
 8002524:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002528:	2302      	movs	r3, #2
 800252a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 800252e:	230a      	movs	r3, #10
 8002530:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002534:	2302      	movs	r3, #2
 8002536:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800253a:	230c      	movs	r3, #12
 800253c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800254c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002550:	4618      	mov	r0, r3
 8002552:	f006 f99d 	bl	8008890 <HAL_RCC_OscConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800255c:	f000 fbe8 	bl	8002d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002560:	233f      	movs	r3, #63	; 0x3f
 8002562:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002566:	2303      	movs	r3, #3
 8002568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002572:	2308      	movs	r3, #8
 8002574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002578:	2340      	movs	r3, #64	; 0x40
 800257a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800257e:	2340      	movs	r3, #64	; 0x40
 8002580:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002588:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800258c:	2340      	movs	r3, #64	; 0x40
 800258e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002592:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f006 fd89 	bl	80090b0 <HAL_RCC_ClockConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 80025a4:	f000 fbc4 	bl	8002d30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	4a2c      	ldr	r2, [pc, #176]	; (8002660 <SystemClock_Config+0x210>)
 80025ae:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80025b0:	f107 0308 	add.w	r3, r7, #8
 80025b4:	2202      	movs	r2, #2
 80025b6:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	220c      	movs	r2, #12
 80025be:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	2203      	movs	r2, #3
 80025c6:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	2202      	movs	r2, #2
 80025ce:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	2203      	movs	r2, #3
 80025d6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	22c0      	movs	r2, #192	; 0xc0
 80025de:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	2220      	movs	r2, #32
 80025e6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025f8:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80025fa:	f107 0308 	add.w	r3, r7, #8
 80025fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002602:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002604:	f107 0308 	add.w	r3, r7, #8
 8002608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260c:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800260e:	f107 0308 	add.w	r3, r7, #8
 8002612:	2200      	movs	r2, #0
 8002614:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800261e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	4618      	mov	r0, r3
 8002634:	f007 f8ec 	bl	8009810 <HAL_RCCEx_PeriphCLKConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 800263e:	f000 fb77 	bl	8002d30 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002642:	f006 feeb 	bl	800941c <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8002646:	f006 f8cf 	bl	80087e8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800264a:	bf00      	nop
 800264c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	58000400 	.word	0x58000400
 8002658:	58024800 	.word	0x58024800
 800265c:	58024400 	.word	0x58024400
 8002660:	00459002 	.word	0x00459002

08002664 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002668:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 800266a:	4a30      	ldr	r2, [pc, #192]	; (800272c <MX_FDCAN1_Init+0xc8>)
 800266c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800266e:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 8002670:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002674:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002676:	4b2c      	ldr	r3, [pc, #176]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 8002678:	2200      	movs	r2, #0
 800267a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 800267e:	2200      	movs	r2, #0
 8002680:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 8002684:	2200      	movs	r2, #0
 8002686:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 800268a:	2200      	movs	r2, #0
 800268c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 8002690:	2201      	movs	r2, #1
 8002692:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 8002696:	2217      	movs	r2, #23
 8002698:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 800269c:	2238      	movs	r2, #56	; 0x38
 800269e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026a2:	2217      	movs	r2, #23
 80026a4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026ae:	2205      	movs	r2, #5
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026b4:	220a      	movs	r2, #10
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026ba:	2205      	movs	r2, #5
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026c6:	2202      	movs	r2, #2
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026cc:	2202      	movs	r2, #2
 80026ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026d8:	2212      	movs	r2, #18
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026de:	2200      	movs	r2, #0
 80026e0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026e4:	2204      	movs	r2, #4
 80026e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026f0:	2204      	movs	r2, #4
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 8002702:	2200      	movs	r2, #0
 8002704:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 8002708:	2200      	movs	r2, #0
 800270a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 800270e:	2204      	movs	r2, #4
 8002710:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002712:	4805      	ldr	r0, [pc, #20]	; (8002728 <MX_FDCAN1_Init+0xc4>)
 8002714:	f003 fa16 	bl	8005b44 <HAL_FDCAN_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800271e:	f000 fb07 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	240014ec 	.word	0x240014ec
 800272c:	4000a000 	.word	0x4000a000

08002730 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002734:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 8002736:	4a2f      	ldr	r2, [pc, #188]	; (80027f4 <MX_FDCAN2_Init+0xc4>)
 8002738:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800273a:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002740:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 8002748:	2200      	movs	r2, #0
 800274a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 800274e:	2200      	movs	r2, #0
 8002750:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002752:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 8002754:	2200      	movs	r2, #0
 8002756:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8002758:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 800275a:	2201      	movs	r2, #1
 800275c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 8002760:	2201      	movs	r2, #1
 8002762:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 8002766:	2202      	movs	r2, #2
 8002768:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 800276c:	2202      	movs	r2, #2
 800276e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 8002772:	2201      	movs	r2, #1
 8002774:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002776:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 8002778:	2201      	movs	r2, #1
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800277c:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 800277e:	2201      	movs	r2, #1
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 8002784:	2201      	movs	r2, #1
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 800278a:	2200      	movs	r2, #0
 800278c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 8002790:	2200      	movs	r2, #0
 8002792:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 8002796:	2200      	movs	r2, #0
 8002798:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 800279c:	2200      	movs	r2, #0
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 80027a2:	2204      	movs	r2, #4
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80027ac:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 80027ae:	2204      	movs	r2, #4
 80027b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 80027ba:	2204      	movs	r2, #4
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80027d0:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 80027d8:	2204      	movs	r2, #4
 80027da:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80027dc:	4804      	ldr	r0, [pc, #16]	; (80027f0 <MX_FDCAN2_Init+0xc0>)
 80027de:	f003 f9b1 	bl	8005b44 <HAL_FDCAN_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80027e8:	f000 faa2 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	240016a0 	.word	0x240016a0
 80027f4:	4000a400 	.word	0x4000a400

080027f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800280c:	2300      	movs	r3, #0
 800280e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <MX_RTC_Init+0xb4>)
 8002812:	4a27      	ldr	r2, [pc, #156]	; (80028b0 <MX_RTC_Init+0xb8>)
 8002814:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002816:	4b25      	ldr	r3, [pc, #148]	; (80028ac <MX_RTC_Init+0xb4>)
 8002818:	2200      	movs	r2, #0
 800281a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <MX_RTC_Init+0xb4>)
 800281e:	2201      	movs	r2, #1
 8002820:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <MX_RTC_Init+0xb4>)
 8002824:	f244 0204 	movw	r2, #16388	; 0x4004
 8002828:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <MX_RTC_Init+0xb4>)
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <MX_RTC_Init+0xb4>)
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <MX_RTC_Init+0xb4>)
 8002838:	2200      	movs	r2, #0
 800283a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <MX_RTC_Init+0xb4>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002842:	481a      	ldr	r0, [pc, #104]	; (80028ac <MX_RTC_Init+0xb4>)
 8002844:	f008 fea8 	bl	800b598 <HAL_RTC_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800284e:	f000 fa6f 	bl	8002d30 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	2200      	movs	r2, #0
 800286a:	4619      	mov	r1, r3
 800286c:	480f      	ldr	r0, [pc, #60]	; (80028ac <MX_RTC_Init+0xb4>)
 800286e:	f008 ff0b 	bl	800b688 <HAL_RTC_SetTime>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002878:	f000 fa5a 	bl	8002d30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800287c:	2301      	movs	r3, #1
 800287e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002880:	2301      	movs	r3, #1
 8002882:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8002884:	2301      	movs	r3, #1
 8002886:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800288c:	463b      	mov	r3, r7
 800288e:	2200      	movs	r2, #0
 8002890:	4619      	mov	r1, r3
 8002892:	4806      	ldr	r0, [pc, #24]	; (80028ac <MX_RTC_Init+0xb4>)
 8002894:	f008 fff2 	bl	800b87c <HAL_RTC_SetDate>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800289e:	f000 fa47 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	240014c8 	.word	0x240014c8
 80028b0:	58004000 	.word	0x58004000

080028b4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80028b8:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <MX_SDMMC1_SD_Init+0x3c>)
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <MX_SDMMC1_SD_Init+0x40>)
 80028bc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80028be:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <MX_SDMMC1_SD_Init+0x3c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <MX_SDMMC1_SD_Init+0x3c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <MX_SDMMC1_SD_Init+0x3c>)
 80028cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028d0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <MX_SDMMC1_SD_Init+0x3c>)
 80028d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028d8:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <MX_SDMMC1_SD_Init+0x3c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <MX_SDMMC1_SD_Init+0x3c>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	24001448 	.word	0x24001448
 80028f4:	52007000 	.word	0x52007000

080028f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <MX_SPI1_Init+0xa4>)
 80028fe:	4a28      	ldr	r2, [pc, #160]	; (80029a0 <MX_SPI1_Init+0xa8>)
 8002900:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <MX_SPI1_Init+0xa4>)
 8002904:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002908:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <MX_SPI1_Init+0xa4>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <MX_SPI1_Init+0xa4>)
 8002912:	2207      	movs	r2, #7
 8002914:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <MX_SPI1_Init+0xa4>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800291c:	4b1f      	ldr	r3, [pc, #124]	; (800299c <MX_SPI1_Init+0xa4>)
 800291e:	2200      	movs	r2, #0
 8002920:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <MX_SPI1_Init+0xa4>)
 8002924:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002928:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <MX_SPI1_Init+0xa4>)
 800292c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002930:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <MX_SPI1_Init+0xa4>)
 8002934:	2200      	movs	r2, #0
 8002936:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <MX_SPI1_Init+0xa4>)
 800293a:	2200      	movs	r2, #0
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <MX_SPI1_Init+0xa4>)
 8002940:	2200      	movs	r2, #0
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002944:	4b15      	ldr	r3, [pc, #84]	; (800299c <MX_SPI1_Init+0xa4>)
 8002946:	2200      	movs	r2, #0
 8002948:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <MX_SPI1_Init+0xa4>)
 800294c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002950:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <MX_SPI1_Init+0xa4>)
 8002954:	2200      	movs	r2, #0
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002958:	4b10      	ldr	r3, [pc, #64]	; (800299c <MX_SPI1_Init+0xa4>)
 800295a:	2200      	movs	r2, #0
 800295c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <MX_SPI1_Init+0xa4>)
 8002960:	2200      	movs	r2, #0
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002964:	4b0d      	ldr	r3, [pc, #52]	; (800299c <MX_SPI1_Init+0xa4>)
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <MX_SPI1_Init+0xa4>)
 800296c:	2200      	movs	r2, #0
 800296e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <MX_SPI1_Init+0xa4>)
 8002972:	2200      	movs	r2, #0
 8002974:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_SPI1_Init+0xa4>)
 8002978:	2200      	movs	r2, #0
 800297a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <MX_SPI1_Init+0xa4>)
 800297e:	2200      	movs	r2, #0
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_SPI1_Init+0xa4>)
 8002984:	2200      	movs	r2, #0
 8002986:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002988:	4804      	ldr	r0, [pc, #16]	; (800299c <MX_SPI1_Init+0xa4>)
 800298a:	f00b f89f 	bl	800dacc <HAL_SPI_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002994:	f000 f9cc 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	24001618 	.word	0x24001618
 80029a0:	40013000 	.word	0x40013000

080029a4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <MX_UART8_Init+0x90>)
 80029aa:	4a23      	ldr	r2, [pc, #140]	; (8002a38 <MX_UART8_Init+0x94>)
 80029ac:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80029ae:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <MX_UART8_Init+0x90>)
 80029b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80029b6:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <MX_UART8_Init+0x90>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <MX_UART8_Init+0x90>)
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80029c2:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <MX_UART8_Init+0x90>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <MX_UART8_Init+0x90>)
 80029ca:	220c      	movs	r2, #12
 80029cc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <MX_UART8_Init+0x90>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <MX_UART8_Init+0x90>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <MX_UART8_Init+0x90>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <MX_UART8_Init+0x90>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <MX_UART8_Init+0x90>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80029ec:	4811      	ldr	r0, [pc, #68]	; (8002a34 <MX_UART8_Init+0x90>)
 80029ee:	f00c f91e 	bl	800ec2e <HAL_UART_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80029f8:	f000 f99a 	bl	8002d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029fc:	2100      	movs	r1, #0
 80029fe:	480d      	ldr	r0, [pc, #52]	; (8002a34 <MX_UART8_Init+0x90>)
 8002a00:	f00d faae 	bl	800ff60 <HAL_UARTEx_SetTxFifoThreshold>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002a0a:	f000 f991 	bl	8002d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4808      	ldr	r0, [pc, #32]	; (8002a34 <MX_UART8_Init+0x90>)
 8002a12:	f00d fae3 	bl	800ffdc <HAL_UARTEx_SetRxFifoThreshold>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002a1c:	f000 f988 	bl	8002d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002a20:	4804      	ldr	r0, [pc, #16]	; (8002a34 <MX_UART8_Init+0x90>)
 8002a22:	f00d fa64 	bl	800feee <HAL_UARTEx_DisableFifoMode>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002a2c:	f000 f980 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	2400158c 	.word	0x2400158c
 8002a38:	40007c00 	.word	0x40007c00

08002a3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a42:	4a23      	ldr	r2, [pc, #140]	; (8002ad0 <MX_USART3_UART_Init+0x94>)
 8002a44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002a46:	4b21      	ldr	r3, [pc, #132]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a48:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002a4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4e:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a62:	220c      	movs	r2, #12
 8002a64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a6c:	4b17      	ldr	r3, [pc, #92]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a84:	4811      	ldr	r0, [pc, #68]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a86:	f00c f8d2 	bl	800ec2e <HAL_UART_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002a90:	f000 f94e 	bl	8002d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a94:	2100      	movs	r1, #0
 8002a96:	480d      	ldr	r0, [pc, #52]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002a98:	f00d fa62 	bl	800ff60 <HAL_UARTEx_SetTxFifoThreshold>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002aa2:	f000 f945 	bl	8002d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4808      	ldr	r0, [pc, #32]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002aaa:	f00d fa97 	bl	800ffdc <HAL_UARTEx_SetRxFifoThreshold>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ab4:	f000 f93c 	bl	8002d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ab8:	4804      	ldr	r0, [pc, #16]	; (8002acc <MX_USART3_UART_Init+0x90>)
 8002aba:	f00d fa18 	bl	800feee <HAL_UARTEx_DisableFifoMode>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ac4:	f000 f934 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	240013bc 	.word	0x240013bc
 8002ad0:	40004800 	.word	0x40004800

08002ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <MX_DMA_Init+0x3c>)
 8002adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ae0:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <MX_DMA_Init+0x3c>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <MX_DMA_Init+0x3c>)
 8002aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002af8:	2200      	movs	r2, #0
 8002afa:	2100      	movs	r1, #0
 8002afc:	200c      	movs	r0, #12
 8002afe:	f000 ff14 	bl	800392a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b02:	200c      	movs	r0, #12
 8002b04:	f000 ff2b 	bl	800395e <HAL_NVIC_EnableIRQ>

}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	58024400 	.word	0x58024400

08002b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08c      	sub	sp, #48	; 0x30
 8002b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1a:	f107 031c 	add.w	r3, r7, #28
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	60da      	str	r2, [r3, #12]
 8002b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b30:	4a6b      	ldr	r2, [pc, #428]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b32:	f043 0310 	orr.w	r3, r3, #16
 8002b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3a:	4b69      	ldr	r3, [pc, #420]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b48:	4b65      	ldr	r3, [pc, #404]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4e:	4a64      	ldr	r2, [pc, #400]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b58:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b66:	4b5e      	ldr	r3, [pc, #376]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6c:	4a5c      	ldr	r2, [pc, #368]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b76:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b84:	4b56      	ldr	r3, [pc, #344]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b8a:	4a55      	ldr	r2, [pc, #340]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b94:	4b52      	ldr	r3, [pc, #328]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba2:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba8:	4a4d      	ldr	r2, [pc, #308]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002baa:	f043 0302 	orr.w	r3, r3, #2
 8002bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bb2:	4b4b      	ldr	r3, [pc, #300]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bc0:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc6:	4a46      	ldr	r2, [pc, #280]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002bc8:	f043 0308 	orr.w	r3, r3, #8
 8002bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bd0:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <MX_GPIO_Init+0x1cc>)
 8002bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8002bde:	2200      	movs	r2, #0
 8002be0:	210c      	movs	r1, #12
 8002be2:	4840      	ldr	r0, [pc, #256]	; (8002ce4 <MX_GPIO_Init+0x1d0>)
 8002be4:	f004 fab2 	bl	800714c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2103      	movs	r1, #3
 8002bec:	483e      	ldr	r0, [pc, #248]	; (8002ce8 <MX_GPIO_Init+0x1d4>)
 8002bee:	f004 faad 	bl	800714c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	483d      	ldr	r0, [pc, #244]	; (8002cec <MX_GPIO_Init+0x1d8>)
 8002bf8:	f004 faa8 	bl	800714c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c02:	483b      	ldr	r0, [pc, #236]	; (8002cf0 <MX_GPIO_Init+0x1dc>)
 8002c04:	f004 faa2 	bl	800714c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8002c08:	230c      	movs	r3, #12
 8002c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c18:	f107 031c 	add.w	r3, r7, #28
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4831      	ldr	r0, [pc, #196]	; (8002ce4 <MX_GPIO_Init+0x1d0>)
 8002c20:	f004 f8cc 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8002c24:	2303      	movs	r3, #3
 8002c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4619      	mov	r1, r3
 8002c3a:	482b      	ldr	r0, [pc, #172]	; (8002ce8 <MX_GPIO_Init+0x1d4>)
 8002c3c:	f004 f8be 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8002c40:	2304      	movs	r3, #4
 8002c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c44:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <MX_GPIO_Init+0x1e0>)
 8002c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4619      	mov	r1, r3
 8002c52:	4825      	ldr	r0, [pc, #148]	; (8002ce8 <MX_GPIO_Init+0x1d4>)
 8002c54:	f004 f8b2 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002c68:	f107 031c 	add.w	r3, r7, #28
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	481f      	ldr	r0, [pc, #124]	; (8002cec <MX_GPIO_Init+0x1d8>)
 8002c70:	f004 f8a4 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8002c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <MX_GPIO_Init+0x1e0>)
 8002c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002c82:	f107 031c 	add.w	r3, r7, #28
 8002c86:	4619      	mov	r1, r3
 8002c88:	4816      	ldr	r0, [pc, #88]	; (8002ce4 <MX_GPIO_Init+0x1d0>)
 8002c8a:	f004 f897 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8002c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c94:	2301      	movs	r3, #1
 8002c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4812      	ldr	r0, [pc, #72]	; (8002cf0 <MX_GPIO_Init+0x1dc>)
 8002ca8:	f004 f888 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8002cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8002cba:	f107 031c 	add.w	r3, r7, #28
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4809      	ldr	r0, [pc, #36]	; (8002ce8 <MX_GPIO_Init+0x1d4>)
 8002cc2:	f004 f87b 	bl	8006dbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2100      	movs	r1, #0
 8002cca:	2017      	movs	r0, #23
 8002ccc:	f000 fe2d 	bl	800392a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cd0:	2017      	movs	r0, #23
 8002cd2:	f000 fe44 	bl	800395e <HAL_NVIC_EnableIRQ>

}
 8002cd6:	bf00      	nop
 8002cd8:	3730      	adds	r7, #48	; 0x30
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	58021000 	.word	0x58021000
 8002ce8:	58020000 	.word	0x58020000
 8002cec:	58020400 	.word	0x58020400
 8002cf0:	58020c00 	.word	0x58020c00
 8002cf4:	11110000 	.word	0x11110000

08002cf8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	24000008 	.word	0x24000008

08002d18 <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_PWR_PVDCallback+0x14>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	24000008 	.word	0x24000008

08002d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8002d36:	4802      	ldr	r0, [pc, #8]	; (8002d40 <Error_Handler+0x10>)
 8002d38:	f015 fd68 	bl	801880c <puts>
 8002d3c:	e7fb      	b.n	8002d36 <Error_Handler+0x6>
 8002d3e:	bf00      	nop
 8002d40:	08019f28 	.word	0x08019f28

08002d44 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002d4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d50:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002d5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d60:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002d64:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002d6c:	e000      	b.n	8002d70 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002d6e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002d70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f9      	beq.n	8002d6e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002d7a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002d84:	687b      	ldr	r3, [r7, #4]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
  int i=0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e009      	b.n	8002dbc <_write+0x2a>
    ITM_SendChar((*ptr++));
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	60ba      	str	r2, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ffc7 	bl	8002d44 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	3301      	adds	r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	dbf1      	blt.n	8002da8 <_write+0x16>
  return len;
 8002dc4:	687b      	ldr	r3, [r7, #4]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002dd6:	f107 0308 	add.w	r3, r7, #8
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <HAL_MspInit+0x60>)
 8002de2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <HAL_MspInit+0x60>)
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_MspInit+0x60>)
 8002df2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2100      	movs	r1, #0
 8002e02:	2001      	movs	r0, #1
 8002e04:	f000 fd91 	bl	800392a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f000 fda8 	bl	800395e <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002e0e:	23c0      	movs	r3, #192	; 0xc0
 8002e10:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8002e12:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002e16:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002e18:	f107 0308 	add.w	r3, r7, #8
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f005 fc1f 	bl	8008660 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002e22:	f005 fc97 	bl	8008754 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	58024400 	.word	0x58024400

08002e34 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08c      	sub	sp, #48	; 0x30
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <HAL_FDCAN_MspInit+0x140>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d14e      	bne.n	8002ef4 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <HAL_FDCAN_MspInit+0x144>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	4a46      	ldr	r2, [pc, #280]	; (8002f78 <HAL_FDCAN_MspInit+0x144>)
 8002e5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002e60:	4b45      	ldr	r3, [pc, #276]	; (8002f78 <HAL_FDCAN_MspInit+0x144>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d10e      	bne.n	8002e86 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002e68:	4b44      	ldr	r3, [pc, #272]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002e6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e6e:	4a43      	ldr	r2, [pc, #268]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002e78:	4b40      	ldr	r3, [pc, #256]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002e7a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e86:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8c:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002e8e:	f043 0302 	orr.w	r3, r3, #2
 8002e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e96:	4b39      	ldr	r3, [pc, #228]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ea4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002eb6:	2309      	movs	r3, #9
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eba:	f107 031c 	add.w	r3, r7, #28
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	482f      	ldr	r0, [pc, #188]	; (8002f80 <HAL_FDCAN_MspInit+0x14c>)
 8002ec2:	f003 ff7b 	bl	8006dbc <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8002ec6:	2040      	movs	r0, #64	; 0x40
 8002ec8:	f004 f98e 	bl	80071e8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8002ecc:	2080      	movs	r0, #128	; 0x80
 8002ece:	f004 f98b 	bl	80071e8 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	2013      	movs	r0, #19
 8002ed8:	f000 fd27 	bl	800392a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002edc:	2013      	movs	r0, #19
 8002ede:	f000 fd3e 	bl	800395e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	2015      	movs	r0, #21
 8002ee8:	f000 fd1f 	bl	800392a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002eec:	2015      	movs	r0, #21
 8002eee:	f000 fd36 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002ef2:	e03b      	b.n	8002f6c <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <HAL_FDCAN_MspInit+0x150>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d136      	bne.n	8002f6c <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <HAL_FDCAN_MspInit+0x144>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	4a1c      	ldr	r2, [pc, #112]	; (8002f78 <HAL_FDCAN_MspInit+0x144>)
 8002f06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <HAL_FDCAN_MspInit+0x144>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d10e      	bne.n	8002f2e <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002f12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f16:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002f22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2e:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f34:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002f36:	f043 0302 	orr.w	r3, r3, #2
 8002f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_FDCAN_MspInit+0x148>)
 8002f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f4c:	2360      	movs	r3, #96	; 0x60
 8002f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002f5c:	2309      	movs	r3, #9
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	f107 031c 	add.w	r3, r7, #28
 8002f64:	4619      	mov	r1, r3
 8002f66:	4806      	ldr	r0, [pc, #24]	; (8002f80 <HAL_FDCAN_MspInit+0x14c>)
 8002f68:	f003 ff28 	bl	8006dbc <HAL_GPIO_Init>
}
 8002f6c:	bf00      	nop
 8002f6e:	3730      	adds	r7, #48	; 0x30
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	4000a000 	.word	0x4000a000
 8002f78:	24000b3c 	.word	0x24000b3c
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	58020400 	.word	0x58020400
 8002f84:	4000a400 	.word	0x4000a400

08002f88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <HAL_RTC_MspInit+0x2c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d105      	bne.n	8002fa6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <HAL_RTC_MspInit+0x30>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a06      	ldr	r2, [pc, #24]	; (8002fb8 <HAL_RTC_MspInit+0x30>)
 8002fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	58004000 	.word	0x58004000
 8002fb8:	58024400 	.word	0x58024400

08002fbc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2e      	ldr	r2, [pc, #184]	; (8003094 <HAL_SD_MspInit+0xd8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d155      	bne.n	800308a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fde:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_SD_MspInit+0xdc>)
 8002fe0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	; (8003098 <HAL_SD_MspInit+0xdc>)
 8002fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_SD_MspInit+0xdc>)
 8002ff0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ffc:	4b26      	ldr	r3, [pc, #152]	; (8003098 <HAL_SD_MspInit+0xdc>)
 8002ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003002:	4a25      	ldr	r2, [pc, #148]	; (8003098 <HAL_SD_MspInit+0xdc>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_SD_MspInit+0xdc>)
 800300e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800301a:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <HAL_SD_MspInit+0xdc>)
 800301c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003020:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <HAL_SD_MspInit+0xdc>)
 8003022:	f043 0308 	orr.w	r3, r3, #8
 8003026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_SD_MspInit+0xdc>)
 800302c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003038:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800303c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
 8003040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003046:	2303      	movs	r3, #3
 8003048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800304a:	230c      	movs	r3, #12
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	4619      	mov	r1, r3
 8003054:	4811      	ldr	r0, [pc, #68]	; (800309c <HAL_SD_MspInit+0xe0>)
 8003056:	f003 feb1 	bl	8006dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800305a:	2304      	movs	r3, #4
 800305c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003066:	2303      	movs	r3, #3
 8003068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800306a:	230c      	movs	r3, #12
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306e:	f107 0314 	add.w	r3, r7, #20
 8003072:	4619      	mov	r1, r3
 8003074:	480a      	ldr	r0, [pc, #40]	; (80030a0 <HAL_SD_MspInit+0xe4>)
 8003076:	f003 fea1 	bl	8006dbc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	2031      	movs	r0, #49	; 0x31
 8003080:	f000 fc53 	bl	800392a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003084:	2031      	movs	r0, #49	; 0x31
 8003086:	f000 fc6a 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800308a:	bf00      	nop
 800308c:	3728      	adds	r7, #40	; 0x28
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	52007000 	.word	0x52007000
 8003098:	58024400 	.word	0x58024400
 800309c:	58020800 	.word	0x58020800
 80030a0:	58020c00 	.word	0x58020c00

080030a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1a      	ldr	r2, [pc, #104]	; (800312c <HAL_SPI_MspInit+0x88>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d12d      	bne.n	8003122 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030c6:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_SPI_MspInit+0x8c>)
 80030c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030cc:	4a18      	ldr	r2, [pc, #96]	; (8003130 <HAL_SPI_MspInit+0x8c>)
 80030ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <HAL_SPI_MspInit+0x8c>)
 80030d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_SPI_MspInit+0x8c>)
 80030e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ea:	4a11      	ldr	r2, [pc, #68]	; (8003130 <HAL_SPI_MspInit+0x8c>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f4:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <HAL_SPI_MspInit+0x8c>)
 80030f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003102:	23e0      	movs	r3, #224	; 0xe0
 8003104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003106:	2302      	movs	r3, #2
 8003108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310e:	2303      	movs	r3, #3
 8003110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003112:	2305      	movs	r3, #5
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003116:	f107 0314 	add.w	r3, r7, #20
 800311a:	4619      	mov	r1, r3
 800311c:	4805      	ldr	r0, [pc, #20]	; (8003134 <HAL_SPI_MspInit+0x90>)
 800311e:	f003 fe4d 	bl	8006dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003122:	bf00      	nop
 8003124:	3728      	adds	r7, #40	; 0x28
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40013000 	.word	0x40013000
 8003130:	58024400 	.word	0x58024400
 8003134:	58020000 	.word	0x58020000

08003138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08c      	sub	sp, #48	; 0x30
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a4b      	ldr	r2, [pc, #300]	; (8003284 <HAL_UART_MspInit+0x14c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d12e      	bne.n	80031b8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800315a:	4b4b      	ldr	r3, [pc, #300]	; (8003288 <HAL_UART_MspInit+0x150>)
 800315c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003160:	4a49      	ldr	r2, [pc, #292]	; (8003288 <HAL_UART_MspInit+0x150>)
 8003162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003166:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800316a:	4b47      	ldr	r3, [pc, #284]	; (8003288 <HAL_UART_MspInit+0x150>)
 800316c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003178:	4b43      	ldr	r3, [pc, #268]	; (8003288 <HAL_UART_MspInit+0x150>)
 800317a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800317e:	4a42      	ldr	r2, [pc, #264]	; (8003288 <HAL_UART_MspInit+0x150>)
 8003180:	f043 0310 	orr.w	r3, r3, #16
 8003184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003188:	4b3f      	ldr	r3, [pc, #252]	; (8003288 <HAL_UART_MspInit+0x150>)
 800318a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003196:	2303      	movs	r3, #3
 8003198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a2:	2300      	movs	r3, #0
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80031a6:	2308      	movs	r3, #8
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031aa:	f107 031c 	add.w	r3, r7, #28
 80031ae:	4619      	mov	r1, r3
 80031b0:	4836      	ldr	r0, [pc, #216]	; (800328c <HAL_UART_MspInit+0x154>)
 80031b2:	f003 fe03 	bl	8006dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80031b6:	e061      	b.n	800327c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a34      	ldr	r2, [pc, #208]	; (8003290 <HAL_UART_MspInit+0x158>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d15c      	bne.n	800327c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_UART_MspInit+0x150>)
 80031c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031c8:	4a2f      	ldr	r2, [pc, #188]	; (8003288 <HAL_UART_MspInit+0x150>)
 80031ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031d2:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <HAL_UART_MspInit+0x150>)
 80031d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e0:	4b29      	ldr	r3, [pc, #164]	; (8003288 <HAL_UART_MspInit+0x150>)
 80031e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e6:	4a28      	ldr	r2, [pc, #160]	; (8003288 <HAL_UART_MspInit+0x150>)
 80031e8:	f043 0308 	orr.w	r3, r3, #8
 80031ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f0:	4b25      	ldr	r3, [pc, #148]	; (8003288 <HAL_UART_MspInit+0x150>)
 80031f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320c:	2300      	movs	r3, #0
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003210:	2307      	movs	r3, #7
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	4619      	mov	r1, r3
 800321a:	481e      	ldr	r0, [pc, #120]	; (8003294 <HAL_UART_MspInit+0x15c>)
 800321c:	f003 fdce 	bl	8006dbc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_UART_MspInit+0x160>)
 8003222:	4a1e      	ldr	r2, [pc, #120]	; (800329c <HAL_UART_MspInit+0x164>)
 8003224:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_UART_MspInit+0x160>)
 8003228:	222d      	movs	r2, #45	; 0x2d
 800322a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800322c:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <HAL_UART_MspInit+0x160>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003232:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_UART_MspInit+0x160>)
 8003234:	2200      	movs	r2, #0
 8003236:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003238:	4b17      	ldr	r3, [pc, #92]	; (8003298 <HAL_UART_MspInit+0x160>)
 800323a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800323e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003240:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_UART_MspInit+0x160>)
 8003242:	2200      	movs	r2, #0
 8003244:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_UART_MspInit+0x160>)
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_UART_MspInit+0x160>)
 800324e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003252:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_UART_MspInit+0x160>)
 8003256:	2200      	movs	r2, #0
 8003258:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_UART_MspInit+0x160>)
 800325c:	2200      	movs	r2, #0
 800325e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003260:	480d      	ldr	r0, [pc, #52]	; (8003298 <HAL_UART_MspInit+0x160>)
 8003262:	f000 fb97 	bl	8003994 <HAL_DMA_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_UART_MspInit+0x138>
      Error_Handler();
 800326c:	f7ff fd60 	bl	8002d30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HAL_UART_MspInit+0x160>)
 8003274:	679a      	str	r2, [r3, #120]	; 0x78
 8003276:	4a08      	ldr	r2, [pc, #32]	; (8003298 <HAL_UART_MspInit+0x160>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800327c:	bf00      	nop
 800327e:	3730      	adds	r7, #48	; 0x30
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40007c00 	.word	0x40007c00
 8003288:	58024400 	.word	0x58024400
 800328c:	58021000 	.word	0x58021000
 8003290:	40004800 	.word	0x40004800
 8003294:	58020c00 	.word	0x58020c00
 8003298:	24001344 	.word	0x24001344
 800329c:	40020028 	.word	0x40020028

080032a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80032a4:	f006 fa98 	bl	80097d8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032a8:	e7fe      	b.n	80032a8 <NMI_Handler+0x8>

080032aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ae:	e7fe      	b.n	80032ae <HardFault_Handler+0x4>

080032b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b4:	e7fe      	b.n	80032b4 <MemManage_Handler+0x4>

080032b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ba:	e7fe      	b.n	80032ba <BusFault_Handler+0x4>

080032bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <UsageFault_Handler+0x4>

080032c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f0:	f000 f9f2 	bl	80036d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 80032fc:	f005 fa84 	bl	8008808 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}

08003304 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <DMA1_Stream1_IRQHandler+0x10>)
 800330a:	f001 f909 	bl	8004520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	24001344 	.word	0x24001344

08003318 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800331c:	4802      	ldr	r0, [pc, #8]	; (8003328 <FDCAN1_IT0_IRQHandler+0x10>)
 800331e:	f003 f8bd 	bl	800649c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	240014ec 	.word	0x240014ec

0800332c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003330:	4802      	ldr	r0, [pc, #8]	; (800333c <FDCAN1_IT1_IRQHandler+0x10>)
 8003332:	f003 f8b3 	bl	800649c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	240014ec 	.word	0x240014ec

08003340 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003344:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003348:	f003 ff34 	bl	80071b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}

08003350 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <SDMMC1_IRQHandler+0x10>)
 8003356:	f009 f9c1 	bl	800c6dc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	24001448 	.word	0x24001448

08003364 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <OTG_FS_IRQHandler+0x10>)
 800336a:	f004 f8b8 	bl	80074de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2400207c 	.word	0x2400207c

08003378 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	e00a      	b.n	80033a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800338a:	f3af 8000 	nop.w
 800338e:	4601      	mov	r1, r0
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	60ba      	str	r2, [r7, #8]
 8003396:	b2ca      	uxtb	r2, r1
 8003398:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3301      	adds	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	dbf0      	blt.n	800338a <_read+0x12>
	}

return len;
 80033a8:	687b      	ldr	r3, [r7, #4]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
	return -1;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033da:	605a      	str	r2, [r3, #4]
	return 0;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <_isatty>:

int _isatty(int file)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
	return 1;
 80033f2:	2301      	movs	r3, #1
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
	return 0;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003424:	4a14      	ldr	r2, [pc, #80]	; (8003478 <_sbrk+0x5c>)
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <_sbrk+0x60>)
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <_sbrk+0x64>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <_sbrk+0x64>)
 800343a:	4a12      	ldr	r2, [pc, #72]	; (8003484 <_sbrk+0x68>)
 800343c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <_sbrk+0x64>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	429a      	cmp	r2, r3
 800344a:	d207      	bcs.n	800345c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800344c:	f015 f874 	bl	8018538 <__errno>
 8003450:	4602      	mov	r2, r0
 8003452:	230c      	movs	r3, #12
 8003454:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	e009      	b.n	8003470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <_sbrk+0x64>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <_sbrk+0x64>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	4a05      	ldr	r2, [pc, #20]	; (8003480 <_sbrk+0x64>)
 800346c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800346e:	68fb      	ldr	r3, [r7, #12]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	24080000 	.word	0x24080000
 800347c:	00000400 	.word	0x00000400
 8003480:	24000b40 	.word	0x24000b40
 8003484:	24002488 	.word	0x24002488

08003488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800348c:	4b39      	ldr	r3, [pc, #228]	; (8003574 <SystemInit+0xec>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	4a38      	ldr	r2, [pc, #224]	; (8003574 <SystemInit+0xec>)
 8003494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800349c:	4b36      	ldr	r3, [pc, #216]	; (8003578 <SystemInit+0xf0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d807      	bhi.n	80034b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034a8:	4b33      	ldr	r3, [pc, #204]	; (8003578 <SystemInit+0xf0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 030f 	bic.w	r3, r3, #15
 80034b0:	4a31      	ldr	r2, [pc, #196]	; (8003578 <SystemInit+0xf0>)
 80034b2:	f043 0307 	orr.w	r3, r3, #7
 80034b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80034b8:	4b30      	ldr	r3, [pc, #192]	; (800357c <SystemInit+0xf4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a2f      	ldr	r2, [pc, #188]	; (800357c <SystemInit+0xf4>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034c4:	4b2d      	ldr	r3, [pc, #180]	; (800357c <SystemInit+0xf4>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80034ca:	4b2c      	ldr	r3, [pc, #176]	; (800357c <SystemInit+0xf4>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	492b      	ldr	r1, [pc, #172]	; (800357c <SystemInit+0xf4>)
 80034d0:	4b2b      	ldr	r3, [pc, #172]	; (8003580 <SystemInit+0xf8>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034d6:	4b28      	ldr	r3, [pc, #160]	; (8003578 <SystemInit+0xf0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	2b07      	cmp	r3, #7
 80034e0:	d907      	bls.n	80034f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034e2:	4b25      	ldr	r3, [pc, #148]	; (8003578 <SystemInit+0xf0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 030f 	bic.w	r3, r3, #15
 80034ea:	4a23      	ldr	r2, [pc, #140]	; (8003578 <SystemInit+0xf0>)
 80034ec:	f043 0307 	orr.w	r3, r3, #7
 80034f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <SystemInit+0xf4>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80034f8:	4b20      	ldr	r3, [pc, #128]	; (800357c <SystemInit+0xf4>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80034fe:	4b1f      	ldr	r3, [pc, #124]	; (800357c <SystemInit+0xf4>)
 8003500:	2200      	movs	r2, #0
 8003502:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <SystemInit+0xf4>)
 8003506:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <SystemInit+0xfc>)
 8003508:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800350a:	4b1c      	ldr	r3, [pc, #112]	; (800357c <SystemInit+0xf4>)
 800350c:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <SystemInit+0x100>)
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <SystemInit+0xf4>)
 8003512:	4a1e      	ldr	r2, [pc, #120]	; (800358c <SystemInit+0x104>)
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003516:	4b19      	ldr	r3, [pc, #100]	; (800357c <SystemInit+0xf4>)
 8003518:	2200      	movs	r2, #0
 800351a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800351c:	4b17      	ldr	r3, [pc, #92]	; (800357c <SystemInit+0xf4>)
 800351e:	4a1b      	ldr	r2, [pc, #108]	; (800358c <SystemInit+0x104>)
 8003520:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <SystemInit+0xf4>)
 8003524:	2200      	movs	r2, #0
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003528:	4b14      	ldr	r3, [pc, #80]	; (800357c <SystemInit+0xf4>)
 800352a:	4a18      	ldr	r2, [pc, #96]	; (800358c <SystemInit+0x104>)
 800352c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <SystemInit+0xf4>)
 8003530:	2200      	movs	r2, #0
 8003532:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <SystemInit+0xf4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a10      	ldr	r2, [pc, #64]	; (800357c <SystemInit+0xf4>)
 800353a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <SystemInit+0xf4>)
 8003542:	2200      	movs	r2, #0
 8003544:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <SystemInit+0x108>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <SystemInit+0x10c>)
 800354c:	4013      	ands	r3, r2
 800354e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003552:	d202      	bcs.n	800355a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003554:	4b10      	ldr	r3, [pc, #64]	; (8003598 <SystemInit+0x110>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <SystemInit+0x114>)
 800355c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003560:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <SystemInit+0xec>)
 8003564:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003568:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00
 8003578:	52002000 	.word	0x52002000
 800357c:	58024400 	.word	0x58024400
 8003580:	eaf6ed7f 	.word	0xeaf6ed7f
 8003584:	02020200 	.word	0x02020200
 8003588:	01ff0000 	.word	0x01ff0000
 800358c:	01010280 	.word	0x01010280
 8003590:	5c001000 	.word	0x5c001000
 8003594:	ffff0000 	.word	0xffff0000
 8003598:	51008108 	.word	0x51008108
 800359c:	52004000 	.word	0x52004000

080035a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80035a4:	f7ff ff70 	bl	8003488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035aa:	e003      	b.n	80035b4 <LoopCopyDataInit>

080035ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80035ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035b2:	3104      	adds	r1, #4

080035b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035b4:	480a      	ldr	r0, [pc, #40]	; (80035e0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80035b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035bc:	d3f6      	bcc.n	80035ac <CopyDataInit>
  ldr  r2, =_sbss
 80035be:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80035c0:	e002      	b.n	80035c8 <LoopFillZerobss>

080035c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035c4:	f842 3b04 	str.w	r3, [r2], #4

080035c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80035ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035cc:	d3f9      	bcc.n	80035c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035ce:	f014 ffb9 	bl	8018544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035d2:	f7fe fb3d 	bl	8001c50 <main>
  bx  lr    
 80035d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035d8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80035dc:	0801a1bc 	.word	0x0801a1bc
  ldr  r0, =_sdata
 80035e0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80035e4:	240001d8 	.word	0x240001d8
  ldr  r2, =_sbss
 80035e8:	240001d8 	.word	0x240001d8
  ldr  r3, = _ebss
 80035ec:	24002488 	.word	0x24002488

080035f0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f0:	e7fe      	b.n	80035f0 <ADC3_IRQHandler>
	...

080035f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035fa:	2003      	movs	r0, #3
 80035fc:	f000 f98a 	bl	8003914 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003600:	f005 ff1c 	bl	800943c <HAL_RCC_GetSysClockFreq>
 8003604:	4601      	mov	r1, r0
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <HAL_Init+0x68>)
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	4a13      	ldr	r2, [pc, #76]	; (8003660 <HAL_Init+0x6c>)
 8003612:	5cd3      	ldrb	r3, [r2, r3]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	fa21 f303 	lsr.w	r3, r1, r3
 800361c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_Init+0x68>)
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <HAL_Init+0x6c>)
 8003628:	5cd3      	ldrb	r3, [r2, r3]
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
 8003634:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <HAL_Init+0x70>)
 8003636:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003638:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <HAL_Init+0x74>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800363e:	2000      	movs	r0, #0
 8003640:	f000 f814 	bl	800366c <HAL_InitTick>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e002      	b.n	8003654 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800364e:	f7ff fbbf 	bl	8002dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	58024400 	.word	0x58024400
 8003660:	0801a01c 	.word	0x0801a01c
 8003664:	24000010 	.word	0x24000010
 8003668:	2400000c 	.word	0x2400000c

0800366c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003674:	4b15      	ldr	r3, [pc, #84]	; (80036cc <HAL_InitTick+0x60>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e021      	b.n	80036c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003680:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <HAL_InitTick+0x64>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_InitTick+0x60>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	4619      	mov	r1, r3
 800368a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800368e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003692:	fbb2 f3f3 	udiv	r3, r2, r3
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f96f 	bl	800397a <HAL_SYSTICK_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e00e      	b.n	80036c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b0f      	cmp	r3, #15
 80036aa:	d80a      	bhi.n	80036c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036ac:	2200      	movs	r2, #0
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	f000 f939 	bl	800392a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036b8:	4a06      	ldr	r2, [pc, #24]	; (80036d4 <HAL_InitTick+0x68>)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e000      	b.n	80036c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	24000018 	.word	0x24000018
 80036d0:	2400000c 	.word	0x2400000c
 80036d4:	24000014 	.word	0x24000014

080036d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_IncTick+0x20>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_IncTick+0x24>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4413      	add	r3, r2
 80036e8:	4a04      	ldr	r2, [pc, #16]	; (80036fc <HAL_IncTick+0x24>)
 80036ea:	6013      	str	r3, [r2, #0]
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	24000018 	.word	0x24000018
 80036fc:	24001740 	.word	0x24001740

08003700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return uwTick;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_GetTick+0x14>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	24001740 	.word	0x24001740

08003718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003720:	f7ff ffee 	bl	8003700 <HAL_GetTick>
 8003724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d005      	beq.n	800373e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_Delay+0x40>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4413      	add	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800373e:	bf00      	nop
 8003740:	f7ff ffde 	bl	8003700 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	429a      	cmp	r2, r3
 800374e:	d8f7      	bhi.n	8003740 <HAL_Delay+0x28>
  {
  }
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	24000018 	.word	0x24000018

0800375c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_GetREVID+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	0c1b      	lsrs	r3, r3, #16
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	5c001000 	.word	0x5c001000

08003774 <__NVIC_SetPriorityGrouping>:
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <__NVIC_SetPriorityGrouping+0x40>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003790:	4013      	ands	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <__NVIC_SetPriorityGrouping+0x44>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a2:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <__NVIC_SetPriorityGrouping+0x40>)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	60d3      	str	r3, [r2, #12]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00
 80037b8:	05fa0000 	.word	0x05fa0000

080037bc <__NVIC_GetPriorityGrouping>:
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <__NVIC_GetPriorityGrouping+0x18>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	f003 0307 	and.w	r3, r3, #7
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <__NVIC_EnableIRQ>:
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	db0b      	blt.n	8003802 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	4907      	ldr	r1, [pc, #28]	; (8003810 <__NVIC_EnableIRQ+0x38>)
 80037f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2001      	movs	r0, #1
 80037fa:	fa00 f202 	lsl.w	r2, r0, r2
 80037fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000e100 	.word	0xe000e100

08003814 <__NVIC_SetPriority>:
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db0a      	blt.n	800383e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	490c      	ldr	r1, [pc, #48]	; (8003860 <__NVIC_SetPriority+0x4c>)
 800382e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	440b      	add	r3, r1
 8003838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800383c:	e00a      	b.n	8003854 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4908      	ldr	r1, [pc, #32]	; (8003864 <__NVIC_SetPriority+0x50>)
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	3b04      	subs	r3, #4
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	440b      	add	r3, r1
 8003852:	761a      	strb	r2, [r3, #24]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000e100 	.word	0xe000e100
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <NVIC_EncodePriority>:
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	; 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f1c3 0307 	rsb	r3, r3, #7
 8003882:	2b04      	cmp	r3, #4
 8003884:	bf28      	it	cs
 8003886:	2304      	movcs	r3, #4
 8003888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3304      	adds	r3, #4
 800388e:	2b06      	cmp	r3, #6
 8003890:	d902      	bls.n	8003898 <NVIC_EncodePriority+0x30>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3b03      	subs	r3, #3
 8003896:	e000      	b.n	800389a <NVIC_EncodePriority+0x32>
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	401a      	ands	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b0:	f04f 31ff 	mov.w	r1, #4294967295
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	43d9      	mvns	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	4313      	orrs	r3, r2
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3724      	adds	r7, #36	; 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <SysTick_Config>:
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e0:	d301      	bcc.n	80038e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80038e2:	2301      	movs	r3, #1
 80038e4:	e00f      	b.n	8003906 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <SysTick_Config+0x40>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ee:	210f      	movs	r1, #15
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	f7ff ff8e 	bl	8003814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <SysTick_Config+0x40>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fe:	4b04      	ldr	r3, [pc, #16]	; (8003910 <SysTick_Config+0x40>)
 8003900:	2207      	movs	r2, #7
 8003902:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	e000e010 	.word	0xe000e010

08003914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff ff29 	bl	8003774 <__NVIC_SetPriorityGrouping>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	4603      	mov	r3, r0
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003938:	f7ff ff40 	bl	80037bc <__NVIC_GetPriorityGrouping>
 800393c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	6978      	ldr	r0, [r7, #20]
 8003944:	f7ff ff90 	bl	8003868 <NVIC_EncodePriority>
 8003948:	4602      	mov	r2, r0
 800394a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff5f 	bl	8003814 <__NVIC_SetPriority>
}
 8003956:	bf00      	nop
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff33 	bl	80037d8 <__NVIC_EnableIRQ>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ffa4 	bl	80038d0 <SysTick_Config>
 8003988:	4603      	mov	r3, r0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff feb0 	bl	8003700 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e316      	b.n	8003fda <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a66      	ldr	r2, [pc, #408]	; (8003b4c <HAL_DMA_Init+0x1b8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d04a      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a65      	ldr	r2, [pc, #404]	; (8003b50 <HAL_DMA_Init+0x1bc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d045      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a63      	ldr	r2, [pc, #396]	; (8003b54 <HAL_DMA_Init+0x1c0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d040      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a62      	ldr	r2, [pc, #392]	; (8003b58 <HAL_DMA_Init+0x1c4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d03b      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a60      	ldr	r2, [pc, #384]	; (8003b5c <HAL_DMA_Init+0x1c8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d036      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a5f      	ldr	r2, [pc, #380]	; (8003b60 <HAL_DMA_Init+0x1cc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d031      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a5d      	ldr	r2, [pc, #372]	; (8003b64 <HAL_DMA_Init+0x1d0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d02c      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5c      	ldr	r2, [pc, #368]	; (8003b68 <HAL_DMA_Init+0x1d4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d027      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5a      	ldr	r2, [pc, #360]	; (8003b6c <HAL_DMA_Init+0x1d8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d022      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a59      	ldr	r2, [pc, #356]	; (8003b70 <HAL_DMA_Init+0x1dc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d01d      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a57      	ldr	r2, [pc, #348]	; (8003b74 <HAL_DMA_Init+0x1e0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d018      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a56      	ldr	r2, [pc, #344]	; (8003b78 <HAL_DMA_Init+0x1e4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a54      	ldr	r2, [pc, #336]	; (8003b7c <HAL_DMA_Init+0x1e8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00e      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a53      	ldr	r2, [pc, #332]	; (8003b80 <HAL_DMA_Init+0x1ec>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d009      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a51      	ldr	r2, [pc, #324]	; (8003b84 <HAL_DMA_Init+0x1f0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_DMA_Init+0xb8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a50      	ldr	r2, [pc, #320]	; (8003b88 <HAL_DMA_Init+0x1f4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_DMA_Init+0xbc>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_DMA_Init+0xbe>
 8003a50:	2300      	movs	r3, #0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 813b 	beq.w	8003cce <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a37      	ldr	r2, [pc, #220]	; (8003b4c <HAL_DMA_Init+0x1b8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d04a      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a36      	ldr	r2, [pc, #216]	; (8003b50 <HAL_DMA_Init+0x1bc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d045      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a34      	ldr	r2, [pc, #208]	; (8003b54 <HAL_DMA_Init+0x1c0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d040      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a33      	ldr	r2, [pc, #204]	; (8003b58 <HAL_DMA_Init+0x1c4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d03b      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a31      	ldr	r2, [pc, #196]	; (8003b5c <HAL_DMA_Init+0x1c8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d036      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a30      	ldr	r2, [pc, #192]	; (8003b60 <HAL_DMA_Init+0x1cc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d031      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2e      	ldr	r2, [pc, #184]	; (8003b64 <HAL_DMA_Init+0x1d0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d02c      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a2d      	ldr	r2, [pc, #180]	; (8003b68 <HAL_DMA_Init+0x1d4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d027      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <HAL_DMA_Init+0x1d8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d022      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <HAL_DMA_Init+0x1dc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d01d      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a28      	ldr	r2, [pc, #160]	; (8003b74 <HAL_DMA_Init+0x1e0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d018      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <HAL_DMA_Init+0x1e4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d013      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a25      	ldr	r2, [pc, #148]	; (8003b7c <HAL_DMA_Init+0x1e8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00e      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <HAL_DMA_Init+0x1ec>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <HAL_DMA_Init+0x1f0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_DMA_Init+0x174>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a21      	ldr	r2, [pc, #132]	; (8003b88 <HAL_DMA_Init+0x1f4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d108      	bne.n	8003b1a <HAL_DMA_Init+0x186>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	e007      	b.n	8003b2a <HAL_DMA_Init+0x196>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b2a:	e02f      	b.n	8003b8c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b2c:	f7ff fde8 	bl	8003700 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	d928      	bls.n	8003b8c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2203      	movs	r2, #3
 8003b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e246      	b.n	8003fda <HAL_DMA_Init+0x646>
 8003b4c:	40020010 	.word	0x40020010
 8003b50:	40020028 	.word	0x40020028
 8003b54:	40020040 	.word	0x40020040
 8003b58:	40020058 	.word	0x40020058
 8003b5c:	40020070 	.word	0x40020070
 8003b60:	40020088 	.word	0x40020088
 8003b64:	400200a0 	.word	0x400200a0
 8003b68:	400200b8 	.word	0x400200b8
 8003b6c:	40020410 	.word	0x40020410
 8003b70:	40020428 	.word	0x40020428
 8003b74:	40020440 	.word	0x40020440
 8003b78:	40020458 	.word	0x40020458
 8003b7c:	40020470 	.word	0x40020470
 8003b80:	40020488 	.word	0x40020488
 8003b84:	400204a0 	.word	0x400204a0
 8003b88:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1c8      	bne.n	8003b2c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4b83      	ldr	r3, [pc, #524]	; (8003db4 <HAL_DMA_Init+0x420>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003bb2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d107      	bne.n	8003bf0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	4313      	orrs	r3, r2
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003bf0:	4b71      	ldr	r3, [pc, #452]	; (8003db8 <HAL_DMA_Init+0x424>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b71      	ldr	r3, [pc, #452]	; (8003dbc <HAL_DMA_Init+0x428>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bfc:	d328      	bcc.n	8003c50 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b28      	cmp	r3, #40	; 0x28
 8003c04:	d903      	bls.n	8003c0e <HAL_DMA_Init+0x27a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c0c:	d917      	bls.n	8003c3e <HAL_DMA_Init+0x2aa>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b3e      	cmp	r3, #62	; 0x3e
 8003c14:	d903      	bls.n	8003c1e <HAL_DMA_Init+0x28a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b42      	cmp	r3, #66	; 0x42
 8003c1c:	d90f      	bls.n	8003c3e <HAL_DMA_Init+0x2aa>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b46      	cmp	r3, #70	; 0x46
 8003c24:	d903      	bls.n	8003c2e <HAL_DMA_Init+0x29a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b48      	cmp	r3, #72	; 0x48
 8003c2c:	d907      	bls.n	8003c3e <HAL_DMA_Init+0x2aa>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b4e      	cmp	r3, #78	; 0x4e
 8003c34:	d905      	bls.n	8003c42 <HAL_DMA_Init+0x2ae>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b52      	cmp	r3, #82	; 0x52
 8003c3c:	d801      	bhi.n	8003c42 <HAL_DMA_Init+0x2ae>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <HAL_DMA_Init+0x2b0>
 8003c42:	2300      	movs	r3, #0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c4e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 0307 	bic.w	r3, r3, #7
 8003c66:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d117      	bne.n	8003caa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00e      	beq.n	8003caa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f001 fdcf 	bl	8005830 <DMA_CheckFifoParam>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2240      	movs	r2, #64	; 0x40
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e197      	b.n	8003fda <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f001 fd0a 	bl	80056cc <DMA_CalcBaseAndBitshift>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	223f      	movs	r2, #63	; 0x3f
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	e0cd      	b.n	8003e6a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a3b      	ldr	r2, [pc, #236]	; (8003dc0 <HAL_DMA_Init+0x42c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d022      	beq.n	8003d1e <HAL_DMA_Init+0x38a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a39      	ldr	r2, [pc, #228]	; (8003dc4 <HAL_DMA_Init+0x430>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01d      	beq.n	8003d1e <HAL_DMA_Init+0x38a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a38      	ldr	r2, [pc, #224]	; (8003dc8 <HAL_DMA_Init+0x434>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d018      	beq.n	8003d1e <HAL_DMA_Init+0x38a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a36      	ldr	r2, [pc, #216]	; (8003dcc <HAL_DMA_Init+0x438>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_DMA_Init+0x38a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a35      	ldr	r2, [pc, #212]	; (8003dd0 <HAL_DMA_Init+0x43c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_Init+0x38a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a33      	ldr	r2, [pc, #204]	; (8003dd4 <HAL_DMA_Init+0x440>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d009      	beq.n	8003d1e <HAL_DMA_Init+0x38a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a32      	ldr	r2, [pc, #200]	; (8003dd8 <HAL_DMA_Init+0x444>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_DMA_Init+0x38a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a30      	ldr	r2, [pc, #192]	; (8003ddc <HAL_DMA_Init+0x448>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d101      	bne.n	8003d22 <HAL_DMA_Init+0x38e>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_DMA_Init+0x390>
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8097 	beq.w	8003e58 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a24      	ldr	r2, [pc, #144]	; (8003dc0 <HAL_DMA_Init+0x42c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d021      	beq.n	8003d78 <HAL_DMA_Init+0x3e4>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a22      	ldr	r2, [pc, #136]	; (8003dc4 <HAL_DMA_Init+0x430>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01c      	beq.n	8003d78 <HAL_DMA_Init+0x3e4>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a21      	ldr	r2, [pc, #132]	; (8003dc8 <HAL_DMA_Init+0x434>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d017      	beq.n	8003d78 <HAL_DMA_Init+0x3e4>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1f      	ldr	r2, [pc, #124]	; (8003dcc <HAL_DMA_Init+0x438>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d012      	beq.n	8003d78 <HAL_DMA_Init+0x3e4>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <HAL_DMA_Init+0x43c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00d      	beq.n	8003d78 <HAL_DMA_Init+0x3e4>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <HAL_DMA_Init+0x440>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d008      	beq.n	8003d78 <HAL_DMA_Init+0x3e4>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1b      	ldr	r2, [pc, #108]	; (8003dd8 <HAL_DMA_Init+0x444>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <HAL_DMA_Init+0x3e4>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_DMA_Init+0x448>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2202      	movs	r2, #2
 8003d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <HAL_DMA_Init+0x44c>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d020      	beq.n	8003de4 <HAL_DMA_Init+0x450>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b80      	cmp	r3, #128	; 0x80
 8003da8:	d102      	bne.n	8003db0 <HAL_DMA_Init+0x41c>
 8003daa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dae:	e01a      	b.n	8003de6 <HAL_DMA_Init+0x452>
 8003db0:	2300      	movs	r3, #0
 8003db2:	e018      	b.n	8003de6 <HAL_DMA_Init+0x452>
 8003db4:	fe10803f 	.word	0xfe10803f
 8003db8:	5c001000 	.word	0x5c001000
 8003dbc:	ffff0000 	.word	0xffff0000
 8003dc0:	58025408 	.word	0x58025408
 8003dc4:	5802541c 	.word	0x5802541c
 8003dc8:	58025430 	.word	0x58025430
 8003dcc:	58025444 	.word	0x58025444
 8003dd0:	58025458 	.word	0x58025458
 8003dd4:	5802546c 	.word	0x5802546c
 8003dd8:	58025480 	.word	0x58025480
 8003ddc:	58025494 	.word	0x58025494
 8003de0:	fffe000f 	.word	0xfffe000f
 8003de4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68d2      	ldr	r2, [r2, #12]
 8003dea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003df4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003dfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b6e      	ldr	r3, [pc, #440]	; (8003fe4 <HAL_DMA_Init+0x650>)
 8003e2c:	4413      	add	r3, r2
 8003e2e:	4a6e      	ldr	r2, [pc, #440]	; (8003fe8 <HAL_DMA_Init+0x654>)
 8003e30:	fba2 2303 	umull	r2, r3, r2, r3
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	009a      	lsls	r2, r3, #2
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f001 fc45 	bl	80056cc <DMA_CalcBaseAndBitshift>
 8003e42:	4603      	mov	r3, r0
 8003e44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2201      	movs	r2, #1
 8003e50:	409a      	lsls	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	e008      	b.n	8003e6a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2203      	movs	r2, #3
 8003e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e0b7      	b.n	8003fda <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a5f      	ldr	r2, [pc, #380]	; (8003fec <HAL_DMA_Init+0x658>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d072      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a5d      	ldr	r2, [pc, #372]	; (8003ff0 <HAL_DMA_Init+0x65c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d06d      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a5c      	ldr	r2, [pc, #368]	; (8003ff4 <HAL_DMA_Init+0x660>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d068      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5a      	ldr	r2, [pc, #360]	; (8003ff8 <HAL_DMA_Init+0x664>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d063      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a59      	ldr	r2, [pc, #356]	; (8003ffc <HAL_DMA_Init+0x668>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d05e      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a57      	ldr	r2, [pc, #348]	; (8004000 <HAL_DMA_Init+0x66c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d059      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a56      	ldr	r2, [pc, #344]	; (8004004 <HAL_DMA_Init+0x670>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d054      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a54      	ldr	r2, [pc, #336]	; (8004008 <HAL_DMA_Init+0x674>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d04f      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a53      	ldr	r2, [pc, #332]	; (800400c <HAL_DMA_Init+0x678>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d04a      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a51      	ldr	r2, [pc, #324]	; (8004010 <HAL_DMA_Init+0x67c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d045      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a50      	ldr	r2, [pc, #320]	; (8004014 <HAL_DMA_Init+0x680>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d040      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a4e      	ldr	r2, [pc, #312]	; (8004018 <HAL_DMA_Init+0x684>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d03b      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a4d      	ldr	r2, [pc, #308]	; (800401c <HAL_DMA_Init+0x688>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d036      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a4b      	ldr	r2, [pc, #300]	; (8004020 <HAL_DMA_Init+0x68c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d031      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a4a      	ldr	r2, [pc, #296]	; (8004024 <HAL_DMA_Init+0x690>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d02c      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a48      	ldr	r2, [pc, #288]	; (8004028 <HAL_DMA_Init+0x694>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d027      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a47      	ldr	r2, [pc, #284]	; (800402c <HAL_DMA_Init+0x698>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d022      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a45      	ldr	r2, [pc, #276]	; (8004030 <HAL_DMA_Init+0x69c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01d      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a44      	ldr	r2, [pc, #272]	; (8004034 <HAL_DMA_Init+0x6a0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a42      	ldr	r2, [pc, #264]	; (8004038 <HAL_DMA_Init+0x6a4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a41      	ldr	r2, [pc, #260]	; (800403c <HAL_DMA_Init+0x6a8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00e      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3f      	ldr	r2, [pc, #252]	; (8004040 <HAL_DMA_Init+0x6ac>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3e      	ldr	r2, [pc, #248]	; (8004044 <HAL_DMA_Init+0x6b0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_DMA_Init+0x5c6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3c      	ldr	r2, [pc, #240]	; (8004048 <HAL_DMA_Init+0x6b4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <HAL_DMA_Init+0x5ca>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_DMA_Init+0x5cc>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d032      	beq.n	8003fca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f001 fcdf 	bl	8005928 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b80      	cmp	r3, #128	; 0x80
 8003f70:	d102      	bne.n	8003f78 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d010      	beq.n	8003fb8 <HAL_DMA_Init+0x624>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d80c      	bhi.n	8003fb8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f001 fd5c 	bl	8005a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	e008      	b.n	8003fca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	a7fdabf8 	.word	0xa7fdabf8
 8003fe8:	cccccccd 	.word	0xcccccccd
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
 800402c:	58025408 	.word	0x58025408
 8004030:	5802541c 	.word	0x5802541c
 8004034:	58025430 	.word	0x58025430
 8004038:	58025444 	.word	0x58025444
 800403c:	58025458 	.word	0x58025458
 8004040:	5802546c 	.word	0x5802546c
 8004044:	58025480 	.word	0x58025480
 8004048:	58025494 	.word	0x58025494

0800404c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e226      	b.n	80044b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_DMA_Start_IT+0x2a>
 8004072:	2302      	movs	r3, #2
 8004074:	e21f      	b.n	80044b6 <HAL_DMA_Start_IT+0x46a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	f040 820a 	bne.w	80044a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a68      	ldr	r2, [pc, #416]	; (8004240 <HAL_DMA_Start_IT+0x1f4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d04a      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a66      	ldr	r2, [pc, #408]	; (8004244 <HAL_DMA_Start_IT+0x1f8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d045      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a65      	ldr	r2, [pc, #404]	; (8004248 <HAL_DMA_Start_IT+0x1fc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d040      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a63      	ldr	r2, [pc, #396]	; (800424c <HAL_DMA_Start_IT+0x200>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d03b      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a62      	ldr	r2, [pc, #392]	; (8004250 <HAL_DMA_Start_IT+0x204>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d036      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a60      	ldr	r2, [pc, #384]	; (8004254 <HAL_DMA_Start_IT+0x208>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d031      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a5f      	ldr	r2, [pc, #380]	; (8004258 <HAL_DMA_Start_IT+0x20c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d02c      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a5d      	ldr	r2, [pc, #372]	; (800425c <HAL_DMA_Start_IT+0x210>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d027      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a5c      	ldr	r2, [pc, #368]	; (8004260 <HAL_DMA_Start_IT+0x214>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d022      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a5a      	ldr	r2, [pc, #360]	; (8004264 <HAL_DMA_Start_IT+0x218>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d01d      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a59      	ldr	r2, [pc, #356]	; (8004268 <HAL_DMA_Start_IT+0x21c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d018      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a57      	ldr	r2, [pc, #348]	; (800426c <HAL_DMA_Start_IT+0x220>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a56      	ldr	r2, [pc, #344]	; (8004270 <HAL_DMA_Start_IT+0x224>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00e      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a54      	ldr	r2, [pc, #336]	; (8004274 <HAL_DMA_Start_IT+0x228>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d009      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a53      	ldr	r2, [pc, #332]	; (8004278 <HAL_DMA_Start_IT+0x22c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_DMA_Start_IT+0xee>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a51      	ldr	r2, [pc, #324]	; (800427c <HAL_DMA_Start_IT+0x230>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d108      	bne.n	800414c <HAL_DMA_Start_IT+0x100>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e007      	b.n	800415c <HAL_DMA_Start_IT+0x110>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f001 f906 	bl	8005374 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a34      	ldr	r2, [pc, #208]	; (8004240 <HAL_DMA_Start_IT+0x1f4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d04a      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a33      	ldr	r2, [pc, #204]	; (8004244 <HAL_DMA_Start_IT+0x1f8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d045      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a31      	ldr	r2, [pc, #196]	; (8004248 <HAL_DMA_Start_IT+0x1fc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d040      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a30      	ldr	r2, [pc, #192]	; (800424c <HAL_DMA_Start_IT+0x200>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d03b      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2e      	ldr	r2, [pc, #184]	; (8004250 <HAL_DMA_Start_IT+0x204>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d036      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2d      	ldr	r2, [pc, #180]	; (8004254 <HAL_DMA_Start_IT+0x208>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d031      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a2b      	ldr	r2, [pc, #172]	; (8004258 <HAL_DMA_Start_IT+0x20c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d02c      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2a      	ldr	r2, [pc, #168]	; (800425c <HAL_DMA_Start_IT+0x210>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d027      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a28      	ldr	r2, [pc, #160]	; (8004260 <HAL_DMA_Start_IT+0x214>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d022      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a27      	ldr	r2, [pc, #156]	; (8004264 <HAL_DMA_Start_IT+0x218>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d01d      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a25      	ldr	r2, [pc, #148]	; (8004268 <HAL_DMA_Start_IT+0x21c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d018      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a24      	ldr	r2, [pc, #144]	; (800426c <HAL_DMA_Start_IT+0x220>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d013      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a22      	ldr	r2, [pc, #136]	; (8004270 <HAL_DMA_Start_IT+0x224>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00e      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a21      	ldr	r2, [pc, #132]	; (8004274 <HAL_DMA_Start_IT+0x228>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d009      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <HAL_DMA_Start_IT+0x22c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <HAL_DMA_Start_IT+0x1bc>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1e      	ldr	r2, [pc, #120]	; (800427c <HAL_DMA_Start_IT+0x230>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d101      	bne.n	800420c <HAL_DMA_Start_IT+0x1c0>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_DMA_Start_IT+0x1c2>
 800420c:	2300      	movs	r3, #0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d036      	beq.n	8004280 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 021e 	bic.w	r2, r3, #30
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0216 	orr.w	r2, r2, #22
 8004224:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d03e      	beq.n	80042ac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0208 	orr.w	r2, r2, #8
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e035      	b.n	80042ac <HAL_DMA_Start_IT+0x260>
 8004240:	40020010 	.word	0x40020010
 8004244:	40020028 	.word	0x40020028
 8004248:	40020040 	.word	0x40020040
 800424c:	40020058 	.word	0x40020058
 8004250:	40020070 	.word	0x40020070
 8004254:	40020088 	.word	0x40020088
 8004258:	400200a0 	.word	0x400200a0
 800425c:	400200b8 	.word	0x400200b8
 8004260:	40020410 	.word	0x40020410
 8004264:	40020428 	.word	0x40020428
 8004268:	40020440 	.word	0x40020440
 800426c:	40020458 	.word	0x40020458
 8004270:	40020470 	.word	0x40020470
 8004274:	40020488 	.word	0x40020488
 8004278:	400204a0 	.word	0x400204a0
 800427c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 020e 	bic.w	r2, r3, #14
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 020a 	orr.w	r2, r2, #10
 8004292:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0204 	orr.w	r2, r2, #4
 80042aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a83      	ldr	r2, [pc, #524]	; (80044c0 <HAL_DMA_Start_IT+0x474>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d072      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a82      	ldr	r2, [pc, #520]	; (80044c4 <HAL_DMA_Start_IT+0x478>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d06d      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a80      	ldr	r2, [pc, #512]	; (80044c8 <HAL_DMA_Start_IT+0x47c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d068      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a7f      	ldr	r2, [pc, #508]	; (80044cc <HAL_DMA_Start_IT+0x480>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d063      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a7d      	ldr	r2, [pc, #500]	; (80044d0 <HAL_DMA_Start_IT+0x484>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d05e      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a7c      	ldr	r2, [pc, #496]	; (80044d4 <HAL_DMA_Start_IT+0x488>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d059      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a7a      	ldr	r2, [pc, #488]	; (80044d8 <HAL_DMA_Start_IT+0x48c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d054      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a79      	ldr	r2, [pc, #484]	; (80044dc <HAL_DMA_Start_IT+0x490>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d04f      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a77      	ldr	r2, [pc, #476]	; (80044e0 <HAL_DMA_Start_IT+0x494>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d04a      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a76      	ldr	r2, [pc, #472]	; (80044e4 <HAL_DMA_Start_IT+0x498>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d045      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a74      	ldr	r2, [pc, #464]	; (80044e8 <HAL_DMA_Start_IT+0x49c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d040      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a73      	ldr	r2, [pc, #460]	; (80044ec <HAL_DMA_Start_IT+0x4a0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d03b      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a71      	ldr	r2, [pc, #452]	; (80044f0 <HAL_DMA_Start_IT+0x4a4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d036      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a70      	ldr	r2, [pc, #448]	; (80044f4 <HAL_DMA_Start_IT+0x4a8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d031      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a6e      	ldr	r2, [pc, #440]	; (80044f8 <HAL_DMA_Start_IT+0x4ac>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d02c      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a6d      	ldr	r2, [pc, #436]	; (80044fc <HAL_DMA_Start_IT+0x4b0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d027      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a6b      	ldr	r2, [pc, #428]	; (8004500 <HAL_DMA_Start_IT+0x4b4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d022      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6a      	ldr	r2, [pc, #424]	; (8004504 <HAL_DMA_Start_IT+0x4b8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d01d      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a68      	ldr	r2, [pc, #416]	; (8004508 <HAL_DMA_Start_IT+0x4bc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a67      	ldr	r2, [pc, #412]	; (800450c <HAL_DMA_Start_IT+0x4c0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a65      	ldr	r2, [pc, #404]	; (8004510 <HAL_DMA_Start_IT+0x4c4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a64      	ldr	r2, [pc, #400]	; (8004514 <HAL_DMA_Start_IT+0x4c8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a62      	ldr	r2, [pc, #392]	; (8004518 <HAL_DMA_Start_IT+0x4cc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_DMA_Start_IT+0x350>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a61      	ldr	r2, [pc, #388]	; (800451c <HAL_DMA_Start_IT+0x4d0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <HAL_DMA_Start_IT+0x354>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HAL_DMA_Start_IT+0x356>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01a      	beq.n	80043dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d007      	beq.n	80043dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a37      	ldr	r2, [pc, #220]	; (80044c0 <HAL_DMA_Start_IT+0x474>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d04a      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a36      	ldr	r2, [pc, #216]	; (80044c4 <HAL_DMA_Start_IT+0x478>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d045      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a34      	ldr	r2, [pc, #208]	; (80044c8 <HAL_DMA_Start_IT+0x47c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d040      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a33      	ldr	r2, [pc, #204]	; (80044cc <HAL_DMA_Start_IT+0x480>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d03b      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a31      	ldr	r2, [pc, #196]	; (80044d0 <HAL_DMA_Start_IT+0x484>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d036      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a30      	ldr	r2, [pc, #192]	; (80044d4 <HAL_DMA_Start_IT+0x488>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d031      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2e      	ldr	r2, [pc, #184]	; (80044d8 <HAL_DMA_Start_IT+0x48c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d02c      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a2d      	ldr	r2, [pc, #180]	; (80044dc <HAL_DMA_Start_IT+0x490>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d027      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <HAL_DMA_Start_IT+0x494>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <HAL_DMA_Start_IT+0x498>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d01d      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <HAL_DMA_Start_IT+0x49c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a27      	ldr	r2, [pc, #156]	; (80044ec <HAL_DMA_Start_IT+0x4a0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a25      	ldr	r2, [pc, #148]	; (80044f0 <HAL_DMA_Start_IT+0x4a4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a24      	ldr	r2, [pc, #144]	; (80044f4 <HAL_DMA_Start_IT+0x4a8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a22      	ldr	r2, [pc, #136]	; (80044f8 <HAL_DMA_Start_IT+0x4ac>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_DMA_Start_IT+0x430>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a21      	ldr	r2, [pc, #132]	; (80044fc <HAL_DMA_Start_IT+0x4b0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d108      	bne.n	800448e <HAL_DMA_Start_IT+0x442>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e012      	b.n	80044b4 <HAL_DMA_Start_IT+0x468>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e009      	b.n	80044b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40020010 	.word	0x40020010
 80044c4:	40020028 	.word	0x40020028
 80044c8:	40020040 	.word	0x40020040
 80044cc:	40020058 	.word	0x40020058
 80044d0:	40020070 	.word	0x40020070
 80044d4:	40020088 	.word	0x40020088
 80044d8:	400200a0 	.word	0x400200a0
 80044dc:	400200b8 	.word	0x400200b8
 80044e0:	40020410 	.word	0x40020410
 80044e4:	40020428 	.word	0x40020428
 80044e8:	40020440 	.word	0x40020440
 80044ec:	40020458 	.word	0x40020458
 80044f0:	40020470 	.word	0x40020470
 80044f4:	40020488 	.word	0x40020488
 80044f8:	400204a0 	.word	0x400204a0
 80044fc:	400204b8 	.word	0x400204b8
 8004500:	58025408 	.word	0x58025408
 8004504:	5802541c 	.word	0x5802541c
 8004508:	58025430 	.word	0x58025430
 800450c:	58025444 	.word	0x58025444
 8004510:	58025458 	.word	0x58025458
 8004514:	5802546c 	.word	0x5802546c
 8004518:	58025480 	.word	0x58025480
 800451c:	58025494 	.word	0x58025494

08004520 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800452c:	4b67      	ldr	r3, [pc, #412]	; (80046cc <HAL_DMA_IRQHandler+0x1ac>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a67      	ldr	r2, [pc, #412]	; (80046d0 <HAL_DMA_IRQHandler+0x1b0>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	0a9b      	lsrs	r3, r3, #10
 8004538:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004544:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a5f      	ldr	r2, [pc, #380]	; (80046d4 <HAL_DMA_IRQHandler+0x1b4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d04a      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a5d      	ldr	r2, [pc, #372]	; (80046d8 <HAL_DMA_IRQHandler+0x1b8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d045      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a5c      	ldr	r2, [pc, #368]	; (80046dc <HAL_DMA_IRQHandler+0x1bc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d040      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5a      	ldr	r2, [pc, #360]	; (80046e0 <HAL_DMA_IRQHandler+0x1c0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d03b      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a59      	ldr	r2, [pc, #356]	; (80046e4 <HAL_DMA_IRQHandler+0x1c4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d036      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a57      	ldr	r2, [pc, #348]	; (80046e8 <HAL_DMA_IRQHandler+0x1c8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d031      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a56      	ldr	r2, [pc, #344]	; (80046ec <HAL_DMA_IRQHandler+0x1cc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d02c      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a54      	ldr	r2, [pc, #336]	; (80046f0 <HAL_DMA_IRQHandler+0x1d0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d027      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a53      	ldr	r2, [pc, #332]	; (80046f4 <HAL_DMA_IRQHandler+0x1d4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d022      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a51      	ldr	r2, [pc, #324]	; (80046f8 <HAL_DMA_IRQHandler+0x1d8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01d      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a50      	ldr	r2, [pc, #320]	; (80046fc <HAL_DMA_IRQHandler+0x1dc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d018      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a4e      	ldr	r2, [pc, #312]	; (8004700 <HAL_DMA_IRQHandler+0x1e0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a4d      	ldr	r2, [pc, #308]	; (8004704 <HAL_DMA_IRQHandler+0x1e4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00e      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a4b      	ldr	r2, [pc, #300]	; (8004708 <HAL_DMA_IRQHandler+0x1e8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d009      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a4a      	ldr	r2, [pc, #296]	; (800470c <HAL_DMA_IRQHandler+0x1ec>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xd2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a48      	ldr	r2, [pc, #288]	; (8004710 <HAL_DMA_IRQHandler+0x1f0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d101      	bne.n	80045f6 <HAL_DMA_IRQHandler+0xd6>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <HAL_DMA_IRQHandler+0xd8>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 842b 	beq.w	8004e54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	2208      	movs	r2, #8
 8004608:	409a      	lsls	r2, r3
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80a2 	beq.w	8004758 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2e      	ldr	r2, [pc, #184]	; (80046d4 <HAL_DMA_IRQHandler+0x1b4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d04a      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <HAL_DMA_IRQHandler+0x1b8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d045      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2b      	ldr	r2, [pc, #172]	; (80046dc <HAL_DMA_IRQHandler+0x1bc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d040      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2a      	ldr	r2, [pc, #168]	; (80046e0 <HAL_DMA_IRQHandler+0x1c0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d03b      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a28      	ldr	r2, [pc, #160]	; (80046e4 <HAL_DMA_IRQHandler+0x1c4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d036      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a27      	ldr	r2, [pc, #156]	; (80046e8 <HAL_DMA_IRQHandler+0x1c8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d031      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a25      	ldr	r2, [pc, #148]	; (80046ec <HAL_DMA_IRQHandler+0x1cc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d02c      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a24      	ldr	r2, [pc, #144]	; (80046f0 <HAL_DMA_IRQHandler+0x1d0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d027      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <HAL_DMA_IRQHandler+0x1d4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d022      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a21      	ldr	r2, [pc, #132]	; (80046f8 <HAL_DMA_IRQHandler+0x1d8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d01d      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1f      	ldr	r2, [pc, #124]	; (80046fc <HAL_DMA_IRQHandler+0x1dc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d018      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1e      	ldr	r2, [pc, #120]	; (8004700 <HAL_DMA_IRQHandler+0x1e0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d013      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1c      	ldr	r2, [pc, #112]	; (8004704 <HAL_DMA_IRQHandler+0x1e4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00e      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1b      	ldr	r2, [pc, #108]	; (8004708 <HAL_DMA_IRQHandler+0x1e8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d009      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a19      	ldr	r2, [pc, #100]	; (800470c <HAL_DMA_IRQHandler+0x1ec>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x194>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a18      	ldr	r2, [pc, #96]	; (8004710 <HAL_DMA_IRQHandler+0x1f0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d12f      	bne.n	8004714 <HAL_DMA_IRQHandler+0x1f4>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf14      	ite	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	2300      	moveq	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	e02e      	b.n	8004728 <HAL_DMA_IRQHandler+0x208>
 80046ca:	bf00      	nop
 80046cc:	2400000c 	.word	0x2400000c
 80046d0:	1b4e81b5 	.word	0x1b4e81b5
 80046d4:	40020010 	.word	0x40020010
 80046d8:	40020028 	.word	0x40020028
 80046dc:	40020040 	.word	0x40020040
 80046e0:	40020058 	.word	0x40020058
 80046e4:	40020070 	.word	0x40020070
 80046e8:	40020088 	.word	0x40020088
 80046ec:	400200a0 	.word	0x400200a0
 80046f0:	400200b8 	.word	0x400200b8
 80046f4:	40020410 	.word	0x40020410
 80046f8:	40020428 	.word	0x40020428
 80046fc:	40020440 	.word	0x40020440
 8004700:	40020458 	.word	0x40020458
 8004704:	40020470 	.word	0x40020470
 8004708:	40020488 	.word	0x40020488
 800470c:	400204a0 	.word	0x400204a0
 8004710:	400204b8 	.word	0x400204b8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf14      	ite	ne
 8004722:	2301      	movne	r3, #1
 8004724:	2300      	moveq	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d015      	beq.n	8004758 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0204 	bic.w	r2, r2, #4
 800473a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2208      	movs	r2, #8
 8004746:	409a      	lsls	r2, r3
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	f043 0201 	orr.w	r2, r3, #1
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	fa22 f303 	lsr.w	r3, r2, r3
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d06e      	beq.n	800484c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a69      	ldr	r2, [pc, #420]	; (8004918 <HAL_DMA_IRQHandler+0x3f8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d04a      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a67      	ldr	r2, [pc, #412]	; (800491c <HAL_DMA_IRQHandler+0x3fc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d045      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a66      	ldr	r2, [pc, #408]	; (8004920 <HAL_DMA_IRQHandler+0x400>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d040      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a64      	ldr	r2, [pc, #400]	; (8004924 <HAL_DMA_IRQHandler+0x404>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d03b      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a63      	ldr	r2, [pc, #396]	; (8004928 <HAL_DMA_IRQHandler+0x408>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d036      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a61      	ldr	r2, [pc, #388]	; (800492c <HAL_DMA_IRQHandler+0x40c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d031      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a60      	ldr	r2, [pc, #384]	; (8004930 <HAL_DMA_IRQHandler+0x410>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d02c      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5e      	ldr	r2, [pc, #376]	; (8004934 <HAL_DMA_IRQHandler+0x414>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d027      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a5d      	ldr	r2, [pc, #372]	; (8004938 <HAL_DMA_IRQHandler+0x418>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a5b      	ldr	r2, [pc, #364]	; (800493c <HAL_DMA_IRQHandler+0x41c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01d      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a5a      	ldr	r2, [pc, #360]	; (8004940 <HAL_DMA_IRQHandler+0x420>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a58      	ldr	r2, [pc, #352]	; (8004944 <HAL_DMA_IRQHandler+0x424>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a57      	ldr	r2, [pc, #348]	; (8004948 <HAL_DMA_IRQHandler+0x428>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a55      	ldr	r2, [pc, #340]	; (800494c <HAL_DMA_IRQHandler+0x42c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a54      	ldr	r2, [pc, #336]	; (8004950 <HAL_DMA_IRQHandler+0x430>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_DMA_IRQHandler+0x2ee>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_DMA_IRQHandler+0x434>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d10a      	bne.n	8004824 <HAL_DMA_IRQHandler+0x304>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	2b00      	cmp	r3, #0
 800481a:	bf14      	ite	ne
 800481c:	2301      	movne	r3, #1
 800481e:	2300      	moveq	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	e003      	b.n	800482c <HAL_DMA_IRQHandler+0x30c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2300      	movs	r3, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2201      	movs	r2, #1
 800483a:	409a      	lsls	r2, r3
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004844:	f043 0202 	orr.w	r2, r3, #2
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	2204      	movs	r2, #4
 8004856:	409a      	lsls	r2, r3
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 808f 	beq.w	8004980 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a2c      	ldr	r2, [pc, #176]	; (8004918 <HAL_DMA_IRQHandler+0x3f8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d04a      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2a      	ldr	r2, [pc, #168]	; (800491c <HAL_DMA_IRQHandler+0x3fc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d045      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a29      	ldr	r2, [pc, #164]	; (8004920 <HAL_DMA_IRQHandler+0x400>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d040      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a27      	ldr	r2, [pc, #156]	; (8004924 <HAL_DMA_IRQHandler+0x404>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d03b      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a26      	ldr	r2, [pc, #152]	; (8004928 <HAL_DMA_IRQHandler+0x408>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d036      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a24      	ldr	r2, [pc, #144]	; (800492c <HAL_DMA_IRQHandler+0x40c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d031      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a23      	ldr	r2, [pc, #140]	; (8004930 <HAL_DMA_IRQHandler+0x410>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d02c      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a21      	ldr	r2, [pc, #132]	; (8004934 <HAL_DMA_IRQHandler+0x414>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d027      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a20      	ldr	r2, [pc, #128]	; (8004938 <HAL_DMA_IRQHandler+0x418>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d022      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1e      	ldr	r2, [pc, #120]	; (800493c <HAL_DMA_IRQHandler+0x41c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01d      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <HAL_DMA_IRQHandler+0x420>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d018      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1b      	ldr	r2, [pc, #108]	; (8004944 <HAL_DMA_IRQHandler+0x424>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d013      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1a      	ldr	r2, [pc, #104]	; (8004948 <HAL_DMA_IRQHandler+0x428>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00e      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <HAL_DMA_IRQHandler+0x42c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d009      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a17      	ldr	r2, [pc, #92]	; (8004950 <HAL_DMA_IRQHandler+0x430>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d004      	beq.n	8004902 <HAL_DMA_IRQHandler+0x3e2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a15      	ldr	r2, [pc, #84]	; (8004954 <HAL_DMA_IRQHandler+0x434>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d12a      	bne.n	8004958 <HAL_DMA_IRQHandler+0x438>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	bf14      	ite	ne
 8004910:	2301      	movne	r3, #1
 8004912:	2300      	moveq	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	e023      	b.n	8004960 <HAL_DMA_IRQHandler+0x440>
 8004918:	40020010 	.word	0x40020010
 800491c:	40020028 	.word	0x40020028
 8004920:	40020040 	.word	0x40020040
 8004924:	40020058 	.word	0x40020058
 8004928:	40020070 	.word	0x40020070
 800492c:	40020088 	.word	0x40020088
 8004930:	400200a0 	.word	0x400200a0
 8004934:	400200b8 	.word	0x400200b8
 8004938:	40020410 	.word	0x40020410
 800493c:	40020428 	.word	0x40020428
 8004940:	40020440 	.word	0x40020440
 8004944:	40020458 	.word	0x40020458
 8004948:	40020470 	.word	0x40020470
 800494c:	40020488 	.word	0x40020488
 8004950:	400204a0 	.word	0x400204a0
 8004954:	400204b8 	.word	0x400204b8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2300      	movs	r3, #0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00d      	beq.n	8004980 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	2204      	movs	r2, #4
 800496e:	409a      	lsls	r2, r3
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	f043 0204 	orr.w	r2, r3, #4
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	2210      	movs	r2, #16
 800498a:	409a      	lsls	r2, r3
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a6 	beq.w	8004ae2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a85      	ldr	r2, [pc, #532]	; (8004bb0 <HAL_DMA_IRQHandler+0x690>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d04a      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a83      	ldr	r2, [pc, #524]	; (8004bb4 <HAL_DMA_IRQHandler+0x694>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d045      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a82      	ldr	r2, [pc, #520]	; (8004bb8 <HAL_DMA_IRQHandler+0x698>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d040      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a80      	ldr	r2, [pc, #512]	; (8004bbc <HAL_DMA_IRQHandler+0x69c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d03b      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a7f      	ldr	r2, [pc, #508]	; (8004bc0 <HAL_DMA_IRQHandler+0x6a0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d036      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a7d      	ldr	r2, [pc, #500]	; (8004bc4 <HAL_DMA_IRQHandler+0x6a4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d031      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7c      	ldr	r2, [pc, #496]	; (8004bc8 <HAL_DMA_IRQHandler+0x6a8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d02c      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a7a      	ldr	r2, [pc, #488]	; (8004bcc <HAL_DMA_IRQHandler+0x6ac>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d027      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a79      	ldr	r2, [pc, #484]	; (8004bd0 <HAL_DMA_IRQHandler+0x6b0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a77      	ldr	r2, [pc, #476]	; (8004bd4 <HAL_DMA_IRQHandler+0x6b4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a76      	ldr	r2, [pc, #472]	; (8004bd8 <HAL_DMA_IRQHandler+0x6b8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a74      	ldr	r2, [pc, #464]	; (8004bdc <HAL_DMA_IRQHandler+0x6bc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a73      	ldr	r2, [pc, #460]	; (8004be0 <HAL_DMA_IRQHandler+0x6c0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a71      	ldr	r2, [pc, #452]	; (8004be4 <HAL_DMA_IRQHandler+0x6c4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a70      	ldr	r2, [pc, #448]	; (8004be8 <HAL_DMA_IRQHandler+0x6c8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x516>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a6e      	ldr	r2, [pc, #440]	; (8004bec <HAL_DMA_IRQHandler+0x6cc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10a      	bne.n	8004a4c <HAL_DMA_IRQHandler+0x52c>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e009      	b.n	8004a60 <HAL_DMA_IRQHandler+0x540>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	bf14      	ite	ne
 8004a5a:	2301      	movne	r3, #1
 8004a5c:	2300      	moveq	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d03e      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	2210      	movs	r2, #16
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d018      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d108      	bne.n	8004aa2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d024      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
 8004aa0:	e01f      	b.n	8004ae2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01b      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
 8004ab2:	e016      	b.n	8004ae2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d107      	bne.n	8004ad2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0208 	bic.w	r2, r2, #8
 8004ad0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	2220      	movs	r2, #32
 8004aec:	409a      	lsls	r2, r3
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 8110 	beq.w	8004d18 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <HAL_DMA_IRQHandler+0x690>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d04a      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a2b      	ldr	r2, [pc, #172]	; (8004bb4 <HAL_DMA_IRQHandler+0x694>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d045      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <HAL_DMA_IRQHandler+0x698>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d040      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a28      	ldr	r2, [pc, #160]	; (8004bbc <HAL_DMA_IRQHandler+0x69c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d03b      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a26      	ldr	r2, [pc, #152]	; (8004bc0 <HAL_DMA_IRQHandler+0x6a0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d036      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a25      	ldr	r2, [pc, #148]	; (8004bc4 <HAL_DMA_IRQHandler+0x6a4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d031      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a23      	ldr	r2, [pc, #140]	; (8004bc8 <HAL_DMA_IRQHandler+0x6a8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02c      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a22      	ldr	r2, [pc, #136]	; (8004bcc <HAL_DMA_IRQHandler+0x6ac>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d027      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a20      	ldr	r2, [pc, #128]	; (8004bd0 <HAL_DMA_IRQHandler+0x6b0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1f      	ldr	r2, [pc, #124]	; (8004bd4 <HAL_DMA_IRQHandler+0x6b4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d01d      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <HAL_DMA_IRQHandler+0x6b8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <HAL_DMA_IRQHandler+0x6bc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <HAL_DMA_IRQHandler+0x6c0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <HAL_DMA_IRQHandler+0x6c4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <HAL_DMA_IRQHandler+0x6c8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x678>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a16      	ldr	r2, [pc, #88]	; (8004bec <HAL_DMA_IRQHandler+0x6cc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d12b      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0x6d0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bf14      	ite	ne
 8004ba6:	2301      	movne	r3, #1
 8004ba8:	2300      	moveq	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	e02a      	b.n	8004c04 <HAL_DMA_IRQHandler+0x6e4>
 8004bae:	bf00      	nop
 8004bb0:	40020010 	.word	0x40020010
 8004bb4:	40020028 	.word	0x40020028
 8004bb8:	40020040 	.word	0x40020040
 8004bbc:	40020058 	.word	0x40020058
 8004bc0:	40020070 	.word	0x40020070
 8004bc4:	40020088 	.word	0x40020088
 8004bc8:	400200a0 	.word	0x400200a0
 8004bcc:	400200b8 	.word	0x400200b8
 8004bd0:	40020410 	.word	0x40020410
 8004bd4:	40020428 	.word	0x40020428
 8004bd8:	40020440 	.word	0x40020440
 8004bdc:	40020458 	.word	0x40020458
 8004be0:	40020470 	.word	0x40020470
 8004be4:	40020488 	.word	0x40020488
 8004be8:	400204a0 	.word	0x400204a0
 8004bec:	400204b8 	.word	0x400204b8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bf14      	ite	ne
 8004bfe:	2301      	movne	r3, #1
 8004c00:	2300      	moveq	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8087 	beq.w	8004d18 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	2220      	movs	r2, #32
 8004c14:	409a      	lsls	r2, r3
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d139      	bne.n	8004c9a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0216 	bic.w	r2, r2, #22
 8004c34:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695a      	ldr	r2, [r3, #20]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c44:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d103      	bne.n	8004c56 <HAL_DMA_IRQHandler+0x736>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0208 	bic.w	r2, r2, #8
 8004c64:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	223f      	movs	r2, #63	; 0x3f
 8004c70:	409a      	lsls	r2, r3
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 834a 	beq.w	8005324 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	4798      	blx	r3
          }
          return;
 8004c98:	e344      	b.n	8005324 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d018      	beq.n	8004cda <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d108      	bne.n	8004cc8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d02c      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
 8004cc6:	e027      	b.n	8004d18 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d023      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
 8004cd8:	e01e      	b.n	8004d18 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10f      	bne.n	8004d08 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0210 	bic.w	r2, r2, #16
 8004cf6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 8306 	beq.w	800532e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8088 	beq.w	8004e40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2204      	movs	r2, #4
 8004d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a7a      	ldr	r2, [pc, #488]	; (8004f28 <HAL_DMA_IRQHandler+0xa08>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d04a      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a79      	ldr	r2, [pc, #484]	; (8004f2c <HAL_DMA_IRQHandler+0xa0c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d045      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a77      	ldr	r2, [pc, #476]	; (8004f30 <HAL_DMA_IRQHandler+0xa10>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d040      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a76      	ldr	r2, [pc, #472]	; (8004f34 <HAL_DMA_IRQHandler+0xa14>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d03b      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a74      	ldr	r2, [pc, #464]	; (8004f38 <HAL_DMA_IRQHandler+0xa18>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d036      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a73      	ldr	r2, [pc, #460]	; (8004f3c <HAL_DMA_IRQHandler+0xa1c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d031      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a71      	ldr	r2, [pc, #452]	; (8004f40 <HAL_DMA_IRQHandler+0xa20>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d02c      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a70      	ldr	r2, [pc, #448]	; (8004f44 <HAL_DMA_IRQHandler+0xa24>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d027      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a6e      	ldr	r2, [pc, #440]	; (8004f48 <HAL_DMA_IRQHandler+0xa28>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d022      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a6d      	ldr	r2, [pc, #436]	; (8004f4c <HAL_DMA_IRQHandler+0xa2c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d01d      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a6b      	ldr	r2, [pc, #428]	; (8004f50 <HAL_DMA_IRQHandler+0xa30>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d018      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a6a      	ldr	r2, [pc, #424]	; (8004f54 <HAL_DMA_IRQHandler+0xa34>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d013      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a68      	ldr	r2, [pc, #416]	; (8004f58 <HAL_DMA_IRQHandler+0xa38>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00e      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a67      	ldr	r2, [pc, #412]	; (8004f5c <HAL_DMA_IRQHandler+0xa3c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d009      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a65      	ldr	r2, [pc, #404]	; (8004f60 <HAL_DMA_IRQHandler+0xa40>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d004      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x8b8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a64      	ldr	r2, [pc, #400]	; (8004f64 <HAL_DMA_IRQHandler+0xa44>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d108      	bne.n	8004dea <HAL_DMA_IRQHandler+0x8ca>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e007      	b.n	8004dfa <HAL_DMA_IRQHandler+0x8da>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d307      	bcc.n	8004e16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f2      	bne.n	8004dfa <HAL_DMA_IRQHandler+0x8da>
 8004e14:	e000      	b.n	8004e18 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e16:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2203      	movs	r2, #3
 8004e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004e36:	e003      	b.n	8004e40 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8272 	beq.w	800532e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
 8004e52:	e26c      	b.n	800532e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a43      	ldr	r2, [pc, #268]	; (8004f68 <HAL_DMA_IRQHandler+0xa48>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d022      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x984>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a42      	ldr	r2, [pc, #264]	; (8004f6c <HAL_DMA_IRQHandler+0xa4c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d01d      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x984>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a40      	ldr	r2, [pc, #256]	; (8004f70 <HAL_DMA_IRQHandler+0xa50>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d018      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x984>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a3f      	ldr	r2, [pc, #252]	; (8004f74 <HAL_DMA_IRQHandler+0xa54>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d013      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x984>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a3d      	ldr	r2, [pc, #244]	; (8004f78 <HAL_DMA_IRQHandler+0xa58>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00e      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x984>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a3c      	ldr	r2, [pc, #240]	; (8004f7c <HAL_DMA_IRQHandler+0xa5c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d009      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x984>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <HAL_DMA_IRQHandler+0xa60>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x984>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a39      	ldr	r2, [pc, #228]	; (8004f84 <HAL_DMA_IRQHandler+0xa64>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x988>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_DMA_IRQHandler+0x98a>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 823f 	beq.w	800532e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80cd 	beq.w	8005068 <HAL_DMA_IRQHandler+0xb48>
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80c7 	beq.w	8005068 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d049      	beq.n	8004f88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 8210 	beq.w	8005328 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f10:	e20a      	b.n	8005328 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8206 	beq.w	8005328 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f24:	e200      	b.n	8005328 <HAL_DMA_IRQHandler+0xe08>
 8004f26:	bf00      	nop
 8004f28:	40020010 	.word	0x40020010
 8004f2c:	40020028 	.word	0x40020028
 8004f30:	40020040 	.word	0x40020040
 8004f34:	40020058 	.word	0x40020058
 8004f38:	40020070 	.word	0x40020070
 8004f3c:	40020088 	.word	0x40020088
 8004f40:	400200a0 	.word	0x400200a0
 8004f44:	400200b8 	.word	0x400200b8
 8004f48:	40020410 	.word	0x40020410
 8004f4c:	40020428 	.word	0x40020428
 8004f50:	40020440 	.word	0x40020440
 8004f54:	40020458 	.word	0x40020458
 8004f58:	40020470 	.word	0x40020470
 8004f5c:	40020488 	.word	0x40020488
 8004f60:	400204a0 	.word	0x400204a0
 8004f64:	400204b8 	.word	0x400204b8
 8004f68:	58025408 	.word	0x58025408
 8004f6c:	5802541c 	.word	0x5802541c
 8004f70:	58025430 	.word	0x58025430
 8004f74:	58025444 	.word	0x58025444
 8004f78:	58025458 	.word	0x58025458
 8004f7c:	5802546c 	.word	0x5802546c
 8004f80:	58025480 	.word	0x58025480
 8004f84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d160      	bne.n	8005054 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a8c      	ldr	r2, [pc, #560]	; (80051c8 <HAL_DMA_IRQHandler+0xca8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d04a      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a8a      	ldr	r2, [pc, #552]	; (80051cc <HAL_DMA_IRQHandler+0xcac>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d045      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a89      	ldr	r2, [pc, #548]	; (80051d0 <HAL_DMA_IRQHandler+0xcb0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d040      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a87      	ldr	r2, [pc, #540]	; (80051d4 <HAL_DMA_IRQHandler+0xcb4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d03b      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a86      	ldr	r2, [pc, #536]	; (80051d8 <HAL_DMA_IRQHandler+0xcb8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d036      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a84      	ldr	r2, [pc, #528]	; (80051dc <HAL_DMA_IRQHandler+0xcbc>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d031      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a83      	ldr	r2, [pc, #524]	; (80051e0 <HAL_DMA_IRQHandler+0xcc0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d02c      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a81      	ldr	r2, [pc, #516]	; (80051e4 <HAL_DMA_IRQHandler+0xcc4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d027      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a80      	ldr	r2, [pc, #512]	; (80051e8 <HAL_DMA_IRQHandler+0xcc8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d022      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a7e      	ldr	r2, [pc, #504]	; (80051ec <HAL_DMA_IRQHandler+0xccc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d01d      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a7d      	ldr	r2, [pc, #500]	; (80051f0 <HAL_DMA_IRQHandler+0xcd0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d018      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7b      	ldr	r2, [pc, #492]	; (80051f4 <HAL_DMA_IRQHandler+0xcd4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d013      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a7a      	ldr	r2, [pc, #488]	; (80051f8 <HAL_DMA_IRQHandler+0xcd8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00e      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a78      	ldr	r2, [pc, #480]	; (80051fc <HAL_DMA_IRQHandler+0xcdc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d009      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a77      	ldr	r2, [pc, #476]	; (8005200 <HAL_DMA_IRQHandler+0xce0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d004      	beq.n	8005032 <HAL_DMA_IRQHandler+0xb12>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a75      	ldr	r2, [pc, #468]	; (8005204 <HAL_DMA_IRQHandler+0xce4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d108      	bne.n	8005044 <HAL_DMA_IRQHandler+0xb24>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0208 	bic.w	r2, r2, #8
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	e007      	b.n	8005054 <HAL_DMA_IRQHandler+0xb34>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0204 	bic.w	r2, r2, #4
 8005052:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8165 	beq.w	8005328 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005066:	e15f      	b.n	8005328 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	2202      	movs	r2, #2
 8005072:	409a      	lsls	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4013      	ands	r3, r2
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80c5 	beq.w	8005208 <HAL_DMA_IRQHandler+0xce8>
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80bf 	beq.w	8005208 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2202      	movs	r2, #2
 8005094:	409a      	lsls	r2, r3
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d018      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 813a 	beq.w	800532c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050c0:	e134      	b.n	800532c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 8130 	beq.w	800532c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050d4:	e12a      	b.n	800532c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d168      	bne.n	80051b2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a38      	ldr	r2, [pc, #224]	; (80051c8 <HAL_DMA_IRQHandler+0xca8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d04a      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a37      	ldr	r2, [pc, #220]	; (80051cc <HAL_DMA_IRQHandler+0xcac>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d045      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a35      	ldr	r2, [pc, #212]	; (80051d0 <HAL_DMA_IRQHandler+0xcb0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d040      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a34      	ldr	r2, [pc, #208]	; (80051d4 <HAL_DMA_IRQHandler+0xcb4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d03b      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a32      	ldr	r2, [pc, #200]	; (80051d8 <HAL_DMA_IRQHandler+0xcb8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d036      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a31      	ldr	r2, [pc, #196]	; (80051dc <HAL_DMA_IRQHandler+0xcbc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d031      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2f      	ldr	r2, [pc, #188]	; (80051e0 <HAL_DMA_IRQHandler+0xcc0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d02c      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a2e      	ldr	r2, [pc, #184]	; (80051e4 <HAL_DMA_IRQHandler+0xcc4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d027      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a2c      	ldr	r2, [pc, #176]	; (80051e8 <HAL_DMA_IRQHandler+0xcc8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d022      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2b      	ldr	r2, [pc, #172]	; (80051ec <HAL_DMA_IRQHandler+0xccc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d01d      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a29      	ldr	r2, [pc, #164]	; (80051f0 <HAL_DMA_IRQHandler+0xcd0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a28      	ldr	r2, [pc, #160]	; (80051f4 <HAL_DMA_IRQHandler+0xcd4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a26      	ldr	r2, [pc, #152]	; (80051f8 <HAL_DMA_IRQHandler+0xcd8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a25      	ldr	r2, [pc, #148]	; (80051fc <HAL_DMA_IRQHandler+0xcdc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a23      	ldr	r2, [pc, #140]	; (8005200 <HAL_DMA_IRQHandler+0xce0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_DMA_IRQHandler+0xc60>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a22      	ldr	r2, [pc, #136]	; (8005204 <HAL_DMA_IRQHandler+0xce4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d108      	bne.n	8005192 <HAL_DMA_IRQHandler+0xc72>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0214 	bic.w	r2, r2, #20
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e007      	b.n	80051a2 <HAL_DMA_IRQHandler+0xc82>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 020a 	bic.w	r2, r2, #10
 80051a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80b8 	beq.w	800532c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051c4:	e0b2      	b.n	800532c <HAL_DMA_IRQHandler+0xe0c>
 80051c6:	bf00      	nop
 80051c8:	40020010 	.word	0x40020010
 80051cc:	40020028 	.word	0x40020028
 80051d0:	40020040 	.word	0x40020040
 80051d4:	40020058 	.word	0x40020058
 80051d8:	40020070 	.word	0x40020070
 80051dc:	40020088 	.word	0x40020088
 80051e0:	400200a0 	.word	0x400200a0
 80051e4:	400200b8 	.word	0x400200b8
 80051e8:	40020410 	.word	0x40020410
 80051ec:	40020428 	.word	0x40020428
 80051f0:	40020440 	.word	0x40020440
 80051f4:	40020458 	.word	0x40020458
 80051f8:	40020470 	.word	0x40020470
 80051fc:	40020488 	.word	0x40020488
 8005200:	400204a0 	.word	0x400204a0
 8005204:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	2208      	movs	r2, #8
 8005212:	409a      	lsls	r2, r3
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4013      	ands	r3, r2
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8088 	beq.w	800532e <HAL_DMA_IRQHandler+0xe0e>
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8082 	beq.w	800532e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a41      	ldr	r2, [pc, #260]	; (8005334 <HAL_DMA_IRQHandler+0xe14>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d04a      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a3f      	ldr	r2, [pc, #252]	; (8005338 <HAL_DMA_IRQHandler+0xe18>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d045      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a3e      	ldr	r2, [pc, #248]	; (800533c <HAL_DMA_IRQHandler+0xe1c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d040      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3c      	ldr	r2, [pc, #240]	; (8005340 <HAL_DMA_IRQHandler+0xe20>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d03b      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a3b      	ldr	r2, [pc, #236]	; (8005344 <HAL_DMA_IRQHandler+0xe24>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d036      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a39      	ldr	r2, [pc, #228]	; (8005348 <HAL_DMA_IRQHandler+0xe28>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a38      	ldr	r2, [pc, #224]	; (800534c <HAL_DMA_IRQHandler+0xe2c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d02c      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a36      	ldr	r2, [pc, #216]	; (8005350 <HAL_DMA_IRQHandler+0xe30>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d027      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a35      	ldr	r2, [pc, #212]	; (8005354 <HAL_DMA_IRQHandler+0xe34>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a33      	ldr	r2, [pc, #204]	; (8005358 <HAL_DMA_IRQHandler+0xe38>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01d      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a32      	ldr	r2, [pc, #200]	; (800535c <HAL_DMA_IRQHandler+0xe3c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a30      	ldr	r2, [pc, #192]	; (8005360 <HAL_DMA_IRQHandler+0xe40>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2f      	ldr	r2, [pc, #188]	; (8005364 <HAL_DMA_IRQHandler+0xe44>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a2d      	ldr	r2, [pc, #180]	; (8005368 <HAL_DMA_IRQHandler+0xe48>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2c      	ldr	r2, [pc, #176]	; (800536c <HAL_DMA_IRQHandler+0xe4c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_DMA_IRQHandler+0xdaa>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <HAL_DMA_IRQHandler+0xe50>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d108      	bne.n	80052dc <HAL_DMA_IRQHandler+0xdbc>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 021c 	bic.w	r2, r2, #28
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e007      	b.n	80052ec <HAL_DMA_IRQHandler+0xdcc>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 020e 	bic.w	r2, r2, #14
 80052ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f0:	f003 031f 	and.w	r3, r3, #31
 80052f4:	2201      	movs	r2, #1
 80052f6:	409a      	lsls	r2, r3
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d009      	beq.n	800532e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	4798      	blx	r3
 8005322:	e004      	b.n	800532e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005324:	bf00      	nop
 8005326:	e002      	b.n	800532e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005328:	bf00      	nop
 800532a:	e000      	b.n	800532e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800532c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800532e:	3728      	adds	r7, #40	; 0x28
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40020010 	.word	0x40020010
 8005338:	40020028 	.word	0x40020028
 800533c:	40020040 	.word	0x40020040
 8005340:	40020058 	.word	0x40020058
 8005344:	40020070 	.word	0x40020070
 8005348:	40020088 	.word	0x40020088
 800534c:	400200a0 	.word	0x400200a0
 8005350:	400200b8 	.word	0x400200b8
 8005354:	40020410 	.word	0x40020410
 8005358:	40020428 	.word	0x40020428
 800535c:	40020440 	.word	0x40020440
 8005360:	40020458 	.word	0x40020458
 8005364:	40020470 	.word	0x40020470
 8005368:	40020488 	.word	0x40020488
 800536c:	400204a0 	.word	0x400204a0
 8005370:	400204b8 	.word	0x400204b8

08005374 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a84      	ldr	r2, [pc, #528]	; (80055a4 <DMA_SetConfig+0x230>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d072      	beq.n	800547e <DMA_SetConfig+0x10a>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a82      	ldr	r2, [pc, #520]	; (80055a8 <DMA_SetConfig+0x234>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d06d      	beq.n	800547e <DMA_SetConfig+0x10a>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a81      	ldr	r2, [pc, #516]	; (80055ac <DMA_SetConfig+0x238>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d068      	beq.n	800547e <DMA_SetConfig+0x10a>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a7f      	ldr	r2, [pc, #508]	; (80055b0 <DMA_SetConfig+0x23c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d063      	beq.n	800547e <DMA_SetConfig+0x10a>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a7e      	ldr	r2, [pc, #504]	; (80055b4 <DMA_SetConfig+0x240>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d05e      	beq.n	800547e <DMA_SetConfig+0x10a>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a7c      	ldr	r2, [pc, #496]	; (80055b8 <DMA_SetConfig+0x244>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d059      	beq.n	800547e <DMA_SetConfig+0x10a>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a7b      	ldr	r2, [pc, #492]	; (80055bc <DMA_SetConfig+0x248>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d054      	beq.n	800547e <DMA_SetConfig+0x10a>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a79      	ldr	r2, [pc, #484]	; (80055c0 <DMA_SetConfig+0x24c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d04f      	beq.n	800547e <DMA_SetConfig+0x10a>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a78      	ldr	r2, [pc, #480]	; (80055c4 <DMA_SetConfig+0x250>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d04a      	beq.n	800547e <DMA_SetConfig+0x10a>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a76      	ldr	r2, [pc, #472]	; (80055c8 <DMA_SetConfig+0x254>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d045      	beq.n	800547e <DMA_SetConfig+0x10a>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a75      	ldr	r2, [pc, #468]	; (80055cc <DMA_SetConfig+0x258>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d040      	beq.n	800547e <DMA_SetConfig+0x10a>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a73      	ldr	r2, [pc, #460]	; (80055d0 <DMA_SetConfig+0x25c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d03b      	beq.n	800547e <DMA_SetConfig+0x10a>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a72      	ldr	r2, [pc, #456]	; (80055d4 <DMA_SetConfig+0x260>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d036      	beq.n	800547e <DMA_SetConfig+0x10a>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a70      	ldr	r2, [pc, #448]	; (80055d8 <DMA_SetConfig+0x264>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d031      	beq.n	800547e <DMA_SetConfig+0x10a>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a6f      	ldr	r2, [pc, #444]	; (80055dc <DMA_SetConfig+0x268>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d02c      	beq.n	800547e <DMA_SetConfig+0x10a>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a6d      	ldr	r2, [pc, #436]	; (80055e0 <DMA_SetConfig+0x26c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d027      	beq.n	800547e <DMA_SetConfig+0x10a>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a6c      	ldr	r2, [pc, #432]	; (80055e4 <DMA_SetConfig+0x270>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d022      	beq.n	800547e <DMA_SetConfig+0x10a>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a6a      	ldr	r2, [pc, #424]	; (80055e8 <DMA_SetConfig+0x274>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01d      	beq.n	800547e <DMA_SetConfig+0x10a>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a69      	ldr	r2, [pc, #420]	; (80055ec <DMA_SetConfig+0x278>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d018      	beq.n	800547e <DMA_SetConfig+0x10a>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a67      	ldr	r2, [pc, #412]	; (80055f0 <DMA_SetConfig+0x27c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <DMA_SetConfig+0x10a>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a66      	ldr	r2, [pc, #408]	; (80055f4 <DMA_SetConfig+0x280>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00e      	beq.n	800547e <DMA_SetConfig+0x10a>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a64      	ldr	r2, [pc, #400]	; (80055f8 <DMA_SetConfig+0x284>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d009      	beq.n	800547e <DMA_SetConfig+0x10a>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a63      	ldr	r2, [pc, #396]	; (80055fc <DMA_SetConfig+0x288>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <DMA_SetConfig+0x10a>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a61      	ldr	r2, [pc, #388]	; (8005600 <DMA_SetConfig+0x28c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d101      	bne.n	8005482 <DMA_SetConfig+0x10e>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <DMA_SetConfig+0x110>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005490:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a3e      	ldr	r2, [pc, #248]	; (80055a4 <DMA_SetConfig+0x230>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d04a      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a3d      	ldr	r2, [pc, #244]	; (80055a8 <DMA_SetConfig+0x234>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d045      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a3b      	ldr	r2, [pc, #236]	; (80055ac <DMA_SetConfig+0x238>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d040      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a3a      	ldr	r2, [pc, #232]	; (80055b0 <DMA_SetConfig+0x23c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d03b      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a38      	ldr	r2, [pc, #224]	; (80055b4 <DMA_SetConfig+0x240>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d036      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a37      	ldr	r2, [pc, #220]	; (80055b8 <DMA_SetConfig+0x244>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d031      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a35      	ldr	r2, [pc, #212]	; (80055bc <DMA_SetConfig+0x248>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d02c      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a34      	ldr	r2, [pc, #208]	; (80055c0 <DMA_SetConfig+0x24c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d027      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a32      	ldr	r2, [pc, #200]	; (80055c4 <DMA_SetConfig+0x250>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d022      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a31      	ldr	r2, [pc, #196]	; (80055c8 <DMA_SetConfig+0x254>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d01d      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2f      	ldr	r2, [pc, #188]	; (80055cc <DMA_SetConfig+0x258>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d018      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a2e      	ldr	r2, [pc, #184]	; (80055d0 <DMA_SetConfig+0x25c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2c      	ldr	r2, [pc, #176]	; (80055d4 <DMA_SetConfig+0x260>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00e      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2b      	ldr	r2, [pc, #172]	; (80055d8 <DMA_SetConfig+0x264>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d009      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a29      	ldr	r2, [pc, #164]	; (80055dc <DMA_SetConfig+0x268>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <DMA_SetConfig+0x1d0>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <DMA_SetConfig+0x26c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d101      	bne.n	8005548 <DMA_SetConfig+0x1d4>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <DMA_SetConfig+0x1d6>
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d05a      	beq.n	8005604 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	223f      	movs	r2, #63	; 0x3f
 8005558:	409a      	lsls	r2, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800556c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b40      	cmp	r3, #64	; 0x40
 800557c:	d108      	bne.n	8005590 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800558e:	e087      	b.n	80056a0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	60da      	str	r2, [r3, #12]
}
 80055a0:	e07e      	b.n	80056a0 <DMA_SetConfig+0x32c>
 80055a2:	bf00      	nop
 80055a4:	40020010 	.word	0x40020010
 80055a8:	40020028 	.word	0x40020028
 80055ac:	40020040 	.word	0x40020040
 80055b0:	40020058 	.word	0x40020058
 80055b4:	40020070 	.word	0x40020070
 80055b8:	40020088 	.word	0x40020088
 80055bc:	400200a0 	.word	0x400200a0
 80055c0:	400200b8 	.word	0x400200b8
 80055c4:	40020410 	.word	0x40020410
 80055c8:	40020428 	.word	0x40020428
 80055cc:	40020440 	.word	0x40020440
 80055d0:	40020458 	.word	0x40020458
 80055d4:	40020470 	.word	0x40020470
 80055d8:	40020488 	.word	0x40020488
 80055dc:	400204a0 	.word	0x400204a0
 80055e0:	400204b8 	.word	0x400204b8
 80055e4:	58025408 	.word	0x58025408
 80055e8:	5802541c 	.word	0x5802541c
 80055ec:	58025430 	.word	0x58025430
 80055f0:	58025444 	.word	0x58025444
 80055f4:	58025458 	.word	0x58025458
 80055f8:	5802546c 	.word	0x5802546c
 80055fc:	58025480 	.word	0x58025480
 8005600:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a28      	ldr	r2, [pc, #160]	; (80056ac <DMA_SetConfig+0x338>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d022      	beq.n	8005654 <DMA_SetConfig+0x2e0>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a27      	ldr	r2, [pc, #156]	; (80056b0 <DMA_SetConfig+0x33c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d01d      	beq.n	8005654 <DMA_SetConfig+0x2e0>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a25      	ldr	r2, [pc, #148]	; (80056b4 <DMA_SetConfig+0x340>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <DMA_SetConfig+0x2e0>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a24      	ldr	r2, [pc, #144]	; (80056b8 <DMA_SetConfig+0x344>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <DMA_SetConfig+0x2e0>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a22      	ldr	r2, [pc, #136]	; (80056bc <DMA_SetConfig+0x348>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <DMA_SetConfig+0x2e0>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a21      	ldr	r2, [pc, #132]	; (80056c0 <DMA_SetConfig+0x34c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <DMA_SetConfig+0x2e0>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1f      	ldr	r2, [pc, #124]	; (80056c4 <DMA_SetConfig+0x350>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <DMA_SetConfig+0x2e0>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1e      	ldr	r2, [pc, #120]	; (80056c8 <DMA_SetConfig+0x354>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <DMA_SetConfig+0x2e4>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <DMA_SetConfig+0x2e6>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d020      	beq.n	80056a0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2201      	movs	r2, #1
 8005668:	409a      	lsls	r2, r3
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b40      	cmp	r3, #64	; 0x40
 800567c:	d108      	bne.n	8005690 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	60da      	str	r2, [r3, #12]
}
 800568e:	e007      	b.n	80056a0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	60da      	str	r2, [r3, #12]
}
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	58025408 	.word	0x58025408
 80056b0:	5802541c 	.word	0x5802541c
 80056b4:	58025430 	.word	0x58025430
 80056b8:	58025444 	.word	0x58025444
 80056bc:	58025458 	.word	0x58025458
 80056c0:	5802546c 	.word	0x5802546c
 80056c4:	58025480 	.word	0x58025480
 80056c8:	58025494 	.word	0x58025494

080056cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a42      	ldr	r2, [pc, #264]	; (80057e4 <DMA_CalcBaseAndBitshift+0x118>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d04a      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a41      	ldr	r2, [pc, #260]	; (80057e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d045      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a3f      	ldr	r2, [pc, #252]	; (80057ec <DMA_CalcBaseAndBitshift+0x120>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d040      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a3e      	ldr	r2, [pc, #248]	; (80057f0 <DMA_CalcBaseAndBitshift+0x124>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d03b      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a3c      	ldr	r2, [pc, #240]	; (80057f4 <DMA_CalcBaseAndBitshift+0x128>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d036      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a3b      	ldr	r2, [pc, #236]	; (80057f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d031      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a39      	ldr	r2, [pc, #228]	; (80057fc <DMA_CalcBaseAndBitshift+0x130>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d02c      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a38      	ldr	r2, [pc, #224]	; (8005800 <DMA_CalcBaseAndBitshift+0x134>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d027      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a36      	ldr	r2, [pc, #216]	; (8005804 <DMA_CalcBaseAndBitshift+0x138>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d022      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a35      	ldr	r2, [pc, #212]	; (8005808 <DMA_CalcBaseAndBitshift+0x13c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d01d      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a33      	ldr	r2, [pc, #204]	; (800580c <DMA_CalcBaseAndBitshift+0x140>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d018      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a32      	ldr	r2, [pc, #200]	; (8005810 <DMA_CalcBaseAndBitshift+0x144>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a30      	ldr	r2, [pc, #192]	; (8005814 <DMA_CalcBaseAndBitshift+0x148>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00e      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <DMA_CalcBaseAndBitshift+0x14c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d009      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2d      	ldr	r2, [pc, #180]	; (800581c <DMA_CalcBaseAndBitshift+0x150>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <DMA_CalcBaseAndBitshift+0xa8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <DMA_CalcBaseAndBitshift+0x154>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d101      	bne.n	8005778 <DMA_CalcBaseAndBitshift+0xac>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <DMA_CalcBaseAndBitshift+0xae>
 8005778:	2300      	movs	r3, #0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d024      	beq.n	80057c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	3b10      	subs	r3, #16
 8005786:	4a27      	ldr	r2, [pc, #156]	; (8005824 <DMA_CalcBaseAndBitshift+0x158>)
 8005788:	fba2 2303 	umull	r2, r3, r2, r3
 800578c:	091b      	lsrs	r3, r3, #4
 800578e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	4a24      	ldr	r2, [pc, #144]	; (8005828 <DMA_CalcBaseAndBitshift+0x15c>)
 8005798:	5cd3      	ldrb	r3, [r2, r3]
 800579a:	461a      	mov	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d908      	bls.n	80057b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	4b1f      	ldr	r3, [pc, #124]	; (800582c <DMA_CalcBaseAndBitshift+0x160>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	1d1a      	adds	r2, r3, #4
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	659a      	str	r2, [r3, #88]	; 0x58
 80057b6:	e00d      	b.n	80057d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	4b1b      	ldr	r3, [pc, #108]	; (800582c <DMA_CalcBaseAndBitshift+0x160>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6593      	str	r3, [r2, #88]	; 0x58
 80057c6:	e005      	b.n	80057d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	40020010 	.word	0x40020010
 80057e8:	40020028 	.word	0x40020028
 80057ec:	40020040 	.word	0x40020040
 80057f0:	40020058 	.word	0x40020058
 80057f4:	40020070 	.word	0x40020070
 80057f8:	40020088 	.word	0x40020088
 80057fc:	400200a0 	.word	0x400200a0
 8005800:	400200b8 	.word	0x400200b8
 8005804:	40020410 	.word	0x40020410
 8005808:	40020428 	.word	0x40020428
 800580c:	40020440 	.word	0x40020440
 8005810:	40020458 	.word	0x40020458
 8005814:	40020470 	.word	0x40020470
 8005818:	40020488 	.word	0x40020488
 800581c:	400204a0 	.word	0x400204a0
 8005820:	400204b8 	.word	0x400204b8
 8005824:	aaaaaaab 	.word	0xaaaaaaab
 8005828:	0801a02c 	.word	0x0801a02c
 800582c:	fffffc00 	.word	0xfffffc00

08005830 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d120      	bne.n	8005886 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	2b03      	cmp	r3, #3
 800584a:	d858      	bhi.n	80058fe <DMA_CheckFifoParam+0xce>
 800584c:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <DMA_CheckFifoParam+0x24>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	08005865 	.word	0x08005865
 8005858:	08005877 	.word	0x08005877
 800585c:	08005865 	.word	0x08005865
 8005860:	080058ff 	.word	0x080058ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d048      	beq.n	8005902 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005874:	e045      	b.n	8005902 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800587e:	d142      	bne.n	8005906 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005884:	e03f      	b.n	8005906 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588e:	d123      	bne.n	80058d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	2b03      	cmp	r3, #3
 8005896:	d838      	bhi.n	800590a <DMA_CheckFifoParam+0xda>
 8005898:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <DMA_CheckFifoParam+0x70>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058b1 	.word	0x080058b1
 80058a4:	080058b7 	.word	0x080058b7
 80058a8:	080058b1 	.word	0x080058b1
 80058ac:	080058c9 	.word	0x080058c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
        break;
 80058b4:	e030      	b.n	8005918 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d025      	beq.n	800590e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058c6:	e022      	b.n	800590e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058d0:	d11f      	bne.n	8005912 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058d6:	e01c      	b.n	8005912 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d902      	bls.n	80058e6 <DMA_CheckFifoParam+0xb6>
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d003      	beq.n	80058ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80058e4:	e018      	b.n	8005918 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	73fb      	strb	r3, [r7, #15]
        break;
 80058ea:	e015      	b.n	8005918 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00e      	beq.n	8005916 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
    break;
 80058fc:	e00b      	b.n	8005916 <DMA_CheckFifoParam+0xe6>
        break;
 80058fe:	bf00      	nop
 8005900:	e00a      	b.n	8005918 <DMA_CheckFifoParam+0xe8>
        break;
 8005902:	bf00      	nop
 8005904:	e008      	b.n	8005918 <DMA_CheckFifoParam+0xe8>
        break;
 8005906:	bf00      	nop
 8005908:	e006      	b.n	8005918 <DMA_CheckFifoParam+0xe8>
        break;
 800590a:	bf00      	nop
 800590c:	e004      	b.n	8005918 <DMA_CheckFifoParam+0xe8>
        break;
 800590e:	bf00      	nop
 8005910:	e002      	b.n	8005918 <DMA_CheckFifoParam+0xe8>
        break;
 8005912:	bf00      	nop
 8005914:	e000      	b.n	8005918 <DMA_CheckFifoParam+0xe8>
    break;
 8005916:	bf00      	nop
    }
  }

  return status;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop

08005928 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a38      	ldr	r2, [pc, #224]	; (8005a1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d022      	beq.n	8005986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a36      	ldr	r2, [pc, #216]	; (8005a20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01d      	beq.n	8005986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a35      	ldr	r2, [pc, #212]	; (8005a24 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d018      	beq.n	8005986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a33      	ldr	r2, [pc, #204]	; (8005a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a32      	ldr	r2, [pc, #200]	; (8005a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00e      	beq.n	8005986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a30      	ldr	r2, [pc, #192]	; (8005a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d009      	beq.n	8005986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a2f      	ldr	r2, [pc, #188]	; (8005a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2d      	ldr	r2, [pc, #180]	; (8005a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d101      	bne.n	800598a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01a      	beq.n	80059c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	3b08      	subs	r3, #8
 8005998:	4a28      	ldr	r2, [pc, #160]	; (8005a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	461a      	mov	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a24      	ldr	r2, [pc, #144]	; (8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80059b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	2201      	movs	r2, #1
 80059be:	409a      	lsls	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059c4:	e024      	b.n	8005a10 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	3b10      	subs	r3, #16
 80059ce:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4a1c      	ldr	r2, [pc, #112]	; (8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d806      	bhi.n	80059ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4a1b      	ldr	r2, [pc, #108]	; (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d902      	bls.n	80059ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3308      	adds	r3, #8
 80059ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	461a      	mov	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a16      	ldr	r2, [pc, #88]	; (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a00:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 031f 	and.w	r3, r3, #31
 8005a08:	2201      	movs	r2, #1
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	58025408 	.word	0x58025408
 8005a20:	5802541c 	.word	0x5802541c
 8005a24:	58025430 	.word	0x58025430
 8005a28:	58025444 	.word	0x58025444
 8005a2c:	58025458 	.word	0x58025458
 8005a30:	5802546c 	.word	0x5802546c
 8005a34:	58025480 	.word	0x58025480
 8005a38:	58025494 	.word	0x58025494
 8005a3c:	cccccccd 	.word	0xcccccccd
 8005a40:	16009600 	.word	0x16009600
 8005a44:	58025880 	.word	0x58025880
 8005a48:	aaaaaaab 	.word	0xaaaaaaab
 8005a4c:	400204b8 	.word	0x400204b8
 8005a50:	4002040f 	.word	0x4002040f
 8005a54:	10008200 	.word	0x10008200
 8005a58:	40020880 	.word	0x40020880

08005a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d04a      	beq.n	8005b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d847      	bhi.n	8005b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a25      	ldr	r2, [pc, #148]	; (8005b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d022      	beq.n	8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a24      	ldr	r2, [pc, #144]	; (8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d01d      	beq.n	8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d018      	beq.n	8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d013      	beq.n	8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1f      	ldr	r2, [pc, #124]	; (8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00e      	beq.n	8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1e      	ldr	r2, [pc, #120]	; (8005b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d009      	beq.n	8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1c      	ldr	r2, [pc, #112]	; (8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d101      	bne.n	8005acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005acc:	2300      	movs	r3, #0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4b17      	ldr	r3, [pc, #92]	; (8005b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	461a      	mov	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ae4:	671a      	str	r2, [r3, #112]	; 0x70
 8005ae6:	e009      	b.n	8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	461a      	mov	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a11      	ldr	r2, [pc, #68]	; (8005b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005afa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	2201      	movs	r2, #1
 8005b02:	409a      	lsls	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005b08:	bf00      	nop
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	58025408 	.word	0x58025408
 8005b18:	5802541c 	.word	0x5802541c
 8005b1c:	58025430 	.word	0x58025430
 8005b20:	58025444 	.word	0x58025444
 8005b24:	58025458 	.word	0x58025458
 8005b28:	5802546c 	.word	0x5802546c
 8005b2c:	58025480 	.word	0x58025480
 8005b30:	58025494 	.word	0x58025494
 8005b34:	1600963f 	.word	0x1600963f
 8005b38:	58025940 	.word	0x58025940
 8005b3c:	1000823f 	.word	0x1000823f
 8005b40:	40020940 	.word	0x40020940

08005b44 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b098      	sub	sp, #96	; 0x60
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005b4c:	4a84      	ldr	r2, [pc, #528]	; (8005d60 <HAL_FDCAN_Init+0x21c>)
 8005b4e:	f107 030c 	add.w	r3, r7, #12
 8005b52:	4611      	mov	r1, r2
 8005b54:	224c      	movs	r2, #76	; 0x4c
 8005b56:	4618      	mov	r0, r3
 8005b58:	f012 fd28 	bl	80185ac <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e1ca      	b.n	8005efc <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a7e      	ldr	r2, [pc, #504]	; (8005d64 <HAL_FDCAN_Init+0x220>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d106      	bne.n	8005b7e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005b78:	461a      	mov	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fd f94e 	bl	8002e34 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0210 	bic.w	r2, r2, #16
 8005ba6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ba8:	f7fd fdaa 	bl	8003700 <HAL_GetTick>
 8005bac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005bae:	e014      	b.n	8005bda <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005bb0:	f7fd fda6 	bl	8003700 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b0a      	cmp	r3, #10
 8005bbc:	d90d      	bls.n	8005bda <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bc4:	f043 0201 	orr.w	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2203      	movs	r2, #3
 8005bd2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e190      	b.n	8005efc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d0e3      	beq.n	8005bb0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bf8:	f7fd fd82 	bl	8003700 <HAL_GetTick>
 8005bfc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005bfe:	e014      	b.n	8005c2a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c00:	f7fd fd7e 	bl	8003700 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b0a      	cmp	r3, #10
 8005c0c:	d90d      	bls.n	8005c2a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c14:	f043 0201 	orr.w	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2203      	movs	r2, #3
 8005c22:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e168      	b.n	8005efc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0e3      	beq.n	8005c00 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0202 	orr.w	r2, r2, #2
 8005c46:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	7c1b      	ldrb	r3, [r3, #16]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d108      	bne.n	8005c62 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5e:	619a      	str	r2, [r3, #24]
 8005c60:	e007      	b.n	8005c72 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c70:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	7c5b      	ldrb	r3, [r3, #17]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d108      	bne.n	8005c8c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c88:	619a      	str	r2, [r3, #24]
 8005c8a:	e007      	b.n	8005c9c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c9a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	7c9b      	ldrb	r3, [r3, #18]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d108      	bne.n	8005cb6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cb2:	619a      	str	r2, [r3, #24]
 8005cb4:	e007      	b.n	8005cc6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cc4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005cea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0210 	bic.w	r2, r2, #16
 8005cfa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d108      	bne.n	8005d16 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0204 	orr.w	r2, r2, #4
 8005d12:	619a      	str	r2, [r3, #24]
 8005d14:	e030      	b.n	8005d78 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02c      	beq.n	8005d78 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d020      	beq.n	8005d68 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699a      	ldr	r2, [r3, #24]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d34:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0210 	orr.w	r2, r2, #16
 8005d44:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d114      	bne.n	8005d78 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699a      	ldr	r2, [r3, #24]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0220 	orr.w	r2, r2, #32
 8005d5c:	619a      	str	r2, [r3, #24]
 8005d5e:	e00b      	b.n	8005d78 <HAL_FDCAN_Init+0x234>
 8005d60:	08019f38 	.word	0x08019f38
 8005d64:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0220 	orr.w	r2, r2, #32
 8005d76:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d88:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005d90:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005da0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005da2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dac:	d115      	bne.n	8005dda <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	3b01      	subs	r3, #1
 8005dba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005dbc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005dc6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005dd6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005dd8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e00:	4413      	add	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d012      	beq.n	8005e2c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005e0e:	f023 0107 	bic.w	r1, r3, #7
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d012      	beq.n	8005e5a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e3c:	f023 0107 	bic.w	r1, r3, #7
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d013      	beq.n	8005e8a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e6a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e78:	4413      	add	r3, r2
 8005e7a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005e7e:	011a      	lsls	r2, r3, #4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d013      	beq.n	8005eba <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e9a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005eae:	021a      	lsls	r2, r3, #8
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <HAL_FDCAN_Init+0x3c0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d107      	bne.n	8005ed4 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f022 0203 	bic.w	r2, r2, #3
 8005ed2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fddf 	bl	8006ab0 <FDCAN_CalcultateRamBlockAddresses>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005ef8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3760      	adds	r7, #96	; 0x60
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	4000a000 	.word	0x4000a000

08005f08 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f18:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d002      	beq.n	8005f26 <HAL_FDCAN_ConfigFilter+0x1e>
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d157      	bne.n	8005fd6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d12b      	bne.n	8005f86 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b07      	cmp	r3, #7
 8005f34:	d10d      	bne.n	8005f52 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005f42:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005f48:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005f4a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e00e      	b.n	8005f70 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005f5e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005f66:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e025      	b.n	8005fd2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	075a      	lsls	r2, r3, #29
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	2b07      	cmp	r3, #7
 8005f9a:	d103      	bne.n	8005fa4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	e006      	b.n	8005fb2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	079a      	lsls	r2, r3, #30
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e008      	b.n	8005fe8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fdc:	f043 0202 	orr.w	r2, r3, #2
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
  }
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	d110      	bne.n	8006030 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006016:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800601c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	e008      	b.n	8006042 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006036:	f043 0204 	orr.w	r2, r3, #4
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
  }
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	d109      	bne.n	8006076 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006070:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	e008      	b.n	8006088 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800607c:	f043 0204 	orr.w	r2, r3, #4
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
  }
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d111      	bne.n	80060cc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e008      	b.n	80060de <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060d2:	f043 0204 	orr.w	r2, r3, #4
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
  }
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b08b      	sub	sp, #44	; 0x2c
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006104:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006106:	7efb      	ldrb	r3, [r7, #27]
 8006108:	2b02      	cmp	r3, #2
 800610a:	f040 813b 	bne.w	8006384 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d145      	bne.n	80061a0 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800611c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d109      	bne.n	8006138 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e12e      	b.n	8006396 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800614e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e11c      	b.n	8006396 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006164:	0e1b      	lsrs	r3, r3, #24
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d103      	bne.n	8006176 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800617e:	0a1b      	lsrs	r3, r3, #8
 8006180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	4413      	add	r3, r2
 8006188:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006192:	69f9      	ldr	r1, [r7, #28]
 8006194:	fb01 f303 	mul.w	r3, r1, r3
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
 800619e:	e061      	b.n	8006264 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b41      	cmp	r3, #65	; 0x41
 80061a4:	d145      	bne.n	8006232 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061bc:	f043 0220 	orr.w	r2, r3, #32
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e0e5      	b.n	8006396 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80061d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d109      	bne.n	80061ee <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e0d3      	b.n	8006396 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80061f6:	0e1b      	lsrs	r3, r3, #24
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d103      	bne.n	8006208 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006210:	0a1b      	lsrs	r3, r3, #8
 8006212:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006224:	69f9      	ldr	r1, [r7, #28]
 8006226:	fb01 f303 	mul.w	r3, r1, r3
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
 8006230:	e018      	b.n	8006264 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	429a      	cmp	r2, r3
 800623a:	d309      	bcc.n	8006250 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006242:	f043 0220 	orr.w	r2, r3, #32
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e0a2      	b.n	8006396 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	fb01 f303 	mul.w	r3, r1, r3
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d107      	bne.n	8006288 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	0c9b      	lsrs	r3, r3, #18
 800627e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	e005      	b.n	8006294 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	3304      	adds	r3, #4
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	0e1b      	lsrs	r3, r3, #24
 80062e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	0fda      	lsrs	r2, r3, #31
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	3304      	adds	r3, #4
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006302:	2300      	movs	r3, #0
 8006304:	623b      	str	r3, [r7, #32]
 8006306:	e00a      	b.n	800631e <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	441a      	add	r2, r3
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	440b      	add	r3, r1
 8006314:	7812      	ldrb	r2, [r2, #0]
 8006316:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	3301      	adds	r3, #1
 800631c:	623b      	str	r3, [r7, #32]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	0c1b      	lsrs	r3, r3, #16
 8006324:	4a1f      	ldr	r2, [pc, #124]	; (80063a4 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8006326:	5cd3      	ldrb	r3, [r2, r3]
 8006328:	461a      	mov	r2, r3
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	4293      	cmp	r3, r2
 800632e:	d3eb      	bcc.n	8006308 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d105      	bne.n	8006342 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006340:	e01e      	b.n	8006380 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b41      	cmp	r3, #65	; 0x41
 8006346:	d105      	bne.n	8006354 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8006352:	e015      	b.n	8006380 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b1f      	cmp	r3, #31
 8006358:	d808      	bhi.n	800636c <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2101      	movs	r1, #1
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	fa01 f202 	lsl.w	r2, r1, r2
 8006366:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800636a:	e009      	b.n	8006380 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 021f 	and.w	r2, r3, #31
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2101      	movs	r1, #1
 8006378:	fa01 f202 	lsl.w	r2, r1, r2
 800637c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	e008      	b.n	8006396 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800638a:	f043 0208 	orr.w	r2, r3, #8
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
  }
}
 8006396:	4618      	mov	r0, r3
 8006398:	372c      	adds	r7, #44	; 0x2c
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	0801a034 	.word	0x0801a034

080063a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80063ba:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d002      	beq.n	80063c8 <HAL_FDCAN_ActivateNotification+0x20>
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d155      	bne.n	8006474 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d108      	bne.n	80063e8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0201 	orr.w	r2, r2, #1
 80063e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80063e6:	e014      	b.n	8006412 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4013      	ands	r3, r2
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d108      	bne.n	800640a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0202 	orr.w	r2, r2, #2
 8006406:	65da      	str	r2, [r3, #92]	; 0x5c
 8006408:	e003      	b.n	8006412 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2203      	movs	r2, #3
 8006410:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006418:	2b00      	cmp	r3, #0
 800641a:	d009      	beq.n	8006430 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	430a      	orrs	r2, r1
 800642c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	430a      	orrs	r2, r1
 800644a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	4b0f      	ldr	r3, [pc, #60]	; (8006494 <HAL_FDCAN_ActivateNotification+0xec>)
 8006458:	4013      	ands	r3, r2
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	430b      	orrs	r3, r1
 8006460:	6553      	str	r3, [r2, #84]	; 0x54
 8006462:	4b0d      	ldr	r3, [pc, #52]	; (8006498 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006464:	695a      	ldr	r2, [r3, #20]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	0f9b      	lsrs	r3, r3, #30
 800646a:	490b      	ldr	r1, [pc, #44]	; (8006498 <HAL_FDCAN_ActivateNotification+0xf0>)
 800646c:	4313      	orrs	r3, r2
 800646e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	e008      	b.n	8006486 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800647a:	f043 0202 	orr.w	r2, r3, #2
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
  }
}
 8006486:	4618      	mov	r0, r3
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	3fcfffff 	.word	0x3fcfffff
 8006498:	4000a800 	.word	0x4000a800

0800649c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b092      	sub	sp, #72	; 0x48
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80064a4:	4b90      	ldr	r3, [pc, #576]	; (80066e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	079b      	lsls	r3, r3, #30
 80064aa:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80064ac:	4b8e      	ldr	r3, [pc, #568]	; (80066e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	079b      	lsls	r3, r3, #30
 80064b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064b4:	4013      	ands	r3, r2
 80064b6:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064c2:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064cc:	4013      	ands	r3, r2
 80064ce:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064e4:	4013      	ands	r3, r2
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064fc:	4013      	ands	r3, r2
 80064fe:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006506:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800650a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006514:	4013      	ands	r3, r2
 8006516:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8006522:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652c:	4013      	ands	r3, r2
 800652e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653a:	2b00      	cmp	r3, #0
 800653c:	d011      	beq.n	8006562 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006554:	651a      	str	r2, [r3, #80]	; 0x50
 8006556:	4b64      	ldr	r3, [pc, #400]	; (80066e8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006558:	2200      	movs	r2, #0
 800655a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa5a 	bl	8006a16 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01e      	beq.n	80065ae <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800657a:	2b00      	cmp	r3, #0
 800657c:	d017      	beq.n	80065ae <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006592:	4013      	ands	r3, r2
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800659e:	651a      	str	r2, [r3, #80]	; 0x50
 80065a0:	4b51      	ldr	r3, [pc, #324]	; (80066e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80065a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa0b 	bl	80069c4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80065ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00d      	beq.n	80065d0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065ba:	4b4c      	ldr	r3, [pc, #304]	; (80066ec <HAL_FDCAN_IRQHandler+0x250>)
 80065bc:	400b      	ands	r3, r1
 80065be:	6513      	str	r3, [r2, #80]	; 0x50
 80065c0:	4a49      	ldr	r2, [pc, #292]	; (80066e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80065c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c4:	0f9b      	lsrs	r3, r3, #30
 80065c6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80065c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f9c4 	bl	8006958 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80065d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00d      	beq.n	80065f2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065dc:	4b43      	ldr	r3, [pc, #268]	; (80066ec <HAL_FDCAN_IRQHandler+0x250>)
 80065de:	400b      	ands	r3, r1
 80065e0:	6513      	str	r3, [r2, #80]	; 0x50
 80065e2:	4a41      	ldr	r2, [pc, #260]	; (80066e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80065e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e6:	0f9b      	lsrs	r3, r3, #30
 80065e8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80065ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f9be 	bl	800696e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80065f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00d      	beq.n	8006614 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065fe:	4b3b      	ldr	r3, [pc, #236]	; (80066ec <HAL_FDCAN_IRQHandler+0x250>)
 8006600:	400b      	ands	r3, r1
 8006602:	6513      	str	r3, [r2, #80]	; 0x50
 8006604:	4a38      	ldr	r2, [pc, #224]	; (80066e8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006608:	0f9b      	lsrs	r3, r3, #30
 800660a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800660c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fa f87c 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00d      	beq.n	8006636 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006620:	4b32      	ldr	r3, [pc, #200]	; (80066ec <HAL_FDCAN_IRQHandler+0x250>)
 8006622:	400b      	ands	r3, r1
 8006624:	6513      	str	r3, [r2, #80]	; 0x50
 8006626:	4a30      	ldr	r2, [pc, #192]	; (80066e8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	0f9b      	lsrs	r3, r3, #30
 800662c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800662e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f9a7 	bl	8006984 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006640:	2b00      	cmp	r3, #0
 8006642:	d011      	beq.n	8006668 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800665a:	651a      	str	r2, [r3, #80]	; 0x50
 800665c:	4b22      	ldr	r3, [pc, #136]	; (80066e8 <HAL_FDCAN_IRQHandler+0x24c>)
 800665e:	2200      	movs	r2, #0
 8006660:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f999 	bl	800699a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01e      	beq.n	80066b4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006680:	2b00      	cmp	r3, #0
 8006682:	d017      	beq.n	80066b4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006698:	4013      	ands	r3, r2
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a4:	651a      	str	r2, [r3, #80]	; 0x50
 80066a6:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80066ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f97d 	bl	80069ae <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d016      	beq.n	80066f0 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00f      	beq.n	80066f0 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80066d8:	651a      	str	r2, [r3, #80]	; 0x50
 80066da:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <HAL_FDCAN_IRQHandler+0x24c>)
 80066dc:	2200      	movs	r2, #0
 80066de:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f97a 	bl	80069da <HAL_FDCAN_RxBufferNewMessageCallback>
 80066e6:	e003      	b.n	80066f0 <HAL_FDCAN_IRQHandler+0x254>
 80066e8:	4000a800 	.word	0x4000a800
 80066ec:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d011      	beq.n	8006722 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006714:	651a      	str	r2, [r3, #80]	; 0x50
 8006716:	4b8d      	ldr	r3, [pc, #564]	; (800694c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006718:	2200      	movs	r2, #0
 800671a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f966 	bl	80069ee <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d011      	beq.n	8006754 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006746:	651a      	str	r2, [r3, #80]	; 0x50
 8006748:	4b80      	ldr	r3, [pc, #512]	; (800694c <HAL_FDCAN_IRQHandler+0x4b0>)
 800674a:	2200      	movs	r2, #0
 800674c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f957 	bl	8006a02 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d016      	beq.n	8006790 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00f      	beq.n	8006790 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006778:	651a      	str	r2, [r3, #80]	; 0x50
 800677a:	4b74      	ldr	r3, [pc, #464]	; (800694c <HAL_FDCAN_IRQHandler+0x4b0>)
 800677c:	2200      	movs	r2, #0
 800677e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006786:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00d      	beq.n	80067b2 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800679c:	4b6c      	ldr	r3, [pc, #432]	; (8006950 <HAL_FDCAN_IRQHandler+0x4b4>)
 800679e:	400b      	ands	r3, r1
 80067a0:	6513      	str	r3, [r2, #80]	; 0x50
 80067a2:	4a6a      	ldr	r2, [pc, #424]	; (800694c <HAL_FDCAN_IRQHandler+0x4b0>)
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	0f9b      	lsrs	r3, r3, #30
 80067a8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80067aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f946 	bl	8006a3e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80067b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d011      	beq.n	80067dc <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067be:	4b64      	ldr	r3, [pc, #400]	; (8006950 <HAL_FDCAN_IRQHandler+0x4b4>)
 80067c0:	400b      	ands	r3, r1
 80067c2:	6513      	str	r3, [r2, #80]	; 0x50
 80067c4:	4a61      	ldr	r2, [pc, #388]	; (800694c <HAL_FDCAN_IRQHandler+0x4b0>)
 80067c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c8:	0f9b      	lsrs	r3, r3, #30
 80067ca:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80067d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a5c      	ldr	r2, [pc, #368]	; (8006954 <HAL_FDCAN_IRQHandler+0x4b8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	f040 80a6 	bne.w	8006934 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 809e 	beq.w	8006934 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680c:	4013      	ands	r3, r2
 800680e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800681a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	4013      	ands	r3, r2
 8006826:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006832:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	69fa      	ldr	r2, [r7, #28]
 800683c:	4013      	ands	r3, r2
 800683e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800684a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	4013      	ands	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006862:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4013      	ands	r3, r2
 800686e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	2b00      	cmp	r3, #0
 8006874:	d007      	beq.n	8006886 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800687e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f8e7 	bl	8006a54 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d007      	beq.n	800689c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	6a3a      	ldr	r2, [r7, #32]
 8006892:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006894:	6a39      	ldr	r1, [r7, #32]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f8e7 	bl	8006a6a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01b      	beq.n	80068e2 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d014      	beq.n	80068e2 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068be:	0c1b      	lsrs	r3, r3, #16
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068ce:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2240      	movs	r2, #64	; 0x40
 80068d6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	6939      	ldr	r1, [r7, #16]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f8cf 	bl	8006a80 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80068f0:	69f9      	ldr	r1, [r7, #28]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f8d0 	bl	8006a98 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	431a      	orrs	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f873 	bl	8006a2a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006944:	bf00      	nop
 8006946:	3748      	adds	r7, #72	; 0x48
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	4000a800 	.word	0x4000a800
 8006950:	3fcfffff 	.word	0x3fcfffff
 8006954:	4000a000 	.word	0x4000a000

08006958 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006ac6:	4ba7      	ldr	r3, [pc, #668]	; (8006d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	0091      	lsls	r1, r2, #2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6812      	ldr	r2, [r2, #0]
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae8:	041a      	lsls	r2, r3, #16
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	4413      	add	r3, r2
 8006afc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b06:	4b97      	ldr	r3, [pc, #604]	; (8006d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	0091      	lsls	r1, r2, #2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6812      	ldr	r2, [r2, #0]
 8006b12:	430b      	orrs	r3, r1
 8006b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b20:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b28:	041a      	lsls	r2, r3, #16
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006b48:	4b86      	ldr	r3, [pc, #536]	; (8006d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	0091      	lsls	r1, r2, #2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	430b      	orrs	r3, r1
 8006b56:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b62:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	041a      	lsls	r2, r3, #16
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	4413      	add	r3, r2
 8006b86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006b90:	4b74      	ldr	r3, [pc, #464]	; (8006d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	0091      	lsls	r1, r2, #2
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006baa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	041a      	lsls	r2, r3, #16
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006bc6:	fb02 f303 	mul.w	r3, r2, r3
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	4413      	add	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006bd8:	4b62      	ldr	r3, [pc, #392]	; (8006d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	0091      	lsls	r1, r2, #2
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6812      	ldr	r2, [r2, #0]
 8006be4:	430b      	orrs	r3, r1
 8006be6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006bf2:	fb02 f303 	mul.w	r3, r2, r3
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006c04:	4b57      	ldr	r3, [pc, #348]	; (8006d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	0091      	lsls	r1, r2, #2
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	430b      	orrs	r3, r1
 8006c12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c1e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c26:	041a      	lsls	r2, r3, #16
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006c46:	4b47      	ldr	r3, [pc, #284]	; (8006d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	0091      	lsls	r1, r2, #2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	430b      	orrs	r3, r1
 8006c54:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c60:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c68:	041a      	lsls	r2, r3, #16
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c7c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c84:	061a      	lsls	r2, r3, #24
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c94:	4b34      	ldr	r3, [pc, #208]	; (8006d68 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006c96:	4413      	add	r3, r2
 8006c98:	009a      	lsls	r2, r3, #2
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	441a      	add	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	441a      	add	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006cca:	fb01 f303 	mul.w	r3, r1, r3
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	441a      	add	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006ce2:	fb01 f303 	mul.w	r3, r1, r3
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	441a      	add	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006cfa:	fb01 f303 	mul.w	r3, r1, r3
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	441a      	add	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	441a      	add	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006d2a:	fb01 f303 	mul.w	r3, r1, r3
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	441a      	add	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006d46:	fb01 f303 	mul.w	r3, r1, r3
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	441a      	add	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5a:	4a04      	ldr	r2, [pc, #16]	; (8006d6c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d915      	bls.n	8006d8c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006d60:	e006      	b.n	8006d70 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006d62:	bf00      	nop
 8006d64:	ffff0003 	.word	0xffff0003
 8006d68:	10002b00 	.word	0x10002b00
 8006d6c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d76:	f043 0220 	orr.w	r2, r3, #32
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2203      	movs	r2, #3
 8006d84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e010      	b.n	8006dae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	e005      	b.n	8006da0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d3f3      	bcc.n	8006d94 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop

08006dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b089      	sub	sp, #36	; 0x24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006dca:	4b89      	ldr	r3, [pc, #548]	; (8006ff0 <HAL_GPIO_Init+0x234>)
 8006dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006dce:	e194      	b.n	80070fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ddc:	4013      	ands	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8186 	beq.w	80070f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d00b      	beq.n	8006e08 <HAL_GPIO_Init+0x4c>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d007      	beq.n	8006e08 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dfc:	2b11      	cmp	r3, #17
 8006dfe:	d003      	beq.n	8006e08 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b12      	cmp	r3, #18
 8006e06:	d130      	bne.n	8006e6a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	2203      	movs	r2, #3
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	43db      	mvns	r3, r3
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e3e:	2201      	movs	r2, #1
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	43db      	mvns	r3, r3
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	091b      	lsrs	r3, r3, #4
 8006e54:	f003 0201 	and.w	r2, r3, #1
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	2203      	movs	r2, #3
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d003      	beq.n	8006eaa <HAL_GPIO_Init+0xee>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2b12      	cmp	r3, #18
 8006ea8:	d123      	bne.n	8006ef2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	08da      	lsrs	r2, r3, #3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3208      	adds	r2, #8
 8006eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	220f      	movs	r2, #15
 8006ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec6:	43db      	mvns	r3, r3
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	691a      	ldr	r2, [r3, #16]
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	fa02 f303 	lsl.w	r3, r2, r3
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	08da      	lsrs	r2, r3, #3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3208      	adds	r2, #8
 8006eec:	69b9      	ldr	r1, [r7, #24]
 8006eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	2203      	movs	r2, #3
 8006efe:	fa02 f303 	lsl.w	r3, r2, r3
 8006f02:	43db      	mvns	r3, r3
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	4013      	ands	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f003 0203 	and.w	r2, r3, #3
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80e0 	beq.w	80070f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f34:	4b2f      	ldr	r3, [pc, #188]	; (8006ff4 <HAL_GPIO_Init+0x238>)
 8006f36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f3a:	4a2e      	ldr	r2, [pc, #184]	; (8006ff4 <HAL_GPIO_Init+0x238>)
 8006f3c:	f043 0302 	orr.w	r3, r3, #2
 8006f40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006f44:	4b2b      	ldr	r3, [pc, #172]	; (8006ff4 <HAL_GPIO_Init+0x238>)
 8006f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f52:	4a29      	ldr	r2, [pc, #164]	; (8006ff8 <HAL_GPIO_Init+0x23c>)
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	089b      	lsrs	r3, r3, #2
 8006f58:	3302      	adds	r3, #2
 8006f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	220f      	movs	r2, #15
 8006f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6e:	43db      	mvns	r3, r3
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	4013      	ands	r3, r2
 8006f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a20      	ldr	r2, [pc, #128]	; (8006ffc <HAL_GPIO_Init+0x240>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d052      	beq.n	8007024 <HAL_GPIO_Init+0x268>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1f      	ldr	r2, [pc, #124]	; (8007000 <HAL_GPIO_Init+0x244>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d031      	beq.n	8006fea <HAL_GPIO_Init+0x22e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1e      	ldr	r2, [pc, #120]	; (8007004 <HAL_GPIO_Init+0x248>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d02b      	beq.n	8006fe6 <HAL_GPIO_Init+0x22a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1d      	ldr	r2, [pc, #116]	; (8007008 <HAL_GPIO_Init+0x24c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d025      	beq.n	8006fe2 <HAL_GPIO_Init+0x226>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a1c      	ldr	r2, [pc, #112]	; (800700c <HAL_GPIO_Init+0x250>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01f      	beq.n	8006fde <HAL_GPIO_Init+0x222>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a1b      	ldr	r2, [pc, #108]	; (8007010 <HAL_GPIO_Init+0x254>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d019      	beq.n	8006fda <HAL_GPIO_Init+0x21e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a1a      	ldr	r2, [pc, #104]	; (8007014 <HAL_GPIO_Init+0x258>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <HAL_GPIO_Init+0x21a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a19      	ldr	r2, [pc, #100]	; (8007018 <HAL_GPIO_Init+0x25c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00d      	beq.n	8006fd2 <HAL_GPIO_Init+0x216>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a18      	ldr	r2, [pc, #96]	; (800701c <HAL_GPIO_Init+0x260>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d007      	beq.n	8006fce <HAL_GPIO_Init+0x212>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a17      	ldr	r2, [pc, #92]	; (8007020 <HAL_GPIO_Init+0x264>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d101      	bne.n	8006fca <HAL_GPIO_Init+0x20e>
 8006fc6:	2309      	movs	r3, #9
 8006fc8:	e02d      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fca:	230a      	movs	r3, #10
 8006fcc:	e02b      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fce:	2308      	movs	r3, #8
 8006fd0:	e029      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fd2:	2307      	movs	r3, #7
 8006fd4:	e027      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fd6:	2306      	movs	r3, #6
 8006fd8:	e025      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fda:	2305      	movs	r3, #5
 8006fdc:	e023      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fde:	2304      	movs	r3, #4
 8006fe0:	e021      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e01f      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e01d      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e01b      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fee:	bf00      	nop
 8006ff0:	58000080 	.word	0x58000080
 8006ff4:	58024400 	.word	0x58024400
 8006ff8:	58000400 	.word	0x58000400
 8006ffc:	58020000 	.word	0x58020000
 8007000:	58020400 	.word	0x58020400
 8007004:	58020800 	.word	0x58020800
 8007008:	58020c00 	.word	0x58020c00
 800700c:	58021000 	.word	0x58021000
 8007010:	58021400 	.word	0x58021400
 8007014:	58021800 	.word	0x58021800
 8007018:	58021c00 	.word	0x58021c00
 800701c:	58022000 	.word	0x58022000
 8007020:	58022400 	.word	0x58022400
 8007024:	2300      	movs	r3, #0
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	f002 0203 	and.w	r2, r2, #3
 800702c:	0092      	lsls	r2, r2, #2
 800702e:	4093      	lsls	r3, r2
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	4313      	orrs	r3, r2
 8007034:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007036:	4938      	ldr	r1, [pc, #224]	; (8007118 <HAL_GPIO_Init+0x35c>)
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	089b      	lsrs	r3, r3, #2
 800703c:	3302      	adds	r3, #2
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	43db      	mvns	r3, r3
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	4013      	ands	r3, r2
 8007052:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	43db      	mvns	r3, r3
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	4013      	ands	r3, r2
 800707c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	43db      	mvns	r3, r3
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	4013      	ands	r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80070be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80070c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	43db      	mvns	r3, r3
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	4013      	ands	r3, r2
 80070d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80070ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	3301      	adds	r3, #1
 80070f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	f47f ae63 	bne.w	8006dd0 <HAL_GPIO_Init+0x14>
  }
}
 800710a:	bf00      	nop
 800710c:	3724      	adds	r7, #36	; 0x24
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	58000400 	.word	0x58000400

0800711c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	887b      	ldrh	r3, [r7, #2]
 800712e:	4013      	ands	r3, r2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]
 8007138:	e001      	b.n	800713e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800713e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	807b      	strh	r3, [r7, #2]
 8007158:	4613      	mov	r3, r2
 800715a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800715c:	787b      	ldrb	r3, [r7, #1]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007162:	887a      	ldrh	r2, [r7, #2]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007168:	e003      	b.n	8007172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800716a:	887b      	ldrh	r3, [r7, #2]
 800716c:	041a      	lsls	r2, r3, #16
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	619a      	str	r2, [r3, #24]
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695a      	ldr	r2, [r3, #20]
 800718e:	887b      	ldrh	r3, [r7, #2]
 8007190:	401a      	ands	r2, r3
 8007192:	887b      	ldrh	r3, [r7, #2]
 8007194:	429a      	cmp	r2, r3
 8007196:	d104      	bne.n	80071a2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007198:	887b      	ldrh	r3, [r7, #2]
 800719a:	041a      	lsls	r2, r3, #16
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80071a0:	e002      	b.n	80071a8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80071a2:	887a      	ldrh	r2, [r7, #2]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	619a      	str	r2, [r3, #24]
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4603      	mov	r3, r0
 80071bc:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80071be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	4013      	ands	r3, r2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071d8:	88fb      	ldrh	r3, [r7, #6]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fb fd8c 	bl	8002cf8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80071f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071f6:	4a0c      	ldr	r2, [pc, #48]	; (8007228 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80071f8:	f043 0302 	orr.w	r3, r3, #2
 80071fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007200:	4b09      	ldr	r3, [pc, #36]	; (8007228 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	4906      	ldr	r1, [pc, #24]	; (800722c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4313      	orrs	r3, r2
 8007218:	604b      	str	r3, [r1, #4]
}
 800721a:	bf00      	nop
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	58024400 	.word	0x58024400
 800722c:	58000400 	.word	0x58000400

08007230 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007232:	b08f      	sub	sp, #60	; 0x3c
 8007234:	af0a      	add	r7, sp, #40	; 0x28
 8007236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e116      	b.n	8007470 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d106      	bne.n	8007262 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f010 fe4d 	bl	8017efc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2203      	movs	r2, #3
 8007266:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d102      	bne.n	800727c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	f009 fe52 	bl	8010f2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	687e      	ldr	r6, [r7, #4]
 800728e:	466d      	mov	r5, sp
 8007290:	f106 0410 	add.w	r4, r6, #16
 8007294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800729a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800729c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80072a4:	1d33      	adds	r3, r6, #4
 80072a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072a8:	6838      	ldr	r0, [r7, #0]
 80072aa:	f009 fd29 	bl	8010d00 <USB_CoreInit>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e0d7      	b.n	8007470 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f009 fe40 	bl	8010f4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]
 80072d0:	e04a      	b.n	8007368 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072d2:	7bfa      	ldrb	r2, [r7, #15]
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	1a9b      	subs	r3, r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	333d      	adds	r3, #61	; 0x3d
 80072e2:	2201      	movs	r2, #1
 80072e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072e6:	7bfa      	ldrb	r2, [r7, #15]
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	333c      	adds	r3, #60	; 0x3c
 80072f6:	7bfa      	ldrb	r2, [r7, #15]
 80072f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072fa:	7bfa      	ldrb	r2, [r7, #15]
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	b298      	uxth	r0, r3
 8007300:	6879      	ldr	r1, [r7, #4]
 8007302:	4613      	mov	r3, r2
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	440b      	add	r3, r1
 800730c:	3342      	adds	r3, #66	; 0x42
 800730e:	4602      	mov	r2, r0
 8007310:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007312:	7bfa      	ldrb	r2, [r7, #15]
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	333f      	adds	r3, #63	; 0x3f
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007326:	7bfa      	ldrb	r2, [r7, #15]
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	4613      	mov	r3, r2
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	1a9b      	subs	r3, r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	440b      	add	r3, r1
 8007334:	3344      	adds	r3, #68	; 0x44
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800733a:	7bfa      	ldrb	r2, [r7, #15]
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	1a9b      	subs	r3, r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	440b      	add	r3, r1
 8007348:	3348      	adds	r3, #72	; 0x48
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800734e:	7bfa      	ldrb	r2, [r7, #15]
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	4613      	mov	r3, r2
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	1a9b      	subs	r3, r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	440b      	add	r3, r1
 800735c:	3350      	adds	r3, #80	; 0x50
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	3301      	adds	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	7bfa      	ldrb	r2, [r7, #15]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	429a      	cmp	r2, r3
 8007370:	d3af      	bcc.n	80072d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]
 8007376:	e044      	b.n	8007402 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007378:	7bfa      	ldrb	r2, [r7, #15]
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	4613      	mov	r3, r2
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	1a9b      	subs	r3, r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	440b      	add	r3, r1
 8007386:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800738a:	2200      	movs	r2, #0
 800738c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800738e:	7bfa      	ldrb	r2, [r7, #15]
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	4613      	mov	r3, r2
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	1a9b      	subs	r3, r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80073a0:	7bfa      	ldrb	r2, [r7, #15]
 80073a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073a4:	7bfa      	ldrb	r2, [r7, #15]
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	4613      	mov	r3, r2
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	1a9b      	subs	r3, r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	440b      	add	r3, r1
 80073b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073ba:	7bfa      	ldrb	r2, [r7, #15]
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	1a9b      	subs	r3, r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073d0:	7bfa      	ldrb	r2, [r7, #15]
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	1a9b      	subs	r3, r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073e6:	7bfa      	ldrb	r2, [r7, #15]
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	4613      	mov	r3, r2
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	3301      	adds	r3, #1
 8007400:	73fb      	strb	r3, [r7, #15]
 8007402:	7bfa      	ldrb	r2, [r7, #15]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	429a      	cmp	r2, r3
 800740a:	d3b5      	bcc.n	8007378 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	603b      	str	r3, [r7, #0]
 8007412:	687e      	ldr	r6, [r7, #4]
 8007414:	466d      	mov	r5, sp
 8007416:	f106 0410 	add.w	r4, r6, #16
 800741a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800741c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800741e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007426:	e885 0003 	stmia.w	r5, {r0, r1}
 800742a:	1d33      	adds	r3, r6, #4
 800742c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800742e:	6838      	ldr	r0, [r7, #0]
 8007430:	f009 fdb6 	bl	8010fa0 <USB_DevInit>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2202      	movs	r2, #2
 800743e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e014      	b.n	8007470 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2b01      	cmp	r3, #1
 800745c:	d102      	bne.n	8007464 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f001 f8be 	bl	80085e0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4618      	mov	r0, r3
 800746a:	f00a fdf5 	bl	8012058 <USB_DevDisconnect>

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007478 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_PCD_Start+0x1c>
 8007490:	2302      	movs	r3, #2
 8007492:	e020      	b.n	80074d6 <HAL_PCD_Start+0x5e>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d109      	bne.n	80074b8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d005      	beq.n	80074b8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4618      	mov	r0, r3
 80074be:	f00a fdb3 	bl	8012028 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f009 fd1e 	bl	8010f08 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074de:	b590      	push	{r4, r7, lr}
 80074e0:	b08d      	sub	sp, #52	; 0x34
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f00a fe5a 	bl	80121ae <USB_GetMode>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f040 83ca 	bne.w	8007c96 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f00a fdbe 	bl	8012088 <USB_ReadInterrupts>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 83c0 	beq.w	8007c94 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4618      	mov	r0, r3
 800751a:	f00a fdb5 	bl	8012088 <USB_ReadInterrupts>
 800751e:	4603      	mov	r3, r0
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b02      	cmp	r3, #2
 8007526:	d107      	bne.n	8007538 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695a      	ldr	r2, [r3, #20]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f002 0202 	and.w	r2, r2, #2
 8007536:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f00a fda3 	bl	8012088 <USB_ReadInterrupts>
 8007542:	4603      	mov	r3, r0
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b10      	cmp	r3, #16
 800754a:	d161      	bne.n	8007610 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0210 	bic.w	r2, r2, #16
 800755a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	f003 020f 	and.w	r2, r3, #15
 8007568:	4613      	mov	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	4413      	add	r3, r2
 8007578:	3304      	adds	r3, #4
 800757a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	0c5b      	lsrs	r3, r3, #17
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	2b02      	cmp	r3, #2
 8007586:	d124      	bne.n	80075d2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800758e:	4013      	ands	r3, r2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d035      	beq.n	8007600 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	091b      	lsrs	r3, r3, #4
 800759c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800759e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	6a38      	ldr	r0, [r7, #32]
 80075a8:	f00a fc1b 	bl	8011de2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	091b      	lsrs	r3, r3, #4
 80075b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075b8:	441a      	add	r2, r3
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	091b      	lsrs	r3, r3, #4
 80075c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075ca:	441a      	add	r2, r3
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	619a      	str	r2, [r3, #24]
 80075d0:	e016      	b.n	8007600 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	0c5b      	lsrs	r3, r3, #17
 80075d6:	f003 030f 	and.w	r3, r3, #15
 80075da:	2b06      	cmp	r3, #6
 80075dc:	d110      	bne.n	8007600 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075e4:	2208      	movs	r2, #8
 80075e6:	4619      	mov	r1, r3
 80075e8:	6a38      	ldr	r0, [r7, #32]
 80075ea:	f00a fbfa 	bl	8011de2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	091b      	lsrs	r3, r3, #4
 80075f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075fa:	441a      	add	r2, r3
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0210 	orr.w	r2, r2, #16
 800760e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4618      	mov	r0, r3
 8007616:	f00a fd37 	bl	8012088 <USB_ReadInterrupts>
 800761a:	4603      	mov	r3, r0
 800761c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007620:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007624:	d16e      	bne.n	8007704 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f00a fd3d 	bl	80120ae <USB_ReadDevAllOutEpInterrupt>
 8007634:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007636:	e062      	b.n	80076fe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d057      	beq.n	80076f2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007648:	b2d2      	uxtb	r2, r2
 800764a:	4611      	mov	r1, r2
 800764c:	4618      	mov	r0, r3
 800764e:	f00a fd62 	bl	8012116 <USB_ReadDevOutEPInterrupt>
 8007652:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00c      	beq.n	8007678 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766a:	461a      	mov	r2, r3
 800766c:	2301      	movs	r3, #1
 800766e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fe0a 	bl	800828c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f003 0308 	and.w	r3, r3, #8
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00c      	beq.n	800769c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768e:	461a      	mov	r2, r3
 8007690:	2308      	movs	r3, #8
 8007692:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 ff04 	bl	80084a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d008      	beq.n	80076b8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	461a      	mov	r2, r3
 80076b4:	2310      	movs	r3, #16
 80076b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f003 0320 	and.w	r3, r3, #32
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d008      	beq.n	80076d4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ce:	461a      	mov	r2, r3
 80076d0:	2320      	movs	r3, #32
 80076d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	461a      	mov	r2, r3
 80076ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	3301      	adds	r3, #1
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	085b      	lsrs	r3, r3, #1
 80076fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	2b00      	cmp	r3, #0
 8007702:	d199      	bne.n	8007638 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4618      	mov	r0, r3
 800770a:	f00a fcbd 	bl	8012088 <USB_ReadInterrupts>
 800770e:	4603      	mov	r3, r0
 8007710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007714:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007718:	f040 80c0 	bne.w	800789c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4618      	mov	r0, r3
 8007722:	f00a fcde 	bl	80120e2 <USB_ReadDevAllInEpInterrupt>
 8007726:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800772c:	e0b2      	b.n	8007894 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 80a7 	beq.w	8007888 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	4611      	mov	r1, r2
 8007744:	4618      	mov	r0, r3
 8007746:	f00a fd04 	bl	8012152 <USB_ReadDevInEPInterrupt>
 800774a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d057      	beq.n	8007806 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	2201      	movs	r2, #1
 800775e:	fa02 f303 	lsl.w	r3, r2, r3
 8007762:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	43db      	mvns	r3, r3
 8007770:	69f9      	ldr	r1, [r7, #28]
 8007772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007776:	4013      	ands	r3, r2
 8007778:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	461a      	mov	r2, r3
 8007788:	2301      	movs	r3, #1
 800778a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d132      	bne.n	80077fa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007798:	4613      	mov	r3, r2
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	1a9b      	subs	r3, r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	3348      	adds	r3, #72	; 0x48
 80077a4:	6819      	ldr	r1, [r3, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077aa:	4613      	mov	r3, r2
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	1a9b      	subs	r3, r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4403      	add	r3, r0
 80077b4:	3344      	adds	r3, #68	; 0x44
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4419      	add	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077be:	4613      	mov	r3, r2
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	1a9b      	subs	r3, r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4403      	add	r3, r0
 80077c8:	3348      	adds	r3, #72	; 0x48
 80077ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d113      	bne.n	80077fa <HAL_PCD_IRQHandler+0x31c>
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d6:	4613      	mov	r3, r2
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	3350      	adds	r3, #80	; 0x50
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d108      	bne.n	80077fa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077f2:	461a      	mov	r2, r3
 80077f4:	2101      	movs	r1, #1
 80077f6:	f00a fd0d 	bl	8012214 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f010 fbfa 	bl	8017ffa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781c:	461a      	mov	r2, r3
 800781e:	2308      	movs	r3, #8
 8007820:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	d008      	beq.n	800783e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007838:	461a      	mov	r2, r3
 800783a:	2310      	movs	r3, #16
 800783c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007844:	2b00      	cmp	r3, #0
 8007846:	d008      	beq.n	800785a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007854:	461a      	mov	r2, r3
 8007856:	2340      	movs	r3, #64	; 0x40
 8007858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007870:	461a      	mov	r2, r3
 8007872:	2302      	movs	r3, #2
 8007874:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fc75 	bl	8008172 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	3301      	adds	r3, #1
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	085b      	lsrs	r3, r3, #1
 8007892:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	2b00      	cmp	r3, #0
 8007898:	f47f af49 	bne.w	800772e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f00a fbf1 	bl	8012088 <USB_ReadInterrupts>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078b0:	d122      	bne.n	80078f8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078c0:	f023 0301 	bic.w	r3, r3, #1
 80078c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d108      	bne.n	80078e2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80078d8:	2100      	movs	r1, #0
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fea4 	bl	8008628 <HAL_PCDEx_LPM_Callback>
 80078e0:	e002      	b.n	80078e8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f010 fc00 	bl	80180e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	695a      	ldr	r2, [r3, #20]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80078f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f00a fbc3 	bl	8012088 <USB_ReadInterrupts>
 8007902:	4603      	mov	r3, r0
 8007904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800790c:	d112      	bne.n	8007934 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b01      	cmp	r3, #1
 800791c:	d102      	bne.n	8007924 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f010 fbbc 	bl	801809c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695a      	ldr	r2, [r3, #20]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007932:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f00a fba5 	bl	8012088 <USB_ReadInterrupts>
 800793e:	4603      	mov	r3, r0
 8007940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007948:	d121      	bne.n	800798e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	695a      	ldr	r2, [r3, #20]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007958:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d111      	bne.n	8007988 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	089b      	lsrs	r3, r3, #2
 8007974:	f003 020f 	and.w	r2, r3, #15
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800797e:	2101      	movs	r1, #1
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fe51 	bl	8008628 <HAL_PCDEx_LPM_Callback>
 8007986:	e002      	b.n	800798e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f010 fb87 	bl	801809c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f00a fb78 	bl	8012088 <USB_ReadInterrupts>
 8007998:	4603      	mov	r3, r0
 800799a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800799e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a2:	f040 80c7 	bne.w	8007b34 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2110      	movs	r1, #16
 80079c0:	4618      	mov	r0, r3
 80079c2:	f009 fc4b 	bl	801125c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079c6:	2300      	movs	r3, #0
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ca:	e056      	b.n	8007a7a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d8:	461a      	mov	r2, r3
 80079da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079f0:	0151      	lsls	r1, r2, #5
 80079f2:	69fa      	ldr	r2, [r7, #28]
 80079f4:	440a      	add	r2, r1
 80079f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079fe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a10:	0151      	lsls	r1, r2, #5
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	440a      	add	r2, r1
 8007a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a32:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a44:	0151      	lsls	r1, r2, #5
 8007a46:	69fa      	ldr	r2, [r7, #28]
 8007a48:	440a      	add	r2, r1
 8007a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a72:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	3301      	adds	r3, #1
 8007a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d3a3      	bcc.n	80079cc <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a92:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007a96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d016      	beq.n	8007ace <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ab0:	f043 030b 	orr.w	r3, r3, #11
 8007ab4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ac6:	f043 030b 	orr.w	r3, r3, #11
 8007aca:	6453      	str	r3, [r2, #68]	; 0x44
 8007acc:	e015      	b.n	8007afa <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad4:	695a      	ldr	r2, [r3, #20]
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007adc:	4619      	mov	r1, r3
 8007ade:	f242 032b 	movw	r3, #8235	; 0x202b
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	69fa      	ldr	r2, [r7, #28]
 8007af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007af4:	f043 030b 	orr.w	r3, r3, #11
 8007af8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f00a fb78 	bl	8012214 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695a      	ldr	r2, [r3, #20]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f00a faa5 	bl	8012088 <USB_ReadInterrupts>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b48:	d124      	bne.n	8007b94 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f00a fb3c 	bl	80121cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f009 fbe0 	bl	801131e <USB_GetDevSpeed>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	461a      	mov	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681c      	ldr	r4, [r3, #0]
 8007b6a:	f001 fdd9 	bl	8009720 <HAL_RCC_GetHCLKFreq>
 8007b6e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	461a      	mov	r2, r3
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f009 f923 	bl	8010dc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f010 fa63 	bl	801804a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695a      	ldr	r2, [r3, #20]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f00a fa75 	bl	8012088 <USB_ReadInterrupts>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d10a      	bne.n	8007bbe <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f010 fa40 	bl	801802e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	695a      	ldr	r2, [r3, #20]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f002 0208 	and.w	r2, r2, #8
 8007bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f00a fa60 	bl	8012088 <USB_ReadInterrupts>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bd2:	d10f      	bne.n	8007bf4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f010 faa2 	bl	8018128 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695a      	ldr	r2, [r3, #20]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f00a fa45 	bl	8012088 <USB_ReadInterrupts>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c08:	d10f      	bne.n	8007c2a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f010 fa75 	bl	8018104 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695a      	ldr	r2, [r3, #20]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f00a fa2a 	bl	8012088 <USB_ReadInterrupts>
 8007c34:	4603      	mov	r3, r0
 8007c36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3e:	d10a      	bne.n	8007c56 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f010 fa83 	bl	801814c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	695a      	ldr	r2, [r3, #20]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f00a fa14 	bl	8012088 <USB_ReadInterrupts>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f003 0304 	and.w	r3, r3, #4
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d115      	bne.n	8007c96 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f010 fa73 	bl	8018168 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6859      	ldr	r1, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	e000      	b.n	8007c96 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007c94:	bf00      	nop
    }
  }
}
 8007c96:	3734      	adds	r7, #52	; 0x34
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd90      	pop	{r4, r7, pc}

08007c9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_PCD_SetAddress+0x1a>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e013      	b.n	8007cde <HAL_PCD_SetAddress+0x42>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	78fa      	ldrb	r2, [r7, #3]
 8007ccc:	4611      	mov	r1, r2
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f00a f984 	bl	8011fdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	4608      	mov	r0, r1
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	70fb      	strb	r3, [r7, #3]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	803b      	strh	r3, [r7, #0]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	da0f      	bge.n	8007d2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	f003 020f 	and.w	r2, r3, #15
 8007d12:	4613      	mov	r3, r2
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	3338      	adds	r3, #56	; 0x38
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	4413      	add	r3, r2
 8007d20:	3304      	adds	r3, #4
 8007d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	705a      	strb	r2, [r3, #1]
 8007d2a:	e00f      	b.n	8007d4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	f003 020f 	and.w	r2, r3, #15
 8007d32:	4613      	mov	r3, r2
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	4413      	add	r3, r2
 8007d42:	3304      	adds	r3, #4
 8007d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	f003 030f 	and.w	r3, r3, #15
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d58:	883a      	ldrh	r2, [r7, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	78ba      	ldrb	r2, [r7, #2]
 8007d62:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d004      	beq.n	8007d76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d76:	78bb      	ldrb	r3, [r7, #2]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d102      	bne.n	8007d82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d101      	bne.n	8007d90 <HAL_PCD_EP_Open+0xaa>
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e00e      	b.n	8007dae <HAL_PCD_EP_Open+0xc8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68f9      	ldr	r1, [r7, #12]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f009 fae2 	bl	8011368 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007dac:	7afb      	ldrb	r3, [r7, #11]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	da0f      	bge.n	8007dea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	f003 020f 	and.w	r2, r3, #15
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	3338      	adds	r3, #56	; 0x38
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	3304      	adds	r3, #4
 8007de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	705a      	strb	r2, [r3, #1]
 8007de8:	e00f      	b.n	8007e0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	f003 020f 	and.w	r2, r3, #15
 8007df0:	4613      	mov	r3, r2
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	1a9b      	subs	r3, r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	4413      	add	r3, r2
 8007e00:	3304      	adds	r3, #4
 8007e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d101      	bne.n	8007e24 <HAL_PCD_EP_Close+0x6e>
 8007e20:	2302      	movs	r3, #2
 8007e22:	e00e      	b.n	8007e42 <HAL_PCD_EP_Close+0x8c>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68f9      	ldr	r1, [r7, #12]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f009 fb20 	bl	8011478 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b086      	sub	sp, #24
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	603b      	str	r3, [r7, #0]
 8007e56:	460b      	mov	r3, r1
 8007e58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e5a:	7afb      	ldrb	r3, [r7, #11]
 8007e5c:	f003 020f 	and.w	r2, r3, #15
 8007e60:	4613      	mov	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	3304      	adds	r3, #4
 8007e72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2200      	movs	r2, #0
 8007e84:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d102      	bne.n	8007ea6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ea6:	7afb      	ldrb	r3, [r7, #11]
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d109      	bne.n	8007ec4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6818      	ldr	r0, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6979      	ldr	r1, [r7, #20]
 8007ebe:	f009 fe03 	bl	8011ac8 <USB_EP0StartXfer>
 8007ec2:	e008      	b.n	8007ed6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6818      	ldr	r0, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	461a      	mov	r2, r3
 8007ed0:	6979      	ldr	r1, [r7, #20]
 8007ed2:	f009 fbad 	bl	8011630 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	f003 020f 	and.w	r2, r3, #15
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	00db      	lsls	r3, r3, #3
 8007ef8:	1a9b      	subs	r3, r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007f02:	681b      	ldr	r3, [r3, #0]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	607a      	str	r2, [r7, #4]
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	f003 020f 	and.w	r2, r3, #15
 8007f26:	4613      	mov	r3, r2
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	3338      	adds	r3, #56	; 0x38
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	3304      	adds	r3, #4
 8007f36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2200      	movs	r2, #0
 8007f48:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f50:	7afb      	ldrb	r3, [r7, #11]
 8007f52:	f003 030f 	and.w	r3, r3, #15
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d102      	bne.n	8007f6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f6a:	7afb      	ldrb	r3, [r7, #11]
 8007f6c:	f003 030f 	and.w	r3, r3, #15
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d109      	bne.n	8007f88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6979      	ldr	r1, [r7, #20]
 8007f82:	f009 fda1 	bl	8011ac8 <USB_EP0StartXfer>
 8007f86:	e008      	b.n	8007f9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	6979      	ldr	r1, [r7, #20]
 8007f96:	f009 fb4b 	bl	8011630 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	f003 020f 	and.w	r2, r3, #15
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d901      	bls.n	8007fc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e050      	b.n	8008064 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	da0f      	bge.n	8007fea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	f003 020f 	and.w	r2, r3, #15
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	1a9b      	subs	r3, r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	3338      	adds	r3, #56	; 0x38
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	3304      	adds	r3, #4
 8007fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	705a      	strb	r2, [r3, #1]
 8007fe8:	e00d      	b.n	8008006 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	4613      	mov	r3, r2
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	1a9b      	subs	r3, r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	f003 030f 	and.w	r3, r3, #15
 8008012:	b2da      	uxtb	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_PCD_EP_SetStall+0x82>
 8008022:	2302      	movs	r3, #2
 8008024:	e01e      	b.n	8008064 <HAL_PCD_EP_SetStall+0xc0>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68f9      	ldr	r1, [r7, #12]
 8008034:	4618      	mov	r0, r3
 8008036:	f009 fefd 	bl	8011e34 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	f003 030f 	and.w	r3, r3, #15
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	b2d9      	uxtb	r1, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008054:	461a      	mov	r2, r3
 8008056:	f00a f8dd 	bl	8012214 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	f003 020f 	and.w	r2, r3, #15
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	429a      	cmp	r2, r3
 8008084:	d901      	bls.n	800808a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e042      	b.n	8008110 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800808a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800808e:	2b00      	cmp	r3, #0
 8008090:	da0f      	bge.n	80080b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008092:	78fb      	ldrb	r3, [r7, #3]
 8008094:	f003 020f 	and.w	r2, r3, #15
 8008098:	4613      	mov	r3, r2
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	1a9b      	subs	r3, r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	3338      	adds	r3, #56	; 0x38
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	4413      	add	r3, r2
 80080a6:	3304      	adds	r3, #4
 80080a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2201      	movs	r2, #1
 80080ae:	705a      	strb	r2, [r3, #1]
 80080b0:	e00f      	b.n	80080d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	f003 020f 	and.w	r2, r3, #15
 80080b8:	4613      	mov	r3, r2
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	1a9b      	subs	r3, r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	4413      	add	r3, r2
 80080c8:	3304      	adds	r3, #4
 80080ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d101      	bne.n	80080f2 <HAL_PCD_EP_ClrStall+0x86>
 80080ee:	2302      	movs	r3, #2
 80080f0:	e00e      	b.n	8008110 <HAL_PCD_EP_ClrStall+0xa4>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68f9      	ldr	r1, [r7, #12]
 8008100:	4618      	mov	r0, r3
 8008102:	f009 ff05 	bl	8011f10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_PCD_EP_Flush+0x1a>
 800812e:	2302      	movs	r3, #2
 8008130:	e01b      	b.n	800816a <HAL_PCD_EP_Flush+0x52>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800813a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800813e:	2b00      	cmp	r3, #0
 8008140:	da09      	bge.n	8008156 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	78fb      	ldrb	r3, [r7, #3]
 8008148:	f003 030f 	and.w	r3, r3, #15
 800814c:	4619      	mov	r1, r3
 800814e:	4610      	mov	r0, r2
 8008150:	f009 f884 	bl	801125c <USB_FlushTxFifo>
 8008154:	e004      	b.n	8008160 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4618      	mov	r0, r3
 800815c:	f009 f8a4 	bl	80112a8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b08a      	sub	sp, #40	; 0x28
 8008176:	af02      	add	r7, sp, #8
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	4613      	mov	r3, r2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	3338      	adds	r3, #56	; 0x38
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4413      	add	r3, r2
 8008196:	3304      	adds	r3, #4
 8008198:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d901      	bls.n	80081aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e06c      	b.n	8008284 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	695a      	ldr	r2, [r3, #20]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	69fa      	ldr	r2, [r7, #28]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d902      	bls.n	80081c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	3303      	adds	r3, #3
 80081ca:	089b      	lsrs	r3, r3, #2
 80081cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081ce:	e02b      	b.n	8008228 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	695a      	ldr	r2, [r3, #20]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	69fa      	ldr	r2, [r7, #28]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d902      	bls.n	80081ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	3303      	adds	r3, #3
 80081f0:	089b      	lsrs	r3, r3, #2
 80081f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68d9      	ldr	r1, [r3, #12]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008204:	b2db      	uxtb	r3, r3
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	4603      	mov	r3, r0
 800820a:	6978      	ldr	r0, [r7, #20]
 800820c:	f009 fdb4 	bl	8011d78 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	441a      	add	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	699a      	ldr	r2, [r3, #24]
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	441a      	add	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	b29b      	uxth	r3, r3
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	429a      	cmp	r2, r3
 800823c:	d809      	bhi.n	8008252 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008246:	429a      	cmp	r2, r3
 8008248:	d203      	bcs.n	8008252 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1be      	bne.n	80081d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	695a      	ldr	r2, [r3, #20]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	429a      	cmp	r2, r3
 800825c:	d811      	bhi.n	8008282 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	f003 030f 	and.w	r3, r3, #15
 8008264:	2201      	movs	r2, #1
 8008266:	fa02 f303 	lsl.w	r3, r2, r3
 800826a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	43db      	mvns	r3, r3
 8008278:	6939      	ldr	r1, [r7, #16]
 800827a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800827e:	4013      	ands	r3, r2
 8008280:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3720      	adds	r7, #32
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	333c      	adds	r3, #60	; 0x3c
 80082a4:	3304      	adds	r3, #4
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	f040 80a0 	bne.w	8008404 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d015      	beq.n	80082fa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4a72      	ldr	r2, [pc, #456]	; (800849c <PCD_EP_OutXfrComplete_int+0x210>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	f240 80dd 	bls.w	8008492 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 80d7 	beq.w	8008492 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f0:	461a      	mov	r2, r3
 80082f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082f6:	6093      	str	r3, [r2, #8]
 80082f8:	e0cb      	b.n	8008492 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f003 0320 	and.w	r3, r3, #32
 8008300:	2b00      	cmp	r3, #0
 8008302:	d009      	beq.n	8008318 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008310:	461a      	mov	r2, r3
 8008312:	2320      	movs	r3, #32
 8008314:	6093      	str	r3, [r2, #8]
 8008316:	e0bc      	b.n	8008492 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800831e:	2b00      	cmp	r3, #0
 8008320:	f040 80b7 	bne.w	8008492 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4a5d      	ldr	r2, [pc, #372]	; (800849c <PCD_EP_OutXfrComplete_int+0x210>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d90f      	bls.n	800834c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008342:	461a      	mov	r2, r3
 8008344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008348:	6093      	str	r3, [r2, #8]
 800834a:	e0a2      	b.n	8008492 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	4613      	mov	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800835e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	0159      	lsls	r1, r3, #5
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	440b      	add	r3, r1
 8008368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008372:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	4613      	mov	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	1a9b      	subs	r3, r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4403      	add	r3, r0
 8008382:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008386:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	4613      	mov	r3, r2
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	1a9b      	subs	r3, r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800839a:	6819      	ldr	r1, [r3, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4613      	mov	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4403      	add	r3, r0
 80083aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4419      	add	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	4613      	mov	r3, r2
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4403      	add	r3, r0
 80083c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80083c4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d114      	bne.n	80083f6 <PCD_EP_OutXfrComplete_int+0x16a>
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	4613      	mov	r3, r2
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	440b      	add	r3, r1
 80083da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d108      	bne.n	80083f6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6818      	ldr	r0, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083ee:	461a      	mov	r2, r3
 80083f0:	2101      	movs	r1, #1
 80083f2:	f009 ff0f 	bl	8012214 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f00f fde1 	bl	8017fc4 <HAL_PCD_DataOutStageCallback>
 8008402:	e046      	b.n	8008492 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4a26      	ldr	r2, [pc, #152]	; (80084a0 <PCD_EP_OutXfrComplete_int+0x214>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d124      	bne.n	8008456 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00a      	beq.n	800842c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008422:	461a      	mov	r2, r3
 8008424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008428:	6093      	str	r3, [r2, #8]
 800842a:	e032      	b.n	8008492 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	2b00      	cmp	r3, #0
 8008434:	d008      	beq.n	8008448 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008442:	461a      	mov	r2, r3
 8008444:	2320      	movs	r3, #32
 8008446:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f00f fdb8 	bl	8017fc4 <HAL_PCD_DataOutStageCallback>
 8008454:	e01d      	b.n	8008492 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d114      	bne.n	8008486 <PCD_EP_OutXfrComplete_int+0x1fa>
 800845c:	6879      	ldr	r1, [r7, #4]
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	4613      	mov	r3, r2
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	1a9b      	subs	r3, r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	440b      	add	r3, r1
 800846a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d108      	bne.n	8008486 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6818      	ldr	r0, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800847e:	461a      	mov	r2, r3
 8008480:	2100      	movs	r1, #0
 8008482:	f009 fec7 	bl	8012214 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f00f fd99 	bl	8017fc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	4f54300a 	.word	0x4f54300a
 80084a0:	4f54310a 	.word	0x4f54310a

080084a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	333c      	adds	r3, #60	; 0x3c
 80084bc:	3304      	adds	r3, #4
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4a15      	ldr	r2, [pc, #84]	; (800852c <PCD_EP_OutSetupPacket_int+0x88>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d90e      	bls.n	80084f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d009      	beq.n	80084f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f0:	461a      	mov	r2, r3
 80084f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f00f fd51 	bl	8017fa0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4a0a      	ldr	r2, [pc, #40]	; (800852c <PCD_EP_OutSetupPacket_int+0x88>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d90c      	bls.n	8008520 <PCD_EP_OutSetupPacket_int+0x7c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d108      	bne.n	8008520 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008518:	461a      	mov	r2, r3
 800851a:	2101      	movs	r1, #1
 800851c:	f009 fe7a 	bl	8012214 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	4f54300a 	.word	0x4f54300a

08008530 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
 800853c:	4613      	mov	r3, r2
 800853e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d107      	bne.n	800855e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800854e:	883b      	ldrh	r3, [r7, #0]
 8008550:	0419      	lsls	r1, r3, #16
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	430a      	orrs	r2, r1
 800855a:	629a      	str	r2, [r3, #40]	; 0x28
 800855c:	e028      	b.n	80085b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	0c1b      	lsrs	r3, r3, #16
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	4413      	add	r3, r2
 800856a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
 8008570:	e00d      	b.n	800858e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	3340      	adds	r3, #64	; 0x40
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	0c1b      	lsrs	r3, r3, #16
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	4413      	add	r3, r2
 8008586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	3301      	adds	r3, #1
 800858c:	73fb      	strb	r3, [r7, #15]
 800858e:	7bfa      	ldrb	r2, [r7, #15]
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	3b01      	subs	r3, #1
 8008594:	429a      	cmp	r2, r3
 8008596:	d3ec      	bcc.n	8008572 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008598:	883b      	ldrh	r3, [r7, #0]
 800859a:	0418      	lsls	r0, r3, #16
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6819      	ldr	r1, [r3, #0]
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	4302      	orrs	r2, r0
 80085a8:	3340      	adds	r3, #64	; 0x40
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	440b      	add	r3, r1
 80085ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	460b      	mov	r3, r1
 80085c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	887a      	ldrh	r2, [r7, #2]
 80085d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800860e:	4b05      	ldr	r3, [pc, #20]	; (8008624 <HAL_PCDEx_ActivateLPM+0x44>)
 8008610:	4313      	orrs	r3, r2
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	10000003 	.word	0x10000003

08008628 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8008644:	4b05      	ldr	r3, [pc, #20]	; (800865c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a04      	ldr	r2, [pc, #16]	; (800865c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800864a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800864e:	6013      	str	r3, [r2, #0]
}
 8008650:	bf00      	nop
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	58024800 	.word	0x58024800

08008660 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d069      	beq.n	8008742 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 800866e:	4b38      	ldr	r3, [pc, #224]	; (8008750 <HAL_PWR_ConfigPVD+0xf0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4935      	ldr	r1, [pc, #212]	; (8008750 <HAL_PWR_ConfigPVD+0xf0>)
 800867c:	4313      	orrs	r3, r2
 800867e:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8008680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800868c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008690:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8008694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800869c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 80086a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086b6:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 80086b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086c6:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d009      	beq.n	80086e8 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 80086d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d009      	beq.n	8008708 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 80086f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008704:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	d007      	beq.n	8008724 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 8008714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800871e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008722:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d009      	beq.n	8008744 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8008730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800873a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800873e:	6053      	str	r3, [r2, #4]
 8008740:	e000      	b.n	8008744 <HAL_PWR_ConfigPVD+0xe4>
    return;
 8008742:	bf00      	nop
  }
}
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	58024800 	.word	0x58024800

08008754 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8008758:	4b05      	ldr	r3, [pc, #20]	; (8008770 <HAL_PWR_EnablePVD+0x1c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a04      	ldr	r2, [pc, #16]	; (8008770 <HAL_PWR_EnablePVD+0x1c>)
 800875e:	f043 0310 	orr.w	r3, r3, #16
 8008762:	6013      	str	r3, [r2, #0]
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	58024800 	.word	0x58024800

08008774 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800877c:	4b19      	ldr	r3, [pc, #100]	; (80087e4 <HAL_PWREx_ConfigSupply+0x70>)
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b04      	cmp	r3, #4
 8008786:	d00a      	beq.n	800879e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008788:	4b16      	ldr	r3, [pc, #88]	; (80087e4 <HAL_PWREx_ConfigSupply+0x70>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	f003 0307 	and.w	r3, r3, #7
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	429a      	cmp	r2, r3
 8008794:	d001      	beq.n	800879a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e01f      	b.n	80087da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	e01d      	b.n	80087da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800879e:	4b11      	ldr	r3, [pc, #68]	; (80087e4 <HAL_PWREx_ConfigSupply+0x70>)
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f023 0207 	bic.w	r2, r3, #7
 80087a6:	490f      	ldr	r1, [pc, #60]	; (80087e4 <HAL_PWREx_ConfigSupply+0x70>)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087ae:	f7fa ffa7 	bl	8003700 <HAL_GetTick>
 80087b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087b4:	e009      	b.n	80087ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087b6:	f7fa ffa3 	bl	8003700 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087c4:	d901      	bls.n	80087ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e007      	b.n	80087da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087ca:	4b06      	ldr	r3, [pc, #24]	; (80087e4 <HAL_PWREx_ConfigSupply+0x70>)
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087d6:	d1ee      	bne.n	80087b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	58024800 	.word	0x58024800

080087e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80087e8:	b480      	push	{r7}
 80087ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80087ec:	4b05      	ldr	r3, [pc, #20]	; (8008804 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	4a04      	ldr	r2, [pc, #16]	; (8008804 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80087f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087f6:	60d3      	str	r3, [r2, #12]
}
 80087f8:	bf00      	nop
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	58024800 	.word	0x58024800

08008808 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 800880c:	4b1b      	ldr	r3, [pc, #108]	; (800887c <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0310 	and.w	r3, r3, #16
 8008814:	2b00      	cmp	r3, #0
 8008816:	d014      	beq.n	8008842 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 8008818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800881c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008828:	d10b      	bne.n	8008842 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 800882a:	f7fa fa75 	bl	8002d18 <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 800882e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800883a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800883e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 8008842:	4b0e      	ldr	r3, [pc, #56]	; (800887c <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d014      	beq.n	8008878 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 800884e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800885a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885e:	d10b      	bne.n	8008878 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8008860:	f000 f80e 	bl	8008880 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8008864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800886c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8008878:	bf00      	nop
 800887a:	bd80      	pop	{r7, pc}
 800887c:	58024800 	.word	0x58024800

08008880 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8008884:	bf00      	nop
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
	...

08008890 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b08c      	sub	sp, #48	; 0x30
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e3ff      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 8087 	beq.w	80089be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088b0:	4b99      	ldr	r3, [pc, #612]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088ba:	4b97      	ldr	r3, [pc, #604]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80088c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c2:	2b10      	cmp	r3, #16
 80088c4:	d007      	beq.n	80088d6 <HAL_RCC_OscConfig+0x46>
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	2b18      	cmp	r3, #24
 80088ca:	d110      	bne.n	80088ee <HAL_RCC_OscConfig+0x5e>
 80088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ce:	f003 0303 	and.w	r3, r3, #3
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d10b      	bne.n	80088ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088d6:	4b90      	ldr	r3, [pc, #576]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d06c      	beq.n	80089bc <HAL_RCC_OscConfig+0x12c>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d168      	bne.n	80089bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e3d9      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088f6:	d106      	bne.n	8008906 <HAL_RCC_OscConfig+0x76>
 80088f8:	4b87      	ldr	r3, [pc, #540]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a86      	ldr	r2, [pc, #536]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 80088fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008902:	6013      	str	r3, [r2, #0]
 8008904:	e02e      	b.n	8008964 <HAL_RCC_OscConfig+0xd4>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10c      	bne.n	8008928 <HAL_RCC_OscConfig+0x98>
 800890e:	4b82      	ldr	r3, [pc, #520]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a81      	ldr	r2, [pc, #516]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	4b7f      	ldr	r3, [pc, #508]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a7e      	ldr	r2, [pc, #504]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008924:	6013      	str	r3, [r2, #0]
 8008926:	e01d      	b.n	8008964 <HAL_RCC_OscConfig+0xd4>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008930:	d10c      	bne.n	800894c <HAL_RCC_OscConfig+0xbc>
 8008932:	4b79      	ldr	r3, [pc, #484]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a78      	ldr	r2, [pc, #480]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	4b76      	ldr	r3, [pc, #472]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a75      	ldr	r2, [pc, #468]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	e00b      	b.n	8008964 <HAL_RCC_OscConfig+0xd4>
 800894c:	4b72      	ldr	r3, [pc, #456]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a71      	ldr	r2, [pc, #452]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	4b6f      	ldr	r3, [pc, #444]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a6e      	ldr	r2, [pc, #440]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 800895e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d013      	beq.n	8008994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896c:	f7fa fec8 	bl	8003700 <HAL_GetTick>
 8008970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008972:	e008      	b.n	8008986 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008974:	f7fa fec4 	bl	8003700 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b64      	cmp	r3, #100	; 0x64
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e38d      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008986:	4b64      	ldr	r3, [pc, #400]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0f0      	beq.n	8008974 <HAL_RCC_OscConfig+0xe4>
 8008992:	e014      	b.n	80089be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008994:	f7fa feb4 	bl	8003700 <HAL_GetTick>
 8008998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800899a:	e008      	b.n	80089ae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800899c:	f7fa feb0 	bl	8003700 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b64      	cmp	r3, #100	; 0x64
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e379      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80089ae:	4b5a      	ldr	r3, [pc, #360]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1f0      	bne.n	800899c <HAL_RCC_OscConfig+0x10c>
 80089ba:	e000      	b.n	80089be <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 80ae 	beq.w	8008b28 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089cc:	4b52      	ldr	r3, [pc, #328]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089d6:	4b50      	ldr	r3, [pc, #320]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 80089d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089da:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d007      	beq.n	80089f2 <HAL_RCC_OscConfig+0x162>
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	2b18      	cmp	r3, #24
 80089e6:	d13a      	bne.n	8008a5e <HAL_RCC_OscConfig+0x1ce>
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d135      	bne.n	8008a5e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089f2:	4b49      	ldr	r3, [pc, #292]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d005      	beq.n	8008a0a <HAL_RCC_OscConfig+0x17a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e34b      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a0a:	f7fa fea7 	bl	800375c <HAL_GetREVID>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	f241 0303 	movw	r3, #4099	; 0x1003
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d817      	bhi.n	8008a48 <HAL_RCC_OscConfig+0x1b8>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	2b40      	cmp	r3, #64	; 0x40
 8008a1e:	d108      	bne.n	8008a32 <HAL_RCC_OscConfig+0x1a2>
 8008a20:	4b3d      	ldr	r3, [pc, #244]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a28:	4a3b      	ldr	r2, [pc, #236]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a2e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a30:	e07a      	b.n	8008b28 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a32:	4b39      	ldr	r3, [pc, #228]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	031b      	lsls	r3, r3, #12
 8008a40:	4935      	ldr	r1, [pc, #212]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a46:	e06f      	b.n	8008b28 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a48:	4b33      	ldr	r3, [pc, #204]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	061b      	lsls	r3, r3, #24
 8008a56:	4930      	ldr	r1, [pc, #192]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a5c:	e064      	b.n	8008b28 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d045      	beq.n	8008af2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a66:	4b2c      	ldr	r3, [pc, #176]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f023 0219 	bic.w	r2, r3, #25
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	4929      	ldr	r1, [pc, #164]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008a74:	4313      	orrs	r3, r2
 8008a76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a78:	f7fa fe42 	bl	8003700 <HAL_GetTick>
 8008a7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a7e:	e008      	b.n	8008a92 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a80:	f7fa fe3e 	bl	8003700 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e307      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a92:	4b21      	ldr	r3, [pc, #132]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0f0      	beq.n	8008a80 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a9e:	f7fa fe5d 	bl	800375c <HAL_GetREVID>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	f241 0303 	movw	r3, #4099	; 0x1003
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d817      	bhi.n	8008adc <HAL_RCC_OscConfig+0x24c>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	d108      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x236>
 8008ab4:	4b18      	ldr	r3, [pc, #96]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008abc:	4a16      	ldr	r2, [pc, #88]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ac2:	6053      	str	r3, [r2, #4]
 8008ac4:	e030      	b.n	8008b28 <HAL_RCC_OscConfig+0x298>
 8008ac6:	4b14      	ldr	r3, [pc, #80]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	031b      	lsls	r3, r3, #12
 8008ad4:	4910      	ldr	r1, [pc, #64]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	604b      	str	r3, [r1, #4]
 8008ada:	e025      	b.n	8008b28 <HAL_RCC_OscConfig+0x298>
 8008adc:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	061b      	lsls	r3, r3, #24
 8008aea:	490b      	ldr	r1, [pc, #44]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	604b      	str	r3, [r1, #4]
 8008af0:	e01a      	b.n	8008b28 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008af2:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a08      	ldr	r2, [pc, #32]	; (8008b18 <HAL_RCC_OscConfig+0x288>)
 8008af8:	f023 0301 	bic.w	r3, r3, #1
 8008afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008afe:	f7fa fdff 	bl	8003700 <HAL_GetTick>
 8008b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b04:	e00a      	b.n	8008b1c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b06:	f7fa fdfb 	bl	8003700 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d903      	bls.n	8008b1c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e2c4      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
 8008b18:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b1c:	4ba4      	ldr	r3, [pc, #656]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1ee      	bne.n	8008b06 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 80a9 	beq.w	8008c88 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b36:	4b9e      	ldr	r3, [pc, #632]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b40:	4b9b      	ldr	r3, [pc, #620]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b44:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	2b08      	cmp	r3, #8
 8008b4a:	d007      	beq.n	8008b5c <HAL_RCC_OscConfig+0x2cc>
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	2b18      	cmp	r3, #24
 8008b50:	d13a      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x338>
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f003 0303 	and.w	r3, r3, #3
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d135      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b5c:	4b94      	ldr	r3, [pc, #592]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <HAL_RCC_OscConfig+0x2e4>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	2b80      	cmp	r3, #128	; 0x80
 8008b6e:	d001      	beq.n	8008b74 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e296      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b74:	f7fa fdf2 	bl	800375c <HAL_GetREVID>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	f241 0303 	movw	r3, #4099	; 0x1003
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d817      	bhi.n	8008bb2 <HAL_RCC_OscConfig+0x322>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	d108      	bne.n	8008b9c <HAL_RCC_OscConfig+0x30c>
 8008b8a:	4b89      	ldr	r3, [pc, #548]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b92:	4a87      	ldr	r2, [pc, #540]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008b94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b98:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b9a:	e075      	b.n	8008c88 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b9c:	4b84      	ldr	r3, [pc, #528]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	069b      	lsls	r3, r3, #26
 8008baa:	4981      	ldr	r1, [pc, #516]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bb0:	e06a      	b.n	8008c88 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bb2:	4b7f      	ldr	r3, [pc, #508]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	061b      	lsls	r3, r3, #24
 8008bc0:	497b      	ldr	r1, [pc, #492]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bc6:	e05f      	b.n	8008c88 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d042      	beq.n	8008c56 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008bd0:	4b77      	ldr	r3, [pc, #476]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a76      	ldr	r2, [pc, #472]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bdc:	f7fa fd90 	bl	8003700 <HAL_GetTick>
 8008be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008be4:	f7fa fd8c 	bl	8003700 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e255      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bf6:	4b6e      	ldr	r3, [pc, #440]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0f0      	beq.n	8008be4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c02:	f7fa fdab 	bl	800375c <HAL_GetREVID>
 8008c06:	4602      	mov	r2, r0
 8008c08:	f241 0303 	movw	r3, #4099	; 0x1003
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d817      	bhi.n	8008c40 <HAL_RCC_OscConfig+0x3b0>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	2b20      	cmp	r3, #32
 8008c16:	d108      	bne.n	8008c2a <HAL_RCC_OscConfig+0x39a>
 8008c18:	4b65      	ldr	r3, [pc, #404]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008c20:	4a63      	ldr	r2, [pc, #396]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008c22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c26:	6053      	str	r3, [r2, #4]
 8008c28:	e02e      	b.n	8008c88 <HAL_RCC_OscConfig+0x3f8>
 8008c2a:	4b61      	ldr	r3, [pc, #388]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	069b      	lsls	r3, r3, #26
 8008c38:	495d      	ldr	r1, [pc, #372]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	604b      	str	r3, [r1, #4]
 8008c3e:	e023      	b.n	8008c88 <HAL_RCC_OscConfig+0x3f8>
 8008c40:	4b5b      	ldr	r3, [pc, #364]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	061b      	lsls	r3, r3, #24
 8008c4e:	4958      	ldr	r1, [pc, #352]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	60cb      	str	r3, [r1, #12]
 8008c54:	e018      	b.n	8008c88 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c56:	4b56      	ldr	r3, [pc, #344]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a55      	ldr	r2, [pc, #340]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c62:	f7fa fd4d 	bl	8003700 <HAL_GetTick>
 8008c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c68:	e008      	b.n	8008c7c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008c6a:	f7fa fd49 	bl	8003700 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d901      	bls.n	8008c7c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e212      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c7c:	4b4c      	ldr	r3, [pc, #304]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f0      	bne.n	8008c6a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0308 	and.w	r3, r3, #8
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d036      	beq.n	8008d02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d019      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c9c:	4b44      	ldr	r3, [pc, #272]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca0:	4a43      	ldr	r2, [pc, #268]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008ca2:	f043 0301 	orr.w	r3, r3, #1
 8008ca6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca8:	f7fa fd2a 	bl	8003700 <HAL_GetTick>
 8008cac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cae:	e008      	b.n	8008cc2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cb0:	f7fa fd26 	bl	8003700 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d901      	bls.n	8008cc2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e1ef      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cc2:	4b3b      	ldr	r3, [pc, #236]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0f0      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x420>
 8008cce:	e018      	b.n	8008d02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cd0:	4b37      	ldr	r3, [pc, #220]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cd4:	4a36      	ldr	r2, [pc, #216]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008cd6:	f023 0301 	bic.w	r3, r3, #1
 8008cda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cdc:	f7fa fd10 	bl	8003700 <HAL_GetTick>
 8008ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ce2:	e008      	b.n	8008cf6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ce4:	f7fa fd0c 	bl	8003700 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d901      	bls.n	8008cf6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e1d5      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cf6:	4b2e      	ldr	r3, [pc, #184]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1f0      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d036      	beq.n	8008d7c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d019      	beq.n	8008d4a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d16:	4b26      	ldr	r3, [pc, #152]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a25      	ldr	r2, [pc, #148]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d22:	f7fa fced 	bl	8003700 <HAL_GetTick>
 8008d26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d28:	e008      	b.n	8008d3c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008d2a:	f7fa fce9 	bl	8003700 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d901      	bls.n	8008d3c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e1b2      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d3c:	4b1c      	ldr	r3, [pc, #112]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0f0      	beq.n	8008d2a <HAL_RCC_OscConfig+0x49a>
 8008d48:	e018      	b.n	8008d7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d4a:	4b19      	ldr	r3, [pc, #100]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a18      	ldr	r2, [pc, #96]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d56:	f7fa fcd3 	bl	8003700 <HAL_GetTick>
 8008d5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d5c:	e008      	b.n	8008d70 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008d5e:	f7fa fccf 	bl	8003700 <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d901      	bls.n	8008d70 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e198      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d70:	4b0f      	ldr	r3, [pc, #60]	; (8008db0 <HAL_RCC_OscConfig+0x520>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1f0      	bne.n	8008d5e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0304 	and.w	r3, r3, #4
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 8085 	beq.w	8008e94 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d8a:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <HAL_RCC_OscConfig+0x524>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a09      	ldr	r2, [pc, #36]	; (8008db4 <HAL_RCC_OscConfig+0x524>)
 8008d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d96:	f7fa fcb3 	bl	8003700 <HAL_GetTick>
 8008d9a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d9c:	e00c      	b.n	8008db8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008d9e:	f7fa fcaf 	bl	8003700 <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b64      	cmp	r3, #100	; 0x64
 8008daa:	d905      	bls.n	8008db8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e178      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
 8008db0:	58024400 	.word	0x58024400
 8008db4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008db8:	4b96      	ldr	r3, [pc, #600]	; (8009014 <HAL_RCC_OscConfig+0x784>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0ec      	beq.n	8008d9e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d106      	bne.n	8008dda <HAL_RCC_OscConfig+0x54a>
 8008dcc:	4b92      	ldr	r3, [pc, #584]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd0:	4a91      	ldr	r2, [pc, #580]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008dd2:	f043 0301 	orr.w	r3, r3, #1
 8008dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8008dd8:	e02d      	b.n	8008e36 <HAL_RCC_OscConfig+0x5a6>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10c      	bne.n	8008dfc <HAL_RCC_OscConfig+0x56c>
 8008de2:	4b8d      	ldr	r3, [pc, #564]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de6:	4a8c      	ldr	r2, [pc, #560]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008de8:	f023 0301 	bic.w	r3, r3, #1
 8008dec:	6713      	str	r3, [r2, #112]	; 0x70
 8008dee:	4b8a      	ldr	r3, [pc, #552]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df2:	4a89      	ldr	r2, [pc, #548]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008df4:	f023 0304 	bic.w	r3, r3, #4
 8008df8:	6713      	str	r3, [r2, #112]	; 0x70
 8008dfa:	e01c      	b.n	8008e36 <HAL_RCC_OscConfig+0x5a6>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2b05      	cmp	r3, #5
 8008e02:	d10c      	bne.n	8008e1e <HAL_RCC_OscConfig+0x58e>
 8008e04:	4b84      	ldr	r3, [pc, #528]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e08:	4a83      	ldr	r2, [pc, #524]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008e0a:	f043 0304 	orr.w	r3, r3, #4
 8008e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e10:	4b81      	ldr	r3, [pc, #516]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e14:	4a80      	ldr	r2, [pc, #512]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008e16:	f043 0301 	orr.w	r3, r3, #1
 8008e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e1c:	e00b      	b.n	8008e36 <HAL_RCC_OscConfig+0x5a6>
 8008e1e:	4b7e      	ldr	r3, [pc, #504]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e22:	4a7d      	ldr	r2, [pc, #500]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008e24:	f023 0301 	bic.w	r3, r3, #1
 8008e28:	6713      	str	r3, [r2, #112]	; 0x70
 8008e2a:	4b7b      	ldr	r3, [pc, #492]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2e:	4a7a      	ldr	r2, [pc, #488]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008e30:	f023 0304 	bic.w	r3, r3, #4
 8008e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d015      	beq.n	8008e6a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e3e:	f7fa fc5f 	bl	8003700 <HAL_GetTick>
 8008e42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e44:	e00a      	b.n	8008e5c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e46:	f7fa fc5b 	bl	8003700 <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d901      	bls.n	8008e5c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e122      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e5c:	4b6e      	ldr	r3, [pc, #440]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0ee      	beq.n	8008e46 <HAL_RCC_OscConfig+0x5b6>
 8008e68:	e014      	b.n	8008e94 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e6a:	f7fa fc49 	bl	8003700 <HAL_GetTick>
 8008e6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e70:	e00a      	b.n	8008e88 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e72:	f7fa fc45 	bl	8003700 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d901      	bls.n	8008e88 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e10c      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e88:	4b63      	ldr	r3, [pc, #396]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1ee      	bne.n	8008e72 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 8101 	beq.w	80090a0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e9e:	4b5e      	ldr	r3, [pc, #376]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ea6:	2b18      	cmp	r3, #24
 8008ea8:	f000 80bc 	beq.w	8009024 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	f040 8095 	bne.w	8008fe0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eb6:	4b58      	ldr	r3, [pc, #352]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a57      	ldr	r2, [pc, #348]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008ebc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec2:	f7fa fc1d 	bl	8003700 <HAL_GetTick>
 8008ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ec8:	e008      	b.n	8008edc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eca:	f7fa fc19 	bl	8003700 <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d901      	bls.n	8008edc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e0e2      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008edc:	4b4e      	ldr	r3, [pc, #312]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1f0      	bne.n	8008eca <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ee8:	4b4b      	ldr	r3, [pc, #300]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eec:	4b4b      	ldr	r3, [pc, #300]	; (800901c <HAL_RCC_OscConfig+0x78c>)
 8008eee:	4013      	ands	r3, r2
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ef8:	0112      	lsls	r2, r2, #4
 8008efa:	430a      	orrs	r2, r1
 8008efc:	4946      	ldr	r1, [pc, #280]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	628b      	str	r3, [r1, #40]	; 0x28
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f06:	3b01      	subs	r3, #1
 8008f08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f10:	3b01      	subs	r3, #1
 8008f12:	025b      	lsls	r3, r3, #9
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	041b      	lsls	r3, r3, #16
 8008f20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f24:	431a      	orrs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	061b      	lsls	r3, r3, #24
 8008f2e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f32:	4939      	ldr	r1, [pc, #228]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008f38:	4b37      	ldr	r3, [pc, #220]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	4a36      	ldr	r2, [pc, #216]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f44:	4b34      	ldr	r3, [pc, #208]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f48:	4b35      	ldr	r3, [pc, #212]	; (8009020 <HAL_RCC_OscConfig+0x790>)
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f50:	00d2      	lsls	r2, r2, #3
 8008f52:	4931      	ldr	r1, [pc, #196]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f58:	4b2f      	ldr	r3, [pc, #188]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	f023 020c 	bic.w	r2, r3, #12
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f64:	492c      	ldr	r1, [pc, #176]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f6a:	4b2b      	ldr	r3, [pc, #172]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6e:	f023 0202 	bic.w	r2, r3, #2
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f76:	4928      	ldr	r1, [pc, #160]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f7c:	4b26      	ldr	r3, [pc, #152]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f80:	4a25      	ldr	r2, [pc, #148]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f88:	4b23      	ldr	r3, [pc, #140]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	4a22      	ldr	r2, [pc, #136]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f94:	4b20      	ldr	r3, [pc, #128]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	4a1f      	ldr	r2, [pc, #124]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008fa0:	4b1d      	ldr	r3, [pc, #116]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	4a1c      	ldr	r2, [pc, #112]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008fa6:	f043 0301 	orr.w	r3, r3, #1
 8008faa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fac:	4b1a      	ldr	r3, [pc, #104]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a19      	ldr	r2, [pc, #100]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb8:	f7fa fba2 	bl	8003700 <HAL_GetTick>
 8008fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fbe:	e008      	b.n	8008fd2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fc0:	f7fa fb9e 	bl	8003700 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e067      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fd2:	4b11      	ldr	r3, [pc, #68]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0f0      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x730>
 8008fde:	e05f      	b.n	80090a0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a0c      	ldr	r2, [pc, #48]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8008fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fec:	f7fa fb88 	bl	8003700 <HAL_GetTick>
 8008ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ff2:	e008      	b.n	8009006 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ff4:	f7fa fb84 	bl	8003700 <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d901      	bls.n	8009006 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e04d      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009006:	4b04      	ldr	r3, [pc, #16]	; (8009018 <HAL_RCC_OscConfig+0x788>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1f0      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x764>
 8009012:	e045      	b.n	80090a0 <HAL_RCC_OscConfig+0x810>
 8009014:	58024800 	.word	0x58024800
 8009018:	58024400 	.word	0x58024400
 800901c:	fffffc0c 	.word	0xfffffc0c
 8009020:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009024:	4b21      	ldr	r3, [pc, #132]	; (80090ac <HAL_RCC_OscConfig+0x81c>)
 8009026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009028:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800902a:	4b20      	ldr	r3, [pc, #128]	; (80090ac <HAL_RCC_OscConfig+0x81c>)
 800902c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	2b01      	cmp	r3, #1
 8009036:	d031      	beq.n	800909c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	f003 0203 	and.w	r2, r3, #3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009042:	429a      	cmp	r2, r3
 8009044:	d12a      	bne.n	800909c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	091b      	lsrs	r3, r3, #4
 800904a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009052:	429a      	cmp	r2, r3
 8009054:	d122      	bne.n	800909c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009062:	429a      	cmp	r2, r3
 8009064:	d11a      	bne.n	800909c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	0a5b      	lsrs	r3, r3, #9
 800906a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009072:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009074:	429a      	cmp	r2, r3
 8009076:	d111      	bne.n	800909c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	0c1b      	lsrs	r3, r3, #16
 800907c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009086:	429a      	cmp	r2, r3
 8009088:	d108      	bne.n	800909c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	0e1b      	lsrs	r3, r3, #24
 800908e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009096:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009098:	429a      	cmp	r2, r3
 800909a:	d001      	beq.n	80090a0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e000      	b.n	80090a2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3730      	adds	r7, #48	; 0x30
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	58024400 	.word	0x58024400

080090b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e19c      	b.n	80093fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090c4:	4b8a      	ldr	r3, [pc, #552]	; (80092f0 <HAL_RCC_ClockConfig+0x240>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d910      	bls.n	80090f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d2:	4b87      	ldr	r3, [pc, #540]	; (80092f0 <HAL_RCC_ClockConfig+0x240>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f023 020f 	bic.w	r2, r3, #15
 80090da:	4985      	ldr	r1, [pc, #532]	; (80092f0 <HAL_RCC_ClockConfig+0x240>)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	4313      	orrs	r3, r2
 80090e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e2:	4b83      	ldr	r3, [pc, #524]	; (80092f0 <HAL_RCC_ClockConfig+0x240>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d001      	beq.n	80090f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e184      	b.n	80093fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d010      	beq.n	8009122 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	691a      	ldr	r2, [r3, #16]
 8009104:	4b7b      	ldr	r3, [pc, #492]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800910c:	429a      	cmp	r2, r3
 800910e:	d908      	bls.n	8009122 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009110:	4b78      	ldr	r3, [pc, #480]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	4975      	ldr	r1, [pc, #468]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 800911e:	4313      	orrs	r3, r2
 8009120:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0308 	and.w	r3, r3, #8
 800912a:	2b00      	cmp	r3, #0
 800912c:	d010      	beq.n	8009150 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	695a      	ldr	r2, [r3, #20]
 8009132:	4b70      	ldr	r3, [pc, #448]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800913a:	429a      	cmp	r2, r3
 800913c:	d908      	bls.n	8009150 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800913e:	4b6d      	ldr	r3, [pc, #436]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	496a      	ldr	r1, [pc, #424]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 800914c:	4313      	orrs	r3, r2
 800914e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0310 	and.w	r3, r3, #16
 8009158:	2b00      	cmp	r3, #0
 800915a:	d010      	beq.n	800917e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	699a      	ldr	r2, [r3, #24]
 8009160:	4b64      	ldr	r3, [pc, #400]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009168:	429a      	cmp	r2, r3
 800916a:	d908      	bls.n	800917e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800916c:	4b61      	ldr	r3, [pc, #388]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	495e      	ldr	r1, [pc, #376]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 800917a:	4313      	orrs	r3, r2
 800917c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b00      	cmp	r3, #0
 8009188:	d010      	beq.n	80091ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	69da      	ldr	r2, [r3, #28]
 800918e:	4b59      	ldr	r3, [pc, #356]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009196:	429a      	cmp	r2, r3
 8009198:	d908      	bls.n	80091ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800919a:	4b56      	ldr	r3, [pc, #344]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	4953      	ldr	r1, [pc, #332]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 80091a8:	4313      	orrs	r3, r2
 80091aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d010      	beq.n	80091da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	4b4d      	ldr	r3, [pc, #308]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	f003 030f 	and.w	r3, r3, #15
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d908      	bls.n	80091da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091c8:	4b4a      	ldr	r3, [pc, #296]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	f023 020f 	bic.w	r2, r3, #15
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	4947      	ldr	r1, [pc, #284]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d055      	beq.n	8009292 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80091e6:	4b43      	ldr	r3, [pc, #268]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	4940      	ldr	r1, [pc, #256]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d107      	bne.n	8009210 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009200:	4b3c      	ldr	r3, [pc, #240]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d121      	bne.n	8009250 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e0f6      	b.n	80093fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	2b03      	cmp	r3, #3
 8009216:	d107      	bne.n	8009228 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009218:	4b36      	ldr	r3, [pc, #216]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d115      	bne.n	8009250 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e0ea      	b.n	80093fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d107      	bne.n	8009240 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009230:	4b30      	ldr	r3, [pc, #192]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009238:	2b00      	cmp	r3, #0
 800923a:	d109      	bne.n	8009250 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e0de      	b.n	80093fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009240:	4b2c      	ldr	r3, [pc, #176]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0304 	and.w	r3, r3, #4
 8009248:	2b00      	cmp	r3, #0
 800924a:	d101      	bne.n	8009250 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e0d6      	b.n	80093fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009250:	4b28      	ldr	r3, [pc, #160]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	f023 0207 	bic.w	r2, r3, #7
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	4925      	ldr	r1, [pc, #148]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 800925e:	4313      	orrs	r3, r2
 8009260:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009262:	f7fa fa4d 	bl	8003700 <HAL_GetTick>
 8009266:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009268:	e00a      	b.n	8009280 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800926a:	f7fa fa49 	bl	8003700 <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	f241 3288 	movw	r2, #5000	; 0x1388
 8009278:	4293      	cmp	r3, r2
 800927a:	d901      	bls.n	8009280 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e0be      	b.n	80093fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009280:	4b1c      	ldr	r3, [pc, #112]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	00db      	lsls	r3, r3, #3
 800928e:	429a      	cmp	r2, r3
 8009290:	d1eb      	bne.n	800926a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d010      	beq.n	80092c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	4b14      	ldr	r3, [pc, #80]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	f003 030f 	and.w	r3, r3, #15
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d208      	bcs.n	80092c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092ae:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	f023 020f 	bic.w	r2, r3, #15
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	490e      	ldr	r1, [pc, #56]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80092c0:	4b0b      	ldr	r3, [pc, #44]	; (80092f0 <HAL_RCC_ClockConfig+0x240>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 030f 	and.w	r3, r3, #15
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d214      	bcs.n	80092f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092ce:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <HAL_RCC_ClockConfig+0x240>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f023 020f 	bic.w	r2, r3, #15
 80092d6:	4906      	ldr	r1, [pc, #24]	; (80092f0 <HAL_RCC_ClockConfig+0x240>)
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	4313      	orrs	r3, r2
 80092dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092de:	4b04      	ldr	r3, [pc, #16]	; (80092f0 <HAL_RCC_ClockConfig+0x240>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 030f 	and.w	r3, r3, #15
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d005      	beq.n	80092f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e086      	b.n	80093fe <HAL_RCC_ClockConfig+0x34e>
 80092f0:	52002000 	.word	0x52002000
 80092f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0304 	and.w	r3, r3, #4
 8009300:	2b00      	cmp	r3, #0
 8009302:	d010      	beq.n	8009326 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	691a      	ldr	r2, [r3, #16]
 8009308:	4b3f      	ldr	r3, [pc, #252]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009310:	429a      	cmp	r2, r3
 8009312:	d208      	bcs.n	8009326 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009314:	4b3c      	ldr	r3, [pc, #240]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	4939      	ldr	r1, [pc, #228]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 8009322:	4313      	orrs	r3, r2
 8009324:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0308 	and.w	r3, r3, #8
 800932e:	2b00      	cmp	r3, #0
 8009330:	d010      	beq.n	8009354 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	695a      	ldr	r2, [r3, #20]
 8009336:	4b34      	ldr	r3, [pc, #208]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800933e:	429a      	cmp	r2, r3
 8009340:	d208      	bcs.n	8009354 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009342:	4b31      	ldr	r3, [pc, #196]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	492e      	ldr	r1, [pc, #184]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 8009350:	4313      	orrs	r3, r2
 8009352:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0310 	and.w	r3, r3, #16
 800935c:	2b00      	cmp	r3, #0
 800935e:	d010      	beq.n	8009382 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	699a      	ldr	r2, [r3, #24]
 8009364:	4b28      	ldr	r3, [pc, #160]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800936c:	429a      	cmp	r2, r3
 800936e:	d208      	bcs.n	8009382 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009370:	4b25      	ldr	r3, [pc, #148]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 8009372:	69db      	ldr	r3, [r3, #28]
 8009374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	4922      	ldr	r1, [pc, #136]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 800937e:	4313      	orrs	r3, r2
 8009380:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b00      	cmp	r3, #0
 800938c:	d010      	beq.n	80093b0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	69da      	ldr	r2, [r3, #28]
 8009392:	4b1d      	ldr	r3, [pc, #116]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 8009394:	6a1b      	ldr	r3, [r3, #32]
 8009396:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800939a:	429a      	cmp	r2, r3
 800939c:	d208      	bcs.n	80093b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800939e:	4b1a      	ldr	r3, [pc, #104]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	4917      	ldr	r1, [pc, #92]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093b0:	f000 f844 	bl	800943c <HAL_RCC_GetSysClockFreq>
 80093b4:	4601      	mov	r1, r0
 80093b6:	4b14      	ldr	r3, [pc, #80]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	0a1b      	lsrs	r3, r3, #8
 80093bc:	f003 030f 	and.w	r3, r3, #15
 80093c0:	4a12      	ldr	r2, [pc, #72]	; (800940c <HAL_RCC_ClockConfig+0x35c>)
 80093c2:	5cd3      	ldrb	r3, [r2, r3]
 80093c4:	f003 031f 	and.w	r3, r3, #31
 80093c8:	fa21 f303 	lsr.w	r3, r1, r3
 80093cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093ce:	4b0e      	ldr	r3, [pc, #56]	; (8009408 <HAL_RCC_ClockConfig+0x358>)
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	f003 030f 	and.w	r3, r3, #15
 80093d6:	4a0d      	ldr	r2, [pc, #52]	; (800940c <HAL_RCC_ClockConfig+0x35c>)
 80093d8:	5cd3      	ldrb	r3, [r2, r3]
 80093da:	f003 031f 	and.w	r3, r3, #31
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	fa22 f303 	lsr.w	r3, r2, r3
 80093e4:	4a0a      	ldr	r2, [pc, #40]	; (8009410 <HAL_RCC_ClockConfig+0x360>)
 80093e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093e8:	4a0a      	ldr	r2, [pc, #40]	; (8009414 <HAL_RCC_ClockConfig+0x364>)
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80093ee:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <HAL_RCC_ClockConfig+0x368>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fa f93a 	bl	800366c <HAL_InitTick>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	58024400 	.word	0x58024400
 800940c:	0801a01c 	.word	0x0801a01c
 8009410:	24000010 	.word	0x24000010
 8009414:	2400000c 	.word	0x2400000c
 8009418:	24000014 	.word	0x24000014

0800941c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8009420:	4b05      	ldr	r3, [pc, #20]	; (8009438 <HAL_RCC_EnableCSS+0x1c>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a04      	ldr	r2, [pc, #16]	; (8009438 <HAL_RCC_EnableCSS+0x1c>)
 8009426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800942a:	6013      	str	r3, [r2, #0]
}
 800942c:	bf00      	nop
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	58024400 	.word	0x58024400

0800943c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800943c:	b480      	push	{r7}
 800943e:	b089      	sub	sp, #36	; 0x24
 8009440:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009442:	4baf      	ldr	r3, [pc, #700]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800944a:	2b18      	cmp	r3, #24
 800944c:	f200 814e 	bhi.w	80096ec <HAL_RCC_GetSysClockFreq+0x2b0>
 8009450:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009456:	bf00      	nop
 8009458:	080094bd 	.word	0x080094bd
 800945c:	080096ed 	.word	0x080096ed
 8009460:	080096ed 	.word	0x080096ed
 8009464:	080096ed 	.word	0x080096ed
 8009468:	080096ed 	.word	0x080096ed
 800946c:	080096ed 	.word	0x080096ed
 8009470:	080096ed 	.word	0x080096ed
 8009474:	080096ed 	.word	0x080096ed
 8009478:	080094e3 	.word	0x080094e3
 800947c:	080096ed 	.word	0x080096ed
 8009480:	080096ed 	.word	0x080096ed
 8009484:	080096ed 	.word	0x080096ed
 8009488:	080096ed 	.word	0x080096ed
 800948c:	080096ed 	.word	0x080096ed
 8009490:	080096ed 	.word	0x080096ed
 8009494:	080096ed 	.word	0x080096ed
 8009498:	080094e9 	.word	0x080094e9
 800949c:	080096ed 	.word	0x080096ed
 80094a0:	080096ed 	.word	0x080096ed
 80094a4:	080096ed 	.word	0x080096ed
 80094a8:	080096ed 	.word	0x080096ed
 80094ac:	080096ed 	.word	0x080096ed
 80094b0:	080096ed 	.word	0x080096ed
 80094b4:	080096ed 	.word	0x080096ed
 80094b8:	080094ef 	.word	0x080094ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094bc:	4b90      	ldr	r3, [pc, #576]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0320 	and.w	r3, r3, #32
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d009      	beq.n	80094dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094c8:	4b8d      	ldr	r3, [pc, #564]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	08db      	lsrs	r3, r3, #3
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	4a8c      	ldr	r2, [pc, #560]	; (8009704 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80094d4:	fa22 f303 	lsr.w	r3, r2, r3
 80094d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80094da:	e10a      	b.n	80096f2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094dc:	4b89      	ldr	r3, [pc, #548]	; (8009704 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80094de:	61bb      	str	r3, [r7, #24]
    break;
 80094e0:	e107      	b.n	80096f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80094e2:	4b89      	ldr	r3, [pc, #548]	; (8009708 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80094e4:	61bb      	str	r3, [r7, #24]
    break;
 80094e6:	e104      	b.n	80096f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80094e8:	4b88      	ldr	r3, [pc, #544]	; (800970c <HAL_RCC_GetSysClockFreq+0x2d0>)
 80094ea:	61bb      	str	r3, [r7, #24]
    break;
 80094ec:	e101      	b.n	80096f2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094ee:	4b84      	ldr	r3, [pc, #528]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80094f8:	4b81      	ldr	r3, [pc, #516]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fc:	091b      	lsrs	r3, r3, #4
 80094fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009502:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009504:	4b7e      	ldr	r3, [pc, #504]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800950e:	4b7c      	ldr	r3, [pc, #496]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009512:	08db      	lsrs	r3, r3, #3
 8009514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	fb02 f303 	mul.w	r3, r2, r3
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009526:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 80da 	beq.w	80096e6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d05a      	beq.n	80095ee <HAL_RCC_GetSysClockFreq+0x1b2>
 8009538:	2b01      	cmp	r3, #1
 800953a:	d302      	bcc.n	8009542 <HAL_RCC_GetSysClockFreq+0x106>
 800953c:	2b02      	cmp	r3, #2
 800953e:	d078      	beq.n	8009632 <HAL_RCC_GetSysClockFreq+0x1f6>
 8009540:	e099      	b.n	8009676 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009542:	4b6f      	ldr	r3, [pc, #444]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	2b00      	cmp	r3, #0
 800954c:	d02d      	beq.n	80095aa <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800954e:	4b6c      	ldr	r3, [pc, #432]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	08db      	lsrs	r3, r3, #3
 8009554:	f003 0303 	and.w	r3, r3, #3
 8009558:	4a6a      	ldr	r2, [pc, #424]	; (8009704 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800955a:	fa22 f303 	lsr.w	r3, r2, r3
 800955e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	ee07 3a90 	vmov	s15, r3
 8009566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	ee07 3a90 	vmov	s15, r3
 8009570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009578:	4b61      	ldr	r3, [pc, #388]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009580:	ee07 3a90 	vmov	s15, r3
 8009584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009588:	ed97 6a02 	vldr	s12, [r7, #8]
 800958c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8009710 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80095a8:	e087      	b.n	80096ba <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	ee07 3a90 	vmov	s15, r3
 80095b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8009714 <HAL_RCC_GetSysClockFreq+0x2d8>
 80095b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095bc:	4b50      	ldr	r3, [pc, #320]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80095be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80095d0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8009710 <HAL_RCC_GetSysClockFreq+0x2d4>
 80095d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095ec:	e065      	b.n	80096ba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	ee07 3a90 	vmov	s15, r3
 80095f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8009718 <HAL_RCC_GetSysClockFreq+0x2dc>
 80095fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009600:	4b3f      	ldr	r3, [pc, #252]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009608:	ee07 3a90 	vmov	s15, r3
 800960c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009610:	ed97 6a02 	vldr	s12, [r7, #8]
 8009614:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009710 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009630:	e043      	b.n	80096ba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	ee07 3a90 	vmov	s15, r3
 8009638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800971c <HAL_RCC_GetSysClockFreq+0x2e0>
 8009640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009644:	4b2e      	ldr	r3, [pc, #184]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009654:	ed97 6a02 	vldr	s12, [r7, #8]
 8009658:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009710 <HAL_RCC_GetSysClockFreq+0x2d4>
 800965c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800966c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009674:	e021      	b.n	80096ba <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	ee07 3a90 	vmov	s15, r3
 800967c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009680:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009718 <HAL_RCC_GetSysClockFreq+0x2dc>
 8009684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009688:	4b1d      	ldr	r3, [pc, #116]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800968a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009690:	ee07 3a90 	vmov	s15, r3
 8009694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009698:	ed97 6a02 	vldr	s12, [r7, #8]
 800969c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8009710 <HAL_RCC_GetSysClockFreq+0x2d4>
 80096a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096b8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80096ba:	4b11      	ldr	r3, [pc, #68]	; (8009700 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80096bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096be:	0a5b      	lsrs	r3, r3, #9
 80096c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c4:	3301      	adds	r3, #1
 80096c6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80096d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096de:	ee17 3a90 	vmov	r3, s15
 80096e2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80096e4:	e005      	b.n	80096f2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	61bb      	str	r3, [r7, #24]
    break;
 80096ea:	e002      	b.n	80096f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80096ec:	4b06      	ldr	r3, [pc, #24]	; (8009708 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80096ee:	61bb      	str	r3, [r7, #24]
    break;
 80096f0:	bf00      	nop
  }

  return sysclockfreq;
 80096f2:	69bb      	ldr	r3, [r7, #24]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3724      	adds	r7, #36	; 0x24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	58024400 	.word	0x58024400
 8009704:	03d09000 	.word	0x03d09000
 8009708:	003d0900 	.word	0x003d0900
 800970c:	017d7840 	.word	0x017d7840
 8009710:	46000000 	.word	0x46000000
 8009714:	4c742400 	.word	0x4c742400
 8009718:	4a742400 	.word	0x4a742400
 800971c:	4bbebc20 	.word	0x4bbebc20

08009720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009726:	f7ff fe89 	bl	800943c <HAL_RCC_GetSysClockFreq>
 800972a:	4601      	mov	r1, r0
 800972c:	4b10      	ldr	r3, [pc, #64]	; (8009770 <HAL_RCC_GetHCLKFreq+0x50>)
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	0a1b      	lsrs	r3, r3, #8
 8009732:	f003 030f 	and.w	r3, r3, #15
 8009736:	4a0f      	ldr	r2, [pc, #60]	; (8009774 <HAL_RCC_GetHCLKFreq+0x54>)
 8009738:	5cd3      	ldrb	r3, [r2, r3]
 800973a:	f003 031f 	and.w	r3, r3, #31
 800973e:	fa21 f303 	lsr.w	r3, r1, r3
 8009742:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009744:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <HAL_RCC_GetHCLKFreq+0x50>)
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	f003 030f 	and.w	r3, r3, #15
 800974c:	4a09      	ldr	r2, [pc, #36]	; (8009774 <HAL_RCC_GetHCLKFreq+0x54>)
 800974e:	5cd3      	ldrb	r3, [r2, r3]
 8009750:	f003 031f 	and.w	r3, r3, #31
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	fa22 f303 	lsr.w	r3, r2, r3
 800975a:	4a07      	ldr	r2, [pc, #28]	; (8009778 <HAL_RCC_GetHCLKFreq+0x58>)
 800975c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800975e:	4a07      	ldr	r2, [pc, #28]	; (800977c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009764:	4b04      	ldr	r3, [pc, #16]	; (8009778 <HAL_RCC_GetHCLKFreq+0x58>)
 8009766:	681b      	ldr	r3, [r3, #0]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	58024400 	.word	0x58024400
 8009774:	0801a01c 	.word	0x0801a01c
 8009778:	24000010 	.word	0x24000010
 800977c:	2400000c 	.word	0x2400000c

08009780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009784:	f7ff ffcc 	bl	8009720 <HAL_RCC_GetHCLKFreq>
 8009788:	4601      	mov	r1, r0
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	091b      	lsrs	r3, r3, #4
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	4a04      	ldr	r2, [pc, #16]	; (80097a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009796:	5cd3      	ldrb	r3, [r2, r3]
 8009798:	f003 031f 	and.w	r3, r3, #31
 800979c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	58024400 	.word	0x58024400
 80097a8:	0801a01c 	.word	0x0801a01c

080097ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80097b0:	f7ff ffb6 	bl	8009720 <HAL_RCC_GetHCLKFreq>
 80097b4:	4601      	mov	r1, r0
 80097b6:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	0a1b      	lsrs	r3, r3, #8
 80097bc:	f003 0307 	and.w	r3, r3, #7
 80097c0:	4a04      	ldr	r2, [pc, #16]	; (80097d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80097c2:	5cd3      	ldrb	r3, [r2, r3]
 80097c4:	f003 031f 	and.w	r3, r3, #31
 80097c8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	58024400 	.word	0x58024400
 80097d4:	0801a01c 	.word	0x0801a01c

080097d8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80097dc:	4b07      	ldr	r3, [pc, #28]	; (80097fc <HAL_RCC_NMI_IRQHandler+0x24>)
 80097de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e8:	d105      	bne.n	80097f6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80097ea:	f000 f809 	bl	8009800 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80097ee:	4b03      	ldr	r3, [pc, #12]	; (80097fc <HAL_RCC_NMI_IRQHandler+0x24>)
 80097f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097f4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80097f6:	bf00      	nop
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	58024400 	.word	0x58024400

08009800 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8009800:	b480      	push	{r7}
 8009802:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8009804:	bf00      	nop
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
	...

08009810 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009818:	2300      	movs	r3, #0
 800981a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800981c:	2300      	movs	r3, #0
 800981e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d03d      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009834:	d013      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800983a:	d802      	bhi.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800983c:	2b00      	cmp	r3, #0
 800983e:	d007      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009840:	e01f      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009846:	d013      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8009848:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800984c:	d01c      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800984e:	e018      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009850:	4baf      	ldr	r3, [pc, #700]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	4aae      	ldr	r2, [pc, #696]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800985a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800985c:	e015      	b.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3304      	adds	r3, #4
 8009862:	2102      	movs	r1, #2
 8009864:	4618      	mov	r0, r3
 8009866:	f001 fd33 	bl	800b2d0 <RCCEx_PLL2_Config>
 800986a:	4603      	mov	r3, r0
 800986c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800986e:	e00c      	b.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	3324      	adds	r3, #36	; 0x24
 8009874:	2102      	movs	r1, #2
 8009876:	4618      	mov	r0, r3
 8009878:	f001 fddc 	bl	800b434 <RCCEx_PLL3_Config>
 800987c:	4603      	mov	r3, r0
 800987e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009880:	e003      	b.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	75fb      	strb	r3, [r7, #23]
      break;
 8009886:	e000      	b.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d109      	bne.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009890:	4b9f      	ldr	r3, [pc, #636]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800989c:	499c      	ldr	r1, [pc, #624]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800989e:	4313      	orrs	r3, r2
 80098a0:	650b      	str	r3, [r1, #80]	; 0x50
 80098a2:	e001      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d03d      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d826      	bhi.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80098bc:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80098be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c2:	bf00      	nop
 80098c4:	080098d9 	.word	0x080098d9
 80098c8:	080098e7 	.word	0x080098e7
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	08009911 	.word	0x08009911
 80098d4:	08009911 	.word	0x08009911
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098d8:	4b8d      	ldr	r3, [pc, #564]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	4a8c      	ldr	r2, [pc, #560]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80098de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098e4:	e015      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	3304      	adds	r3, #4
 80098ea:	2100      	movs	r1, #0
 80098ec:	4618      	mov	r0, r3
 80098ee:	f001 fcef 	bl	800b2d0 <RCCEx_PLL2_Config>
 80098f2:	4603      	mov	r3, r0
 80098f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098f6:	e00c      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3324      	adds	r3, #36	; 0x24
 80098fc:	2100      	movs	r1, #0
 80098fe:	4618      	mov	r0, r3
 8009900:	f001 fd98 	bl	800b434 <RCCEx_PLL3_Config>
 8009904:	4603      	mov	r3, r0
 8009906:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009908:	e003      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	75fb      	strb	r3, [r7, #23]
      break;
 800990e:	e000      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8009910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009912:	7dfb      	ldrb	r3, [r7, #23]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d109      	bne.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009918:	4b7d      	ldr	r3, [pc, #500]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800991a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800991c:	f023 0207 	bic.w	r2, r3, #7
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009924:	497a      	ldr	r1, [pc, #488]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009926:	4313      	orrs	r3, r2
 8009928:	650b      	str	r3, [r1, #80]	; 0x50
 800992a:	e001      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009938:	2b00      	cmp	r3, #0
 800993a:	d03e      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009940:	2b80      	cmp	r3, #128	; 0x80
 8009942:	d01c      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009944:	2b80      	cmp	r3, #128	; 0x80
 8009946:	d804      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d008      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800994c:	2b40      	cmp	r3, #64	; 0x40
 800994e:	d00d      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009950:	e01e      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009952:	2bc0      	cmp	r3, #192	; 0xc0
 8009954:	d01f      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8009956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800995a:	d01e      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800995c:	e018      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800995e:	4b6c      	ldr	r3, [pc, #432]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009962:	4a6b      	ldr	r2, [pc, #428]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009968:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800996a:	e017      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3304      	adds	r3, #4
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f001 fcac 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009978:	4603      	mov	r3, r0
 800997a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800997c:	e00e      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3324      	adds	r3, #36	; 0x24
 8009982:	2100      	movs	r1, #0
 8009984:	4618      	mov	r0, r3
 8009986:	f001 fd55 	bl	800b434 <RCCEx_PLL3_Config>
 800998a:	4603      	mov	r3, r0
 800998c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800998e:	e005      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	75fb      	strb	r3, [r7, #23]
      break;
 8009994:	e002      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8009996:	bf00      	nop
 8009998:	e000      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800999a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800999c:	7dfb      	ldrb	r3, [r7, #23]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d109      	bne.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80099a2:	4b5b      	ldr	r3, [pc, #364]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80099a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ae:	4958      	ldr	r1, [pc, #352]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80099b0:	4313      	orrs	r3, r2
 80099b2:	650b      	str	r3, [r1, #80]	; 0x50
 80099b4:	e001      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
 80099b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d044      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099d0:	d01f      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80099d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099d6:	d805      	bhi.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00a      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099e0:	d00e      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80099e2:	e01f      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80099e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099e8:	d01f      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80099ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099ee:	d01e      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80099f0:	e018      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099f2:	4b47      	ldr	r3, [pc, #284]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80099f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f6:	4a46      	ldr	r2, [pc, #280]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80099f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80099fe:	e017      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3304      	adds	r3, #4
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f001 fc62 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009a10:	e00e      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	3324      	adds	r3, #36	; 0x24
 8009a16:	2100      	movs	r1, #0
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f001 fd0b 	bl	800b434 <RCCEx_PLL3_Config>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a22:	e005      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	75fb      	strb	r3, [r7, #23]
      break;
 8009a28:	e002      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009a2a:	bf00      	nop
 8009a2c:	e000      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10a      	bne.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009a36:	4b36      	ldr	r3, [pc, #216]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a3a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a44:	4932      	ldr	r1, [pc, #200]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	658b      	str	r3, [r1, #88]	; 0x58
 8009a4a:	e001      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d044      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a66:	d01f      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a6c:	d805      	bhi.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8009a72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a76:	d00e      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009a78:	e01f      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8009a7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a7e:	d01f      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a84:	d01e      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009a86:	e018      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a88:	4b21      	ldr	r3, [pc, #132]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	4a20      	ldr	r2, [pc, #128]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a94:	e017      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f001 fc17 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009aa6:	e00e      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3324      	adds	r3, #36	; 0x24
 8009aac:	2100      	movs	r1, #0
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f001 fcc0 	bl	800b434 <RCCEx_PLL3_Config>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ab8:	e005      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	75fb      	strb	r3, [r7, #23]
      break;
 8009abe:	e002      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009ac0:	bf00      	nop
 8009ac2:	e000      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009acc:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ada:	490d      	ldr	r1, [pc, #52]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	658b      	str	r3, [r1, #88]	; 0x58
 8009ae0:	e001      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae2:	7dfb      	ldrb	r3, [r7, #23]
 8009ae4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d035      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af6:	2b10      	cmp	r3, #16
 8009af8:	d00c      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8009afa:	2b10      	cmp	r3, #16
 8009afc:	d802      	bhi.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d01b      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8009b02:	e017      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009b04:	2b20      	cmp	r3, #32
 8009b06:	d00c      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8009b08:	2b30      	cmp	r3, #48	; 0x30
 8009b0a:	d018      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8009b0c:	e012      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009b0e:	bf00      	nop
 8009b10:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b14:	4baf      	ldr	r3, [pc, #700]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	4aae      	ldr	r2, [pc, #696]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009b20:	e00e      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3304      	adds	r3, #4
 8009b26:	2102      	movs	r1, #2
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f001 fbd1 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009b32:	e005      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	75fb      	strb	r3, [r7, #23]
      break;
 8009b38:	e002      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009b3a:	bf00      	nop
 8009b3c:	e000      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d109      	bne.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009b46:	4ba3      	ldr	r3, [pc, #652]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b52:	49a0      	ldr	r1, [pc, #640]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b54:	4313      	orrs	r3, r2
 8009b56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009b58:	e001      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d042      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b72:	d01f      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8009b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b78:	d805      	bhi.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00a      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b82:	d00e      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009b84:	e01f      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8009b86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b8a:	d01f      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b90:	d01e      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009b92:	e018      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b94:	4b8f      	ldr	r3, [pc, #572]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b98:	4a8e      	ldr	r2, [pc, #568]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009ba0:	e017      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f001 fb91 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009bb2:	e00e      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	3324      	adds	r3, #36	; 0x24
 8009bb8:	2100      	movs	r1, #0
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 fc3a 	bl	800b434 <RCCEx_PLL3_Config>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009bc4:	e005      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8009bca:	e002      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009bcc:	bf00      	nop
 8009bce:	e000      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d109      	bne.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009bd8:	4b7e      	ldr	r3, [pc, #504]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bdc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009be4:	497b      	ldr	r1, [pc, #492]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	650b      	str	r3, [r1, #80]	; 0x50
 8009bea:	e001      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d042      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c04:	d01b      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c0a:	d805      	bhi.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d022      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c14:	d00a      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009c16:	e01b      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8009c18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c1c:	d01d      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8009c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c22:	d01c      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009c24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c28:	d01b      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009c2a:	e011      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	2101      	movs	r1, #1
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 fb4c 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009c3c:	e012      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3324      	adds	r3, #36	; 0x24
 8009c42:	2101      	movs	r1, #1
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 fbf5 	bl	800b434 <RCCEx_PLL3_Config>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009c4e:	e009      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	75fb      	strb	r3, [r7, #23]
      break;
 8009c54:	e006      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009c56:	bf00      	nop
 8009c58:	e004      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009c5a:	bf00      	nop
 8009c5c:	e002      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009c5e:	bf00      	nop
 8009c60:	e000      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d109      	bne.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c6a:	4b5a      	ldr	r3, [pc, #360]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c76:	4957      	ldr	r1, [pc, #348]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	650b      	str	r3, [r1, #80]	; 0x50
 8009c7c:	e001      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d044      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c98:	d01b      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8009c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c9e:	d805      	bhi.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d022      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ca8:	d00a      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009caa:	e01b      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cb0:	d01d      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cb6:	d01c      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009cb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cbc:	d01b      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009cbe:	e011      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f001 fb02 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009cd0:	e012      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	3324      	adds	r3, #36	; 0x24
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 fbab 	bl	800b434 <RCCEx_PLL3_Config>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009ce2:	e009      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce8:	e006      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009cea:	bf00      	nop
 8009cec:	e004      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009cee:	bf00      	nop
 8009cf0:	e002      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009cf2:	bf00      	nop
 8009cf4:	e000      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009cfe:	4b35      	ldr	r3, [pc, #212]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d0c:	4931      	ldr	r1, [pc, #196]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	658b      	str	r3, [r1, #88]	; 0x58
 8009d12:	e001      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d02d      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d2c:	d005      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d32:	d009      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d013      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009d38:	e00f      	b.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d3a:	4b26      	ldr	r3, [pc, #152]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3e:	4a25      	ldr	r2, [pc, #148]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009d46:	e00c      	b.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f001 fabe 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009d54:	4603      	mov	r3, r0
 8009d56:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009d58:	e003      	b.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d5e:	e000      	b.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d109      	bne.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d68:	4b1a      	ldr	r3, [pc, #104]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d74:	4917      	ldr	r1, [pc, #92]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	650b      	str	r3, [r1, #80]	; 0x50
 8009d7a:	e001      	b.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d035      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d81b      	bhi.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009d94:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8009d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9a:	bf00      	nop
 8009d9c:	08009dd9 	.word	0x08009dd9
 8009da0:	08009dad 	.word	0x08009dad
 8009da4:	08009dbb 	.word	0x08009dbb
 8009da8:	08009dd9 	.word	0x08009dd9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dac:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db0:	4a08      	ldr	r2, [pc, #32]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009db6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009db8:	e00f      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	2102      	movs	r1, #2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f001 fa85 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009dca:	e006      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd0:	e003      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009dd2:	bf00      	nop
 8009dd4:	58024400 	.word	0x58024400
      break;
 8009dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d109      	bne.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009de0:	4bba      	ldr	r3, [pc, #744]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009de4:	f023 0203 	bic.w	r2, r3, #3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dec:	49b7      	ldr	r1, [pc, #732]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009dee:	4313      	orrs	r3, r2
 8009df0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009df2:	e001      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 8086 	beq.w	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e06:	4bb2      	ldr	r3, [pc, #712]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4ab1      	ldr	r2, [pc, #708]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e12:	f7f9 fc75 	bl	8003700 <HAL_GetTick>
 8009e16:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e18:	e009      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e1a:	f7f9 fc71 	bl	8003700 <HAL_GetTick>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	2b64      	cmp	r3, #100	; 0x64
 8009e26:	d902      	bls.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	75fb      	strb	r3, [r7, #23]
        break;
 8009e2c:	e005      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e2e:	4ba8      	ldr	r3, [pc, #672]	; (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d0ef      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d166      	bne.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009e40:	4ba2      	ldr	r3, [pc, #648]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e4a:	4053      	eors	r3, r2
 8009e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d013      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e54:	4b9d      	ldr	r3, [pc, #628]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e5c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e5e:	4b9b      	ldr	r3, [pc, #620]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e62:	4a9a      	ldr	r2, [pc, #616]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e68:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e6a:	4b98      	ldr	r3, [pc, #608]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6e:	4a97      	ldr	r2, [pc, #604]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e74:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009e76:	4a95      	ldr	r2, [pc, #596]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e86:	d115      	bne.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e88:	f7f9 fc3a 	bl	8003700 <HAL_GetTick>
 8009e8c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e8e:	e00b      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e90:	f7f9 fc36 	bl	8003700 <HAL_GetTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d902      	bls.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	75fb      	strb	r3, [r7, #23]
            break;
 8009ea6:	e005      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ea8:	4b88      	ldr	r3, [pc, #544]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eac:	f003 0302 	and.w	r3, r3, #2
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d0ed      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d126      	bne.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ec8:	d10d      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009eca:	4b80      	ldr	r3, [pc, #512]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ed8:	0919      	lsrs	r1, r3, #4
 8009eda:	4b7e      	ldr	r3, [pc, #504]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009edc:	400b      	ands	r3, r1
 8009ede:	497b      	ldr	r1, [pc, #492]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	610b      	str	r3, [r1, #16]
 8009ee4:	e005      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009ee6:	4b79      	ldr	r3, [pc, #484]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	4a78      	ldr	r2, [pc, #480]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009eec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009ef0:	6113      	str	r3, [r2, #16]
 8009ef2:	4b76      	ldr	r3, [pc, #472]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f00:	4972      	ldr	r1, [pc, #456]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	670b      	str	r3, [r1, #112]	; 0x70
 8009f06:	e004      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	75bb      	strb	r3, [r7, #22]
 8009f0c:	e001      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
 8009f10:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d07d      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f22:	2b28      	cmp	r3, #40	; 0x28
 8009f24:	d866      	bhi.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8009f26:	a201      	add	r2, pc, #4	; (adr r2, 8009f2c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009ffb 	.word	0x08009ffb
 8009f30:	08009ff5 	.word	0x08009ff5
 8009f34:	08009ff5 	.word	0x08009ff5
 8009f38:	08009ff5 	.word	0x08009ff5
 8009f3c:	08009ff5 	.word	0x08009ff5
 8009f40:	08009ff5 	.word	0x08009ff5
 8009f44:	08009ff5 	.word	0x08009ff5
 8009f48:	08009ff5 	.word	0x08009ff5
 8009f4c:	08009fd1 	.word	0x08009fd1
 8009f50:	08009ff5 	.word	0x08009ff5
 8009f54:	08009ff5 	.word	0x08009ff5
 8009f58:	08009ff5 	.word	0x08009ff5
 8009f5c:	08009ff5 	.word	0x08009ff5
 8009f60:	08009ff5 	.word	0x08009ff5
 8009f64:	08009ff5 	.word	0x08009ff5
 8009f68:	08009ff5 	.word	0x08009ff5
 8009f6c:	08009fe3 	.word	0x08009fe3
 8009f70:	08009ff5 	.word	0x08009ff5
 8009f74:	08009ff5 	.word	0x08009ff5
 8009f78:	08009ff5 	.word	0x08009ff5
 8009f7c:	08009ff5 	.word	0x08009ff5
 8009f80:	08009ff5 	.word	0x08009ff5
 8009f84:	08009ff5 	.word	0x08009ff5
 8009f88:	08009ff5 	.word	0x08009ff5
 8009f8c:	08009ffb 	.word	0x08009ffb
 8009f90:	08009ff5 	.word	0x08009ff5
 8009f94:	08009ff5 	.word	0x08009ff5
 8009f98:	08009ff5 	.word	0x08009ff5
 8009f9c:	08009ff5 	.word	0x08009ff5
 8009fa0:	08009ff5 	.word	0x08009ff5
 8009fa4:	08009ff5 	.word	0x08009ff5
 8009fa8:	08009ff5 	.word	0x08009ff5
 8009fac:	08009ffb 	.word	0x08009ffb
 8009fb0:	08009ff5 	.word	0x08009ff5
 8009fb4:	08009ff5 	.word	0x08009ff5
 8009fb8:	08009ff5 	.word	0x08009ff5
 8009fbc:	08009ff5 	.word	0x08009ff5
 8009fc0:	08009ff5 	.word	0x08009ff5
 8009fc4:	08009ff5 	.word	0x08009ff5
 8009fc8:	08009ff5 	.word	0x08009ff5
 8009fcc:	08009ffb 	.word	0x08009ffb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f001 f97a 	bl	800b2d0 <RCCEx_PLL2_Config>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009fe0:	e00c      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3324      	adds	r3, #36	; 0x24
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f001 fa23 	bl	800b434 <RCCEx_PLL3_Config>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ff2:	e003      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ff8:	e000      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8009ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d109      	bne.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a002:	4b32      	ldr	r3, [pc, #200]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a006:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a00e:	492f      	ldr	r1, [pc, #188]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a010:	4313      	orrs	r3, r2
 800a012:	654b      	str	r3, [r1, #84]	; 0x54
 800a014:	e001      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a016:	7dfb      	ldrb	r3, [r7, #23]
 800a018:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d037      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a02a:	2b05      	cmp	r3, #5
 800a02c:	d820      	bhi.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800a02e:	a201      	add	r2, pc, #4	; (adr r2, 800a034 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800a030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a034:	0800a077 	.word	0x0800a077
 800a038:	0800a04d 	.word	0x0800a04d
 800a03c:	0800a05f 	.word	0x0800a05f
 800a040:	0800a077 	.word	0x0800a077
 800a044:	0800a077 	.word	0x0800a077
 800a048:	0800a077 	.word	0x0800a077
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3304      	adds	r3, #4
 800a050:	2101      	movs	r1, #1
 800a052:	4618      	mov	r0, r3
 800a054:	f001 f93c 	bl	800b2d0 <RCCEx_PLL2_Config>
 800a058:	4603      	mov	r3, r0
 800a05a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a05c:	e00c      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3324      	adds	r3, #36	; 0x24
 800a062:	2101      	movs	r1, #1
 800a064:	4618      	mov	r0, r3
 800a066:	f001 f9e5 	bl	800b434 <RCCEx_PLL3_Config>
 800a06a:	4603      	mov	r3, r0
 800a06c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a06e:	e003      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	75fb      	strb	r3, [r7, #23]
      break;
 800a074:	e000      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800a076:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a078:	7dfb      	ldrb	r3, [r7, #23]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d109      	bne.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a07e:	4b13      	ldr	r3, [pc, #76]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a082:	f023 0207 	bic.w	r2, r3, #7
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a08a:	4910      	ldr	r1, [pc, #64]	; (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	654b      	str	r3, [r1, #84]	; 0x54
 800a090:	e001      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0304 	and.w	r3, r3, #4
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d040      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a8:	2b05      	cmp	r3, #5
 800a0aa:	d827      	bhi.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800a0ac:	a201      	add	r2, pc, #4	; (adr r2, 800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800a0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b2:	bf00      	nop
 800a0b4:	0800a103 	.word	0x0800a103
 800a0b8:	0800a0d9 	.word	0x0800a0d9
 800a0bc:	0800a0eb 	.word	0x0800a0eb
 800a0c0:	0800a103 	.word	0x0800a103
 800a0c4:	0800a103 	.word	0x0800a103
 800a0c8:	0800a103 	.word	0x0800a103
 800a0cc:	58024400 	.word	0x58024400
 800a0d0:	58024800 	.word	0x58024800
 800a0d4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	2101      	movs	r1, #1
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f001 f8f6 	bl	800b2d0 <RCCEx_PLL2_Config>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a0e8:	e00c      	b.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	3324      	adds	r3, #36	; 0x24
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 f99f 	bl	800b434 <RCCEx_PLL3_Config>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a0fa:	e003      	b.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a100:	e000      	b.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800a102:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10a      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a10a:	4bb2      	ldr	r3, [pc, #712]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10e:	f023 0207 	bic.w	r2, r3, #7
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a118:	49ae      	ldr	r1, [pc, #696]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a11a:	4313      	orrs	r3, r2
 800a11c:	658b      	str	r3, [r1, #88]	; 0x58
 800a11e:	e001      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 0320 	and.w	r3, r3, #32
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d044      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a13a:	d01b      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800a13c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a140:	d805      	bhi.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800a142:	2b00      	cmp	r3, #0
 800a144:	d022      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800a146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a14a:	d00a      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800a14c:	e01b      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a14e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a152:	d01d      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a158:	d01c      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800a15a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a15e:	d01b      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a160:	e011      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	3304      	adds	r3, #4
 800a166:	2100      	movs	r1, #0
 800a168:	4618      	mov	r0, r3
 800a16a:	f001 f8b1 	bl	800b2d0 <RCCEx_PLL2_Config>
 800a16e:	4603      	mov	r3, r0
 800a170:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a172:	e012      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	3324      	adds	r3, #36	; 0x24
 800a178:	2102      	movs	r1, #2
 800a17a:	4618      	mov	r0, r3
 800a17c:	f001 f95a 	bl	800b434 <RCCEx_PLL3_Config>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a184:	e009      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	75fb      	strb	r3, [r7, #23]
      break;
 800a18a:	e006      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a18c:	bf00      	nop
 800a18e:	e004      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a190:	bf00      	nop
 800a192:	e002      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a194:	bf00      	nop
 800a196:	e000      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10a      	bne.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a1a0:	4b8c      	ldr	r3, [pc, #560]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ae:	4989      	ldr	r1, [pc, #548]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	654b      	str	r3, [r1, #84]	; 0x54
 800a1b4:	e001      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d044      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1d0:	d01b      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800a1d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1d6:	d805      	bhi.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d022      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a1dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1e0:	d00a      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800a1e2:	e01b      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800a1e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1e8:	d01d      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a1ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a1ee:	d01c      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800a1f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1f4:	d01b      	beq.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800a1f6:	e011      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 f866 	bl	800b2d0 <RCCEx_PLL2_Config>
 800a204:	4603      	mov	r3, r0
 800a206:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a208:	e012      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	3324      	adds	r3, #36	; 0x24
 800a20e:	2102      	movs	r1, #2
 800a210:	4618      	mov	r0, r3
 800a212:	f001 f90f 	bl	800b434 <RCCEx_PLL3_Config>
 800a216:	4603      	mov	r3, r0
 800a218:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a21a:	e009      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	75fb      	strb	r3, [r7, #23]
      break;
 800a220:	e006      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a222:	bf00      	nop
 800a224:	e004      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a226:	bf00      	nop
 800a228:	e002      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a22a:	bf00      	nop
 800a22c:	e000      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a22e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a230:	7dfb      	ldrb	r3, [r7, #23]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10a      	bne.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a236:	4b67      	ldr	r3, [pc, #412]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a23a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a244:	4963      	ldr	r1, [pc, #396]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a246:	4313      	orrs	r3, r2
 800a248:	658b      	str	r3, [r1, #88]	; 0x58
 800a24a:	e001      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
 800a24e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d044      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a266:	d01b      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800a268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a26c:	d805      	bhi.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d022      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a276:	d00a      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a278:	e01b      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800a27a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a27e:	d01d      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a280:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a284:	d01c      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800a286:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a28a:	d01b      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800a28c:	e011      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3304      	adds	r3, #4
 800a292:	2100      	movs	r1, #0
 800a294:	4618      	mov	r0, r3
 800a296:	f001 f81b 	bl	800b2d0 <RCCEx_PLL2_Config>
 800a29a:	4603      	mov	r3, r0
 800a29c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a29e:	e012      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	3324      	adds	r3, #36	; 0x24
 800a2a4:	2102      	movs	r1, #2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 f8c4 	bl	800b434 <RCCEx_PLL3_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a2b0:	e009      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b6:	e006      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a2b8:	bf00      	nop
 800a2ba:	e004      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a2bc:	bf00      	nop
 800a2be:	e002      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a2c0:	bf00      	nop
 800a2c2:	e000      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a2c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10a      	bne.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a2cc:	4b41      	ldr	r3, [pc, #260]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a2ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2da:	493e      	ldr	r1, [pc, #248]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	658b      	str	r3, [r1, #88]	; 0x58
 800a2e0:	e001      	b.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0308 	and.w	r3, r3, #8
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d01a      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2fc:	d10a      	bne.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3324      	adds	r3, #36	; 0x24
 800a302:	2102      	movs	r1, #2
 800a304:	4618      	mov	r0, r3
 800a306:	f001 f895 	bl	800b434 <RCCEx_PLL3_Config>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a314:	4b2f      	ldr	r3, [pc, #188]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a318:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a322:	492c      	ldr	r1, [pc, #176]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a324:	4313      	orrs	r3, r2
 800a326:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0310 	and.w	r3, r3, #16
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01a      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a33a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a33e:	d10a      	bne.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3324      	adds	r3, #36	; 0x24
 800a344:	2102      	movs	r1, #2
 800a346:	4618      	mov	r0, r3
 800a348:	f001 f874 	bl	800b434 <RCCEx_PLL3_Config>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a356:	4b1f      	ldr	r3, [pc, #124]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a35a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a364:	491b      	ldr	r1, [pc, #108]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a366:	4313      	orrs	r3, r2
 800a368:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d032      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a37c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a380:	d00d      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800a382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a386:	d016      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d111      	bne.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3304      	adds	r3, #4
 800a390:	2100      	movs	r1, #0
 800a392:	4618      	mov	r0, r3
 800a394:	f000 ff9c 	bl	800b2d0 <RCCEx_PLL2_Config>
 800a398:	4603      	mov	r3, r0
 800a39a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a39c:	e00c      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3324      	adds	r3, #36	; 0x24
 800a3a2:	2102      	movs	r1, #2
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f001 f845 	bl	800b434 <RCCEx_PLL3_Config>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a3ae:	e003      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3b4:	e000      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800a3b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3b8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10c      	bne.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a3be:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a3c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a3cc:	4901      	ldr	r1, [pc, #4]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	658b      	str	r3, [r1, #88]	; 0x58
 800a3d2:	e003      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800a3d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d8:	7dfb      	ldrb	r3, [r7, #23]
 800a3da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d02f      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3f2:	d00c      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a3f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a3f8:	d015      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800a3fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3fe:	d10f      	bne.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a400:	4b79      	ldr	r3, [pc, #484]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a404:	4a78      	ldr	r2, [pc, #480]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a40a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a40c:	e00c      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3324      	adds	r3, #36	; 0x24
 800a412:	2101      	movs	r1, #1
 800a414:	4618      	mov	r0, r3
 800a416:	f001 f80d 	bl	800b434 <RCCEx_PLL3_Config>
 800a41a:	4603      	mov	r3, r0
 800a41c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a41e:	e003      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	75fb      	strb	r3, [r7, #23]
      break;
 800a424:	e000      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800a426:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10a      	bne.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a42e:	4b6e      	ldr	r3, [pc, #440]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a43c:	496a      	ldr	r1, [pc, #424]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	654b      	str	r3, [r1, #84]	; 0x54
 800a442:	e001      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a444:	7dfb      	ldrb	r3, [r7, #23]
 800a446:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a450:	2b00      	cmp	r3, #0
 800a452:	d029      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d003      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800a45c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a460:	d007      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a462:	e00f      	b.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a464:	4b60      	ldr	r3, [pc, #384]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	4a5f      	ldr	r2, [pc, #380]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a46a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a46e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a470:	e00b      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3304      	adds	r3, #4
 800a476:	2102      	movs	r1, #2
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 ff29 	bl	800b2d0 <RCCEx_PLL2_Config>
 800a47e:	4603      	mov	r3, r0
 800a480:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a482:	e002      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	75fb      	strb	r3, [r7, #23]
      break;
 800a488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d109      	bne.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a490:	4b55      	ldr	r3, [pc, #340]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a49c:	4952      	ldr	r1, [pc, #328]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a4a2:	e001      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3324      	adds	r3, #36	; 0x24
 800a4b8:	2102      	movs	r1, #2
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 ffba 	bl	800b434 <RCCEx_PLL3_Config>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d02f      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4de:	d00c      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a4e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e4:	d802      	bhi.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d011      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800a4ea:	e00d      	b.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800a4ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4f0:	d00f      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800a4f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4f6:	d00e      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800a4f8:	e006      	b.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4fa:	4b3b      	ldr	r3, [pc, #236]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fe:	4a3a      	ldr	r2, [pc, #232]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a506:	e007      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	75fb      	strb	r3, [r7, #23]
      break;
 800a50c:	e004      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a50e:	bf00      	nop
 800a510:	e002      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a512:	bf00      	nop
 800a514:	e000      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a516:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d109      	bne.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a51e:	4b32      	ldr	r3, [pc, #200]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a52a:	492f      	ldr	r1, [pc, #188]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a52c:	4313      	orrs	r3, r2
 800a52e:	654b      	str	r3, [r1, #84]	; 0x54
 800a530:	e001      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a532:	7dfb      	ldrb	r3, [r7, #23]
 800a534:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d008      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a542:	4b29      	ldr	r3, [pc, #164]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a546:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a54e:	4926      	ldr	r1, [pc, #152]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a550:	4313      	orrs	r3, r2
 800a552:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d009      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a560:	4b21      	ldr	r3, [pc, #132]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a56e:	491e      	ldr	r1, [pc, #120]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a570:	4313      	orrs	r3, r2
 800a572:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d008      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a580:	4b19      	ldr	r3, [pc, #100]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a58c:	4916      	ldr	r1, [pc, #88]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00d      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a59e:	4b12      	ldr	r3, [pc, #72]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	4a11      	ldr	r2, [pc, #68]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a5a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a5a8:	6113      	str	r3, [r2, #16]
 800a5aa:	4b0f      	ldr	r3, [pc, #60]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a5ac:	691a      	ldr	r2, [r3, #16]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a5b4:	490c      	ldr	r1, [pc, #48]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	da08      	bge.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a5c2:	4b09      	ldr	r3, [pc, #36]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ce:	4906      	ldr	r1, [pc, #24]	; (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800a5d4:	7dbb      	ldrb	r3, [r7, #22]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e000      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3718      	adds	r7, #24
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	58024400 	.word	0x58024400

0800a5ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b090      	sub	sp, #64	; 0x40
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5fa:	d150      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a5fc:	4ba1      	ldr	r3, [pc, #644]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a5fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a600:	f003 0307 	and.w	r3, r3, #7
 800a604:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d844      	bhi.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a60c:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a612:	bf00      	nop
 800a614:	0800a629 	.word	0x0800a629
 800a618:	0800a639 	.word	0x0800a639
 800a61c:	0800a649 	.word	0x0800a649
 800a620:	0800a691 	.word	0x0800a691
 800a624:	0800a659 	.word	0x0800a659
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fd03 	bl	800b038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a636:	e241      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a638:	f107 0318 	add.w	r3, r7, #24
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 fa63 	bl	800ab08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a646:	e239      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a648:	f107 030c 	add.w	r3, r7, #12
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 fba7 	bl	800ada0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a656:	e231      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a658:	4b8a      	ldr	r3, [pc, #552]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a65a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a65c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a660:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a664:	2b00      	cmp	r3, #0
 800a666:	d102      	bne.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a668:	4b87      	ldr	r3, [pc, #540]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a66a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a66c:	e226      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a674:	d102      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800a676:	4b85      	ldr	r3, [pc, #532]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a67a:	e21f      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a682:	d102      	bne.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800a684:	4b82      	ldr	r3, [pc, #520]	; (800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a688:	e218      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a68e:	e215      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a690:	4b80      	ldr	r3, [pc, #512]	; (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a694:	e212      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a69a:	bf00      	nop
 800a69c:	e20e      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6a4:	d14f      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a6a6:	4b77      	ldr	r3, [pc, #476]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6aa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a6ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	2b80      	cmp	r3, #128	; 0x80
 800a6b4:	d01c      	beq.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a6b6:	2b80      	cmp	r3, #128	; 0x80
 800a6b8:	d804      	bhi.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d008      	beq.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a6be:	2b40      	cmp	r3, #64	; 0x40
 800a6c0:	d00e      	beq.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a6c2:	e03c      	b.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a6c4:	2bc0      	cmp	r3, #192	; 0xc0
 800a6c6:	d037      	beq.n	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a6c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6cc:	d018      	beq.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800a6ce:	e036      	b.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 fcaf 	bl	800b038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6de:	e1ed      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e0:	f107 0318 	add.w	r3, r7, #24
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 fa0f 	bl	800ab08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6ee:	e1e5      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6f0:	f107 030c 	add.w	r3, r7, #12
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 fb53 	bl	800ada0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6fe:	e1dd      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a700:	4b60      	ldr	r3, [pc, #384]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a704:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a708:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d102      	bne.n	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a710:	4b5d      	ldr	r3, [pc, #372]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a712:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a714:	e1d2      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a718:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a71c:	d102      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800a71e:	4b5b      	ldr	r3, [pc, #364]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a722:	e1cb      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a72a:	d102      	bne.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800a72c:	4b58      	ldr	r3, [pc, #352]	; (800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a730:	e1c4      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a736:	e1c1      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a738:	4b56      	ldr	r3, [pc, #344]	; (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a73a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a73c:	e1be      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a742:	bf00      	nop
 800a744:	e1ba      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a74c:	d153      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a74e:	4b4d      	ldr	r3, [pc, #308]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a752:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a756:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a75e:	d01f      	beq.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a764:	d805      	bhi.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00a      	beq.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a76a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a76e:	d00f      	beq.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800a770:	e03d      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800a772:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a776:	d037      	beq.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a77c:	d018      	beq.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800a77e:	e036      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a784:	4618      	mov	r0, r3
 800a786:	f000 fc57 	bl	800b038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a78e:	e195      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a790:	f107 0318 	add.w	r3, r7, #24
 800a794:	4618      	mov	r0, r3
 800a796:	f000 f9b7 	bl	800ab08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a79e:	e18d      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7a0:	f107 030c 	add.w	r3, r7, #12
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 fafb 	bl	800ada0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ae:	e185      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7b0:	4b34      	ldr	r3, [pc, #208]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a7b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d102      	bne.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a7c0:	4b31      	ldr	r3, [pc, #196]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a7c4:	e17a      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7cc:	d102      	bne.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800a7ce:	4b2f      	ldr	r3, [pc, #188]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7d2:	e173      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7da:	d102      	bne.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800a7dc:	4b2c      	ldr	r3, [pc, #176]	; (800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7e0:	e16c      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7e6:	e169      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7e8:	4b2a      	ldr	r3, [pc, #168]	; (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ec:	e166      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7f2:	bf00      	nop
 800a7f4:	e162      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7fc:	d15d      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a7fe:	4b21      	ldr	r3, [pc, #132]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a802:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a806:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a80e:	d01f      	beq.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a814:	d805      	bhi.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a81a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a81e:	d00f      	beq.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800a820:	e047      	b.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800a822:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a826:	d041      	beq.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800a828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a82c:	d018      	beq.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800a82e:	e040      	b.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a834:	4618      	mov	r0, r3
 800a836:	f000 fbff 	bl	800b038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a83e:	e13d      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a840:	f107 0318 	add.w	r3, r7, #24
 800a844:	4618      	mov	r0, r3
 800a846:	f000 f95f 	bl	800ab08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a84e:	e135      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a850:	f107 030c 	add.w	r3, r7, #12
 800a854:	4618      	mov	r0, r3
 800a856:	f000 faa3 	bl	800ada0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a85e:	e12d      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a860:	4b08      	ldr	r3, [pc, #32]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a864:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a868:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d102      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a870:	4b05      	ldr	r3, [pc, #20]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a872:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a874:	e122      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a87c:	d10c      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800a87e:	4b03      	ldr	r3, [pc, #12]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a882:	e11b      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a884:	58024400 	.word	0x58024400
 800a888:	03d09000 	.word	0x03d09000
 800a88c:	003d0900 	.word	0x003d0900
 800a890:	017d7840 	.word	0x017d7840
 800a894:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a89e:	d102      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800a8a0:	4b89      	ldr	r3, [pc, #548]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a4:	e10a      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8aa:	e107      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8ac:	4b87      	ldr	r3, [pc, #540]	; (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b0:	e104      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b6:	bf00      	nop
 800a8b8:	e100      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8c0:	d153      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a8c2:	4b83      	ldr	r3, [pc, #524]	; (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a8c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a8ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8d2:	d01f      	beq.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a8d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8d8:	d805      	bhi.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00a      	beq.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800a8de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8e2:	d00f      	beq.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800a8e4:	e03d      	b.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800a8e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8ea:	d037      	beq.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a8ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8f0:	d018      	beq.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a8f2:	e036      	b.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 fb9d 	bl	800b038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a902:	e0db      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a904:	f107 0318 	add.w	r3, r7, #24
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 f8fd 	bl	800ab08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a912:	e0d3      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a914:	f107 030c 	add.w	r3, r7, #12
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 fa41 	bl	800ada0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a922:	e0cb      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a924:	4b6a      	ldr	r3, [pc, #424]	; (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a92c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a930:	2b00      	cmp	r3, #0
 800a932:	d102      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a934:	4b67      	ldr	r3, [pc, #412]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a936:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a938:	e0c0      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a940:	d102      	bne.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800a942:	4b65      	ldr	r3, [pc, #404]	; (800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a944:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a946:	e0b9      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a94e:	d102      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800a950:	4b5d      	ldr	r3, [pc, #372]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a954:	e0b2      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a95a:	e0af      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a95c:	4b5b      	ldr	r3, [pc, #364]	; (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a95e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a960:	e0ac      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a966:	bf00      	nop
 800a968:	e0a8      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a970:	d13d      	bne.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a972:	4b57      	ldr	r3, [pc, #348]	; (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a976:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a97a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a982:	d00c      	beq.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a988:	d011      	beq.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d12b      	bne.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a98e:	f107 0318 	add.w	r3, r7, #24
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f8b8 	bl	800ab08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a99c:	e08e      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a99e:	f107 030c 	add.w	r3, r7, #12
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 f9fc 	bl	800ada0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ac:	e086      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9ae:	4b48      	ldr	r3, [pc, #288]	; (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a9b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9b6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d102      	bne.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a9be:	4b45      	ldr	r3, [pc, #276]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a9c2:	e07b      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9ca:	d102      	bne.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800a9cc:	4b42      	ldr	r3, [pc, #264]	; (800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9d0:	e074      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9d8:	d102      	bne.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800a9da:	4b3b      	ldr	r3, [pc, #236]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9de:	e06d      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9e4:	e06a      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ea:	bf00      	nop
 800a9ec:	e066      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f4:	d11f      	bne.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a9f6:	4b36      	ldr	r3, [pc, #216]	; (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a9f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d003      	beq.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800aa06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa0a:	d008      	beq.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800aa0c:	e00f      	b.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 fb10 	bl	800b038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa1c:	e04e      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa1e:	f107 0318 	add.w	r3, r7, #24
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 f870 	bl	800ab08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa2c:	e046      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa32:	bf00      	nop
 800aa34:	e042      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa3c:	d13c      	bne.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800aa3e:	4b24      	ldr	r3, [pc, #144]	; (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800aa40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa42:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800aa46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa4e:	d01e      	beq.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800aa50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa54:	d805      	bhi.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00d      	beq.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800aa5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa5e:	d00e      	beq.n	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800aa60:	e026      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800aa62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa66:	d01d      	beq.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800aa68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa6c:	d01d      	beq.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800aa6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa72:	d014      	beq.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800aa74:	e01c      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa76:	f000 f831 	bl	800aadc <HAL_RCCEx_GetD3PCLK1Freq>
 800aa7a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800aa7c:	e01e      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa7e:	f107 0318 	add.w	r3, r7, #24
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 f840 	bl	800ab08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa8c:	e016      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa8e:	f107 030c 	add.w	r3, r7, #12
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 f984 	bl	800ada0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa9c:	e00e      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800aa9e:	4b0d      	ldr	r3, [pc, #52]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800aaa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa2:	e00b      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800aaa4:	4b0c      	ldr	r3, [pc, #48]	; (800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800aaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa8:	e008      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800aaaa:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800aaac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaae:	e005      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aab4:	bf00      	nop
 800aab6:	e001      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aabc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3740      	adds	r7, #64	; 0x40
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	017d7840 	.word	0x017d7840
 800aacc:	00bb8000 	.word	0x00bb8000
 800aad0:	58024400 	.word	0x58024400
 800aad4:	03d09000 	.word	0x03d09000
 800aad8:	003d0900 	.word	0x003d0900

0800aadc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aae0:	f7fe fe1e 	bl	8009720 <HAL_RCC_GetHCLKFreq>
 800aae4:	4601      	mov	r1, r0
 800aae6:	4b06      	ldr	r3, [pc, #24]	; (800ab00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	091b      	lsrs	r3, r3, #4
 800aaec:	f003 0307 	and.w	r3, r3, #7
 800aaf0:	4a04      	ldr	r2, [pc, #16]	; (800ab04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aaf2:	5cd3      	ldrb	r3, [r2, r3]
 800aaf4:	f003 031f 	and.w	r3, r3, #31
 800aaf8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	58024400 	.word	0x58024400
 800ab04:	0801a01c 	.word	0x0801a01c

0800ab08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b089      	sub	sp, #36	; 0x24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab10:	4b9d      	ldr	r3, [pc, #628]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab14:	f003 0303 	and.w	r3, r3, #3
 800ab18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ab1a:	4b9b      	ldr	r3, [pc, #620]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1e:	0b1b      	lsrs	r3, r3, #12
 800ab20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab26:	4b98      	ldr	r3, [pc, #608]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2a:	091b      	lsrs	r3, r3, #4
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ab32:	4b95      	ldr	r3, [pc, #596]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab36:	08db      	lsrs	r3, r3, #3
 800ab38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	fb02 f303 	mul.w	r3, r2, r3
 800ab42:	ee07 3a90 	vmov	s15, r3
 800ab46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f000 810a 	beq.w	800ad6a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d05a      	beq.n	800ac12 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d302      	bcc.n	800ab66 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d078      	beq.n	800ac56 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800ab64:	e099      	b.n	800ac9a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab66:	4b88      	ldr	r3, [pc, #544]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 0320 	and.w	r3, r3, #32
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d02d      	beq.n	800abce <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab72:	4b85      	ldr	r3, [pc, #532]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	08db      	lsrs	r3, r3, #3
 800ab78:	f003 0303 	and.w	r3, r3, #3
 800ab7c:	4a83      	ldr	r2, [pc, #524]	; (800ad8c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800ab7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab82:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	ee07 3a90 	vmov	s15, r3
 800ab94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab9c:	4b7a      	ldr	r3, [pc, #488]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba4:	ee07 3a90 	vmov	s15, r3
 800aba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abac:	ed97 6a03 	vldr	s12, [r7, #12]
 800abb0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800abb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800abcc:	e087      	b.n	800acde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	ee07 3a90 	vmov	s15, r3
 800abd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ad94 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800abdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe0:	4b69      	ldr	r3, [pc, #420]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800abe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe8:	ee07 3a90 	vmov	s15, r3
 800abec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800abf4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800abf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac10:	e065      	b.n	800acde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	ee07 3a90 	vmov	s15, r3
 800ac18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ad98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800ac20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac24:	4b58      	ldr	r3, [pc, #352]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ac26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac2c:	ee07 3a90 	vmov	s15, r3
 800ac30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac34:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac38:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ac3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac54:	e043      	b.n	800acde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	ee07 3a90 	vmov	s15, r3
 800ac5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac60:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ad9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800ac64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac68:	4b47      	ldr	r3, [pc, #284]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ac6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac70:	ee07 3a90 	vmov	s15, r3
 800ac74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac78:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac7c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ac80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac98:	e021      	b.n	800acde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	ee07 3a90 	vmov	s15, r3
 800aca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800ad98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800aca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acac:	4b36      	ldr	r3, [pc, #216]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb4:	ee07 3a90 	vmov	s15, r3
 800acb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acbc:	ed97 6a03 	vldr	s12, [r7, #12]
 800acc0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800acc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800accc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acdc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800acde:	4b2a      	ldr	r3, [pc, #168]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ace0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace2:	0a5b      	lsrs	r3, r3, #9
 800ace4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace8:	ee07 3a90 	vmov	s15, r3
 800acec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800acfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad04:	ee17 2a90 	vmov	r2, s15
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad0c:	4b1e      	ldr	r3, [pc, #120]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad10:	0c1b      	lsrs	r3, r3, #16
 800ad12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad26:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad32:	ee17 2a90 	vmov	r2, s15
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ad3a:	4b13      	ldr	r3, [pc, #76]	; (800ad88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ad3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3e:	0e1b      	lsrs	r3, r3, #24
 800ad40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad44:	ee07 3a90 	vmov	s15, r3
 800ad48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad60:	ee17 2a90 	vmov	r2, s15
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad68:	e008      	b.n	800ad7c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	609a      	str	r2, [r3, #8]
}
 800ad7c:	bf00      	nop
 800ad7e:	3724      	adds	r7, #36	; 0x24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	58024400 	.word	0x58024400
 800ad8c:	03d09000 	.word	0x03d09000
 800ad90:	46000000 	.word	0x46000000
 800ad94:	4c742400 	.word	0x4c742400
 800ad98:	4a742400 	.word	0x4a742400
 800ad9c:	4bbebc20 	.word	0x4bbebc20

0800ada0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b089      	sub	sp, #36	; 0x24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ada8:	4b9d      	ldr	r3, [pc, #628]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adac:	f003 0303 	and.w	r3, r3, #3
 800adb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800adb2:	4b9b      	ldr	r3, [pc, #620]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb6:	0d1b      	lsrs	r3, r3, #20
 800adb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800adbe:	4b98      	ldr	r3, [pc, #608]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc2:	0a1b      	lsrs	r3, r3, #8
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800adca:	4b95      	ldr	r3, [pc, #596]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adce:	08db      	lsrs	r3, r3, #3
 800add0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	fb02 f303 	mul.w	r3, r2, r3
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f000 810a 	beq.w	800b002 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d05a      	beq.n	800aeaa <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d302      	bcc.n	800adfe <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d078      	beq.n	800aeee <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800adfc:	e099      	b.n	800af32 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adfe:	4b88      	ldr	r3, [pc, #544]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 0320 	and.w	r3, r3, #32
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d02d      	beq.n	800ae66 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae0a:	4b85      	ldr	r3, [pc, #532]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	08db      	lsrs	r3, r3, #3
 800ae10:	f003 0303 	and.w	r3, r3, #3
 800ae14:	4a83      	ldr	r2, [pc, #524]	; (800b024 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800ae16:	fa22 f303 	lsr.w	r3, r2, r3
 800ae1a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	ee07 3a90 	vmov	s15, r3
 800ae2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae34:	4b7a      	ldr	r3, [pc, #488]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae3c:	ee07 3a90 	vmov	s15, r3
 800ae40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae44:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae48:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ae4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae60:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae64:	e087      	b.n	800af76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	ee07 3a90 	vmov	s15, r3
 800ae6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae70:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b02c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800ae74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae78:	4b69      	ldr	r3, [pc, #420]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae80:	ee07 3a90 	vmov	s15, r3
 800ae84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae88:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae8c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ae90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aea8:	e065      	b.n	800af76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	ee07 3a90 	vmov	s15, r3
 800aeb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800aeb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aebc:	4b58      	ldr	r3, [pc, #352]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec4:	ee07 3a90 	vmov	s15, r3
 800aec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aecc:	ed97 6a03 	vldr	s12, [r7, #12]
 800aed0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800aed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aedc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aeec:	e043      	b.n	800af76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	ee07 3a90 	vmov	s15, r3
 800aef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b034 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800aefc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af00:	4b47      	ldr	r3, [pc, #284]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800af02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af08:	ee07 3a90 	vmov	s15, r3
 800af0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af10:	ed97 6a03 	vldr	s12, [r7, #12]
 800af14:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800af18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af30:	e021      	b.n	800af76 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	ee07 3a90 	vmov	s15, r3
 800af38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800b030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800af40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af44:	4b36      	ldr	r3, [pc, #216]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800af46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af4c:	ee07 3a90 	vmov	s15, r3
 800af50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af54:	ed97 6a03 	vldr	s12, [r7, #12]
 800af58:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800af5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af74:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800af76:	4b2a      	ldr	r3, [pc, #168]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800af78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7a:	0a5b      	lsrs	r3, r3, #9
 800af7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af80:	ee07 3a90 	vmov	s15, r3
 800af84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af90:	edd7 6a07 	vldr	s13, [r7, #28]
 800af94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af9c:	ee17 2a90 	vmov	r2, s15
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800afa4:	4b1e      	ldr	r3, [pc, #120]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800afa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa8:	0c1b      	lsrs	r3, r3, #16
 800afaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800afc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afca:	ee17 2a90 	vmov	r2, s15
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800afd2:	4b13      	ldr	r3, [pc, #76]	; (800b020 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800afd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd6:	0e1b      	lsrs	r3, r3, #24
 800afd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afdc:	ee07 3a90 	vmov	s15, r3
 800afe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afec:	edd7 6a07 	vldr	s13, [r7, #28]
 800aff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff8:	ee17 2a90 	vmov	r2, s15
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b000:	e008      	b.n	800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	609a      	str	r2, [r3, #8]
}
 800b014:	bf00      	nop
 800b016:	3724      	adds	r7, #36	; 0x24
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	58024400 	.word	0x58024400
 800b024:	03d09000 	.word	0x03d09000
 800b028:	46000000 	.word	0x46000000
 800b02c:	4c742400 	.word	0x4c742400
 800b030:	4a742400 	.word	0x4a742400
 800b034:	4bbebc20 	.word	0x4bbebc20

0800b038 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b038:	b480      	push	{r7}
 800b03a:	b089      	sub	sp, #36	; 0x24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b040:	4b9d      	ldr	r3, [pc, #628]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b044:	f003 0303 	and.w	r3, r3, #3
 800b048:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b04a:	4b9b      	ldr	r3, [pc, #620]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04e:	091b      	lsrs	r3, r3, #4
 800b050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b054:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b056:	4b98      	ldr	r3, [pc, #608]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b060:	4b95      	ldr	r3, [pc, #596]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b064:	08db      	lsrs	r3, r3, #3
 800b066:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	fb02 f303 	mul.w	r3, r2, r3
 800b070:	ee07 3a90 	vmov	s15, r3
 800b074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b078:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 810a 	beq.w	800b298 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d05a      	beq.n	800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d302      	bcc.n	800b094 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d078      	beq.n	800b184 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800b092:	e099      	b.n	800b1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b094:	4b88      	ldr	r3, [pc, #544]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 0320 	and.w	r3, r3, #32
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d02d      	beq.n	800b0fc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0a0:	4b85      	ldr	r3, [pc, #532]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	08db      	lsrs	r3, r3, #3
 800b0a6:	f003 0303 	and.w	r3, r3, #3
 800b0aa:	4a84      	ldr	r2, [pc, #528]	; (800b2bc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800b0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	ee07 3a90 	vmov	s15, r3
 800b0b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	ee07 3a90 	vmov	s15, r3
 800b0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ca:	4b7b      	ldr	r3, [pc, #492]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d2:	ee07 3a90 	vmov	s15, r3
 800b0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b0fa:	e087      	b.n	800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	ee07 3a90 	vmov	s15, r3
 800b102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b106:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800b10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b10e:	4b6a      	ldr	r3, [pc, #424]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b122:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b13e:	e065      	b.n	800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b2c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800b14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b152:	4b59      	ldr	r3, [pc, #356]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b162:	ed97 6a03 	vldr	s12, [r7, #12]
 800b166:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b17e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b182:	e043      	b.n	800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	ee07 3a90 	vmov	s15, r3
 800b18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b2cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b196:	4b48      	ldr	r3, [pc, #288]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1c6:	e021      	b.n	800b20c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	ee07 3a90 	vmov	s15, r3
 800b1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b2c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800b1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1da:	4b37      	ldr	r3, [pc, #220]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e2:	ee07 3a90 	vmov	s15, r3
 800b1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b20a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b20c:	4b2a      	ldr	r3, [pc, #168]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b210:	0a5b      	lsrs	r3, r3, #9
 800b212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b216:	ee07 3a90 	vmov	s15, r3
 800b21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b222:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b226:	edd7 6a07 	vldr	s13, [r7, #28]
 800b22a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b22e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b232:	ee17 2a90 	vmov	r2, s15
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b23a:	4b1f      	ldr	r3, [pc, #124]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23e:	0c1b      	lsrs	r3, r3, #16
 800b240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b244:	ee07 3a90 	vmov	s15, r3
 800b248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b250:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b254:	edd7 6a07 	vldr	s13, [r7, #28]
 800b258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b25c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b260:	ee17 2a90 	vmov	r2, s15
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b268:	4b13      	ldr	r3, [pc, #76]	; (800b2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26c:	0e1b      	lsrs	r3, r3, #24
 800b26e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b272:	ee07 3a90 	vmov	s15, r3
 800b276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b27a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b27e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b282:	edd7 6a07 	vldr	s13, [r7, #28]
 800b286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b28a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b28e:	ee17 2a90 	vmov	r2, s15
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b296:	e008      	b.n	800b2aa <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	609a      	str	r2, [r3, #8]
}
 800b2aa:	bf00      	nop
 800b2ac:	3724      	adds	r7, #36	; 0x24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	58024400 	.word	0x58024400
 800b2bc:	03d09000 	.word	0x03d09000
 800b2c0:	46000000 	.word	0x46000000
 800b2c4:	4c742400 	.word	0x4c742400
 800b2c8:	4a742400 	.word	0x4a742400
 800b2cc:	4bbebc20 	.word	0x4bbebc20

0800b2d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2de:	4b53      	ldr	r3, [pc, #332]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e2:	f003 0303 	and.w	r3, r3, #3
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d101      	bne.n	800b2ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e099      	b.n	800b422 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b2ee:	4b4f      	ldr	r3, [pc, #316]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a4e      	ldr	r2, [pc, #312]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b2f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b2f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2fa:	f7f8 fa01 	bl	8003700 <HAL_GetTick>
 800b2fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b300:	e008      	b.n	800b314 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b302:	f7f8 f9fd 	bl	8003700 <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d901      	bls.n	800b314 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b310:	2303      	movs	r3, #3
 800b312:	e086      	b.n	800b422 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b314:	4b45      	ldr	r3, [pc, #276]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1f0      	bne.n	800b302 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b320:	4b42      	ldr	r3, [pc, #264]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b324:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	031b      	lsls	r3, r3, #12
 800b32e:	493f      	ldr	r1, [pc, #252]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b330:	4313      	orrs	r3, r2
 800b332:	628b      	str	r3, [r1, #40]	; 0x28
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	3b01      	subs	r3, #1
 800b33a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	3b01      	subs	r3, #1
 800b344:	025b      	lsls	r3, r3, #9
 800b346:	b29b      	uxth	r3, r3
 800b348:	431a      	orrs	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	3b01      	subs	r3, #1
 800b350:	041b      	lsls	r3, r3, #16
 800b352:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b356:	431a      	orrs	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	061b      	lsls	r3, r3, #24
 800b360:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b364:	4931      	ldr	r1, [pc, #196]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b366:	4313      	orrs	r3, r2
 800b368:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b36a:	4b30      	ldr	r3, [pc, #192]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	492d      	ldr	r1, [pc, #180]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b378:	4313      	orrs	r3, r2
 800b37a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b37c:	4b2b      	ldr	r3, [pc, #172]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b380:	f023 0220 	bic.w	r2, r3, #32
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	699b      	ldr	r3, [r3, #24]
 800b388:	4928      	ldr	r1, [pc, #160]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b38e:	4b27      	ldr	r3, [pc, #156]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b392:	4a26      	ldr	r2, [pc, #152]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b394:	f023 0310 	bic.w	r3, r3, #16
 800b398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b39a:	4b24      	ldr	r3, [pc, #144]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b39c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b39e:	4b24      	ldr	r3, [pc, #144]	; (800b430 <RCCEx_PLL2_Config+0x160>)
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	69d2      	ldr	r2, [r2, #28]
 800b3a6:	00d2      	lsls	r2, r2, #3
 800b3a8:	4920      	ldr	r1, [pc, #128]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b3ae:	4b1f      	ldr	r3, [pc, #124]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b2:	4a1e      	ldr	r2, [pc, #120]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3b4:	f043 0310 	orr.w	r3, r3, #16
 800b3b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d106      	bne.n	800b3ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b3c0:	4b1a      	ldr	r3, [pc, #104]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	4a19      	ldr	r2, [pc, #100]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3cc:	e00f      	b.n	800b3ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d106      	bne.n	800b3e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b3d4:	4b15      	ldr	r3, [pc, #84]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d8:	4a14      	ldr	r2, [pc, #80]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3e0:	e005      	b.n	800b3ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b3e2:	4b12      	ldr	r3, [pc, #72]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e6:	4a11      	ldr	r2, [pc, #68]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b3ee:	4b0f      	ldr	r3, [pc, #60]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a0e      	ldr	r2, [pc, #56]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b3f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b3f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3fa:	f7f8 f981 	bl	8003700 <HAL_GetTick>
 800b3fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b400:	e008      	b.n	800b414 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b402:	f7f8 f97d 	bl	8003700 <HAL_GetTick>
 800b406:	4602      	mov	r2, r0
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d901      	bls.n	800b414 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	e006      	b.n	800b422 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b414:	4b05      	ldr	r3, [pc, #20]	; (800b42c <RCCEx_PLL2_Config+0x15c>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0f0      	beq.n	800b402 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b420:	7bfb      	ldrb	r3, [r7, #15]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	58024400 	.word	0x58024400
 800b430:	ffff0007 	.word	0xffff0007

0800b434 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b442:	4b53      	ldr	r3, [pc, #332]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b446:	f003 0303 	and.w	r3, r3, #3
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d101      	bne.n	800b452 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e099      	b.n	800b586 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b452:	4b4f      	ldr	r3, [pc, #316]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a4e      	ldr	r2, [pc, #312]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b45c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b45e:	f7f8 f94f 	bl	8003700 <HAL_GetTick>
 800b462:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b464:	e008      	b.n	800b478 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b466:	f7f8 f94b 	bl	8003700 <HAL_GetTick>
 800b46a:	4602      	mov	r2, r0
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	2b02      	cmp	r3, #2
 800b472:	d901      	bls.n	800b478 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b474:	2303      	movs	r3, #3
 800b476:	e086      	b.n	800b586 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b478:	4b45      	ldr	r3, [pc, #276]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1f0      	bne.n	800b466 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b484:	4b42      	ldr	r3, [pc, #264]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b488:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	051b      	lsls	r3, r3, #20
 800b492:	493f      	ldr	r1, [pc, #252]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b494:	4313      	orrs	r3, r2
 800b496:	628b      	str	r3, [r1, #40]	; 0x28
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	025b      	lsls	r3, r3, #9
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	041b      	lsls	r3, r3, #16
 800b4b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	061b      	lsls	r3, r3, #24
 800b4c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b4c8:	4931      	ldr	r1, [pc, #196]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b4ce:	4b30      	ldr	r3, [pc, #192]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	492d      	ldr	r1, [pc, #180]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b4e0:	4b2b      	ldr	r3, [pc, #172]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	699b      	ldr	r3, [r3, #24]
 800b4ec:	4928      	ldr	r1, [pc, #160]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b4f2:	4b27      	ldr	r3, [pc, #156]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f6:	4a26      	ldr	r2, [pc, #152]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b4f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b4fe:	4b24      	ldr	r3, [pc, #144]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b502:	4b24      	ldr	r3, [pc, #144]	; (800b594 <RCCEx_PLL3_Config+0x160>)
 800b504:	4013      	ands	r3, r2
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	69d2      	ldr	r2, [r2, #28]
 800b50a:	00d2      	lsls	r2, r2, #3
 800b50c:	4920      	ldr	r1, [pc, #128]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b50e:	4313      	orrs	r3, r2
 800b510:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b512:	4b1f      	ldr	r3, [pc, #124]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b516:	4a1e      	ldr	r2, [pc, #120]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b51c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d106      	bne.n	800b532 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b524:	4b1a      	ldr	r3, [pc, #104]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b528:	4a19      	ldr	r2, [pc, #100]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b52a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b52e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b530:	e00f      	b.n	800b552 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d106      	bne.n	800b546 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b538:	4b15      	ldr	r3, [pc, #84]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53c:	4a14      	ldr	r2, [pc, #80]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b53e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b542:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b544:	e005      	b.n	800b552 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b546:	4b12      	ldr	r3, [pc, #72]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54a:	4a11      	ldr	r2, [pc, #68]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b54c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b550:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b552:	4b0f      	ldr	r3, [pc, #60]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a0e      	ldr	r2, [pc, #56]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b55c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b55e:	f7f8 f8cf 	bl	8003700 <HAL_GetTick>
 800b562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b564:	e008      	b.n	800b578 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b566:	f7f8 f8cb 	bl	8003700 <HAL_GetTick>
 800b56a:	4602      	mov	r2, r0
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	2b02      	cmp	r3, #2
 800b572:	d901      	bls.n	800b578 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b574:	2303      	movs	r3, #3
 800b576:	e006      	b.n	800b586 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b578:	4b05      	ldr	r3, [pc, #20]	; (800b590 <RCCEx_PLL3_Config+0x15c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b580:	2b00      	cmp	r3, #0
 800b582:	d0f0      	beq.n	800b566 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	58024400 	.word	0x58024400
 800b594:	ffff0007 	.word	0xffff0007

0800b598 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d067      	beq.n	800b67a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d106      	bne.n	800b5c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7f7 fce2 	bl	8002f88 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	22ca      	movs	r2, #202	; 0xca
 800b5d2:	625a      	str	r2, [r3, #36]	; 0x24
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2253      	movs	r2, #83	; 0x53
 800b5da:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fa49 	bl	800ba74 <RTC_EnterInitMode>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d13b      	bne.n	800b664 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6899      	ldr	r1, [r3, #8]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	4b23      	ldr	r3, [pc, #140]	; (800b684 <HAL_RTC_Init+0xec>)
 800b5f8:	400b      	ands	r3, r1
 800b5fa:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6899      	ldr	r1, [r3, #8]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	431a      	orrs	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	431a      	orrs	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	430a      	orrs	r2, r1
 800b618:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	0419      	lsls	r1, r3, #16
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	68da      	ldr	r2, [r3, #12]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	430a      	orrs	r2, r1
 800b62a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fa51 	bl	800bad4 <RTC_ExitInitMode>
 800b632:	4603      	mov	r3, r0
 800b634:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800b636:	7bfb      	ldrb	r3, [r7, #15]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d113      	bne.n	800b664 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f022 0203 	bic.w	r2, r2, #3
 800b64a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	69da      	ldr	r2, [r3, #28]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	431a      	orrs	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	430a      	orrs	r2, r1
 800b662:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	22ff      	movs	r2, #255	; 0xff
 800b66a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d103      	bne.n	800b67a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	ff8fffbf 	.word	0xff8fffbf

0800b688 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b688:	b590      	push	{r4, r7, lr}
 800b68a:	b087      	sub	sp, #28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d101      	bne.n	800b6a2 <HAL_RTC_SetTime+0x1a>
 800b69e:	2302      	movs	r3, #2
 800b6a0:	e089      	b.n	800b7b6 <HAL_RTC_SetTime+0x12e>
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	22ca      	movs	r2, #202	; 0xca
 800b6b8:	625a      	str	r2, [r3, #36]	; 0x24
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2253      	movs	r2, #83	; 0x53
 800b6c0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f000 f9d6 	bl	800ba74 <RTC_EnterInitMode>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b6cc:	7cfb      	ldrb	r3, [r7, #19]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d161      	bne.n	800b796 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d126      	bne.n	800b726 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d102      	bne.n	800b6ec <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fa2d 	bl	800bb50 <RTC_ByteToBcd2>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 fa26 	bl	800bb50 <RTC_ByteToBcd2>
 800b704:	4603      	mov	r3, r0
 800b706:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b708:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	789b      	ldrb	r3, [r3, #2]
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 fa1e 	bl	800bb50 <RTC_ByteToBcd2>
 800b714:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b716:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	78db      	ldrb	r3, [r3, #3]
 800b71e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b720:	4313      	orrs	r3, r2
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	e018      	b.n	800b758 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b730:	2b00      	cmp	r3, #0
 800b732:	d102      	bne.n	800b73a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2200      	movs	r2, #0
 800b738:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	785b      	ldrb	r3, [r3, #1]
 800b744:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b746:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b74c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	78db      	ldrb	r3, [r3, #3]
 800b752:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b754:	4313      	orrs	r3, r2
 800b756:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	6979      	ldr	r1, [r7, #20]
 800b75e:	4b18      	ldr	r3, [pc, #96]	; (800b7c0 <HAL_RTC_SetTime+0x138>)
 800b760:	400b      	ands	r3, r1
 800b762:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	689a      	ldr	r2, [r3, #8]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b772:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6899      	ldr	r1, [r3, #8]
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	68da      	ldr	r2, [r3, #12]
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	431a      	orrs	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	430a      	orrs	r2, r1
 800b78a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f000 f9a1 	bl	800bad4 <RTC_ExitInitMode>
 800b792:	4603      	mov	r3, r0
 800b794:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	22ff      	movs	r2, #255	; 0xff
 800b79c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b79e:	7cfb      	ldrb	r3, [r7, #19]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d103      	bne.n	800b7ac <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b7b4:	7cfb      	ldrb	r3, [r7, #19]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	371c      	adds	r7, #28
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd90      	pop	{r4, r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	007f7f7f 	.word	0x007f7f7f

0800b7c4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	4b22      	ldr	r3, [pc, #136]	; (800b878 <HAL_RTC_GetTime+0xb4>)
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	0c1b      	lsrs	r3, r3, #16
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7fe:	b2da      	uxtb	r2, r3
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	0a1b      	lsrs	r3, r3, #8
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b80e:	b2da      	uxtb	r2, r3
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	b2db      	uxtb	r3, r3
 800b818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	0d9b      	lsrs	r3, r3, #22
 800b826:	b2db      	uxtb	r3, r3
 800b828:	f003 0301 	and.w	r3, r3, #1
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d11a      	bne.n	800b86e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f000 f9a7 	bl	800bb90 <RTC_Bcd2ToByte>
 800b842:	4603      	mov	r3, r0
 800b844:	461a      	mov	r2, r3
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	785b      	ldrb	r3, [r3, #1]
 800b84e:	4618      	mov	r0, r3
 800b850:	f000 f99e 	bl	800bb90 <RTC_Bcd2ToByte>
 800b854:	4603      	mov	r3, r0
 800b856:	461a      	mov	r2, r3
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	789b      	ldrb	r3, [r3, #2]
 800b860:	4618      	mov	r0, r3
 800b862:	f000 f995 	bl	800bb90 <RTC_Bcd2ToByte>
 800b866:	4603      	mov	r3, r0
 800b868:	461a      	mov	r2, r3
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3718      	adds	r7, #24
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	007f7f7f 	.word	0x007f7f7f

0800b87c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b87c:	b590      	push	{r4, r7, lr}
 800b87e:	b087      	sub	sp, #28
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d101      	bne.n	800b896 <HAL_RTC_SetDate+0x1a>
 800b892:	2302      	movs	r3, #2
 800b894:	e073      	b.n	800b97e <HAL_RTC_SetDate+0x102>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2201      	movs	r2, #1
 800b89a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2202      	movs	r2, #2
 800b8a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10e      	bne.n	800b8ca <HAL_RTC_SetDate+0x4e>
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	785b      	ldrb	r3, [r3, #1]
 800b8b0:	f003 0310 	and.w	r3, r3, #16
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d008      	beq.n	800b8ca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	785b      	ldrb	r3, [r3, #1]
 800b8bc:	f023 0310 	bic.w	r3, r3, #16
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	330a      	adds	r3, #10
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d11c      	bne.n	800b90a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	78db      	ldrb	r3, [r3, #3]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 f93b 	bl	800bb50 <RTC_ByteToBcd2>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	785b      	ldrb	r3, [r3, #1]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 f934 	bl	800bb50 <RTC_ByteToBcd2>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b8ec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	789b      	ldrb	r3, [r3, #2]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f000 f92c 	bl	800bb50 <RTC_ByteToBcd2>
 800b8f8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b8fa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b904:	4313      	orrs	r3, r2
 800b906:	617b      	str	r3, [r7, #20]
 800b908:	e00e      	b.n	800b928 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	78db      	ldrb	r3, [r3, #3]
 800b90e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	785b      	ldrb	r3, [r3, #1]
 800b914:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b916:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b91c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b924:	4313      	orrs	r3, r2
 800b926:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	22ca      	movs	r2, #202	; 0xca
 800b92e:	625a      	str	r2, [r3, #36]	; 0x24
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2253      	movs	r2, #83	; 0x53
 800b936:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f000 f89b 	bl	800ba74 <RTC_EnterInitMode>
 800b93e:	4603      	mov	r3, r0
 800b940:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b942:	7cfb      	ldrb	r3, [r7, #19]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	6979      	ldr	r1, [r7, #20]
 800b94e:	4b0e      	ldr	r3, [pc, #56]	; (800b988 <HAL_RTC_SetDate+0x10c>)
 800b950:	400b      	ands	r3, r1
 800b952:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 f8bd 	bl	800bad4 <RTC_ExitInitMode>
 800b95a:	4603      	mov	r3, r0
 800b95c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	22ff      	movs	r2, #255	; 0xff
 800b964:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b966:	7cfb      	ldrb	r3, [r7, #19]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d103      	bne.n	800b974 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2201      	movs	r2, #1
 800b970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b97c:	7cfb      	ldrb	r3, [r7, #19]


}
 800b97e:	4618      	mov	r0, r3
 800b980:	371c      	adds	r7, #28
 800b982:	46bd      	mov	sp, r7
 800b984:	bd90      	pop	{r4, r7, pc}
 800b986:	bf00      	nop
 800b988:	00ffff3f 	.word	0x00ffff3f

0800b98c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	4b21      	ldr	r3, [pc, #132]	; (800ba24 <HAL_RTC_GetDate+0x98>)
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	0c1b      	lsrs	r3, r3, #16
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	0a1b      	lsrs	r3, r3, #8
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 031f 	and.w	r3, r3, #31
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	0b5b      	lsrs	r3, r3, #13
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	f003 0307 	and.w	r3, r3, #7
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d11a      	bne.n	800ba18 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	78db      	ldrb	r3, [r3, #3]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 f8d2 	bl	800bb90 <RTC_Bcd2ToByte>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	785b      	ldrb	r3, [r3, #1]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 f8c9 	bl	800bb90 <RTC_Bcd2ToByte>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	461a      	mov	r2, r3
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	789b      	ldrb	r3, [r3, #2]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 f8c0 	bl	800bb90 <RTC_Bcd2ToByte>
 800ba10:	4603      	mov	r3, r0
 800ba12:	461a      	mov	r2, r3
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	00ffff3f 	.word	0x00ffff3f

0800ba28 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68da      	ldr	r2, [r3, #12]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ba3e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800ba40:	f7f7 fe5e 	bl	8003700 <HAL_GetTick>
 800ba44:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ba46:	e009      	b.n	800ba5c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ba48:	f7f7 fe5a 	bl	8003700 <HAL_GetTick>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba56:	d901      	bls.n	800ba5c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e007      	b.n	800ba6c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	f003 0320 	and.w	r3, r3, #32
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d0ee      	beq.n	800ba48 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d11d      	bne.n	800baca <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f04f 32ff 	mov.w	r2, #4294967295
 800ba96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ba98:	f7f7 fe32 	bl	8003700 <HAL_GetTick>
 800ba9c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ba9e:	e00d      	b.n	800babc <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800baa0:	f7f7 fe2e 	bl	8003700 <HAL_GetTick>
 800baa4:	4602      	mov	r2, r0
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800baae:	d905      	bls.n	800babc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800bab0:	2303      	movs	r3, #3
 800bab2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2203      	movs	r2, #3
 800bab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d0ea      	beq.n	800baa0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800baca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800bae0:	4b1a      	ldr	r3, [pc, #104]	; (800bb4c <RTC_ExitInitMode+0x78>)
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	4a19      	ldr	r2, [pc, #100]	; (800bb4c <RTC_ExitInitMode+0x78>)
 800bae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baea:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800baec:	4b17      	ldr	r3, [pc, #92]	; (800bb4c <RTC_ExitInitMode+0x78>)
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f003 0320 	and.w	r3, r3, #32
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10c      	bne.n	800bb12 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7ff ff95 	bl	800ba28 <HAL_RTC_WaitForSynchro>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d01e      	beq.n	800bb42 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2203      	movs	r2, #3
 800bb08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	73fb      	strb	r3, [r7, #15]
 800bb10:	e017      	b.n	800bb42 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bb12:	4b0e      	ldr	r3, [pc, #56]	; (800bb4c <RTC_ExitInitMode+0x78>)
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	4a0d      	ldr	r2, [pc, #52]	; (800bb4c <RTC_ExitInitMode+0x78>)
 800bb18:	f023 0320 	bic.w	r3, r3, #32
 800bb1c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7ff ff82 	bl	800ba28 <HAL_RTC_WaitForSynchro>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d005      	beq.n	800bb36 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2203      	movs	r2, #3
 800bb2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bb32:	2303      	movs	r3, #3
 800bb34:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bb36:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <RTC_ExitInitMode+0x78>)
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	4a04      	ldr	r2, [pc, #16]	; (800bb4c <RTC_ExitInitMode+0x78>)
 800bb3c:	f043 0320 	orr.w	r3, r3, #32
 800bb40:	6093      	str	r3, [r2, #8]
  }

  return status;
 800bb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	58004000 	.word	0x58004000

0800bb50 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	4603      	mov	r3, r0
 800bb58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800bb5e:	79fb      	ldrb	r3, [r7, #7]
 800bb60:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800bb62:	e005      	b.n	800bb70 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3301      	adds	r3, #1
 800bb68:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800bb6a:	7afb      	ldrb	r3, [r7, #11]
 800bb6c:	3b0a      	subs	r3, #10
 800bb6e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800bb70:	7afb      	ldrb	r3, [r7, #11]
 800bb72:	2b09      	cmp	r3, #9
 800bb74:	d8f6      	bhi.n	800bb64 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	011b      	lsls	r3, r3, #4
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	7afb      	ldrb	r3, [r7, #11]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	b2db      	uxtb	r3, r3
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	4603      	mov	r3, r0
 800bb98:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800bb9a:	79fb      	ldrb	r3, [r7, #7]
 800bb9c:	091b      	lsrs	r3, r3, #4
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	0092      	lsls	r2, r2, #2
 800bba4:	4413      	add	r3, r2
 800bba6:	005b      	lsls	r3, r3, #1
 800bba8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800bbaa:	79fb      	ldrb	r3, [r7, #7]
 800bbac:	f003 030f 	and.w	r3, r3, #15
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	b2db      	uxtb	r3, r3
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3714      	adds	r7, #20
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b08a      	sub	sp, #40	; 0x28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d101      	bne.n	800bbd6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e07c      	b.n	800bcd0 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10c      	bne.n	800bbfc <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d102      	bne.n	800bbf6 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7f7 f9e0 	bl	8002fbc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2203      	movs	r2, #3
 800bc00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 f867 	bl	800bcd8 <HAL_SD_InitCard>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	e05d      	b.n	800bcd0 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bc14:	f107 0308 	add.w	r3, r7, #8
 800bc18:	4619      	mov	r1, r3
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f001 f8ce 	bl	800cdbc <HAL_SD_GetCardStatus>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d001      	beq.n	800bc2a <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e052      	b.n	800bcd0 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800bc2a:	7e3b      	ldrb	r3, [r7, #24]
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bc30:	7e7b      	ldrb	r3, [r7, #25]
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d10a      	bne.n	800bc54 <HAL_SD_Init+0x90>
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d102      	bne.n	800bc4a <HAL_SD_Init+0x86>
 800bc44:	6a3b      	ldr	r3, [r7, #32]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d004      	beq.n	800bc54 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc50:	65da      	str	r2, [r3, #92]	; 0x5c
 800bc52:	e00b      	b.n	800bc6c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d104      	bne.n	800bc66 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc62:	65da      	str	r2, [r3, #92]	; 0x5c
 800bc64:	e002      	b.n	800bc6c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f001 f984 	bl	800cf80 <HAL_SD_ConfigWideBusOperation>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e026      	b.n	800bcd0 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bc82:	f7f7 fd3d 	bl	8003700 <HAL_GetTick>
 800bc86:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bc88:	e011      	b.n	800bcae <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800bc8a:	f7f7 fd39 	bl	8003700 <HAL_GetTick>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc98:	d109      	bne.n	800bcae <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bca0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e010      	b.n	800bcd0 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f001 fa10 	bl	800d0d4 <HAL_SD_GetCardState>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d1e7      	bne.n	800bc8a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3728      	adds	r7, #40	; 0x28
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bcd8:	b5b0      	push	{r4, r5, r7, lr}
 800bcda:	b08e      	sub	sp, #56	; 0x38
 800bcdc:	af04      	add	r7, sp, #16
 800bcde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bce0:	2300      	movs	r3, #0
 800bce2:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bce4:	2300      	movs	r3, #0
 800bce6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bce8:	2300      	movs	r3, #0
 800bcea:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bcec:	2300      	movs	r3, #0
 800bcee:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bcf0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bcf4:	f7fe fc7a 	bl	800a5ec <HAL_RCCEx_GetPeriphCLKFreq>
 800bcf8:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	0a1b      	lsrs	r3, r3, #8
 800bcfe:	4a40      	ldr	r2, [pc, #256]	; (800be00 <HAL_SD_InitCard+0x128>)
 800bd00:	fba2 2303 	umull	r2, r3, r2, r3
 800bd04:	091b      	lsrs	r3, r3, #4
 800bd06:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	699b      	ldr	r3, [r3, #24]
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d107      	bne.n	800bd20 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f042 0210 	orr.w	r2, r2, #16
 800bd1e:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681d      	ldr	r5, [r3, #0]
 800bd24:	466c      	mov	r4, sp
 800bd26:	f107 0314 	add.w	r3, r7, #20
 800bd2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd32:	f107 0308 	add.w	r3, r7, #8
 800bd36:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f004 f9f5 	bl	8010128 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f004 fa38 	bl	80101b8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	005b      	lsls	r3, r3, #1
 800bd4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd52:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d008      	beq.n	800bd6c <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800bd5a:	4a2a      	ldr	r2, [pc, #168]	; (800be04 <HAL_SD_InitCard+0x12c>)
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd62:	3301      	adds	r3, #1
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7f7 fcd7 	bl	8003718 <HAL_Delay>
 800bd6a:	e002      	b.n	800bd72 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800bd6c:	2002      	movs	r0, #2
 800bd6e:	f7f7 fcd3 	bl	8003718 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f001 fa8c 	bl	800d290 <SD_PowerON>
 800bd78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd7a:	6a3b      	ldr	r3, [r7, #32]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00b      	beq.n	800bd98 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	431a      	orrs	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e02e      	b.n	800bdf6 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f001 f9bb 	bl	800d114 <SD_InitCard>
 800bd9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bda0:	6a3b      	ldr	r3, [r7, #32]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00b      	beq.n	800bdbe <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdb2:	6a3b      	ldr	r3, [r7, #32]
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e01b      	b.n	800bdf6 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f004 fa8c 	bl	80102e4 <SDMMC_CmdBlockLength>
 800bdcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00f      	beq.n	800bdf4 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a0b      	ldr	r2, [pc, #44]	; (800be08 <HAL_SD_InitCard+0x130>)
 800bdda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	431a      	orrs	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e000      	b.n	800bdf6 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3728      	adds	r7, #40	; 0x28
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bdb0      	pop	{r4, r5, r7, pc}
 800bdfe:	bf00      	nop
 800be00:	014f8b59 	.word	0x014f8b59
 800be04:	00012110 	.word	0x00012110
 800be08:	1fe00fff 	.word	0x1fe00fff

0800be0c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b092      	sub	sp, #72	; 0x48
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
 800be18:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800be1a:	f7f7 fc71 	bl	8003700 <HAL_GetTick>
 800be1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d107      	bne.n	800be3e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	e167      	b.n	800c10e <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b01      	cmp	r3, #1
 800be48:	f040 815a 	bne.w	800c100 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800be52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	441a      	add	r2, r3
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d907      	bls.n	800be70 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be64:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	e14e      	b.n	800c10e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2203      	movs	r2, #3
 800be74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2200      	movs	r2, #0
 800be7e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be84:	2b01      	cmp	r3, #1
 800be86:	d002      	beq.n	800be8e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800be88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8a:	025b      	lsls	r3, r3, #9
 800be8c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800be8e:	f04f 33ff 	mov.w	r3, #4294967295
 800be92:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	025b      	lsls	r3, r3, #9
 800be98:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800be9a:	2390      	movs	r3, #144	; 0x90
 800be9c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800be9e:	2302      	movs	r3, #2
 800bea0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bea6:	2300      	movs	r3, #0
 800bea8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f107 0214 	add.w	r2, r7, #20
 800beb2:	4611      	mov	r1, r2
 800beb4:	4618      	mov	r0, r3
 800beb6:	f004 f9e9 	bl	801028c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68da      	ldr	r2, [r3, #12]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bec8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d90a      	bls.n	800bee6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2202      	movs	r2, #2
 800bed4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bedc:	4618      	mov	r0, r3
 800bede:	f004 fa47 	bl	8010370 <SDMMC_CmdReadMultiBlock>
 800bee2:	6478      	str	r0, [r7, #68]	; 0x44
 800bee4:	e009      	b.n	800befa <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2201      	movs	r2, #1
 800beea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bef2:	4618      	mov	r0, r3
 800bef4:	f004 fa19 	bl	801032a <SDMMC_CmdReadSingleBlock>
 800bef8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800befa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800befc:	2b00      	cmp	r3, #0
 800befe:	d012      	beq.n	800bf26 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a84      	ldr	r2, [pc, #528]	; (800c118 <HAL_SD_ReadBlocks+0x30c>)
 800bf06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf0e:	431a      	orrs	r2, r3
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e0f3      	b.n	800c10e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bf2a:	e058      	b.n	800bfde <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d033      	beq.n	800bfa2 <HAL_SD_ReadBlocks+0x196>
 800bf3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf3c:	2b1f      	cmp	r3, #31
 800bf3e:	d930      	bls.n	800bfa2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800bf40:	2300      	movs	r3, #0
 800bf42:	643b      	str	r3, [r7, #64]	; 0x40
 800bf44:	e027      	b.n	800bf96 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f004 f916 	bl	801017c <SDMMC_ReadFIFO>
 800bf50:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bf5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf62:	0a1b      	lsrs	r3, r3, #8
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bf6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf72:	0c1b      	lsrs	r3, r3, #16
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf82:	0e1b      	lsrs	r3, r3, #24
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf88:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800bf90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf92:	3301      	adds	r3, #1
 800bf94:	643b      	str	r3, [r7, #64]	; 0x40
 800bf96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf98:	2b07      	cmp	r3, #7
 800bf9a:	d9d4      	bls.n	800bf46 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800bf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9e:	3b20      	subs	r3, #32
 800bfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bfa2:	f7f7 fbad 	bl	8003700 <HAL_GetTick>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d902      	bls.n	800bfb8 <HAL_SD_ReadBlocks+0x1ac>
 800bfb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d112      	bne.n	800bfde <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a56      	ldr	r2, [pc, #344]	; (800c118 <HAL_SD_ReadBlocks+0x30c>)
 800bfbe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800bfda:	2303      	movs	r3, #3
 800bfdc:	e097      	b.n	800c10e <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d09f      	beq.n	800bf2c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	68da      	ldr	r2, [r3, #12]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bffa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c006:	2b00      	cmp	r3, #0
 800c008:	d022      	beq.n	800c050 <HAL_SD_ReadBlocks+0x244>
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d91f      	bls.n	800c050 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c014:	2b03      	cmp	r3, #3
 800c016:	d01b      	beq.n	800c050 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f004 fa11 	bl	8010444 <SDMMC_CmdStopTransfer>
 800c022:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c026:	2b00      	cmp	r3, #0
 800c028:	d012      	beq.n	800c050 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a3a      	ldr	r2, [pc, #232]	; (800c118 <HAL_SD_ReadBlocks+0x30c>)
 800c030:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c038:	431a      	orrs	r2, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2201      	movs	r2, #1
 800c042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	e05e      	b.n	800c10e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c056:	f003 0308 	and.w	r3, r3, #8
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d012      	beq.n	800c084 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a2d      	ldr	r2, [pc, #180]	; (800c118 <HAL_SD_ReadBlocks+0x30c>)
 800c064:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06a:	f043 0208 	orr.w	r2, r3, #8
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2201      	movs	r2, #1
 800c076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e044      	b.n	800c10e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08a:	f003 0302 	and.w	r3, r3, #2
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d012      	beq.n	800c0b8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a20      	ldr	r2, [pc, #128]	; (800c118 <HAL_SD_ReadBlocks+0x30c>)
 800c098:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09e:	f043 0202 	orr.w	r2, r3, #2
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e02a      	b.n	800c10e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0be:	f003 0320 	and.w	r3, r3, #32
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d012      	beq.n	800c0ec <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a13      	ldr	r2, [pc, #76]	; (800c118 <HAL_SD_ReadBlocks+0x30c>)
 800c0cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d2:	f043 0220 	orr.w	r2, r3, #32
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e010      	b.n	800c10e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a0a      	ldr	r2, [pc, #40]	; (800c11c <HAL_SD_ReadBlocks+0x310>)
 800c0f2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	e006      	b.n	800c10e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c104:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
  }
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3748      	adds	r7, #72	; 0x48
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	1fe00fff 	.word	0x1fe00fff
 800c11c:	18000f3a 	.word	0x18000f3a

0800c120 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b092      	sub	sp, #72	; 0x48
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c12e:	f7f7 fae7 	bl	8003700 <HAL_GetTick>
 800c132:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d107      	bne.n	800c152 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c146:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	e16b      	b.n	800c42a <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	f040 815e 	bne.w	800c41c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	441a      	add	r2, r3
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c170:	429a      	cmp	r2, r3
 800c172:	d907      	bls.n	800c184 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c178:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e152      	b.n	800c42a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2203      	movs	r2, #3
 800c188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2200      	movs	r2, #0
 800c192:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d002      	beq.n	800c1a2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19e:	025b      	lsls	r3, r3, #9
 800c1a0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	025b      	lsls	r3, r3, #9
 800c1ac:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c1ae:	2390      	movs	r3, #144	; 0x90
 800c1b0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f107 0218 	add.w	r2, r7, #24
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f004 f85f 	bl	801028c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	68da      	ldr	r2, [r3, #12]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1dc:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d90a      	bls.n	800c1fa <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2220      	movs	r2, #32
 800c1e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f004 f903 	bl	80103fc <SDMMC_CmdWriteMultiBlock>
 800c1f6:	6478      	str	r0, [r7, #68]	; 0x44
 800c1f8:	e009      	b.n	800c20e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2210      	movs	r2, #16
 800c1fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c206:	4618      	mov	r0, r3
 800c208:	f004 f8d5 	bl	80103b6 <SDMMC_CmdWriteSingleBlock>
 800c20c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c20e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c210:	2b00      	cmp	r3, #0
 800c212:	d012      	beq.n	800c23a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a86      	ldr	r2, [pc, #536]	; (800c434 <HAL_SD_WriteBlocks+0x314>)
 800c21a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c222:	431a      	orrs	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e0f7      	b.n	800c42a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c23e:	e05c      	b.n	800c2fa <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d037      	beq.n	800c2be <HAL_SD_WriteBlocks+0x19e>
 800c24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c250:	2b1f      	cmp	r3, #31
 800c252:	d934      	bls.n	800c2be <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c254:	2300      	movs	r3, #0
 800c256:	643b      	str	r3, [r7, #64]	; 0x40
 800c258:	e02b      	b.n	800c2b2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800c25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c262:	3301      	adds	r3, #1
 800c264:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	021a      	lsls	r2, r3, #8
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	4313      	orrs	r3, r2
 800c270:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c274:	3301      	adds	r3, #1
 800c276:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	041a      	lsls	r2, r3, #16
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	4313      	orrs	r3, r2
 800c282:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c286:	3301      	adds	r3, #1
 800c288:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	061a      	lsls	r2, r3, #24
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	4313      	orrs	r3, r2
 800c294:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c298:	3301      	adds	r3, #1
 800c29a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f107 0214 	add.w	r2, r7, #20
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f003 ff75 	bl	8010196 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	643b      	str	r3, [r7, #64]	; 0x40
 800c2b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2b4:	2b07      	cmp	r3, #7
 800c2b6:	d9d0      	bls.n	800c25a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ba:	3b20      	subs	r3, #32
 800c2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c2be:	f7f7 fa1f 	bl	8003700 <HAL_GetTick>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d902      	bls.n	800c2d4 <HAL_SD_WriteBlocks+0x1b4>
 800c2ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d112      	bne.n	800c2fa <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a56      	ldr	r2, [pc, #344]	; (800c434 <HAL_SD_WriteBlocks+0x314>)
 800c2da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2e2:	431a      	orrs	r2, r3
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	e097      	b.n	800c42a <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c300:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800c304:	2b00      	cmp	r3, #0
 800c306:	d09b      	beq.n	800c240 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68da      	ldr	r2, [r3, #12]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c316:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c31e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c322:	2b00      	cmp	r3, #0
 800c324:	d022      	beq.n	800c36c <HAL_SD_WriteBlocks+0x24c>
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d91f      	bls.n	800c36c <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c330:	2b03      	cmp	r3, #3
 800c332:	d01b      	beq.n	800c36c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4618      	mov	r0, r3
 800c33a:	f004 f883 	bl	8010444 <SDMMC_CmdStopTransfer>
 800c33e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c342:	2b00      	cmp	r3, #0
 800c344:	d012      	beq.n	800c36c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a3a      	ldr	r2, [pc, #232]	; (800c434 <HAL_SD_WriteBlocks+0x314>)
 800c34c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c354:	431a      	orrs	r2, r3
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2201      	movs	r2, #1
 800c35e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	e05e      	b.n	800c42a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c372:	f003 0308 	and.w	r3, r3, #8
 800c376:	2b00      	cmp	r3, #0
 800c378:	d012      	beq.n	800c3a0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a2d      	ldr	r2, [pc, #180]	; (800c434 <HAL_SD_WriteBlocks+0x314>)
 800c380:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c386:	f043 0208 	orr.w	r2, r3, #8
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	e044      	b.n	800c42a <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3a6:	f003 0302 	and.w	r3, r3, #2
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d012      	beq.n	800c3d4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a20      	ldr	r2, [pc, #128]	; (800c434 <HAL_SD_WriteBlocks+0x314>)
 800c3b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ba:	f043 0202 	orr.w	r2, r3, #2
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e02a      	b.n	800c42a <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3da:	f003 0310 	and.w	r3, r3, #16
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d012      	beq.n	800c408 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a13      	ldr	r2, [pc, #76]	; (800c434 <HAL_SD_WriteBlocks+0x314>)
 800c3e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ee:	f043 0210 	orr.w	r2, r3, #16
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2200      	movs	r2, #0
 800c402:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	e010      	b.n	800c42a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a0a      	ldr	r2, [pc, #40]	; (800c438 <HAL_SD_WriteBlocks+0x318>)
 800c40e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	e006      	b.n	800c42a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c420:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c428:	2301      	movs	r3, #1
  }
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3748      	adds	r7, #72	; 0x48
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	1fe00fff 	.word	0x1fe00fff
 800c438:	18000f3a 	.word	0x18000f3a

0800c43c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b08c      	sub	sp, #48	; 0x30
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
 800c448:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d107      	bne.n	800c464 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c458:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	e08d      	b.n	800c580 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	f040 8086 	bne.w	800c57e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2200      	movs	r2, #0
 800c476:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	441a      	add	r2, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c482:	429a      	cmp	r2, r3
 800c484:	d907      	bls.n	800c496 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	e074      	b.n	800c580 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2203      	movs	r2, #3
 800c49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	025a      	lsls	r2, r3, #9
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d002      	beq.n	800c4c2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	025b      	lsls	r3, r3, #9
 800c4c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c4c6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	025b      	lsls	r3, r3, #9
 800c4cc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c4ce:	2390      	movs	r3, #144	; 0x90
 800c4d0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f107 0210 	add.w	r2, r7, #16
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f003 fecf 	bl	801028c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68da      	ldr	r2, [r3, #12]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4fc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2201      	movs	r2, #1
 800c50c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d90a      	bls.n	800c52a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2282      	movs	r2, #130	; 0x82
 800c518:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c520:	4618      	mov	r0, r3
 800c522:	f003 ff25 	bl	8010370 <SDMMC_CmdReadMultiBlock>
 800c526:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c528:	e009      	b.n	800c53e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2281      	movs	r2, #129	; 0x81
 800c52e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c536:	4618      	mov	r0, r3
 800c538:	f003 fef7 	bl	801032a <SDMMC_CmdReadSingleBlock>
 800c53c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c540:	2b00      	cmp	r3, #0
 800c542:	d012      	beq.n	800c56a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a0f      	ldr	r2, [pc, #60]	; (800c588 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c54a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c552:	431a      	orrs	r2, r3
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2201      	movs	r2, #1
 800c55c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2200      	movs	r2, #0
 800c564:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e00a      	b.n	800c580 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c578:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c57a:	2300      	movs	r3, #0
 800c57c:	e000      	b.n	800c580 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c57e:	2302      	movs	r3, #2
  }
}
 800c580:	4618      	mov	r0, r3
 800c582:	3730      	adds	r7, #48	; 0x30
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	1fe00fff 	.word	0x1fe00fff

0800c58c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b08c      	sub	sp, #48	; 0x30
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
 800c598:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d107      	bne.n	800c5b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e08d      	b.n	800c6d0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	f040 8086 	bne.w	800c6ce <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c5c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	441a      	add	r2, r3
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d907      	bls.n	800c5e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e074      	b.n	800c6d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2203      	movs	r2, #3
 800c5ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	68ba      	ldr	r2, [r7, #8]
 800c5fa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	025a      	lsls	r2, r3, #9
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d002      	beq.n	800c612 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60e:	025b      	lsls	r3, r3, #9
 800c610:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c612:	f04f 33ff 	mov.w	r3, #4294967295
 800c616:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	025b      	lsls	r3, r3, #9
 800c61c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c61e:	2390      	movs	r3, #144	; 0x90
 800c620:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c622:	2300      	movs	r3, #0
 800c624:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c626:	2300      	movs	r3, #0
 800c628:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c62a:	2300      	movs	r3, #0
 800c62c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f107 0210 	add.w	r2, r7, #16
 800c636:	4611      	mov	r1, r2
 800c638:	4618      	mov	r0, r3
 800c63a:	f003 fe27 	bl	801028c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	68da      	ldr	r2, [r3, #12]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c64c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2201      	movs	r2, #1
 800c65c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d90a      	bls.n	800c67a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	22a0      	movs	r2, #160	; 0xa0
 800c668:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c670:	4618      	mov	r0, r3
 800c672:	f003 fec3 	bl	80103fc <SDMMC_CmdWriteMultiBlock>
 800c676:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c678:	e009      	b.n	800c68e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2290      	movs	r2, #144	; 0x90
 800c67e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c686:	4618      	mov	r0, r3
 800c688:	f003 fe95 	bl	80103b6 <SDMMC_CmdWriteSingleBlock>
 800c68c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c690:	2b00      	cmp	r3, #0
 800c692:	d012      	beq.n	800c6ba <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a0f      	ldr	r2, [pc, #60]	; (800c6d8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c69a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e00a      	b.n	800c6d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c6c8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	e000      	b.n	800c6d0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c6ce:	2302      	movs	r3, #2
  }
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3730      	adds	r7, #48	; 0x30
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	1fe00fff 	.word	0x1fe00fff

0800c6dc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d008      	beq.n	800c70a <HAL_SD_IRQHandler+0x2e>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f003 0308 	and.w	r3, r3, #8
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d003      	beq.n	800c70a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f001 f92a 	bl	800d95c <SD_Read_IT>
 800c708:	e19a      	b.n	800ca40 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 80ac 	beq.w	800c872 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c722:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	4b9d      	ldr	r3, [pc, #628]	; (800c9a4 <HAL_SD_IRQHandler+0x2c8>)
 800c730:	400b      	ands	r3, r1
 800c732:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c742:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68da      	ldr	r2, [r3, #12]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c752:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f003 0308 	and.w	r3, r3, #8
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d038      	beq.n	800c7d0 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f003 0302 	and.w	r3, r3, #2
 800c764:	2b00      	cmp	r3, #0
 800c766:	d104      	bne.n	800c772 <HAL_SD_IRQHandler+0x96>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f003 0320 	and.w	r3, r3, #32
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d011      	beq.n	800c796 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4618      	mov	r0, r3
 800c778:	f003 fe64 	bl	8010444 <SDMMC_CmdStopTransfer>
 800c77c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d008      	beq.n	800c796 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	431a      	orrs	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 f959 	bl	800ca48 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a83      	ldr	r2, [pc, #524]	; (800c9a8 <HAL_SD_IRQHandler+0x2cc>)
 800c79c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f003 0301 	and.w	r3, r3, #1
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d104      	bne.n	800c7c0 <HAL_SD_IRQHandler+0xe4>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f003 0302 	and.w	r3, r3, #2
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d003      	beq.n	800c7c8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f005 fe55 	bl	8012470 <HAL_SD_RxCpltCallback>
 800c7c6:	e13b      	b.n	800ca40 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f005 fe47 	bl	801245c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c7ce:	e137      	b.n	800ca40 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 8132 	beq.w	800ca40 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f003 0302 	and.w	r3, r3, #2
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d104      	bne.n	800c808 <HAL_SD_IRQHandler+0x12c>
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f003 0320 	and.w	r3, r3, #32
 800c804:	2b00      	cmp	r3, #0
 800c806:	d011      	beq.n	800c82c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f003 fe19 	bl	8010444 <SDMMC_CmdStopTransfer>
 800c812:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d008      	beq.n	800c82c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	431a      	orrs	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f90e 	bl	800ca48 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f003 0310 	and.w	r3, r3, #16
 800c840:	2b00      	cmp	r3, #0
 800c842:	d104      	bne.n	800c84e <HAL_SD_IRQHandler+0x172>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f003 0320 	and.w	r3, r3, #32
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f005 fe04 	bl	801245c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f003 0301 	and.w	r3, r3, #1
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d105      	bne.n	800c86a <HAL_SD_IRQHandler+0x18e>
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f003 0302 	and.w	r3, r3, #2
 800c864:	2b00      	cmp	r3, #0
 800c866:	f000 80eb 	beq.w	800ca40 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f005 fe00 	bl	8012470 <HAL_SD_RxCpltCallback>
}
 800c870:	e0e6      	b.n	800ca40 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d008      	beq.n	800c892 <HAL_SD_IRQHandler+0x1b6>
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f003 0308 	and.w	r3, r3, #8
 800c886:	2b00      	cmp	r3, #0
 800c888:	d003      	beq.n	800c892 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f001 f8ac 	bl	800d9e8 <SD_Write_IT>
 800c890:	e0d6      	b.n	800ca40 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c898:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f000 80a2 	beq.w	800c9e6 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a8:	f003 0302 	and.w	r3, r3, #2
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d005      	beq.n	800c8bc <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b4:	f043 0202 	orr.w	r2, r3, #2
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c2:	f003 0308 	and.w	r3, r3, #8
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d005      	beq.n	800c8d6 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ce:	f043 0208 	orr.w	r2, r3, #8
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8dc:	f003 0320 	and.w	r3, r3, #32
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d005      	beq.n	800c8f0 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e8:	f043 0220 	orr.w	r2, r3, #32
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f6:	f003 0310 	and.w	r3, r3, #16
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d005      	beq.n	800c90a <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c902:	f043 0210 	orr.w	r2, r3, #16
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a26      	ldr	r2, [pc, #152]	; (800c9a8 <HAL_SD_IRQHandler+0x2cc>)
 800c910:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c920:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68da      	ldr	r2, [r3, #12]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c930:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c940:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68da      	ldr	r2, [r3, #12]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c950:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4618      	mov	r0, r3
 800c958:	f003 fd74 	bl	8010444 <SDMMC_CmdStopTransfer>
 800c95c:	4602      	mov	r2, r0
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c962:	431a      	orrs	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	68da      	ldr	r2, [r3, #12]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c976:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c980:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f003 0308 	and.w	r3, r3, #8
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d00f      	beq.n	800c9ac <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f854 	bl	800ca48 <HAL_SD_ErrorCallback>
}
 800c9a0:	e04e      	b.n	800ca40 <HAL_SD_IRQHandler+0x364>
 800c9a2:	bf00      	nop
 800c9a4:	ffff3ec5 	.word	0xffff3ec5
 800c9a8:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d044      	beq.n	800ca40 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d040      	beq.n	800ca40 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c9cc:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 f832 	bl	800ca48 <HAL_SD_ErrorCallback>
}
 800c9e4:	e02c      	b.n	800ca40 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d025      	beq.n	800ca40 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9fc:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca04:	f003 0304 	and.w	r3, r3, #4
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10c      	bne.n	800ca26 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f003 0320 	and.w	r3, r3, #32
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d003      	beq.n	800ca1e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f001 f84e 	bl	800dab8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800ca1c:	e010      	b.n	800ca40 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f001 f836 	bl	800da90 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800ca24:	e00c      	b.n	800ca40 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f003 0320 	and.w	r3, r3, #32
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d003      	beq.n	800ca38 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f001 f837 	bl	800daa4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ca36:	e003      	b.n	800ca40 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f001 f81f 	bl	800da7c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ca3e:	e7ff      	b.n	800ca40 <HAL_SD_IRQHandler+0x364>
 800ca40:	bf00      	nop
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ca50:	bf00      	nop
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	4603      	mov	r3, r0
 800ca64:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800ca66:	bf00      	nop
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
	...

0800ca74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca82:	0f9b      	lsrs	r3, r3, #30
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca8e:	0e9b      	lsrs	r3, r3, #26
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	f003 030f 	and.w	r3, r3, #15
 800ca96:	b2da      	uxtb	r2, r3
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800caa0:	0e1b      	lsrs	r3, r3, #24
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	f003 0303 	and.w	r3, r3, #3
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cab2:	0c1b      	lsrs	r3, r3, #16
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cabe:	0a1b      	lsrs	r3, r3, #8
 800cac0:	b2da      	uxtb	r2, r3
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cad4:	0d1b      	lsrs	r3, r3, #20
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cae0:	0c1b      	lsrs	r3, r3, #16
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	f003 030f 	and.w	r3, r3, #15
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caf2:	0bdb      	lsrs	r3, r3, #15
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	f003 0301 	and.w	r3, r3, #1
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb04:	0b9b      	lsrs	r3, r3, #14
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	f003 0301 	and.w	r3, r3, #1
 800cb0c:	b2da      	uxtb	r2, r3
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb16:	0b5b      	lsrs	r3, r3, #13
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	f003 0301 	and.w	r3, r3, #1
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb28:	0b1b      	lsrs	r3, r3, #12
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	f003 0301 	and.w	r3, r3, #1
 800cb30:	b2da      	uxtb	r2, r3
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d163      	bne.n	800cc0c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb48:	009a      	lsls	r2, r3, #2
 800cb4a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cb4e:	4013      	ands	r3, r2
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cb54:	0f92      	lsrs	r2, r2, #30
 800cb56:	431a      	orrs	r2, r3
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb60:	0edb      	lsrs	r3, r3, #27
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	f003 0307 	and.w	r3, r3, #7
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb72:	0e1b      	lsrs	r3, r3, #24
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	f003 0307 	and.w	r3, r3, #7
 800cb7a:	b2da      	uxtb	r2, r3
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb84:	0d5b      	lsrs	r3, r3, #21
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	f003 0307 	and.w	r3, r3, #7
 800cb8c:	b2da      	uxtb	r2, r3
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb96:	0c9b      	lsrs	r3, r3, #18
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	f003 0307 	and.w	r3, r3, #7
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cba8:	0bdb      	lsrs	r3, r3, #15
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	f003 0307 	and.w	r3, r3, #7
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	1c5a      	adds	r2, r3, #1
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	7e1b      	ldrb	r3, [r3, #24]
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	f003 0307 	and.w	r3, r3, #7
 800cbca:	3302      	adds	r3, #2
 800cbcc:	2201      	movs	r2, #1
 800cbce:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800cbd6:	fb02 f203 	mul.w	r2, r2, r3
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	7a1b      	ldrb	r3, [r3, #8]
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	f003 030f 	and.w	r3, r3, #15
 800cbe8:	2201      	movs	r2, #1
 800cbea:	409a      	lsls	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cbf8:	0a52      	lsrs	r2, r2, #9
 800cbfa:	fb02 f203 	mul.w	r2, r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc08:	659a      	str	r2, [r3, #88]	; 0x58
 800cc0a:	e031      	b.n	800cc70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d11d      	bne.n	800cc50 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc18:	041b      	lsls	r3, r3, #16
 800cc1a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc22:	0c1b      	lsrs	r3, r3, #16
 800cc24:	431a      	orrs	r2, r3
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	029a      	lsls	r2, r3, #10
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc44:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	659a      	str	r2, [r3, #88]	; 0x58
 800cc4e:	e00f      	b.n	800cc70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a58      	ldr	r2, [pc, #352]	; (800cdb8 <HAL_SD_GetCardCSD+0x344>)
 800cc56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e09d      	b.n	800cdac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc74:	0b9b      	lsrs	r3, r3, #14
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	b2da      	uxtb	r2, r3
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc86:	09db      	lsrs	r3, r3, #7
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc9e:	b2da      	uxtb	r2, r3
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca8:	0fdb      	lsrs	r3, r3, #31
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccb4:	0f5b      	lsrs	r3, r3, #29
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	f003 0303 	and.w	r3, r3, #3
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccc6:	0e9b      	lsrs	r3, r3, #26
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	f003 0307 	and.w	r3, r3, #7
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccd8:	0d9b      	lsrs	r3, r3, #22
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	f003 030f 	and.w	r3, r3, #15
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccea:	0d5b      	lsrs	r3, r3, #21
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	f003 0301 	and.w	r3, r3, #1
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd06:	0c1b      	lsrs	r3, r3, #16
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	b2da      	uxtb	r2, r3
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd1a:	0bdb      	lsrs	r3, r3, #15
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	f003 0301 	and.w	r3, r3, #1
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd2e:	0b9b      	lsrs	r3, r3, #14
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	f003 0301 	and.w	r3, r3, #1
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd42:	0b5b      	lsrs	r3, r3, #13
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	f003 0301 	and.w	r3, r3, #1
 800cd4a:	b2da      	uxtb	r2, r3
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd56:	0b1b      	lsrs	r3, r3, #12
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	f003 0301 	and.w	r3, r3, #1
 800cd5e:	b2da      	uxtb	r2, r3
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd6a:	0a9b      	lsrs	r3, r3, #10
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	f003 0303 	and.w	r3, r3, #3
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd7e:	0a1b      	lsrs	r3, r3, #8
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	f003 0303 	and.w	r3, r3, #3
 800cd86:	b2da      	uxtb	r2, r3
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd92:	085b      	lsrs	r3, r3, #1
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd9a:	b2da      	uxtb	r2, r3
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr
 800cdb8:	1fe00fff 	.word	0x1fe00fff

0800cdbc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b094      	sub	sp, #80	; 0x50
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cdcc:	f107 0308 	add.w	r3, r7, #8
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 fb64 	bl	800d4a0 <SD_SendSDStatus>
 800cdd8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800cdda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d011      	beq.n	800ce04 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a4f      	ldr	r2, [pc, #316]	; (800cf24 <HAL_SD_GetCardStatus+0x168>)
 800cde6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdee:	431a      	orrs	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ce02:	e070      	b.n	800cee6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	099b      	lsrs	r3, r3, #6
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	f003 0303 	and.w	r3, r3, #3
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	095b      	lsrs	r3, r3, #5
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	f003 0301 	and.w	r3, r3, #1
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	0a1b      	lsrs	r3, r3, #8
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	0e1b      	lsrs	r3, r3, #24
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	4313      	orrs	r3, r2
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	061a      	lsls	r2, r3, #24
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	021b      	lsls	r3, r3, #8
 800ce46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce4a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	0a1b      	lsrs	r3, r3, #8
 800ce50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ce54:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	0e1b      	lsrs	r3, r3, #24
 800ce5a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	b2da      	uxtb	r2, r3
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	0a1b      	lsrs	r3, r3, #8
 800ce6c:	b2da      	uxtb	r2, r3
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	0d1b      	lsrs	r3, r3, #20
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	f003 030f 	and.w	r3, r3, #15
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	0c1b      	lsrs	r3, r3, #16
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	4313      	orrs	r3, r2
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	0a9b      	lsrs	r3, r3, #10
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	0a1b      	lsrs	r3, r3, #8
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	f003 0303 	and.w	r3, r3, #3
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	091b      	lsrs	r3, r3, #4
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	f003 030f 	and.w	r3, r3, #15
 800cec8:	b2da      	uxtb	r2, r3
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	f003 030f 	and.w	r3, r3, #15
 800ced6:	b2da      	uxtb	r2, r3
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	0e1b      	lsrs	r3, r3, #24
 800cee0:	b2da      	uxtb	r2, r3
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ceee:	4618      	mov	r0, r3
 800cef0:	f003 f9f8 	bl	80102e4 <SDMMC_CmdBlockLength>
 800cef4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800cef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00d      	beq.n	800cf18 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a08      	ldr	r2, [pc, #32]	; (800cf24 <HAL_SD_GetCardStatus+0x168>)
 800cf02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800cf18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3750      	adds	r7, #80	; 0x50
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	1fe00fff 	.word	0x1fe00fff

0800cf28 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cf80:	b5b0      	push	{r4, r5, r7, lr}
 800cf82:	b08e      	sub	sp, #56	; 0x38
 800cf84:	af04      	add	r7, sp, #16
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2203      	movs	r2, #3
 800cf94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf9c:	2b03      	cmp	r3, #3
 800cf9e:	d02e      	beq.n	800cffe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfa6:	d106      	bne.n	800cfb6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	639a      	str	r2, [r3, #56]	; 0x38
 800cfb4:	e029      	b.n	800d00a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfbc:	d10a      	bne.n	800cfd4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fb66 	bl	800d690 <SD_WideBus_Enable>
 800cfc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfca:	6a3b      	ldr	r3, [r7, #32]
 800cfcc:	431a      	orrs	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	639a      	str	r2, [r3, #56]	; 0x38
 800cfd2:	e01a      	b.n	800d00a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d10a      	bne.n	800cff0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 fba3 	bl	800d726 <SD_WideBus_Disable>
 800cfe0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	431a      	orrs	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	639a      	str	r2, [r3, #56]	; 0x38
 800cfee:	e00c      	b.n	800d00a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	639a      	str	r2, [r3, #56]	; 0x38
 800cffc:	e005      	b.n	800d00a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d002:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d007      	beq.n	800d022 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a2e      	ldr	r2, [pc, #184]	; (800d0d0 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d018:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d01a:	2301      	movs	r3, #1
 800d01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d020:	e034      	b.n	800d08c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	691b      	ldr	r3, [r3, #16]
 800d036:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	695b      	ldr	r3, [r3, #20]
 800d03c:	2b03      	cmp	r3, #3
 800d03e:	d903      	bls.n	800d048 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	61bb      	str	r3, [r7, #24]
 800d046:	e012      	b.n	800d06e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d04c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d050:	d103      	bne.n	800d05a <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	61bb      	str	r3, [r7, #24]
 800d058:	e009      	b.n	800d06e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d05e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d062:	d102      	bne.n	800d06a <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800d064:	2302      	movs	r3, #2
 800d066:	61bb      	str	r3, [r7, #24]
 800d068:	e001      	b.n	800d06e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800d06a:	2304      	movs	r3, #4
 800d06c:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681d      	ldr	r5, [r3, #0]
 800d072:	466c      	mov	r4, sp
 800d074:	f107 0314 	add.w	r3, r7, #20
 800d078:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d07c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d080:	f107 0308 	add.w	r3, r7, #8
 800d084:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d086:	4628      	mov	r0, r5
 800d088:	f003 f84e 	bl	8010128 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d094:	4618      	mov	r0, r3
 800d096:	f003 f925 	bl	80102e4 <SDMMC_CmdBlockLength>
 800d09a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d09c:	6a3b      	ldr	r3, [r7, #32]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00c      	beq.n	800d0bc <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a0a      	ldr	r2, [pc, #40]	; (800d0d0 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d0a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0ae:	6a3b      	ldr	r3, [r7, #32]
 800d0b0:	431a      	orrs	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3728      	adds	r7, #40	; 0x28
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bdb0      	pop	{r4, r5, r7, pc}
 800d0d0:	1fe00fff 	.word	0x1fe00fff

0800d0d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b086      	sub	sp, #24
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d0e0:	f107 030c 	add.w	r3, r7, #12
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 faaa 	bl	800d640 <SD_SendStatus>
 800d0ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d005      	beq.n	800d100 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	431a      	orrs	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	0a5b      	lsrs	r3, r3, #9
 800d104:	f003 030f 	and.w	r3, r3, #15
 800d108:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d10a:	693b      	ldr	r3, [r7, #16]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3718      	adds	r7, #24
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d114:	b590      	push	{r4, r7, lr}
 800d116:	b091      	sub	sp, #68	; 0x44
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d11c:	2301      	movs	r3, #1
 800d11e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4618      	mov	r0, r3
 800d126:	f003 f858 	bl	80101da <SDMMC_GetPowerState>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d102      	bne.n	800d136 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d130:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d134:	e0a8      	b.n	800d288 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d13a:	2b03      	cmp	r3, #3
 800d13c:	d02e      	beq.n	800d19c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4618      	mov	r0, r3
 800d144:	f003 faa4 	bl	8010690 <SDMMC_CmdSendCID>
 800d148:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <SD_InitCard+0x40>
    {
      return errorstate;
 800d150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d152:	e099      	b.n	800d288 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2100      	movs	r1, #0
 800d15a:	4618      	mov	r0, r3
 800d15c:	f003 f883 	bl	8010266 <SDMMC_GetResponse>
 800d160:	4602      	mov	r2, r0
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2104      	movs	r1, #4
 800d16c:	4618      	mov	r0, r3
 800d16e:	f003 f87a 	bl	8010266 <SDMMC_GetResponse>
 800d172:	4602      	mov	r2, r0
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2108      	movs	r1, #8
 800d17e:	4618      	mov	r0, r3
 800d180:	f003 f871 	bl	8010266 <SDMMC_GetResponse>
 800d184:	4602      	mov	r2, r0
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	210c      	movs	r1, #12
 800d190:	4618      	mov	r0, r3
 800d192:	f003 f868 	bl	8010266 <SDMMC_GetResponse>
 800d196:	4602      	mov	r2, r0
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1a0:	2b03      	cmp	r3, #3
 800d1a2:	d00d      	beq.n	800d1c0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f107 020e 	add.w	r2, r7, #14
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f003 faad 	bl	801070e <SDMMC_CmdSetRelAdd>
 800d1b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d001      	beq.n	800d1c0 <SD_InitCard+0xac>
    {
      return errorstate;
 800d1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1be:	e063      	b.n	800d288 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c4:	2b03      	cmp	r3, #3
 800d1c6:	d036      	beq.n	800d236 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d1c8:	89fb      	ldrh	r3, [r7, #14]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1d8:	041b      	lsls	r3, r3, #16
 800d1da:	4619      	mov	r1, r3
 800d1dc:	4610      	mov	r0, r2
 800d1de:	f003 fa76 	bl	80106ce <SDMMC_CmdSendCSD>
 800d1e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d001      	beq.n	800d1ee <SD_InitCard+0xda>
    {
      return errorstate;
 800d1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ec:	e04c      	b.n	800d288 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f003 f836 	bl	8010266 <SDMMC_GetResponse>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2104      	movs	r1, #4
 800d206:	4618      	mov	r0, r3
 800d208:	f003 f82d 	bl	8010266 <SDMMC_GetResponse>
 800d20c:	4602      	mov	r2, r0
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2108      	movs	r1, #8
 800d218:	4618      	mov	r0, r3
 800d21a:	f003 f824 	bl	8010266 <SDMMC_GetResponse>
 800d21e:	4602      	mov	r2, r0
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	210c      	movs	r1, #12
 800d22a:	4618      	mov	r0, r3
 800d22c:	f003 f81b 	bl	8010266 <SDMMC_GetResponse>
 800d230:	4602      	mov	r2, r0
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2104      	movs	r1, #4
 800d23c:	4618      	mov	r0, r3
 800d23e:	f003 f812 	bl	8010266 <SDMMC_GetResponse>
 800d242:	4603      	mov	r3, r0
 800d244:	0d1a      	lsrs	r2, r3, #20
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d24a:	f107 0310 	add.w	r3, r7, #16
 800d24e:	4619      	mov	r1, r3
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f7ff fc0f 	bl	800ca74 <HAL_SD_GetCardCSD>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d002      	beq.n	800d262 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d25c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d260:	e012      	b.n	800d288 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6819      	ldr	r1, [r3, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d26a:	041b      	lsls	r3, r3, #16
 800d26c:	f04f 0400 	mov.w	r4, #0
 800d270:	461a      	mov	r2, r3
 800d272:	4623      	mov	r3, r4
 800d274:	4608      	mov	r0, r1
 800d276:	f003 f921 	bl	80104bc <SDMMC_CmdSelDesel>
 800d27a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d001      	beq.n	800d286 <SD_InitCard+0x172>
  {
    return errorstate;
 800d282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d284:	e000      	b.n	800d288 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d286:	2300      	movs	r3, #0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3744      	adds	r7, #68	; 0x44
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd90      	pop	{r4, r7, pc}

0800d290 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b088      	sub	sp, #32
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d298:	2300      	movs	r3, #0
 800d29a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800d29c:	2300      	movs	r3, #0
 800d29e:	61fb      	str	r3, [r7, #28]
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800d2a4:	f7f6 fa2c 	bl	8003700 <HAL_GetTick>
 800d2a8:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f003 f928 	bl	8010504 <SDMMC_CmdGoIdleState>
 800d2b4:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d001      	beq.n	800d2c0 <SD_PowerON+0x30>
  {
    return errorstate;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	e0e9      	b.n	800d494 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f003 f93b 	bl	8010540 <SDMMC_CmdOperCond>
 800d2ca:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00d      	beq.n	800d2ee <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f003 f911 	bl	8010504 <SDMMC_CmdGoIdleState>
 800d2e2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d004      	beq.n	800d2f4 <SD_PowerON+0x64>
    {
      return errorstate;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	e0d2      	b.n	800d494 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d137      	bne.n	800d36c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2100      	movs	r1, #0
 800d302:	4618      	mov	r0, r3
 800d304:	f003 f93c 	bl	8010580 <SDMMC_CmdAppCommand>
 800d308:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d02d      	beq.n	800d36c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d310:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d314:	e0be      	b.n	800d494 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2100      	movs	r1, #0
 800d31c:	4618      	mov	r0, r3
 800d31e:	f003 f92f 	bl	8010580 <SDMMC_CmdAppCommand>
 800d322:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d001      	beq.n	800d32e <SD_PowerON+0x9e>
    {
      return errorstate;
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	e0b2      	b.n	800d494 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	495a      	ldr	r1, [pc, #360]	; (800d49c <SD_PowerON+0x20c>)
 800d334:	4618      	mov	r0, r3
 800d336:	f003 f946 	bl	80105c6 <SDMMC_CmdAppOperCommand>
 800d33a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d342:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d346:	e0a5      	b.n	800d494 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2100      	movs	r1, #0
 800d34e:	4618      	mov	r0, r3
 800d350:	f002 ff89 	bl	8010266 <SDMMC_GetResponse>
 800d354:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	0fdb      	lsrs	r3, r3, #31
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d101      	bne.n	800d362 <SD_PowerON+0xd2>
 800d35e:	2301      	movs	r3, #1
 800d360:	e000      	b.n	800d364 <SD_PowerON+0xd4>
 800d362:	2300      	movs	r3, #0
 800d364:	61bb      	str	r3, [r7, #24]

    count++;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	3301      	adds	r3, #1
 800d36a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d372:	4293      	cmp	r3, r2
 800d374:	d802      	bhi.n	800d37c <SD_PowerON+0xec>
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d0cc      	beq.n	800d316 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d382:	4293      	cmp	r3, r2
 800d384:	d902      	bls.n	800d38c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d38a:	e083      	b.n	800d494 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d392:	2b00      	cmp	r3, #0
 800d394:	d07d      	beq.n	800d492 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2201      	movs	r2, #1
 800d39a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d176      	bne.n	800d492 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d071      	beq.n	800d492 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3b4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f042 0208 	orr.w	r2, r2, #8
 800d3c4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f003 fa06 	bl	80107dc <SDMMC_CmdVoltageSwitch>
 800d3d0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00c      	beq.n	800d3f2 <SD_PowerON+0x162>
        {
          return errorstate;
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	e05b      	b.n	800d494 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d3dc:	f7f6 f990 	bl	8003700 <HAL_GetTick>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ea:	d102      	bne.n	800d3f2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800d3ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3f0:	e050      	b.n	800d494 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d3fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d400:	d1ec      	bne.n	800d3dc <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d40a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d41a:	d002      	beq.n	800d422 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800d41c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d420:	e038      	b.n	800d494 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800d422:	2001      	movs	r0, #1
 800d424:	f7ff fb1a 	bl	800ca5c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f042 0204 	orr.w	r2, r2, #4
 800d436:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d438:	e00a      	b.n	800d450 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d43a:	f7f6 f961 	bl	8003700 <HAL_GetTick>
 800d43e:	4602      	mov	r2, r0
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d448:	d102      	bne.n	800d450 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800d44a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d44e:	e021      	b.n	800d494 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d45a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d45e:	d1ec      	bne.n	800d43a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d468:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d478:	d102      	bne.n	800d480 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d47a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d47e:	e009      	b.n	800d494 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2213      	movs	r2, #19
 800d486:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f04f 32ff 	mov.w	r2, #4294967295
 800d490:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3720      	adds	r7, #32
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	c1100000 	.word	0xc1100000

0800d4a0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08c      	sub	sp, #48	; 0x30
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d4aa:	f7f6 f929 	bl	8003700 <HAL_GetTick>
 800d4ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2100      	movs	r1, #0
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f002 fed3 	bl	8010266 <SDMMC_GetResponse>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d4ca:	d102      	bne.n	800d4d2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d4cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4d0:	e0b0      	b.n	800d634 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2140      	movs	r1, #64	; 0x40
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f002 ff03 	bl	80102e4 <SDMMC_CmdBlockLength>
 800d4de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4e0:	6a3b      	ldr	r3, [r7, #32]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d005      	beq.n	800d4f2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d4ee:	6a3b      	ldr	r3, [r7, #32]
 800d4f0:	e0a0      	b.n	800d634 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4fa:	041b      	lsls	r3, r3, #16
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	f003 f83e 	bl	8010580 <SDMMC_CmdAppCommand>
 800d504:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d506:	6a3b      	ldr	r3, [r7, #32]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d005      	beq.n	800d518 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d514:	6a3b      	ldr	r3, [r7, #32]
 800d516:	e08d      	b.n	800d634 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d518:	f04f 33ff 	mov.w	r3, #4294967295
 800d51c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d51e:	2340      	movs	r3, #64	; 0x40
 800d520:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d522:	2360      	movs	r3, #96	; 0x60
 800d524:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d526:	2302      	movs	r3, #2
 800d528:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d52a:	2300      	movs	r3, #0
 800d52c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d52e:	2301      	movs	r3, #1
 800d530:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f107 0208 	add.w	r2, r7, #8
 800d53a:	4611      	mov	r1, r2
 800d53c:	4618      	mov	r0, r3
 800d53e:	f002 fea5 	bl	801028c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4618      	mov	r0, r3
 800d548:	f003 f926 	bl	8010798 <SDMMC_CmdStatusRegister>
 800d54c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d54e:	6a3b      	ldr	r3, [r7, #32]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d02b      	beq.n	800d5ac <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	e069      	b.n	800d634 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d013      	beq.n	800d596 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800d56e:	2300      	movs	r3, #0
 800d570:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d572:	e00d      	b.n	800d590 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4618      	mov	r0, r3
 800d57a:	f002 fdff 	bl	801017c <SDMMC_ReadFIFO>
 800d57e:	4602      	mov	r2, r0
 800d580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d582:	601a      	str	r2, [r3, #0]
        pData++;
 800d584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d586:	3304      	adds	r3, #4
 800d588:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800d58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58c:	3301      	adds	r3, #1
 800d58e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d592:	2b07      	cmp	r3, #7
 800d594:	d9ee      	bls.n	800d574 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d596:	f7f6 f8b3 	bl	8003700 <HAL_GetTick>
 800d59a:	4602      	mov	r2, r0
 800d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59e:	1ad3      	subs	r3, r2, r3
 800d5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a4:	d102      	bne.n	800d5ac <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d5a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d5aa:	e043      	b.n	800d634 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d0d2      	beq.n	800d560 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c0:	f003 0308 	and.w	r3, r3, #8
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d001      	beq.n	800d5cc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d5c8:	2308      	movs	r3, #8
 800d5ca:	e033      	b.n	800d634 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d2:	f003 0302 	and.w	r3, r3, #2
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d001      	beq.n	800d5de <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5da:	2302      	movs	r3, #2
 800d5dc:	e02a      	b.n	800d634 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e4:	f003 0320 	and.w	r3, r3, #32
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d017      	beq.n	800d61c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d5ec:	2320      	movs	r3, #32
 800d5ee:	e021      	b.n	800d634 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f002 fdc1 	bl	801017c <SDMMC_ReadFIFO>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fe:	601a      	str	r2, [r3, #0]
    pData++;
 800d600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d602:	3304      	adds	r3, #4
 800d604:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d606:	f7f6 f87b 	bl	8003700 <HAL_GetTick>
 800d60a:	4602      	mov	r2, r0
 800d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60e:	1ad3      	subs	r3, r2, r3
 800d610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d614:	d102      	bne.n	800d61c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d616:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d61a:	e00b      	b.n	800d634 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d626:	2b00      	cmp	r3, #0
 800d628:	d1e2      	bne.n	800d5f0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4a03      	ldr	r2, [pc, #12]	; (800d63c <SD_SendSDStatus+0x19c>)
 800d630:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d632:	2300      	movs	r3, #0
}
 800d634:	4618      	mov	r0, r3
 800d636:	3730      	adds	r7, #48	; 0x30
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	18000f3a 	.word	0x18000f3a

0800d640 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d102      	bne.n	800d656 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d650:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d654:	e018      	b.n	800d688 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d65e:	041b      	lsls	r3, r3, #16
 800d660:	4619      	mov	r1, r3
 800d662:	4610      	mov	r0, r2
 800d664:	f003 f875 	bl	8010752 <SDMMC_CmdSendStatus>
 800d668:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d001      	beq.n	800d674 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	e009      	b.n	800d688 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2100      	movs	r1, #0
 800d67a:	4618      	mov	r0, r3
 800d67c:	f002 fdf3 	bl	8010266 <SDMMC_GetResponse>
 800d680:	4602      	mov	r2, r0
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d698:	2300      	movs	r3, #0
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	2300      	movs	r3, #0
 800d69e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f002 fddd 	bl	8010266 <SDMMC_GetResponse>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d6b6:	d102      	bne.n	800d6be <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d6b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d6bc:	e02f      	b.n	800d71e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d6be:	f107 030c 	add.w	r3, r7, #12
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f879 	bl	800d7bc <SD_FindSCR>
 800d6ca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	e023      	b.n	800d71e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d01c      	beq.n	800d71a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6e8:	041b      	lsls	r3, r3, #16
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	4610      	mov	r0, r2
 800d6ee:	f002 ff47 	bl	8010580 <SDMMC_CmdAppCommand>
 800d6f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	e00f      	b.n	800d71e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2102      	movs	r1, #2
 800d704:	4618      	mov	r0, r3
 800d706:	f002 ff7e 	bl	8010606 <SDMMC_CmdBusWidth>
 800d70a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d001      	beq.n	800d716 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	e003      	b.n	800d71e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d716:	2300      	movs	r3, #0
 800d718:	e001      	b.n	800d71e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d71a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3718      	adds	r7, #24
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b086      	sub	sp, #24
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d72e:	2300      	movs	r3, #0
 800d730:	60fb      	str	r3, [r7, #12]
 800d732:	2300      	movs	r3, #0
 800d734:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2100      	movs	r1, #0
 800d73c:	4618      	mov	r0, r3
 800d73e:	f002 fd92 	bl	8010266 <SDMMC_GetResponse>
 800d742:	4603      	mov	r3, r0
 800d744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d74c:	d102      	bne.n	800d754 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d74e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d752:	e02f      	b.n	800d7b4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d754:	f107 030c 	add.w	r3, r7, #12
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f82e 	bl	800d7bc <SD_FindSCR>
 800d760:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d001      	beq.n	800d76c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	e023      	b.n	800d7b4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d772:	2b00      	cmp	r3, #0
 800d774:	d01c      	beq.n	800d7b0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d77e:	041b      	lsls	r3, r3, #16
 800d780:	4619      	mov	r1, r3
 800d782:	4610      	mov	r0, r2
 800d784:	f002 fefc 	bl	8010580 <SDMMC_CmdAppCommand>
 800d788:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d001      	beq.n	800d794 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	e00f      	b.n	800d7b4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2100      	movs	r1, #0
 800d79a:	4618      	mov	r0, r3
 800d79c:	f002 ff33 	bl	8010606 <SDMMC_CmdBusWidth>
 800d7a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d001      	beq.n	800d7ac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	e003      	b.n	800d7b4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e001      	b.n	800d7b4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d7b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3718      	adds	r7, #24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b08e      	sub	sp, #56	; 0x38
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d7c6:	f7f5 ff9b 	bl	8003700 <HAL_GetTick>
 800d7ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	60bb      	str	r3, [r7, #8]
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2108      	movs	r1, #8
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f002 fd7e 	bl	80102e4 <SDMMC_CmdBlockLength>
 800d7e8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d001      	beq.n	800d7f4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	e0ad      	b.n	800d950 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7fc:	041b      	lsls	r3, r3, #16
 800d7fe:	4619      	mov	r1, r3
 800d800:	4610      	mov	r0, r2
 800d802:	f002 febd 	bl	8010580 <SDMMC_CmdAppCommand>
 800d806:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d001      	beq.n	800d812 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d810:	e09e      	b.n	800d950 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d812:	f04f 33ff 	mov.w	r3, #4294967295
 800d816:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d818:	2308      	movs	r3, #8
 800d81a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d81c:	2330      	movs	r3, #48	; 0x30
 800d81e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d820:	2302      	movs	r3, #2
 800d822:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d824:	2300      	movs	r3, #0
 800d826:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d828:	2301      	movs	r3, #1
 800d82a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f107 0210 	add.w	r2, r7, #16
 800d834:	4611      	mov	r1, r2
 800d836:	4618      	mov	r0, r3
 800d838:	f002 fd28 	bl	801028c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4618      	mov	r0, r3
 800d842:	f002 ff03 	bl	801064c <SDMMC_CmdSendSCR>
 800d846:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d027      	beq.n	800d89e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d850:	e07e      	b.n	800d950 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d113      	bne.n	800d888 <SD_FindSCR+0xcc>
 800d860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d862:	2b00      	cmp	r3, #0
 800d864:	d110      	bne.n	800d888 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f002 fc86 	bl	801017c <SDMMC_ReadFIFO>
 800d870:	4603      	mov	r3, r0
 800d872:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4618      	mov	r0, r3
 800d87a:	f002 fc7f 	bl	801017c <SDMMC_ReadFIFO>
 800d87e:	4603      	mov	r3, r0
 800d880:	60fb      	str	r3, [r7, #12]
      index++;
 800d882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d884:	3301      	adds	r3, #1
 800d886:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d888:	f7f5 ff3a 	bl	8003700 <HAL_GetTick>
 800d88c:	4602      	mov	r2, r0
 800d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d896:	d102      	bne.n	800d89e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d89c:	e058      	b.n	800d950 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8a4:	f240 532a 	movw	r3, #1322	; 0x52a
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d0d1      	beq.n	800d852 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8b4:	f003 0308 	and.w	r3, r3, #8
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d005      	beq.n	800d8c8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2208      	movs	r2, #8
 800d8c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d8c4:	2308      	movs	r3, #8
 800d8c6:	e043      	b.n	800d950 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ce:	f003 0302 	and.w	r3, r3, #2
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d005      	beq.n	800d8e2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2202      	movs	r2, #2
 800d8dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d8de:	2302      	movs	r3, #2
 800d8e0:	e036      	b.n	800d950 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8e8:	f003 0320 	and.w	r3, r3, #32
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d005      	beq.n	800d8fc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2220      	movs	r2, #32
 800d8f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d8f8:	2320      	movs	r3, #32
 800d8fa:	e029      	b.n	800d950 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a15      	ldr	r2, [pc, #84]	; (800d958 <SD_FindSCR+0x19c>)
 800d902:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	061a      	lsls	r2, r3, #24
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	021b      	lsls	r3, r3, #8
 800d90c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d910:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	0a1b      	lsrs	r3, r3, #8
 800d916:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d91a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	0e1b      	lsrs	r3, r3, #24
 800d920:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d924:	601a      	str	r2, [r3, #0]
    scr++;
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	3304      	adds	r3, #4
 800d92a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	061a      	lsls	r2, r3, #24
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	021b      	lsls	r3, r3, #8
 800d934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d938:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	0a1b      	lsrs	r3, r3, #8
 800d93e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d942:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	0e1b      	lsrs	r3, r3, #24
 800d948:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3738      	adds	r7, #56	; 0x38
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	18000f3a 	.word	0x18000f3a

0800d95c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d968:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96e:	2b1f      	cmp	r3, #31
 800d970:	d936      	bls.n	800d9e0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d972:	2300      	movs	r3, #0
 800d974:	617b      	str	r3, [r7, #20]
 800d976:	e027      	b.n	800d9c8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f002 fbfd 	bl	801017c <SDMMC_ReadFIFO>
 800d982:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	b2da      	uxtb	r2, r3
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	3301      	adds	r3, #1
 800d990:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	0a1b      	lsrs	r3, r3, #8
 800d996:	b2da      	uxtb	r2, r3
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	0c1b      	lsrs	r3, r3, #16
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	0e1b      	lsrs	r3, r3, #24
 800d9b6:	b2da      	uxtb	r2, r3
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	617b      	str	r3, [r7, #20]
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	2b07      	cmp	r3, #7
 800d9cc:	d9d4      	bls.n	800d978 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	693a      	ldr	r2, [r7, #16]
 800d9d2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d8:	f1a3 0220 	sub.w	r2, r3, #32
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d9e0:	bf00      	nop
 800d9e2:	3718      	adds	r7, #24
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b086      	sub	sp, #24
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a1b      	ldr	r3, [r3, #32]
 800d9f4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fa:	2b1f      	cmp	r3, #31
 800d9fc:	d93a      	bls.n	800da74 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d9fe:	2300      	movs	r3, #0
 800da00:	617b      	str	r3, [r7, #20]
 800da02:	e02b      	b.n	800da5c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	60fb      	str	r3, [r7, #12]
      tmp++;
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	3301      	adds	r3, #1
 800da0e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	021a      	lsls	r2, r3, #8
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	4313      	orrs	r3, r2
 800da1a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	3301      	adds	r3, #1
 800da20:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	041a      	lsls	r2, r3, #16
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	3301      	adds	r3, #1
 800da32:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	061a      	lsls	r2, r3, #24
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	4313      	orrs	r3, r2
 800da3e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	3301      	adds	r3, #1
 800da44:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f107 020c 	add.w	r2, r7, #12
 800da4e:	4611      	mov	r1, r2
 800da50:	4618      	mov	r0, r3
 800da52:	f002 fba0 	bl	8010196 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	3301      	adds	r3, #1
 800da5a:	617b      	str	r3, [r7, #20]
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	2b07      	cmp	r3, #7
 800da60:	d9d0      	bls.n	800da04 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6c:	f1a3 0220 	sub.w	r2, r3, #32
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800da74:	bf00      	nop
 800da76:	3718      	adds	r7, #24
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800da84:	bf00      	nop
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800da98:	bf00      	nop
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800daac:	bf00      	nop
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dab8:	b480      	push	{r7}
 800daba:	b083      	sub	sp, #12
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800dac0:	bf00      	nop
 800dac2:	370c      	adds	r7, #12
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr

0800dacc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800dad4:	2300      	movs	r3, #0
 800dad6:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800dade:	2301      	movs	r3, #1
 800dae0:	e0e2      	b.n	800dca8 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a70      	ldr	r2, [pc, #448]	; (800dcb0 <HAL_SPI_Init+0x1e4>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d00f      	beq.n	800db12 <HAL_SPI_Init+0x46>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a6f      	ldr	r2, [pc, #444]	; (800dcb4 <HAL_SPI_Init+0x1e8>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d00a      	beq.n	800db12 <HAL_SPI_Init+0x46>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a6d      	ldr	r2, [pc, #436]	; (800dcb8 <HAL_SPI_Init+0x1ec>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d005      	beq.n	800db12 <HAL_SPI_Init+0x46>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	2b0f      	cmp	r3, #15
 800db0c:	d901      	bls.n	800db12 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800db0e:	2301      	movs	r3, #1
 800db10:	e0ca      	b.n	800dca8 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f001 f870 	bl	800ebf8 <SPI_GetPacketSize>
 800db18:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4a64      	ldr	r2, [pc, #400]	; (800dcb0 <HAL_SPI_Init+0x1e4>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d00c      	beq.n	800db3e <HAL_SPI_Init+0x72>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a62      	ldr	r2, [pc, #392]	; (800dcb4 <HAL_SPI_Init+0x1e8>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d007      	beq.n	800db3e <HAL_SPI_Init+0x72>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4a61      	ldr	r2, [pc, #388]	; (800dcb8 <HAL_SPI_Init+0x1ec>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d002      	beq.n	800db3e <HAL_SPI_Init+0x72>
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	2b08      	cmp	r3, #8
 800db3c:	d811      	bhi.n	800db62 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db42:	4a5b      	ldr	r2, [pc, #364]	; (800dcb0 <HAL_SPI_Init+0x1e4>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d009      	beq.n	800db5c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a59      	ldr	r2, [pc, #356]	; (800dcb4 <HAL_SPI_Init+0x1e8>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d004      	beq.n	800db5c <HAL_SPI_Init+0x90>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a58      	ldr	r2, [pc, #352]	; (800dcb8 <HAL_SPI_Init+0x1ec>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d104      	bne.n	800db66 <HAL_SPI_Init+0x9a>
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	2b10      	cmp	r3, #16
 800db60:	d901      	bls.n	800db66 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800db62:	2301      	movs	r3, #1
 800db64:	e0a0      	b.n	800dca8 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d106      	bne.n	800db80 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2200      	movs	r2, #0
 800db76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7f5 fa92 	bl	80030a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2202      	movs	r2, #2
 800db84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f022 0201 	bic.w	r2, r2, #1
 800db96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	699b      	ldr	r3, [r3, #24]
 800db9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dba0:	d110      	bne.n	800dbc4 <HAL_SPI_Init+0xf8>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dbaa:	d10b      	bne.n	800dbc4 <HAL_SPI_Init+0xf8>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d107      	bne.n	800dbc4 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dbc2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	69da      	ldr	r2, [r3, #28]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbcc:	431a      	orrs	r2, r3
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	431a      	orrs	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbd6:	ea42 0103 	orr.w	r1, r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	68da      	ldr	r2, [r3, #12]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	430a      	orrs	r2, r1
 800dbe4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbee:	431a      	orrs	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf4:	431a      	orrs	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	431a      	orrs	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	691b      	ldr	r3, [r3, #16]
 800dc00:	431a      	orrs	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	695b      	ldr	r3, [r3, #20]
 800dc06:	431a      	orrs	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a1b      	ldr	r3, [r3, #32]
 800dc0c:	431a      	orrs	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	431a      	orrs	r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc18:	431a      	orrs	r2, r3
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	431a      	orrs	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc24:	ea42 0103 	orr.w	r1, r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	430a      	orrs	r2, r1
 800dc32:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d113      	bne.n	800dc64 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc4e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc62:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f022 0201 	bic.w	r2, r2, #1
 800dc72:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00a      	beq.n	800dc96 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	430a      	orrs	r2, r1
 800dc94:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2201      	movs	r2, #1
 800dca2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	40013000 	.word	0x40013000
 800dcb4:	40003800 	.word	0x40003800
 800dcb8:	40003c00 	.word	0x40003c00

0800dcbc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b08a      	sub	sp, #40	; 0x28
 800dcc0:	af02      	add	r7, sp, #8
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	603b      	str	r3, [r7, #0]
 800dcc8:	4613      	mov	r3, r2
 800dcca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3320      	adds	r3, #32
 800dcd2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d101      	bne.n	800dce6 <HAL_SPI_Transmit+0x2a>
 800dce2:	2302      	movs	r3, #2
 800dce4:	e1d7      	b.n	800e096 <HAL_SPI_Transmit+0x3da>
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2201      	movs	r2, #1
 800dcea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dcee:	f7f5 fd07 	bl	8003700 <HAL_GetTick>
 800dcf2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d007      	beq.n	800dd10 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800dd00:	2302      	movs	r3, #2
 800dd02:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dd0c:	7efb      	ldrb	r3, [r7, #27]
 800dd0e:	e1c2      	b.n	800e096 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d002      	beq.n	800dd1c <HAL_SPI_Transmit+0x60>
 800dd16:	88fb      	ldrh	r3, [r7, #6]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d107      	bne.n	800dd2c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dd28:	7efb      	ldrb	r3, [r7, #27]
 800dd2a:	e1b4      	b.n	800e096 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2203      	movs	r2, #3
 800dd30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	88fa      	ldrh	r2, [r7, #6]
 800dd46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	88fa      	ldrh	r2, [r7, #6]
 800dd4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2200      	movs	r2, #0
 800dd72:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dd7c:	d107      	bne.n	800dd8e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	685a      	ldr	r2, [r3, #4]
 800dd94:	4b96      	ldr	r3, [pc, #600]	; (800dff0 <HAL_SPI_Transmit+0x334>)
 800dd96:	4013      	ands	r3, r2
 800dd98:	88f9      	ldrh	r1, [r7, #6]
 800dd9a:	68fa      	ldr	r2, [r7, #12]
 800dd9c:	6812      	ldr	r2, [r2, #0]
 800dd9e:	430b      	orrs	r3, r1
 800dda0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f042 0201 	orr.w	r2, r2, #1
 800ddb0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddba:	d107      	bne.n	800ddcc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	2b0f      	cmp	r3, #15
 800ddd2:	d947      	bls.n	800de64 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ddd4:	e03f      	b.n	800de56 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	695b      	ldr	r3, [r3, #20]
 800dddc:	f003 0302 	and.w	r3, r3, #2
 800dde0:	2b02      	cmp	r3, #2
 800dde2:	d114      	bne.n	800de0e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	6812      	ldr	r2, [r2, #0]
 800ddee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddf4:	1d1a      	adds	r2, r3, #4
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de00:	b29b      	uxth	r3, r3
 800de02:	3b01      	subs	r3, #1
 800de04:	b29a      	uxth	r2, r3
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de0c:	e023      	b.n	800de56 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de0e:	f7f5 fc77 	bl	8003700 <HAL_GetTick>
 800de12:	4602      	mov	r2, r0
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	1ad3      	subs	r3, r2, r3
 800de18:	683a      	ldr	r2, [r7, #0]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d803      	bhi.n	800de26 <HAL_SPI_Transmit+0x16a>
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de24:	d102      	bne.n	800de2c <HAL_SPI_Transmit+0x170>
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d114      	bne.n	800de56 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	f000 fe15 	bl	800ea5c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2201      	movs	r2, #1
 800de4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800de52:	2301      	movs	r3, #1
 800de54:	e11f      	b.n	800e096 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d1b9      	bne.n	800ddd6 <HAL_SPI_Transmit+0x11a>
 800de62:	e0f2      	b.n	800e04a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	2b07      	cmp	r3, #7
 800de6a:	f240 80e7 	bls.w	800e03c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800de6e:	e05d      	b.n	800df2c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	695b      	ldr	r3, [r3, #20]
 800de76:	f003 0302 	and.w	r3, r3, #2
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d132      	bne.n	800dee4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de84:	b29b      	uxth	r3, r3
 800de86:	2b01      	cmp	r3, #1
 800de88:	d918      	bls.n	800debc <HAL_SPI_Transmit+0x200>
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d014      	beq.n	800debc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	6812      	ldr	r2, [r2, #0]
 800de9c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dea2:	1d1a      	adds	r2, r3, #4
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800deae:	b29b      	uxth	r3, r3
 800deb0:	3b02      	subs	r3, #2
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800deba:	e037      	b.n	800df2c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dec0:	881a      	ldrh	r2, [r3, #0]
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deca:	1c9a      	adds	r2, r3, #2
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	3b01      	subs	r3, #1
 800deda:	b29a      	uxth	r2, r3
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dee2:	e023      	b.n	800df2c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dee4:	f7f5 fc0c 	bl	8003700 <HAL_GetTick>
 800dee8:	4602      	mov	r2, r0
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	683a      	ldr	r2, [r7, #0]
 800def0:	429a      	cmp	r2, r3
 800def2:	d803      	bhi.n	800defc <HAL_SPI_Transmit+0x240>
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800defa:	d102      	bne.n	800df02 <HAL_SPI_Transmit+0x246>
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d114      	bne.n	800df2c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f000 fdaa 	bl	800ea5c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2200      	movs	r2, #0
 800df0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2201      	movs	r2, #1
 800df24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800df28:	2301      	movs	r3, #1
 800df2a:	e0b4      	b.n	800e096 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df32:	b29b      	uxth	r3, r3
 800df34:	2b00      	cmp	r3, #0
 800df36:	d19b      	bne.n	800de70 <HAL_SPI_Transmit+0x1b4>
 800df38:	e087      	b.n	800e04a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	695b      	ldr	r3, [r3, #20]
 800df40:	f003 0302 	and.w	r3, r3, #2
 800df44:	2b02      	cmp	r3, #2
 800df46:	d155      	bne.n	800dff4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df4e:	b29b      	uxth	r3, r3
 800df50:	2b03      	cmp	r3, #3
 800df52:	d918      	bls.n	800df86 <HAL_SPI_Transmit+0x2ca>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df58:	2b40      	cmp	r3, #64	; 0x40
 800df5a:	d914      	bls.n	800df86 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6812      	ldr	r2, [r2, #0]
 800df66:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df6c:	1d1a      	adds	r2, r3, #4
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df78:	b29b      	uxth	r3, r3
 800df7a:	3b04      	subs	r3, #4
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800df84:	e05a      	b.n	800e03c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d917      	bls.n	800dfc2 <HAL_SPI_Transmit+0x306>
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df96:	2b00      	cmp	r3, #0
 800df98:	d013      	beq.n	800dfc2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df9e:	881a      	ldrh	r2, [r3, #0]
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfa8:	1c9a      	adds	r2, r3, #2
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	3b02      	subs	r3, #2
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dfc0:	e03c      	b.n	800e03c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3320      	adds	r3, #32
 800dfcc:	7812      	ldrb	r2, [r2, #0]
 800dfce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfd4:	1c5a      	adds	r2, r3, #1
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	3b01      	subs	r3, #1
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dfec:	e026      	b.n	800e03c <HAL_SPI_Transmit+0x380>
 800dfee:	bf00      	nop
 800dff0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dff4:	f7f5 fb84 	bl	8003700 <HAL_GetTick>
 800dff8:	4602      	mov	r2, r0
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	683a      	ldr	r2, [r7, #0]
 800e000:	429a      	cmp	r2, r3
 800e002:	d803      	bhi.n	800e00c <HAL_SPI_Transmit+0x350>
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e00a:	d102      	bne.n	800e012 <HAL_SPI_Transmit+0x356>
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d114      	bne.n	800e03c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f000 fd22 	bl	800ea5c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e026:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2201      	movs	r2, #1
 800e034:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e038:	2301      	movs	r3, #1
 800e03a:	e02c      	b.n	800e096 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e042:	b29b      	uxth	r3, r3
 800e044:	2b00      	cmp	r3, #0
 800e046:	f47f af78 	bne.w	800df3a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	9300      	str	r3, [sp, #0]
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	2200      	movs	r2, #0
 800e052:	2108      	movs	r1, #8
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f000 fda1 	bl	800eb9c <SPI_WaitOnFlagUntilTimeout>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d007      	beq.n	800e070 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e066:	f043 0220 	orr.w	r2, r3, #32
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f000 fcf3 	bl	800ea5c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2201      	movs	r2, #1
 800e082:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d001      	beq.n	800e094 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800e090:	2301      	movs	r3, #1
 800e092:	e000      	b.n	800e096 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800e094:	7efb      	ldrb	r3, [r7, #27]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3720      	adds	r7, #32
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop

0800e0a0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b08a      	sub	sp, #40	; 0x28
 800e0a4:	af02      	add	r7, sp, #8
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	603b      	str	r3, [r7, #0]
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	3330      	adds	r3, #48	; 0x30
 800e0ba:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e0c4:	d112      	bne.n	800e0ec <HAL_SPI_Receive+0x4c>
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d10e      	bne.n	800e0ec <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2204      	movs	r2, #4
 800e0d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e0d6:	88fa      	ldrh	r2, [r7, #6]
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	4613      	mov	r3, r2
 800e0de:	68ba      	ldr	r2, [r7, #8]
 800e0e0:	68b9      	ldr	r1, [r7, #8]
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f000 f9ce 	bl	800e484 <HAL_SPI_TransmitReceive>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	e1c7      	b.n	800e47c <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d101      	bne.n	800e0fa <HAL_SPI_Receive+0x5a>
 800e0f6:	2302      	movs	r3, #2
 800e0f8:	e1c0      	b.n	800e47c <HAL_SPI_Receive+0x3dc>
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e102:	f7f5 fafd 	bl	8003700 <HAL_GetTick>
 800e106:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	2b01      	cmp	r3, #1
 800e112:	d007      	beq.n	800e124 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800e114:	2302      	movs	r3, #2
 800e116:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e120:	7ffb      	ldrb	r3, [r7, #31]
 800e122:	e1ab      	b.n	800e47c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <HAL_SPI_Receive+0x90>
 800e12a:	88fb      	ldrh	r3, [r7, #6]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d107      	bne.n	800e140 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800e130:	2301      	movs	r3, #1
 800e132:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2200      	movs	r2, #0
 800e138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e13c:	7ffb      	ldrb	r3, [r7, #31]
 800e13e:	e19d      	b.n	800e47c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2204      	movs	r2, #4
 800e144:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2200      	movs	r2, #0
 800e14c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	68ba      	ldr	r2, [r7, #8]
 800e154:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	88fa      	ldrh	r2, [r7, #6]
 800e15a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	88fa      	ldrh	r2, [r7, #6]
 800e162:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2200      	movs	r2, #0
 800e16a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2200      	movs	r2, #0
 800e178:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2200      	movs	r2, #0
 800e186:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e190:	d107      	bne.n	800e1a2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	685a      	ldr	r2, [r3, #4]
 800e1a8:	4b94      	ldr	r3, [pc, #592]	; (800e3fc <HAL_SPI_Receive+0x35c>)
 800e1aa:	4013      	ands	r3, r2
 800e1ac:	88f9      	ldrh	r1, [r7, #6]
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	6812      	ldr	r2, [r2, #0]
 800e1b2:	430b      	orrs	r3, r1
 800e1b4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f042 0201 	orr.w	r2, r2, #1
 800e1c4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1ce:	d107      	bne.n	800e1e0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	2b0f      	cmp	r3, #15
 800e1e6:	d948      	bls.n	800e27a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e1e8:	e040      	b.n	800e26c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	695a      	ldr	r2, [r3, #20]
 800e1f0:	f248 0308 	movw	r3, #32776	; 0x8008
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d014      	beq.n	800e224 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e202:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e204:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e20a:	1d1a      	adds	r2, r3, #4
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e216:	b29b      	uxth	r3, r3
 800e218:	3b01      	subs	r3, #1
 800e21a:	b29a      	uxth	r2, r3
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e222:	e023      	b.n	800e26c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e224:	f7f5 fa6c 	bl	8003700 <HAL_GetTick>
 800e228:	4602      	mov	r2, r0
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	1ad3      	subs	r3, r2, r3
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	429a      	cmp	r2, r3
 800e232:	d803      	bhi.n	800e23c <HAL_SPI_Receive+0x19c>
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23a:	d102      	bne.n	800e242 <HAL_SPI_Receive+0x1a2>
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d114      	bne.n	800e26c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f000 fc0a 	bl	800ea5c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e256:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	e107      	b.n	800e47c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e272:	b29b      	uxth	r3, r3
 800e274:	2b00      	cmp	r3, #0
 800e276:	d1b8      	bne.n	800e1ea <HAL_SPI_Receive+0x14a>
 800e278:	e0ed      	b.n	800e456 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	2b07      	cmp	r3, #7
 800e280:	f240 80e2 	bls.w	800e448 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e284:	e05b      	b.n	800e33e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e290:	2b00      	cmp	r3, #0
 800e292:	d030      	beq.n	800e2f6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	695b      	ldr	r3, [r3, #20]
 800e29a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d014      	beq.n	800e2cc <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e2ac:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2b2:	1d1a      	adds	r2, r3, #4
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	3b02      	subs	r3, #2
 800e2c2:	b29a      	uxth	r2, r3
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2ca:	e038      	b.n	800e33e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2d0:	69ba      	ldr	r2, [r7, #24]
 800e2d2:	8812      	ldrh	r2, [r2, #0]
 800e2d4:	b292      	uxth	r2, r2
 800e2d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2dc:	1c9a      	adds	r2, r3, #2
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	b29a      	uxth	r2, r3
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2f4:	e023      	b.n	800e33e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2f6:	f7f5 fa03 	bl	8003700 <HAL_GetTick>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	1ad3      	subs	r3, r2, r3
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	429a      	cmp	r2, r3
 800e304:	d803      	bhi.n	800e30e <HAL_SPI_Receive+0x26e>
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30c:	d102      	bne.n	800e314 <HAL_SPI_Receive+0x274>
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d114      	bne.n	800e33e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f000 fba1 	bl	800ea5c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2200      	movs	r2, #0
 800e31e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e328:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2201      	movs	r2, #1
 800e336:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	e09e      	b.n	800e47c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e344:	b29b      	uxth	r3, r3
 800e346:	2b00      	cmp	r3, #0
 800e348:	d19d      	bne.n	800e286 <HAL_SPI_Receive+0x1e6>
 800e34a:	e084      	b.n	800e456 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	695b      	ldr	r3, [r3, #20]
 800e352:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e356:	2b00      	cmp	r3, #0
 800e358:	d052      	beq.n	800e400 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	695b      	ldr	r3, [r3, #20]
 800e360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e364:	2b00      	cmp	r3, #0
 800e366:	d014      	beq.n	800e392 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e370:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e372:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e378:	1d1a      	adds	r2, r3, #4
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e384:	b29b      	uxth	r3, r3
 800e386:	3b04      	subs	r3, #4
 800e388:	b29a      	uxth	r2, r3
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e390:	e05a      	b.n	800e448 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	695b      	ldr	r3, [r3, #20]
 800e398:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e39c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3a0:	d914      	bls.n	800e3cc <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3a6:	69ba      	ldr	r2, [r7, #24]
 800e3a8:	8812      	ldrh	r2, [r2, #0]
 800e3aa:	b292      	uxth	r2, r2
 800e3ac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3b2:	1c9a      	adds	r2, r3, #2
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	3b02      	subs	r3, #2
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3ca:	e03d      	b.n	800e448 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3d8:	7812      	ldrb	r2, [r2, #0]
 800e3da:	b2d2      	uxtb	r2, r2
 800e3dc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	3b01      	subs	r3, #1
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3fa:	e025      	b.n	800e448 <HAL_SPI_Receive+0x3a8>
 800e3fc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e400:	f7f5 f97e 	bl	8003700 <HAL_GetTick>
 800e404:	4602      	mov	r2, r0
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	683a      	ldr	r2, [r7, #0]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d803      	bhi.n	800e418 <HAL_SPI_Receive+0x378>
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e416:	d102      	bne.n	800e41e <HAL_SPI_Receive+0x37e>
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d114      	bne.n	800e448 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f000 fb1c 	bl	800ea5c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2200      	movs	r2, #0
 800e428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e432:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2201      	movs	r2, #1
 800e440:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	e019      	b.n	800e47c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e44e:	b29b      	uxth	r3, r3
 800e450:	2b00      	cmp	r3, #0
 800e452:	f47f af7b 	bne.w	800e34c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f000 fb00 	bl	800ea5c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2201      	movs	r2, #1
 800e468:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e476:	2301      	movs	r3, #1
 800e478:	e000      	b.n	800e47c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e47a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3720      	adds	r7, #32
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b08e      	sub	sp, #56	; 0x38
 800e488:	af02      	add	r7, sp, #8
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
 800e490:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e492:	2300      	movs	r3, #0
 800e494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	3320      	adds	r3, #32
 800e49e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3330      	adds	r3, #48	; 0x30
 800e4a6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d101      	bne.n	800e4b6 <HAL_SPI_TransmitReceive+0x32>
 800e4b2:	2302      	movs	r3, #2
 800e4b4:	e2ce      	b.n	800ea54 <HAL_SPI_TransmitReceive+0x5d0>
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4be:	f7f5 f91f 	bl	8003700 <HAL_GetTick>
 800e4c2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e4c4:	887b      	ldrh	r3, [r7, #2]
 800e4c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e4c8:	887b      	ldrh	r3, [r7, #2]
 800e4ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4d2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e4da:	7efb      	ldrb	r3, [r7, #27]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d014      	beq.n	800e50a <HAL_SPI_TransmitReceive+0x86>
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4e6:	d106      	bne.n	800e4f6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d102      	bne.n	800e4f6 <HAL_SPI_TransmitReceive+0x72>
 800e4f0:	7efb      	ldrb	r3, [r7, #27]
 800e4f2:	2b04      	cmp	r3, #4
 800e4f4:	d009      	beq.n	800e50a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e4f6:	2302      	movs	r3, #2
 800e4f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e504:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e508:	e2a4      	b.n	800ea54 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d005      	beq.n	800e51c <HAL_SPI_TransmitReceive+0x98>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d002      	beq.n	800e51c <HAL_SPI_TransmitReceive+0x98>
 800e516:	887b      	ldrh	r3, [r7, #2]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d109      	bne.n	800e530 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e51c:	2301      	movs	r3, #1
 800e51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e52a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e52e:	e291      	b.n	800ea54 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e536:	b2db      	uxtb	r3, r3
 800e538:	2b04      	cmp	r3, #4
 800e53a:	d003      	beq.n	800e544 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2205      	movs	r2, #5
 800e540:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2200      	movs	r2, #0
 800e548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	887a      	ldrh	r2, [r7, #2]
 800e556:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	887a      	ldrh	r2, [r7, #2]
 800e55e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	68ba      	ldr	r2, [r7, #8]
 800e566:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	887a      	ldrh	r2, [r7, #2]
 800e56c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	887a      	ldrh	r2, [r7, #2]
 800e574:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2200      	movs	r2, #0
 800e57c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2200      	movs	r2, #0
 800e582:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	685a      	ldr	r2, [r3, #4]
 800e58a:	4b9f      	ldr	r3, [pc, #636]	; (800e808 <HAL_SPI_TransmitReceive+0x384>)
 800e58c:	4013      	ands	r3, r2
 800e58e:	8879      	ldrh	r1, [r7, #2]
 800e590:	68fa      	ldr	r2, [r7, #12]
 800e592:	6812      	ldr	r2, [r2, #0]
 800e594:	430b      	orrs	r3, r1
 800e596:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f042 0201 	orr.w	r2, r2, #1
 800e5a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5b0:	d107      	bne.n	800e5c2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	2b0f      	cmp	r3, #15
 800e5c8:	d970      	bls.n	800e6ac <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e5ca:	e068      	b.n	800e69e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	695b      	ldr	r3, [r3, #20]
 800e5d2:	f003 0302 	and.w	r3, r3, #2
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	d11a      	bne.n	800e610 <HAL_SPI_TransmitReceive+0x18c>
 800e5da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d017      	beq.n	800e610 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	6812      	ldr	r2, [r2, #0]
 800e5ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5f0:	1d1a      	adds	r2, r3, #4
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	3b01      	subs	r3, #1
 800e600:	b29a      	uxth	r2, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e60e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	695a      	ldr	r2, [r3, #20]
 800e616:	f248 0308 	movw	r3, #32776	; 0x8008
 800e61a:	4013      	ands	r3, r2
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d01a      	beq.n	800e656 <HAL_SPI_TransmitReceive+0x1d2>
 800e620:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e622:	2b00      	cmp	r3, #0
 800e624:	d017      	beq.n	800e656 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e62e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e630:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e636:	1d1a      	adds	r2, r3, #4
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e642:	b29b      	uxth	r3, r3
 800e644:	3b01      	subs	r3, #1
 800e646:	b29a      	uxth	r2, r3
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e654:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e656:	f7f5 f853 	bl	8003700 <HAL_GetTick>
 800e65a:	4602      	mov	r2, r0
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	1ad3      	subs	r3, r2, r3
 800e660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e662:	429a      	cmp	r2, r3
 800e664:	d803      	bhi.n	800e66e <HAL_SPI_TransmitReceive+0x1ea>
 800e666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e66c:	d102      	bne.n	800e674 <HAL_SPI_TransmitReceive+0x1f0>
 800e66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e670:	2b00      	cmp	r3, #0
 800e672:	d114      	bne.n	800e69e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e674:	68f8      	ldr	r0, [r7, #12]
 800e676:	f000 f9f1 	bl	800ea5c <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e688:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2201      	movs	r2, #1
 800e696:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e69a:	2301      	movs	r3, #1
 800e69c:	e1da      	b.n	800ea54 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e69e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d193      	bne.n	800e5cc <HAL_SPI_TransmitReceive+0x148>
 800e6a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d190      	bne.n	800e5cc <HAL_SPI_TransmitReceive+0x148>
 800e6aa:	e1ac      	b.n	800ea06 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	2b07      	cmp	r3, #7
 800e6b2:	f240 81a0 	bls.w	800e9f6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e6b6:	e0a9      	b.n	800e80c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	695b      	ldr	r3, [r3, #20]
 800e6be:	f003 0302 	and.w	r3, r3, #2
 800e6c2:	2b02      	cmp	r3, #2
 800e6c4:	d139      	bne.n	800e73a <HAL_SPI_TransmitReceive+0x2b6>
 800e6c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d036      	beq.n	800e73a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e6cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d91c      	bls.n	800e70c <HAL_SPI_TransmitReceive+0x288>
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d018      	beq.n	800e70c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	6812      	ldr	r2, [r2, #0]
 800e6e4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6ea:	1d1a      	adds	r2, r3, #4
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	3b02      	subs	r3, #2
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e708:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e70a:	e016      	b.n	800e73a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e710:	881a      	ldrh	r2, [r3, #0]
 800e712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e714:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e71a:	1c9a      	adds	r2, r3, #2
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e726:	b29b      	uxth	r3, r3
 800e728:	3b01      	subs	r3, #1
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e738:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	695b      	ldr	r3, [r3, #20]
 800e740:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e744:	2b00      	cmp	r3, #0
 800e746:	d03a      	beq.n	800e7be <HAL_SPI_TransmitReceive+0x33a>
 800e748:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d037      	beq.n	800e7be <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	695b      	ldr	r3, [r3, #20]
 800e754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d018      	beq.n	800e78e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e764:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e766:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e76c:	1d1a      	adds	r2, r3, #4
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e778:	b29b      	uxth	r3, r3
 800e77a:	3b02      	subs	r3, #2
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e78a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e78c:	e017      	b.n	800e7be <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e792:	6a3a      	ldr	r2, [r7, #32]
 800e794:	8812      	ldrh	r2, [r2, #0]
 800e796:	b292      	uxth	r2, r2
 800e798:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e79e:	1c9a      	adds	r2, r3, #2
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	3b01      	subs	r3, #1
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7be:	f7f4 ff9f 	bl	8003700 <HAL_GetTick>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	1ad3      	subs	r3, r2, r3
 800e7c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d803      	bhi.n	800e7d6 <HAL_SPI_TransmitReceive+0x352>
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d4:	d102      	bne.n	800e7dc <HAL_SPI_TransmitReceive+0x358>
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d117      	bne.n	800e80c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f000 f93d 	bl	800ea5c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e802:	2301      	movs	r3, #1
 800e804:	e126      	b.n	800ea54 <HAL_SPI_TransmitReceive+0x5d0>
 800e806:	bf00      	nop
 800e808:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e80c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f47f af52 	bne.w	800e6b8 <HAL_SPI_TransmitReceive+0x234>
 800e814:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e816:	2b00      	cmp	r3, #0
 800e818:	f47f af4e 	bne.w	800e6b8 <HAL_SPI_TransmitReceive+0x234>
 800e81c:	e0f3      	b.n	800ea06 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	695b      	ldr	r3, [r3, #20]
 800e824:	f003 0302 	and.w	r3, r3, #2
 800e828:	2b02      	cmp	r3, #2
 800e82a:	d15a      	bne.n	800e8e2 <HAL_SPI_TransmitReceive+0x45e>
 800e82c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d057      	beq.n	800e8e2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e832:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e834:	2b03      	cmp	r3, #3
 800e836:	d91c      	bls.n	800e872 <HAL_SPI_TransmitReceive+0x3ee>
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e83c:	2b40      	cmp	r3, #64	; 0x40
 800e83e:	d918      	bls.n	800e872 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	6812      	ldr	r2, [r2, #0]
 800e84a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e850:	1d1a      	adds	r2, r3, #4
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	3b04      	subs	r3, #4
 800e860:	b29a      	uxth	r2, r3
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e86e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e870:	e037      	b.n	800e8e2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e872:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e874:	2b01      	cmp	r3, #1
 800e876:	d91b      	bls.n	800e8b0 <HAL_SPI_TransmitReceive+0x42c>
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d017      	beq.n	800e8b0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e884:	881a      	ldrh	r2, [r3, #0]
 800e886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e888:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e88e:	1c9a      	adds	r2, r3, #2
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	3b02      	subs	r3, #2
 800e89e:	b29a      	uxth	r2, r3
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e8ae:	e018      	b.n	800e8e2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	3320      	adds	r3, #32
 800e8ba:	7812      	ldrb	r2, [r2, #0]
 800e8bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8c2:	1c5a      	adds	r2, r3, #1
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	b29a      	uxth	r2, r3
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	695b      	ldr	r3, [r3, #20]
 800e8e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d05e      	beq.n	800e9ae <HAL_SPI_TransmitReceive+0x52a>
 800e8f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d05b      	beq.n	800e9ae <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	695b      	ldr	r3, [r3, #20]
 800e8fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e900:	2b00      	cmp	r3, #0
 800e902:	d018      	beq.n	800e936 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e90c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e90e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e914:	1d1a      	adds	r2, r3, #4
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e920:	b29b      	uxth	r3, r3
 800e922:	3b04      	subs	r3, #4
 800e924:	b29a      	uxth	r2, r3
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e932:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e934:	e03b      	b.n	800e9ae <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	695b      	ldr	r3, [r3, #20]
 800e93c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e944:	d918      	bls.n	800e978 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e94a:	6a3a      	ldr	r2, [r7, #32]
 800e94c:	8812      	ldrh	r2, [r2, #0]
 800e94e:	b292      	uxth	r2, r2
 800e950:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e956:	1c9a      	adds	r2, r3, #2
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e962:	b29b      	uxth	r3, r3
 800e964:	3b02      	subs	r3, #2
 800e966:	b29a      	uxth	r2, r3
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e974:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e976:	e01a      	b.n	800e9ae <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e984:	7812      	ldrb	r2, [r2, #0]
 800e986:	b2d2      	uxtb	r2, r2
 800e988:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e98e:	1c5a      	adds	r2, r3, #1
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	3b01      	subs	r3, #1
 800e99e:	b29a      	uxth	r2, r3
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9ae:	f7f4 fea7 	bl	8003700 <HAL_GetTick>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	1ad3      	subs	r3, r2, r3
 800e9b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d803      	bhi.n	800e9c6 <HAL_SPI_TransmitReceive+0x542>
 800e9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c4:	d102      	bne.n	800e9cc <HAL_SPI_TransmitReceive+0x548>
 800e9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d114      	bne.n	800e9f6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f000 f845 	bl	800ea5c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e02e      	b.n	800ea54 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e9f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f47f af10 	bne.w	800e81e <HAL_SPI_TransmitReceive+0x39a>
 800e9fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f47f af0c 	bne.w	800e81e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ea06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	2108      	movs	r1, #8
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f000 f8c3 	bl	800eb9c <SPI_WaitOnFlagUntilTimeout>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d007      	beq.n	800ea2c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea22:	f043 0220 	orr.w	r2, r3, #32
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ea2c:	68f8      	ldr	r0, [r7, #12]
 800ea2e:	f000 f815 	bl	800ea5c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d001      	beq.n	800ea50 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	e001      	b.n	800ea54 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800ea50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3730      	adds	r7, #48	; 0x30
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	695b      	ldr	r3, [r3, #20]
 800ea6a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	699a      	ldr	r2, [r3, #24]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f042 0208 	orr.w	r2, r2, #8
 800ea7a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	699a      	ldr	r2, [r3, #24]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f042 0210 	orr.w	r2, r2, #16
 800ea8a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f022 0201 	bic.w	r2, r2, #1
 800ea9a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	6919      	ldr	r1, [r3, #16]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	4b3c      	ldr	r3, [pc, #240]	; (800eb98 <SPI_CloseTransfer+0x13c>)
 800eaa8:	400b      	ands	r3, r1
 800eaaa:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	689a      	ldr	r2, [r3, #8]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800eaba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	2b04      	cmp	r3, #4
 800eac6:	d014      	beq.n	800eaf2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f003 0320 	and.w	r3, r3, #32
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00f      	beq.n	800eaf2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ead8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	699a      	ldr	r2, [r3, #24]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f042 0220 	orr.w	r2, r2, #32
 800eaf0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	2b03      	cmp	r3, #3
 800eafc:	d014      	beq.n	800eb28 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00f      	beq.n	800eb28 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb0e:	f043 0204 	orr.w	r2, r3, #4
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	699a      	ldr	r2, [r3, #24]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb26:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d00f      	beq.n	800eb52 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb38:	f043 0201 	orr.w	r2, r3, #1
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	699a      	ldr	r2, [r3, #24]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb50:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00f      	beq.n	800eb7c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb62:	f043 0208 	orr.w	r2, r3, #8
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	699a      	ldr	r2, [r3, #24]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eb7a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800eb8c:	bf00      	nop
 800eb8e:	3714      	adds	r7, #20
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr
 800eb98:	fffffc90 	.word	0xfffffc90

0800eb9c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	603b      	str	r3, [r7, #0]
 800eba8:	4613      	mov	r3, r2
 800ebaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ebac:	e010      	b.n	800ebd0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebae:	f7f4 fda7 	bl	8003700 <HAL_GetTick>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	1ad3      	subs	r3, r2, r3
 800ebb8:	69ba      	ldr	r2, [r7, #24]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d803      	bhi.n	800ebc6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc4:	d102      	bne.n	800ebcc <SPI_WaitOnFlagUntilTimeout+0x30>
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d101      	bne.n	800ebd0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ebcc:	2303      	movs	r3, #3
 800ebce:	e00f      	b.n	800ebf0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	695a      	ldr	r2, [r3, #20]
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	4013      	ands	r3, r2
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	bf0c      	ite	eq
 800ebe0:	2301      	moveq	r3, #1
 800ebe2:	2300      	movne	r3, #0
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	79fb      	ldrb	r3, [r7, #7]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d0df      	beq.n	800ebae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3710      	adds	r7, #16
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec04:	095b      	lsrs	r3, r3, #5
 800ec06:	3301      	adds	r3, #1
 800ec08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	3301      	adds	r3, #1
 800ec10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	3307      	adds	r3, #7
 800ec16:	08db      	lsrs	r3, r3, #3
 800ec18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3714      	adds	r7, #20
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr

0800ec2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b082      	sub	sp, #8
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d101      	bne.n	800ec40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	e042      	b.n	800ecc6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d106      	bne.n	800ec58 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7f4 fa70 	bl	8003138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2224      	movs	r2, #36	; 0x24
 800ec5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f022 0201 	bic.w	r2, r2, #1
 800ec6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 f95f 	bl	800ef34 <UART_SetConfig>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d101      	bne.n	800ec80 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	e022      	b.n	800ecc6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d002      	beq.n	800ec8e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f000 ff03 	bl	800fa94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	685a      	ldr	r2, [r3, #4]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ec9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	689a      	ldr	r2, [r3, #8]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ecac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f042 0201 	orr.w	r2, r2, #1
 800ecbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 ff8a 	bl	800fbd8 <UART_CheckIdleState>
 800ecc4:	4603      	mov	r3, r0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b08a      	sub	sp, #40	; 0x28
 800ecd2:	af02      	add	r7, sp, #8
 800ecd4:	60f8      	str	r0, [r7, #12]
 800ecd6:	60b9      	str	r1, [r7, #8]
 800ecd8:	603b      	str	r3, [r7, #0]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ece4:	2b20      	cmp	r3, #32
 800ece6:	f040 8083 	bne.w	800edf0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d002      	beq.n	800ecf6 <HAL_UART_Transmit+0x28>
 800ecf0:	88fb      	ldrh	r3, [r7, #6]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d101      	bne.n	800ecfa <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e07b      	b.n	800edf2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d101      	bne.n	800ed08 <HAL_UART_Transmit+0x3a>
 800ed04:	2302      	movs	r3, #2
 800ed06:	e074      	b.n	800edf2 <HAL_UART_Transmit+0x124>
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2200      	movs	r2, #0
 800ed14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2221      	movs	r2, #33	; 0x21
 800ed1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ed20:	f7f4 fcee 	bl	8003700 <HAL_GetTick>
 800ed24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	88fa      	ldrh	r2, [r7, #6]
 800ed2a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	88fa      	ldrh	r2, [r7, #6]
 800ed32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed3e:	d108      	bne.n	800ed52 <HAL_UART_Transmit+0x84>
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	691b      	ldr	r3, [r3, #16]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d104      	bne.n	800ed52 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	61bb      	str	r3, [r7, #24]
 800ed50:	e003      	b.n	800ed5a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ed56:	2300      	movs	r3, #0
 800ed58:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800ed62:	e02c      	b.n	800edbe <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	2180      	movs	r1, #128	; 0x80
 800ed6e:	68f8      	ldr	r0, [r7, #12]
 800ed70:	f000 ff7a 	bl	800fc68 <UART_WaitOnFlagUntilTimeout>
 800ed74:	4603      	mov	r3, r0
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d001      	beq.n	800ed7e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ed7a:	2303      	movs	r3, #3
 800ed7c:	e039      	b.n	800edf2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d10b      	bne.n	800ed9c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	881b      	ldrh	r3, [r3, #0]
 800ed88:	461a      	mov	r2, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ed92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	3302      	adds	r3, #2
 800ed98:	61bb      	str	r3, [r7, #24]
 800ed9a:	e007      	b.n	800edac <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	781a      	ldrb	r2, [r3, #0]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	3301      	adds	r3, #1
 800edaa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	3b01      	subs	r3, #1
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d1cc      	bne.n	800ed64 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	2200      	movs	r2, #0
 800edd2:	2140      	movs	r1, #64	; 0x40
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f000 ff47 	bl	800fc68 <UART_WaitOnFlagUntilTimeout>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ede0:	2303      	movs	r3, #3
 800ede2:	e006      	b.n	800edf2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2220      	movs	r2, #32
 800ede8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800edec:	2300      	movs	r3, #0
 800edee:	e000      	b.n	800edf2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800edf0:	2302      	movs	r3, #2
  }
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3720      	adds	r7, #32
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
	...

0800edfc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	4613      	mov	r3, r2
 800ee08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee10:	2b20      	cmp	r3, #32
 800ee12:	d170      	bne.n	800eef6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d002      	beq.n	800ee20 <HAL_UART_Receive_DMA+0x24>
 800ee1a:	88fb      	ldrh	r3, [r7, #6]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d101      	bne.n	800ee24 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ee20:	2301      	movs	r3, #1
 800ee22:	e069      	b.n	800eef8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d101      	bne.n	800ee32 <HAL_UART_Receive_DMA+0x36>
 800ee2e:	2302      	movs	r3, #2
 800ee30:	e062      	b.n	800eef8 <HAL_UART_Receive_DMA+0xfc>
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2201      	movs	r2, #1
 800ee36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	68ba      	ldr	r2, [r7, #8]
 800ee3e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	88fa      	ldrh	r2, [r7, #6]
 800ee44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2222      	movs	r2, #34	; 0x22
 800ee54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d02c      	beq.n	800eeba <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee64:	4a26      	ldr	r2, [pc, #152]	; (800ef00 <HAL_UART_Receive_DMA+0x104>)
 800ee66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee6c:	4a25      	ldr	r2, [pc, #148]	; (800ef04 <HAL_UART_Receive_DMA+0x108>)
 800ee6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee74:	4a24      	ldr	r2, [pc, #144]	; (800ef08 <HAL_UART_Receive_DMA+0x10c>)
 800ee76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	3324      	adds	r3, #36	; 0x24
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee90:	461a      	mov	r2, r3
 800ee92:	88fb      	ldrh	r3, [r7, #6]
 800ee94:	f7f5 f8da 	bl	800404c <HAL_DMA_Start_IT>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00d      	beq.n	800eeba <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2210      	movs	r2, #16
 800eea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2220      	movs	r2, #32
 800eeb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e01e      	b.n	800eef8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eed0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	689a      	ldr	r2, [r3, #8]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f042 0201 	orr.w	r2, r2, #1
 800eee0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	689a      	ldr	r2, [r3, #8]
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eef0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800eef2:	2300      	movs	r3, #0
 800eef4:	e000      	b.n	800eef8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800eef6:	2302      	movs	r3, #2
  }
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3710      	adds	r7, #16
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	0800fded 	.word	0x0800fded
 800ef04:	0800fe53 	.word	0x0800fe53
 800ef08:	0800fe6f 	.word	0x0800fe6f

0800ef0c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ef14:	bf00      	nop
 800ef16:	370c      	adds	r7, #12
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b083      	sub	sp, #12
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ef28:	bf00      	nop
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ef34:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ef38:	b08e      	sub	sp, #56	; 0x38
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	689a      	ldr	r2, [r3, #8]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	691b      	ldr	r3, [r3, #16]
 800ef4c:	431a      	orrs	r2, r3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	695b      	ldr	r3, [r3, #20]
 800ef52:	431a      	orrs	r2, r3
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	69db      	ldr	r3, [r3, #28]
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef62:	4313      	orrs	r3, r2
 800ef64:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	4bc1      	ldr	r3, [pc, #772]	; (800f274 <UART_SetConfig+0x340>)
 800ef6e:	4013      	ands	r3, r2
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	6812      	ldr	r2, [r2, #0]
 800ef74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ef76:	430b      	orrs	r3, r1
 800ef78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	68da      	ldr	r2, [r3, #12]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	430a      	orrs	r2, r1
 800ef8e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	699b      	ldr	r3, [r3, #24]
 800ef94:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4ab7      	ldr	r2, [pc, #732]	; (800f278 <UART_SetConfig+0x344>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d004      	beq.n	800efaa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6a1b      	ldr	r3, [r3, #32]
 800efa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efa6:	4313      	orrs	r3, r2
 800efa8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	689a      	ldr	r2, [r3, #8]
 800efb0:	4bb2      	ldr	r3, [pc, #712]	; (800f27c <UART_SetConfig+0x348>)
 800efb2:	4013      	ands	r3, r2
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	6812      	ldr	r2, [r2, #0]
 800efb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800efba:	430b      	orrs	r3, r1
 800efbc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc4:	f023 010f 	bic.w	r1, r3, #15
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	430a      	orrs	r2, r1
 800efd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4aa9      	ldr	r2, [pc, #676]	; (800f280 <UART_SetConfig+0x34c>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d177      	bne.n	800f0ce <UART_SetConfig+0x19a>
 800efde:	4ba9      	ldr	r3, [pc, #676]	; (800f284 <UART_SetConfig+0x350>)
 800efe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800efe6:	2b28      	cmp	r3, #40	; 0x28
 800efe8:	d86c      	bhi.n	800f0c4 <UART_SetConfig+0x190>
 800efea:	a201      	add	r2, pc, #4	; (adr r2, 800eff0 <UART_SetConfig+0xbc>)
 800efec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff0:	0800f095 	.word	0x0800f095
 800eff4:	0800f0c5 	.word	0x0800f0c5
 800eff8:	0800f0c5 	.word	0x0800f0c5
 800effc:	0800f0c5 	.word	0x0800f0c5
 800f000:	0800f0c5 	.word	0x0800f0c5
 800f004:	0800f0c5 	.word	0x0800f0c5
 800f008:	0800f0c5 	.word	0x0800f0c5
 800f00c:	0800f0c5 	.word	0x0800f0c5
 800f010:	0800f09d 	.word	0x0800f09d
 800f014:	0800f0c5 	.word	0x0800f0c5
 800f018:	0800f0c5 	.word	0x0800f0c5
 800f01c:	0800f0c5 	.word	0x0800f0c5
 800f020:	0800f0c5 	.word	0x0800f0c5
 800f024:	0800f0c5 	.word	0x0800f0c5
 800f028:	0800f0c5 	.word	0x0800f0c5
 800f02c:	0800f0c5 	.word	0x0800f0c5
 800f030:	0800f0a5 	.word	0x0800f0a5
 800f034:	0800f0c5 	.word	0x0800f0c5
 800f038:	0800f0c5 	.word	0x0800f0c5
 800f03c:	0800f0c5 	.word	0x0800f0c5
 800f040:	0800f0c5 	.word	0x0800f0c5
 800f044:	0800f0c5 	.word	0x0800f0c5
 800f048:	0800f0c5 	.word	0x0800f0c5
 800f04c:	0800f0c5 	.word	0x0800f0c5
 800f050:	0800f0ad 	.word	0x0800f0ad
 800f054:	0800f0c5 	.word	0x0800f0c5
 800f058:	0800f0c5 	.word	0x0800f0c5
 800f05c:	0800f0c5 	.word	0x0800f0c5
 800f060:	0800f0c5 	.word	0x0800f0c5
 800f064:	0800f0c5 	.word	0x0800f0c5
 800f068:	0800f0c5 	.word	0x0800f0c5
 800f06c:	0800f0c5 	.word	0x0800f0c5
 800f070:	0800f0b5 	.word	0x0800f0b5
 800f074:	0800f0c5 	.word	0x0800f0c5
 800f078:	0800f0c5 	.word	0x0800f0c5
 800f07c:	0800f0c5 	.word	0x0800f0c5
 800f080:	0800f0c5 	.word	0x0800f0c5
 800f084:	0800f0c5 	.word	0x0800f0c5
 800f088:	0800f0c5 	.word	0x0800f0c5
 800f08c:	0800f0c5 	.word	0x0800f0c5
 800f090:	0800f0bd 	.word	0x0800f0bd
 800f094:	2301      	movs	r3, #1
 800f096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f09a:	e233      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f09c:	2304      	movs	r3, #4
 800f09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0a2:	e22f      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f0a4:	2308      	movs	r3, #8
 800f0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0aa:	e22b      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f0ac:	2310      	movs	r3, #16
 800f0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0b2:	e227      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f0b4:	2320      	movs	r3, #32
 800f0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ba:	e223      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f0bc:	2340      	movs	r3, #64	; 0x40
 800f0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0c2:	e21f      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f0c4:	2380      	movs	r3, #128	; 0x80
 800f0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ca:	bf00      	nop
 800f0cc:	e21a      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	4a6d      	ldr	r2, [pc, #436]	; (800f288 <UART_SetConfig+0x354>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d132      	bne.n	800f13e <UART_SetConfig+0x20a>
 800f0d8:	4b6a      	ldr	r3, [pc, #424]	; (800f284 <UART_SetConfig+0x350>)
 800f0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0dc:	f003 0307 	and.w	r3, r3, #7
 800f0e0:	2b05      	cmp	r3, #5
 800f0e2:	d827      	bhi.n	800f134 <UART_SetConfig+0x200>
 800f0e4:	a201      	add	r2, pc, #4	; (adr r2, 800f0ec <UART_SetConfig+0x1b8>)
 800f0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ea:	bf00      	nop
 800f0ec:	0800f105 	.word	0x0800f105
 800f0f0:	0800f10d 	.word	0x0800f10d
 800f0f4:	0800f115 	.word	0x0800f115
 800f0f8:	0800f11d 	.word	0x0800f11d
 800f0fc:	0800f125 	.word	0x0800f125
 800f100:	0800f12d 	.word	0x0800f12d
 800f104:	2300      	movs	r3, #0
 800f106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f10a:	e1fb      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f10c:	2304      	movs	r3, #4
 800f10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f112:	e1f7      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f114:	2308      	movs	r3, #8
 800f116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f11a:	e1f3      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f11c:	2310      	movs	r3, #16
 800f11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f122:	e1ef      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f124:	2320      	movs	r3, #32
 800f126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f12a:	e1eb      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f12c:	2340      	movs	r3, #64	; 0x40
 800f12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f132:	e1e7      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f134:	2380      	movs	r3, #128	; 0x80
 800f136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f13a:	bf00      	nop
 800f13c:	e1e2      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4a52      	ldr	r2, [pc, #328]	; (800f28c <UART_SetConfig+0x358>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d132      	bne.n	800f1ae <UART_SetConfig+0x27a>
 800f148:	4b4e      	ldr	r3, [pc, #312]	; (800f284 <UART_SetConfig+0x350>)
 800f14a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f14c:	f003 0307 	and.w	r3, r3, #7
 800f150:	2b05      	cmp	r3, #5
 800f152:	d827      	bhi.n	800f1a4 <UART_SetConfig+0x270>
 800f154:	a201      	add	r2, pc, #4	; (adr r2, 800f15c <UART_SetConfig+0x228>)
 800f156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15a:	bf00      	nop
 800f15c:	0800f175 	.word	0x0800f175
 800f160:	0800f17d 	.word	0x0800f17d
 800f164:	0800f185 	.word	0x0800f185
 800f168:	0800f18d 	.word	0x0800f18d
 800f16c:	0800f195 	.word	0x0800f195
 800f170:	0800f19d 	.word	0x0800f19d
 800f174:	2300      	movs	r3, #0
 800f176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f17a:	e1c3      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f17c:	2304      	movs	r3, #4
 800f17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f182:	e1bf      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f184:	2308      	movs	r3, #8
 800f186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f18a:	e1bb      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f18c:	2310      	movs	r3, #16
 800f18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f192:	e1b7      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f194:	2320      	movs	r3, #32
 800f196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f19a:	e1b3      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f19c:	2340      	movs	r3, #64	; 0x40
 800f19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1a2:	e1af      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f1a4:	2380      	movs	r3, #128	; 0x80
 800f1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1aa:	bf00      	nop
 800f1ac:	e1aa      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4a37      	ldr	r2, [pc, #220]	; (800f290 <UART_SetConfig+0x35c>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d132      	bne.n	800f21e <UART_SetConfig+0x2ea>
 800f1b8:	4b32      	ldr	r3, [pc, #200]	; (800f284 <UART_SetConfig+0x350>)
 800f1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1bc:	f003 0307 	and.w	r3, r3, #7
 800f1c0:	2b05      	cmp	r3, #5
 800f1c2:	d827      	bhi.n	800f214 <UART_SetConfig+0x2e0>
 800f1c4:	a201      	add	r2, pc, #4	; (adr r2, 800f1cc <UART_SetConfig+0x298>)
 800f1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ca:	bf00      	nop
 800f1cc:	0800f1e5 	.word	0x0800f1e5
 800f1d0:	0800f1ed 	.word	0x0800f1ed
 800f1d4:	0800f1f5 	.word	0x0800f1f5
 800f1d8:	0800f1fd 	.word	0x0800f1fd
 800f1dc:	0800f205 	.word	0x0800f205
 800f1e0:	0800f20d 	.word	0x0800f20d
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1ea:	e18b      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f1ec:	2304      	movs	r3, #4
 800f1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1f2:	e187      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f1f4:	2308      	movs	r3, #8
 800f1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1fa:	e183      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f1fc:	2310      	movs	r3, #16
 800f1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f202:	e17f      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f204:	2320      	movs	r3, #32
 800f206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f20a:	e17b      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f20c:	2340      	movs	r3, #64	; 0x40
 800f20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f212:	e177      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f214:	2380      	movs	r3, #128	; 0x80
 800f216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f21a:	bf00      	nop
 800f21c:	e172      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4a1c      	ldr	r2, [pc, #112]	; (800f294 <UART_SetConfig+0x360>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d144      	bne.n	800f2b2 <UART_SetConfig+0x37e>
 800f228:	4b16      	ldr	r3, [pc, #88]	; (800f284 <UART_SetConfig+0x350>)
 800f22a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f22c:	f003 0307 	and.w	r3, r3, #7
 800f230:	2b05      	cmp	r3, #5
 800f232:	d839      	bhi.n	800f2a8 <UART_SetConfig+0x374>
 800f234:	a201      	add	r2, pc, #4	; (adr r2, 800f23c <UART_SetConfig+0x308>)
 800f236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f23a:	bf00      	nop
 800f23c:	0800f255 	.word	0x0800f255
 800f240:	0800f25d 	.word	0x0800f25d
 800f244:	0800f265 	.word	0x0800f265
 800f248:	0800f26d 	.word	0x0800f26d
 800f24c:	0800f299 	.word	0x0800f299
 800f250:	0800f2a1 	.word	0x0800f2a1
 800f254:	2300      	movs	r3, #0
 800f256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f25a:	e153      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f25c:	2304      	movs	r3, #4
 800f25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f262:	e14f      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f264:	2308      	movs	r3, #8
 800f266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f26a:	e14b      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f26c:	2310      	movs	r3, #16
 800f26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f272:	e147      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f274:	cfff69f3 	.word	0xcfff69f3
 800f278:	58000c00 	.word	0x58000c00
 800f27c:	11fff4ff 	.word	0x11fff4ff
 800f280:	40011000 	.word	0x40011000
 800f284:	58024400 	.word	0x58024400
 800f288:	40004400 	.word	0x40004400
 800f28c:	40004800 	.word	0x40004800
 800f290:	40004c00 	.word	0x40004c00
 800f294:	40005000 	.word	0x40005000
 800f298:	2320      	movs	r3, #32
 800f29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f29e:	e131      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f2a0:	2340      	movs	r3, #64	; 0x40
 800f2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2a6:	e12d      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f2a8:	2380      	movs	r3, #128	; 0x80
 800f2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2ae:	bf00      	nop
 800f2b0:	e128      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4ab6      	ldr	r2, [pc, #728]	; (800f590 <UART_SetConfig+0x65c>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d178      	bne.n	800f3ae <UART_SetConfig+0x47a>
 800f2bc:	4bb5      	ldr	r3, [pc, #724]	; (800f594 <UART_SetConfig+0x660>)
 800f2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f2c4:	2b28      	cmp	r3, #40	; 0x28
 800f2c6:	d86d      	bhi.n	800f3a4 <UART_SetConfig+0x470>
 800f2c8:	a201      	add	r2, pc, #4	; (adr r2, 800f2d0 <UART_SetConfig+0x39c>)
 800f2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ce:	bf00      	nop
 800f2d0:	0800f375 	.word	0x0800f375
 800f2d4:	0800f3a5 	.word	0x0800f3a5
 800f2d8:	0800f3a5 	.word	0x0800f3a5
 800f2dc:	0800f3a5 	.word	0x0800f3a5
 800f2e0:	0800f3a5 	.word	0x0800f3a5
 800f2e4:	0800f3a5 	.word	0x0800f3a5
 800f2e8:	0800f3a5 	.word	0x0800f3a5
 800f2ec:	0800f3a5 	.word	0x0800f3a5
 800f2f0:	0800f37d 	.word	0x0800f37d
 800f2f4:	0800f3a5 	.word	0x0800f3a5
 800f2f8:	0800f3a5 	.word	0x0800f3a5
 800f2fc:	0800f3a5 	.word	0x0800f3a5
 800f300:	0800f3a5 	.word	0x0800f3a5
 800f304:	0800f3a5 	.word	0x0800f3a5
 800f308:	0800f3a5 	.word	0x0800f3a5
 800f30c:	0800f3a5 	.word	0x0800f3a5
 800f310:	0800f385 	.word	0x0800f385
 800f314:	0800f3a5 	.word	0x0800f3a5
 800f318:	0800f3a5 	.word	0x0800f3a5
 800f31c:	0800f3a5 	.word	0x0800f3a5
 800f320:	0800f3a5 	.word	0x0800f3a5
 800f324:	0800f3a5 	.word	0x0800f3a5
 800f328:	0800f3a5 	.word	0x0800f3a5
 800f32c:	0800f3a5 	.word	0x0800f3a5
 800f330:	0800f38d 	.word	0x0800f38d
 800f334:	0800f3a5 	.word	0x0800f3a5
 800f338:	0800f3a5 	.word	0x0800f3a5
 800f33c:	0800f3a5 	.word	0x0800f3a5
 800f340:	0800f3a5 	.word	0x0800f3a5
 800f344:	0800f3a5 	.word	0x0800f3a5
 800f348:	0800f3a5 	.word	0x0800f3a5
 800f34c:	0800f3a5 	.word	0x0800f3a5
 800f350:	0800f395 	.word	0x0800f395
 800f354:	0800f3a5 	.word	0x0800f3a5
 800f358:	0800f3a5 	.word	0x0800f3a5
 800f35c:	0800f3a5 	.word	0x0800f3a5
 800f360:	0800f3a5 	.word	0x0800f3a5
 800f364:	0800f3a5 	.word	0x0800f3a5
 800f368:	0800f3a5 	.word	0x0800f3a5
 800f36c:	0800f3a5 	.word	0x0800f3a5
 800f370:	0800f39d 	.word	0x0800f39d
 800f374:	2301      	movs	r3, #1
 800f376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f37a:	e0c3      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f37c:	2304      	movs	r3, #4
 800f37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f382:	e0bf      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f384:	2308      	movs	r3, #8
 800f386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f38a:	e0bb      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f38c:	2310      	movs	r3, #16
 800f38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f392:	e0b7      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f394:	2320      	movs	r3, #32
 800f396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f39a:	e0b3      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f39c:	2340      	movs	r3, #64	; 0x40
 800f39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3a2:	e0af      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f3a4:	2380      	movs	r3, #128	; 0x80
 800f3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3aa:	bf00      	nop
 800f3ac:	e0aa      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	4a79      	ldr	r2, [pc, #484]	; (800f598 <UART_SetConfig+0x664>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d132      	bne.n	800f41e <UART_SetConfig+0x4ea>
 800f3b8:	4b76      	ldr	r3, [pc, #472]	; (800f594 <UART_SetConfig+0x660>)
 800f3ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3bc:	f003 0307 	and.w	r3, r3, #7
 800f3c0:	2b05      	cmp	r3, #5
 800f3c2:	d827      	bhi.n	800f414 <UART_SetConfig+0x4e0>
 800f3c4:	a201      	add	r2, pc, #4	; (adr r2, 800f3cc <UART_SetConfig+0x498>)
 800f3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ca:	bf00      	nop
 800f3cc:	0800f3e5 	.word	0x0800f3e5
 800f3d0:	0800f3ed 	.word	0x0800f3ed
 800f3d4:	0800f3f5 	.word	0x0800f3f5
 800f3d8:	0800f3fd 	.word	0x0800f3fd
 800f3dc:	0800f405 	.word	0x0800f405
 800f3e0:	0800f40d 	.word	0x0800f40d
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3ea:	e08b      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f3ec:	2304      	movs	r3, #4
 800f3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3f2:	e087      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f3f4:	2308      	movs	r3, #8
 800f3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3fa:	e083      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f3fc:	2310      	movs	r3, #16
 800f3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f402:	e07f      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f404:	2320      	movs	r3, #32
 800f406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f40a:	e07b      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f40c:	2340      	movs	r3, #64	; 0x40
 800f40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f412:	e077      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f414:	2380      	movs	r3, #128	; 0x80
 800f416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f41a:	bf00      	nop
 800f41c:	e072      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	4a5e      	ldr	r2, [pc, #376]	; (800f59c <UART_SetConfig+0x668>)
 800f424:	4293      	cmp	r3, r2
 800f426:	d132      	bne.n	800f48e <UART_SetConfig+0x55a>
 800f428:	4b5a      	ldr	r3, [pc, #360]	; (800f594 <UART_SetConfig+0x660>)
 800f42a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f42c:	f003 0307 	and.w	r3, r3, #7
 800f430:	2b05      	cmp	r3, #5
 800f432:	d827      	bhi.n	800f484 <UART_SetConfig+0x550>
 800f434:	a201      	add	r2, pc, #4	; (adr r2, 800f43c <UART_SetConfig+0x508>)
 800f436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f43a:	bf00      	nop
 800f43c:	0800f455 	.word	0x0800f455
 800f440:	0800f45d 	.word	0x0800f45d
 800f444:	0800f465 	.word	0x0800f465
 800f448:	0800f46d 	.word	0x0800f46d
 800f44c:	0800f475 	.word	0x0800f475
 800f450:	0800f47d 	.word	0x0800f47d
 800f454:	2300      	movs	r3, #0
 800f456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f45a:	e053      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f45c:	2304      	movs	r3, #4
 800f45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f462:	e04f      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f464:	2308      	movs	r3, #8
 800f466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f46a:	e04b      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f46c:	2310      	movs	r3, #16
 800f46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f472:	e047      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f474:	2320      	movs	r3, #32
 800f476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f47a:	e043      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f47c:	2340      	movs	r3, #64	; 0x40
 800f47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f482:	e03f      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f484:	2380      	movs	r3, #128	; 0x80
 800f486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f48a:	bf00      	nop
 800f48c:	e03a      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	4a43      	ldr	r2, [pc, #268]	; (800f5a0 <UART_SetConfig+0x66c>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d132      	bne.n	800f4fe <UART_SetConfig+0x5ca>
 800f498:	4b3e      	ldr	r3, [pc, #248]	; (800f594 <UART_SetConfig+0x660>)
 800f49a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f49c:	f003 0307 	and.w	r3, r3, #7
 800f4a0:	2b05      	cmp	r3, #5
 800f4a2:	d827      	bhi.n	800f4f4 <UART_SetConfig+0x5c0>
 800f4a4:	a201      	add	r2, pc, #4	; (adr r2, 800f4ac <UART_SetConfig+0x578>)
 800f4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4aa:	bf00      	nop
 800f4ac:	0800f4c5 	.word	0x0800f4c5
 800f4b0:	0800f4cd 	.word	0x0800f4cd
 800f4b4:	0800f4d5 	.word	0x0800f4d5
 800f4b8:	0800f4dd 	.word	0x0800f4dd
 800f4bc:	0800f4e5 	.word	0x0800f4e5
 800f4c0:	0800f4ed 	.word	0x0800f4ed
 800f4c4:	2302      	movs	r3, #2
 800f4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4ca:	e01b      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f4cc:	2304      	movs	r3, #4
 800f4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4d2:	e017      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f4d4:	2308      	movs	r3, #8
 800f4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4da:	e013      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f4dc:	2310      	movs	r3, #16
 800f4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4e2:	e00f      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f4e4:	2320      	movs	r3, #32
 800f4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4ea:	e00b      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f4ec:	2340      	movs	r3, #64	; 0x40
 800f4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4f2:	e007      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f4f4:	2380      	movs	r3, #128	; 0x80
 800f4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4fa:	bf00      	nop
 800f4fc:	e002      	b.n	800f504 <UART_SetConfig+0x5d0>
 800f4fe:	2380      	movs	r3, #128	; 0x80
 800f500:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4a25      	ldr	r2, [pc, #148]	; (800f5a0 <UART_SetConfig+0x66c>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	f040 80b8 	bne.w	800f680 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f510:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f514:	2b08      	cmp	r3, #8
 800f516:	d019      	beq.n	800f54c <UART_SetConfig+0x618>
 800f518:	2b08      	cmp	r3, #8
 800f51a:	dc04      	bgt.n	800f526 <UART_SetConfig+0x5f2>
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d009      	beq.n	800f534 <UART_SetConfig+0x600>
 800f520:	2b04      	cmp	r3, #4
 800f522:	d00b      	beq.n	800f53c <UART_SetConfig+0x608>
 800f524:	e042      	b.n	800f5ac <UART_SetConfig+0x678>
 800f526:	2b20      	cmp	r3, #32
 800f528:	d02b      	beq.n	800f582 <UART_SetConfig+0x64e>
 800f52a:	2b40      	cmp	r3, #64	; 0x40
 800f52c:	d02c      	beq.n	800f588 <UART_SetConfig+0x654>
 800f52e:	2b10      	cmp	r3, #16
 800f530:	d014      	beq.n	800f55c <UART_SetConfig+0x628>
 800f532:	e03b      	b.n	800f5ac <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f534:	f7fb fad2 	bl	800aadc <HAL_RCCEx_GetD3PCLK1Freq>
 800f538:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f53a:	e03d      	b.n	800f5b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f53c:	f107 0314 	add.w	r3, r7, #20
 800f540:	4618      	mov	r0, r3
 800f542:	f7fb fae1 	bl	800ab08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f546:	69bb      	ldr	r3, [r7, #24]
 800f548:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f54a:	e035      	b.n	800f5b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f54c:	f107 0308 	add.w	r3, r7, #8
 800f550:	4618      	mov	r0, r3
 800f552:	f7fb fc25 	bl	800ada0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f55a:	e02d      	b.n	800f5b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f55c:	4b0d      	ldr	r3, [pc, #52]	; (800f594 <UART_SetConfig+0x660>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f003 0320 	and.w	r3, r3, #32
 800f564:	2b00      	cmp	r3, #0
 800f566:	d009      	beq.n	800f57c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f568:	4b0a      	ldr	r3, [pc, #40]	; (800f594 <UART_SetConfig+0x660>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	08db      	lsrs	r3, r3, #3
 800f56e:	f003 0303 	and.w	r3, r3, #3
 800f572:	4a0c      	ldr	r2, [pc, #48]	; (800f5a4 <UART_SetConfig+0x670>)
 800f574:	fa22 f303 	lsr.w	r3, r2, r3
 800f578:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f57a:	e01d      	b.n	800f5b8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800f57c:	4b09      	ldr	r3, [pc, #36]	; (800f5a4 <UART_SetConfig+0x670>)
 800f57e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f580:	e01a      	b.n	800f5b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f582:	4b09      	ldr	r3, [pc, #36]	; (800f5a8 <UART_SetConfig+0x674>)
 800f584:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f586:	e017      	b.n	800f5b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f58c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f58e:	e013      	b.n	800f5b8 <UART_SetConfig+0x684>
 800f590:	40011400 	.word	0x40011400
 800f594:	58024400 	.word	0x58024400
 800f598:	40007800 	.word	0x40007800
 800f59c:	40007c00 	.word	0x40007c00
 800f5a0:	58000c00 	.word	0x58000c00
 800f5a4:	03d09000 	.word	0x03d09000
 800f5a8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f5b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f000 824d 	beq.w	800fa5a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c4:	4aad      	ldr	r2, [pc, #692]	; (800f87c <UART_SetConfig+0x948>)
 800f5c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5d2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	685a      	ldr	r2, [r3, #4]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	005b      	lsls	r3, r3, #1
 800f5dc:	4413      	add	r3, r2
 800f5de:	6a3a      	ldr	r2, [r7, #32]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d305      	bcc.n	800f5f0 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f5ea:	6a3a      	ldr	r2, [r7, #32]
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d903      	bls.n	800f5f8 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f5f6:	e230      	b.n	800fa5a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f04f 0100 	mov.w	r1, #0
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f604:	4a9d      	ldr	r2, [pc, #628]	; (800f87c <UART_SetConfig+0x948>)
 800f606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	f04f 0400 	mov.w	r4, #0
 800f610:	461a      	mov	r2, r3
 800f612:	4623      	mov	r3, r4
 800f614:	f7f0 febc 	bl	8000390 <__aeabi_uldivmod>
 800f618:	4603      	mov	r3, r0
 800f61a:	460c      	mov	r4, r1
 800f61c:	4619      	mov	r1, r3
 800f61e:	4622      	mov	r2, r4
 800f620:	f04f 0300 	mov.w	r3, #0
 800f624:	f04f 0400 	mov.w	r4, #0
 800f628:	0214      	lsls	r4, r2, #8
 800f62a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800f62e:	020b      	lsls	r3, r1, #8
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	6852      	ldr	r2, [r2, #4]
 800f634:	0852      	lsrs	r2, r2, #1
 800f636:	4611      	mov	r1, r2
 800f638:	f04f 0200 	mov.w	r2, #0
 800f63c:	eb13 0b01 	adds.w	fp, r3, r1
 800f640:	eb44 0c02 	adc.w	ip, r4, r2
 800f644:	4658      	mov	r0, fp
 800f646:	4661      	mov	r1, ip
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	f04f 0400 	mov.w	r4, #0
 800f650:	461a      	mov	r2, r3
 800f652:	4623      	mov	r3, r4
 800f654:	f7f0 fe9c 	bl	8000390 <__aeabi_uldivmod>
 800f658:	4603      	mov	r3, r0
 800f65a:	460c      	mov	r4, r1
 800f65c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f664:	d308      	bcc.n	800f678 <UART_SetConfig+0x744>
 800f666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f66c:	d204      	bcs.n	800f678 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f674:	60da      	str	r2, [r3, #12]
 800f676:	e1f0      	b.n	800fa5a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800f678:	2301      	movs	r3, #1
 800f67a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f67e:	e1ec      	b.n	800fa5a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	69db      	ldr	r3, [r3, #28]
 800f684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f688:	f040 8100 	bne.w	800f88c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800f68c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f690:	2b40      	cmp	r3, #64	; 0x40
 800f692:	f200 80b7 	bhi.w	800f804 <UART_SetConfig+0x8d0>
 800f696:	a201      	add	r2, pc, #4	; (adr r2, 800f69c <UART_SetConfig+0x768>)
 800f698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69c:	0800f7a1 	.word	0x0800f7a1
 800f6a0:	0800f7a9 	.word	0x0800f7a9
 800f6a4:	0800f805 	.word	0x0800f805
 800f6a8:	0800f805 	.word	0x0800f805
 800f6ac:	0800f7b1 	.word	0x0800f7b1
 800f6b0:	0800f805 	.word	0x0800f805
 800f6b4:	0800f805 	.word	0x0800f805
 800f6b8:	0800f805 	.word	0x0800f805
 800f6bc:	0800f7c1 	.word	0x0800f7c1
 800f6c0:	0800f805 	.word	0x0800f805
 800f6c4:	0800f805 	.word	0x0800f805
 800f6c8:	0800f805 	.word	0x0800f805
 800f6cc:	0800f805 	.word	0x0800f805
 800f6d0:	0800f805 	.word	0x0800f805
 800f6d4:	0800f805 	.word	0x0800f805
 800f6d8:	0800f805 	.word	0x0800f805
 800f6dc:	0800f7d1 	.word	0x0800f7d1
 800f6e0:	0800f805 	.word	0x0800f805
 800f6e4:	0800f805 	.word	0x0800f805
 800f6e8:	0800f805 	.word	0x0800f805
 800f6ec:	0800f805 	.word	0x0800f805
 800f6f0:	0800f805 	.word	0x0800f805
 800f6f4:	0800f805 	.word	0x0800f805
 800f6f8:	0800f805 	.word	0x0800f805
 800f6fc:	0800f805 	.word	0x0800f805
 800f700:	0800f805 	.word	0x0800f805
 800f704:	0800f805 	.word	0x0800f805
 800f708:	0800f805 	.word	0x0800f805
 800f70c:	0800f805 	.word	0x0800f805
 800f710:	0800f805 	.word	0x0800f805
 800f714:	0800f805 	.word	0x0800f805
 800f718:	0800f805 	.word	0x0800f805
 800f71c:	0800f7f7 	.word	0x0800f7f7
 800f720:	0800f805 	.word	0x0800f805
 800f724:	0800f805 	.word	0x0800f805
 800f728:	0800f805 	.word	0x0800f805
 800f72c:	0800f805 	.word	0x0800f805
 800f730:	0800f805 	.word	0x0800f805
 800f734:	0800f805 	.word	0x0800f805
 800f738:	0800f805 	.word	0x0800f805
 800f73c:	0800f805 	.word	0x0800f805
 800f740:	0800f805 	.word	0x0800f805
 800f744:	0800f805 	.word	0x0800f805
 800f748:	0800f805 	.word	0x0800f805
 800f74c:	0800f805 	.word	0x0800f805
 800f750:	0800f805 	.word	0x0800f805
 800f754:	0800f805 	.word	0x0800f805
 800f758:	0800f805 	.word	0x0800f805
 800f75c:	0800f805 	.word	0x0800f805
 800f760:	0800f805 	.word	0x0800f805
 800f764:	0800f805 	.word	0x0800f805
 800f768:	0800f805 	.word	0x0800f805
 800f76c:	0800f805 	.word	0x0800f805
 800f770:	0800f805 	.word	0x0800f805
 800f774:	0800f805 	.word	0x0800f805
 800f778:	0800f805 	.word	0x0800f805
 800f77c:	0800f805 	.word	0x0800f805
 800f780:	0800f805 	.word	0x0800f805
 800f784:	0800f805 	.word	0x0800f805
 800f788:	0800f805 	.word	0x0800f805
 800f78c:	0800f805 	.word	0x0800f805
 800f790:	0800f805 	.word	0x0800f805
 800f794:	0800f805 	.word	0x0800f805
 800f798:	0800f805 	.word	0x0800f805
 800f79c:	0800f7fd 	.word	0x0800f7fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7a0:	f7f9 ffee 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800f7a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f7a6:	e033      	b.n	800f810 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f7a8:	f7fa f800 	bl	80097ac <HAL_RCC_GetPCLK2Freq>
 800f7ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f7ae:	e02f      	b.n	800f810 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7b0:	f107 0314 	add.w	r3, r7, #20
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7fb f9a7 	bl	800ab08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f7ba:	69bb      	ldr	r3, [r7, #24]
 800f7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f7be:	e027      	b.n	800f810 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7c0:	f107 0308 	add.w	r3, r7, #8
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fb faeb 	bl	800ada0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f7ce:	e01f      	b.n	800f810 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f7d0:	4b2b      	ldr	r3, [pc, #172]	; (800f880 <UART_SetConfig+0x94c>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f003 0320 	and.w	r3, r3, #32
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d009      	beq.n	800f7f0 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f7dc:	4b28      	ldr	r3, [pc, #160]	; (800f880 <UART_SetConfig+0x94c>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	08db      	lsrs	r3, r3, #3
 800f7e2:	f003 0303 	and.w	r3, r3, #3
 800f7e6:	4a27      	ldr	r2, [pc, #156]	; (800f884 <UART_SetConfig+0x950>)
 800f7e8:	fa22 f303 	lsr.w	r3, r2, r3
 800f7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f7ee:	e00f      	b.n	800f810 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800f7f0:	4b24      	ldr	r3, [pc, #144]	; (800f884 <UART_SetConfig+0x950>)
 800f7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f7f4:	e00c      	b.n	800f810 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f7f6:	4b24      	ldr	r3, [pc, #144]	; (800f888 <UART_SetConfig+0x954>)
 800f7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f7fa:	e009      	b.n	800f810 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f800:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f802:	e005      	b.n	800f810 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800f804:	2300      	movs	r3, #0
 800f806:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f808:	2301      	movs	r3, #1
 800f80a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f80e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f812:	2b00      	cmp	r3, #0
 800f814:	f000 8121 	beq.w	800fa5a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81c:	4a17      	ldr	r2, [pc, #92]	; (800f87c <UART_SetConfig+0x948>)
 800f81e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f822:	461a      	mov	r2, r3
 800f824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f826:	fbb3 f3f2 	udiv	r3, r3, r2
 800f82a:	005a      	lsls	r2, r3, #1
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	085b      	lsrs	r3, r3, #1
 800f832:	441a      	add	r2, r3
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	fbb2 f3f3 	udiv	r3, r2, r3
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f842:	2b0f      	cmp	r3, #15
 800f844:	d916      	bls.n	800f874 <UART_SetConfig+0x940>
 800f846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f84c:	d212      	bcs.n	800f874 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f850:	b29b      	uxth	r3, r3
 800f852:	f023 030f 	bic.w	r3, r3, #15
 800f856:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85a:	085b      	lsrs	r3, r3, #1
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	f003 0307 	and.w	r3, r3, #7
 800f862:	b29a      	uxth	r2, r3
 800f864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f866:	4313      	orrs	r3, r2
 800f868:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f870:	60da      	str	r2, [r3, #12]
 800f872:	e0f2      	b.n	800fa5a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f874:	2301      	movs	r3, #1
 800f876:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f87a:	e0ee      	b.n	800fa5a <UART_SetConfig+0xb26>
 800f87c:	0801a044 	.word	0x0801a044
 800f880:	58024400 	.word	0x58024400
 800f884:	03d09000 	.word	0x03d09000
 800f888:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800f88c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f890:	2b40      	cmp	r3, #64	; 0x40
 800f892:	f200 80b7 	bhi.w	800fa04 <UART_SetConfig+0xad0>
 800f896:	a201      	add	r2, pc, #4	; (adr r2, 800f89c <UART_SetConfig+0x968>)
 800f898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f89c:	0800f9a1 	.word	0x0800f9a1
 800f8a0:	0800f9a9 	.word	0x0800f9a9
 800f8a4:	0800fa05 	.word	0x0800fa05
 800f8a8:	0800fa05 	.word	0x0800fa05
 800f8ac:	0800f9b1 	.word	0x0800f9b1
 800f8b0:	0800fa05 	.word	0x0800fa05
 800f8b4:	0800fa05 	.word	0x0800fa05
 800f8b8:	0800fa05 	.word	0x0800fa05
 800f8bc:	0800f9c1 	.word	0x0800f9c1
 800f8c0:	0800fa05 	.word	0x0800fa05
 800f8c4:	0800fa05 	.word	0x0800fa05
 800f8c8:	0800fa05 	.word	0x0800fa05
 800f8cc:	0800fa05 	.word	0x0800fa05
 800f8d0:	0800fa05 	.word	0x0800fa05
 800f8d4:	0800fa05 	.word	0x0800fa05
 800f8d8:	0800fa05 	.word	0x0800fa05
 800f8dc:	0800f9d1 	.word	0x0800f9d1
 800f8e0:	0800fa05 	.word	0x0800fa05
 800f8e4:	0800fa05 	.word	0x0800fa05
 800f8e8:	0800fa05 	.word	0x0800fa05
 800f8ec:	0800fa05 	.word	0x0800fa05
 800f8f0:	0800fa05 	.word	0x0800fa05
 800f8f4:	0800fa05 	.word	0x0800fa05
 800f8f8:	0800fa05 	.word	0x0800fa05
 800f8fc:	0800fa05 	.word	0x0800fa05
 800f900:	0800fa05 	.word	0x0800fa05
 800f904:	0800fa05 	.word	0x0800fa05
 800f908:	0800fa05 	.word	0x0800fa05
 800f90c:	0800fa05 	.word	0x0800fa05
 800f910:	0800fa05 	.word	0x0800fa05
 800f914:	0800fa05 	.word	0x0800fa05
 800f918:	0800fa05 	.word	0x0800fa05
 800f91c:	0800f9f7 	.word	0x0800f9f7
 800f920:	0800fa05 	.word	0x0800fa05
 800f924:	0800fa05 	.word	0x0800fa05
 800f928:	0800fa05 	.word	0x0800fa05
 800f92c:	0800fa05 	.word	0x0800fa05
 800f930:	0800fa05 	.word	0x0800fa05
 800f934:	0800fa05 	.word	0x0800fa05
 800f938:	0800fa05 	.word	0x0800fa05
 800f93c:	0800fa05 	.word	0x0800fa05
 800f940:	0800fa05 	.word	0x0800fa05
 800f944:	0800fa05 	.word	0x0800fa05
 800f948:	0800fa05 	.word	0x0800fa05
 800f94c:	0800fa05 	.word	0x0800fa05
 800f950:	0800fa05 	.word	0x0800fa05
 800f954:	0800fa05 	.word	0x0800fa05
 800f958:	0800fa05 	.word	0x0800fa05
 800f95c:	0800fa05 	.word	0x0800fa05
 800f960:	0800fa05 	.word	0x0800fa05
 800f964:	0800fa05 	.word	0x0800fa05
 800f968:	0800fa05 	.word	0x0800fa05
 800f96c:	0800fa05 	.word	0x0800fa05
 800f970:	0800fa05 	.word	0x0800fa05
 800f974:	0800fa05 	.word	0x0800fa05
 800f978:	0800fa05 	.word	0x0800fa05
 800f97c:	0800fa05 	.word	0x0800fa05
 800f980:	0800fa05 	.word	0x0800fa05
 800f984:	0800fa05 	.word	0x0800fa05
 800f988:	0800fa05 	.word	0x0800fa05
 800f98c:	0800fa05 	.word	0x0800fa05
 800f990:	0800fa05 	.word	0x0800fa05
 800f994:	0800fa05 	.word	0x0800fa05
 800f998:	0800fa05 	.word	0x0800fa05
 800f99c:	0800f9fd 	.word	0x0800f9fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9a0:	f7f9 feee 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800f9a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f9a6:	e033      	b.n	800fa10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f9a8:	f7f9 ff00 	bl	80097ac <HAL_RCC_GetPCLK2Freq>
 800f9ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f9ae:	e02f      	b.n	800fa10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9b0:	f107 0314 	add.w	r3, r7, #20
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fb f8a7 	bl	800ab08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f9be:	e027      	b.n	800fa10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9c0:	f107 0308 	add.w	r3, r7, #8
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fb f9eb 	bl	800ada0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f9ce:	e01f      	b.n	800fa10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9d0:	4b2c      	ldr	r3, [pc, #176]	; (800fa84 <UART_SetConfig+0xb50>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f003 0320 	and.w	r3, r3, #32
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d009      	beq.n	800f9f0 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f9dc:	4b29      	ldr	r3, [pc, #164]	; (800fa84 <UART_SetConfig+0xb50>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	08db      	lsrs	r3, r3, #3
 800f9e2:	f003 0303 	and.w	r3, r3, #3
 800f9e6:	4a28      	ldr	r2, [pc, #160]	; (800fa88 <UART_SetConfig+0xb54>)
 800f9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800f9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f9ee:	e00f      	b.n	800fa10 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800f9f0:	4b25      	ldr	r3, [pc, #148]	; (800fa88 <UART_SetConfig+0xb54>)
 800f9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f9f4:	e00c      	b.n	800fa10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f9f6:	4b25      	ldr	r3, [pc, #148]	; (800fa8c <UART_SetConfig+0xb58>)
 800f9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f9fa:	e009      	b.n	800fa10 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f9fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fa02:	e005      	b.n	800fa10 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800fa04:	2300      	movs	r3, #0
 800fa06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fa0e:	bf00      	nop
    }

    if (pclk != 0U)
 800fa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d021      	beq.n	800fa5a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa1a:	4a1d      	ldr	r2, [pc, #116]	; (800fa90 <UART_SetConfig+0xb5c>)
 800fa1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa20:	461a      	mov	r2, r3
 800fa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa24:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	085b      	lsrs	r3, r3, #1
 800fa2e:	441a      	add	r2, r3
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3e:	2b0f      	cmp	r3, #15
 800fa40:	d908      	bls.n	800fa54 <UART_SetConfig+0xb20>
 800fa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa48:	d204      	bcs.n	800fa54 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa50:	60da      	str	r2, [r3, #12]
 800fa52:	e002      	b.n	800fa5a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800fa54:	2301      	movs	r3, #1
 800fa56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2201      	movs	r2, #1
 800fa66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2200      	movs	r2, #0
 800fa74:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800fa76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3738      	adds	r7, #56	; 0x38
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800fa84:	58024400 	.word	0x58024400
 800fa88:	03d09000 	.word	0x03d09000
 800fa8c:	003d0900 	.word	0x003d0900
 800fa90:	0801a044 	.word	0x0801a044

0800fa94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faa0:	f003 0301 	and.w	r3, r3, #1
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d00a      	beq.n	800fabe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	430a      	orrs	r2, r1
 800fabc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fac2:	f003 0302 	and.w	r3, r3, #2
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d00a      	beq.n	800fae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	430a      	orrs	r2, r1
 800fade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fae4:	f003 0304 	and.w	r3, r3, #4
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00a      	beq.n	800fb02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	430a      	orrs	r2, r1
 800fb00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb06:	f003 0308 	and.w	r3, r3, #8
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d00a      	beq.n	800fb24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	430a      	orrs	r2, r1
 800fb22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb28:	f003 0310 	and.w	r3, r3, #16
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d00a      	beq.n	800fb46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	689b      	ldr	r3, [r3, #8]
 800fb36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	430a      	orrs	r2, r1
 800fb44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb4a:	f003 0320 	and.w	r3, r3, #32
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d00a      	beq.n	800fb68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	689b      	ldr	r3, [r3, #8]
 800fb58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	430a      	orrs	r2, r1
 800fb66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d01a      	beq.n	800fbaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	430a      	orrs	r2, r1
 800fb88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb92:	d10a      	bne.n	800fbaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	685b      	ldr	r3, [r3, #4]
 800fb9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	430a      	orrs	r2, r1
 800fba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d00a      	beq.n	800fbcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	430a      	orrs	r2, r1
 800fbca:	605a      	str	r2, [r3, #4]
  }
}
 800fbcc:	bf00      	nop
 800fbce:	370c      	adds	r7, #12
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b086      	sub	sp, #24
 800fbdc:	af02      	add	r7, sp, #8
 800fbde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fbe8:	f7f3 fd8a 	bl	8003700 <HAL_GetTick>
 800fbec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f003 0308 	and.w	r3, r3, #8
 800fbf8:	2b08      	cmp	r3, #8
 800fbfa:	d10e      	bne.n	800fc1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fbfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2200      	movs	r2, #0
 800fc06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 f82c 	bl	800fc68 <UART_WaitOnFlagUntilTimeout>
 800fc10:	4603      	mov	r3, r0
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d001      	beq.n	800fc1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc16:	2303      	movs	r3, #3
 800fc18:	e022      	b.n	800fc60 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f003 0304 	and.w	r3, r3, #4
 800fc24:	2b04      	cmp	r3, #4
 800fc26:	d10e      	bne.n	800fc46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc2c:	9300      	str	r3, [sp, #0]
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f000 f816 	bl	800fc68 <UART_WaitOnFlagUntilTimeout>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d001      	beq.n	800fc46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc42:	2303      	movs	r3, #3
 800fc44:	e00c      	b.n	800fc60 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2220      	movs	r2, #32
 800fc4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2220      	movs	r2, #32
 800fc52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fc5e:	2300      	movs	r3, #0
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3710      	adds	r7, #16
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	603b      	str	r3, [r7, #0]
 800fc74:	4613      	mov	r3, r2
 800fc76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc78:	e062      	b.n	800fd40 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc7a:	69bb      	ldr	r3, [r7, #24]
 800fc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc80:	d05e      	beq.n	800fd40 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc82:	f7f3 fd3d 	bl	8003700 <HAL_GetTick>
 800fc86:	4602      	mov	r2, r0
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	1ad3      	subs	r3, r2, r3
 800fc8c:	69ba      	ldr	r2, [r7, #24]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d302      	bcc.n	800fc98 <UART_WaitOnFlagUntilTimeout+0x30>
 800fc92:	69bb      	ldr	r3, [r7, #24]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d11d      	bne.n	800fcd4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fca6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	689a      	ldr	r2, [r3, #8]
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f022 0201 	bic.w	r2, r2, #1
 800fcb6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2220      	movs	r2, #32
 800fcbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2220      	movs	r2, #32
 800fcc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2200      	movs	r2, #0
 800fccc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800fcd0:	2303      	movs	r3, #3
 800fcd2:	e045      	b.n	800fd60 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f003 0304 	and.w	r3, r3, #4
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d02e      	beq.n	800fd40 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	69db      	ldr	r3, [r3, #28]
 800fce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fcec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fcf0:	d126      	bne.n	800fd40 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fcfa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fd0a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	689a      	ldr	r2, [r3, #8]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f022 0201 	bic.w	r2, r2, #1
 800fd1a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2220      	movs	r2, #32
 800fd20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2220      	movs	r2, #32
 800fd28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2220      	movs	r2, #32
 800fd30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800fd3c:	2303      	movs	r3, #3
 800fd3e:	e00f      	b.n	800fd60 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	69da      	ldr	r2, [r3, #28]
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	4013      	ands	r3, r2
 800fd4a:	68ba      	ldr	r2, [r7, #8]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	bf0c      	ite	eq
 800fd50:	2301      	moveq	r3, #1
 800fd52:	2300      	movne	r3, #0
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	461a      	mov	r2, r3
 800fd58:	79fb      	ldrb	r3, [r7, #7]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d08d      	beq.n	800fc7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd5e:	2300      	movs	r3, #0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3710      	adds	r7, #16
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b083      	sub	sp, #12
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800fd7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	689a      	ldr	r2, [r3, #8]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800fd8e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2220      	movs	r2, #32
 800fd94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800fd98:	bf00      	nop
 800fd9a:	370c      	adds	r7, #12
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fdba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	6899      	ldr	r1, [r3, #8]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	4b08      	ldr	r3, [pc, #32]	; (800fde8 <UART_EndRxTransfer+0x44>)
 800fdc8:	400b      	ands	r3, r1
 800fdca:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2220      	movs	r2, #32
 800fdd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800fdda:	bf00      	nop
 800fddc:	370c      	adds	r7, #12
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr
 800fde6:	bf00      	nop
 800fde8:	effffffe 	.word	0xeffffffe

0800fdec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b084      	sub	sp, #16
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	69db      	ldr	r3, [r3, #28]
 800fdfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe02:	d01f      	beq.n	800fe44 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2200      	movs	r2, #0
 800fe08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fe1a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	689a      	ldr	r2, [r3, #8]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f022 0201 	bic.w	r2, r2, #1
 800fe2a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	689a      	ldr	r2, [r3, #8]
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe3a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2220      	movs	r2, #32
 800fe40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f7ff f861 	bl	800ef0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe4a:	bf00      	nop
 800fe4c:	3710      	adds	r7, #16
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}

0800fe52 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fe52:	b580      	push	{r7, lr}
 800fe54:	b084      	sub	sp, #16
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f7f0 fe63 	bl	8000b2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe66:	bf00      	nop
 800fe68:	3710      	adds	r7, #16
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}

0800fe6e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe6e:	b580      	push	{r7, lr}
 800fe70:	b086      	sub	sp, #24
 800fe72:	af00      	add	r7, sp, #0
 800fe74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe7a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe8a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe96:	2b80      	cmp	r3, #128	; 0x80
 800fe98:	d109      	bne.n	800feae <UART_DMAError+0x40>
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	2b21      	cmp	r3, #33	; 0x21
 800fe9e:	d106      	bne.n	800feae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	2200      	movs	r2, #0
 800fea4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fea8:	6978      	ldr	r0, [r7, #20]
 800feaa:	f7ff ff5d 	bl	800fd68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	689b      	ldr	r3, [r3, #8]
 800feb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feb8:	2b40      	cmp	r3, #64	; 0x40
 800feba:	d109      	bne.n	800fed0 <UART_DMAError+0x62>
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2b22      	cmp	r3, #34	; 0x22
 800fec0:	d106      	bne.n	800fed0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	2200      	movs	r2, #0
 800fec6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800feca:	6978      	ldr	r0, [r7, #20]
 800fecc:	f7ff ff6a 	bl	800fda4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fed6:	f043 0210 	orr.w	r2, r3, #16
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fee0:	6978      	ldr	r0, [r7, #20]
 800fee2:	f7ff f81d 	bl	800ef20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fee6:	bf00      	nop
 800fee8:	3718      	adds	r7, #24
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}

0800feee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800feee:	b480      	push	{r7}
 800fef0:	b085      	sub	sp, #20
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d101      	bne.n	800ff04 <HAL_UARTEx_DisableFifoMode+0x16>
 800ff00:	2302      	movs	r3, #2
 800ff02:	e027      	b.n	800ff54 <HAL_UARTEx_DisableFifoMode+0x66>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2201      	movs	r2, #1
 800ff08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2224      	movs	r2, #36	; 0x24
 800ff10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f022 0201 	bic.w	r2, r2, #1
 800ff2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	68fa      	ldr	r2, [r7, #12]
 800ff40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2220      	movs	r2, #32
 800ff46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ff52:	2300      	movs	r3, #0
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3714      	adds	r7, #20
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d101      	bne.n	800ff78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff74:	2302      	movs	r3, #2
 800ff76:	e02d      	b.n	800ffd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2224      	movs	r2, #36	; 0x24
 800ff84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f022 0201 	bic.w	r2, r2, #1
 800ff9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	689b      	ldr	r3, [r3, #8]
 800ffa6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	683a      	ldr	r2, [r7, #0]
 800ffb0:	430a      	orrs	r2, r1
 800ffb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 f84f 	bl	8010058 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	68fa      	ldr	r2, [r7, #12]
 800ffc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2220      	movs	r2, #32
 800ffc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ffd2:	2300      	movs	r3, #0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3710      	adds	r7, #16
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	d101      	bne.n	800fff4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fff0:	2302      	movs	r3, #2
 800fff2:	e02d      	b.n	8010050 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2201      	movs	r2, #1
 800fff8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2224      	movs	r2, #36	; 0x24
 8010000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f022 0201 	bic.w	r2, r2, #1
 801001a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	689b      	ldr	r3, [r3, #8]
 8010022:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	683a      	ldr	r2, [r7, #0]
 801002c:	430a      	orrs	r2, r1
 801002e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 f811 	bl	8010058 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	68fa      	ldr	r2, [r7, #12]
 801003c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2220      	movs	r2, #32
 8010042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2200      	movs	r2, #0
 801004a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801004e:	2300      	movs	r3, #0
}
 8010050:	4618      	mov	r0, r3
 8010052:	3710      	adds	r7, #16
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010058:	b480      	push	{r7}
 801005a:	b089      	sub	sp, #36	; 0x24
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010060:	4a2f      	ldr	r2, [pc, #188]	; (8010120 <UARTEx_SetNbDataToProcess+0xc8>)
 8010062:	f107 0314 	add.w	r3, r7, #20
 8010066:	e892 0003 	ldmia.w	r2, {r0, r1}
 801006a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 801006e:	4a2d      	ldr	r2, [pc, #180]	; (8010124 <UARTEx_SetNbDataToProcess+0xcc>)
 8010070:	f107 030c 	add.w	r3, r7, #12
 8010074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010078:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010080:	2b00      	cmp	r3, #0
 8010082:	d108      	bne.n	8010096 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2201      	movs	r2, #1
 8010088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2201      	movs	r2, #1
 8010090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010094:	e03d      	b.n	8010112 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010096:	2310      	movs	r3, #16
 8010098:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801009a:	2310      	movs	r3, #16
 801009c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	689b      	ldr	r3, [r3, #8]
 80100a4:	0e5b      	lsrs	r3, r3, #25
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	f003 0307 	and.w	r3, r3, #7
 80100ac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	689b      	ldr	r3, [r3, #8]
 80100b4:	0f5b      	lsrs	r3, r3, #29
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	f003 0307 	and.w	r3, r3, #7
 80100bc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80100be:	7fbb      	ldrb	r3, [r7, #30]
 80100c0:	7f3a      	ldrb	r2, [r7, #28]
 80100c2:	f107 0120 	add.w	r1, r7, #32
 80100c6:	440a      	add	r2, r1
 80100c8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80100cc:	fb02 f303 	mul.w	r3, r2, r3
 80100d0:	7f3a      	ldrb	r2, [r7, #28]
 80100d2:	f107 0120 	add.w	r1, r7, #32
 80100d6:	440a      	add	r2, r1
 80100d8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80100dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80100e0:	b29a      	uxth	r2, r3
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80100e8:	7ffb      	ldrb	r3, [r7, #31]
 80100ea:	7f7a      	ldrb	r2, [r7, #29]
 80100ec:	f107 0120 	add.w	r1, r7, #32
 80100f0:	440a      	add	r2, r1
 80100f2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80100f6:	fb02 f303 	mul.w	r3, r2, r3
 80100fa:	7f7a      	ldrb	r2, [r7, #29]
 80100fc:	f107 0120 	add.w	r1, r7, #32
 8010100:	440a      	add	r2, r1
 8010102:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010106:	fb93 f3f2 	sdiv	r3, r3, r2
 801010a:	b29a      	uxth	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010112:	bf00      	nop
 8010114:	3724      	adds	r7, #36	; 0x24
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr
 801011e:	bf00      	nop
 8010120:	08019f84 	.word	0x08019f84
 8010124:	08019f8c 	.word	0x08019f8c

08010128 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010128:	b084      	sub	sp, #16
 801012a:	b480      	push	{r7}
 801012c:	b085      	sub	sp, #20
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
 8010132:	f107 001c 	add.w	r0, r7, #28
 8010136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801013a:	2300      	movs	r3, #0
 801013c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801013e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8010140:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010142:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8010146:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010148:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 801014a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801014c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 801014e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010150:	68fa      	ldr	r2, [r7, #12]
 8010152:	4313      	orrs	r3, r2
 8010154:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	685a      	ldr	r2, [r3, #4]
 801015a:	4b07      	ldr	r3, [pc, #28]	; (8010178 <SDMMC_Init+0x50>)
 801015c:	4013      	ands	r3, r2
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	431a      	orrs	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010166:	2300      	movs	r3, #0
}
 8010168:	4618      	mov	r0, r3
 801016a:	3714      	adds	r7, #20
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	b004      	add	sp, #16
 8010174:	4770      	bx	lr
 8010176:	bf00      	nop
 8010178:	ffc02c00 	.word	0xffc02c00

0801017c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801018a:	4618      	mov	r0, r3
 801018c:	370c      	adds	r7, #12
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr

08010196 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010196:	b480      	push	{r7}
 8010198:	b083      	sub	sp, #12
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
 801019e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	681a      	ldr	r2, [r3, #0]
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101aa:	2300      	movs	r3, #0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	370c      	adds	r7, #12
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr

080101b8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f043 0203 	orr.w	r2, r3, #3
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80101cc:	2300      	movs	r3, #0
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	370c      	adds	r7, #12
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr

080101da <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80101da:	b480      	push	{r7}
 80101dc:	b083      	sub	sp, #12
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f003 0303 	and.w	r3, r3, #3
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	370c      	adds	r7, #12
 80101ee:	46bd      	mov	sp, r7
 80101f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f4:	4770      	bx	lr
	...

080101f8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010202:	2300      	movs	r3, #0
 8010204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010216:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801021c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010222:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010224:	68fa      	ldr	r2, [r7, #12]
 8010226:	4313      	orrs	r3, r2
 8010228:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	68da      	ldr	r2, [r3, #12]
 801022e:	4b06      	ldr	r3, [pc, #24]	; (8010248 <SDMMC_SendCommand+0x50>)
 8010230:	4013      	ands	r3, r2
 8010232:	68fa      	ldr	r2, [r7, #12]
 8010234:	431a      	orrs	r2, r3
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801023a:	2300      	movs	r3, #0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3714      	adds	r7, #20
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	fffee0c0 	.word	0xfffee0c0

0801024c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	691b      	ldr	r3, [r3, #16]
 8010258:	b2db      	uxtb	r3, r3
}
 801025a:	4618      	mov	r0, r3
 801025c:	370c      	adds	r7, #12
 801025e:	46bd      	mov	sp, r7
 8010260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010264:	4770      	bx	lr

08010266 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010266:	b480      	push	{r7}
 8010268:	b085      	sub	sp, #20
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	3314      	adds	r3, #20
 8010274:	461a      	mov	r2, r3
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	4413      	add	r3, r2
 801027a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
}
 8010280:	4618      	mov	r0, r3
 8010282:	3714      	adds	r7, #20
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr

0801028c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 801028c:	b480      	push	{r7}
 801028e:	b085      	sub	sp, #20
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010296:	2300      	movs	r3, #0
 8010298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	685a      	ldr	r2, [r3, #4]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80102b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80102be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	4313      	orrs	r3, r2
 80102c4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	431a      	orrs	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80102d6:	2300      	movs	r3, #0

}
 80102d8:	4618      	mov	r0, r3
 80102da:	3714      	adds	r7, #20
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr

080102e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b088      	sub	sp, #32
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80102f2:	2310      	movs	r3, #16
 80102f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102fc:	2300      	movs	r3, #0
 80102fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010304:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010306:	f107 0308 	add.w	r3, r7, #8
 801030a:	4619      	mov	r1, r3
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f7ff ff73 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010312:	f241 3288 	movw	r2, #5000	; 0x1388
 8010316:	2110      	movs	r1, #16
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 faaf 	bl	801087c <SDMMC_GetCmdResp1>
 801031e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010320:	69fb      	ldr	r3, [r7, #28]
}
 8010322:	4618      	mov	r0, r3
 8010324:	3720      	adds	r7, #32
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}

0801032a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b088      	sub	sp, #32
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
 8010332:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010338:	2311      	movs	r3, #17
 801033a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801033c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010342:	2300      	movs	r3, #0
 8010344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801034a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801034c:	f107 0308 	add.w	r3, r7, #8
 8010350:	4619      	mov	r1, r3
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7ff ff50 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010358:	f241 3288 	movw	r2, #5000	; 0x1388
 801035c:	2111      	movs	r1, #17
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f000 fa8c 	bl	801087c <SDMMC_GetCmdResp1>
 8010364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010366:	69fb      	ldr	r3, [r7, #28]
}
 8010368:	4618      	mov	r0, r3
 801036a:	3720      	adds	r7, #32
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}

08010370 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b088      	sub	sp, #32
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801037e:	2312      	movs	r3, #18
 8010380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010388:	2300      	movs	r3, #0
 801038a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801038c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010390:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010392:	f107 0308 	add.w	r3, r7, #8
 8010396:	4619      	mov	r1, r3
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7ff ff2d 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801039e:	f241 3288 	movw	r2, #5000	; 0x1388
 80103a2:	2112      	movs	r1, #18
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f000 fa69 	bl	801087c <SDMMC_GetCmdResp1>
 80103aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ac:	69fb      	ldr	r3, [r7, #28]
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3720      	adds	r7, #32
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b088      	sub	sp, #32
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
 80103be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80103c4:	2318      	movs	r3, #24
 80103c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103ce:	2300      	movs	r3, #0
 80103d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103d8:	f107 0308 	add.w	r3, r7, #8
 80103dc:	4619      	mov	r1, r3
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f7ff ff0a 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80103e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80103e8:	2118      	movs	r1, #24
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 fa46 	bl	801087c <SDMMC_GetCmdResp1>
 80103f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103f2:	69fb      	ldr	r3, [r7, #28]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3720      	adds	r7, #32
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b088      	sub	sp, #32
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801040a:	2319      	movs	r3, #25
 801040c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801040e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010414:	2300      	movs	r3, #0
 8010416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801041c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801041e:	f107 0308 	add.w	r3, r7, #8
 8010422:	4619      	mov	r1, r3
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7ff fee7 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801042a:	f241 3288 	movw	r2, #5000	; 0x1388
 801042e:	2119      	movs	r1, #25
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f000 fa23 	bl	801087c <SDMMC_GetCmdResp1>
 8010436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010438:	69fb      	ldr	r3, [r7, #28]
}
 801043a:	4618      	mov	r0, r3
 801043c:	3720      	adds	r7, #32
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
	...

08010444 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b088      	sub	sp, #32
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801044c:	2300      	movs	r3, #0
 801044e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010450:	230c      	movs	r3, #12
 8010452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010458:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801045a:	2300      	movs	r3, #0
 801045c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801045e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010462:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	68db      	ldr	r3, [r3, #12]
 8010474:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801047c:	f107 0308 	add.w	r3, r7, #8
 8010480:	4619      	mov	r1, r3
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7ff feb8 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010488:	4a0b      	ldr	r2, [pc, #44]	; (80104b8 <SDMMC_CmdStopTransfer+0x74>)
 801048a:	210c      	movs	r1, #12
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 f9f5 	bl	801087c <SDMMC_GetCmdResp1>
 8010492:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104a6:	d101      	bne.n	80104ac <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80104a8:	2300      	movs	r3, #0
 80104aa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80104ac:	69fb      	ldr	r3, [r7, #28]
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3720      	adds	r7, #32
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	05f5e100 	.word	0x05f5e100

080104bc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b08a      	sub	sp, #40	; 0x28
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80104cc:	2307      	movs	r3, #7
 80104ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104d4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104d6:	2300      	movs	r3, #0
 80104d8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104de:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104e0:	f107 0310 	add.w	r3, r7, #16
 80104e4:	4619      	mov	r1, r3
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f7ff fe86 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80104ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80104f0:	2107      	movs	r1, #7
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	f000 f9c2 	bl	801087c <SDMMC_GetCmdResp1>
 80104f8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80104fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3728      	adds	r7, #40	; 0x28
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b088      	sub	sp, #32
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801050c:	2300      	movs	r3, #0
 801050e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010510:	2300      	movs	r3, #0
 8010512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010514:	2300      	movs	r3, #0
 8010516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010518:	2300      	movs	r3, #0
 801051a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801051c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010520:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010522:	f107 0308 	add.w	r3, r7, #8
 8010526:	4619      	mov	r1, r3
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f7ff fe65 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f000 f976 	bl	8010820 <SDMMC_GetCmdError>
 8010534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010536:	69fb      	ldr	r3, [r7, #28]
}
 8010538:	4618      	mov	r0, r3
 801053a:	3720      	adds	r7, #32
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b088      	sub	sp, #32
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010548:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801054c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801054e:	2308      	movs	r3, #8
 8010550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010558:	2300      	movs	r3, #0
 801055a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010560:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010562:	f107 0308 	add.w	r3, r7, #8
 8010566:	4619      	mov	r1, r3
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f7ff fe45 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f000 fb78 	bl	8010c64 <SDMMC_GetCmdResp7>
 8010574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010576:	69fb      	ldr	r3, [r7, #28]
}
 8010578:	4618      	mov	r0, r3
 801057a:	3720      	adds	r7, #32
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b088      	sub	sp, #32
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801058e:	2337      	movs	r3, #55	; 0x37
 8010590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010598:	2300      	movs	r3, #0
 801059a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105a2:	f107 0308 	add.w	r3, r7, #8
 80105a6:	4619      	mov	r1, r3
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f7ff fe25 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80105ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80105b2:	2137      	movs	r1, #55	; 0x37
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 f961 	bl	801087c <SDMMC_GetCmdResp1>
 80105ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105bc:	69fb      	ldr	r3, [r7, #28]
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3720      	adds	r7, #32
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b088      	sub	sp, #32
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
 80105ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80105d4:	2329      	movs	r3, #41	; 0x29
 80105d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105de:	2300      	movs	r3, #0
 80105e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105e8:	f107 0308 	add.w	r3, r7, #8
 80105ec:	4619      	mov	r1, r3
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f7ff fe02 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f000 fa7d 	bl	8010af4 <SDMMC_GetCmdResp3>
 80105fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105fc:	69fb      	ldr	r3, [r7, #28]
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3720      	adds	r7, #32
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010606:	b580      	push	{r7, lr}
 8010608:	b088      	sub	sp, #32
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
 801060e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010614:	2306      	movs	r3, #6
 8010616:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010618:	f44f 7380 	mov.w	r3, #256	; 0x100
 801061c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801061e:	2300      	movs	r3, #0
 8010620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010626:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010628:	f107 0308 	add.w	r3, r7, #8
 801062c:	4619      	mov	r1, r3
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f7ff fde2 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010634:	f241 3288 	movw	r2, #5000	; 0x1388
 8010638:	2106      	movs	r1, #6
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f000 f91e 	bl	801087c <SDMMC_GetCmdResp1>
 8010640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010642:	69fb      	ldr	r3, [r7, #28]
}
 8010644:	4618      	mov	r0, r3
 8010646:	3720      	adds	r7, #32
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b088      	sub	sp, #32
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010654:	2300      	movs	r3, #0
 8010656:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010658:	2333      	movs	r3, #51	; 0x33
 801065a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801065c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010662:	2300      	movs	r3, #0
 8010664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801066a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801066c:	f107 0308 	add.w	r3, r7, #8
 8010670:	4619      	mov	r1, r3
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f7ff fdc0 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010678:	f241 3288 	movw	r2, #5000	; 0x1388
 801067c:	2133      	movs	r1, #51	; 0x33
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f000 f8fc 	bl	801087c <SDMMC_GetCmdResp1>
 8010684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010686:	69fb      	ldr	r3, [r7, #28]
}
 8010688:	4618      	mov	r0, r3
 801068a:	3720      	adds	r7, #32
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b088      	sub	sp, #32
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010698:	2300      	movs	r3, #0
 801069a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801069c:	2302      	movs	r3, #2
 801069e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80106a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106a6:	2300      	movs	r3, #0
 80106a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106b0:	f107 0308 	add.w	r3, r7, #8
 80106b4:	4619      	mov	r1, r3
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f7ff fd9e 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f000 f9cf 	bl	8010a60 <SDMMC_GetCmdResp2>
 80106c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106c4:	69fb      	ldr	r3, [r7, #28]
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3720      	adds	r7, #32
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}

080106ce <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80106ce:	b580      	push	{r7, lr}
 80106d0:	b088      	sub	sp, #32
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	6078      	str	r0, [r7, #4]
 80106d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106dc:	2309      	movs	r3, #9
 80106de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80106e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106e6:	2300      	movs	r3, #0
 80106e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106f0:	f107 0308 	add.w	r3, r7, #8
 80106f4:	4619      	mov	r1, r3
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7ff fd7e 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f000 f9af 	bl	8010a60 <SDMMC_GetCmdResp2>
 8010702:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010704:	69fb      	ldr	r3, [r7, #28]
}
 8010706:	4618      	mov	r0, r3
 8010708:	3720      	adds	r7, #32
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}

0801070e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801070e:	b580      	push	{r7, lr}
 8010710:	b088      	sub	sp, #32
 8010712:	af00      	add	r7, sp, #0
 8010714:	6078      	str	r0, [r7, #4]
 8010716:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010718:	2300      	movs	r3, #0
 801071a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801071c:	2303      	movs	r3, #3
 801071e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010726:	2300      	movs	r3, #0
 8010728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801072e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010730:	f107 0308 	add.w	r3, r7, #8
 8010734:	4619      	mov	r1, r3
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7ff fd5e 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801073c:	683a      	ldr	r2, [r7, #0]
 801073e:	2103      	movs	r1, #3
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f000 fa17 	bl	8010b74 <SDMMC_GetCmdResp6>
 8010746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010748:	69fb      	ldr	r3, [r7, #28]
}
 801074a:	4618      	mov	r0, r3
 801074c:	3720      	adds	r7, #32
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}

08010752 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010752:	b580      	push	{r7, lr}
 8010754:	b088      	sub	sp, #32
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
 801075a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010760:	230d      	movs	r3, #13
 8010762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801076a:	2300      	movs	r3, #0
 801076c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010772:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010774:	f107 0308 	add.w	r3, r7, #8
 8010778:	4619      	mov	r1, r3
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f7ff fd3c 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010780:	f241 3288 	movw	r2, #5000	; 0x1388
 8010784:	210d      	movs	r1, #13
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 f878 	bl	801087c <SDMMC_GetCmdResp1>
 801078c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801078e:	69fb      	ldr	r3, [r7, #28]
}
 8010790:	4618      	mov	r0, r3
 8010792:	3720      	adds	r7, #32
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b088      	sub	sp, #32
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80107a0:	2300      	movs	r3, #0
 80107a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80107a4:	230d      	movs	r3, #13
 80107a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107ae:	2300      	movs	r3, #0
 80107b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107b8:	f107 0308 	add.w	r3, r7, #8
 80107bc:	4619      	mov	r1, r3
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7ff fd1a 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80107c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80107c8:	210d      	movs	r1, #13
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f000 f856 	bl	801087c <SDMMC_GetCmdResp1>
 80107d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107d2:	69fb      	ldr	r3, [r7, #28]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3720      	adds	r7, #32
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b088      	sub	sp, #32
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 80107e4:	2300      	movs	r3, #0
 80107e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80107e8:	230b      	movs	r3, #11
 80107ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107f2:	2300      	movs	r3, #0
 80107f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107fc:	f107 0308 	add.w	r3, r7, #8
 8010800:	4619      	mov	r1, r3
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f7ff fcf8 	bl	80101f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8010808:	f241 3288 	movw	r2, #5000	; 0x1388
 801080c:	210b      	movs	r1, #11
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 f834 	bl	801087c <SDMMC_GetCmdResp1>
 8010814:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010816:	69fb      	ldr	r3, [r7, #28]
}
 8010818:	4618      	mov	r0, r3
 801081a:	3720      	adds	r7, #32
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010820:	b480      	push	{r7}
 8010822:	b085      	sub	sp, #20
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010828:	4b11      	ldr	r3, [pc, #68]	; (8010870 <SDMMC_GetCmdError+0x50>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4a11      	ldr	r2, [pc, #68]	; (8010874 <SDMMC_GetCmdError+0x54>)
 801082e:	fba2 2303 	umull	r2, r3, r2, r3
 8010832:	0a5b      	lsrs	r3, r3, #9
 8010834:	f241 3288 	movw	r2, #5000	; 0x1388
 8010838:	fb02 f303 	mul.w	r3, r2, r3
 801083c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	1e5a      	subs	r2, r3, #1
 8010842:	60fa      	str	r2, [r7, #12]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d102      	bne.n	801084e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010848:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801084c:	e009      	b.n	8010862 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010856:	2b00      	cmp	r3, #0
 8010858:	d0f1      	beq.n	801083e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4a06      	ldr	r2, [pc, #24]	; (8010878 <SDMMC_GetCmdError+0x58>)
 801085e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010860:	2300      	movs	r3, #0
}
 8010862:	4618      	mov	r0, r3
 8010864:	3714      	adds	r7, #20
 8010866:	46bd      	mov	sp, r7
 8010868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086c:	4770      	bx	lr
 801086e:	bf00      	nop
 8010870:	2400000c 	.word	0x2400000c
 8010874:	10624dd3 	.word	0x10624dd3
 8010878:	002000c5 	.word	0x002000c5

0801087c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b088      	sub	sp, #32
 8010880:	af00      	add	r7, sp, #0
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	460b      	mov	r3, r1
 8010886:	607a      	str	r2, [r7, #4]
 8010888:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801088a:	4b70      	ldr	r3, [pc, #448]	; (8010a4c <SDMMC_GetCmdResp1+0x1d0>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4a70      	ldr	r2, [pc, #448]	; (8010a50 <SDMMC_GetCmdResp1+0x1d4>)
 8010890:	fba2 2303 	umull	r2, r3, r2, r3
 8010894:	0a5a      	lsrs	r2, r3, #9
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	fb02 f303 	mul.w	r3, r2, r3
 801089c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	1e5a      	subs	r2, r3, #1
 80108a2:	61fa      	str	r2, [r7, #28]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d102      	bne.n	80108ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80108ac:	e0c9      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108b2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80108b4:	69ba      	ldr	r2, [r7, #24]
 80108b6:	4b67      	ldr	r3, [pc, #412]	; (8010a54 <SDMMC_GetCmdResp1+0x1d8>)
 80108b8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d0ef      	beq.n	801089e <SDMMC_GetCmdResp1+0x22>
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1ea      	bne.n	801089e <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108cc:	f003 0304 	and.w	r3, r3, #4
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d004      	beq.n	80108de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2204      	movs	r2, #4
 80108d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108da:	2304      	movs	r3, #4
 80108dc:	e0b1      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108e2:	f003 0301 	and.w	r3, r3, #1
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d004      	beq.n	80108f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2201      	movs	r2, #1
 80108ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108f0:	2301      	movs	r3, #1
 80108f2:	e0a6      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	4a58      	ldr	r2, [pc, #352]	; (8010a58 <SDMMC_GetCmdResp1+0x1dc>)
 80108f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80108fa:	68f8      	ldr	r0, [r7, #12]
 80108fc:	f7ff fca6 	bl	801024c <SDMMC_GetCommandResponse>
 8010900:	4603      	mov	r3, r0
 8010902:	461a      	mov	r2, r3
 8010904:	7afb      	ldrb	r3, [r7, #11]
 8010906:	4293      	cmp	r3, r2
 8010908:	d001      	beq.n	801090e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801090a:	2301      	movs	r3, #1
 801090c:	e099      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801090e:	2100      	movs	r1, #0
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f7ff fca8 	bl	8010266 <SDMMC_GetResponse>
 8010916:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010918:	697a      	ldr	r2, [r7, #20]
 801091a:	4b50      	ldr	r3, [pc, #320]	; (8010a5c <SDMMC_GetCmdResp1+0x1e0>)
 801091c:	4013      	ands	r3, r2
 801091e:	2b00      	cmp	r3, #0
 8010920:	d101      	bne.n	8010926 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010922:	2300      	movs	r3, #0
 8010924:	e08d      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	2b00      	cmp	r3, #0
 801092a:	da02      	bge.n	8010932 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801092c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010930:	e087      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010938:	2b00      	cmp	r3, #0
 801093a:	d001      	beq.n	8010940 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801093c:	2340      	movs	r3, #64	; 0x40
 801093e:	e080      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010946:	2b00      	cmp	r3, #0
 8010948:	d001      	beq.n	801094e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801094a:	2380      	movs	r3, #128	; 0x80
 801094c:	e079      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010954:	2b00      	cmp	r3, #0
 8010956:	d002      	beq.n	801095e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010958:	f44f 7380 	mov.w	r3, #256	; 0x100
 801095c:	e071      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010964:	2b00      	cmp	r3, #0
 8010966:	d002      	beq.n	801096e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010968:	f44f 7300 	mov.w	r3, #512	; 0x200
 801096c:	e069      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010974:	2b00      	cmp	r3, #0
 8010976:	d002      	beq.n	801097e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801097c:	e061      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010984:	2b00      	cmp	r3, #0
 8010986:	d002      	beq.n	801098e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801098c:	e059      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010994:	2b00      	cmp	r3, #0
 8010996:	d002      	beq.n	801099e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801099c:	e051      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d002      	beq.n	80109ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80109a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80109ac:	e049      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d002      	beq.n	80109be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80109b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80109bc:	e041      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d002      	beq.n	80109ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80109c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80109cc:	e039      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d002      	beq.n	80109de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80109d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80109dc:	e031      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d002      	beq.n	80109ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80109e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80109ec:	e029      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d002      	beq.n	80109fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80109f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80109fc:	e021      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d002      	beq.n	8010a0e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010a08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010a0c:	e019      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d002      	beq.n	8010a1e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010a18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010a1c:	e011      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d002      	beq.n	8010a2e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010a28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010a2c:	e009      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	f003 0308 	and.w	r3, r3, #8
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d002      	beq.n	8010a3e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010a38:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010a3c:	e001      	b.n	8010a42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3720      	adds	r7, #32
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	2400000c 	.word	0x2400000c
 8010a50:	10624dd3 	.word	0x10624dd3
 8010a54:	00200045 	.word	0x00200045
 8010a58:	002000c5 	.word	0x002000c5
 8010a5c:	fdffe008 	.word	0xfdffe008

08010a60 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b085      	sub	sp, #20
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a68:	4b1f      	ldr	r3, [pc, #124]	; (8010ae8 <SDMMC_GetCmdResp2+0x88>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4a1f      	ldr	r2, [pc, #124]	; (8010aec <SDMMC_GetCmdResp2+0x8c>)
 8010a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a72:	0a5b      	lsrs	r3, r3, #9
 8010a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a78:	fb02 f303 	mul.w	r3, r2, r3
 8010a7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	1e5a      	subs	r2, r3, #1
 8010a82:	60fa      	str	r2, [r7, #12]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d102      	bne.n	8010a8e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a8c:	e026      	b.n	8010adc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d0ef      	beq.n	8010a7e <SDMMC_GetCmdResp2+0x1e>
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d1ea      	bne.n	8010a7e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aac:	f003 0304 	and.w	r3, r3, #4
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d004      	beq.n	8010abe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2204      	movs	r2, #4
 8010ab8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010aba:	2304      	movs	r3, #4
 8010abc:	e00e      	b.n	8010adc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ac2:	f003 0301 	and.w	r3, r3, #1
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d004      	beq.n	8010ad4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2201      	movs	r2, #1
 8010ace:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	e003      	b.n	8010adc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	4a06      	ldr	r2, [pc, #24]	; (8010af0 <SDMMC_GetCmdResp2+0x90>)
 8010ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010ada:	2300      	movs	r3, #0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3714      	adds	r7, #20
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr
 8010ae8:	2400000c 	.word	0x2400000c
 8010aec:	10624dd3 	.word	0x10624dd3
 8010af0:	002000c5 	.word	0x002000c5

08010af4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010afc:	4b1a      	ldr	r3, [pc, #104]	; (8010b68 <SDMMC_GetCmdResp3+0x74>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	4a1a      	ldr	r2, [pc, #104]	; (8010b6c <SDMMC_GetCmdResp3+0x78>)
 8010b02:	fba2 2303 	umull	r2, r3, r2, r3
 8010b06:	0a5b      	lsrs	r3, r3, #9
 8010b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b0c:	fb02 f303 	mul.w	r3, r2, r3
 8010b10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	1e5a      	subs	r2, r3, #1
 8010b16:	60fa      	str	r2, [r7, #12]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d102      	bne.n	8010b22 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b20:	e01b      	b.n	8010b5a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d0ef      	beq.n	8010b12 <SDMMC_GetCmdResp3+0x1e>
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d1ea      	bne.n	8010b12 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b40:	f003 0304 	and.w	r3, r3, #4
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d004      	beq.n	8010b52 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2204      	movs	r2, #4
 8010b4c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b4e:	2304      	movs	r3, #4
 8010b50:	e003      	b.n	8010b5a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	4a06      	ldr	r2, [pc, #24]	; (8010b70 <SDMMC_GetCmdResp3+0x7c>)
 8010b56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010b58:	2300      	movs	r3, #0
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3714      	adds	r7, #20
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr
 8010b66:	bf00      	nop
 8010b68:	2400000c 	.word	0x2400000c
 8010b6c:	10624dd3 	.word	0x10624dd3
 8010b70:	002000c5 	.word	0x002000c5

08010b74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b088      	sub	sp, #32
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	607a      	str	r2, [r7, #4]
 8010b80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b82:	4b35      	ldr	r3, [pc, #212]	; (8010c58 <SDMMC_GetCmdResp6+0xe4>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	4a35      	ldr	r2, [pc, #212]	; (8010c5c <SDMMC_GetCmdResp6+0xe8>)
 8010b88:	fba2 2303 	umull	r2, r3, r2, r3
 8010b8c:	0a5b      	lsrs	r3, r3, #9
 8010b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b92:	fb02 f303 	mul.w	r3, r2, r3
 8010b96:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010b98:	69fb      	ldr	r3, [r7, #28]
 8010b9a:	1e5a      	subs	r2, r3, #1
 8010b9c:	61fa      	str	r2, [r7, #28]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d102      	bne.n	8010ba8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ba2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ba6:	e052      	b.n	8010c4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bae:	69bb      	ldr	r3, [r7, #24]
 8010bb0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d0ef      	beq.n	8010b98 <SDMMC_GetCmdResp6+0x24>
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d1ea      	bne.n	8010b98 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc6:	f003 0304 	and.w	r3, r3, #4
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d004      	beq.n	8010bd8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2204      	movs	r2, #4
 8010bd2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bd4:	2304      	movs	r3, #4
 8010bd6:	e03a      	b.n	8010c4e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bdc:	f003 0301 	and.w	r3, r3, #1
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d004      	beq.n	8010bee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2201      	movs	r2, #1
 8010be8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bea:	2301      	movs	r3, #1
 8010bec:	e02f      	b.n	8010c4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010bee:	68f8      	ldr	r0, [r7, #12]
 8010bf0:	f7ff fb2c 	bl	801024c <SDMMC_GetCommandResponse>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	7afb      	ldrb	r3, [r7, #11]
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	d001      	beq.n	8010c02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bfe:	2301      	movs	r3, #1
 8010c00:	e025      	b.n	8010c4e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	4a16      	ldr	r2, [pc, #88]	; (8010c60 <SDMMC_GetCmdResp6+0xec>)
 8010c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010c08:	2100      	movs	r1, #0
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f7ff fb2b 	bl	8010266 <SDMMC_GetResponse>
 8010c10:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d106      	bne.n	8010c2a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	0c1b      	lsrs	r3, r3, #16
 8010c20:	b29a      	uxth	r2, r3
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010c26:	2300      	movs	r3, #0
 8010c28:	e011      	b.n	8010c4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d002      	beq.n	8010c3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c38:	e009      	b.n	8010c4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d002      	beq.n	8010c4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c48:	e001      	b.n	8010c4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3720      	adds	r7, #32
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	2400000c 	.word	0x2400000c
 8010c5c:	10624dd3 	.word	0x10624dd3
 8010c60:	002000c5 	.word	0x002000c5

08010c64 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b085      	sub	sp, #20
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010c6c:	4b22      	ldr	r3, [pc, #136]	; (8010cf8 <SDMMC_GetCmdResp7+0x94>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a22      	ldr	r2, [pc, #136]	; (8010cfc <SDMMC_GetCmdResp7+0x98>)
 8010c72:	fba2 2303 	umull	r2, r3, r2, r3
 8010c76:	0a5b      	lsrs	r3, r3, #9
 8010c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c7c:	fb02 f303 	mul.w	r3, r2, r3
 8010c80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	1e5a      	subs	r2, r3, #1
 8010c86:	60fa      	str	r2, [r7, #12]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d102      	bne.n	8010c92 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c90:	e02c      	b.n	8010cec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d0ef      	beq.n	8010c82 <SDMMC_GetCmdResp7+0x1e>
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d1ea      	bne.n	8010c82 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cb0:	f003 0304 	and.w	r3, r3, #4
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d004      	beq.n	8010cc2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2204      	movs	r2, #4
 8010cbc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010cbe:	2304      	movs	r3, #4
 8010cc0:	e014      	b.n	8010cec <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cc6:	f003 0301 	and.w	r3, r3, #1
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d004      	beq.n	8010cd8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e009      	b.n	8010cec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d002      	beq.n	8010cea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2240      	movs	r2, #64	; 0x40
 8010ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010cea:	2300      	movs	r3, #0

}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3714      	adds	r7, #20
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr
 8010cf8:	2400000c 	.word	0x2400000c
 8010cfc:	10624dd3 	.word	0x10624dd3

08010d00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010d00:	b084      	sub	sp, #16
 8010d02:	b580      	push	{r7, lr}
 8010d04:	b084      	sub	sp, #16
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	6078      	str	r0, [r7, #4]
 8010d0a:	f107 001c 	add.w	r0, r7, #28
 8010d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	d120      	bne.n	8010d5a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	68da      	ldr	r2, [r3, #12]
 8010d28:	4b25      	ldr	r3, [pc, #148]	; (8010dc0 <USB_CoreInit+0xc0>)
 8010d2a:	4013      	ands	r3, r2
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	d105      	bne.n	8010d4e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f001 fabe 	bl	80122d0 <USB_CoreReset>
 8010d54:	4603      	mov	r3, r0
 8010d56:	73fb      	strb	r3, [r7, #15]
 8010d58:	e01a      	b.n	8010d90 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	68db      	ldr	r3, [r3, #12]
 8010d5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f001 fab2 	bl	80122d0 <USB_CoreReset>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d106      	bne.n	8010d84 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	639a      	str	r2, [r3, #56]	; 0x38
 8010d82:	e005      	b.n	8010d90 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d92:	2b01      	cmp	r3, #1
 8010d94:	d10b      	bne.n	8010dae <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	689b      	ldr	r3, [r3, #8]
 8010d9a:	f043 0206 	orr.w	r2, r3, #6
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	689b      	ldr	r3, [r3, #8]
 8010da6:	f043 0220 	orr.w	r2, r3, #32
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3710      	adds	r7, #16
 8010db4:	46bd      	mov	sp, r7
 8010db6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010dba:	b004      	add	sp, #16
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop
 8010dc0:	ffbdffbf 	.word	0xffbdffbf

08010dc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b087      	sub	sp, #28
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	4613      	mov	r3, r2
 8010dd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010dd2:	79fb      	ldrb	r3, [r7, #7]
 8010dd4:	2b02      	cmp	r3, #2
 8010dd6:	d165      	bne.n	8010ea4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	4a41      	ldr	r2, [pc, #260]	; (8010ee0 <USB_SetTurnaroundTime+0x11c>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d906      	bls.n	8010dee <USB_SetTurnaroundTime+0x2a>
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	4a40      	ldr	r2, [pc, #256]	; (8010ee4 <USB_SetTurnaroundTime+0x120>)
 8010de4:	4293      	cmp	r3, r2
 8010de6:	d802      	bhi.n	8010dee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010de8:	230f      	movs	r3, #15
 8010dea:	617b      	str	r3, [r7, #20]
 8010dec:	e062      	b.n	8010eb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	4a3c      	ldr	r2, [pc, #240]	; (8010ee4 <USB_SetTurnaroundTime+0x120>)
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d906      	bls.n	8010e04 <USB_SetTurnaroundTime+0x40>
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	4a3b      	ldr	r2, [pc, #236]	; (8010ee8 <USB_SetTurnaroundTime+0x124>)
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d802      	bhi.n	8010e04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010dfe:	230e      	movs	r3, #14
 8010e00:	617b      	str	r3, [r7, #20]
 8010e02:	e057      	b.n	8010eb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	4a38      	ldr	r2, [pc, #224]	; (8010ee8 <USB_SetTurnaroundTime+0x124>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d906      	bls.n	8010e1a <USB_SetTurnaroundTime+0x56>
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	4a37      	ldr	r2, [pc, #220]	; (8010eec <USB_SetTurnaroundTime+0x128>)
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d802      	bhi.n	8010e1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010e14:	230d      	movs	r3, #13
 8010e16:	617b      	str	r3, [r7, #20]
 8010e18:	e04c      	b.n	8010eb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	4a33      	ldr	r2, [pc, #204]	; (8010eec <USB_SetTurnaroundTime+0x128>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d906      	bls.n	8010e30 <USB_SetTurnaroundTime+0x6c>
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	4a32      	ldr	r2, [pc, #200]	; (8010ef0 <USB_SetTurnaroundTime+0x12c>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d802      	bhi.n	8010e30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010e2a:	230c      	movs	r3, #12
 8010e2c:	617b      	str	r3, [r7, #20]
 8010e2e:	e041      	b.n	8010eb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	4a2f      	ldr	r2, [pc, #188]	; (8010ef0 <USB_SetTurnaroundTime+0x12c>)
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d906      	bls.n	8010e46 <USB_SetTurnaroundTime+0x82>
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	4a2e      	ldr	r2, [pc, #184]	; (8010ef4 <USB_SetTurnaroundTime+0x130>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d802      	bhi.n	8010e46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010e40:	230b      	movs	r3, #11
 8010e42:	617b      	str	r3, [r7, #20]
 8010e44:	e036      	b.n	8010eb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	4a2a      	ldr	r2, [pc, #168]	; (8010ef4 <USB_SetTurnaroundTime+0x130>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d906      	bls.n	8010e5c <USB_SetTurnaroundTime+0x98>
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	4a29      	ldr	r2, [pc, #164]	; (8010ef8 <USB_SetTurnaroundTime+0x134>)
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d802      	bhi.n	8010e5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010e56:	230a      	movs	r3, #10
 8010e58:	617b      	str	r3, [r7, #20]
 8010e5a:	e02b      	b.n	8010eb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	4a26      	ldr	r2, [pc, #152]	; (8010ef8 <USB_SetTurnaroundTime+0x134>)
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d906      	bls.n	8010e72 <USB_SetTurnaroundTime+0xae>
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	4a25      	ldr	r2, [pc, #148]	; (8010efc <USB_SetTurnaroundTime+0x138>)
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d802      	bhi.n	8010e72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010e6c:	2309      	movs	r3, #9
 8010e6e:	617b      	str	r3, [r7, #20]
 8010e70:	e020      	b.n	8010eb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	4a21      	ldr	r2, [pc, #132]	; (8010efc <USB_SetTurnaroundTime+0x138>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d906      	bls.n	8010e88 <USB_SetTurnaroundTime+0xc4>
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	4a20      	ldr	r2, [pc, #128]	; (8010f00 <USB_SetTurnaroundTime+0x13c>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d802      	bhi.n	8010e88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010e82:	2308      	movs	r3, #8
 8010e84:	617b      	str	r3, [r7, #20]
 8010e86:	e015      	b.n	8010eb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	4a1d      	ldr	r2, [pc, #116]	; (8010f00 <USB_SetTurnaroundTime+0x13c>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d906      	bls.n	8010e9e <USB_SetTurnaroundTime+0xda>
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	4a1c      	ldr	r2, [pc, #112]	; (8010f04 <USB_SetTurnaroundTime+0x140>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d802      	bhi.n	8010e9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010e98:	2307      	movs	r3, #7
 8010e9a:	617b      	str	r3, [r7, #20]
 8010e9c:	e00a      	b.n	8010eb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010e9e:	2306      	movs	r3, #6
 8010ea0:	617b      	str	r3, [r7, #20]
 8010ea2:	e007      	b.n	8010eb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010ea4:	79fb      	ldrb	r3, [r7, #7]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d102      	bne.n	8010eb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010eaa:	2309      	movs	r3, #9
 8010eac:	617b      	str	r3, [r7, #20]
 8010eae:	e001      	b.n	8010eb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010eb0:	2309      	movs	r3, #9
 8010eb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	68da      	ldr	r2, [r3, #12]
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	029b      	lsls	r3, r3, #10
 8010ec8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010ecc:	431a      	orrs	r2, r3
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010ed2:	2300      	movs	r3, #0
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	371c      	adds	r7, #28
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr
 8010ee0:	00d8acbf 	.word	0x00d8acbf
 8010ee4:	00e4e1bf 	.word	0x00e4e1bf
 8010ee8:	00f423ff 	.word	0x00f423ff
 8010eec:	0106737f 	.word	0x0106737f
 8010ef0:	011a499f 	.word	0x011a499f
 8010ef4:	01312cff 	.word	0x01312cff
 8010ef8:	014ca43f 	.word	0x014ca43f
 8010efc:	016e35ff 	.word	0x016e35ff
 8010f00:	01a6ab1f 	.word	0x01a6ab1f
 8010f04:	01e847ff 	.word	0x01e847ff

08010f08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b083      	sub	sp, #12
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	689b      	ldr	r3, [r3, #8]
 8010f14:	f043 0201 	orr.w	r2, r3, #1
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010f1c:	2300      	movs	r3, #0
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	370c      	adds	r7, #12
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr

08010f2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010f2a:	b480      	push	{r7}
 8010f2c:	b083      	sub	sp, #12
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	689b      	ldr	r3, [r3, #8]
 8010f36:	f023 0201 	bic.w	r2, r3, #1
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010f3e:	2300      	movs	r3, #0
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	460b      	mov	r3, r1
 8010f56:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010f64:	78fb      	ldrb	r3, [r7, #3]
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d106      	bne.n	8010f78 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	68db      	ldr	r3, [r3, #12]
 8010f6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	60da      	str	r2, [r3, #12]
 8010f76:	e00b      	b.n	8010f90 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010f78:	78fb      	ldrb	r3, [r7, #3]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d106      	bne.n	8010f8c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	60da      	str	r2, [r3, #12]
 8010f8a:	e001      	b.n	8010f90 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e003      	b.n	8010f98 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010f90:	2032      	movs	r0, #50	; 0x32
 8010f92:	f7f2 fbc1 	bl	8003718 <HAL_Delay>

  return HAL_OK;
 8010f96:	2300      	movs	r3, #0
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010fa0:	b084      	sub	sp, #16
 8010fa2:	b580      	push	{r7, lr}
 8010fa4:	b086      	sub	sp, #24
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
 8010faa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010fba:	2300      	movs	r3, #0
 8010fbc:	613b      	str	r3, [r7, #16]
 8010fbe:	e009      	b.n	8010fd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	3340      	adds	r3, #64	; 0x40
 8010fc6:	009b      	lsls	r3, r3, #2
 8010fc8:	4413      	add	r3, r2
 8010fca:	2200      	movs	r2, #0
 8010fcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	613b      	str	r3, [r7, #16]
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	2b0e      	cmp	r3, #14
 8010fd8:	d9f2      	bls.n	8010fc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d11c      	bne.n	801101a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	68fa      	ldr	r2, [r7, #12]
 8010fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010fee:	f043 0302 	orr.w	r3, r3, #2
 8010ff2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ff8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	601a      	str	r2, [r3, #0]
 8011018:	e005      	b.n	8011026 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801101e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801102c:	461a      	mov	r2, r3
 801102e:	2300      	movs	r3, #0
 8011030:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011038:	4619      	mov	r1, r3
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011040:	461a      	mov	r2, r3
 8011042:	680b      	ldr	r3, [r1, #0]
 8011044:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011048:	2b01      	cmp	r3, #1
 801104a:	d10c      	bne.n	8011066 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104e:	2b00      	cmp	r3, #0
 8011050:	d104      	bne.n	801105c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011052:	2100      	movs	r1, #0
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 f949 	bl	80112ec <USB_SetDevSpeed>
 801105a:	e008      	b.n	801106e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801105c:	2101      	movs	r1, #1
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 f944 	bl	80112ec <USB_SetDevSpeed>
 8011064:	e003      	b.n	801106e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011066:	2103      	movs	r1, #3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f000 f93f 	bl	80112ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801106e:	2110      	movs	r1, #16
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f000 f8f3 	bl	801125c <USB_FlushTxFifo>
 8011076:	4603      	mov	r3, r0
 8011078:	2b00      	cmp	r3, #0
 801107a:	d001      	beq.n	8011080 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801107c:	2301      	movs	r3, #1
 801107e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f000 f911 	bl	80112a8 <USB_FlushRxFifo>
 8011086:	4603      	mov	r3, r0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d001      	beq.n	8011090 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801108c:	2301      	movs	r3, #1
 801108e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011096:	461a      	mov	r2, r3
 8011098:	2300      	movs	r3, #0
 801109a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110a2:	461a      	mov	r2, r3
 80110a4:	2300      	movs	r3, #0
 80110a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110ae:	461a      	mov	r2, r3
 80110b0:	2300      	movs	r3, #0
 80110b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80110b4:	2300      	movs	r3, #0
 80110b6:	613b      	str	r3, [r7, #16]
 80110b8:	e043      	b.n	8011142 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	015a      	lsls	r2, r3, #5
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	4413      	add	r3, r2
 80110c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80110cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80110d0:	d118      	bne.n	8011104 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d10a      	bne.n	80110ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	015a      	lsls	r2, r3, #5
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	4413      	add	r3, r2
 80110e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110e4:	461a      	mov	r2, r3
 80110e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80110ea:	6013      	str	r3, [r2, #0]
 80110ec:	e013      	b.n	8011116 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	015a      	lsls	r2, r3, #5
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	4413      	add	r3, r2
 80110f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110fa:	461a      	mov	r2, r3
 80110fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011100:	6013      	str	r3, [r2, #0]
 8011102:	e008      	b.n	8011116 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	015a      	lsls	r2, r3, #5
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	4413      	add	r3, r2
 801110c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011110:	461a      	mov	r2, r3
 8011112:	2300      	movs	r3, #0
 8011114:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	015a      	lsls	r2, r3, #5
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	4413      	add	r3, r2
 801111e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011122:	461a      	mov	r2, r3
 8011124:	2300      	movs	r3, #0
 8011126:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	015a      	lsls	r2, r3, #5
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	4413      	add	r3, r2
 8011130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011134:	461a      	mov	r2, r3
 8011136:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801113a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	3301      	adds	r3, #1
 8011140:	613b      	str	r3, [r7, #16]
 8011142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011144:	693a      	ldr	r2, [r7, #16]
 8011146:	429a      	cmp	r2, r3
 8011148:	d3b7      	bcc.n	80110ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801114a:	2300      	movs	r3, #0
 801114c:	613b      	str	r3, [r7, #16]
 801114e:	e043      	b.n	80111d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	015a      	lsls	r2, r3, #5
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	4413      	add	r3, r2
 8011158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011166:	d118      	bne.n	801119a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d10a      	bne.n	8011184 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	015a      	lsls	r2, r3, #5
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	4413      	add	r3, r2
 8011176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801117a:	461a      	mov	r2, r3
 801117c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011180:	6013      	str	r3, [r2, #0]
 8011182:	e013      	b.n	80111ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	015a      	lsls	r2, r3, #5
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	4413      	add	r3, r2
 801118c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011190:	461a      	mov	r2, r3
 8011192:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011196:	6013      	str	r3, [r2, #0]
 8011198:	e008      	b.n	80111ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	015a      	lsls	r2, r3, #5
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	4413      	add	r3, r2
 80111a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111a6:	461a      	mov	r2, r3
 80111a8:	2300      	movs	r3, #0
 80111aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	015a      	lsls	r2, r3, #5
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	4413      	add	r3, r2
 80111b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111b8:	461a      	mov	r2, r3
 80111ba:	2300      	movs	r3, #0
 80111bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	015a      	lsls	r2, r3, #5
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	4413      	add	r3, r2
 80111c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111ca:	461a      	mov	r2, r3
 80111cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80111d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	3301      	adds	r3, #1
 80111d6:	613b      	str	r3, [r7, #16]
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	693a      	ldr	r2, [r7, #16]
 80111dc:	429a      	cmp	r2, r3
 80111de:	d3b7      	bcc.n	8011150 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111e6:	691b      	ldr	r3, [r3, #16]
 80111e8:	68fa      	ldr	r2, [r7, #12]
 80111ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80111ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80111f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2200      	movs	r2, #0
 80111f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011200:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011204:	2b00      	cmp	r3, #0
 8011206:	d105      	bne.n	8011214 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	699b      	ldr	r3, [r3, #24]
 801120c:	f043 0210 	orr.w	r2, r3, #16
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	699a      	ldr	r2, [r3, #24]
 8011218:	4b0e      	ldr	r3, [pc, #56]	; (8011254 <USB_DevInit+0x2b4>)
 801121a:	4313      	orrs	r3, r2
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011222:	2b00      	cmp	r3, #0
 8011224:	d005      	beq.n	8011232 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	699b      	ldr	r3, [r3, #24]
 801122a:	f043 0208 	orr.w	r2, r3, #8
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011234:	2b01      	cmp	r3, #1
 8011236:	d105      	bne.n	8011244 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	699a      	ldr	r2, [r3, #24]
 801123c:	4b06      	ldr	r3, [pc, #24]	; (8011258 <USB_DevInit+0x2b8>)
 801123e:	4313      	orrs	r3, r2
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011244:	7dfb      	ldrb	r3, [r7, #23]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3718      	adds	r7, #24
 801124a:	46bd      	mov	sp, r7
 801124c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011250:	b004      	add	sp, #16
 8011252:	4770      	bx	lr
 8011254:	803c3800 	.word	0x803c3800
 8011258:	40000004 	.word	0x40000004

0801125c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801125c:	b480      	push	{r7}
 801125e:	b085      	sub	sp, #20
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
 8011264:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011266:	2300      	movs	r3, #0
 8011268:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	019b      	lsls	r3, r3, #6
 801126e:	f043 0220 	orr.w	r2, r3, #32
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	3301      	adds	r3, #1
 801127a:	60fb      	str	r3, [r7, #12]
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	4a09      	ldr	r2, [pc, #36]	; (80112a4 <USB_FlushTxFifo+0x48>)
 8011280:	4293      	cmp	r3, r2
 8011282:	d901      	bls.n	8011288 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011284:	2303      	movs	r3, #3
 8011286:	e006      	b.n	8011296 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	691b      	ldr	r3, [r3, #16]
 801128c:	f003 0320 	and.w	r3, r3, #32
 8011290:	2b20      	cmp	r3, #32
 8011292:	d0f0      	beq.n	8011276 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011294:	2300      	movs	r3, #0
}
 8011296:	4618      	mov	r0, r3
 8011298:	3714      	adds	r7, #20
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	00030d40 	.word	0x00030d40

080112a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80112b0:	2300      	movs	r3, #0
 80112b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2210      	movs	r2, #16
 80112b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	3301      	adds	r3, #1
 80112be:	60fb      	str	r3, [r7, #12]
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	4a09      	ldr	r2, [pc, #36]	; (80112e8 <USB_FlushRxFifo+0x40>)
 80112c4:	4293      	cmp	r3, r2
 80112c6:	d901      	bls.n	80112cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80112c8:	2303      	movs	r3, #3
 80112ca:	e006      	b.n	80112da <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	691b      	ldr	r3, [r3, #16]
 80112d0:	f003 0310 	and.w	r3, r3, #16
 80112d4:	2b10      	cmp	r3, #16
 80112d6:	d0f0      	beq.n	80112ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80112d8:	2300      	movs	r3, #0
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3714      	adds	r7, #20
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr
 80112e6:	bf00      	nop
 80112e8:	00030d40 	.word	0x00030d40

080112ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b085      	sub	sp, #20
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	460b      	mov	r3, r1
 80112f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	78fb      	ldrb	r3, [r7, #3]
 8011306:	68f9      	ldr	r1, [r7, #12]
 8011308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801130c:	4313      	orrs	r3, r2
 801130e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011310:	2300      	movs	r3, #0
}
 8011312:	4618      	mov	r0, r3
 8011314:	3714      	adds	r7, #20
 8011316:	46bd      	mov	sp, r7
 8011318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131c:	4770      	bx	lr

0801131e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801131e:	b480      	push	{r7}
 8011320:	b087      	sub	sp, #28
 8011322:	af00      	add	r7, sp, #0
 8011324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011330:	689b      	ldr	r3, [r3, #8]
 8011332:	f003 0306 	and.w	r3, r3, #6
 8011336:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d102      	bne.n	8011344 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801133e:	2300      	movs	r3, #0
 8011340:	75fb      	strb	r3, [r7, #23]
 8011342:	e00a      	b.n	801135a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2b02      	cmp	r3, #2
 8011348:	d002      	beq.n	8011350 <USB_GetDevSpeed+0x32>
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2b06      	cmp	r3, #6
 801134e:	d102      	bne.n	8011356 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011350:	2302      	movs	r3, #2
 8011352:	75fb      	strb	r3, [r7, #23]
 8011354:	e001      	b.n	801135a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011356:	230f      	movs	r3, #15
 8011358:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801135a:	7dfb      	ldrb	r3, [r7, #23]
}
 801135c:	4618      	mov	r0, r3
 801135e:	371c      	adds	r7, #28
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011368:	b480      	push	{r7}
 801136a:	b085      	sub	sp, #20
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	785b      	ldrb	r3, [r3, #1]
 8011380:	2b01      	cmp	r3, #1
 8011382:	d139      	bne.n	80113f8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801138a:	69da      	ldr	r2, [r3, #28]
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	f003 030f 	and.w	r3, r3, #15
 8011394:	2101      	movs	r1, #1
 8011396:	fa01 f303 	lsl.w	r3, r1, r3
 801139a:	b29b      	uxth	r3, r3
 801139c:	68f9      	ldr	r1, [r7, #12]
 801139e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113a2:	4313      	orrs	r3, r2
 80113a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	015a      	lsls	r2, r3, #5
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	4413      	add	r3, r2
 80113ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d153      	bne.n	8011464 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	015a      	lsls	r2, r3, #5
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	4413      	add	r3, r2
 80113c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	78db      	ldrb	r3, [r3, #3]
 80113d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80113d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	059b      	lsls	r3, r3, #22
 80113de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80113e0:	431a      	orrs	r2, r3
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	0159      	lsls	r1, r3, #5
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	440b      	add	r3, r1
 80113ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113ee:	4619      	mov	r1, r3
 80113f0:	4b20      	ldr	r3, [pc, #128]	; (8011474 <USB_ActivateEndpoint+0x10c>)
 80113f2:	4313      	orrs	r3, r2
 80113f4:	600b      	str	r3, [r1, #0]
 80113f6:	e035      	b.n	8011464 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113fe:	69da      	ldr	r2, [r3, #28]
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	f003 030f 	and.w	r3, r3, #15
 8011408:	2101      	movs	r1, #1
 801140a:	fa01 f303 	lsl.w	r3, r1, r3
 801140e:	041b      	lsls	r3, r3, #16
 8011410:	68f9      	ldr	r1, [r7, #12]
 8011412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011416:	4313      	orrs	r3, r2
 8011418:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	015a      	lsls	r2, r3, #5
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	4413      	add	r3, r2
 8011422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801142c:	2b00      	cmp	r3, #0
 801142e:	d119      	bne.n	8011464 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	015a      	lsls	r2, r3, #5
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	4413      	add	r3, r2
 8011438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801143c:	681a      	ldr	r2, [r3, #0]
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	689b      	ldr	r3, [r3, #8]
 8011442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	78db      	ldrb	r3, [r3, #3]
 801144a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801144c:	430b      	orrs	r3, r1
 801144e:	431a      	orrs	r2, r3
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	0159      	lsls	r1, r3, #5
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	440b      	add	r3, r1
 8011458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801145c:	4619      	mov	r1, r3
 801145e:	4b05      	ldr	r3, [pc, #20]	; (8011474 <USB_ActivateEndpoint+0x10c>)
 8011460:	4313      	orrs	r3, r2
 8011462:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011464:	2300      	movs	r3, #0
}
 8011466:	4618      	mov	r0, r3
 8011468:	3714      	adds	r7, #20
 801146a:	46bd      	mov	sp, r7
 801146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop
 8011474:	10008000 	.word	0x10008000

08011478 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011478:	b480      	push	{r7}
 801147a:	b085      	sub	sp, #20
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	785b      	ldrb	r3, [r3, #1]
 8011490:	2b01      	cmp	r3, #1
 8011492:	d161      	bne.n	8011558 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	015a      	lsls	r2, r3, #5
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	4413      	add	r3, r2
 801149c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80114a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80114aa:	d11f      	bne.n	80114ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	015a      	lsls	r2, r3, #5
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	4413      	add	r3, r2
 80114b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	68ba      	ldr	r2, [r7, #8]
 80114bc:	0151      	lsls	r1, r2, #5
 80114be:	68fa      	ldr	r2, [r7, #12]
 80114c0:	440a      	add	r2, r1
 80114c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80114ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	015a      	lsls	r2, r3, #5
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	4413      	add	r3, r2
 80114d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	68ba      	ldr	r2, [r7, #8]
 80114dc:	0151      	lsls	r1, r2, #5
 80114de:	68fa      	ldr	r2, [r7, #12]
 80114e0:	440a      	add	r2, r1
 80114e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80114ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	f003 030f 	and.w	r3, r3, #15
 80114fc:	2101      	movs	r1, #1
 80114fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011502:	b29b      	uxth	r3, r3
 8011504:	43db      	mvns	r3, r3
 8011506:	68f9      	ldr	r1, [r7, #12]
 8011508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801150c:	4013      	ands	r3, r2
 801150e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011516:	69da      	ldr	r2, [r3, #28]
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	f003 030f 	and.w	r3, r3, #15
 8011520:	2101      	movs	r1, #1
 8011522:	fa01 f303 	lsl.w	r3, r1, r3
 8011526:	b29b      	uxth	r3, r3
 8011528:	43db      	mvns	r3, r3
 801152a:	68f9      	ldr	r1, [r7, #12]
 801152c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011530:	4013      	ands	r3, r2
 8011532:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	015a      	lsls	r2, r3, #5
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	4413      	add	r3, r2
 801153c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	0159      	lsls	r1, r3, #5
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	440b      	add	r3, r1
 801154a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801154e:	4619      	mov	r1, r3
 8011550:	4b35      	ldr	r3, [pc, #212]	; (8011628 <USB_DeactivateEndpoint+0x1b0>)
 8011552:	4013      	ands	r3, r2
 8011554:	600b      	str	r3, [r1, #0]
 8011556:	e060      	b.n	801161a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	015a      	lsls	r2, r3, #5
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	4413      	add	r3, r2
 8011560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801156a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801156e:	d11f      	bne.n	80115b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	015a      	lsls	r2, r3, #5
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	4413      	add	r3, r2
 8011578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	68ba      	ldr	r2, [r7, #8]
 8011580:	0151      	lsls	r1, r2, #5
 8011582:	68fa      	ldr	r2, [r7, #12]
 8011584:	440a      	add	r2, r1
 8011586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801158a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801158e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	015a      	lsls	r2, r3, #5
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	4413      	add	r3, r2
 8011598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	68ba      	ldr	r2, [r7, #8]
 80115a0:	0151      	lsls	r1, r2, #5
 80115a2:	68fa      	ldr	r2, [r7, #12]
 80115a4:	440a      	add	r2, r1
 80115a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80115ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	f003 030f 	and.w	r3, r3, #15
 80115c0:	2101      	movs	r1, #1
 80115c2:	fa01 f303 	lsl.w	r3, r1, r3
 80115c6:	041b      	lsls	r3, r3, #16
 80115c8:	43db      	mvns	r3, r3
 80115ca:	68f9      	ldr	r1, [r7, #12]
 80115cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80115d0:	4013      	ands	r3, r2
 80115d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115da:	69da      	ldr	r2, [r3, #28]
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	781b      	ldrb	r3, [r3, #0]
 80115e0:	f003 030f 	and.w	r3, r3, #15
 80115e4:	2101      	movs	r1, #1
 80115e6:	fa01 f303 	lsl.w	r3, r1, r3
 80115ea:	041b      	lsls	r3, r3, #16
 80115ec:	43db      	mvns	r3, r3
 80115ee:	68f9      	ldr	r1, [r7, #12]
 80115f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80115f4:	4013      	ands	r3, r2
 80115f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	015a      	lsls	r2, r3, #5
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	4413      	add	r3, r2
 8011600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011604:	681a      	ldr	r2, [r3, #0]
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	0159      	lsls	r1, r3, #5
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	440b      	add	r3, r1
 801160e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011612:	4619      	mov	r1, r3
 8011614:	4b05      	ldr	r3, [pc, #20]	; (801162c <USB_DeactivateEndpoint+0x1b4>)
 8011616:	4013      	ands	r3, r2
 8011618:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801161a:	2300      	movs	r3, #0
}
 801161c:	4618      	mov	r0, r3
 801161e:	3714      	adds	r7, #20
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr
 8011628:	ec337800 	.word	0xec337800
 801162c:	eff37800 	.word	0xeff37800

08011630 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b08a      	sub	sp, #40	; 0x28
 8011634:	af02      	add	r7, sp, #8
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	60b9      	str	r1, [r7, #8]
 801163a:	4613      	mov	r3, r2
 801163c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	781b      	ldrb	r3, [r3, #0]
 8011646:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	785b      	ldrb	r3, [r3, #1]
 801164c:	2b01      	cmp	r3, #1
 801164e:	f040 8163 	bne.w	8011918 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	695b      	ldr	r3, [r3, #20]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d132      	bne.n	80116c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	015a      	lsls	r2, r3, #5
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	4413      	add	r3, r2
 8011662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011666:	691a      	ldr	r2, [r3, #16]
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	0159      	lsls	r1, r3, #5
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	440b      	add	r3, r1
 8011670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011674:	4619      	mov	r1, r3
 8011676:	4ba5      	ldr	r3, [pc, #660]	; (801190c <USB_EPStartXfer+0x2dc>)
 8011678:	4013      	ands	r3, r2
 801167a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801167c:	69bb      	ldr	r3, [r7, #24]
 801167e:	015a      	lsls	r2, r3, #5
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	4413      	add	r3, r2
 8011684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011688:	691b      	ldr	r3, [r3, #16]
 801168a:	69ba      	ldr	r2, [r7, #24]
 801168c:	0151      	lsls	r1, r2, #5
 801168e:	69fa      	ldr	r2, [r7, #28]
 8011690:	440a      	add	r2, r1
 8011692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801169a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	015a      	lsls	r2, r3, #5
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	4413      	add	r3, r2
 80116a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116a8:	691a      	ldr	r2, [r3, #16]
 80116aa:	69bb      	ldr	r3, [r7, #24]
 80116ac:	0159      	lsls	r1, r3, #5
 80116ae:	69fb      	ldr	r3, [r7, #28]
 80116b0:	440b      	add	r3, r1
 80116b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116b6:	4619      	mov	r1, r3
 80116b8:	4b95      	ldr	r3, [pc, #596]	; (8011910 <USB_EPStartXfer+0x2e0>)
 80116ba:	4013      	ands	r3, r2
 80116bc:	610b      	str	r3, [r1, #16]
 80116be:	e074      	b.n	80117aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	015a      	lsls	r2, r3, #5
 80116c4:	69fb      	ldr	r3, [r7, #28]
 80116c6:	4413      	add	r3, r2
 80116c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116cc:	691a      	ldr	r2, [r3, #16]
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	0159      	lsls	r1, r3, #5
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	440b      	add	r3, r1
 80116d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116da:	4619      	mov	r1, r3
 80116dc:	4b8c      	ldr	r3, [pc, #560]	; (8011910 <USB_EPStartXfer+0x2e0>)
 80116de:	4013      	ands	r3, r2
 80116e0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80116e2:	69bb      	ldr	r3, [r7, #24]
 80116e4:	015a      	lsls	r2, r3, #5
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	4413      	add	r3, r2
 80116ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ee:	691a      	ldr	r2, [r3, #16]
 80116f0:	69bb      	ldr	r3, [r7, #24]
 80116f2:	0159      	lsls	r1, r3, #5
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	440b      	add	r3, r1
 80116f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116fc:	4619      	mov	r1, r3
 80116fe:	4b83      	ldr	r3, [pc, #524]	; (801190c <USB_EPStartXfer+0x2dc>)
 8011700:	4013      	ands	r3, r2
 8011702:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011704:	69bb      	ldr	r3, [r7, #24]
 8011706:	015a      	lsls	r2, r3, #5
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	4413      	add	r3, r2
 801170c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011710:	691a      	ldr	r2, [r3, #16]
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	6959      	ldr	r1, [r3, #20]
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	689b      	ldr	r3, [r3, #8]
 801171a:	440b      	add	r3, r1
 801171c:	1e59      	subs	r1, r3, #1
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	fbb1 f3f3 	udiv	r3, r1, r3
 8011726:	04d9      	lsls	r1, r3, #19
 8011728:	4b7a      	ldr	r3, [pc, #488]	; (8011914 <USB_EPStartXfer+0x2e4>)
 801172a:	400b      	ands	r3, r1
 801172c:	69b9      	ldr	r1, [r7, #24]
 801172e:	0148      	lsls	r0, r1, #5
 8011730:	69f9      	ldr	r1, [r7, #28]
 8011732:	4401      	add	r1, r0
 8011734:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011738:	4313      	orrs	r3, r2
 801173a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801173c:	69bb      	ldr	r3, [r7, #24]
 801173e:	015a      	lsls	r2, r3, #5
 8011740:	69fb      	ldr	r3, [r7, #28]
 8011742:	4413      	add	r3, r2
 8011744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011748:	691a      	ldr	r2, [r3, #16]
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	695b      	ldr	r3, [r3, #20]
 801174e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011752:	69b9      	ldr	r1, [r7, #24]
 8011754:	0148      	lsls	r0, r1, #5
 8011756:	69f9      	ldr	r1, [r7, #28]
 8011758:	4401      	add	r1, r0
 801175a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801175e:	4313      	orrs	r3, r2
 8011760:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	78db      	ldrb	r3, [r3, #3]
 8011766:	2b01      	cmp	r3, #1
 8011768:	d11f      	bne.n	80117aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801176a:	69bb      	ldr	r3, [r7, #24]
 801176c:	015a      	lsls	r2, r3, #5
 801176e:	69fb      	ldr	r3, [r7, #28]
 8011770:	4413      	add	r3, r2
 8011772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011776:	691b      	ldr	r3, [r3, #16]
 8011778:	69ba      	ldr	r2, [r7, #24]
 801177a:	0151      	lsls	r1, r2, #5
 801177c:	69fa      	ldr	r2, [r7, #28]
 801177e:	440a      	add	r2, r1
 8011780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011784:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011788:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	015a      	lsls	r2, r3, #5
 801178e:	69fb      	ldr	r3, [r7, #28]
 8011790:	4413      	add	r3, r2
 8011792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011796:	691b      	ldr	r3, [r3, #16]
 8011798:	69ba      	ldr	r2, [r7, #24]
 801179a:	0151      	lsls	r1, r2, #5
 801179c:	69fa      	ldr	r2, [r7, #28]
 801179e:	440a      	add	r2, r1
 80117a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80117a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80117aa:	79fb      	ldrb	r3, [r7, #7]
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d14b      	bne.n	8011848 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	691b      	ldr	r3, [r3, #16]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d009      	beq.n	80117cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	015a      	lsls	r2, r3, #5
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	4413      	add	r3, r2
 80117c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117c4:	461a      	mov	r2, r3
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	691b      	ldr	r3, [r3, #16]
 80117ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	78db      	ldrb	r3, [r3, #3]
 80117d0:	2b01      	cmp	r3, #1
 80117d2:	d128      	bne.n	8011826 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117da:	689b      	ldr	r3, [r3, #8]
 80117dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d110      	bne.n	8011806 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80117e4:	69bb      	ldr	r3, [r7, #24]
 80117e6:	015a      	lsls	r2, r3, #5
 80117e8:	69fb      	ldr	r3, [r7, #28]
 80117ea:	4413      	add	r3, r2
 80117ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	69ba      	ldr	r2, [r7, #24]
 80117f4:	0151      	lsls	r1, r2, #5
 80117f6:	69fa      	ldr	r2, [r7, #28]
 80117f8:	440a      	add	r2, r1
 80117fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011802:	6013      	str	r3, [r2, #0]
 8011804:	e00f      	b.n	8011826 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	015a      	lsls	r2, r3, #5
 801180a:	69fb      	ldr	r3, [r7, #28]
 801180c:	4413      	add	r3, r2
 801180e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	69ba      	ldr	r2, [r7, #24]
 8011816:	0151      	lsls	r1, r2, #5
 8011818:	69fa      	ldr	r2, [r7, #28]
 801181a:	440a      	add	r2, r1
 801181c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011824:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	015a      	lsls	r2, r3, #5
 801182a:	69fb      	ldr	r3, [r7, #28]
 801182c:	4413      	add	r3, r2
 801182e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	69ba      	ldr	r2, [r7, #24]
 8011836:	0151      	lsls	r1, r2, #5
 8011838:	69fa      	ldr	r2, [r7, #28]
 801183a:	440a      	add	r2, r1
 801183c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011840:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011844:	6013      	str	r3, [r2, #0]
 8011846:	e133      	b.n	8011ab0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011848:	69bb      	ldr	r3, [r7, #24]
 801184a:	015a      	lsls	r2, r3, #5
 801184c:	69fb      	ldr	r3, [r7, #28]
 801184e:	4413      	add	r3, r2
 8011850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	69ba      	ldr	r2, [r7, #24]
 8011858:	0151      	lsls	r1, r2, #5
 801185a:	69fa      	ldr	r2, [r7, #28]
 801185c:	440a      	add	r2, r1
 801185e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011862:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011866:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	78db      	ldrb	r3, [r3, #3]
 801186c:	2b01      	cmp	r3, #1
 801186e:	d015      	beq.n	801189c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	695b      	ldr	r3, [r3, #20]
 8011874:	2b00      	cmp	r3, #0
 8011876:	f000 811b 	beq.w	8011ab0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801187a:	69fb      	ldr	r3, [r7, #28]
 801187c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	f003 030f 	and.w	r3, r3, #15
 801188a:	2101      	movs	r1, #1
 801188c:	fa01 f303 	lsl.w	r3, r1, r3
 8011890:	69f9      	ldr	r1, [r7, #28]
 8011892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011896:	4313      	orrs	r3, r2
 8011898:	634b      	str	r3, [r1, #52]	; 0x34
 801189a:	e109      	b.n	8011ab0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801189c:	69fb      	ldr	r3, [r7, #28]
 801189e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118a2:	689b      	ldr	r3, [r3, #8]
 80118a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d110      	bne.n	80118ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80118ac:	69bb      	ldr	r3, [r7, #24]
 80118ae:	015a      	lsls	r2, r3, #5
 80118b0:	69fb      	ldr	r3, [r7, #28]
 80118b2:	4413      	add	r3, r2
 80118b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	69ba      	ldr	r2, [r7, #24]
 80118bc:	0151      	lsls	r1, r2, #5
 80118be:	69fa      	ldr	r2, [r7, #28]
 80118c0:	440a      	add	r2, r1
 80118c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80118ca:	6013      	str	r3, [r2, #0]
 80118cc:	e00f      	b.n	80118ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	015a      	lsls	r2, r3, #5
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	4413      	add	r3, r2
 80118d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	69ba      	ldr	r2, [r7, #24]
 80118de:	0151      	lsls	r1, r2, #5
 80118e0:	69fa      	ldr	r2, [r7, #28]
 80118e2:	440a      	add	r2, r1
 80118e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	68d9      	ldr	r1, [r3, #12]
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	781a      	ldrb	r2, [r3, #0]
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	695b      	ldr	r3, [r3, #20]
 80118fa:	b298      	uxth	r0, r3
 80118fc:	79fb      	ldrb	r3, [r7, #7]
 80118fe:	9300      	str	r3, [sp, #0]
 8011900:	4603      	mov	r3, r0
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	f000 fa38 	bl	8011d78 <USB_WritePacket>
 8011908:	e0d2      	b.n	8011ab0 <USB_EPStartXfer+0x480>
 801190a:	bf00      	nop
 801190c:	e007ffff 	.word	0xe007ffff
 8011910:	fff80000 	.word	0xfff80000
 8011914:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011918:	69bb      	ldr	r3, [r7, #24]
 801191a:	015a      	lsls	r2, r3, #5
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	4413      	add	r3, r2
 8011920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011924:	691a      	ldr	r2, [r3, #16]
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	0159      	lsls	r1, r3, #5
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	440b      	add	r3, r1
 801192e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011932:	4619      	mov	r1, r3
 8011934:	4b61      	ldr	r3, [pc, #388]	; (8011abc <USB_EPStartXfer+0x48c>)
 8011936:	4013      	ands	r3, r2
 8011938:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	015a      	lsls	r2, r3, #5
 801193e:	69fb      	ldr	r3, [r7, #28]
 8011940:	4413      	add	r3, r2
 8011942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011946:	691a      	ldr	r2, [r3, #16]
 8011948:	69bb      	ldr	r3, [r7, #24]
 801194a:	0159      	lsls	r1, r3, #5
 801194c:	69fb      	ldr	r3, [r7, #28]
 801194e:	440b      	add	r3, r1
 8011950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011954:	4619      	mov	r1, r3
 8011956:	4b5a      	ldr	r3, [pc, #360]	; (8011ac0 <USB_EPStartXfer+0x490>)
 8011958:	4013      	ands	r3, r2
 801195a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	695b      	ldr	r3, [r3, #20]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d123      	bne.n	80119ac <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011964:	69bb      	ldr	r3, [r7, #24]
 8011966:	015a      	lsls	r2, r3, #5
 8011968:	69fb      	ldr	r3, [r7, #28]
 801196a:	4413      	add	r3, r2
 801196c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011970:	691a      	ldr	r2, [r3, #16]
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	689b      	ldr	r3, [r3, #8]
 8011976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801197a:	69b9      	ldr	r1, [r7, #24]
 801197c:	0148      	lsls	r0, r1, #5
 801197e:	69f9      	ldr	r1, [r7, #28]
 8011980:	4401      	add	r1, r0
 8011982:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011986:	4313      	orrs	r3, r2
 8011988:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	015a      	lsls	r2, r3, #5
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	4413      	add	r3, r2
 8011992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011996:	691b      	ldr	r3, [r3, #16]
 8011998:	69ba      	ldr	r2, [r7, #24]
 801199a:	0151      	lsls	r1, r2, #5
 801199c:	69fa      	ldr	r2, [r7, #28]
 801199e:	440a      	add	r2, r1
 80119a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80119a8:	6113      	str	r3, [r2, #16]
 80119aa:	e033      	b.n	8011a14 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	695a      	ldr	r2, [r3, #20]
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	4413      	add	r3, r2
 80119b6:	1e5a      	subs	r2, r3, #1
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	689b      	ldr	r3, [r3, #8]
 80119bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80119c0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80119c2:	69bb      	ldr	r3, [r7, #24]
 80119c4:	015a      	lsls	r2, r3, #5
 80119c6:	69fb      	ldr	r3, [r7, #28]
 80119c8:	4413      	add	r3, r2
 80119ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119ce:	691a      	ldr	r2, [r3, #16]
 80119d0:	8afb      	ldrh	r3, [r7, #22]
 80119d2:	04d9      	lsls	r1, r3, #19
 80119d4:	4b3b      	ldr	r3, [pc, #236]	; (8011ac4 <USB_EPStartXfer+0x494>)
 80119d6:	400b      	ands	r3, r1
 80119d8:	69b9      	ldr	r1, [r7, #24]
 80119da:	0148      	lsls	r0, r1, #5
 80119dc:	69f9      	ldr	r1, [r7, #28]
 80119de:	4401      	add	r1, r0
 80119e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80119e4:	4313      	orrs	r3, r2
 80119e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80119e8:	69bb      	ldr	r3, [r7, #24]
 80119ea:	015a      	lsls	r2, r3, #5
 80119ec:	69fb      	ldr	r3, [r7, #28]
 80119ee:	4413      	add	r3, r2
 80119f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119f4:	691a      	ldr	r2, [r3, #16]
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	689b      	ldr	r3, [r3, #8]
 80119fa:	8af9      	ldrh	r1, [r7, #22]
 80119fc:	fb01 f303 	mul.w	r3, r1, r3
 8011a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a04:	69b9      	ldr	r1, [r7, #24]
 8011a06:	0148      	lsls	r0, r1, #5
 8011a08:	69f9      	ldr	r1, [r7, #28]
 8011a0a:	4401      	add	r1, r0
 8011a0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011a10:	4313      	orrs	r3, r2
 8011a12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011a14:	79fb      	ldrb	r3, [r7, #7]
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d10d      	bne.n	8011a36 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d009      	beq.n	8011a36 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	68d9      	ldr	r1, [r3, #12]
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	015a      	lsls	r2, r3, #5
 8011a2a:	69fb      	ldr	r3, [r7, #28]
 8011a2c:	4413      	add	r3, r2
 8011a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a32:	460a      	mov	r2, r1
 8011a34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	78db      	ldrb	r3, [r3, #3]
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d128      	bne.n	8011a90 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011a3e:	69fb      	ldr	r3, [r7, #28]
 8011a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a44:	689b      	ldr	r3, [r3, #8]
 8011a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d110      	bne.n	8011a70 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	015a      	lsls	r2, r3, #5
 8011a52:	69fb      	ldr	r3, [r7, #28]
 8011a54:	4413      	add	r3, r2
 8011a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	69ba      	ldr	r2, [r7, #24]
 8011a5e:	0151      	lsls	r1, r2, #5
 8011a60:	69fa      	ldr	r2, [r7, #28]
 8011a62:	440a      	add	r2, r1
 8011a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011a6c:	6013      	str	r3, [r2, #0]
 8011a6e:	e00f      	b.n	8011a90 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	015a      	lsls	r2, r3, #5
 8011a74:	69fb      	ldr	r3, [r7, #28]
 8011a76:	4413      	add	r3, r2
 8011a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	69ba      	ldr	r2, [r7, #24]
 8011a80:	0151      	lsls	r1, r2, #5
 8011a82:	69fa      	ldr	r2, [r7, #28]
 8011a84:	440a      	add	r2, r1
 8011a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	015a      	lsls	r2, r3, #5
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	4413      	add	r3, r2
 8011a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	69ba      	ldr	r2, [r7, #24]
 8011aa0:	0151      	lsls	r1, r2, #5
 8011aa2:	69fa      	ldr	r2, [r7, #28]
 8011aa4:	440a      	add	r2, r1
 8011aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011aaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011aae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011ab0:	2300      	movs	r3, #0
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3720      	adds	r7, #32
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	fff80000 	.word	0xfff80000
 8011ac0:	e007ffff 	.word	0xe007ffff
 8011ac4:	1ff80000 	.word	0x1ff80000

08011ac8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b087      	sub	sp, #28
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	60f8      	str	r0, [r7, #12]
 8011ad0:	60b9      	str	r1, [r7, #8]
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	785b      	ldrb	r3, [r3, #1]
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	f040 80cd 	bne.w	8011c84 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	695b      	ldr	r3, [r3, #20]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d132      	bne.n	8011b58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	015a      	lsls	r2, r3, #5
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	4413      	add	r3, r2
 8011afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011afe:	691a      	ldr	r2, [r3, #16]
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	0159      	lsls	r1, r3, #5
 8011b04:	697b      	ldr	r3, [r7, #20]
 8011b06:	440b      	add	r3, r1
 8011b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	4b98      	ldr	r3, [pc, #608]	; (8011d70 <USB_EP0StartXfer+0x2a8>)
 8011b10:	4013      	ands	r3, r2
 8011b12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	015a      	lsls	r2, r3, #5
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	4413      	add	r3, r2
 8011b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b20:	691b      	ldr	r3, [r3, #16]
 8011b22:	693a      	ldr	r2, [r7, #16]
 8011b24:	0151      	lsls	r1, r2, #5
 8011b26:	697a      	ldr	r2, [r7, #20]
 8011b28:	440a      	add	r2, r1
 8011b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011b32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011b34:	693b      	ldr	r3, [r7, #16]
 8011b36:	015a      	lsls	r2, r3, #5
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	4413      	add	r3, r2
 8011b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b40:	691a      	ldr	r2, [r3, #16]
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	0159      	lsls	r1, r3, #5
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	440b      	add	r3, r1
 8011b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b4e:	4619      	mov	r1, r3
 8011b50:	4b88      	ldr	r3, [pc, #544]	; (8011d74 <USB_EP0StartXfer+0x2ac>)
 8011b52:	4013      	ands	r3, r2
 8011b54:	610b      	str	r3, [r1, #16]
 8011b56:	e04e      	b.n	8011bf6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	015a      	lsls	r2, r3, #5
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	4413      	add	r3, r2
 8011b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b64:	691a      	ldr	r2, [r3, #16]
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	0159      	lsls	r1, r3, #5
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	440b      	add	r3, r1
 8011b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b72:	4619      	mov	r1, r3
 8011b74:	4b7f      	ldr	r3, [pc, #508]	; (8011d74 <USB_EP0StartXfer+0x2ac>)
 8011b76:	4013      	ands	r3, r2
 8011b78:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	015a      	lsls	r2, r3, #5
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	4413      	add	r3, r2
 8011b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b86:	691a      	ldr	r2, [r3, #16]
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	0159      	lsls	r1, r3, #5
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	440b      	add	r3, r1
 8011b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b94:	4619      	mov	r1, r3
 8011b96:	4b76      	ldr	r3, [pc, #472]	; (8011d70 <USB_EP0StartXfer+0x2a8>)
 8011b98:	4013      	ands	r3, r2
 8011b9a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	695a      	ldr	r2, [r3, #20]
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	689b      	ldr	r3, [r3, #8]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d903      	bls.n	8011bb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	689a      	ldr	r2, [r3, #8]
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	015a      	lsls	r2, r3, #5
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	4413      	add	r3, r2
 8011bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bbc:	691b      	ldr	r3, [r3, #16]
 8011bbe:	693a      	ldr	r2, [r7, #16]
 8011bc0:	0151      	lsls	r1, r2, #5
 8011bc2:	697a      	ldr	r2, [r7, #20]
 8011bc4:	440a      	add	r2, r1
 8011bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011bce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	015a      	lsls	r2, r3, #5
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bdc:	691a      	ldr	r2, [r3, #16]
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	695b      	ldr	r3, [r3, #20]
 8011be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011be6:	6939      	ldr	r1, [r7, #16]
 8011be8:	0148      	lsls	r0, r1, #5
 8011bea:	6979      	ldr	r1, [r7, #20]
 8011bec:	4401      	add	r1, r0
 8011bee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011bf6:	79fb      	ldrb	r3, [r7, #7]
 8011bf8:	2b01      	cmp	r3, #1
 8011bfa:	d11e      	bne.n	8011c3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	691b      	ldr	r3, [r3, #16]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d009      	beq.n	8011c18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	015a      	lsls	r2, r3, #5
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	4413      	add	r3, r2
 8011c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c10:	461a      	mov	r2, r3
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	691b      	ldr	r3, [r3, #16]
 8011c16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	015a      	lsls	r2, r3, #5
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	4413      	add	r3, r2
 8011c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	693a      	ldr	r2, [r7, #16]
 8011c28:	0151      	lsls	r1, r2, #5
 8011c2a:	697a      	ldr	r2, [r7, #20]
 8011c2c:	440a      	add	r2, r1
 8011c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011c36:	6013      	str	r3, [r2, #0]
 8011c38:	e092      	b.n	8011d60 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	015a      	lsls	r2, r3, #5
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	4413      	add	r3, r2
 8011c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	693a      	ldr	r2, [r7, #16]
 8011c4a:	0151      	lsls	r1, r2, #5
 8011c4c:	697a      	ldr	r2, [r7, #20]
 8011c4e:	440a      	add	r2, r1
 8011c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011c58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	695b      	ldr	r3, [r3, #20]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d07e      	beq.n	8011d60 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	f003 030f 	and.w	r3, r3, #15
 8011c72:	2101      	movs	r1, #1
 8011c74:	fa01 f303 	lsl.w	r3, r1, r3
 8011c78:	6979      	ldr	r1, [r7, #20]
 8011c7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011c7e:	4313      	orrs	r3, r2
 8011c80:	634b      	str	r3, [r1, #52]	; 0x34
 8011c82:	e06d      	b.n	8011d60 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	015a      	lsls	r2, r3, #5
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	4413      	add	r3, r2
 8011c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c90:	691a      	ldr	r2, [r3, #16]
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	0159      	lsls	r1, r3, #5
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	440b      	add	r3, r1
 8011c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	4b34      	ldr	r3, [pc, #208]	; (8011d74 <USB_EP0StartXfer+0x2ac>)
 8011ca2:	4013      	ands	r3, r2
 8011ca4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	015a      	lsls	r2, r3, #5
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	4413      	add	r3, r2
 8011cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cb2:	691a      	ldr	r2, [r3, #16]
 8011cb4:	693b      	ldr	r3, [r7, #16]
 8011cb6:	0159      	lsls	r1, r3, #5
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	440b      	add	r3, r1
 8011cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	4b2b      	ldr	r3, [pc, #172]	; (8011d70 <USB_EP0StartXfer+0x2a8>)
 8011cc4:	4013      	ands	r3, r2
 8011cc6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	695b      	ldr	r3, [r3, #20]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d003      	beq.n	8011cd8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	689a      	ldr	r2, [r3, #8]
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	015a      	lsls	r2, r3, #5
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	4413      	add	r3, r2
 8011ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ce4:	691b      	ldr	r3, [r3, #16]
 8011ce6:	693a      	ldr	r2, [r7, #16]
 8011ce8:	0151      	lsls	r1, r2, #5
 8011cea:	697a      	ldr	r2, [r7, #20]
 8011cec:	440a      	add	r2, r1
 8011cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011cf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	015a      	lsls	r2, r3, #5
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	4413      	add	r3, r2
 8011d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d04:	691a      	ldr	r2, [r3, #16]
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	689b      	ldr	r3, [r3, #8]
 8011d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d0e:	6939      	ldr	r1, [r7, #16]
 8011d10:	0148      	lsls	r0, r1, #5
 8011d12:	6979      	ldr	r1, [r7, #20]
 8011d14:	4401      	add	r1, r0
 8011d16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011d1a:	4313      	orrs	r3, r2
 8011d1c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8011d1e:	79fb      	ldrb	r3, [r7, #7]
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	d10d      	bne.n	8011d40 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d009      	beq.n	8011d40 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	68d9      	ldr	r1, [r3, #12]
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	015a      	lsls	r2, r3, #5
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	4413      	add	r3, r2
 8011d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d3c:	460a      	mov	r2, r1
 8011d3e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	015a      	lsls	r2, r3, #5
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	4413      	add	r3, r2
 8011d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	693a      	ldr	r2, [r7, #16]
 8011d50:	0151      	lsls	r1, r2, #5
 8011d52:	697a      	ldr	r2, [r7, #20]
 8011d54:	440a      	add	r2, r1
 8011d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011d5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011d60:	2300      	movs	r3, #0
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	371c      	adds	r7, #28
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	e007ffff 	.word	0xe007ffff
 8011d74:	fff80000 	.word	0xfff80000

08011d78 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b089      	sub	sp, #36	; 0x24
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	4611      	mov	r1, r2
 8011d84:	461a      	mov	r2, r3
 8011d86:	460b      	mov	r3, r1
 8011d88:	71fb      	strb	r3, [r7, #7]
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8011d96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d11a      	bne.n	8011dd4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011d9e:	88bb      	ldrh	r3, [r7, #4]
 8011da0:	3303      	adds	r3, #3
 8011da2:	089b      	lsrs	r3, r3, #2
 8011da4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011da6:	2300      	movs	r3, #0
 8011da8:	61bb      	str	r3, [r7, #24]
 8011daa:	e00f      	b.n	8011dcc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011dac:	79fb      	ldrb	r3, [r7, #7]
 8011dae:	031a      	lsls	r2, r3, #12
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	4413      	add	r3, r2
 8011db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011db8:	461a      	mov	r2, r3
 8011dba:	69fb      	ldr	r3, [r7, #28]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011dc0:	69fb      	ldr	r3, [r7, #28]
 8011dc2:	3304      	adds	r3, #4
 8011dc4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011dc6:	69bb      	ldr	r3, [r7, #24]
 8011dc8:	3301      	adds	r3, #1
 8011dca:	61bb      	str	r3, [r7, #24]
 8011dcc:	69ba      	ldr	r2, [r7, #24]
 8011dce:	693b      	ldr	r3, [r7, #16]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d3eb      	bcc.n	8011dac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011dd4:	2300      	movs	r3, #0
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3724      	adds	r7, #36	; 0x24
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de0:	4770      	bx	lr

08011de2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011de2:	b480      	push	{r7}
 8011de4:	b089      	sub	sp, #36	; 0x24
 8011de6:	af00      	add	r7, sp, #0
 8011de8:	60f8      	str	r0, [r7, #12]
 8011dea:	60b9      	str	r1, [r7, #8]
 8011dec:	4613      	mov	r3, r2
 8011dee:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011df8:	88fb      	ldrh	r3, [r7, #6]
 8011dfa:	3303      	adds	r3, #3
 8011dfc:	089b      	lsrs	r3, r3, #2
 8011dfe:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011e00:	2300      	movs	r3, #0
 8011e02:	61bb      	str	r3, [r7, #24]
 8011e04:	e00b      	b.n	8011e1e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e0c:	681a      	ldr	r2, [r3, #0]
 8011e0e:	69fb      	ldr	r3, [r7, #28]
 8011e10:	601a      	str	r2, [r3, #0]
    pDest++;
 8011e12:	69fb      	ldr	r3, [r7, #28]
 8011e14:	3304      	adds	r3, #4
 8011e16:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011e18:	69bb      	ldr	r3, [r7, #24]
 8011e1a:	3301      	adds	r3, #1
 8011e1c:	61bb      	str	r3, [r7, #24]
 8011e1e:	69ba      	ldr	r2, [r7, #24]
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d3ef      	bcc.n	8011e06 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011e26:	69fb      	ldr	r3, [r7, #28]
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3724      	adds	r7, #36	; 0x24
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr

08011e34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b085      	sub	sp, #20
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	785b      	ldrb	r3, [r3, #1]
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d12c      	bne.n	8011eaa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	015a      	lsls	r2, r3, #5
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	4413      	add	r3, r2
 8011e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	db12      	blt.n	8011e88 <USB_EPSetStall+0x54>
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d00f      	beq.n	8011e88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	015a      	lsls	r2, r3, #5
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	4413      	add	r3, r2
 8011e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	68ba      	ldr	r2, [r7, #8]
 8011e78:	0151      	lsls	r1, r2, #5
 8011e7a:	68fa      	ldr	r2, [r7, #12]
 8011e7c:	440a      	add	r2, r1
 8011e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011e86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	015a      	lsls	r2, r3, #5
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	4413      	add	r3, r2
 8011e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	68ba      	ldr	r2, [r7, #8]
 8011e98:	0151      	lsls	r1, r2, #5
 8011e9a:	68fa      	ldr	r2, [r7, #12]
 8011e9c:	440a      	add	r2, r1
 8011e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ea2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011ea6:	6013      	str	r3, [r2, #0]
 8011ea8:	e02b      	b.n	8011f02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	015a      	lsls	r2, r3, #5
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	4413      	add	r3, r2
 8011eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	db12      	blt.n	8011ee2 <USB_EPSetStall+0xae>
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d00f      	beq.n	8011ee2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	015a      	lsls	r2, r3, #5
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	4413      	add	r3, r2
 8011eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	68ba      	ldr	r2, [r7, #8]
 8011ed2:	0151      	lsls	r1, r2, #5
 8011ed4:	68fa      	ldr	r2, [r7, #12]
 8011ed6:	440a      	add	r2, r1
 8011ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011edc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011ee0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	015a      	lsls	r2, r3, #5
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	4413      	add	r3, r2
 8011eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	68ba      	ldr	r2, [r7, #8]
 8011ef2:	0151      	lsls	r1, r2, #5
 8011ef4:	68fa      	ldr	r2, [r7, #12]
 8011ef6:	440a      	add	r2, r1
 8011ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011efc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011f00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011f02:	2300      	movs	r3, #0
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3714      	adds	r7, #20
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0e:	4770      	bx	lr

08011f10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011f10:	b480      	push	{r7}
 8011f12:	b085      	sub	sp, #20
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	785b      	ldrb	r3, [r3, #1]
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	d128      	bne.n	8011f7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	015a      	lsls	r2, r3, #5
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	4413      	add	r3, r2
 8011f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	68ba      	ldr	r2, [r7, #8]
 8011f3c:	0151      	lsls	r1, r2, #5
 8011f3e:	68fa      	ldr	r2, [r7, #12]
 8011f40:	440a      	add	r2, r1
 8011f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011f4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	78db      	ldrb	r3, [r3, #3]
 8011f50:	2b03      	cmp	r3, #3
 8011f52:	d003      	beq.n	8011f5c <USB_EPClearStall+0x4c>
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	78db      	ldrb	r3, [r3, #3]
 8011f58:	2b02      	cmp	r3, #2
 8011f5a:	d138      	bne.n	8011fce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	015a      	lsls	r2, r3, #5
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	4413      	add	r3, r2
 8011f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	68ba      	ldr	r2, [r7, #8]
 8011f6c:	0151      	lsls	r1, r2, #5
 8011f6e:	68fa      	ldr	r2, [r7, #12]
 8011f70:	440a      	add	r2, r1
 8011f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f7a:	6013      	str	r3, [r2, #0]
 8011f7c:	e027      	b.n	8011fce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	015a      	lsls	r2, r3, #5
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	4413      	add	r3, r2
 8011f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	68ba      	ldr	r2, [r7, #8]
 8011f8e:	0151      	lsls	r1, r2, #5
 8011f90:	68fa      	ldr	r2, [r7, #12]
 8011f92:	440a      	add	r2, r1
 8011f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011f9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	78db      	ldrb	r3, [r3, #3]
 8011fa2:	2b03      	cmp	r3, #3
 8011fa4:	d003      	beq.n	8011fae <USB_EPClearStall+0x9e>
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	78db      	ldrb	r3, [r3, #3]
 8011faa:	2b02      	cmp	r3, #2
 8011fac:	d10f      	bne.n	8011fce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	015a      	lsls	r2, r3, #5
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	4413      	add	r3, r2
 8011fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	68ba      	ldr	r2, [r7, #8]
 8011fbe:	0151      	lsls	r1, r2, #5
 8011fc0:	68fa      	ldr	r2, [r7, #12]
 8011fc2:	440a      	add	r2, r1
 8011fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011fcc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011fce:	2300      	movs	r3, #0
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3714      	adds	r7, #20
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr

08011fdc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011fdc:	b480      	push	{r7}
 8011fde:	b085      	sub	sp, #20
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	460b      	mov	r3, r1
 8011fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	68fa      	ldr	r2, [r7, #12]
 8011ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ffa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011ffe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012006:	681a      	ldr	r2, [r3, #0]
 8012008:	78fb      	ldrb	r3, [r7, #3]
 801200a:	011b      	lsls	r3, r3, #4
 801200c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012010:	68f9      	ldr	r1, [r7, #12]
 8012012:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012016:	4313      	orrs	r3, r2
 8012018:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801201a:	2300      	movs	r3, #0
}
 801201c:	4618      	mov	r0, r3
 801201e:	3714      	adds	r7, #20
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr

08012028 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b084      	sub	sp, #16
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012042:	f023 0302 	bic.w	r3, r3, #2
 8012046:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012048:	2003      	movs	r0, #3
 801204a:	f7f1 fb65 	bl	8003718 <HAL_Delay>

  return HAL_OK;
 801204e:	2300      	movs	r3, #0
}
 8012050:	4618      	mov	r0, r3
 8012052:	3710      	adds	r7, #16
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801206a:	685b      	ldr	r3, [r3, #4]
 801206c:	68fa      	ldr	r2, [r7, #12]
 801206e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012072:	f043 0302 	orr.w	r3, r3, #2
 8012076:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012078:	2003      	movs	r0, #3
 801207a:	f7f1 fb4d 	bl	8003718 <HAL_Delay>

  return HAL_OK;
 801207e:	2300      	movs	r3, #0
}
 8012080:	4618      	mov	r0, r3
 8012082:	3710      	adds	r7, #16
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012088:	b480      	push	{r7}
 801208a:	b085      	sub	sp, #20
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	695b      	ldr	r3, [r3, #20]
 8012094:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	699b      	ldr	r3, [r3, #24]
 801209a:	68fa      	ldr	r2, [r7, #12]
 801209c:	4013      	ands	r3, r2
 801209e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80120a0:	68fb      	ldr	r3, [r7, #12]
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3714      	adds	r7, #20
 80120a6:	46bd      	mov	sp, r7
 80120a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ac:	4770      	bx	lr

080120ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80120ae:	b480      	push	{r7}
 80120b0:	b085      	sub	sp, #20
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120c0:	699b      	ldr	r3, [r3, #24]
 80120c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120ca:	69db      	ldr	r3, [r3, #28]
 80120cc:	68ba      	ldr	r2, [r7, #8]
 80120ce:	4013      	ands	r3, r2
 80120d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	0c1b      	lsrs	r3, r3, #16
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3714      	adds	r7, #20
 80120da:	46bd      	mov	sp, r7
 80120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e0:	4770      	bx	lr

080120e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80120e2:	b480      	push	{r7}
 80120e4:	b085      	sub	sp, #20
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120f4:	699b      	ldr	r3, [r3, #24]
 80120f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120fe:	69db      	ldr	r3, [r3, #28]
 8012100:	68ba      	ldr	r2, [r7, #8]
 8012102:	4013      	ands	r3, r2
 8012104:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	b29b      	uxth	r3, r3
}
 801210a:	4618      	mov	r0, r3
 801210c:	3714      	adds	r7, #20
 801210e:	46bd      	mov	sp, r7
 8012110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012114:	4770      	bx	lr

08012116 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012116:	b480      	push	{r7}
 8012118:	b085      	sub	sp, #20
 801211a:	af00      	add	r7, sp, #0
 801211c:	6078      	str	r0, [r7, #4]
 801211e:	460b      	mov	r3, r1
 8012120:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012126:	78fb      	ldrb	r3, [r7, #3]
 8012128:	015a      	lsls	r2, r3, #5
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	4413      	add	r3, r2
 801212e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012132:	689b      	ldr	r3, [r3, #8]
 8012134:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801213c:	695b      	ldr	r3, [r3, #20]
 801213e:	68ba      	ldr	r2, [r7, #8]
 8012140:	4013      	ands	r3, r2
 8012142:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012144:	68bb      	ldr	r3, [r7, #8]
}
 8012146:	4618      	mov	r0, r3
 8012148:	3714      	adds	r7, #20
 801214a:	46bd      	mov	sp, r7
 801214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012150:	4770      	bx	lr

08012152 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012152:	b480      	push	{r7}
 8012154:	b087      	sub	sp, #28
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
 801215a:	460b      	mov	r3, r1
 801215c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012168:	691b      	ldr	r3, [r3, #16]
 801216a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012174:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012176:	78fb      	ldrb	r3, [r7, #3]
 8012178:	f003 030f 	and.w	r3, r3, #15
 801217c:	68fa      	ldr	r2, [r7, #12]
 801217e:	fa22 f303 	lsr.w	r3, r2, r3
 8012182:	01db      	lsls	r3, r3, #7
 8012184:	b2db      	uxtb	r3, r3
 8012186:	693a      	ldr	r2, [r7, #16]
 8012188:	4313      	orrs	r3, r2
 801218a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801218c:	78fb      	ldrb	r3, [r7, #3]
 801218e:	015a      	lsls	r2, r3, #5
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	4413      	add	r3, r2
 8012194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012198:	689b      	ldr	r3, [r3, #8]
 801219a:	693a      	ldr	r2, [r7, #16]
 801219c:	4013      	ands	r3, r2
 801219e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80121a0:	68bb      	ldr	r3, [r7, #8]
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	371c      	adds	r7, #28
 80121a6:	46bd      	mov	sp, r7
 80121a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ac:	4770      	bx	lr

080121ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80121ae:	b480      	push	{r7}
 80121b0:	b083      	sub	sp, #12
 80121b2:	af00      	add	r7, sp, #0
 80121b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	695b      	ldr	r3, [r3, #20]
 80121ba:	f003 0301 	and.w	r3, r3, #1
}
 80121be:	4618      	mov	r0, r3
 80121c0:	370c      	adds	r7, #12
 80121c2:	46bd      	mov	sp, r7
 80121c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c8:	4770      	bx	lr
	...

080121cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80121cc:	b480      	push	{r7}
 80121ce:	b085      	sub	sp, #20
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121e6:	4619      	mov	r1, r3
 80121e8:	4b09      	ldr	r3, [pc, #36]	; (8012210 <USB_ActivateSetup+0x44>)
 80121ea:	4013      	ands	r3, r2
 80121ec:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	68fa      	ldr	r2, [r7, #12]
 80121f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80121fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012200:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012202:	2300      	movs	r3, #0
}
 8012204:	4618      	mov	r0, r3
 8012206:	3714      	adds	r7, #20
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr
 8012210:	fffff800 	.word	0xfffff800

08012214 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8012214:	b480      	push	{r7}
 8012216:	b087      	sub	sp, #28
 8012218:	af00      	add	r7, sp, #0
 801221a:	60f8      	str	r0, [r7, #12]
 801221c:	460b      	mov	r3, r1
 801221e:	607a      	str	r2, [r7, #4]
 8012220:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	333c      	adds	r3, #60	; 0x3c
 801222a:	3304      	adds	r3, #4
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	4a26      	ldr	r2, [pc, #152]	; (80122cc <USB_EP0_OutStart+0xb8>)
 8012234:	4293      	cmp	r3, r2
 8012236:	d90a      	bls.n	801224e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012248:	d101      	bne.n	801224e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801224a:	2300      	movs	r3, #0
 801224c:	e037      	b.n	80122be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012254:	461a      	mov	r2, r3
 8012256:	2300      	movs	r3, #0
 8012258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012260:	691b      	ldr	r3, [r3, #16]
 8012262:	697a      	ldr	r2, [r7, #20]
 8012264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801226c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012274:	691b      	ldr	r3, [r3, #16]
 8012276:	697a      	ldr	r2, [r7, #20]
 8012278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801227c:	f043 0318 	orr.w	r3, r3, #24
 8012280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012288:	691b      	ldr	r3, [r3, #16]
 801228a:	697a      	ldr	r2, [r7, #20]
 801228c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012290:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012294:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012296:	7afb      	ldrb	r3, [r7, #11]
 8012298:	2b01      	cmp	r3, #1
 801229a:	d10f      	bne.n	80122bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122a2:	461a      	mov	r2, r3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	697a      	ldr	r2, [r7, #20]
 80122b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80122ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80122bc:	2300      	movs	r3, #0
}
 80122be:	4618      	mov	r0, r3
 80122c0:	371c      	adds	r7, #28
 80122c2:	46bd      	mov	sp, r7
 80122c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c8:	4770      	bx	lr
 80122ca:	bf00      	nop
 80122cc:	4f54300a 	.word	0x4f54300a

080122d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b085      	sub	sp, #20
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80122d8:	2300      	movs	r3, #0
 80122da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	3301      	adds	r3, #1
 80122e0:	60fb      	str	r3, [r7, #12]
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	4a13      	ldr	r2, [pc, #76]	; (8012334 <USB_CoreReset+0x64>)
 80122e6:	4293      	cmp	r3, r2
 80122e8:	d901      	bls.n	80122ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80122ea:	2303      	movs	r3, #3
 80122ec:	e01b      	b.n	8012326 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	691b      	ldr	r3, [r3, #16]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	daf2      	bge.n	80122dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80122f6:	2300      	movs	r3, #0
 80122f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	691b      	ldr	r3, [r3, #16]
 80122fe:	f043 0201 	orr.w	r2, r3, #1
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	3301      	adds	r3, #1
 801230a:	60fb      	str	r3, [r7, #12]
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	4a09      	ldr	r2, [pc, #36]	; (8012334 <USB_CoreReset+0x64>)
 8012310:	4293      	cmp	r3, r2
 8012312:	d901      	bls.n	8012318 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012314:	2303      	movs	r3, #3
 8012316:	e006      	b.n	8012326 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	691b      	ldr	r3, [r3, #16]
 801231c:	f003 0301 	and.w	r3, r3, #1
 8012320:	2b01      	cmp	r3, #1
 8012322:	d0f0      	beq.n	8012306 <USB_CoreReset+0x36>

  return HAL_OK;
 8012324:	2300      	movs	r3, #0
}
 8012326:	4618      	mov	r0, r3
 8012328:	3714      	adds	r7, #20
 801232a:	46bd      	mov	sp, r7
 801232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012330:	4770      	bx	lr
 8012332:	bf00      	nop
 8012334:	00030d40 	.word	0x00030d40

08012338 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801233c:	4904      	ldr	r1, [pc, #16]	; (8012350 <MX_FATFS_Init+0x18>)
 801233e:	4805      	ldr	r0, [pc, #20]	; (8012354 <MX_FATFS_Init+0x1c>)
 8012340:	f005 fbec 	bl	8017b1c <FATFS_LinkDriver>
 8012344:	4603      	mov	r3, r0
 8012346:	461a      	mov	r2, r3
 8012348:	4b03      	ldr	r3, [pc, #12]	; (8012358 <MX_FATFS_Init+0x20>)
 801234a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801234c:	bf00      	nop
 801234e:	bd80      	pop	{r7, pc}
 8012350:	24001748 	.word	0x24001748
 8012354:	0801a05c 	.word	0x0801a05c
 8012358:	24001744 	.word	0x24001744

0801235c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801235c:	b480      	push	{r7}
 801235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012360:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012362:	4618      	mov	r0, r3
 8012364:	46bd      	mov	sp, r7
 8012366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236a:	4770      	bx	lr

0801236c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b082      	sub	sp, #8
 8012370:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012372:	2300      	movs	r3, #0
 8012374:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012376:	f000 f885 	bl	8012484 <BSP_SD_IsDetected>
 801237a:	4603      	mov	r3, r0
 801237c:	2b01      	cmp	r3, #1
 801237e:	d001      	beq.n	8012384 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012380:	2302      	movs	r3, #2
 8012382:	e012      	b.n	80123aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012384:	480b      	ldr	r0, [pc, #44]	; (80123b4 <BSP_SD_Init+0x48>)
 8012386:	f7f9 fc1d 	bl	800bbc4 <HAL_SD_Init>
 801238a:	4603      	mov	r3, r0
 801238c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801238e:	79fb      	ldrb	r3, [r7, #7]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d109      	bne.n	80123a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012394:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8012398:	4806      	ldr	r0, [pc, #24]	; (80123b4 <BSP_SD_Init+0x48>)
 801239a:	f7fa fdf1 	bl	800cf80 <HAL_SD_ConfigWideBusOperation>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d001      	beq.n	80123a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80123a4:	2301      	movs	r3, #1
 80123a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80123a8:	79fb      	ldrb	r3, [r7, #7]
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3708      	adds	r7, #8
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	24001448 	.word	0x24001448

080123b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b086      	sub	sp, #24
 80123bc:	af00      	add	r7, sp, #0
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80123c4:	2300      	movs	r3, #0
 80123c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	68ba      	ldr	r2, [r7, #8]
 80123cc:	68f9      	ldr	r1, [r7, #12]
 80123ce:	4806      	ldr	r0, [pc, #24]	; (80123e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80123d0:	f7fa f834 	bl	800c43c <HAL_SD_ReadBlocks_DMA>
 80123d4:	4603      	mov	r3, r0
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d001      	beq.n	80123de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80123da:	2301      	movs	r3, #1
 80123dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80123de:	7dfb      	ldrb	r3, [r7, #23]
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3718      	adds	r7, #24
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	24001448 	.word	0x24001448

080123ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b086      	sub	sp, #24
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80123f8:	2300      	movs	r3, #0
 80123fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	68ba      	ldr	r2, [r7, #8]
 8012400:	68f9      	ldr	r1, [r7, #12]
 8012402:	4806      	ldr	r0, [pc, #24]	; (801241c <BSP_SD_WriteBlocks_DMA+0x30>)
 8012404:	f7fa f8c2 	bl	800c58c <HAL_SD_WriteBlocks_DMA>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d001      	beq.n	8012412 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801240e:	2301      	movs	r3, #1
 8012410:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012412:	7dfb      	ldrb	r3, [r7, #23]
}
 8012414:	4618      	mov	r0, r3
 8012416:	3718      	adds	r7, #24
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}
 801241c:	24001448 	.word	0x24001448

08012420 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012424:	4805      	ldr	r0, [pc, #20]	; (801243c <BSP_SD_GetCardState+0x1c>)
 8012426:	f7fa fe55 	bl	800d0d4 <HAL_SD_GetCardState>
 801242a:	4603      	mov	r3, r0
 801242c:	2b04      	cmp	r3, #4
 801242e:	bf14      	ite	ne
 8012430:	2301      	movne	r3, #1
 8012432:	2300      	moveq	r3, #0
 8012434:	b2db      	uxtb	r3, r3
}
 8012436:	4618      	mov	r0, r3
 8012438:	bd80      	pop	{r7, pc}
 801243a:	bf00      	nop
 801243c:	24001448 	.word	0x24001448

08012440 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b082      	sub	sp, #8
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012448:	6879      	ldr	r1, [r7, #4]
 801244a:	4803      	ldr	r0, [pc, #12]	; (8012458 <BSP_SD_GetCardInfo+0x18>)
 801244c:	f7fa fd6c 	bl	800cf28 <HAL_SD_GetCardInfo>
}
 8012450:	bf00      	nop
 8012452:	3708      	adds	r7, #8
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}
 8012458:	24001448 	.word	0x24001448

0801245c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b082      	sub	sp, #8
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012464:	f000 f9a0 	bl	80127a8 <BSP_SD_WriteCpltCallback>
}
 8012468:	bf00      	nop
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012478:	f000 f9a2 	bl	80127c0 <BSP_SD_ReadCpltCallback>
}
 801247c:	bf00      	nop
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801248a:	2301      	movs	r3, #1
 801248c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801248e:	f000 f80b 	bl	80124a8 <BSP_PlatformIsDetected>
 8012492:	4603      	mov	r3, r0
 8012494:	2b00      	cmp	r3, #0
 8012496:	d101      	bne.n	801249c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012498:	2300      	movs	r3, #0
 801249a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801249c:	79fb      	ldrb	r3, [r7, #7]
 801249e:	b2db      	uxtb	r3, r3
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3708      	adds	r7, #8
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}

080124a8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80124ae:	2301      	movs	r3, #1
 80124b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80124b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80124b6:	4806      	ldr	r0, [pc, #24]	; (80124d0 <BSP_PlatformIsDetected+0x28>)
 80124b8:	f7f4 fe30 	bl	800711c <HAL_GPIO_ReadPin>
 80124bc:	4603      	mov	r3, r0
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d001      	beq.n	80124c6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80124c2:	2300      	movs	r3, #0
 80124c4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80124c6:	79fb      	ldrb	r3, [r7, #7]
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3708      	adds	r7, #8
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	58020000 	.word	0x58020000

080124d4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80124dc:	f7f1 f910 	bl	8003700 <HAL_GetTick>
 80124e0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80124e2:	e006      	b.n	80124f2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80124e4:	f7ff ff9c 	bl	8012420 <BSP_SD_GetCardState>
 80124e8:	4603      	mov	r3, r0
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d101      	bne.n	80124f2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80124ee:	2300      	movs	r3, #0
 80124f0:	e009      	b.n	8012506 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80124f2:	f7f1 f905 	bl	8003700 <HAL_GetTick>
 80124f6:	4602      	mov	r2, r0
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	1ad3      	subs	r3, r2, r3
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d8f0      	bhi.n	80124e4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012506:	4618      	mov	r0, r3
 8012508:	3710      	adds	r7, #16
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
	...

08012510 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	4603      	mov	r3, r0
 8012518:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801251a:	4b0b      	ldr	r3, [pc, #44]	; (8012548 <SD_CheckStatus+0x38>)
 801251c:	2201      	movs	r2, #1
 801251e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012520:	f7ff ff7e 	bl	8012420 <BSP_SD_GetCardState>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d107      	bne.n	801253a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801252a:	4b07      	ldr	r3, [pc, #28]	; (8012548 <SD_CheckStatus+0x38>)
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	b2db      	uxtb	r3, r3
 8012530:	f023 0301 	bic.w	r3, r3, #1
 8012534:	b2da      	uxtb	r2, r3
 8012536:	4b04      	ldr	r3, [pc, #16]	; (8012548 <SD_CheckStatus+0x38>)
 8012538:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801253a:	4b03      	ldr	r3, [pc, #12]	; (8012548 <SD_CheckStatus+0x38>)
 801253c:	781b      	ldrb	r3, [r3, #0]
 801253e:	b2db      	uxtb	r3, r3
}
 8012540:	4618      	mov	r0, r3
 8012542:	3708      	adds	r7, #8
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	24000019 	.word	0x24000019

0801254c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	4603      	mov	r3, r0
 8012554:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012556:	f7ff ff09 	bl	801236c <BSP_SD_Init>
 801255a:	4603      	mov	r3, r0
 801255c:	2b00      	cmp	r3, #0
 801255e:	d107      	bne.n	8012570 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012560:	79fb      	ldrb	r3, [r7, #7]
 8012562:	4618      	mov	r0, r3
 8012564:	f7ff ffd4 	bl	8012510 <SD_CheckStatus>
 8012568:	4603      	mov	r3, r0
 801256a:	461a      	mov	r2, r3
 801256c:	4b04      	ldr	r3, [pc, #16]	; (8012580 <SD_initialize+0x34>)
 801256e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012570:	4b03      	ldr	r3, [pc, #12]	; (8012580 <SD_initialize+0x34>)
 8012572:	781b      	ldrb	r3, [r3, #0]
 8012574:	b2db      	uxtb	r3, r3
}
 8012576:	4618      	mov	r0, r3
 8012578:	3708      	adds	r7, #8
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	24000019 	.word	0x24000019

08012584 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b082      	sub	sp, #8
 8012588:	af00      	add	r7, sp, #0
 801258a:	4603      	mov	r3, r0
 801258c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801258e:	79fb      	ldrb	r3, [r7, #7]
 8012590:	4618      	mov	r0, r3
 8012592:	f7ff ffbd 	bl	8012510 <SD_CheckStatus>
 8012596:	4603      	mov	r3, r0
}
 8012598:	4618      	mov	r0, r3
 801259a:	3708      	adds	r7, #8
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}

080125a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b086      	sub	sp, #24
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	60b9      	str	r1, [r7, #8]
 80125a8:	607a      	str	r2, [r7, #4]
 80125aa:	603b      	str	r3, [r7, #0]
 80125ac:	4603      	mov	r3, r0
 80125ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80125b0:	2301      	movs	r3, #1
 80125b2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80125b4:	f247 5030 	movw	r0, #30000	; 0x7530
 80125b8:	f7ff ff8c 	bl	80124d4 <SD_CheckStatusWithTimeout>
 80125bc:	4603      	mov	r3, r0
 80125be:	2b00      	cmp	r3, #0
 80125c0:	da01      	bge.n	80125c6 <SD_read+0x26>
  {
    return res;
 80125c2:	7dfb      	ldrb	r3, [r7, #23]
 80125c4:	e03b      	b.n	801263e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80125c6:	683a      	ldr	r2, [r7, #0]
 80125c8:	6879      	ldr	r1, [r7, #4]
 80125ca:	68b8      	ldr	r0, [r7, #8]
 80125cc:	f7ff fef4 	bl	80123b8 <BSP_SD_ReadBlocks_DMA>
 80125d0:	4603      	mov	r3, r0
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d132      	bne.n	801263c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80125d6:	4b1c      	ldr	r3, [pc, #112]	; (8012648 <SD_read+0xa8>)
 80125d8:	2200      	movs	r2, #0
 80125da:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80125dc:	f7f1 f890 	bl	8003700 <HAL_GetTick>
 80125e0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80125e2:	bf00      	nop
 80125e4:	4b18      	ldr	r3, [pc, #96]	; (8012648 <SD_read+0xa8>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d108      	bne.n	80125fe <SD_read+0x5e>
 80125ec:	f7f1 f888 	bl	8003700 <HAL_GetTick>
 80125f0:	4602      	mov	r2, r0
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	f247 522f 	movw	r2, #29999	; 0x752f
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d9f2      	bls.n	80125e4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80125fe:	4b12      	ldr	r3, [pc, #72]	; (8012648 <SD_read+0xa8>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d102      	bne.n	801260c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8012606:	2301      	movs	r3, #1
 8012608:	75fb      	strb	r3, [r7, #23]
 801260a:	e017      	b.n	801263c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801260c:	4b0e      	ldr	r3, [pc, #56]	; (8012648 <SD_read+0xa8>)
 801260e:	2200      	movs	r2, #0
 8012610:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012612:	f7f1 f875 	bl	8003700 <HAL_GetTick>
 8012616:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012618:	e007      	b.n	801262a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801261a:	f7ff ff01 	bl	8012420 <BSP_SD_GetCardState>
 801261e:	4603      	mov	r3, r0
 8012620:	2b00      	cmp	r3, #0
 8012622:	d102      	bne.n	801262a <SD_read+0x8a>
          {
            res = RES_OK;
 8012624:	2300      	movs	r3, #0
 8012626:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012628:	e008      	b.n	801263c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801262a:	f7f1 f869 	bl	8003700 <HAL_GetTick>
 801262e:	4602      	mov	r2, r0
 8012630:	693b      	ldr	r3, [r7, #16]
 8012632:	1ad3      	subs	r3, r2, r3
 8012634:	f247 522f 	movw	r2, #29999	; 0x752f
 8012638:	4293      	cmp	r3, r2
 801263a:	d9ee      	bls.n	801261a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801263c:	7dfb      	ldrb	r3, [r7, #23]
}
 801263e:	4618      	mov	r0, r3
 8012640:	3718      	adds	r7, #24
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	24000b48 	.word	0x24000b48

0801264c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b086      	sub	sp, #24
 8012650:	af00      	add	r7, sp, #0
 8012652:	60b9      	str	r1, [r7, #8]
 8012654:	607a      	str	r2, [r7, #4]
 8012656:	603b      	str	r3, [r7, #0]
 8012658:	4603      	mov	r3, r0
 801265a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801265c:	2301      	movs	r3, #1
 801265e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012660:	4b24      	ldr	r3, [pc, #144]	; (80126f4 <SD_write+0xa8>)
 8012662:	2200      	movs	r2, #0
 8012664:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012666:	f247 5030 	movw	r0, #30000	; 0x7530
 801266a:	f7ff ff33 	bl	80124d4 <SD_CheckStatusWithTimeout>
 801266e:	4603      	mov	r3, r0
 8012670:	2b00      	cmp	r3, #0
 8012672:	da01      	bge.n	8012678 <SD_write+0x2c>
  {
    return res;
 8012674:	7dfb      	ldrb	r3, [r7, #23]
 8012676:	e038      	b.n	80126ea <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012678:	683a      	ldr	r2, [r7, #0]
 801267a:	6879      	ldr	r1, [r7, #4]
 801267c:	68b8      	ldr	r0, [r7, #8]
 801267e:	f7ff feb5 	bl	80123ec <BSP_SD_WriteBlocks_DMA>
 8012682:	4603      	mov	r3, r0
 8012684:	2b00      	cmp	r3, #0
 8012686:	d12f      	bne.n	80126e8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012688:	f7f1 f83a 	bl	8003700 <HAL_GetTick>
 801268c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801268e:	bf00      	nop
 8012690:	4b18      	ldr	r3, [pc, #96]	; (80126f4 <SD_write+0xa8>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d108      	bne.n	80126aa <SD_write+0x5e>
 8012698:	f7f1 f832 	bl	8003700 <HAL_GetTick>
 801269c:	4602      	mov	r2, r0
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	1ad3      	subs	r3, r2, r3
 80126a2:	f247 522f 	movw	r2, #29999	; 0x752f
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d9f2      	bls.n	8012690 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80126aa:	4b12      	ldr	r3, [pc, #72]	; (80126f4 <SD_write+0xa8>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d102      	bne.n	80126b8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80126b2:	2301      	movs	r3, #1
 80126b4:	75fb      	strb	r3, [r7, #23]
 80126b6:	e017      	b.n	80126e8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80126b8:	4b0e      	ldr	r3, [pc, #56]	; (80126f4 <SD_write+0xa8>)
 80126ba:	2200      	movs	r2, #0
 80126bc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80126be:	f7f1 f81f 	bl	8003700 <HAL_GetTick>
 80126c2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80126c4:	e007      	b.n	80126d6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80126c6:	f7ff feab 	bl	8012420 <BSP_SD_GetCardState>
 80126ca:	4603      	mov	r3, r0
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d102      	bne.n	80126d6 <SD_write+0x8a>
          {
            res = RES_OK;
 80126d0:	2300      	movs	r3, #0
 80126d2:	75fb      	strb	r3, [r7, #23]
            break;
 80126d4:	e008      	b.n	80126e8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80126d6:	f7f1 f813 	bl	8003700 <HAL_GetTick>
 80126da:	4602      	mov	r2, r0
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	1ad3      	subs	r3, r2, r3
 80126e0:	f247 522f 	movw	r2, #29999	; 0x752f
 80126e4:	4293      	cmp	r3, r2
 80126e6:	d9ee      	bls.n	80126c6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80126e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3718      	adds	r7, #24
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	bf00      	nop
 80126f4:	24000b44 	.word	0x24000b44

080126f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b08c      	sub	sp, #48	; 0x30
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	4603      	mov	r3, r0
 8012700:	603a      	str	r2, [r7, #0]
 8012702:	71fb      	strb	r3, [r7, #7]
 8012704:	460b      	mov	r3, r1
 8012706:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012708:	2301      	movs	r3, #1
 801270a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801270e:	4b25      	ldr	r3, [pc, #148]	; (80127a4 <SD_ioctl+0xac>)
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	b2db      	uxtb	r3, r3
 8012714:	f003 0301 	and.w	r3, r3, #1
 8012718:	2b00      	cmp	r3, #0
 801271a:	d001      	beq.n	8012720 <SD_ioctl+0x28>
 801271c:	2303      	movs	r3, #3
 801271e:	e03c      	b.n	801279a <SD_ioctl+0xa2>

  switch (cmd)
 8012720:	79bb      	ldrb	r3, [r7, #6]
 8012722:	2b03      	cmp	r3, #3
 8012724:	d834      	bhi.n	8012790 <SD_ioctl+0x98>
 8012726:	a201      	add	r2, pc, #4	; (adr r2, 801272c <SD_ioctl+0x34>)
 8012728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801272c:	0801273d 	.word	0x0801273d
 8012730:	08012745 	.word	0x08012745
 8012734:	0801275d 	.word	0x0801275d
 8012738:	08012777 	.word	0x08012777
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801273c:	2300      	movs	r3, #0
 801273e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012742:	e028      	b.n	8012796 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012744:	f107 0308 	add.w	r3, r7, #8
 8012748:	4618      	mov	r0, r3
 801274a:	f7ff fe79 	bl	8012440 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801274e:	6a3a      	ldr	r2, [r7, #32]
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012754:	2300      	movs	r3, #0
 8012756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801275a:	e01c      	b.n	8012796 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801275c:	f107 0308 	add.w	r3, r7, #8
 8012760:	4618      	mov	r0, r3
 8012762:	f7ff fe6d 	bl	8012440 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012768:	b29a      	uxth	r2, r3
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801276e:	2300      	movs	r3, #0
 8012770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012774:	e00f      	b.n	8012796 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012776:	f107 0308 	add.w	r3, r7, #8
 801277a:	4618      	mov	r0, r3
 801277c:	f7ff fe60 	bl	8012440 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012782:	0a5a      	lsrs	r2, r3, #9
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012788:	2300      	movs	r3, #0
 801278a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801278e:	e002      	b.n	8012796 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012790:	2304      	movs	r3, #4
 8012792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801279a:	4618      	mov	r0, r3
 801279c:	3730      	adds	r7, #48	; 0x30
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	bf00      	nop
 80127a4:	24000019 	.word	0x24000019

080127a8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80127a8:	b480      	push	{r7}
 80127aa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80127ac:	4b03      	ldr	r3, [pc, #12]	; (80127bc <BSP_SD_WriteCpltCallback+0x14>)
 80127ae:	2201      	movs	r2, #1
 80127b0:	601a      	str	r2, [r3, #0]
}
 80127b2:	bf00      	nop
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr
 80127bc:	24000b44 	.word	0x24000b44

080127c0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80127c0:	b480      	push	{r7}
 80127c2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80127c4:	4b03      	ldr	r3, [pc, #12]	; (80127d4 <BSP_SD_ReadCpltCallback+0x14>)
 80127c6:	2201      	movs	r2, #1
 80127c8:	601a      	str	r2, [r3, #0]
}
 80127ca:	bf00      	nop
 80127cc:	46bd      	mov	sp, r7
 80127ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d2:	4770      	bx	lr
 80127d4:	24000b48 	.word	0x24000b48

080127d8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	460b      	mov	r3, r1
 80127e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80127e4:	f248 0074 	movw	r0, #32884	; 0x8074
 80127e8:	f005 fed0 	bl	801858c <malloc>
 80127ec:	4603      	mov	r3, r0
 80127ee:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d105      	bne.n	8012802 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2200      	movs	r2, #0
 80127fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80127fe:	2302      	movs	r3, #2
 8012800:	e034      	b.n	801286c <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	68fa      	ldr	r2, [r7, #12]
 8012806:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	7c1b      	ldrb	r3, [r3, #16]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d115      	bne.n	801283e <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8012812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012816:	2202      	movs	r2, #2
 8012818:	2101      	movs	r1, #1
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f005 fd1d 	bl	801825a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2201      	movs	r2, #1
 8012824:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8012828:	f44f 7300 	mov.w	r3, #512	; 0x200
 801282c:	2202      	movs	r2, #2
 801282e:	2181      	movs	r1, #129	; 0x81
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f005 fd12 	bl	801825a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2201      	movs	r2, #1
 801283a:	871a      	strh	r2, [r3, #56]	; 0x38
 801283c:	e012      	b.n	8012864 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801283e:	2340      	movs	r3, #64	; 0x40
 8012840:	2202      	movs	r2, #2
 8012842:	2101      	movs	r1, #1
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f005 fd08 	bl	801825a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2201      	movs	r2, #1
 801284e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8012852:	2340      	movs	r3, #64	; 0x40
 8012854:	2202      	movs	r2, #2
 8012856:	2181      	movs	r1, #129	; 0x81
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f005 fcfe 	bl	801825a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2201      	movs	r2, #1
 8012862:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f000 f98e 	bl	8012b86 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801286a:	2300      	movs	r3, #0
}
 801286c:	4618      	mov	r0, r3
 801286e:	3710      	adds	r7, #16
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	460b      	mov	r3, r1
 801287e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8012880:	2101      	movs	r1, #1
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f005 fd0f 	bl	80182a6 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2200      	movs	r2, #0
 801288c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8012890:	2181      	movs	r1, #129	; 0x81
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f005 fd07 	bl	80182a6 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2200      	movs	r2, #0
 801289c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f000 f9cf 	bl	8012c42 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d009      	beq.n	80128c2 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128b4:	4618      	mov	r0, r3
 80128b6:	f005 fe71 	bl	801859c <free>
    pdev->pClassData = NULL;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2200      	movs	r2, #0
 80128be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80128c2:	2300      	movs	r3, #0
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3708      	adds	r7, #8
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}

080128cc <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b086      	sub	sp, #24
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128dc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80128de:	2300      	movs	r3, #0
 80128e0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80128e2:	2300      	movs	r3, #0
 80128e4:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	781b      	ldrb	r3, [r3, #0]
 80128ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d04d      	beq.n	801298e <USBD_MSC_Setup+0xc2>
 80128f2:	2b20      	cmp	r3, #32
 80128f4:	f040 80c6 	bne.w	8012a84 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	785b      	ldrb	r3, [r3, #1]
 80128fc:	2bfe      	cmp	r3, #254	; 0xfe
 80128fe:	d002      	beq.n	8012906 <USBD_MSC_Setup+0x3a>
 8012900:	2bff      	cmp	r3, #255	; 0xff
 8012902:	d024      	beq.n	801294e <USBD_MSC_Setup+0x82>
 8012904:	e03b      	b.n	801297e <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	885b      	ldrh	r3, [r3, #2]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d118      	bne.n	8012940 <USBD_MSC_Setup+0x74>
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	88db      	ldrh	r3, [r3, #6]
 8012912:	2b01      	cmp	r3, #1
 8012914:	d114      	bne.n	8012940 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801291c:	2b00      	cmp	r3, #0
 801291e:	da0f      	bge.n	8012940 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012926:	699b      	ldr	r3, [r3, #24]
 8012928:	4798      	blx	r3
 801292a:	4603      	mov	r3, r0
 801292c:	461a      	mov	r2, r3
 801292e:	693b      	ldr	r3, [r7, #16]
 8012930:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	2201      	movs	r2, #1
 8012936:	4619      	mov	r1, r3
 8012938:	6878      	ldr	r0, [r7, #4]
 801293a:	f002 fdaa 	bl	8015492 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801293e:	e025      	b.n	801298c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8012940:	6839      	ldr	r1, [r7, #0]
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f002 fd34 	bl	80153b0 <USBD_CtlError>
        ret = USBD_FAIL;
 8012948:	2303      	movs	r3, #3
 801294a:	75fb      	strb	r3, [r7, #23]
      break;
 801294c:	e01e      	b.n	801298c <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	885b      	ldrh	r3, [r3, #2]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d10c      	bne.n	8012970 <USBD_MSC_Setup+0xa4>
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	88db      	ldrh	r3, [r3, #6]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d108      	bne.n	8012970 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8012964:	2b00      	cmp	r3, #0
 8012966:	db03      	blt.n	8012970 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f000 f947 	bl	8012bfc <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801296e:	e00d      	b.n	801298c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8012970:	6839      	ldr	r1, [r7, #0]
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f002 fd1c 	bl	80153b0 <USBD_CtlError>
        ret = USBD_FAIL;
 8012978:	2303      	movs	r3, #3
 801297a:	75fb      	strb	r3, [r7, #23]
      break;
 801297c:	e006      	b.n	801298c <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 801297e:	6839      	ldr	r1, [r7, #0]
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f002 fd15 	bl	80153b0 <USBD_CtlError>
      ret = USBD_FAIL;
 8012986:	2303      	movs	r3, #3
 8012988:	75fb      	strb	r3, [r7, #23]
      break;
 801298a:	bf00      	nop
    }
    break;
 801298c:	e081      	b.n	8012a92 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	785b      	ldrb	r3, [r3, #1]
 8012992:	2b0b      	cmp	r3, #11
 8012994:	d86d      	bhi.n	8012a72 <USBD_MSC_Setup+0x1a6>
 8012996:	a201      	add	r2, pc, #4	; (adr r2, 801299c <USBD_MSC_Setup+0xd0>)
 8012998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801299c:	080129cd 	.word	0x080129cd
 80129a0:	08012a43 	.word	0x08012a43
 80129a4:	08012a73 	.word	0x08012a73
 80129a8:	08012a73 	.word	0x08012a73
 80129ac:	08012a73 	.word	0x08012a73
 80129b0:	08012a73 	.word	0x08012a73
 80129b4:	08012a73 	.word	0x08012a73
 80129b8:	08012a73 	.word	0x08012a73
 80129bc:	08012a73 	.word	0x08012a73
 80129c0:	08012a73 	.word	0x08012a73
 80129c4:	080129f5 	.word	0x080129f5
 80129c8:	08012a1d 	.word	0x08012a1d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129d2:	2b03      	cmp	r3, #3
 80129d4:	d107      	bne.n	80129e6 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80129d6:	f107 030e 	add.w	r3, r7, #14
 80129da:	2202      	movs	r2, #2
 80129dc:	4619      	mov	r1, r3
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f002 fd57 	bl	8015492 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80129e4:	e04d      	b.n	8012a82 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80129e6:	6839      	ldr	r1, [r7, #0]
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f002 fce1 	bl	80153b0 <USBD_CtlError>
        ret = USBD_FAIL;
 80129ee:	2303      	movs	r3, #3
 80129f0:	75fb      	strb	r3, [r7, #23]
      break;
 80129f2:	e046      	b.n	8012a82 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129fa:	2b03      	cmp	r3, #3
 80129fc:	d107      	bne.n	8012a0e <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80129fe:	693b      	ldr	r3, [r7, #16]
 8012a00:	3304      	adds	r3, #4
 8012a02:	2201      	movs	r2, #1
 8012a04:	4619      	mov	r1, r3
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f002 fd43 	bl	8015492 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012a0c:	e039      	b.n	8012a82 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8012a0e:	6839      	ldr	r1, [r7, #0]
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f002 fccd 	bl	80153b0 <USBD_CtlError>
        ret = USBD_FAIL;
 8012a16:	2303      	movs	r3, #3
 8012a18:	75fb      	strb	r3, [r7, #23]
      break;
 8012a1a:	e032      	b.n	8012a82 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a22:	2b03      	cmp	r3, #3
 8012a24:	d106      	bne.n	8012a34 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	885b      	ldrh	r3, [r3, #2]
 8012a2a:	b2db      	uxtb	r3, r3
 8012a2c:	461a      	mov	r2, r3
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012a32:	e026      	b.n	8012a82 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8012a34:	6839      	ldr	r1, [r7, #0]
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f002 fcba 	bl	80153b0 <USBD_CtlError>
        ret = USBD_FAIL;
 8012a3c:	2303      	movs	r3, #3
 8012a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8012a40:	e01f      	b.n	8012a82 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a48:	2b03      	cmp	r3, #3
 8012a4a:	d119      	bne.n	8012a80 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	885b      	ldrh	r3, [r3, #2]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d115      	bne.n	8012a80 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	889b      	ldrh	r3, [r3, #4]
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	4619      	mov	r1, r3
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	f005 fc41 	bl	80182e4 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	889b      	ldrh	r3, [r3, #4]
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	4619      	mov	r1, r3
 8012a6a:	6878      	ldr	r0, [r7, #4]
 8012a6c:	f000 fa90 	bl	8012f90 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8012a70:	e006      	b.n	8012a80 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8012a72:	6839      	ldr	r1, [r7, #0]
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	f002 fc9b 	bl	80153b0 <USBD_CtlError>
      ret = USBD_FAIL;
 8012a7a:	2303      	movs	r3, #3
 8012a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8012a7e:	e000      	b.n	8012a82 <USBD_MSC_Setup+0x1b6>
      break;
 8012a80:	bf00      	nop
    }
    break;
 8012a82:	e006      	b.n	8012a92 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8012a84:	6839      	ldr	r1, [r7, #0]
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f002 fc92 	bl	80153b0 <USBD_CtlError>
    ret = USBD_FAIL;
 8012a8c:	2303      	movs	r3, #3
 8012a8e:	75fb      	strb	r3, [r7, #23]
    break;
 8012a90:	bf00      	nop
  }

  return (uint8_t)ret;
 8012a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3718      	adds	r7, #24
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}

08012a9c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	460b      	mov	r3, r1
 8012aa6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8012aa8:	78fb      	ldrb	r3, [r7, #3]
 8012aaa:	4619      	mov	r1, r3
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f000 f8d9 	bl	8012c64 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8012ab2:	2300      	movs	r3, #0
}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	3708      	adds	r7, #8
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}

08012abc <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8012ac8:	78fb      	ldrb	r3, [r7, #3]
 8012aca:	4619      	mov	r1, r3
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f000 f8fd 	bl	8012ccc <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8012ad2:	2300      	movs	r3, #0
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3708      	adds	r7, #8
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2220      	movs	r2, #32
 8012ae8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8012aea:	4b03      	ldr	r3, [pc, #12]	; (8012af8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	370c      	adds	r7, #12
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr
 8012af8:	24000054 	.word	0x24000054

08012afc <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8012afc:	b480      	push	{r7}
 8012afe:	b083      	sub	sp, #12
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2220      	movs	r2, #32
 8012b08:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8012b0a:	4b03      	ldr	r3, [pc, #12]	; (8012b18 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	370c      	adds	r7, #12
 8012b10:	46bd      	mov	sp, r7
 8012b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b16:	4770      	bx	lr
 8012b18:	24000074 	.word	0x24000074

08012b1c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b083      	sub	sp, #12
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2220      	movs	r2, #32
 8012b28:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8012b2a:	4b03      	ldr	r3, [pc, #12]	; (8012b38 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	370c      	adds	r7, #12
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr
 8012b38:	24000094 	.word	0x24000094

08012b3c <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	b083      	sub	sp, #12
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	220a      	movs	r2, #10
 8012b48:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8012b4a:	4b03      	ldr	r3, [pc, #12]	; (8012b58 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr
 8012b58:	240000b4 	.word	0x240000b4

08012b5c <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8012b5c:	b480      	push	{r7}
 8012b5e:	b083      	sub	sp, #12
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d101      	bne.n	8012b70 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012b6c:	2303      	movs	r3, #3
 8012b6e:	e004      	b.n	8012b7a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	683a      	ldr	r2, [r7, #0]
 8012b74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8012b78:	2300      	movs	r3, #0
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	370c      	adds	r7, #12
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr

08012b86 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8012b86:	b580      	push	{r7, lr}
 8012b88:	b084      	sub	sp, #16
 8012b8a:	af00      	add	r7, sp, #0
 8012b8c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b94:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	2200      	movs	r2, #0
 8012b9a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8012ba2:	68fa      	ldr	r2, [r7, #12]
 8012ba4:	f248 0361 	movw	r3, #32865	; 0x8061
 8012ba8:	4413      	add	r3, r2
 8012baa:	2200      	movs	r2, #0
 8012bac:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8012bae:	68fa      	ldr	r2, [r7, #12]
 8012bb0:	f248 0360 	movw	r3, #32864	; 0x8060
 8012bb4:	4413      	add	r3, r2
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012bba:	68fa      	ldr	r2, [r7, #12]
 8012bbc:	f248 0362 	movw	r3, #32866	; 0x8062
 8012bc0:	4413      	add	r3, r2
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	2000      	movs	r0, #0
 8012bd0:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8012bd2:	2101      	movs	r1, #1
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f005 fb85 	bl	80182e4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8012bda:	2181      	movs	r1, #129	; 0x81
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f005 fb81 	bl	80182e4 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	f248 0210 	movw	r2, #32784	; 0x8010
 8012be8:	441a      	add	r2, r3
 8012bea:	231f      	movs	r3, #31
 8012bec:	2101      	movs	r1, #1
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f005 fc41 	bl	8018476 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012bf4:	bf00      	nop
 8012bf6:	3710      	adds	r7, #16
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c0a:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	2201      	movs	r2, #1
 8012c16:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8012c18:	2181      	movs	r1, #129	; 0x81
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f005 fba0 	bl	8018360 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8012c20:	2101      	movs	r1, #1
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f005 fb9c 	bl	8018360 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	f248 0210 	movw	r2, #32784	; 0x8010
 8012c2e:	441a      	add	r2, r3
 8012c30:	231f      	movs	r3, #31
 8012c32:	2101      	movs	r1, #1
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	f005 fc1e 	bl	8018476 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012c3a:	bf00      	nop
 8012c3c:	3710      	adds	r7, #16
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}

08012c42 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8012c42:	b480      	push	{r7}
 8012c44:	b085      	sub	sp, #20
 8012c46:	af00      	add	r7, sp, #0
 8012c48:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c50:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	2200      	movs	r2, #0
 8012c56:	721a      	strb	r2, [r3, #8]
}
 8012c58:	bf00      	nop
 8012c5a:	3714      	adds	r7, #20
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr

08012c64 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	460b      	mov	r3, r1
 8012c6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c76:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	7a1b      	ldrb	r3, [r3, #8]
 8012c7c:	2b02      	cmp	r3, #2
 8012c7e:	d004      	beq.n	8012c8a <MSC_BOT_DataIn+0x26>
 8012c80:	2b02      	cmp	r3, #2
 8012c82:	db1c      	blt.n	8012cbe <MSC_BOT_DataIn+0x5a>
 8012c84:	2b04      	cmp	r3, #4
 8012c86:	dc1a      	bgt.n	8012cbe <MSC_BOT_DataIn+0x5a>
 8012c88:	e014      	b.n	8012cb4 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012c8a:	68fa      	ldr	r2, [r7, #12]
 8012c8c:	f248 031d 	movw	r3, #32797	; 0x801d
 8012c90:	4413      	add	r3, r2
 8012c92:	7819      	ldrb	r1, [r3, #0]
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	f248 031f 	movw	r3, #32799	; 0x801f
 8012c9a:	4413      	add	r3, r2
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f000 f99e 	bl	8012fe0 <SCSI_ProcessCmd>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	da0b      	bge.n	8012cc2 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012caa:	2101      	movs	r1, #1
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f000 f90b 	bl	8012ec8 <MSC_BOT_SendCSW>
    }
    break;
 8012cb2:	e006      	b.n	8012cc2 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012cb4:	2100      	movs	r1, #0
 8012cb6:	6878      	ldr	r0, [r7, #4]
 8012cb8:	f000 f906 	bl	8012ec8 <MSC_BOT_SendCSW>
    break;
 8012cbc:	e002      	b.n	8012cc4 <MSC_BOT_DataIn+0x60>

  default:
    break;
 8012cbe:	bf00      	nop
 8012cc0:	e000      	b.n	8012cc4 <MSC_BOT_DataIn+0x60>
    break;
 8012cc2:	bf00      	nop
  }
}
 8012cc4:	bf00      	nop
 8012cc6:	3710      	adds	r7, #16
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}

08012ccc <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b084      	sub	sp, #16
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	460b      	mov	r3, r1
 8012cd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012cde:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	7a1b      	ldrb	r3, [r3, #8]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d002      	beq.n	8012cee <MSC_BOT_DataOut+0x22>
 8012ce8:	2b01      	cmp	r3, #1
 8012cea:	d004      	beq.n	8012cf6 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8012cec:	e018      	b.n	8012d20 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f000 f81a 	bl	8012d28 <MSC_BOT_CBW_Decode>
      break;
 8012cf4:	e014      	b.n	8012d20 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012cf6:	68fa      	ldr	r2, [r7, #12]
 8012cf8:	f248 031d 	movw	r3, #32797	; 0x801d
 8012cfc:	4413      	add	r3, r2
 8012cfe:	7819      	ldrb	r1, [r3, #0]
 8012d00:	68fa      	ldr	r2, [r7, #12]
 8012d02:	f248 031f 	movw	r3, #32799	; 0x801f
 8012d06:	4413      	add	r3, r2
 8012d08:	461a      	mov	r2, r3
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f000 f968 	bl	8012fe0 <SCSI_ProcessCmd>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	da03      	bge.n	8012d1e <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012d16:	2101      	movs	r1, #1
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f000 f8d5 	bl	8012ec8 <MSC_BOT_SendCSW>
      break;
 8012d1e:	bf00      	nop
  }
}
 8012d20:	bf00      	nop
 8012d22:	3710      	adds	r7, #16
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}

08012d28 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b084      	sub	sp, #16
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d36:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8012d38:	68fa      	ldr	r2, [r7, #12]
 8012d3a:	f248 0314 	movw	r3, #32788	; 0x8014
 8012d3e:	4413      	add	r3, r2
 8012d40:	681a      	ldr	r2, [r3, #0]
 8012d42:	68f9      	ldr	r1, [r7, #12]
 8012d44:	f248 0334 	movw	r3, #32820	; 0x8034
 8012d48:	440b      	add	r3, r1
 8012d4a:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8012d4c:	68fa      	ldr	r2, [r7, #12]
 8012d4e:	f248 0318 	movw	r3, #32792	; 0x8018
 8012d52:	4413      	add	r3, r2
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	68f9      	ldr	r1, [r7, #12]
 8012d58:	f248 0338 	movw	r3, #32824	; 0x8038
 8012d5c:	440b      	add	r3, r1
 8012d5e:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012d60:	2101      	movs	r1, #1
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f005 fba8 	bl	80184b8 <USBD_LL_GetRxDataSize>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	2b1f      	cmp	r3, #31
 8012d6c:	d11c      	bne.n	8012da8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	f248 0310 	movw	r3, #32784	; 0x8010
 8012d74:	4413      	add	r3, r2
 8012d76:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012d78:	4a38      	ldr	r2, [pc, #224]	; (8012e5c <MSC_BOT_CBW_Decode+0x134>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d114      	bne.n	8012da8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012d7e:	68fa      	ldr	r2, [r7, #12]
 8012d80:	f248 031d 	movw	r3, #32797	; 0x801d
 8012d84:	4413      	add	r3, r2
 8012d86:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d80d      	bhi.n	8012da8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012d8c:	68fa      	ldr	r2, [r7, #12]
 8012d8e:	f248 031e 	movw	r3, #32798	; 0x801e
 8012d92:	4413      	add	r3, r2
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d006      	beq.n	8012da8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8012d9a:	68fa      	ldr	r2, [r7, #12]
 8012d9c:	f248 031e 	movw	r3, #32798	; 0x801e
 8012da0:	4413      	add	r3, r2
 8012da2:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012da4:	2b10      	cmp	r3, #16
 8012da6:	d910      	bls.n	8012dca <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012da8:	68fa      	ldr	r2, [r7, #12]
 8012daa:	f248 031d 	movw	r3, #32797	; 0x801d
 8012dae:	4413      	add	r3, r2
 8012db0:	7819      	ldrb	r1, [r3, #0]
 8012db2:	2320      	movs	r3, #32
 8012db4:	2205      	movs	r2, #5
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f000 fd36 	bl	8013828 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	2202      	movs	r2, #2
 8012dc0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	f000 f8b2 	bl	8012f2c <MSC_BOT_Abort>
 8012dc8:	e044      	b.n	8012e54 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012dca:	68fa      	ldr	r2, [r7, #12]
 8012dcc:	f248 031d 	movw	r3, #32797	; 0x801d
 8012dd0:	4413      	add	r3, r2
 8012dd2:	7819      	ldrb	r1, [r3, #0]
 8012dd4:	68fa      	ldr	r2, [r7, #12]
 8012dd6:	f248 031f 	movw	r3, #32799	; 0x801f
 8012dda:	4413      	add	r3, r2
 8012ddc:	461a      	mov	r2, r3
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f000 f8fe 	bl	8012fe0 <SCSI_ProcessCmd>
 8012de4:	4603      	mov	r3, r0
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	da0c      	bge.n	8012e04 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	7a1b      	ldrb	r3, [r3, #8]
 8012dee:	2b05      	cmp	r3, #5
 8012df0:	d104      	bne.n	8012dfc <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012df2:	2101      	movs	r1, #1
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f000 f867 	bl	8012ec8 <MSC_BOT_SendCSW>
 8012dfa:	e02b      	b.n	8012e54 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f000 f895 	bl	8012f2c <MSC_BOT_Abort>
 8012e02:	e027      	b.n	8012e54 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	7a1b      	ldrb	r3, [r3, #8]
 8012e08:	2b02      	cmp	r3, #2
 8012e0a:	d022      	beq.n	8012e52 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d01e      	beq.n	8012e52 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012e18:	2b03      	cmp	r3, #3
 8012e1a:	d01a      	beq.n	8012e52 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	68db      	ldr	r3, [r3, #12]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d009      	beq.n	8012e38 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	f103 0110 	add.w	r1, r3, #16
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	68db      	ldr	r3, [r3, #12]
 8012e2e:	461a      	mov	r2, r3
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f000 f815 	bl	8012e60 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8012e36:	e00d      	b.n	8012e54 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	68db      	ldr	r3, [r3, #12]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d104      	bne.n	8012e4a <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012e40:	2100      	movs	r1, #0
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f000 f840 	bl	8012ec8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8012e48:	e004      	b.n	8012e54 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f000 f86e 	bl	8012f2c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8012e50:	e000      	b.n	8012e54 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8012e52:	bf00      	nop
    }
  }
}
 8012e54:	3710      	adds	r7, #16
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	43425355 	.word	0x43425355

08012e60 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b086      	sub	sp, #24
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e72:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8012e74:	697a      	ldr	r2, [r7, #20]
 8012e76:	f248 0318 	movw	r3, #32792	; 0x8018
 8012e7a:	4413      	add	r3, r2
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	687a      	ldr	r2, [r7, #4]
 8012e80:	4293      	cmp	r3, r2
 8012e82:	bf28      	it	cs
 8012e84:	4613      	movcs	r3, r2
 8012e86:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8012e88:	697a      	ldr	r2, [r7, #20]
 8012e8a:	f248 0338 	movw	r3, #32824	; 0x8038
 8012e8e:	4413      	add	r3, r2
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	1ad2      	subs	r2, r2, r3
 8012e96:	6979      	ldr	r1, [r7, #20]
 8012e98:	f248 0338 	movw	r3, #32824	; 0x8038
 8012e9c:	440b      	add	r3, r1
 8012e9e:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8012ea0:	697a      	ldr	r2, [r7, #20]
 8012ea2:	f248 033c 	movw	r3, #32828	; 0x803c
 8012ea6:	4413      	add	r3, r2
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	2204      	movs	r2, #4
 8012eb0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	68ba      	ldr	r2, [r7, #8]
 8012eb6:	2181      	movs	r1, #129	; 0x81
 8012eb8:	68f8      	ldr	r0, [r7, #12]
 8012eba:	f005 fabb 	bl	8018434 <USBD_LL_Transmit>
}
 8012ebe:	bf00      	nop
 8012ec0:	3718      	adds	r7, #24
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
	...

08012ec8 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b084      	sub	sp, #16
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
 8012ed0:	460b      	mov	r3, r1
 8012ed2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012eda:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8012edc:	68fa      	ldr	r2, [r7, #12]
 8012ede:	f248 0330 	movw	r3, #32816	; 0x8030
 8012ee2:	4413      	add	r3, r2
 8012ee4:	4a10      	ldr	r2, [pc, #64]	; (8012f28 <MSC_BOT_SendCSW+0x60>)
 8012ee6:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	f248 033c 	movw	r3, #32828	; 0x803c
 8012eee:	4413      	add	r3, r2
 8012ef0:	78fa      	ldrb	r2, [r7, #3]
 8012ef2:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	f248 0230 	movw	r2, #32816	; 0x8030
 8012f00:	441a      	add	r2, r3
 8012f02:	230d      	movs	r3, #13
 8012f04:	2181      	movs	r1, #129	; 0x81
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f005 fa94 	bl	8018434 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	f248 0210 	movw	r2, #32784	; 0x8010
 8012f12:	441a      	add	r2, r3
 8012f14:	231f      	movs	r3, #31
 8012f16:	2101      	movs	r1, #1
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f005 faac 	bl	8018476 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012f1e:	bf00      	nop
 8012f20:	3710      	adds	r7, #16
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	53425355 	.word	0x53425355

08012f2c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b084      	sub	sp, #16
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f3a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	f248 031c 	movw	r3, #32796	; 0x801c
 8012f42:	4413      	add	r3, r2
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d10e      	bne.n	8012f68 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8012f4a:	68fa      	ldr	r2, [r7, #12]
 8012f4c:	f248 0318 	movw	r3, #32792	; 0x8018
 8012f50:	4413      	add	r3, r2
 8012f52:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d007      	beq.n	8012f68 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d103      	bne.n	8012f68 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012f60:	2101      	movs	r1, #1
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f005 f9dd 	bl	8018322 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012f68:	2181      	movs	r1, #129	; 0x81
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f005 f9d9 	bl	8018322 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	7a5b      	ldrb	r3, [r3, #9]
 8012f74:	2b02      	cmp	r3, #2
 8012f76:	d107      	bne.n	8012f88 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012f78:	2181      	movs	r1, #129	; 0x81
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f005 f9d1 	bl	8018322 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012f80:	2101      	movs	r1, #1
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f005 f9cd 	bl	8018322 <USBD_LL_StallEP>
  }
}
 8012f88:	bf00      	nop
 8012f8a:	3710      	adds	r7, #16
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b084      	sub	sp, #16
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	460b      	mov	r3, r1
 8012f9a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fa2:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	7a5b      	ldrb	r3, [r3, #9]
 8012fa8:	2b02      	cmp	r3, #2
 8012faa:	d108      	bne.n	8012fbe <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012fac:	2181      	movs	r1, #129	; 0x81
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f005 f9b7 	bl	8018322 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012fb4:	2101      	movs	r1, #1
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f005 f9b3 	bl	8018322 <USBD_LL_StallEP>
 8012fbc:	e00d      	b.n	8012fda <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8012fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	da08      	bge.n	8012fd8 <MSC_BOT_CplClrFeature+0x48>
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	7a5b      	ldrb	r3, [r3, #9]
 8012fca:	2b01      	cmp	r3, #1
 8012fcc:	d004      	beq.n	8012fd8 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012fce:	2101      	movs	r1, #1
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	f7ff ff79 	bl	8012ec8 <MSC_BOT_SendCSW>
 8012fd6:	e000      	b.n	8012fda <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8012fd8:	bf00      	nop
  }
}
 8012fda:	3710      	adds	r7, #16
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b086      	sub	sp, #24
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	60f8      	str	r0, [r7, #12]
 8012fe8:	460b      	mov	r3, r1
 8012fea:	607a      	str	r2, [r7, #4]
 8012fec:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ff4:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	2b25      	cmp	r3, #37	; 0x25
 8012ffc:	d06e      	beq.n	80130dc <SCSI_ProcessCmd+0xfc>
 8012ffe:	2b25      	cmp	r3, #37	; 0x25
 8013000:	dc11      	bgt.n	8013026 <SCSI_ProcessCmd+0x46>
 8013002:	2b1a      	cmp	r3, #26
 8013004:	d04f      	beq.n	80130a6 <SCSI_ProcessCmd+0xc6>
 8013006:	2b1a      	cmp	r3, #26
 8013008:	dc06      	bgt.n	8013018 <SCSI_ProcessCmd+0x38>
 801300a:	2b03      	cmp	r3, #3
 801300c:	d027      	beq.n	801305e <SCSI_ProcessCmd+0x7e>
 801300e:	2b12      	cmp	r3, #18
 8013010:	d02e      	beq.n	8013070 <SCSI_ProcessCmd+0x90>
 8013012:	2b00      	cmp	r3, #0
 8013014:	d01a      	beq.n	801304c <SCSI_ProcessCmd+0x6c>
 8013016:	e0a0      	b.n	801315a <SCSI_ProcessCmd+0x17a>
 8013018:	2b1e      	cmp	r3, #30
 801301a:	d03b      	beq.n	8013094 <SCSI_ProcessCmd+0xb4>
 801301c:	2b23      	cmp	r3, #35	; 0x23
 801301e:	d054      	beq.n	80130ca <SCSI_ProcessCmd+0xea>
 8013020:	2b1b      	cmp	r3, #27
 8013022:	d02e      	beq.n	8013082 <SCSI_ProcessCmd+0xa2>
 8013024:	e099      	b.n	801315a <SCSI_ProcessCmd+0x17a>
 8013026:	2b5a      	cmp	r3, #90	; 0x5a
 8013028:	d046      	beq.n	80130b8 <SCSI_ProcessCmd+0xd8>
 801302a:	2b5a      	cmp	r3, #90	; 0x5a
 801302c:	dc07      	bgt.n	801303e <SCSI_ProcessCmd+0x5e>
 801302e:	2b2a      	cmp	r3, #42	; 0x2a
 8013030:	d078      	beq.n	8013124 <SCSI_ProcessCmd+0x144>
 8013032:	2b2f      	cmp	r3, #47	; 0x2f
 8013034:	f000 8088 	beq.w	8013148 <SCSI_ProcessCmd+0x168>
 8013038:	2b28      	cmp	r3, #40	; 0x28
 801303a:	d061      	beq.n	8013100 <SCSI_ProcessCmd+0x120>
 801303c:	e08d      	b.n	801315a <SCSI_ProcessCmd+0x17a>
 801303e:	2ba8      	cmp	r3, #168	; 0xa8
 8013040:	d067      	beq.n	8013112 <SCSI_ProcessCmd+0x132>
 8013042:	2baa      	cmp	r3, #170	; 0xaa
 8013044:	d077      	beq.n	8013136 <SCSI_ProcessCmd+0x156>
 8013046:	2b9e      	cmp	r3, #158	; 0x9e
 8013048:	d051      	beq.n	80130ee <SCSI_ProcessCmd+0x10e>
 801304a:	e086      	b.n	801315a <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801304c:	7afb      	ldrb	r3, [r7, #11]
 801304e:	687a      	ldr	r2, [r7, #4]
 8013050:	4619      	mov	r1, r3
 8013052:	68f8      	ldr	r0, [r7, #12]
 8013054:	f000 f893 	bl	801317e <SCSI_TestUnitReady>
 8013058:	4603      	mov	r3, r0
 801305a:	75fb      	strb	r3, [r7, #23]
    break;
 801305c:	e089      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 801305e:	7afb      	ldrb	r3, [r7, #11]
 8013060:	687a      	ldr	r2, [r7, #4]
 8013062:	4619      	mov	r1, r3
 8013064:	68f8      	ldr	r0, [r7, #12]
 8013066:	f000 fb47 	bl	80136f8 <SCSI_RequestSense>
 801306a:	4603      	mov	r3, r0
 801306c:	75fb      	strb	r3, [r7, #23]
    break;
 801306e:	e080      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8013070:	7afb      	ldrb	r3, [r7, #11]
 8013072:	687a      	ldr	r2, [r7, #4]
 8013074:	4619      	mov	r1, r3
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	f000 f8d2 	bl	8013220 <SCSI_Inquiry>
 801307c:	4603      	mov	r3, r0
 801307e:	75fb      	strb	r3, [r7, #23]
    break;
 8013080:	e077      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8013082:	7afb      	ldrb	r3, [r7, #11]
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	4619      	mov	r1, r3
 8013088:	68f8      	ldr	r0, [r7, #12]
 801308a:	f000 fc27 	bl	80138dc <SCSI_StartStopUnit>
 801308e:	4603      	mov	r3, r0
 8013090:	75fb      	strb	r3, [r7, #23]
    break;
 8013092:	e06e      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8013094:	7afb      	ldrb	r3, [r7, #11]
 8013096:	687a      	ldr	r2, [r7, #4]
 8013098:	4619      	mov	r1, r3
 801309a:	68f8      	ldr	r0, [r7, #12]
 801309c:	f000 fc71 	bl	8013982 <SCSI_AllowPreventRemovable>
 80130a0:	4603      	mov	r3, r0
 80130a2:	75fb      	strb	r3, [r7, #23]
    break;
 80130a4:	e065      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 80130a6:	7afb      	ldrb	r3, [r7, #11]
 80130a8:	687a      	ldr	r2, [r7, #4]
 80130aa:	4619      	mov	r1, r3
 80130ac:	68f8      	ldr	r0, [r7, #12]
 80130ae:	f000 fad7 	bl	8013660 <SCSI_ModeSense6>
 80130b2:	4603      	mov	r3, r0
 80130b4:	75fb      	strb	r3, [r7, #23]
    break;
 80130b6:	e05c      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 80130b8:	7afb      	ldrb	r3, [r7, #11]
 80130ba:	687a      	ldr	r2, [r7, #4]
 80130bc:	4619      	mov	r1, r3
 80130be:	68f8      	ldr	r0, [r7, #12]
 80130c0:	f000 faf4 	bl	80136ac <SCSI_ModeSense10>
 80130c4:	4603      	mov	r3, r0
 80130c6:	75fb      	strb	r3, [r7, #23]
    break;
 80130c8:	e053      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80130ca:	7afb      	ldrb	r3, [r7, #11]
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	4619      	mov	r1, r3
 80130d0:	68f8      	ldr	r0, [r7, #12]
 80130d2:	f000 fa56 	bl	8013582 <SCSI_ReadFormatCapacity>
 80130d6:	4603      	mov	r3, r0
 80130d8:	75fb      	strb	r3, [r7, #23]
    break;
 80130da:	e04a      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80130dc:	7afb      	ldrb	r3, [r7, #11]
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	4619      	mov	r1, r3
 80130e2:	68f8      	ldr	r0, [r7, #12]
 80130e4:	f000 f910 	bl	8013308 <SCSI_ReadCapacity10>
 80130e8:	4603      	mov	r3, r0
 80130ea:	75fb      	strb	r3, [r7, #23]
    break;
 80130ec:	e041      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80130ee:	7afb      	ldrb	r3, [r7, #11]
 80130f0:	687a      	ldr	r2, [r7, #4]
 80130f2:	4619      	mov	r1, r3
 80130f4:	68f8      	ldr	r0, [r7, #12]
 80130f6:	f000 f98b 	bl	8013410 <SCSI_ReadCapacity16>
 80130fa:	4603      	mov	r3, r0
 80130fc:	75fb      	strb	r3, [r7, #23]
    break;
 80130fe:	e038      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8013100:	7afb      	ldrb	r3, [r7, #11]
 8013102:	687a      	ldr	r2, [r7, #4]
 8013104:	4619      	mov	r1, r3
 8013106:	68f8      	ldr	r0, [r7, #12]
 8013108:	f000 fc62 	bl	80139d0 <SCSI_Read10>
 801310c:	4603      	mov	r3, r0
 801310e:	75fb      	strb	r3, [r7, #23]
    break;
 8013110:	e02f      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8013112:	7afb      	ldrb	r3, [r7, #11]
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	4619      	mov	r1, r3
 8013118:	68f8      	ldr	r0, [r7, #12]
 801311a:	f000 fd0b 	bl	8013b34 <SCSI_Read12>
 801311e:	4603      	mov	r3, r0
 8013120:	75fb      	strb	r3, [r7, #23]
    break;
 8013122:	e026      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8013124:	7afb      	ldrb	r3, [r7, #11]
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	4619      	mov	r1, r3
 801312a:	68f8      	ldr	r0, [r7, #12]
 801312c:	f000 fdbe 	bl	8013cac <SCSI_Write10>
 8013130:	4603      	mov	r3, r0
 8013132:	75fb      	strb	r3, [r7, #23]
    break;
 8013134:	e01d      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8013136:	7afb      	ldrb	r3, [r7, #11]
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	4619      	mov	r1, r3
 801313c:	68f8      	ldr	r0, [r7, #12]
 801313e:	f000 fe8d 	bl	8013e5c <SCSI_Write12>
 8013142:	4603      	mov	r3, r0
 8013144:	75fb      	strb	r3, [r7, #23]
    break;
 8013146:	e014      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8013148:	7afb      	ldrb	r3, [r7, #11]
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	4619      	mov	r1, r3
 801314e:	68f8      	ldr	r0, [r7, #12]
 8013150:	f000 ff6c 	bl	801402c <SCSI_Verify10>
 8013154:	4603      	mov	r3, r0
 8013156:	75fb      	strb	r3, [r7, #23]
    break;
 8013158:	e00b      	b.n	8013172 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801315a:	7af9      	ldrb	r1, [r7, #11]
 801315c:	2320      	movs	r3, #32
 801315e:	2205      	movs	r2, #5
 8013160:	68f8      	ldr	r0, [r7, #12]
 8013162:	f000 fb61 	bl	8013828 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	2202      	movs	r2, #2
 801316a:	725a      	strb	r2, [r3, #9]
    ret = -1;
 801316c:	23ff      	movs	r3, #255	; 0xff
 801316e:	75fb      	strb	r3, [r7, #23]
    break;
 8013170:	bf00      	nop
  }

  return ret;
 8013172:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013176:	4618      	mov	r0, r3
 8013178:	3718      	adds	r7, #24
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}

0801317e <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801317e:	b580      	push	{r7, lr}
 8013180:	b086      	sub	sp, #24
 8013182:	af00      	add	r7, sp, #0
 8013184:	60f8      	str	r0, [r7, #12]
 8013186:	460b      	mov	r3, r1
 8013188:	607a      	str	r2, [r7, #4]
 801318a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013192:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8013194:	697a      	ldr	r2, [r7, #20]
 8013196:	f248 0318 	movw	r3, #32792	; 0x8018
 801319a:	4413      	add	r3, r2
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d00c      	beq.n	80131bc <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80131a2:	697a      	ldr	r2, [r7, #20]
 80131a4:	f248 031d 	movw	r3, #32797	; 0x801d
 80131a8:	4413      	add	r3, r2
 80131aa:	7819      	ldrb	r1, [r3, #0]
 80131ac:	2320      	movs	r3, #32
 80131ae:	2205      	movs	r2, #5
 80131b0:	68f8      	ldr	r0, [r7, #12]
 80131b2:	f000 fb39 	bl	8013828 <SCSI_SenseCode>

    return -1;
 80131b6:	f04f 33ff 	mov.w	r3, #4294967295
 80131ba:	e02c      	b.n	8013216 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80131bc:	697a      	ldr	r2, [r7, #20]
 80131be:	f248 0362 	movw	r3, #32866	; 0x8062
 80131c2:	4413      	add	r3, r2
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	2b02      	cmp	r3, #2
 80131c8:	d10b      	bne.n	80131e2 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80131ca:	7af9      	ldrb	r1, [r7, #11]
 80131cc:	233a      	movs	r3, #58	; 0x3a
 80131ce:	2202      	movs	r2, #2
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	f000 fb29 	bl	8013828 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	2205      	movs	r2, #5
 80131da:	721a      	strb	r2, [r3, #8]
    return -1;
 80131dc:	f04f 33ff 	mov.w	r3, #4294967295
 80131e0:	e019      	b.n	8013216 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80131e8:	689b      	ldr	r3, [r3, #8]
 80131ea:	7afa      	ldrb	r2, [r7, #11]
 80131ec:	4610      	mov	r0, r2
 80131ee:	4798      	blx	r3
 80131f0:	4603      	mov	r3, r0
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d00b      	beq.n	801320e <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80131f6:	7af9      	ldrb	r1, [r7, #11]
 80131f8:	233a      	movs	r3, #58	; 0x3a
 80131fa:	2202      	movs	r2, #2
 80131fc:	68f8      	ldr	r0, [r7, #12]
 80131fe:	f000 fb13 	bl	8013828 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	2205      	movs	r2, #5
 8013206:	721a      	strb	r2, [r3, #8]

    return -1;
 8013208:	f04f 33ff 	mov.w	r3, #4294967295
 801320c:	e003      	b.n	8013216 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	2200      	movs	r2, #0
 8013212:	60da      	str	r2, [r3, #12]

  return 0;
 8013214:	2300      	movs	r3, #0
}
 8013216:	4618      	mov	r0, r3
 8013218:	3718      	adds	r7, #24
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}
	...

08013220 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b088      	sub	sp, #32
 8013224:	af00      	add	r7, sp, #0
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	460b      	mov	r3, r1
 801322a:	607a      	str	r2, [r7, #4]
 801322c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013234:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 8013236:	69ba      	ldr	r2, [r7, #24]
 8013238:	f248 0318 	movw	r3, #32792	; 0x8018
 801323c:	4413      	add	r3, r2
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d10c      	bne.n	801325e <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013244:	69ba      	ldr	r2, [r7, #24]
 8013246:	f248 031d 	movw	r3, #32797	; 0x801d
 801324a:	4413      	add	r3, r2
 801324c:	7819      	ldrb	r1, [r3, #0]
 801324e:	2320      	movs	r3, #32
 8013250:	2205      	movs	r2, #5
 8013252:	68f8      	ldr	r0, [r7, #12]
 8013254:	f000 fae8 	bl	8013828 <SCSI_SenseCode>
    return -1;
 8013258:	f04f 33ff 	mov.w	r3, #4294967295
 801325c:	e04c      	b.n	80132f8 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	3301      	adds	r3, #1
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	f003 0301 	and.w	r3, r3, #1
 8013268:	2b00      	cmp	r3, #0
 801326a:	d022      	beq.n	80132b2 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	3302      	adds	r3, #2
 8013270:	781b      	ldrb	r3, [r3, #0]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d105      	bne.n	8013282 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8013276:	2206      	movs	r2, #6
 8013278:	4921      	ldr	r1, [pc, #132]	; (8013300 <SCSI_Inquiry+0xe0>)
 801327a:	69b8      	ldr	r0, [r7, #24]
 801327c:	f001 f862 	bl	8014344 <SCSI_UpdateBotData>
 8013280:	e039      	b.n	80132f6 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	3302      	adds	r3, #2
 8013286:	781b      	ldrb	r3, [r3, #0]
 8013288:	2b80      	cmp	r3, #128	; 0x80
 801328a:	d105      	bne.n	8013298 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801328c:	2208      	movs	r2, #8
 801328e:	491d      	ldr	r1, [pc, #116]	; (8013304 <SCSI_Inquiry+0xe4>)
 8013290:	69b8      	ldr	r0, [r7, #24]
 8013292:	f001 f857 	bl	8014344 <SCSI_UpdateBotData>
 8013296:	e02e      	b.n	80132f6 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8013298:	69ba      	ldr	r2, [r7, #24]
 801329a:	f248 031d 	movw	r3, #32797	; 0x801d
 801329e:	4413      	add	r3, r2
 80132a0:	7819      	ldrb	r1, [r3, #0]
 80132a2:	2324      	movs	r3, #36	; 0x24
 80132a4:	2205      	movs	r2, #5
 80132a6:	68f8      	ldr	r0, [r7, #12]
 80132a8:	f000 fabe 	bl	8013828 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80132ac:	f04f 33ff 	mov.w	r3, #4294967295
 80132b0:	e022      	b.n	80132f8 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80132b8:	69d9      	ldr	r1, [r3, #28]
 80132ba:	7afa      	ldrb	r2, [r7, #11]
 80132bc:	4613      	mov	r3, r2
 80132be:	00db      	lsls	r3, r3, #3
 80132c0:	4413      	add	r3, r2
 80132c2:	009b      	lsls	r3, r3, #2
 80132c4:	440b      	add	r3, r1
 80132c6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	3304      	adds	r3, #4
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	3305      	adds	r3, #5
 80132d2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	3304      	adds	r3, #4
 80132d8:	781b      	ldrb	r3, [r3, #0]
 80132da:	b29b      	uxth	r3, r3
 80132dc:	8bfa      	ldrh	r2, [r7, #30]
 80132de:	429a      	cmp	r2, r3
 80132e0:	d303      	bcc.n	80132ea <SCSI_Inquiry+0xca>
    {
      len = params[4];
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	3304      	adds	r3, #4
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80132ea:	8bfb      	ldrh	r3, [r7, #30]
 80132ec:	461a      	mov	r2, r3
 80132ee:	6979      	ldr	r1, [r7, #20]
 80132f0:	69b8      	ldr	r0, [r7, #24]
 80132f2:	f001 f827 	bl	8014344 <SCSI_UpdateBotData>
  }

  return 0;
 80132f6:	2300      	movs	r3, #0
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3720      	adds	r7, #32
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	240000c0 	.word	0x240000c0
 8013304:	240000c8 	.word	0x240000c8

08013308 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013308:	b590      	push	{r4, r7, lr}
 801330a:	b087      	sub	sp, #28
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	460b      	mov	r3, r1
 8013312:	607a      	str	r2, [r7, #4]
 8013314:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801331c:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013324:	685c      	ldr	r4, [r3, #4]
 8013326:	697a      	ldr	r2, [r7, #20]
 8013328:	f248 0368 	movw	r3, #32872	; 0x8068
 801332c:	4413      	add	r3, r2
 801332e:	6979      	ldr	r1, [r7, #20]
 8013330:	f248 0264 	movw	r2, #32868	; 0x8064
 8013334:	440a      	add	r2, r1
 8013336:	7af8      	ldrb	r0, [r7, #11]
 8013338:	4619      	mov	r1, r3
 801333a:	47a0      	blx	r4
 801333c:	4603      	mov	r3, r0
 801333e:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8013340:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d106      	bne.n	8013356 <SCSI_ReadCapacity10+0x4e>
 8013348:	697a      	ldr	r2, [r7, #20]
 801334a:	f248 0362 	movw	r3, #32866	; 0x8062
 801334e:	4413      	add	r3, r2
 8013350:	781b      	ldrb	r3, [r3, #0]
 8013352:	2b02      	cmp	r3, #2
 8013354:	d108      	bne.n	8013368 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013356:	7af9      	ldrb	r1, [r7, #11]
 8013358:	233a      	movs	r3, #58	; 0x3a
 801335a:	2202      	movs	r2, #2
 801335c:	68f8      	ldr	r0, [r7, #12]
 801335e:	f000 fa63 	bl	8013828 <SCSI_SenseCode>
    return -1;
 8013362:	f04f 33ff 	mov.w	r3, #4294967295
 8013366:	e04f      	b.n	8013408 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8013368:	697a      	ldr	r2, [r7, #20]
 801336a:	f248 0368 	movw	r3, #32872	; 0x8068
 801336e:	4413      	add	r3, r2
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	3b01      	subs	r3, #1
 8013374:	0e1b      	lsrs	r3, r3, #24
 8013376:	b2da      	uxtb	r2, r3
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801337c:	697a      	ldr	r2, [r7, #20]
 801337e:	f248 0368 	movw	r3, #32872	; 0x8068
 8013382:	4413      	add	r3, r2
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	3b01      	subs	r3, #1
 8013388:	0c1b      	lsrs	r3, r3, #16
 801338a:	b2da      	uxtb	r2, r3
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8013390:	697a      	ldr	r2, [r7, #20]
 8013392:	f248 0368 	movw	r3, #32872	; 0x8068
 8013396:	4413      	add	r3, r2
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	3b01      	subs	r3, #1
 801339c:	0a1b      	lsrs	r3, r3, #8
 801339e:	b2da      	uxtb	r2, r3
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80133a4:	697a      	ldr	r2, [r7, #20]
 80133a6:	f248 0368 	movw	r3, #32872	; 0x8068
 80133aa:	4413      	add	r3, r2
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	b2db      	uxtb	r3, r3
 80133b0:	3b01      	subs	r3, #1
 80133b2:	b2da      	uxtb	r2, r3
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80133b8:	697a      	ldr	r2, [r7, #20]
 80133ba:	f248 0364 	movw	r3, #32868	; 0x8064
 80133be:	4413      	add	r3, r2
 80133c0:	881b      	ldrh	r3, [r3, #0]
 80133c2:	161b      	asrs	r3, r3, #24
 80133c4:	b2da      	uxtb	r2, r3
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80133ca:	697a      	ldr	r2, [r7, #20]
 80133cc:	f248 0364 	movw	r3, #32868	; 0x8064
 80133d0:	4413      	add	r3, r2
 80133d2:	881b      	ldrh	r3, [r3, #0]
 80133d4:	141b      	asrs	r3, r3, #16
 80133d6:	b2da      	uxtb	r2, r3
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80133dc:	697a      	ldr	r2, [r7, #20]
 80133de:	f248 0364 	movw	r3, #32868	; 0x8064
 80133e2:	4413      	add	r3, r2
 80133e4:	881b      	ldrh	r3, [r3, #0]
 80133e6:	0a1b      	lsrs	r3, r3, #8
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	b2da      	uxtb	r2, r3
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80133f0:	697a      	ldr	r2, [r7, #20]
 80133f2:	f248 0364 	movw	r3, #32868	; 0x8064
 80133f6:	4413      	add	r3, r2
 80133f8:	881b      	ldrh	r3, [r3, #0]
 80133fa:	b2da      	uxtb	r2, r3
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	2208      	movs	r2, #8
 8013404:	60da      	str	r2, [r3, #12]

  return 0;
 8013406:	2300      	movs	r3, #0

}
 8013408:	4618      	mov	r0, r3
 801340a:	371c      	adds	r7, #28
 801340c:	46bd      	mov	sp, r7
 801340e:	bd90      	pop	{r4, r7, pc}

08013410 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013410:	b590      	push	{r4, r7, lr}
 8013412:	b089      	sub	sp, #36	; 0x24
 8013414:	af00      	add	r7, sp, #0
 8013416:	60f8      	str	r0, [r7, #12]
 8013418:	460b      	mov	r3, r1
 801341a:	607a      	str	r2, [r7, #4]
 801341c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013424:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801342c:	685c      	ldr	r4, [r3, #4]
 801342e:	69ba      	ldr	r2, [r7, #24]
 8013430:	f248 0368 	movw	r3, #32872	; 0x8068
 8013434:	4413      	add	r3, r2
 8013436:	69b9      	ldr	r1, [r7, #24]
 8013438:	f248 0264 	movw	r2, #32868	; 0x8064
 801343c:	440a      	add	r2, r1
 801343e:	7af8      	ldrb	r0, [r7, #11]
 8013440:	4619      	mov	r1, r3
 8013442:	47a0      	blx	r4
 8013444:	4603      	mov	r3, r0
 8013446:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8013448:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d106      	bne.n	801345e <SCSI_ReadCapacity16+0x4e>
 8013450:	69ba      	ldr	r2, [r7, #24]
 8013452:	f248 0362 	movw	r3, #32866	; 0x8062
 8013456:	4413      	add	r3, r2
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	2b02      	cmp	r3, #2
 801345c:	d108      	bne.n	8013470 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801345e:	7af9      	ldrb	r1, [r7, #11]
 8013460:	233a      	movs	r3, #58	; 0x3a
 8013462:	2202      	movs	r2, #2
 8013464:	68f8      	ldr	r0, [r7, #12]
 8013466:	f000 f9df 	bl	8013828 <SCSI_SenseCode>
    return -1;
 801346a:	f04f 33ff 	mov.w	r3, #4294967295
 801346e:	e084      	b.n	801357a <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	330a      	adds	r3, #10
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	330b      	adds	r3, #11
 801347c:	781b      	ldrb	r3, [r3, #0]
 801347e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013480:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	330c      	adds	r3, #12
 8013486:	781b      	ldrb	r3, [r3, #0]
 8013488:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801348a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 801348c:	687a      	ldr	r2, [r7, #4]
 801348e:	320d      	adds	r2, #13
 8013490:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8013492:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8013498:	2300      	movs	r3, #0
 801349a:	77fb      	strb	r3, [r7, #31]
 801349c:	e007      	b.n	80134ae <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 801349e:	7ffb      	ldrb	r3, [r7, #31]
 80134a0:	69ba      	ldr	r2, [r7, #24]
 80134a2:	4413      	add	r3, r2
 80134a4:	2200      	movs	r2, #0
 80134a6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80134a8:	7ffb      	ldrb	r3, [r7, #31]
 80134aa:	3301      	adds	r3, #1
 80134ac:	77fb      	strb	r3, [r7, #31]
 80134ae:	7ffa      	ldrb	r2, [r7, #31]
 80134b0:	69bb      	ldr	r3, [r7, #24]
 80134b2:	68db      	ldr	r3, [r3, #12]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d3f2      	bcc.n	801349e <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80134b8:	69ba      	ldr	r2, [r7, #24]
 80134ba:	f248 0368 	movw	r3, #32872	; 0x8068
 80134be:	4413      	add	r3, r2
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	3b01      	subs	r3, #1
 80134c4:	0e1b      	lsrs	r3, r3, #24
 80134c6:	b2da      	uxtb	r2, r3
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80134cc:	69ba      	ldr	r2, [r7, #24]
 80134ce:	f248 0368 	movw	r3, #32872	; 0x8068
 80134d2:	4413      	add	r3, r2
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	3b01      	subs	r3, #1
 80134d8:	0c1b      	lsrs	r3, r3, #16
 80134da:	b2da      	uxtb	r2, r3
 80134dc:	69bb      	ldr	r3, [r7, #24]
 80134de:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80134e0:	69ba      	ldr	r2, [r7, #24]
 80134e2:	f248 0368 	movw	r3, #32872	; 0x8068
 80134e6:	4413      	add	r3, r2
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	3b01      	subs	r3, #1
 80134ec:	0a1b      	lsrs	r3, r3, #8
 80134ee:	b2da      	uxtb	r2, r3
 80134f0:	69bb      	ldr	r3, [r7, #24]
 80134f2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80134f4:	69ba      	ldr	r2, [r7, #24]
 80134f6:	f248 0368 	movw	r3, #32872	; 0x8068
 80134fa:	4413      	add	r3, r2
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	b2db      	uxtb	r3, r3
 8013500:	3b01      	subs	r3, #1
 8013502:	b2da      	uxtb	r2, r3
 8013504:	69bb      	ldr	r3, [r7, #24]
 8013506:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8013508:	69ba      	ldr	r2, [r7, #24]
 801350a:	f248 0364 	movw	r3, #32868	; 0x8064
 801350e:	4413      	add	r3, r2
 8013510:	881b      	ldrh	r3, [r3, #0]
 8013512:	161b      	asrs	r3, r3, #24
 8013514:	b2da      	uxtb	r2, r3
 8013516:	69bb      	ldr	r3, [r7, #24]
 8013518:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801351a:	69ba      	ldr	r2, [r7, #24]
 801351c:	f248 0364 	movw	r3, #32868	; 0x8064
 8013520:	4413      	add	r3, r2
 8013522:	881b      	ldrh	r3, [r3, #0]
 8013524:	141b      	asrs	r3, r3, #16
 8013526:	b2da      	uxtb	r2, r3
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801352c:	69ba      	ldr	r2, [r7, #24]
 801352e:	f248 0364 	movw	r3, #32868	; 0x8064
 8013532:	4413      	add	r3, r2
 8013534:	881b      	ldrh	r3, [r3, #0]
 8013536:	0a1b      	lsrs	r3, r3, #8
 8013538:	b29b      	uxth	r3, r3
 801353a:	b2da      	uxtb	r2, r3
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8013540:	69ba      	ldr	r2, [r7, #24]
 8013542:	f248 0364 	movw	r3, #32868	; 0x8064
 8013546:	4413      	add	r3, r2
 8013548:	881b      	ldrh	r3, [r3, #0]
 801354a:	b2da      	uxtb	r2, r3
 801354c:	69bb      	ldr	r3, [r7, #24]
 801354e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	330a      	adds	r3, #10
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	330b      	adds	r3, #11
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013560:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	330c      	adds	r3, #12
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801356a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 801356c:	687a      	ldr	r2, [r7, #4]
 801356e:	320d      	adds	r2, #13
 8013570:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8013572:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013574:	69bb      	ldr	r3, [r7, #24]
 8013576:	60da      	str	r2, [r3, #12]

  return 0;
 8013578:	2300      	movs	r3, #0
}
 801357a:	4618      	mov	r0, r3
 801357c:	3724      	adds	r7, #36	; 0x24
 801357e:	46bd      	mov	sp, r7
 8013580:	bd90      	pop	{r4, r7, pc}

08013582 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013582:	b580      	push	{r7, lr}
 8013584:	b088      	sub	sp, #32
 8013586:	af00      	add	r7, sp, #0
 8013588:	60f8      	str	r0, [r7, #12]
 801358a:	460b      	mov	r3, r1
 801358c:	607a      	str	r2, [r7, #4]
 801358e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013596:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	f107 0214 	add.w	r2, r7, #20
 80135a4:	f107 0110 	add.w	r1, r7, #16
 80135a8:	7af8      	ldrb	r0, [r7, #11]
 80135aa:	4798      	blx	r3
 80135ac:	4603      	mov	r3, r0
 80135ae:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80135b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d106      	bne.n	80135c6 <SCSI_ReadFormatCapacity+0x44>
 80135b8:	69ba      	ldr	r2, [r7, #24]
 80135ba:	f248 0362 	movw	r3, #32866	; 0x8062
 80135be:	4413      	add	r3, r2
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	2b02      	cmp	r3, #2
 80135c4:	d108      	bne.n	80135d8 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80135c6:	7af9      	ldrb	r1, [r7, #11]
 80135c8:	233a      	movs	r3, #58	; 0x3a
 80135ca:	2202      	movs	r2, #2
 80135cc:	68f8      	ldr	r0, [r7, #12]
 80135ce:	f000 f92b 	bl	8013828 <SCSI_SenseCode>
    return -1;
 80135d2:	f04f 33ff 	mov.w	r3, #4294967295
 80135d6:	e03e      	b.n	8013656 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 80135d8:	2300      	movs	r3, #0
 80135da:	83fb      	strh	r3, [r7, #30]
 80135dc:	e007      	b.n	80135ee <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 80135de:	8bfb      	ldrh	r3, [r7, #30]
 80135e0:	69ba      	ldr	r2, [r7, #24]
 80135e2:	4413      	add	r3, r2
 80135e4:	2200      	movs	r2, #0
 80135e6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80135e8:	8bfb      	ldrh	r3, [r7, #30]
 80135ea:	3301      	adds	r3, #1
 80135ec:	83fb      	strh	r3, [r7, #30]
 80135ee:	8bfb      	ldrh	r3, [r7, #30]
 80135f0:	2b0b      	cmp	r3, #11
 80135f2:	d9f4      	bls.n	80135de <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 80135f4:	69bb      	ldr	r3, [r7, #24]
 80135f6:	2208      	movs	r2, #8
 80135f8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	3b01      	subs	r3, #1
 80135fe:	0e1b      	lsrs	r3, r3, #24
 8013600:	b2da      	uxtb	r2, r3
 8013602:	69bb      	ldr	r3, [r7, #24]
 8013604:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	3b01      	subs	r3, #1
 801360a:	0c1b      	lsrs	r3, r3, #16
 801360c:	b2da      	uxtb	r2, r3
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	3b01      	subs	r3, #1
 8013616:	0a1b      	lsrs	r3, r3, #8
 8013618:	b2da      	uxtb	r2, r3
 801361a:	69bb      	ldr	r3, [r7, #24]
 801361c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801361e:	693b      	ldr	r3, [r7, #16]
 8013620:	b2db      	uxtb	r3, r3
 8013622:	3b01      	subs	r3, #1
 8013624:	b2da      	uxtb	r2, r3
 8013626:	69bb      	ldr	r3, [r7, #24]
 8013628:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801362a:	69bb      	ldr	r3, [r7, #24]
 801362c:	2202      	movs	r2, #2
 801362e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8013630:	8abb      	ldrh	r3, [r7, #20]
 8013632:	141b      	asrs	r3, r3, #16
 8013634:	b2da      	uxtb	r2, r3
 8013636:	69bb      	ldr	r3, [r7, #24]
 8013638:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801363a:	8abb      	ldrh	r3, [r7, #20]
 801363c:	0a1b      	lsrs	r3, r3, #8
 801363e:	b29b      	uxth	r3, r3
 8013640:	b2da      	uxtb	r2, r3
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8013646:	8abb      	ldrh	r3, [r7, #20]
 8013648:	b2da      	uxtb	r2, r3
 801364a:	69bb      	ldr	r3, [r7, #24]
 801364c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801364e:	69bb      	ldr	r3, [r7, #24]
 8013650:	220c      	movs	r2, #12
 8013652:	60da      	str	r2, [r3, #12]

  return 0;
 8013654:	2300      	movs	r3, #0
}
 8013656:	4618      	mov	r0, r3
 8013658:	3720      	adds	r7, #32
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
	...

08013660 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b086      	sub	sp, #24
 8013664:	af00      	add	r7, sp, #0
 8013666:	60f8      	str	r0, [r7, #12]
 8013668:	460b      	mov	r3, r1
 801366a:	607a      	str	r2, [r7, #4]
 801366c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013674:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8013676:	2317      	movs	r3, #23
 8013678:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	3304      	adds	r3, #4
 801367e:	781b      	ldrb	r3, [r3, #0]
 8013680:	b29b      	uxth	r3, r3
 8013682:	8afa      	ldrh	r2, [r7, #22]
 8013684:	429a      	cmp	r2, r3
 8013686:	d303      	bcc.n	8013690 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	3304      	adds	r3, #4
 801368c:	781b      	ldrb	r3, [r3, #0]
 801368e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8013690:	8afb      	ldrh	r3, [r7, #22]
 8013692:	461a      	mov	r2, r3
 8013694:	4904      	ldr	r1, [pc, #16]	; (80136a8 <SCSI_ModeSense6+0x48>)
 8013696:	6938      	ldr	r0, [r7, #16]
 8013698:	f000 fe54 	bl	8014344 <SCSI_UpdateBotData>

  return 0;
 801369c:	2300      	movs	r3, #0
}
 801369e:	4618      	mov	r0, r3
 80136a0:	3718      	adds	r7, #24
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
 80136a6:	bf00      	nop
 80136a8:	240000d0 	.word	0x240000d0

080136ac <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b086      	sub	sp, #24
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	60f8      	str	r0, [r7, #12]
 80136b4:	460b      	mov	r3, r1
 80136b6:	607a      	str	r2, [r7, #4]
 80136b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136c0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80136c2:	231b      	movs	r3, #27
 80136c4:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	3308      	adds	r3, #8
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	8afa      	ldrh	r2, [r7, #22]
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d303      	bcc.n	80136dc <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	3308      	adds	r3, #8
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80136dc:	8afb      	ldrh	r3, [r7, #22]
 80136de:	461a      	mov	r2, r3
 80136e0:	4904      	ldr	r1, [pc, #16]	; (80136f4 <SCSI_ModeSense10+0x48>)
 80136e2:	6938      	ldr	r0, [r7, #16]
 80136e4:	f000 fe2e 	bl	8014344 <SCSI_UpdateBotData>

  return 0;
 80136e8:	2300      	movs	r3, #0
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3718      	adds	r7, #24
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	240000e8 	.word	0x240000e8

080136f8 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b086      	sub	sp, #24
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	460b      	mov	r3, r1
 8013702:	607a      	str	r2, [r7, #4]
 8013704:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801370c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 801370e:	693a      	ldr	r2, [r7, #16]
 8013710:	f248 0318 	movw	r3, #32792	; 0x8018
 8013714:	4413      	add	r3, r2
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d10c      	bne.n	8013736 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801371c:	693a      	ldr	r2, [r7, #16]
 801371e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013722:	4413      	add	r3, r2
 8013724:	7819      	ldrb	r1, [r3, #0]
 8013726:	2320      	movs	r3, #32
 8013728:	2205      	movs	r2, #5
 801372a:	68f8      	ldr	r0, [r7, #12]
 801372c:	f000 f87c 	bl	8013828 <SCSI_SenseCode>
    return -1;
 8013730:	f04f 33ff 	mov.w	r3, #4294967295
 8013734:	e074      	b.n	8013820 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8013736:	2300      	movs	r3, #0
 8013738:	75fb      	strb	r3, [r7, #23]
 801373a:	e007      	b.n	801374c <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 801373c:	7dfb      	ldrb	r3, [r7, #23]
 801373e:	693a      	ldr	r2, [r7, #16]
 8013740:	4413      	add	r3, r2
 8013742:	2200      	movs	r2, #0
 8013744:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8013746:	7dfb      	ldrb	r3, [r7, #23]
 8013748:	3301      	adds	r3, #1
 801374a:	75fb      	strb	r3, [r7, #23]
 801374c:	7dfb      	ldrb	r3, [r7, #23]
 801374e:	2b11      	cmp	r3, #17
 8013750:	d9f4      	bls.n	801373c <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 8013752:	693b      	ldr	r3, [r7, #16]
 8013754:	2270      	movs	r2, #112	; 0x70
 8013756:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	220c      	movs	r2, #12
 801375c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801375e:	693a      	ldr	r2, [r7, #16]
 8013760:	f248 0360 	movw	r3, #32864	; 0x8060
 8013764:	4413      	add	r3, r2
 8013766:	781a      	ldrb	r2, [r3, #0]
 8013768:	6939      	ldr	r1, [r7, #16]
 801376a:	f248 0361 	movw	r3, #32865	; 0x8061
 801376e:	440b      	add	r3, r1
 8013770:	781b      	ldrb	r3, [r3, #0]
 8013772:	429a      	cmp	r2, r3
 8013774:	d045      	beq.n	8013802 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8013776:	693a      	ldr	r2, [r7, #16]
 8013778:	f248 0360 	movw	r3, #32864	; 0x8060
 801377c:	4413      	add	r3, r2
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	4619      	mov	r1, r3
 8013782:	693a      	ldr	r2, [r7, #16]
 8013784:	f241 0308 	movw	r3, #4104	; 0x1008
 8013788:	440b      	add	r3, r1
 801378a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8013792:	693a      	ldr	r2, [r7, #16]
 8013794:	f248 0360 	movw	r3, #32864	; 0x8060
 8013798:	4413      	add	r3, r2
 801379a:	781b      	ldrb	r3, [r3, #0]
 801379c:	4619      	mov	r1, r3
 801379e:	693a      	ldr	r2, [r7, #16]
 80137a0:	f241 0308 	movw	r3, #4104	; 0x1008
 80137a4:	440b      	add	r3, r1
 80137a6:	00db      	lsls	r3, r3, #3
 80137a8:	4413      	add	r3, r2
 80137aa:	791a      	ldrb	r2, [r3, #4]
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80137b0:	693a      	ldr	r2, [r7, #16]
 80137b2:	f248 0360 	movw	r3, #32864	; 0x8060
 80137b6:	4413      	add	r3, r2
 80137b8:	781b      	ldrb	r3, [r3, #0]
 80137ba:	4619      	mov	r1, r3
 80137bc:	693a      	ldr	r2, [r7, #16]
 80137be:	f241 0308 	movw	r3, #4104	; 0x1008
 80137c2:	440b      	add	r3, r1
 80137c4:	00db      	lsls	r3, r3, #3
 80137c6:	4413      	add	r3, r2
 80137c8:	795a      	ldrb	r2, [r3, #5]
 80137ca:	693b      	ldr	r3, [r7, #16]
 80137cc:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80137ce:	693a      	ldr	r2, [r7, #16]
 80137d0:	f248 0360 	movw	r3, #32864	; 0x8060
 80137d4:	4413      	add	r3, r2
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	3301      	adds	r3, #1
 80137da:	b2d9      	uxtb	r1, r3
 80137dc:	693a      	ldr	r2, [r7, #16]
 80137de:	f248 0360 	movw	r3, #32864	; 0x8060
 80137e2:	4413      	add	r3, r2
 80137e4:	460a      	mov	r2, r1
 80137e6:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80137e8:	693a      	ldr	r2, [r7, #16]
 80137ea:	f248 0360 	movw	r3, #32864	; 0x8060
 80137ee:	4413      	add	r3, r2
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	2b04      	cmp	r3, #4
 80137f4:	d105      	bne.n	8013802 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 80137f6:	693a      	ldr	r2, [r7, #16]
 80137f8:	f248 0360 	movw	r3, #32864	; 0x8060
 80137fc:	4413      	add	r3, r2
 80137fe:	2200      	movs	r2, #0
 8013800:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	2212      	movs	r2, #18
 8013806:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	3304      	adds	r3, #4
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	2b12      	cmp	r3, #18
 8013810:	d805      	bhi.n	801381e <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	3304      	adds	r3, #4
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	461a      	mov	r2, r3
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801381e:	2300      	movs	r3, #0
}
 8013820:	4618      	mov	r0, r3
 8013822:	3718      	adds	r7, #24
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}

08013828 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8013828:	b480      	push	{r7}
 801382a:	b085      	sub	sp, #20
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	4608      	mov	r0, r1
 8013832:	4611      	mov	r1, r2
 8013834:	461a      	mov	r2, r3
 8013836:	4603      	mov	r3, r0
 8013838:	70fb      	strb	r3, [r7, #3]
 801383a:	460b      	mov	r3, r1
 801383c:	70bb      	strb	r3, [r7, #2]
 801383e:	4613      	mov	r3, r2
 8013840:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013848:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801384a:	68fa      	ldr	r2, [r7, #12]
 801384c:	f248 0361 	movw	r3, #32865	; 0x8061
 8013850:	4413      	add	r3, r2
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	4619      	mov	r1, r3
 8013856:	68fa      	ldr	r2, [r7, #12]
 8013858:	f241 0308 	movw	r3, #4104	; 0x1008
 801385c:	440b      	add	r3, r1
 801385e:	78b9      	ldrb	r1, [r7, #2]
 8013860:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8013864:	68fa      	ldr	r2, [r7, #12]
 8013866:	f248 0361 	movw	r3, #32865	; 0x8061
 801386a:	4413      	add	r3, r2
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	4619      	mov	r1, r3
 8013870:	68fa      	ldr	r2, [r7, #12]
 8013872:	f241 0308 	movw	r3, #4104	; 0x1008
 8013876:	440b      	add	r3, r1
 8013878:	00db      	lsls	r3, r3, #3
 801387a:	4413      	add	r3, r2
 801387c:	787a      	ldrb	r2, [r7, #1]
 801387e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8013880:	68fa      	ldr	r2, [r7, #12]
 8013882:	f248 0361 	movw	r3, #32865	; 0x8061
 8013886:	4413      	add	r3, r2
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	4619      	mov	r1, r3
 801388c:	68fa      	ldr	r2, [r7, #12]
 801388e:	f241 0308 	movw	r3, #4104	; 0x1008
 8013892:	440b      	add	r3, r1
 8013894:	00db      	lsls	r3, r3, #3
 8013896:	4413      	add	r3, r2
 8013898:	2200      	movs	r2, #0
 801389a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801389c:	68fa      	ldr	r2, [r7, #12]
 801389e:	f248 0361 	movw	r3, #32865	; 0x8061
 80138a2:	4413      	add	r3, r2
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	3301      	adds	r3, #1
 80138a8:	b2d9      	uxtb	r1, r3
 80138aa:	68fa      	ldr	r2, [r7, #12]
 80138ac:	f248 0361 	movw	r3, #32865	; 0x8061
 80138b0:	4413      	add	r3, r2
 80138b2:	460a      	mov	r2, r1
 80138b4:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80138b6:	68fa      	ldr	r2, [r7, #12]
 80138b8:	f248 0361 	movw	r3, #32865	; 0x8061
 80138bc:	4413      	add	r3, r2
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	2b04      	cmp	r3, #4
 80138c2:	d105      	bne.n	80138d0 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	f248 0361 	movw	r3, #32865	; 0x8061
 80138ca:	4413      	add	r3, r2
 80138cc:	2200      	movs	r2, #0
 80138ce:	701a      	strb	r2, [r3, #0]
  }
}
 80138d0:	bf00      	nop
 80138d2:	3714      	adds	r7, #20
 80138d4:	46bd      	mov	sp, r7
 80138d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138da:	4770      	bx	lr

080138dc <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b086      	sub	sp, #24
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	460b      	mov	r3, r1
 80138e6:	607a      	str	r2, [r7, #4]
 80138e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138f0:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80138f2:	697a      	ldr	r2, [r7, #20]
 80138f4:	f248 0362 	movw	r3, #32866	; 0x8062
 80138f8:	4413      	add	r3, r2
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	2b01      	cmp	r3, #1
 80138fe:	d10f      	bne.n	8013920 <SCSI_StartStopUnit+0x44>
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	3304      	adds	r3, #4
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	f003 0303 	and.w	r3, r3, #3
 801390a:	2b02      	cmp	r3, #2
 801390c:	d108      	bne.n	8013920 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801390e:	7af9      	ldrb	r1, [r7, #11]
 8013910:	2324      	movs	r3, #36	; 0x24
 8013912:	2205      	movs	r2, #5
 8013914:	68f8      	ldr	r0, [r7, #12]
 8013916:	f7ff ff87 	bl	8013828 <SCSI_SenseCode>

    return -1;
 801391a:	f04f 33ff 	mov.w	r3, #4294967295
 801391e:	e02c      	b.n	801397a <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	3304      	adds	r3, #4
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	f003 0303 	and.w	r3, r3, #3
 801392a:	2b01      	cmp	r3, #1
 801392c:	d106      	bne.n	801393c <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801392e:	697a      	ldr	r2, [r7, #20]
 8013930:	f248 0362 	movw	r3, #32866	; 0x8062
 8013934:	4413      	add	r3, r2
 8013936:	2200      	movs	r2, #0
 8013938:	701a      	strb	r2, [r3, #0]
 801393a:	e01a      	b.n	8013972 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	3304      	adds	r3, #4
 8013940:	781b      	ldrb	r3, [r3, #0]
 8013942:	f003 0303 	and.w	r3, r3, #3
 8013946:	2b02      	cmp	r3, #2
 8013948:	d106      	bne.n	8013958 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801394a:	697a      	ldr	r2, [r7, #20]
 801394c:	f248 0362 	movw	r3, #32866	; 0x8062
 8013950:	4413      	add	r3, r2
 8013952:	2202      	movs	r2, #2
 8013954:	701a      	strb	r2, [r3, #0]
 8013956:	e00c      	b.n	8013972 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	3304      	adds	r3, #4
 801395c:	781b      	ldrb	r3, [r3, #0]
 801395e:	f003 0303 	and.w	r3, r3, #3
 8013962:	2b03      	cmp	r3, #3
 8013964:	d105      	bne.n	8013972 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013966:	697a      	ldr	r2, [r7, #20]
 8013968:	f248 0362 	movw	r3, #32866	; 0x8062
 801396c:	4413      	add	r3, r2
 801396e:	2200      	movs	r2, #0
 8013970:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	2200      	movs	r2, #0
 8013976:	60da      	str	r2, [r3, #12]

  return 0;
 8013978:	2300      	movs	r3, #0
}
 801397a:	4618      	mov	r0, r3
 801397c:	3718      	adds	r7, #24
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}

08013982 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013982:	b480      	push	{r7}
 8013984:	b087      	sub	sp, #28
 8013986:	af00      	add	r7, sp, #0
 8013988:	60f8      	str	r0, [r7, #12]
 801398a:	460b      	mov	r3, r1
 801398c:	607a      	str	r2, [r7, #4]
 801398e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013996:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	3304      	adds	r3, #4
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d106      	bne.n	80139b0 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80139a2:	697a      	ldr	r2, [r7, #20]
 80139a4:	f248 0362 	movw	r3, #32866	; 0x8062
 80139a8:	4413      	add	r3, r2
 80139aa:	2200      	movs	r2, #0
 80139ac:	701a      	strb	r2, [r3, #0]
 80139ae:	e005      	b.n	80139bc <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80139b0:	697a      	ldr	r2, [r7, #20]
 80139b2:	f248 0362 	movw	r3, #32866	; 0x8062
 80139b6:	4413      	add	r3, r2
 80139b8:	2201      	movs	r2, #1
 80139ba:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	2200      	movs	r2, #0
 80139c0:	60da      	str	r2, [r3, #12]

  return 0;
 80139c2:	2300      	movs	r3, #0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	371c      	adds	r7, #28
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr

080139d0 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b086      	sub	sp, #24
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	460b      	mov	r3, r1
 80139da:	607a      	str	r2, [r7, #4]
 80139dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139e4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	7a1b      	ldrb	r3, [r3, #8]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	f040 8094 	bne.w	8013b18 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80139f0:	697a      	ldr	r2, [r7, #20]
 80139f2:	f248 031c 	movw	r3, #32796	; 0x801c
 80139f6:	4413      	add	r3, r2
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	b25b      	sxtb	r3, r3
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	db0c      	blt.n	8013a1a <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013a00:	697a      	ldr	r2, [r7, #20]
 8013a02:	f248 031d 	movw	r3, #32797	; 0x801d
 8013a06:	4413      	add	r3, r2
 8013a08:	7819      	ldrb	r1, [r3, #0]
 8013a0a:	2320      	movs	r3, #32
 8013a0c:	2205      	movs	r2, #5
 8013a0e:	68f8      	ldr	r0, [r7, #12]
 8013a10:	f7ff ff0a 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013a14:	f04f 33ff 	mov.w	r3, #4294967295
 8013a18:	e088      	b.n	8013b2c <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013a1a:	697a      	ldr	r2, [r7, #20]
 8013a1c:	f248 0362 	movw	r3, #32866	; 0x8062
 8013a20:	4413      	add	r3, r2
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	2b02      	cmp	r3, #2
 8013a26:	d108      	bne.n	8013a3a <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013a28:	7af9      	ldrb	r1, [r7, #11]
 8013a2a:	233a      	movs	r3, #58	; 0x3a
 8013a2c:	2202      	movs	r2, #2
 8013a2e:	68f8      	ldr	r0, [r7, #12]
 8013a30:	f7ff fefa 	bl	8013828 <SCSI_SenseCode>

      return -1;
 8013a34:	f04f 33ff 	mov.w	r3, #4294967295
 8013a38:	e078      	b.n	8013b2c <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a40:	689b      	ldr	r3, [r3, #8]
 8013a42:	7afa      	ldrb	r2, [r7, #11]
 8013a44:	4610      	mov	r0, r2
 8013a46:	4798      	blx	r3
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d008      	beq.n	8013a60 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013a4e:	7af9      	ldrb	r1, [r7, #11]
 8013a50:	233a      	movs	r3, #58	; 0x3a
 8013a52:	2202      	movs	r2, #2
 8013a54:	68f8      	ldr	r0, [r7, #12]
 8013a56:	f7ff fee7 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a5e:	e065      	b.n	8013b2c <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	3302      	adds	r3, #2
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	3303      	adds	r3, #3
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a70:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	3304      	adds	r3, #4
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013a7a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013a7c:	687a      	ldr	r2, [r7, #4]
 8013a7e:	3205      	adds	r2, #5
 8013a80:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013a82:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a84:	6979      	ldr	r1, [r7, #20]
 8013a86:	f248 036c 	movw	r3, #32876	; 0x806c
 8013a8a:	440b      	add	r3, r1
 8013a8c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	3307      	adds	r3, #7
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	021b      	lsls	r3, r3, #8
 8013a96:	687a      	ldr	r2, [r7, #4]
 8013a98:	3208      	adds	r2, #8
 8013a9a:	7812      	ldrb	r2, [r2, #0]
 8013a9c:	431a      	orrs	r2, r3
 8013a9e:	6979      	ldr	r1, [r7, #20]
 8013aa0:	f248 0370 	movw	r3, #32880	; 0x8070
 8013aa4:	440b      	add	r3, r1
 8013aa6:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013aa8:	697a      	ldr	r2, [r7, #20]
 8013aaa:	f248 036c 	movw	r3, #32876	; 0x806c
 8013aae:	4413      	add	r3, r2
 8013ab0:	6818      	ldr	r0, [r3, #0]
 8013ab2:	697a      	ldr	r2, [r7, #20]
 8013ab4:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ab8:	4413      	add	r3, r2
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	7af9      	ldrb	r1, [r7, #11]
 8013abe:	4602      	mov	r2, r0
 8013ac0:	68f8      	ldr	r0, [r7, #12]
 8013ac2:	f000 faeb 	bl	801409c <SCSI_CheckAddressRange>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	da02      	bge.n	8013ad2 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013acc:	f04f 33ff 	mov.w	r3, #4294967295
 8013ad0:	e02c      	b.n	8013b2c <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013ad2:	697a      	ldr	r2, [r7, #20]
 8013ad4:	f248 0318 	movw	r3, #32792	; 0x8018
 8013ad8:	4413      	add	r3, r2
 8013ada:	681a      	ldr	r2, [r3, #0]
 8013adc:	6979      	ldr	r1, [r7, #20]
 8013ade:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ae2:	440b      	add	r3, r1
 8013ae4:	6819      	ldr	r1, [r3, #0]
 8013ae6:	6978      	ldr	r0, [r7, #20]
 8013ae8:	f248 0364 	movw	r3, #32868	; 0x8064
 8013aec:	4403      	add	r3, r0
 8013aee:	881b      	ldrh	r3, [r3, #0]
 8013af0:	fb03 f301 	mul.w	r3, r3, r1
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d00c      	beq.n	8013b12 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013af8:	697a      	ldr	r2, [r7, #20]
 8013afa:	f248 031d 	movw	r3, #32797	; 0x801d
 8013afe:	4413      	add	r3, r2
 8013b00:	7819      	ldrb	r1, [r3, #0]
 8013b02:	2320      	movs	r3, #32
 8013b04:	2205      	movs	r2, #5
 8013b06:	68f8      	ldr	r0, [r7, #12]
 8013b08:	f7ff fe8e 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b10:	e00c      	b.n	8013b2c <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	2202      	movs	r2, #2
 8013b16:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013b1e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013b20:	7afb      	ldrb	r3, [r7, #11]
 8013b22:	4619      	mov	r1, r3
 8013b24:	68f8      	ldr	r0, [r7, #12]
 8013b26:	f000 fadd 	bl	80140e4 <SCSI_ProcessRead>
 8013b2a:	4603      	mov	r3, r0
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3718      	adds	r7, #24
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}

08013b34 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b086      	sub	sp, #24
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	60f8      	str	r0, [r7, #12]
 8013b3c:	460b      	mov	r3, r1
 8013b3e:	607a      	str	r2, [r7, #4]
 8013b40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b48:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	7a1b      	ldrb	r3, [r3, #8]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	f040 809e 	bne.w	8013c90 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013b54:	697a      	ldr	r2, [r7, #20]
 8013b56:	f248 031c 	movw	r3, #32796	; 0x801c
 8013b5a:	4413      	add	r3, r2
 8013b5c:	781b      	ldrb	r3, [r3, #0]
 8013b5e:	b25b      	sxtb	r3, r3
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	db0c      	blt.n	8013b7e <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b64:	697a      	ldr	r2, [r7, #20]
 8013b66:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b6a:	4413      	add	r3, r2
 8013b6c:	7819      	ldrb	r1, [r3, #0]
 8013b6e:	2320      	movs	r3, #32
 8013b70:	2205      	movs	r2, #5
 8013b72:	68f8      	ldr	r0, [r7, #12]
 8013b74:	f7ff fe58 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013b78:	f04f 33ff 	mov.w	r3, #4294967295
 8013b7c:	e092      	b.n	8013ca4 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013b7e:	697a      	ldr	r2, [r7, #20]
 8013b80:	f248 0362 	movw	r3, #32866	; 0x8062
 8013b84:	4413      	add	r3, r2
 8013b86:	781b      	ldrb	r3, [r3, #0]
 8013b88:	2b02      	cmp	r3, #2
 8013b8a:	d108      	bne.n	8013b9e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013b8c:	7af9      	ldrb	r1, [r7, #11]
 8013b8e:	233a      	movs	r3, #58	; 0x3a
 8013b90:	2202      	movs	r2, #2
 8013b92:	68f8      	ldr	r0, [r7, #12]
 8013b94:	f7ff fe48 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013b98:	f04f 33ff 	mov.w	r3, #4294967295
 8013b9c:	e082      	b.n	8013ca4 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ba4:	689b      	ldr	r3, [r3, #8]
 8013ba6:	7afa      	ldrb	r2, [r7, #11]
 8013ba8:	4610      	mov	r0, r2
 8013baa:	4798      	blx	r3
 8013bac:	4603      	mov	r3, r0
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d008      	beq.n	8013bc4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013bb2:	7af9      	ldrb	r1, [r7, #11]
 8013bb4:	233a      	movs	r3, #58	; 0x3a
 8013bb6:	2202      	movs	r2, #2
 8013bb8:	68f8      	ldr	r0, [r7, #12]
 8013bba:	f7ff fe35 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8013bc2:	e06f      	b.n	8013ca4 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	3302      	adds	r3, #2
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	3303      	adds	r3, #3
 8013bd0:	781b      	ldrb	r3, [r3, #0]
 8013bd2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013bd4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	3304      	adds	r3, #4
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013bde:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	3205      	adds	r2, #5
 8013be4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013be6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013be8:	6979      	ldr	r1, [r7, #20]
 8013bea:	f248 036c 	movw	r3, #32876	; 0x806c
 8013bee:	440b      	add	r3, r1
 8013bf0:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	3306      	adds	r3, #6
 8013bf6:	781b      	ldrb	r3, [r3, #0]
 8013bf8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	3307      	adds	r3, #7
 8013bfe:	781b      	ldrb	r3, [r3, #0]
 8013c00:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013c02:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	3308      	adds	r3, #8
 8013c08:	781b      	ldrb	r3, [r3, #0]
 8013c0a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8013c0c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013c0e:	687a      	ldr	r2, [r7, #4]
 8013c10:	3209      	adds	r2, #9
 8013c12:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013c14:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013c16:	6979      	ldr	r1, [r7, #20]
 8013c18:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c1c:	440b      	add	r3, r1
 8013c1e:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013c20:	697a      	ldr	r2, [r7, #20]
 8013c22:	f248 036c 	movw	r3, #32876	; 0x806c
 8013c26:	4413      	add	r3, r2
 8013c28:	6818      	ldr	r0, [r3, #0]
 8013c2a:	697a      	ldr	r2, [r7, #20]
 8013c2c:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c30:	4413      	add	r3, r2
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	7af9      	ldrb	r1, [r7, #11]
 8013c36:	4602      	mov	r2, r0
 8013c38:	68f8      	ldr	r0, [r7, #12]
 8013c3a:	f000 fa2f 	bl	801409c <SCSI_CheckAddressRange>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	da02      	bge.n	8013c4a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013c44:	f04f 33ff 	mov.w	r3, #4294967295
 8013c48:	e02c      	b.n	8013ca4 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013c4a:	697a      	ldr	r2, [r7, #20]
 8013c4c:	f248 0318 	movw	r3, #32792	; 0x8018
 8013c50:	4413      	add	r3, r2
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	6979      	ldr	r1, [r7, #20]
 8013c56:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c5a:	440b      	add	r3, r1
 8013c5c:	6819      	ldr	r1, [r3, #0]
 8013c5e:	6978      	ldr	r0, [r7, #20]
 8013c60:	f248 0364 	movw	r3, #32868	; 0x8064
 8013c64:	4403      	add	r3, r0
 8013c66:	881b      	ldrh	r3, [r3, #0]
 8013c68:	fb03 f301 	mul.w	r3, r3, r1
 8013c6c:	429a      	cmp	r2, r3
 8013c6e:	d00c      	beq.n	8013c8a <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c70:	697a      	ldr	r2, [r7, #20]
 8013c72:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c76:	4413      	add	r3, r2
 8013c78:	7819      	ldrb	r1, [r3, #0]
 8013c7a:	2320      	movs	r3, #32
 8013c7c:	2205      	movs	r2, #5
 8013c7e:	68f8      	ldr	r0, [r7, #12]
 8013c80:	f7ff fdd2 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013c84:	f04f 33ff 	mov.w	r3, #4294967295
 8013c88:	e00c      	b.n	8013ca4 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	2202      	movs	r2, #2
 8013c8e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013c96:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013c98:	7afb      	ldrb	r3, [r7, #11]
 8013c9a:	4619      	mov	r1, r3
 8013c9c:	68f8      	ldr	r0, [r7, #12]
 8013c9e:	f000 fa21 	bl	80140e4 <SCSI_ProcessRead>
 8013ca2:	4603      	mov	r3, r0
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3718      	adds	r7, #24
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}

08013cac <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b086      	sub	sp, #24
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	607a      	str	r2, [r7, #4]
 8013cb8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013cc0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	7a1b      	ldrb	r3, [r3, #8]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	f040 80be 	bne.w	8013e48 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013ccc:	697a      	ldr	r2, [r7, #20]
 8013cce:	f248 0318 	movw	r3, #32792	; 0x8018
 8013cd2:	4413      	add	r3, r2
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d10c      	bne.n	8013cf4 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013cda:	697a      	ldr	r2, [r7, #20]
 8013cdc:	f248 031d 	movw	r3, #32797	; 0x801d
 8013ce0:	4413      	add	r3, r2
 8013ce2:	7819      	ldrb	r1, [r3, #0]
 8013ce4:	2320      	movs	r3, #32
 8013ce6:	2205      	movs	r2, #5
 8013ce8:	68f8      	ldr	r0, [r7, #12]
 8013cea:	f7ff fd9d 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013cee:	f04f 33ff 	mov.w	r3, #4294967295
 8013cf2:	e0af      	b.n	8013e54 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013cf4:	697a      	ldr	r2, [r7, #20]
 8013cf6:	f248 031c 	movw	r3, #32796	; 0x801c
 8013cfa:	4413      	add	r3, r2
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	b25b      	sxtb	r3, r3
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	da0c      	bge.n	8013d1e <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013d04:	697a      	ldr	r2, [r7, #20]
 8013d06:	f248 031d 	movw	r3, #32797	; 0x801d
 8013d0a:	4413      	add	r3, r2
 8013d0c:	7819      	ldrb	r1, [r3, #0]
 8013d0e:	2320      	movs	r3, #32
 8013d10:	2205      	movs	r2, #5
 8013d12:	68f8      	ldr	r0, [r7, #12]
 8013d14:	f7ff fd88 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013d18:	f04f 33ff 	mov.w	r3, #4294967295
 8013d1c:	e09a      	b.n	8013e54 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d24:	689b      	ldr	r3, [r3, #8]
 8013d26:	7afa      	ldrb	r2, [r7, #11]
 8013d28:	4610      	mov	r0, r2
 8013d2a:	4798      	blx	r3
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d008      	beq.n	8013d44 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013d32:	7af9      	ldrb	r1, [r7, #11]
 8013d34:	233a      	movs	r3, #58	; 0x3a
 8013d36:	2202      	movs	r2, #2
 8013d38:	68f8      	ldr	r0, [r7, #12]
 8013d3a:	f7ff fd75 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8013d42:	e087      	b.n	8013e54 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d4a:	68db      	ldr	r3, [r3, #12]
 8013d4c:	7afa      	ldrb	r2, [r7, #11]
 8013d4e:	4610      	mov	r0, r2
 8013d50:	4798      	blx	r3
 8013d52:	4603      	mov	r3, r0
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d008      	beq.n	8013d6a <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013d58:	7af9      	ldrb	r1, [r7, #11]
 8013d5a:	2327      	movs	r3, #39	; 0x27
 8013d5c:	2202      	movs	r2, #2
 8013d5e:	68f8      	ldr	r0, [r7, #12]
 8013d60:	f7ff fd62 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013d64:	f04f 33ff 	mov.w	r3, #4294967295
 8013d68:	e074      	b.n	8013e54 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	3302      	adds	r3, #2
 8013d6e:	781b      	ldrb	r3, [r3, #0]
 8013d70:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	3303      	adds	r3, #3
 8013d76:	781b      	ldrb	r3, [r3, #0]
 8013d78:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013d7a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	3304      	adds	r3, #4
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013d84:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013d86:	687a      	ldr	r2, [r7, #4]
 8013d88:	3205      	adds	r2, #5
 8013d8a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013d8c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013d8e:	6979      	ldr	r1, [r7, #20]
 8013d90:	f248 036c 	movw	r3, #32876	; 0x806c
 8013d94:	440b      	add	r3, r1
 8013d96:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	3307      	adds	r3, #7
 8013d9c:	781b      	ldrb	r3, [r3, #0]
 8013d9e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	3208      	adds	r2, #8
 8013da4:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013da6:	431a      	orrs	r2, r3
 8013da8:	6979      	ldr	r1, [r7, #20]
 8013daa:	f248 0370 	movw	r3, #32880	; 0x8070
 8013dae:	440b      	add	r3, r1
 8013db0:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013db2:	697a      	ldr	r2, [r7, #20]
 8013db4:	f248 036c 	movw	r3, #32876	; 0x806c
 8013db8:	4413      	add	r3, r2
 8013dba:	6818      	ldr	r0, [r3, #0]
 8013dbc:	697a      	ldr	r2, [r7, #20]
 8013dbe:	f248 0370 	movw	r3, #32880	; 0x8070
 8013dc2:	4413      	add	r3, r2
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	7af9      	ldrb	r1, [r7, #11]
 8013dc8:	4602      	mov	r2, r0
 8013dca:	68f8      	ldr	r0, [r7, #12]
 8013dcc:	f000 f966 	bl	801409c <SCSI_CheckAddressRange>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	da02      	bge.n	8013ddc <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8013dda:	e03b      	b.n	8013e54 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013ddc:	697a      	ldr	r2, [r7, #20]
 8013dde:	f248 0370 	movw	r3, #32880	; 0x8070
 8013de2:	4413      	add	r3, r2
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	6979      	ldr	r1, [r7, #20]
 8013de8:	f248 0364 	movw	r3, #32868	; 0x8064
 8013dec:	440b      	add	r3, r1
 8013dee:	881b      	ldrh	r3, [r3, #0]
 8013df0:	fb03 f302 	mul.w	r3, r3, r2
 8013df4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013df6:	697a      	ldr	r2, [r7, #20]
 8013df8:	f248 0318 	movw	r3, #32792	; 0x8018
 8013dfc:	4413      	add	r3, r2
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	693a      	ldr	r2, [r7, #16]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d00c      	beq.n	8013e20 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013e06:	697a      	ldr	r2, [r7, #20]
 8013e08:	f248 031d 	movw	r3, #32797	; 0x801d
 8013e0c:	4413      	add	r3, r2
 8013e0e:	7819      	ldrb	r1, [r3, #0]
 8013e10:	2320      	movs	r3, #32
 8013e12:	2205      	movs	r2, #5
 8013e14:	68f8      	ldr	r0, [r7, #12]
 8013e16:	f7ff fd07 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8013e1e:	e019      	b.n	8013e54 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e26:	bf28      	it	cs
 8013e28:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013e2c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013e2e:	697b      	ldr	r3, [r7, #20]
 8013e30:	2201      	movs	r2, #1
 8013e32:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	f103 0210 	add.w	r2, r3, #16
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	2101      	movs	r1, #1
 8013e3e:	68f8      	ldr	r0, [r7, #12]
 8013e40:	f004 fb19 	bl	8018476 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013e44:	2300      	movs	r3, #0
 8013e46:	e005      	b.n	8013e54 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8013e48:	7afb      	ldrb	r3, [r7, #11]
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f000 f9d7 	bl	8014200 <SCSI_ProcessWrite>
 8013e52:	4603      	mov	r3, r0
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3718      	adds	r7, #24
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b086      	sub	sp, #24
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	460b      	mov	r3, r1
 8013e66:	607a      	str	r2, [r7, #4]
 8013e68:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e70:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	7a1b      	ldrb	r3, [r3, #8]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	f040 80ce 	bne.w	8014018 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013e7c:	697a      	ldr	r2, [r7, #20]
 8013e7e:	f248 0318 	movw	r3, #32792	; 0x8018
 8013e82:	4413      	add	r3, r2
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d10c      	bne.n	8013ea4 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013e8a:	697a      	ldr	r2, [r7, #20]
 8013e8c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013e90:	4413      	add	r3, r2
 8013e92:	7819      	ldrb	r1, [r3, #0]
 8013e94:	2320      	movs	r3, #32
 8013e96:	2205      	movs	r2, #5
 8013e98:	68f8      	ldr	r0, [r7, #12]
 8013e9a:	f7ff fcc5 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013ea2:	e0bf      	b.n	8014024 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013ea4:	697a      	ldr	r2, [r7, #20]
 8013ea6:	f248 031c 	movw	r3, #32796	; 0x801c
 8013eaa:	4413      	add	r3, r2
 8013eac:	781b      	ldrb	r3, [r3, #0]
 8013eae:	b25b      	sxtb	r3, r3
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	da0c      	bge.n	8013ece <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013eb4:	697a      	ldr	r2, [r7, #20]
 8013eb6:	f248 031d 	movw	r3, #32797	; 0x801d
 8013eba:	4413      	add	r3, r2
 8013ebc:	7819      	ldrb	r1, [r3, #0]
 8013ebe:	2320      	movs	r3, #32
 8013ec0:	2205      	movs	r2, #5
 8013ec2:	68f8      	ldr	r0, [r7, #12]
 8013ec4:	f7ff fcb0 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8013ecc:	e0aa      	b.n	8014024 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ed4:	689b      	ldr	r3, [r3, #8]
 8013ed6:	7afa      	ldrb	r2, [r7, #11]
 8013ed8:	4610      	mov	r0, r2
 8013eda:	4798      	blx	r3
 8013edc:	4603      	mov	r3, r0
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d00b      	beq.n	8013efa <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013ee2:	7af9      	ldrb	r1, [r7, #11]
 8013ee4:	233a      	movs	r3, #58	; 0x3a
 8013ee6:	2202      	movs	r2, #2
 8013ee8:	68f8      	ldr	r0, [r7, #12]
 8013eea:	f7ff fc9d 	bl	8013828 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	2205      	movs	r2, #5
 8013ef2:	721a      	strb	r2, [r3, #8]
      return -1;
 8013ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ef8:	e094      	b.n	8014024 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f00:	68db      	ldr	r3, [r3, #12]
 8013f02:	7afa      	ldrb	r2, [r7, #11]
 8013f04:	4610      	mov	r0, r2
 8013f06:	4798      	blx	r3
 8013f08:	4603      	mov	r3, r0
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d00b      	beq.n	8013f26 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013f0e:	7af9      	ldrb	r1, [r7, #11]
 8013f10:	2327      	movs	r3, #39	; 0x27
 8013f12:	2202      	movs	r2, #2
 8013f14:	68f8      	ldr	r0, [r7, #12]
 8013f16:	f7ff fc87 	bl	8013828 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	2205      	movs	r2, #5
 8013f1e:	721a      	strb	r2, [r3, #8]
      return -1;
 8013f20:	f04f 33ff 	mov.w	r3, #4294967295
 8013f24:	e07e      	b.n	8014024 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	3302      	adds	r3, #2
 8013f2a:	781b      	ldrb	r3, [r3, #0]
 8013f2c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	3303      	adds	r3, #3
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013f36:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	3304      	adds	r3, #4
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013f40:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013f42:	687a      	ldr	r2, [r7, #4]
 8013f44:	3205      	adds	r2, #5
 8013f46:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013f48:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013f4a:	6979      	ldr	r1, [r7, #20]
 8013f4c:	f248 036c 	movw	r3, #32876	; 0x806c
 8013f50:	440b      	add	r3, r1
 8013f52:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	3306      	adds	r3, #6
 8013f58:	781b      	ldrb	r3, [r3, #0]
 8013f5a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	3307      	adds	r3, #7
 8013f60:	781b      	ldrb	r3, [r3, #0]
 8013f62:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013f64:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	3308      	adds	r3, #8
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8013f6e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013f70:	687a      	ldr	r2, [r7, #4]
 8013f72:	3209      	adds	r2, #9
 8013f74:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013f76:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013f78:	6979      	ldr	r1, [r7, #20]
 8013f7a:	f248 0370 	movw	r3, #32880	; 0x8070
 8013f7e:	440b      	add	r3, r1
 8013f80:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013f82:	697a      	ldr	r2, [r7, #20]
 8013f84:	f248 036c 	movw	r3, #32876	; 0x806c
 8013f88:	4413      	add	r3, r2
 8013f8a:	6818      	ldr	r0, [r3, #0]
 8013f8c:	697a      	ldr	r2, [r7, #20]
 8013f8e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013f92:	4413      	add	r3, r2
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	7af9      	ldrb	r1, [r7, #11]
 8013f98:	4602      	mov	r2, r0
 8013f9a:	68f8      	ldr	r0, [r7, #12]
 8013f9c:	f000 f87e 	bl	801409c <SCSI_CheckAddressRange>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	da02      	bge.n	8013fac <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8013faa:	e03b      	b.n	8014024 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013fac:	697a      	ldr	r2, [r7, #20]
 8013fae:	f248 0370 	movw	r3, #32880	; 0x8070
 8013fb2:	4413      	add	r3, r2
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	6979      	ldr	r1, [r7, #20]
 8013fb8:	f248 0364 	movw	r3, #32868	; 0x8064
 8013fbc:	440b      	add	r3, r1
 8013fbe:	881b      	ldrh	r3, [r3, #0]
 8013fc0:	fb03 f302 	mul.w	r3, r3, r2
 8013fc4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013fc6:	697a      	ldr	r2, [r7, #20]
 8013fc8:	f248 0318 	movw	r3, #32792	; 0x8018
 8013fcc:	4413      	add	r3, r2
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	693a      	ldr	r2, [r7, #16]
 8013fd2:	429a      	cmp	r2, r3
 8013fd4:	d00c      	beq.n	8013ff0 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013fd6:	697a      	ldr	r2, [r7, #20]
 8013fd8:	f248 031d 	movw	r3, #32797	; 0x801d
 8013fdc:	4413      	add	r3, r2
 8013fde:	7819      	ldrb	r1, [r3, #0]
 8013fe0:	2320      	movs	r3, #32
 8013fe2:	2205      	movs	r2, #5
 8013fe4:	68f8      	ldr	r0, [r7, #12]
 8013fe6:	f7ff fc1f 	bl	8013828 <SCSI_SenseCode>
      return -1;
 8013fea:	f04f 33ff 	mov.w	r3, #4294967295
 8013fee:	e019      	b.n	8014024 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ff6:	bf28      	it	cs
 8013ff8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013ffc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	2201      	movs	r2, #1
 8014002:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	f103 0210 	add.w	r2, r3, #16
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	2101      	movs	r1, #1
 801400e:	68f8      	ldr	r0, [r7, #12]
 8014010:	f004 fa31 	bl	8018476 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014014:	2300      	movs	r3, #0
 8014016:	e005      	b.n	8014024 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8014018:	7afb      	ldrb	r3, [r7, #11]
 801401a:	4619      	mov	r1, r3
 801401c:	68f8      	ldr	r0, [r7, #12]
 801401e:	f000 f8ef 	bl	8014200 <SCSI_ProcessWrite>
 8014022:	4603      	mov	r3, r0
}
 8014024:	4618      	mov	r0, r3
 8014026:	3718      	adds	r7, #24
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}

0801402c <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b086      	sub	sp, #24
 8014030:	af00      	add	r7, sp, #0
 8014032:	60f8      	str	r0, [r7, #12]
 8014034:	460b      	mov	r3, r1
 8014036:	607a      	str	r2, [r7, #4]
 8014038:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014040:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	3301      	adds	r3, #1
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	f003 0302 	and.w	r3, r3, #2
 801404c:	2b00      	cmp	r3, #0
 801404e:	d008      	beq.n	8014062 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014050:	7af9      	ldrb	r1, [r7, #11]
 8014052:	2324      	movs	r3, #36	; 0x24
 8014054:	2205      	movs	r2, #5
 8014056:	68f8      	ldr	r0, [r7, #12]
 8014058:	f7ff fbe6 	bl	8013828 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801405c:	f04f 33ff 	mov.w	r3, #4294967295
 8014060:	e018      	b.n	8014094 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8014062:	697a      	ldr	r2, [r7, #20]
 8014064:	f248 036c 	movw	r3, #32876	; 0x806c
 8014068:	4413      	add	r3, r2
 801406a:	6818      	ldr	r0, [r3, #0]
 801406c:	697a      	ldr	r2, [r7, #20]
 801406e:	f248 0370 	movw	r3, #32880	; 0x8070
 8014072:	4413      	add	r3, r2
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	7af9      	ldrb	r1, [r7, #11]
 8014078:	4602      	mov	r2, r0
 801407a:	68f8      	ldr	r0, [r7, #12]
 801407c:	f000 f80e 	bl	801409c <SCSI_CheckAddressRange>
 8014080:	4603      	mov	r3, r0
 8014082:	2b00      	cmp	r3, #0
 8014084:	da02      	bge.n	801408c <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8014086:	f04f 33ff 	mov.w	r3, #4294967295
 801408a:	e003      	b.n	8014094 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	2200      	movs	r2, #0
 8014090:	60da      	str	r2, [r3, #12]

  return 0;
 8014092:	2300      	movs	r3, #0
}
 8014094:	4618      	mov	r0, r3
 8014096:	3718      	adds	r7, #24
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b086      	sub	sp, #24
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	60f8      	str	r0, [r7, #12]
 80140a4:	607a      	str	r2, [r7, #4]
 80140a6:	603b      	str	r3, [r7, #0]
 80140a8:	460b      	mov	r3, r1
 80140aa:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140b2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	441a      	add	r2, r3
 80140ba:	6979      	ldr	r1, [r7, #20]
 80140bc:	f248 0368 	movw	r3, #32872	; 0x8068
 80140c0:	440b      	add	r3, r1
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d908      	bls.n	80140da <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80140c8:	7af9      	ldrb	r1, [r7, #11]
 80140ca:	2321      	movs	r3, #33	; 0x21
 80140cc:	2205      	movs	r2, #5
 80140ce:	68f8      	ldr	r0, [r7, #12]
 80140d0:	f7ff fbaa 	bl	8013828 <SCSI_SenseCode>
    return -1;
 80140d4:	f04f 33ff 	mov.w	r3, #4294967295
 80140d8:	e000      	b.n	80140dc <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 80140da:	2300      	movs	r3, #0
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3718      	adds	r7, #24
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}

080140e4 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80140e4:	b5b0      	push	{r4, r5, r7, lr}
 80140e6:	b084      	sub	sp, #16
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	460b      	mov	r3, r1
 80140ee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140f6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80140f8:	68fa      	ldr	r2, [r7, #12]
 80140fa:	f248 0370 	movw	r3, #32880	; 0x8070
 80140fe:	4413      	add	r3, r2
 8014100:	681a      	ldr	r2, [r3, #0]
 8014102:	68f9      	ldr	r1, [r7, #12]
 8014104:	f248 0364 	movw	r3, #32868	; 0x8064
 8014108:	440b      	add	r3, r1
 801410a:	881b      	ldrh	r3, [r3, #0]
 801410c:	fb03 f302 	mul.w	r3, r3, r2
 8014110:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014118:	bf28      	it	cs
 801411a:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801411e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014126:	691c      	ldr	r4, [r3, #16]
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	f103 0110 	add.w	r1, r3, #16
 801412e:	68fa      	ldr	r2, [r7, #12]
 8014130:	f248 036c 	movw	r3, #32876	; 0x806c
 8014134:	4413      	add	r3, r2
 8014136:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8014138:	68fa      	ldr	r2, [r7, #12]
 801413a:	f248 0364 	movw	r3, #32868	; 0x8064
 801413e:	4413      	add	r3, r2
 8014140:	881b      	ldrh	r3, [r3, #0]
 8014142:	461a      	mov	r2, r3
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 801414a:	b29b      	uxth	r3, r3
 801414c:	78f8      	ldrb	r0, [r7, #3]
 801414e:	462a      	mov	r2, r5
 8014150:	47a0      	blx	r4
 8014152:	4603      	mov	r3, r0
 8014154:	2b00      	cmp	r3, #0
 8014156:	da08      	bge.n	801416a <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8014158:	78f9      	ldrb	r1, [r7, #3]
 801415a:	2311      	movs	r3, #17
 801415c:	2204      	movs	r2, #4
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f7ff fb62 	bl	8013828 <SCSI_SenseCode>
    return -1;
 8014164:	f04f 33ff 	mov.w	r3, #4294967295
 8014168:	e046      	b.n	80141f8 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	f103 0210 	add.w	r2, r3, #16
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	2181      	movs	r1, #129	; 0x81
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f004 f95d 	bl	8018434 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801417a:	68fa      	ldr	r2, [r7, #12]
 801417c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014180:	4413      	add	r3, r2
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	68f9      	ldr	r1, [r7, #12]
 8014186:	f248 0364 	movw	r3, #32868	; 0x8064
 801418a:	440b      	add	r3, r1
 801418c:	881b      	ldrh	r3, [r3, #0]
 801418e:	4619      	mov	r1, r3
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	fbb3 f3f1 	udiv	r3, r3, r1
 8014196:	441a      	add	r2, r3
 8014198:	68f9      	ldr	r1, [r7, #12]
 801419a:	f248 036c 	movw	r3, #32876	; 0x806c
 801419e:	440b      	add	r3, r1
 80141a0:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80141a2:	68fa      	ldr	r2, [r7, #12]
 80141a4:	f248 0370 	movw	r3, #32880	; 0x8070
 80141a8:	4413      	add	r3, r2
 80141aa:	681a      	ldr	r2, [r3, #0]
 80141ac:	68f9      	ldr	r1, [r7, #12]
 80141ae:	f248 0364 	movw	r3, #32868	; 0x8064
 80141b2:	440b      	add	r3, r1
 80141b4:	881b      	ldrh	r3, [r3, #0]
 80141b6:	4619      	mov	r1, r3
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80141be:	1ad2      	subs	r2, r2, r3
 80141c0:	68f9      	ldr	r1, [r7, #12]
 80141c2:	f248 0370 	movw	r3, #32880	; 0x8070
 80141c6:	440b      	add	r3, r1
 80141c8:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80141ca:	68fa      	ldr	r2, [r7, #12]
 80141cc:	f248 0338 	movw	r3, #32824	; 0x8038
 80141d0:	4413      	add	r3, r2
 80141d2:	681a      	ldr	r2, [r3, #0]
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	1ad2      	subs	r2, r2, r3
 80141d8:	68f9      	ldr	r1, [r7, #12]
 80141da:	f248 0338 	movw	r3, #32824	; 0x8038
 80141de:	440b      	add	r3, r1
 80141e0:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80141e2:	68fa      	ldr	r2, [r7, #12]
 80141e4:	f248 0370 	movw	r3, #32880	; 0x8070
 80141e8:	4413      	add	r3, r2
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d102      	bne.n	80141f6 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	2203      	movs	r2, #3
 80141f4:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80141f6:	2300      	movs	r3, #0
}
 80141f8:	4618      	mov	r0, r3
 80141fa:	3710      	adds	r7, #16
 80141fc:	46bd      	mov	sp, r7
 80141fe:	bdb0      	pop	{r4, r5, r7, pc}

08014200 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8014200:	b5b0      	push	{r4, r5, r7, lr}
 8014202:	b084      	sub	sp, #16
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
 8014208:	460b      	mov	r3, r1
 801420a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014212:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014214:	68fa      	ldr	r2, [r7, #12]
 8014216:	f248 0370 	movw	r3, #32880	; 0x8070
 801421a:	4413      	add	r3, r2
 801421c:	681a      	ldr	r2, [r3, #0]
 801421e:	68f9      	ldr	r1, [r7, #12]
 8014220:	f248 0364 	movw	r3, #32868	; 0x8064
 8014224:	440b      	add	r3, r1
 8014226:	881b      	ldrh	r3, [r3, #0]
 8014228:	fb03 f302 	mul.w	r3, r3, r2
 801422c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014234:	bf28      	it	cs
 8014236:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801423a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014242:	695c      	ldr	r4, [r3, #20]
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	f103 0110 	add.w	r1, r3, #16
 801424a:	68fa      	ldr	r2, [r7, #12]
 801424c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014250:	4413      	add	r3, r2
 8014252:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8014254:	68fa      	ldr	r2, [r7, #12]
 8014256:	f248 0364 	movw	r3, #32868	; 0x8064
 801425a:	4413      	add	r3, r2
 801425c:	881b      	ldrh	r3, [r3, #0]
 801425e:	461a      	mov	r2, r3
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8014266:	b29b      	uxth	r3, r3
 8014268:	78f8      	ldrb	r0, [r7, #3]
 801426a:	462a      	mov	r2, r5
 801426c:	47a0      	blx	r4
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	da08      	bge.n	8014286 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8014274:	78f9      	ldrb	r1, [r7, #3]
 8014276:	2303      	movs	r3, #3
 8014278:	2204      	movs	r2, #4
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f7ff fad4 	bl	8013828 <SCSI_SenseCode>
    return -1;
 8014280:	f04f 33ff 	mov.w	r3, #4294967295
 8014284:	e05a      	b.n	801433c <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8014286:	68fa      	ldr	r2, [r7, #12]
 8014288:	f248 036c 	movw	r3, #32876	; 0x806c
 801428c:	4413      	add	r3, r2
 801428e:	681a      	ldr	r2, [r3, #0]
 8014290:	68f9      	ldr	r1, [r7, #12]
 8014292:	f248 0364 	movw	r3, #32868	; 0x8064
 8014296:	440b      	add	r3, r1
 8014298:	881b      	ldrh	r3, [r3, #0]
 801429a:	4619      	mov	r1, r3
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	fbb3 f3f1 	udiv	r3, r3, r1
 80142a2:	441a      	add	r2, r3
 80142a4:	68f9      	ldr	r1, [r7, #12]
 80142a6:	f248 036c 	movw	r3, #32876	; 0x806c
 80142aa:	440b      	add	r3, r1
 80142ac:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80142ae:	68fa      	ldr	r2, [r7, #12]
 80142b0:	f248 0370 	movw	r3, #32880	; 0x8070
 80142b4:	4413      	add	r3, r2
 80142b6:	681a      	ldr	r2, [r3, #0]
 80142b8:	68f9      	ldr	r1, [r7, #12]
 80142ba:	f248 0364 	movw	r3, #32868	; 0x8064
 80142be:	440b      	add	r3, r1
 80142c0:	881b      	ldrh	r3, [r3, #0]
 80142c2:	4619      	mov	r1, r3
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80142ca:	1ad2      	subs	r2, r2, r3
 80142cc:	68f9      	ldr	r1, [r7, #12]
 80142ce:	f248 0370 	movw	r3, #32880	; 0x8070
 80142d2:	440b      	add	r3, r1
 80142d4:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80142d6:	68fa      	ldr	r2, [r7, #12]
 80142d8:	f248 0338 	movw	r3, #32824	; 0x8038
 80142dc:	4413      	add	r3, r2
 80142de:	681a      	ldr	r2, [r3, #0]
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	1ad2      	subs	r2, r2, r3
 80142e4:	68f9      	ldr	r1, [r7, #12]
 80142e6:	f248 0338 	movw	r3, #32824	; 0x8038
 80142ea:	440b      	add	r3, r1
 80142ec:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80142ee:	68fa      	ldr	r2, [r7, #12]
 80142f0:	f248 0370 	movw	r3, #32880	; 0x8070
 80142f4:	4413      	add	r3, r2
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d104      	bne.n	8014306 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80142fc:	2100      	movs	r1, #0
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	f7fe fde2 	bl	8012ec8 <MSC_BOT_SendCSW>
 8014304:	e019      	b.n	801433a <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8014306:	68fa      	ldr	r2, [r7, #12]
 8014308:	f248 0370 	movw	r3, #32880	; 0x8070
 801430c:	4413      	add	r3, r2
 801430e:	681a      	ldr	r2, [r3, #0]
 8014310:	68f9      	ldr	r1, [r7, #12]
 8014312:	f248 0364 	movw	r3, #32868	; 0x8064
 8014316:	440b      	add	r3, r1
 8014318:	881b      	ldrh	r3, [r3, #0]
 801431a:	fb03 f302 	mul.w	r3, r3, r2
 801431e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014322:	bf28      	it	cs
 8014324:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014328:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	f103 0210 	add.w	r2, r3, #16
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	2101      	movs	r1, #1
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f004 f89e 	bl	8018476 <USBD_LL_PrepareReceive>
  }

  return 0;
 801433a:	2300      	movs	r3, #0
}
 801433c:	4618      	mov	r0, r3
 801433e:	3710      	adds	r7, #16
 8014340:	46bd      	mov	sp, r7
 8014342:	bdb0      	pop	{r4, r5, r7, pc}

08014344 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8014344:	b480      	push	{r7}
 8014346:	b087      	sub	sp, #28
 8014348:	af00      	add	r7, sp, #0
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	4613      	mov	r3, r2
 8014350:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8014352:	88fb      	ldrh	r3, [r7, #6]
 8014354:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8014356:	8afa      	ldrh	r2, [r7, #22]
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 801435c:	e00b      	b.n	8014376 <SCSI_UpdateBotData+0x32>
  {
    len--;
 801435e:	8afb      	ldrh	r3, [r7, #22]
 8014360:	3b01      	subs	r3, #1
 8014362:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8014364:	8afb      	ldrh	r3, [r7, #22]
 8014366:	68ba      	ldr	r2, [r7, #8]
 8014368:	441a      	add	r2, r3
 801436a:	8afb      	ldrh	r3, [r7, #22]
 801436c:	7811      	ldrb	r1, [r2, #0]
 801436e:	68fa      	ldr	r2, [r7, #12]
 8014370:	4413      	add	r3, r2
 8014372:	460a      	mov	r2, r1
 8014374:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8014376:	8afb      	ldrh	r3, [r7, #22]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d1f0      	bne.n	801435e <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 801437c:	2300      	movs	r3, #0
}
 801437e:	4618      	mov	r0, r3
 8014380:	371c      	adds	r7, #28
 8014382:	46bd      	mov	sp, r7
 8014384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014388:	4770      	bx	lr

0801438a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801438a:	b580      	push	{r7, lr}
 801438c:	b086      	sub	sp, #24
 801438e:	af00      	add	r7, sp, #0
 8014390:	60f8      	str	r0, [r7, #12]
 8014392:	60b9      	str	r1, [r7, #8]
 8014394:	4613      	mov	r3, r2
 8014396:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d101      	bne.n	80143a2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801439e:	2303      	movs	r3, #3
 80143a0:	e025      	b.n	80143ee <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d003      	beq.n	80143b4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	2200      	movs	r2, #0
 80143b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d003      	beq.n	80143c6 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	2200      	movs	r2, #0
 80143c2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d003      	beq.n	80143d4 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	68ba      	ldr	r2, [r7, #8]
 80143d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	2201      	movs	r2, #1
 80143d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	79fa      	ldrb	r2, [r7, #7]
 80143e0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80143e2:	68f8      	ldr	r0, [r7, #12]
 80143e4:	f003 fece 	bl	8018184 <USBD_LL_Init>
 80143e8:	4603      	mov	r3, r0
 80143ea:	75fb      	strb	r3, [r7, #23]

  return ret;
 80143ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80143ee:	4618      	mov	r0, r3
 80143f0:	3718      	adds	r7, #24
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}

080143f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80143f6:	b580      	push	{r7, lr}
 80143f8:	b084      	sub	sp, #16
 80143fa:	af00      	add	r7, sp, #0
 80143fc:	6078      	str	r0, [r7, #4]
 80143fe:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014400:	2300      	movs	r3, #0
 8014402:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014404:	683b      	ldr	r3, [r7, #0]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d101      	bne.n	801440e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801440a:	2303      	movs	r3, #3
 801440c:	e010      	b.n	8014430 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	683a      	ldr	r2, [r7, #0]
 8014412:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801441e:	f107 020e 	add.w	r2, r7, #14
 8014422:	4610      	mov	r0, r2
 8014424:	4798      	blx	r3
 8014426:	4602      	mov	r2, r0
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 801442e:	2300      	movs	r3, #0
}
 8014430:	4618      	mov	r0, r3
 8014432:	3710      	adds	r7, #16
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}

08014438 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f003 feef 	bl	8018224 <USBD_LL_Start>
 8014446:	4603      	mov	r3, r0
}
 8014448:	4618      	mov	r0, r3
 801444a:	3708      	adds	r7, #8
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}

08014450 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014450:	b480      	push	{r7}
 8014452:	b083      	sub	sp, #12
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014458:	2300      	movs	r3, #0
}
 801445a:	4618      	mov	r0, r3
 801445c:	370c      	adds	r7, #12
 801445e:	46bd      	mov	sp, r7
 8014460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014464:	4770      	bx	lr

08014466 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014466:	b580      	push	{r7, lr}
 8014468:	b084      	sub	sp, #16
 801446a:	af00      	add	r7, sp, #0
 801446c:	6078      	str	r0, [r7, #4]
 801446e:	460b      	mov	r3, r1
 8014470:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014472:	2303      	movs	r3, #3
 8014474:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801447c:	2b00      	cmp	r3, #0
 801447e:	d009      	beq.n	8014494 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	78fa      	ldrb	r2, [r7, #3]
 801448a:	4611      	mov	r1, r2
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	4798      	blx	r3
 8014490:	4603      	mov	r3, r0
 8014492:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014494:	7bfb      	ldrb	r3, [r7, #15]
}
 8014496:	4618      	mov	r0, r3
 8014498:	3710      	adds	r7, #16
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}

0801449e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801449e:	b580      	push	{r7, lr}
 80144a0:	b082      	sub	sp, #8
 80144a2:	af00      	add	r7, sp, #0
 80144a4:	6078      	str	r0, [r7, #4]
 80144a6:	460b      	mov	r3, r1
 80144a8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d007      	beq.n	80144c4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	78fa      	ldrb	r2, [r7, #3]
 80144be:	4611      	mov	r1, r2
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	4798      	blx	r3
  }

  return USBD_OK;
 80144c4:	2300      	movs	r3, #0
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3708      	adds	r7, #8
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}

080144ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80144ce:	b580      	push	{r7, lr}
 80144d0:	b084      	sub	sp, #16
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
 80144d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80144de:	6839      	ldr	r1, [r7, #0]
 80144e0:	4618      	mov	r0, r3
 80144e2:	f000 ff2b 	bl	801533c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2201      	movs	r2, #1
 80144ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80144f4:	461a      	mov	r2, r3
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014502:	f003 031f 	and.w	r3, r3, #31
 8014506:	2b01      	cmp	r3, #1
 8014508:	d00e      	beq.n	8014528 <USBD_LL_SetupStage+0x5a>
 801450a:	2b01      	cmp	r3, #1
 801450c:	d302      	bcc.n	8014514 <USBD_LL_SetupStage+0x46>
 801450e:	2b02      	cmp	r3, #2
 8014510:	d014      	beq.n	801453c <USBD_LL_SetupStage+0x6e>
 8014512:	e01d      	b.n	8014550 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801451a:	4619      	mov	r1, r3
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f000 fa17 	bl	8014950 <USBD_StdDevReq>
 8014522:	4603      	mov	r3, r0
 8014524:	73fb      	strb	r3, [r7, #15]
      break;
 8014526:	e020      	b.n	801456a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801452e:	4619      	mov	r1, r3
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f000 fa7b 	bl	8014a2c <USBD_StdItfReq>
 8014536:	4603      	mov	r3, r0
 8014538:	73fb      	strb	r3, [r7, #15]
      break;
 801453a:	e016      	b.n	801456a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014542:	4619      	mov	r1, r3
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f000 fab7 	bl	8014ab8 <USBD_StdEPReq>
 801454a:	4603      	mov	r3, r0
 801454c:	73fb      	strb	r3, [r7, #15]
      break;
 801454e:	e00c      	b.n	801456a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014556:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801455a:	b2db      	uxtb	r3, r3
 801455c:	4619      	mov	r1, r3
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f003 fedf 	bl	8018322 <USBD_LL_StallEP>
 8014564:	4603      	mov	r3, r0
 8014566:	73fb      	strb	r3, [r7, #15]
      break;
 8014568:	bf00      	nop
  }

  return ret;
 801456a:	7bfb      	ldrb	r3, [r7, #15]
}
 801456c:	4618      	mov	r0, r3
 801456e:	3710      	adds	r7, #16
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b086      	sub	sp, #24
 8014578:	af00      	add	r7, sp, #0
 801457a:	60f8      	str	r0, [r7, #12]
 801457c:	460b      	mov	r3, r1
 801457e:	607a      	str	r2, [r7, #4]
 8014580:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014582:	7afb      	ldrb	r3, [r7, #11]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d137      	bne.n	80145f8 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801458e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014596:	2b03      	cmp	r3, #3
 8014598:	d14a      	bne.n	8014630 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801459a:	693b      	ldr	r3, [r7, #16]
 801459c:	689a      	ldr	r2, [r3, #8]
 801459e:	693b      	ldr	r3, [r7, #16]
 80145a0:	68db      	ldr	r3, [r3, #12]
 80145a2:	429a      	cmp	r2, r3
 80145a4:	d913      	bls.n	80145ce <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	689a      	ldr	r2, [r3, #8]
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	68db      	ldr	r3, [r3, #12]
 80145ae:	1ad2      	subs	r2, r2, r3
 80145b0:	693b      	ldr	r3, [r7, #16]
 80145b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	68da      	ldr	r2, [r3, #12]
 80145b8:	693b      	ldr	r3, [r7, #16]
 80145ba:	689b      	ldr	r3, [r3, #8]
 80145bc:	4293      	cmp	r3, r2
 80145be:	bf28      	it	cs
 80145c0:	4613      	movcs	r3, r2
 80145c2:	461a      	mov	r2, r3
 80145c4:	6879      	ldr	r1, [r7, #4]
 80145c6:	68f8      	ldr	r0, [r7, #12]
 80145c8:	f000 ff8f 	bl	80154ea <USBD_CtlContinueRx>
 80145cc:	e030      	b.n	8014630 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145d4:	691b      	ldr	r3, [r3, #16]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d00a      	beq.n	80145f0 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80145e0:	2b03      	cmp	r3, #3
 80145e2:	d105      	bne.n	80145f0 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145ea:	691b      	ldr	r3, [r3, #16]
 80145ec:	68f8      	ldr	r0, [r7, #12]
 80145ee:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80145f0:	68f8      	ldr	r0, [r7, #12]
 80145f2:	f000 ff8b 	bl	801550c <USBD_CtlSendStatus>
 80145f6:	e01b      	b.n	8014630 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145fe:	699b      	ldr	r3, [r3, #24]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d013      	beq.n	801462c <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801460a:	2b03      	cmp	r3, #3
 801460c:	d10e      	bne.n	801462c <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014614:	699b      	ldr	r3, [r3, #24]
 8014616:	7afa      	ldrb	r2, [r7, #11]
 8014618:	4611      	mov	r1, r2
 801461a:	68f8      	ldr	r0, [r7, #12]
 801461c:	4798      	blx	r3
 801461e:	4603      	mov	r3, r0
 8014620:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8014622:	7dfb      	ldrb	r3, [r7, #23]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d003      	beq.n	8014630 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8014628:	7dfb      	ldrb	r3, [r7, #23]
 801462a:	e002      	b.n	8014632 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801462c:	2303      	movs	r3, #3
 801462e:	e000      	b.n	8014632 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8014630:	2300      	movs	r3, #0
}
 8014632:	4618      	mov	r0, r3
 8014634:	3718      	adds	r7, #24
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}

0801463a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801463a:	b580      	push	{r7, lr}
 801463c:	b086      	sub	sp, #24
 801463e:	af00      	add	r7, sp, #0
 8014640:	60f8      	str	r0, [r7, #12]
 8014642:	460b      	mov	r3, r1
 8014644:	607a      	str	r2, [r7, #4]
 8014646:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014648:	7afb      	ldrb	r3, [r7, #11]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d16a      	bne.n	8014724 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	3314      	adds	r3, #20
 8014652:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801465a:	2b02      	cmp	r3, #2
 801465c:	d155      	bne.n	801470a <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	689a      	ldr	r2, [r3, #8]
 8014662:	693b      	ldr	r3, [r7, #16]
 8014664:	68db      	ldr	r3, [r3, #12]
 8014666:	429a      	cmp	r2, r3
 8014668:	d914      	bls.n	8014694 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	689a      	ldr	r2, [r3, #8]
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	68db      	ldr	r3, [r3, #12]
 8014672:	1ad2      	subs	r2, r2, r3
 8014674:	693b      	ldr	r3, [r7, #16]
 8014676:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	689b      	ldr	r3, [r3, #8]
 801467c:	461a      	mov	r2, r3
 801467e:	6879      	ldr	r1, [r7, #4]
 8014680:	68f8      	ldr	r0, [r7, #12]
 8014682:	f000 ff21 	bl	80154c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014686:	2300      	movs	r3, #0
 8014688:	2200      	movs	r2, #0
 801468a:	2100      	movs	r1, #0
 801468c:	68f8      	ldr	r0, [r7, #12]
 801468e:	f003 fef2 	bl	8018476 <USBD_LL_PrepareReceive>
 8014692:	e03a      	b.n	801470a <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014694:	693b      	ldr	r3, [r7, #16]
 8014696:	68da      	ldr	r2, [r3, #12]
 8014698:	693b      	ldr	r3, [r7, #16]
 801469a:	689b      	ldr	r3, [r3, #8]
 801469c:	429a      	cmp	r2, r3
 801469e:	d11c      	bne.n	80146da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80146a0:	693b      	ldr	r3, [r7, #16]
 80146a2:	685a      	ldr	r2, [r3, #4]
 80146a4:	693b      	ldr	r3, [r7, #16]
 80146a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d316      	bcc.n	80146da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	685a      	ldr	r2, [r3, #4]
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d20f      	bcs.n	80146da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80146ba:	2200      	movs	r2, #0
 80146bc:	2100      	movs	r1, #0
 80146be:	68f8      	ldr	r0, [r7, #12]
 80146c0:	f000 ff02 	bl	80154c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	2200      	movs	r2, #0
 80146c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80146cc:	2300      	movs	r3, #0
 80146ce:	2200      	movs	r2, #0
 80146d0:	2100      	movs	r1, #0
 80146d2:	68f8      	ldr	r0, [r7, #12]
 80146d4:	f003 fecf 	bl	8018476 <USBD_LL_PrepareReceive>
 80146d8:	e017      	b.n	801470a <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146e0:	68db      	ldr	r3, [r3, #12]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d00a      	beq.n	80146fc <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80146ec:	2b03      	cmp	r3, #3
 80146ee:	d105      	bne.n	80146fc <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146f6:	68db      	ldr	r3, [r3, #12]
 80146f8:	68f8      	ldr	r0, [r7, #12]
 80146fa:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80146fc:	2180      	movs	r1, #128	; 0x80
 80146fe:	68f8      	ldr	r0, [r7, #12]
 8014700:	f003 fe0f 	bl	8018322 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014704:	68f8      	ldr	r0, [r7, #12]
 8014706:	f000 ff14 	bl	8015532 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014710:	2b01      	cmp	r3, #1
 8014712:	d123      	bne.n	801475c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014714:	68f8      	ldr	r0, [r7, #12]
 8014716:	f7ff fe9b 	bl	8014450 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	2200      	movs	r2, #0
 801471e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014722:	e01b      	b.n	801475c <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801472a:	695b      	ldr	r3, [r3, #20]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d013      	beq.n	8014758 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8014736:	2b03      	cmp	r3, #3
 8014738:	d10e      	bne.n	8014758 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014740:	695b      	ldr	r3, [r3, #20]
 8014742:	7afa      	ldrb	r2, [r7, #11]
 8014744:	4611      	mov	r1, r2
 8014746:	68f8      	ldr	r0, [r7, #12]
 8014748:	4798      	blx	r3
 801474a:	4603      	mov	r3, r0
 801474c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801474e:	7dfb      	ldrb	r3, [r7, #23]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d003      	beq.n	801475c <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8014754:	7dfb      	ldrb	r3, [r7, #23]
 8014756:	e002      	b.n	801475e <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014758:	2303      	movs	r3, #3
 801475a:	e000      	b.n	801475e <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 801475c:	2300      	movs	r3, #0
}
 801475e:	4618      	mov	r0, r3
 8014760:	3718      	adds	r7, #24
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}

08014766 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014766:	b580      	push	{r7, lr}
 8014768:	b082      	sub	sp, #8
 801476a:	af00      	add	r7, sp, #0
 801476c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2201      	movs	r2, #1
 8014772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2200      	movs	r2, #0
 801477a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2200      	movs	r2, #0
 8014782:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	2200      	movs	r2, #0
 8014788:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014792:	2b00      	cmp	r3, #0
 8014794:	d009      	beq.n	80147aa <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801479c:	685b      	ldr	r3, [r3, #4]
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	6852      	ldr	r2, [r2, #4]
 80147a2:	b2d2      	uxtb	r2, r2
 80147a4:	4611      	mov	r1, r2
 80147a6:	6878      	ldr	r0, [r7, #4]
 80147a8:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80147aa:	2340      	movs	r3, #64	; 0x40
 80147ac:	2200      	movs	r2, #0
 80147ae:	2100      	movs	r1, #0
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f003 fd52 	bl	801825a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2201      	movs	r2, #1
 80147ba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2240      	movs	r2, #64	; 0x40
 80147c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80147c6:	2340      	movs	r3, #64	; 0x40
 80147c8:	2200      	movs	r2, #0
 80147ca:	2180      	movs	r1, #128	; 0x80
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f003 fd44 	bl	801825a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	2201      	movs	r2, #1
 80147d6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2240      	movs	r2, #64	; 0x40
 80147dc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80147de:	2300      	movs	r3, #0
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3708      	adds	r7, #8
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}

080147e8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	460b      	mov	r3, r1
 80147f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	78fa      	ldrb	r2, [r7, #3]
 80147f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80147fa:	2300      	movs	r3, #0
}
 80147fc:	4618      	mov	r0, r3
 80147fe:	370c      	adds	r7, #12
 8014800:	46bd      	mov	sp, r7
 8014802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014806:	4770      	bx	lr

08014808 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014808:	b480      	push	{r7}
 801480a:	b083      	sub	sp, #12
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2204      	movs	r2, #4
 8014820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014824:	2300      	movs	r3, #0
}
 8014826:	4618      	mov	r0, r3
 8014828:	370c      	adds	r7, #12
 801482a:	46bd      	mov	sp, r7
 801482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014830:	4770      	bx	lr

08014832 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014832:	b480      	push	{r7}
 8014834:	b083      	sub	sp, #12
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014840:	2b04      	cmp	r3, #4
 8014842:	d105      	bne.n	8014850 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014850:	2300      	movs	r3, #0
}
 8014852:	4618      	mov	r0, r3
 8014854:	370c      	adds	r7, #12
 8014856:	46bd      	mov	sp, r7
 8014858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485c:	4770      	bx	lr

0801485e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801485e:	b580      	push	{r7, lr}
 8014860:	b082      	sub	sp, #8
 8014862:	af00      	add	r7, sp, #0
 8014864:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801486c:	2b03      	cmp	r3, #3
 801486e:	d10b      	bne.n	8014888 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014876:	69db      	ldr	r3, [r3, #28]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d005      	beq.n	8014888 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014882:	69db      	ldr	r3, [r3, #28]
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014888:	2300      	movs	r3, #0
}
 801488a:	4618      	mov	r0, r3
 801488c:	3708      	adds	r7, #8
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}

08014892 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014892:	b480      	push	{r7}
 8014894:	b083      	sub	sp, #12
 8014896:	af00      	add	r7, sp, #0
 8014898:	6078      	str	r0, [r7, #4]
 801489a:	460b      	mov	r3, r1
 801489c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801489e:	2300      	movs	r3, #0
}
 80148a0:	4618      	mov	r0, r3
 80148a2:	370c      	adds	r7, #12
 80148a4:	46bd      	mov	sp, r7
 80148a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148aa:	4770      	bx	lr

080148ac <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80148ac:	b480      	push	{r7}
 80148ae:	b083      	sub	sp, #12
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	460b      	mov	r3, r1
 80148b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80148b8:	2300      	movs	r3, #0
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	370c      	adds	r7, #12
 80148be:	46bd      	mov	sp, r7
 80148c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c4:	4770      	bx	lr

080148c6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80148c6:	b480      	push	{r7}
 80148c8:	b083      	sub	sp, #12
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80148ce:	2300      	movs	r3, #0
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	370c      	adds	r7, #12
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr

080148dc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2201      	movs	r2, #1
 80148e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d009      	beq.n	801490a <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148fc:	685b      	ldr	r3, [r3, #4]
 80148fe:	687a      	ldr	r2, [r7, #4]
 8014900:	6852      	ldr	r2, [r2, #4]
 8014902:	b2d2      	uxtb	r2, r2
 8014904:	4611      	mov	r1, r2
 8014906:	6878      	ldr	r0, [r7, #4]
 8014908:	4798      	blx	r3
  }

  return USBD_OK;
 801490a:	2300      	movs	r3, #0
}
 801490c:	4618      	mov	r0, r3
 801490e:	3708      	adds	r7, #8
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}

08014914 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014914:	b480      	push	{r7}
 8014916:	b087      	sub	sp, #28
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014920:	697b      	ldr	r3, [r7, #20]
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014926:	697b      	ldr	r3, [r7, #20]
 8014928:	3301      	adds	r3, #1
 801492a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014932:	8a3b      	ldrh	r3, [r7, #16]
 8014934:	021b      	lsls	r3, r3, #8
 8014936:	b21a      	sxth	r2, r3
 8014938:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801493c:	4313      	orrs	r3, r2
 801493e:	b21b      	sxth	r3, r3
 8014940:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014942:	89fb      	ldrh	r3, [r7, #14]
}
 8014944:	4618      	mov	r0, r3
 8014946:	371c      	adds	r7, #28
 8014948:	46bd      	mov	sp, r7
 801494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494e:	4770      	bx	lr

08014950 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b084      	sub	sp, #16
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
 8014958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801495a:	2300      	movs	r3, #0
 801495c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	781b      	ldrb	r3, [r3, #0]
 8014962:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014966:	2b20      	cmp	r3, #32
 8014968:	d004      	beq.n	8014974 <USBD_StdDevReq+0x24>
 801496a:	2b40      	cmp	r3, #64	; 0x40
 801496c:	d002      	beq.n	8014974 <USBD_StdDevReq+0x24>
 801496e:	2b00      	cmp	r3, #0
 8014970:	d00a      	beq.n	8014988 <USBD_StdDevReq+0x38>
 8014972:	e050      	b.n	8014a16 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801497a:	689b      	ldr	r3, [r3, #8]
 801497c:	6839      	ldr	r1, [r7, #0]
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	4798      	blx	r3
 8014982:	4603      	mov	r3, r0
 8014984:	73fb      	strb	r3, [r7, #15]
    break;
 8014986:	e04b      	b.n	8014a20 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8014988:	683b      	ldr	r3, [r7, #0]
 801498a:	785b      	ldrb	r3, [r3, #1]
 801498c:	2b09      	cmp	r3, #9
 801498e:	d83c      	bhi.n	8014a0a <USBD_StdDevReq+0xba>
 8014990:	a201      	add	r2, pc, #4	; (adr r2, 8014998 <USBD_StdDevReq+0x48>)
 8014992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014996:	bf00      	nop
 8014998:	080149ed 	.word	0x080149ed
 801499c:	08014a01 	.word	0x08014a01
 80149a0:	08014a0b 	.word	0x08014a0b
 80149a4:	080149f7 	.word	0x080149f7
 80149a8:	08014a0b 	.word	0x08014a0b
 80149ac:	080149cb 	.word	0x080149cb
 80149b0:	080149c1 	.word	0x080149c1
 80149b4:	08014a0b 	.word	0x08014a0b
 80149b8:	080149e3 	.word	0x080149e3
 80149bc:	080149d5 	.word	0x080149d5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80149c0:	6839      	ldr	r1, [r7, #0]
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	f000 f9ce 	bl	8014d64 <USBD_GetDescriptor>
      break;
 80149c8:	e024      	b.n	8014a14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80149ca:	6839      	ldr	r1, [r7, #0]
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f000 fb33 	bl	8015038 <USBD_SetAddress>
      break;
 80149d2:	e01f      	b.n	8014a14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80149d4:	6839      	ldr	r1, [r7, #0]
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f000 fb70 	bl	80150bc <USBD_SetConfig>
 80149dc:	4603      	mov	r3, r0
 80149de:	73fb      	strb	r3, [r7, #15]
      break;
 80149e0:	e018      	b.n	8014a14 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80149e2:	6839      	ldr	r1, [r7, #0]
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f000 fc0d 	bl	8015204 <USBD_GetConfig>
      break;
 80149ea:	e013      	b.n	8014a14 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80149ec:	6839      	ldr	r1, [r7, #0]
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	f000 fc3c 	bl	801526c <USBD_GetStatus>
      break;
 80149f4:	e00e      	b.n	8014a14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80149f6:	6839      	ldr	r1, [r7, #0]
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f000 fc6a 	bl	80152d2 <USBD_SetFeature>
      break;
 80149fe:	e009      	b.n	8014a14 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8014a00:	6839      	ldr	r1, [r7, #0]
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f000 fc79 	bl	80152fa <USBD_ClrFeature>
      break;
 8014a08:	e004      	b.n	8014a14 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8014a0a:	6839      	ldr	r1, [r7, #0]
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f000 fccf 	bl	80153b0 <USBD_CtlError>
      break;
 8014a12:	bf00      	nop
    }
    break;
 8014a14:	e004      	b.n	8014a20 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8014a16:	6839      	ldr	r1, [r7, #0]
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f000 fcc9 	bl	80153b0 <USBD_CtlError>
    break;
 8014a1e:	bf00      	nop
  }

  return ret;
 8014a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3710      	adds	r7, #16
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}
 8014a2a:	bf00      	nop

08014a2c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
 8014a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a36:	2300      	movs	r3, #0
 8014a38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a42:	2b20      	cmp	r3, #32
 8014a44:	d003      	beq.n	8014a4e <USBD_StdItfReq+0x22>
 8014a46:	2b40      	cmp	r3, #64	; 0x40
 8014a48:	d001      	beq.n	8014a4e <USBD_StdItfReq+0x22>
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d12a      	bne.n	8014aa4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a54:	3b01      	subs	r3, #1
 8014a56:	2b02      	cmp	r3, #2
 8014a58:	d81d      	bhi.n	8014a96 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	889b      	ldrh	r3, [r3, #4]
 8014a5e:	b2db      	uxtb	r3, r3
 8014a60:	2b01      	cmp	r3, #1
 8014a62:	d813      	bhi.n	8014a8c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a6a:	689b      	ldr	r3, [r3, #8]
 8014a6c:	6839      	ldr	r1, [r7, #0]
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	4798      	blx	r3
 8014a72:	4603      	mov	r3, r0
 8014a74:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	88db      	ldrh	r3, [r3, #6]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d110      	bne.n	8014aa0 <USBD_StdItfReq+0x74>
 8014a7e:	7bfb      	ldrb	r3, [r7, #15]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d10d      	bne.n	8014aa0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f000 fd41 	bl	801550c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8014a8a:	e009      	b.n	8014aa0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8014a8c:	6839      	ldr	r1, [r7, #0]
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f000 fc8e 	bl	80153b0 <USBD_CtlError>
      break;
 8014a94:	e004      	b.n	8014aa0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8014a96:	6839      	ldr	r1, [r7, #0]
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f000 fc89 	bl	80153b0 <USBD_CtlError>
      break;
 8014a9e:	e000      	b.n	8014aa2 <USBD_StdItfReq+0x76>
      break;
 8014aa0:	bf00      	nop
    }
    break;
 8014aa2:	e004      	b.n	8014aae <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8014aa4:	6839      	ldr	r1, [r7, #0]
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f000 fc82 	bl	80153b0 <USBD_CtlError>
    break;
 8014aac:	bf00      	nop
  }

  return ret;
 8014aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3710      	adds	r7, #16
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}

08014ab8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b084      	sub	sp, #16
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
 8014ac0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	889b      	ldrh	r3, [r3, #4]
 8014aca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	781b      	ldrb	r3, [r3, #0]
 8014ad0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014ad4:	2b20      	cmp	r3, #32
 8014ad6:	d004      	beq.n	8014ae2 <USBD_StdEPReq+0x2a>
 8014ad8:	2b40      	cmp	r3, #64	; 0x40
 8014ada:	d002      	beq.n	8014ae2 <USBD_StdEPReq+0x2a>
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d00a      	beq.n	8014af6 <USBD_StdEPReq+0x3e>
 8014ae0:	e135      	b.n	8014d4e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ae8:	689b      	ldr	r3, [r3, #8]
 8014aea:	6839      	ldr	r1, [r7, #0]
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	4798      	blx	r3
 8014af0:	4603      	mov	r3, r0
 8014af2:	73fb      	strb	r3, [r7, #15]
    break;
 8014af4:	e130      	b.n	8014d58 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	785b      	ldrb	r3, [r3, #1]
 8014afa:	2b01      	cmp	r3, #1
 8014afc:	d03e      	beq.n	8014b7c <USBD_StdEPReq+0xc4>
 8014afe:	2b03      	cmp	r3, #3
 8014b00:	d002      	beq.n	8014b08 <USBD_StdEPReq+0x50>
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d077      	beq.n	8014bf6 <USBD_StdEPReq+0x13e>
 8014b06:	e11c      	b.n	8014d42 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b0e:	2b02      	cmp	r3, #2
 8014b10:	d002      	beq.n	8014b18 <USBD_StdEPReq+0x60>
 8014b12:	2b03      	cmp	r3, #3
 8014b14:	d015      	beq.n	8014b42 <USBD_StdEPReq+0x8a>
 8014b16:	e02b      	b.n	8014b70 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b18:	7bbb      	ldrb	r3, [r7, #14]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d00c      	beq.n	8014b38 <USBD_StdEPReq+0x80>
 8014b1e:	7bbb      	ldrb	r3, [r7, #14]
 8014b20:	2b80      	cmp	r3, #128	; 0x80
 8014b22:	d009      	beq.n	8014b38 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b24:	7bbb      	ldrb	r3, [r7, #14]
 8014b26:	4619      	mov	r1, r3
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f003 fbfa 	bl	8018322 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b2e:	2180      	movs	r1, #128	; 0x80
 8014b30:	6878      	ldr	r0, [r7, #4]
 8014b32:	f003 fbf6 	bl	8018322 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8014b36:	e020      	b.n	8014b7a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8014b38:	6839      	ldr	r1, [r7, #0]
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f000 fc38 	bl	80153b0 <USBD_CtlError>
        break;
 8014b40:	e01b      	b.n	8014b7a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	885b      	ldrh	r3, [r3, #2]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d10e      	bne.n	8014b68 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014b4a:	7bbb      	ldrb	r3, [r7, #14]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d00b      	beq.n	8014b68 <USBD_StdEPReq+0xb0>
 8014b50:	7bbb      	ldrb	r3, [r7, #14]
 8014b52:	2b80      	cmp	r3, #128	; 0x80
 8014b54:	d008      	beq.n	8014b68 <USBD_StdEPReq+0xb0>
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	88db      	ldrh	r3, [r3, #6]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d104      	bne.n	8014b68 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b5e:	7bbb      	ldrb	r3, [r7, #14]
 8014b60:	4619      	mov	r1, r3
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f003 fbdd 	bl	8018322 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f000 fccf 	bl	801550c <USBD_CtlSendStatus>

        break;
 8014b6e:	e004      	b.n	8014b7a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8014b70:	6839      	ldr	r1, [r7, #0]
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f000 fc1c 	bl	80153b0 <USBD_CtlError>
        break;
 8014b78:	bf00      	nop
      }
      break;
 8014b7a:	e0e7      	b.n	8014d4c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b82:	2b02      	cmp	r3, #2
 8014b84:	d002      	beq.n	8014b8c <USBD_StdEPReq+0xd4>
 8014b86:	2b03      	cmp	r3, #3
 8014b88:	d015      	beq.n	8014bb6 <USBD_StdEPReq+0xfe>
 8014b8a:	e02d      	b.n	8014be8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b8c:	7bbb      	ldrb	r3, [r7, #14]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d00c      	beq.n	8014bac <USBD_StdEPReq+0xf4>
 8014b92:	7bbb      	ldrb	r3, [r7, #14]
 8014b94:	2b80      	cmp	r3, #128	; 0x80
 8014b96:	d009      	beq.n	8014bac <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b98:	7bbb      	ldrb	r3, [r7, #14]
 8014b9a:	4619      	mov	r1, r3
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f003 fbc0 	bl	8018322 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014ba2:	2180      	movs	r1, #128	; 0x80
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f003 fbbc 	bl	8018322 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8014baa:	e023      	b.n	8014bf4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8014bac:	6839      	ldr	r1, [r7, #0]
 8014bae:	6878      	ldr	r0, [r7, #4]
 8014bb0:	f000 fbfe 	bl	80153b0 <USBD_CtlError>
        break;
 8014bb4:	e01e      	b.n	8014bf4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	885b      	ldrh	r3, [r3, #2]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d119      	bne.n	8014bf2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8014bbe:	7bbb      	ldrb	r3, [r7, #14]
 8014bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d004      	beq.n	8014bd2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014bc8:	7bbb      	ldrb	r3, [r7, #14]
 8014bca:	4619      	mov	r1, r3
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f003 fbc7 	bl	8018360 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8014bd2:	6878      	ldr	r0, [r7, #4]
 8014bd4:	f000 fc9a 	bl	801550c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bde:	689b      	ldr	r3, [r3, #8]
 8014be0:	6839      	ldr	r1, [r7, #0]
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	4798      	blx	r3
        }
        break;
 8014be6:	e004      	b.n	8014bf2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8014be8:	6839      	ldr	r1, [r7, #0]
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f000 fbe0 	bl	80153b0 <USBD_CtlError>
        break;
 8014bf0:	e000      	b.n	8014bf4 <USBD_StdEPReq+0x13c>
        break;
 8014bf2:	bf00      	nop
      }
      break;
 8014bf4:	e0aa      	b.n	8014d4c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014bfc:	2b02      	cmp	r3, #2
 8014bfe:	d002      	beq.n	8014c06 <USBD_StdEPReq+0x14e>
 8014c00:	2b03      	cmp	r3, #3
 8014c02:	d032      	beq.n	8014c6a <USBD_StdEPReq+0x1b2>
 8014c04:	e097      	b.n	8014d36 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c06:	7bbb      	ldrb	r3, [r7, #14]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d007      	beq.n	8014c1c <USBD_StdEPReq+0x164>
 8014c0c:	7bbb      	ldrb	r3, [r7, #14]
 8014c0e:	2b80      	cmp	r3, #128	; 0x80
 8014c10:	d004      	beq.n	8014c1c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8014c12:	6839      	ldr	r1, [r7, #0]
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f000 fbcb 	bl	80153b0 <USBD_CtlError>
          break;
 8014c1a:	e091      	b.n	8014d40 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	da0b      	bge.n	8014c3c <USBD_StdEPReq+0x184>
 8014c24:	7bbb      	ldrb	r3, [r7, #14]
 8014c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	009b      	lsls	r3, r3, #2
 8014c2e:	4413      	add	r3, r2
 8014c30:	009b      	lsls	r3, r3, #2
 8014c32:	3310      	adds	r3, #16
 8014c34:	687a      	ldr	r2, [r7, #4]
 8014c36:	4413      	add	r3, r2
 8014c38:	3304      	adds	r3, #4
 8014c3a:	e00b      	b.n	8014c54 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014c3c:	7bbb      	ldrb	r3, [r7, #14]
 8014c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c42:	4613      	mov	r3, r2
 8014c44:	009b      	lsls	r3, r3, #2
 8014c46:	4413      	add	r3, r2
 8014c48:	009b      	lsls	r3, r3, #2
 8014c4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014c4e:	687a      	ldr	r2, [r7, #4]
 8014c50:	4413      	add	r3, r2
 8014c52:	3304      	adds	r3, #4
 8014c54:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	2200      	movs	r2, #0
 8014c5a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	2202      	movs	r2, #2
 8014c60:	4619      	mov	r1, r3
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f000 fc15 	bl	8015492 <USBD_CtlSendData>
        break;
 8014c68:	e06a      	b.n	8014d40 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8014c6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	da11      	bge.n	8014c96 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014c72:	7bbb      	ldrb	r3, [r7, #14]
 8014c74:	f003 020f 	and.w	r2, r3, #15
 8014c78:	6879      	ldr	r1, [r7, #4]
 8014c7a:	4613      	mov	r3, r2
 8014c7c:	009b      	lsls	r3, r3, #2
 8014c7e:	4413      	add	r3, r2
 8014c80:	009b      	lsls	r3, r3, #2
 8014c82:	440b      	add	r3, r1
 8014c84:	3324      	adds	r3, #36	; 0x24
 8014c86:	881b      	ldrh	r3, [r3, #0]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d117      	bne.n	8014cbc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8014c8c:	6839      	ldr	r1, [r7, #0]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f000 fb8e 	bl	80153b0 <USBD_CtlError>
            break;
 8014c94:	e054      	b.n	8014d40 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014c96:	7bbb      	ldrb	r3, [r7, #14]
 8014c98:	f003 020f 	and.w	r2, r3, #15
 8014c9c:	6879      	ldr	r1, [r7, #4]
 8014c9e:	4613      	mov	r3, r2
 8014ca0:	009b      	lsls	r3, r3, #2
 8014ca2:	4413      	add	r3, r2
 8014ca4:	009b      	lsls	r3, r3, #2
 8014ca6:	440b      	add	r3, r1
 8014ca8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014cac:	881b      	ldrh	r3, [r3, #0]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d104      	bne.n	8014cbc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8014cb2:	6839      	ldr	r1, [r7, #0]
 8014cb4:	6878      	ldr	r0, [r7, #4]
 8014cb6:	f000 fb7b 	bl	80153b0 <USBD_CtlError>
            break;
 8014cba:	e041      	b.n	8014d40 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	da0b      	bge.n	8014cdc <USBD_StdEPReq+0x224>
 8014cc4:	7bbb      	ldrb	r3, [r7, #14]
 8014cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014cca:	4613      	mov	r3, r2
 8014ccc:	009b      	lsls	r3, r3, #2
 8014cce:	4413      	add	r3, r2
 8014cd0:	009b      	lsls	r3, r3, #2
 8014cd2:	3310      	adds	r3, #16
 8014cd4:	687a      	ldr	r2, [r7, #4]
 8014cd6:	4413      	add	r3, r2
 8014cd8:	3304      	adds	r3, #4
 8014cda:	e00b      	b.n	8014cf4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014cdc:	7bbb      	ldrb	r3, [r7, #14]
 8014cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ce2:	4613      	mov	r3, r2
 8014ce4:	009b      	lsls	r3, r3, #2
 8014ce6:	4413      	add	r3, r2
 8014ce8:	009b      	lsls	r3, r3, #2
 8014cea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	4413      	add	r3, r2
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014cf6:	7bbb      	ldrb	r3, [r7, #14]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d002      	beq.n	8014d02 <USBD_StdEPReq+0x24a>
 8014cfc:	7bbb      	ldrb	r3, [r7, #14]
 8014cfe:	2b80      	cmp	r3, #128	; 0x80
 8014d00:	d103      	bne.n	8014d0a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	2200      	movs	r2, #0
 8014d06:	601a      	str	r2, [r3, #0]
 8014d08:	e00e      	b.n	8014d28 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014d0a:	7bbb      	ldrb	r3, [r7, #14]
 8014d0c:	4619      	mov	r1, r3
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f003 fb45 	bl	801839e <USBD_LL_IsStallEP>
 8014d14:	4603      	mov	r3, r0
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d003      	beq.n	8014d22 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	601a      	str	r2, [r3, #0]
 8014d20:	e002      	b.n	8014d28 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	2200      	movs	r2, #0
 8014d26:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	2202      	movs	r2, #2
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	6878      	ldr	r0, [r7, #4]
 8014d30:	f000 fbaf 	bl	8015492 <USBD_CtlSendData>
          break;
 8014d34:	e004      	b.n	8014d40 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8014d36:	6839      	ldr	r1, [r7, #0]
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f000 fb39 	bl	80153b0 <USBD_CtlError>
        break;
 8014d3e:	bf00      	nop
      }
      break;
 8014d40:	e004      	b.n	8014d4c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8014d42:	6839      	ldr	r1, [r7, #0]
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f000 fb33 	bl	80153b0 <USBD_CtlError>
      break;
 8014d4a:	bf00      	nop
    }
    break;
 8014d4c:	e004      	b.n	8014d58 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8014d4e:	6839      	ldr	r1, [r7, #0]
 8014d50:	6878      	ldr	r0, [r7, #4]
 8014d52:	f000 fb2d 	bl	80153b0 <USBD_CtlError>
    break;
 8014d56:	bf00      	nop
  }

  return ret;
 8014d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3710      	adds	r7, #16
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
	...

08014d64 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014d72:	2300      	movs	r3, #0
 8014d74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014d76:	2300      	movs	r3, #0
 8014d78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	885b      	ldrh	r3, [r3, #2]
 8014d7e:	0a1b      	lsrs	r3, r3, #8
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	3b01      	subs	r3, #1
 8014d84:	2b06      	cmp	r3, #6
 8014d86:	f200 8128 	bhi.w	8014fda <USBD_GetDescriptor+0x276>
 8014d8a:	a201      	add	r2, pc, #4	; (adr r2, 8014d90 <USBD_GetDescriptor+0x2c>)
 8014d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d90:	08014dad 	.word	0x08014dad
 8014d94:	08014dc5 	.word	0x08014dc5
 8014d98:	08014e05 	.word	0x08014e05
 8014d9c:	08014fdb 	.word	0x08014fdb
 8014da0:	08014fdb 	.word	0x08014fdb
 8014da4:	08014f7b 	.word	0x08014f7b
 8014da8:	08014fa7 	.word	0x08014fa7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	687a      	ldr	r2, [r7, #4]
 8014db6:	7c12      	ldrb	r2, [r2, #16]
 8014db8:	f107 0108 	add.w	r1, r7, #8
 8014dbc:	4610      	mov	r0, r2
 8014dbe:	4798      	blx	r3
 8014dc0:	60f8      	str	r0, [r7, #12]
    break;
 8014dc2:	e112      	b.n	8014fea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	7c1b      	ldrb	r3, [r3, #16]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d10d      	bne.n	8014de8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dd4:	f107 0208 	add.w	r2, r7, #8
 8014dd8:	4610      	mov	r0, r2
 8014dda:	4798      	blx	r3
 8014ddc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	3301      	adds	r3, #1
 8014de2:	2202      	movs	r2, #2
 8014de4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8014de6:	e100      	b.n	8014fea <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014df0:	f107 0208 	add.w	r2, r7, #8
 8014df4:	4610      	mov	r0, r2
 8014df6:	4798      	blx	r3
 8014df8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	2202      	movs	r2, #2
 8014e00:	701a      	strb	r2, [r3, #0]
    break;
 8014e02:	e0f2      	b.n	8014fea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	885b      	ldrh	r3, [r3, #2]
 8014e08:	b2db      	uxtb	r3, r3
 8014e0a:	2b05      	cmp	r3, #5
 8014e0c:	f200 80ac 	bhi.w	8014f68 <USBD_GetDescriptor+0x204>
 8014e10:	a201      	add	r2, pc, #4	; (adr r2, 8014e18 <USBD_GetDescriptor+0xb4>)
 8014e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e16:	bf00      	nop
 8014e18:	08014e31 	.word	0x08014e31
 8014e1c:	08014e65 	.word	0x08014e65
 8014e20:	08014e99 	.word	0x08014e99
 8014e24:	08014ecd 	.word	0x08014ecd
 8014e28:	08014f01 	.word	0x08014f01
 8014e2c:	08014f35 	.word	0x08014f35
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e36:	685b      	ldr	r3, [r3, #4]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d00b      	beq.n	8014e54 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e42:	685b      	ldr	r3, [r3, #4]
 8014e44:	687a      	ldr	r2, [r7, #4]
 8014e46:	7c12      	ldrb	r2, [r2, #16]
 8014e48:	f107 0108 	add.w	r1, r7, #8
 8014e4c:	4610      	mov	r0, r2
 8014e4e:	4798      	blx	r3
 8014e50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014e52:	e091      	b.n	8014f78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014e54:	6839      	ldr	r1, [r7, #0]
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f000 faaa 	bl	80153b0 <USBD_CtlError>
        err++;
 8014e5c:	7afb      	ldrb	r3, [r7, #11]
 8014e5e:	3301      	adds	r3, #1
 8014e60:	72fb      	strb	r3, [r7, #11]
      break;
 8014e62:	e089      	b.n	8014f78 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e6a:	689b      	ldr	r3, [r3, #8]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d00b      	beq.n	8014e88 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e76:	689b      	ldr	r3, [r3, #8]
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	7c12      	ldrb	r2, [r2, #16]
 8014e7c:	f107 0108 	add.w	r1, r7, #8
 8014e80:	4610      	mov	r0, r2
 8014e82:	4798      	blx	r3
 8014e84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014e86:	e077      	b.n	8014f78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014e88:	6839      	ldr	r1, [r7, #0]
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f000 fa90 	bl	80153b0 <USBD_CtlError>
        err++;
 8014e90:	7afb      	ldrb	r3, [r7, #11]
 8014e92:	3301      	adds	r3, #1
 8014e94:	72fb      	strb	r3, [r7, #11]
      break;
 8014e96:	e06f      	b.n	8014f78 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e9e:	68db      	ldr	r3, [r3, #12]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d00b      	beq.n	8014ebc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eaa:	68db      	ldr	r3, [r3, #12]
 8014eac:	687a      	ldr	r2, [r7, #4]
 8014eae:	7c12      	ldrb	r2, [r2, #16]
 8014eb0:	f107 0108 	add.w	r1, r7, #8
 8014eb4:	4610      	mov	r0, r2
 8014eb6:	4798      	blx	r3
 8014eb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014eba:	e05d      	b.n	8014f78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014ebc:	6839      	ldr	r1, [r7, #0]
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f000 fa76 	bl	80153b0 <USBD_CtlError>
        err++;
 8014ec4:	7afb      	ldrb	r3, [r7, #11]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	72fb      	strb	r3, [r7, #11]
      break;
 8014eca:	e055      	b.n	8014f78 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ed2:	691b      	ldr	r3, [r3, #16]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d00b      	beq.n	8014ef0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ede:	691b      	ldr	r3, [r3, #16]
 8014ee0:	687a      	ldr	r2, [r7, #4]
 8014ee2:	7c12      	ldrb	r2, [r2, #16]
 8014ee4:	f107 0108 	add.w	r1, r7, #8
 8014ee8:	4610      	mov	r0, r2
 8014eea:	4798      	blx	r3
 8014eec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014eee:	e043      	b.n	8014f78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014ef0:	6839      	ldr	r1, [r7, #0]
 8014ef2:	6878      	ldr	r0, [r7, #4]
 8014ef4:	f000 fa5c 	bl	80153b0 <USBD_CtlError>
        err++;
 8014ef8:	7afb      	ldrb	r3, [r7, #11]
 8014efa:	3301      	adds	r3, #1
 8014efc:	72fb      	strb	r3, [r7, #11]
      break;
 8014efe:	e03b      	b.n	8014f78 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f06:	695b      	ldr	r3, [r3, #20]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d00b      	beq.n	8014f24 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f12:	695b      	ldr	r3, [r3, #20]
 8014f14:	687a      	ldr	r2, [r7, #4]
 8014f16:	7c12      	ldrb	r2, [r2, #16]
 8014f18:	f107 0108 	add.w	r1, r7, #8
 8014f1c:	4610      	mov	r0, r2
 8014f1e:	4798      	blx	r3
 8014f20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014f22:	e029      	b.n	8014f78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014f24:	6839      	ldr	r1, [r7, #0]
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f000 fa42 	bl	80153b0 <USBD_CtlError>
        err++;
 8014f2c:	7afb      	ldrb	r3, [r7, #11]
 8014f2e:	3301      	adds	r3, #1
 8014f30:	72fb      	strb	r3, [r7, #11]
      break;
 8014f32:	e021      	b.n	8014f78 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f3a:	699b      	ldr	r3, [r3, #24]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d00b      	beq.n	8014f58 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f46:	699b      	ldr	r3, [r3, #24]
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	7c12      	ldrb	r2, [r2, #16]
 8014f4c:	f107 0108 	add.w	r1, r7, #8
 8014f50:	4610      	mov	r0, r2
 8014f52:	4798      	blx	r3
 8014f54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014f56:	e00f      	b.n	8014f78 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014f58:	6839      	ldr	r1, [r7, #0]
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f000 fa28 	bl	80153b0 <USBD_CtlError>
        err++;
 8014f60:	7afb      	ldrb	r3, [r7, #11]
 8014f62:	3301      	adds	r3, #1
 8014f64:	72fb      	strb	r3, [r7, #11]
      break;
 8014f66:	e007      	b.n	8014f78 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8014f68:	6839      	ldr	r1, [r7, #0]
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	f000 fa20 	bl	80153b0 <USBD_CtlError>
      err++;
 8014f70:	7afb      	ldrb	r3, [r7, #11]
 8014f72:	3301      	adds	r3, #1
 8014f74:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8014f76:	bf00      	nop
    }
    break;
 8014f78:	e037      	b.n	8014fea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	7c1b      	ldrb	r3, [r3, #16]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d109      	bne.n	8014f96 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f8a:	f107 0208 	add.w	r2, r7, #8
 8014f8e:	4610      	mov	r0, r2
 8014f90:	4798      	blx	r3
 8014f92:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014f94:	e029      	b.n	8014fea <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8014f96:	6839      	ldr	r1, [r7, #0]
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f000 fa09 	bl	80153b0 <USBD_CtlError>
      err++;
 8014f9e:	7afb      	ldrb	r3, [r7, #11]
 8014fa0:	3301      	adds	r3, #1
 8014fa2:	72fb      	strb	r3, [r7, #11]
    break;
 8014fa4:	e021      	b.n	8014fea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	7c1b      	ldrb	r3, [r3, #16]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d10d      	bne.n	8014fca <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fb6:	f107 0208 	add.w	r2, r7, #8
 8014fba:	4610      	mov	r0, r2
 8014fbc:	4798      	blx	r3
 8014fbe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	3301      	adds	r3, #1
 8014fc4:	2207      	movs	r2, #7
 8014fc6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014fc8:	e00f      	b.n	8014fea <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8014fca:	6839      	ldr	r1, [r7, #0]
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f000 f9ef 	bl	80153b0 <USBD_CtlError>
      err++;
 8014fd2:	7afb      	ldrb	r3, [r7, #11]
 8014fd4:	3301      	adds	r3, #1
 8014fd6:	72fb      	strb	r3, [r7, #11]
    break;
 8014fd8:	e007      	b.n	8014fea <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8014fda:	6839      	ldr	r1, [r7, #0]
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f000 f9e7 	bl	80153b0 <USBD_CtlError>
    err++;
 8014fe2:	7afb      	ldrb	r3, [r7, #11]
 8014fe4:	3301      	adds	r3, #1
 8014fe6:	72fb      	strb	r3, [r7, #11]
    break;
 8014fe8:	bf00      	nop
  }

  if (err != 0U)
 8014fea:	7afb      	ldrb	r3, [r7, #11]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d11e      	bne.n	801502e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	88db      	ldrh	r3, [r3, #6]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d016      	beq.n	8015026 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8014ff8:	893b      	ldrh	r3, [r7, #8]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d00e      	beq.n	801501c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	88da      	ldrh	r2, [r3, #6]
 8015002:	893b      	ldrh	r3, [r7, #8]
 8015004:	4293      	cmp	r3, r2
 8015006:	bf28      	it	cs
 8015008:	4613      	movcs	r3, r2
 801500a:	b29b      	uxth	r3, r3
 801500c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801500e:	893b      	ldrh	r3, [r7, #8]
 8015010:	461a      	mov	r2, r3
 8015012:	68f9      	ldr	r1, [r7, #12]
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	f000 fa3c 	bl	8015492 <USBD_CtlSendData>
 801501a:	e009      	b.n	8015030 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 801501c:	6839      	ldr	r1, [r7, #0]
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	f000 f9c6 	bl	80153b0 <USBD_CtlError>
 8015024:	e004      	b.n	8015030 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f000 fa70 	bl	801550c <USBD_CtlSendStatus>
 801502c:	e000      	b.n	8015030 <USBD_GetDescriptor+0x2cc>
    return;
 801502e:	bf00      	nop
    }
  }
}
 8015030:	3710      	adds	r7, #16
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop

08015038 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b084      	sub	sp, #16
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
 8015040:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	889b      	ldrh	r3, [r3, #4]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d130      	bne.n	80150ac <USBD_SetAddress+0x74>
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	88db      	ldrh	r3, [r3, #6]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d12c      	bne.n	80150ac <USBD_SetAddress+0x74>
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	885b      	ldrh	r3, [r3, #2]
 8015056:	2b7f      	cmp	r3, #127	; 0x7f
 8015058:	d828      	bhi.n	80150ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	885b      	ldrh	r3, [r3, #2]
 801505e:	b2db      	uxtb	r3, r3
 8015060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015064:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801506c:	2b03      	cmp	r3, #3
 801506e:	d104      	bne.n	801507a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8015070:	6839      	ldr	r1, [r7, #0]
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f000 f99c 	bl	80153b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015078:	e01c      	b.n	80150b4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	7bfa      	ldrb	r2, [r7, #15]
 801507e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015082:	7bfb      	ldrb	r3, [r7, #15]
 8015084:	4619      	mov	r1, r3
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f003 f9b5 	bl	80183f6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	f000 fa3d 	bl	801550c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015092:	7bfb      	ldrb	r3, [r7, #15]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d004      	beq.n	80150a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2202      	movs	r2, #2
 801509c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150a0:	e008      	b.n	80150b4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2201      	movs	r2, #1
 80150a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150aa:	e003      	b.n	80150b4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80150ac:	6839      	ldr	r1, [r7, #0]
 80150ae:	6878      	ldr	r0, [r7, #4]
 80150b0:	f000 f97e 	bl	80153b0 <USBD_CtlError>
  }
}
 80150b4:	bf00      	nop
 80150b6:	3710      	adds	r7, #16
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}

080150bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b084      	sub	sp, #16
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80150c6:	2300      	movs	r3, #0
 80150c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	885b      	ldrh	r3, [r3, #2]
 80150ce:	b2da      	uxtb	r2, r3
 80150d0:	4b4b      	ldr	r3, [pc, #300]	; (8015200 <USBD_SetConfig+0x144>)
 80150d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80150d4:	4b4a      	ldr	r3, [pc, #296]	; (8015200 <USBD_SetConfig+0x144>)
 80150d6:	781b      	ldrb	r3, [r3, #0]
 80150d8:	2b01      	cmp	r3, #1
 80150da:	d905      	bls.n	80150e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80150dc:	6839      	ldr	r1, [r7, #0]
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	f000 f966 	bl	80153b0 <USBD_CtlError>
    return USBD_FAIL;
 80150e4:	2303      	movs	r3, #3
 80150e6:	e087      	b.n	80151f8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150ee:	2b02      	cmp	r3, #2
 80150f0:	d002      	beq.n	80150f8 <USBD_SetConfig+0x3c>
 80150f2:	2b03      	cmp	r3, #3
 80150f4:	d025      	beq.n	8015142 <USBD_SetConfig+0x86>
 80150f6:	e071      	b.n	80151dc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80150f8:	4b41      	ldr	r3, [pc, #260]	; (8015200 <USBD_SetConfig+0x144>)
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d01c      	beq.n	801513a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8015100:	4b3f      	ldr	r3, [pc, #252]	; (8015200 <USBD_SetConfig+0x144>)
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	461a      	mov	r2, r3
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801510a:	4b3d      	ldr	r3, [pc, #244]	; (8015200 <USBD_SetConfig+0x144>)
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	4619      	mov	r1, r3
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f7ff f9a8 	bl	8014466 <USBD_SetClassConfig>
 8015116:	4603      	mov	r3, r0
 8015118:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801511a:	7bfb      	ldrb	r3, [r7, #15]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d004      	beq.n	801512a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8015120:	6839      	ldr	r1, [r7, #0]
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f000 f944 	bl	80153b0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8015128:	e065      	b.n	80151f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f000 f9ee 	bl	801550c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2203      	movs	r2, #3
 8015134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8015138:	e05d      	b.n	80151f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801513a:	6878      	ldr	r0, [r7, #4]
 801513c:	f000 f9e6 	bl	801550c <USBD_CtlSendStatus>
    break;
 8015140:	e059      	b.n	80151f6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8015142:	4b2f      	ldr	r3, [pc, #188]	; (8015200 <USBD_SetConfig+0x144>)
 8015144:	781b      	ldrb	r3, [r3, #0]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d112      	bne.n	8015170 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2202      	movs	r2, #2
 801514e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8015152:	4b2b      	ldr	r3, [pc, #172]	; (8015200 <USBD_SetConfig+0x144>)
 8015154:	781b      	ldrb	r3, [r3, #0]
 8015156:	461a      	mov	r2, r3
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801515c:	4b28      	ldr	r3, [pc, #160]	; (8015200 <USBD_SetConfig+0x144>)
 801515e:	781b      	ldrb	r3, [r3, #0]
 8015160:	4619      	mov	r1, r3
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	f7ff f99b 	bl	801449e <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f000 f9cf 	bl	801550c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801516e:	e042      	b.n	80151f6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8015170:	4b23      	ldr	r3, [pc, #140]	; (8015200 <USBD_SetConfig+0x144>)
 8015172:	781b      	ldrb	r3, [r3, #0]
 8015174:	461a      	mov	r2, r3
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	685b      	ldr	r3, [r3, #4]
 801517a:	429a      	cmp	r2, r3
 801517c:	d02a      	beq.n	80151d4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	685b      	ldr	r3, [r3, #4]
 8015182:	b2db      	uxtb	r3, r3
 8015184:	4619      	mov	r1, r3
 8015186:	6878      	ldr	r0, [r7, #4]
 8015188:	f7ff f989 	bl	801449e <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 801518c:	4b1c      	ldr	r3, [pc, #112]	; (8015200 <USBD_SetConfig+0x144>)
 801518e:	781b      	ldrb	r3, [r3, #0]
 8015190:	461a      	mov	r2, r3
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015196:	4b1a      	ldr	r3, [pc, #104]	; (8015200 <USBD_SetConfig+0x144>)
 8015198:	781b      	ldrb	r3, [r3, #0]
 801519a:	4619      	mov	r1, r3
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f7ff f962 	bl	8014466 <USBD_SetClassConfig>
 80151a2:	4603      	mov	r3, r0
 80151a4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80151a6:	7bfb      	ldrb	r3, [r7, #15]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d00f      	beq.n	80151cc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80151ac:	6839      	ldr	r1, [r7, #0]
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	f000 f8fe 	bl	80153b0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	685b      	ldr	r3, [r3, #4]
 80151b8:	b2db      	uxtb	r3, r3
 80151ba:	4619      	mov	r1, r3
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f7ff f96e 	bl	801449e <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	2202      	movs	r2, #2
 80151c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80151ca:	e014      	b.n	80151f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f000 f99d 	bl	801550c <USBD_CtlSendStatus>
    break;
 80151d2:	e010      	b.n	80151f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80151d4:	6878      	ldr	r0, [r7, #4]
 80151d6:	f000 f999 	bl	801550c <USBD_CtlSendStatus>
    break;
 80151da:	e00c      	b.n	80151f6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80151dc:	6839      	ldr	r1, [r7, #0]
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	f000 f8e6 	bl	80153b0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80151e4:	4b06      	ldr	r3, [pc, #24]	; (8015200 <USBD_SetConfig+0x144>)
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	4619      	mov	r1, r3
 80151ea:	6878      	ldr	r0, [r7, #4]
 80151ec:	f7ff f957 	bl	801449e <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80151f0:	2303      	movs	r3, #3
 80151f2:	73fb      	strb	r3, [r7, #15]
    break;
 80151f4:	bf00      	nop
  }

  return ret;
 80151f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	3710      	adds	r7, #16
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}
 8015200:	24000b4c 	.word	0x24000b4c

08015204 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	88db      	ldrh	r3, [r3, #6]
 8015212:	2b01      	cmp	r3, #1
 8015214:	d004      	beq.n	8015220 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015216:	6839      	ldr	r1, [r7, #0]
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f000 f8c9 	bl	80153b0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801521e:	e021      	b.n	8015264 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015226:	2b01      	cmp	r3, #1
 8015228:	db17      	blt.n	801525a <USBD_GetConfig+0x56>
 801522a:	2b02      	cmp	r3, #2
 801522c:	dd02      	ble.n	8015234 <USBD_GetConfig+0x30>
 801522e:	2b03      	cmp	r3, #3
 8015230:	d00b      	beq.n	801524a <USBD_GetConfig+0x46>
 8015232:	e012      	b.n	801525a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	2200      	movs	r2, #0
 8015238:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	3308      	adds	r3, #8
 801523e:	2201      	movs	r2, #1
 8015240:	4619      	mov	r1, r3
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	f000 f925 	bl	8015492 <USBD_CtlSendData>
      break;
 8015248:	e00c      	b.n	8015264 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	3304      	adds	r3, #4
 801524e:	2201      	movs	r2, #1
 8015250:	4619      	mov	r1, r3
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f000 f91d 	bl	8015492 <USBD_CtlSendData>
      break;
 8015258:	e004      	b.n	8015264 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801525a:	6839      	ldr	r1, [r7, #0]
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	f000 f8a7 	bl	80153b0 <USBD_CtlError>
      break;
 8015262:	bf00      	nop
}
 8015264:	bf00      	nop
 8015266:	3708      	adds	r7, #8
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}

0801526c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801527c:	3b01      	subs	r3, #1
 801527e:	2b02      	cmp	r3, #2
 8015280:	d81e      	bhi.n	80152c0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8015282:	683b      	ldr	r3, [r7, #0]
 8015284:	88db      	ldrh	r3, [r3, #6]
 8015286:	2b02      	cmp	r3, #2
 8015288:	d004      	beq.n	8015294 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801528a:	6839      	ldr	r1, [r7, #0]
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f000 f88f 	bl	80153b0 <USBD_CtlError>
      break;
 8015292:	e01a      	b.n	80152ca <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2201      	movs	r2, #1
 8015298:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d005      	beq.n	80152b0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	68db      	ldr	r3, [r3, #12]
 80152a8:	f043 0202 	orr.w	r2, r3, #2
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	330c      	adds	r3, #12
 80152b4:	2202      	movs	r2, #2
 80152b6:	4619      	mov	r1, r3
 80152b8:	6878      	ldr	r0, [r7, #4]
 80152ba:	f000 f8ea 	bl	8015492 <USBD_CtlSendData>
    break;
 80152be:	e004      	b.n	80152ca <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80152c0:	6839      	ldr	r1, [r7, #0]
 80152c2:	6878      	ldr	r0, [r7, #4]
 80152c4:	f000 f874 	bl	80153b0 <USBD_CtlError>
    break;
 80152c8:	bf00      	nop
  }
}
 80152ca:	bf00      	nop
 80152cc:	3708      	adds	r7, #8
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}

080152d2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152d2:	b580      	push	{r7, lr}
 80152d4:	b082      	sub	sp, #8
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	6078      	str	r0, [r7, #4]
 80152da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	885b      	ldrh	r3, [r3, #2]
 80152e0:	2b01      	cmp	r3, #1
 80152e2:	d106      	bne.n	80152f2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2201      	movs	r2, #1
 80152e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f000 f90d 	bl	801550c <USBD_CtlSendStatus>
  }
}
 80152f2:	bf00      	nop
 80152f4:	3708      	adds	r7, #8
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}

080152fa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152fa:	b580      	push	{r7, lr}
 80152fc:	b082      	sub	sp, #8
 80152fe:	af00      	add	r7, sp, #0
 8015300:	6078      	str	r0, [r7, #4]
 8015302:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801530a:	3b01      	subs	r3, #1
 801530c:	2b02      	cmp	r3, #2
 801530e:	d80b      	bhi.n	8015328 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	885b      	ldrh	r3, [r3, #2]
 8015314:	2b01      	cmp	r3, #1
 8015316:	d10c      	bne.n	8015332 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2200      	movs	r2, #0
 801531c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f000 f8f3 	bl	801550c <USBD_CtlSendStatus>
      }
      break;
 8015326:	e004      	b.n	8015332 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8015328:	6839      	ldr	r1, [r7, #0]
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	f000 f840 	bl	80153b0 <USBD_CtlError>
      break;
 8015330:	e000      	b.n	8015334 <USBD_ClrFeature+0x3a>
      break;
 8015332:	bf00      	nop
  }
}
 8015334:	bf00      	nop
 8015336:	3708      	adds	r7, #8
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}

0801533c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b084      	sub	sp, #16
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
 8015344:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015346:	683b      	ldr	r3, [r7, #0]
 8015348:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	781a      	ldrb	r2, [r3, #0]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	3301      	adds	r3, #1
 8015356:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	781a      	ldrb	r2, [r3, #0]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	3301      	adds	r3, #1
 8015364:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015366:	68f8      	ldr	r0, [r7, #12]
 8015368:	f7ff fad4 	bl	8014914 <SWAPBYTE>
 801536c:	4603      	mov	r3, r0
 801536e:	461a      	mov	r2, r3
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	3301      	adds	r3, #1
 8015378:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	3301      	adds	r3, #1
 801537e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015380:	68f8      	ldr	r0, [r7, #12]
 8015382:	f7ff fac7 	bl	8014914 <SWAPBYTE>
 8015386:	4603      	mov	r3, r0
 8015388:	461a      	mov	r2, r3
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	3301      	adds	r3, #1
 8015392:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	3301      	adds	r3, #1
 8015398:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801539a:	68f8      	ldr	r0, [r7, #12]
 801539c:	f7ff faba 	bl	8014914 <SWAPBYTE>
 80153a0:	4603      	mov	r3, r0
 80153a2:	461a      	mov	r2, r3
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	80da      	strh	r2, [r3, #6]
}
 80153a8:	bf00      	nop
 80153aa:	3710      	adds	r7, #16
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}

080153b0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80153ba:	2180      	movs	r1, #128	; 0x80
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f002 ffb0 	bl	8018322 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80153c2:	2100      	movs	r1, #0
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f002 ffac 	bl	8018322 <USBD_LL_StallEP>
}
 80153ca:	bf00      	nop
 80153cc:	3708      	adds	r7, #8
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}

080153d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80153d2:	b580      	push	{r7, lr}
 80153d4:	b086      	sub	sp, #24
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	60f8      	str	r0, [r7, #12]
 80153da:	60b9      	str	r1, [r7, #8]
 80153dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80153de:	2300      	movs	r3, #0
 80153e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d036      	beq.n	8015456 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80153ec:	6938      	ldr	r0, [r7, #16]
 80153ee:	f000 f836 	bl	801545e <USBD_GetLen>
 80153f2:	4603      	mov	r3, r0
 80153f4:	3301      	adds	r3, #1
 80153f6:	b29b      	uxth	r3, r3
 80153f8:	005b      	lsls	r3, r3, #1
 80153fa:	b29a      	uxth	r2, r3
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015400:	7dfb      	ldrb	r3, [r7, #23]
 8015402:	68ba      	ldr	r2, [r7, #8]
 8015404:	4413      	add	r3, r2
 8015406:	687a      	ldr	r2, [r7, #4]
 8015408:	7812      	ldrb	r2, [r2, #0]
 801540a:	701a      	strb	r2, [r3, #0]
  idx++;
 801540c:	7dfb      	ldrb	r3, [r7, #23]
 801540e:	3301      	adds	r3, #1
 8015410:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015412:	7dfb      	ldrb	r3, [r7, #23]
 8015414:	68ba      	ldr	r2, [r7, #8]
 8015416:	4413      	add	r3, r2
 8015418:	2203      	movs	r2, #3
 801541a:	701a      	strb	r2, [r3, #0]
  idx++;
 801541c:	7dfb      	ldrb	r3, [r7, #23]
 801541e:	3301      	adds	r3, #1
 8015420:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015422:	e013      	b.n	801544c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015424:	7dfb      	ldrb	r3, [r7, #23]
 8015426:	68ba      	ldr	r2, [r7, #8]
 8015428:	4413      	add	r3, r2
 801542a:	693a      	ldr	r2, [r7, #16]
 801542c:	7812      	ldrb	r2, [r2, #0]
 801542e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	3301      	adds	r3, #1
 8015434:	613b      	str	r3, [r7, #16]
    idx++;
 8015436:	7dfb      	ldrb	r3, [r7, #23]
 8015438:	3301      	adds	r3, #1
 801543a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801543c:	7dfb      	ldrb	r3, [r7, #23]
 801543e:	68ba      	ldr	r2, [r7, #8]
 8015440:	4413      	add	r3, r2
 8015442:	2200      	movs	r2, #0
 8015444:	701a      	strb	r2, [r3, #0]
    idx++;
 8015446:	7dfb      	ldrb	r3, [r7, #23]
 8015448:	3301      	adds	r3, #1
 801544a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801544c:	693b      	ldr	r3, [r7, #16]
 801544e:	781b      	ldrb	r3, [r3, #0]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d1e7      	bne.n	8015424 <USBD_GetString+0x52>
 8015454:	e000      	b.n	8015458 <USBD_GetString+0x86>
    return;
 8015456:	bf00      	nop
  }
}
 8015458:	3718      	adds	r7, #24
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}

0801545e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801545e:	b480      	push	{r7}
 8015460:	b085      	sub	sp, #20
 8015462:	af00      	add	r7, sp, #0
 8015464:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015466:	2300      	movs	r3, #0
 8015468:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801546e:	e005      	b.n	801547c <USBD_GetLen+0x1e>
  {
    len++;
 8015470:	7bfb      	ldrb	r3, [r7, #15]
 8015472:	3301      	adds	r3, #1
 8015474:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	3301      	adds	r3, #1
 801547a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d1f5      	bne.n	8015470 <USBD_GetLen+0x12>
  }

  return len;
 8015484:	7bfb      	ldrb	r3, [r7, #15]
}
 8015486:	4618      	mov	r0, r3
 8015488:	3714      	adds	r7, #20
 801548a:	46bd      	mov	sp, r7
 801548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015490:	4770      	bx	lr

08015492 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015492:	b580      	push	{r7, lr}
 8015494:	b084      	sub	sp, #16
 8015496:	af00      	add	r7, sp, #0
 8015498:	60f8      	str	r0, [r7, #12]
 801549a:	60b9      	str	r1, [r7, #8]
 801549c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	2202      	movs	r2, #2
 80154a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	687a      	ldr	r2, [r7, #4]
 80154aa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	687a      	ldr	r2, [r7, #4]
 80154b0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	68ba      	ldr	r2, [r7, #8]
 80154b6:	2100      	movs	r1, #0
 80154b8:	68f8      	ldr	r0, [r7, #12]
 80154ba:	f002 ffbb 	bl	8018434 <USBD_LL_Transmit>

  return USBD_OK;
 80154be:	2300      	movs	r3, #0
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	3710      	adds	r7, #16
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}

080154c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b084      	sub	sp, #16
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	68ba      	ldr	r2, [r7, #8]
 80154d8:	2100      	movs	r1, #0
 80154da:	68f8      	ldr	r0, [r7, #12]
 80154dc:	f002 ffaa 	bl	8018434 <USBD_LL_Transmit>

  return USBD_OK;
 80154e0:	2300      	movs	r3, #0
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3710      	adds	r7, #16
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}

080154ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80154ea:	b580      	push	{r7, lr}
 80154ec:	b084      	sub	sp, #16
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	60f8      	str	r0, [r7, #12]
 80154f2:	60b9      	str	r1, [r7, #8]
 80154f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	68ba      	ldr	r2, [r7, #8]
 80154fa:	2100      	movs	r1, #0
 80154fc:	68f8      	ldr	r0, [r7, #12]
 80154fe:	f002 ffba 	bl	8018476 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015502:	2300      	movs	r3, #0
}
 8015504:	4618      	mov	r0, r3
 8015506:	3710      	adds	r7, #16
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}

0801550c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b082      	sub	sp, #8
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2204      	movs	r2, #4
 8015518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801551c:	2300      	movs	r3, #0
 801551e:	2200      	movs	r2, #0
 8015520:	2100      	movs	r1, #0
 8015522:	6878      	ldr	r0, [r7, #4]
 8015524:	f002 ff86 	bl	8018434 <USBD_LL_Transmit>

  return USBD_OK;
 8015528:	2300      	movs	r3, #0
}
 801552a:	4618      	mov	r0, r3
 801552c:	3708      	adds	r7, #8
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}

08015532 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015532:	b580      	push	{r7, lr}
 8015534:	b082      	sub	sp, #8
 8015536:	af00      	add	r7, sp, #0
 8015538:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2205      	movs	r2, #5
 801553e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015542:	2300      	movs	r3, #0
 8015544:	2200      	movs	r2, #0
 8015546:	2100      	movs	r1, #0
 8015548:	6878      	ldr	r0, [r7, #4]
 801554a:	f002 ff94 	bl	8018476 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801554e:	2300      	movs	r3, #0
}
 8015550:	4618      	mov	r0, r3
 8015552:	3708      	adds	r7, #8
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}

08015558 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	af00      	add	r7, sp, #0
 801555e:	4603      	mov	r3, r0
 8015560:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8015562:	79fb      	ldrb	r3, [r7, #7]
 8015564:	4a08      	ldr	r2, [pc, #32]	; (8015588 <disk_status+0x30>)
 8015566:	009b      	lsls	r3, r3, #2
 8015568:	4413      	add	r3, r2
 801556a:	685b      	ldr	r3, [r3, #4]
 801556c:	685b      	ldr	r3, [r3, #4]
 801556e:	79fa      	ldrb	r2, [r7, #7]
 8015570:	4905      	ldr	r1, [pc, #20]	; (8015588 <disk_status+0x30>)
 8015572:	440a      	add	r2, r1
 8015574:	7a12      	ldrb	r2, [r2, #8]
 8015576:	4610      	mov	r0, r2
 8015578:	4798      	blx	r3
 801557a:	4603      	mov	r3, r0
 801557c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801557e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015580:	4618      	mov	r0, r3
 8015582:	3710      	adds	r7, #16
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}
 8015588:	24000b78 	.word	0x24000b78

0801558c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b084      	sub	sp, #16
 8015590:	af00      	add	r7, sp, #0
 8015592:	4603      	mov	r3, r0
 8015594:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8015596:	2300      	movs	r3, #0
 8015598:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801559a:	79fb      	ldrb	r3, [r7, #7]
 801559c:	4a0d      	ldr	r2, [pc, #52]	; (80155d4 <disk_initialize+0x48>)
 801559e:	5cd3      	ldrb	r3, [r2, r3]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d111      	bne.n	80155c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80155a4:	79fb      	ldrb	r3, [r7, #7]
 80155a6:	4a0b      	ldr	r2, [pc, #44]	; (80155d4 <disk_initialize+0x48>)
 80155a8:	2101      	movs	r1, #1
 80155aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80155ac:	79fb      	ldrb	r3, [r7, #7]
 80155ae:	4a09      	ldr	r2, [pc, #36]	; (80155d4 <disk_initialize+0x48>)
 80155b0:	009b      	lsls	r3, r3, #2
 80155b2:	4413      	add	r3, r2
 80155b4:	685b      	ldr	r3, [r3, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	79fa      	ldrb	r2, [r7, #7]
 80155ba:	4906      	ldr	r1, [pc, #24]	; (80155d4 <disk_initialize+0x48>)
 80155bc:	440a      	add	r2, r1
 80155be:	7a12      	ldrb	r2, [r2, #8]
 80155c0:	4610      	mov	r0, r2
 80155c2:	4798      	blx	r3
 80155c4:	4603      	mov	r3, r0
 80155c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80155c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80155ca:	4618      	mov	r0, r3
 80155cc:	3710      	adds	r7, #16
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}
 80155d2:	bf00      	nop
 80155d4:	24000b78 	.word	0x24000b78

080155d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80155d8:	b590      	push	{r4, r7, lr}
 80155da:	b087      	sub	sp, #28
 80155dc:	af00      	add	r7, sp, #0
 80155de:	60b9      	str	r1, [r7, #8]
 80155e0:	607a      	str	r2, [r7, #4]
 80155e2:	603b      	str	r3, [r7, #0]
 80155e4:	4603      	mov	r3, r0
 80155e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80155e8:	7bfb      	ldrb	r3, [r7, #15]
 80155ea:	4a0a      	ldr	r2, [pc, #40]	; (8015614 <disk_read+0x3c>)
 80155ec:	009b      	lsls	r3, r3, #2
 80155ee:	4413      	add	r3, r2
 80155f0:	685b      	ldr	r3, [r3, #4]
 80155f2:	689c      	ldr	r4, [r3, #8]
 80155f4:	7bfb      	ldrb	r3, [r7, #15]
 80155f6:	4a07      	ldr	r2, [pc, #28]	; (8015614 <disk_read+0x3c>)
 80155f8:	4413      	add	r3, r2
 80155fa:	7a18      	ldrb	r0, [r3, #8]
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	687a      	ldr	r2, [r7, #4]
 8015600:	68b9      	ldr	r1, [r7, #8]
 8015602:	47a0      	blx	r4
 8015604:	4603      	mov	r3, r0
 8015606:	75fb      	strb	r3, [r7, #23]
  return res;
 8015608:	7dfb      	ldrb	r3, [r7, #23]
}
 801560a:	4618      	mov	r0, r3
 801560c:	371c      	adds	r7, #28
 801560e:	46bd      	mov	sp, r7
 8015610:	bd90      	pop	{r4, r7, pc}
 8015612:	bf00      	nop
 8015614:	24000b78 	.word	0x24000b78

08015618 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015618:	b590      	push	{r4, r7, lr}
 801561a:	b087      	sub	sp, #28
 801561c:	af00      	add	r7, sp, #0
 801561e:	60b9      	str	r1, [r7, #8]
 8015620:	607a      	str	r2, [r7, #4]
 8015622:	603b      	str	r3, [r7, #0]
 8015624:	4603      	mov	r3, r0
 8015626:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015628:	7bfb      	ldrb	r3, [r7, #15]
 801562a:	4a0a      	ldr	r2, [pc, #40]	; (8015654 <disk_write+0x3c>)
 801562c:	009b      	lsls	r3, r3, #2
 801562e:	4413      	add	r3, r2
 8015630:	685b      	ldr	r3, [r3, #4]
 8015632:	68dc      	ldr	r4, [r3, #12]
 8015634:	7bfb      	ldrb	r3, [r7, #15]
 8015636:	4a07      	ldr	r2, [pc, #28]	; (8015654 <disk_write+0x3c>)
 8015638:	4413      	add	r3, r2
 801563a:	7a18      	ldrb	r0, [r3, #8]
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	687a      	ldr	r2, [r7, #4]
 8015640:	68b9      	ldr	r1, [r7, #8]
 8015642:	47a0      	blx	r4
 8015644:	4603      	mov	r3, r0
 8015646:	75fb      	strb	r3, [r7, #23]
  return res;
 8015648:	7dfb      	ldrb	r3, [r7, #23]
}
 801564a:	4618      	mov	r0, r3
 801564c:	371c      	adds	r7, #28
 801564e:	46bd      	mov	sp, r7
 8015650:	bd90      	pop	{r4, r7, pc}
 8015652:	bf00      	nop
 8015654:	24000b78 	.word	0x24000b78

08015658 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b084      	sub	sp, #16
 801565c:	af00      	add	r7, sp, #0
 801565e:	4603      	mov	r3, r0
 8015660:	603a      	str	r2, [r7, #0]
 8015662:	71fb      	strb	r3, [r7, #7]
 8015664:	460b      	mov	r3, r1
 8015666:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015668:	79fb      	ldrb	r3, [r7, #7]
 801566a:	4a09      	ldr	r2, [pc, #36]	; (8015690 <disk_ioctl+0x38>)
 801566c:	009b      	lsls	r3, r3, #2
 801566e:	4413      	add	r3, r2
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	691b      	ldr	r3, [r3, #16]
 8015674:	79fa      	ldrb	r2, [r7, #7]
 8015676:	4906      	ldr	r1, [pc, #24]	; (8015690 <disk_ioctl+0x38>)
 8015678:	440a      	add	r2, r1
 801567a:	7a10      	ldrb	r0, [r2, #8]
 801567c:	79b9      	ldrb	r1, [r7, #6]
 801567e:	683a      	ldr	r2, [r7, #0]
 8015680:	4798      	blx	r3
 8015682:	4603      	mov	r3, r0
 8015684:	73fb      	strb	r3, [r7, #15]
  return res;
 8015686:	7bfb      	ldrb	r3, [r7, #15]
}
 8015688:	4618      	mov	r0, r3
 801568a:	3710      	adds	r7, #16
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}
 8015690:	24000b78 	.word	0x24000b78

08015694 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015694:	b480      	push	{r7}
 8015696:	b085      	sub	sp, #20
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	3301      	adds	r3, #1
 80156a0:	781b      	ldrb	r3, [r3, #0]
 80156a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80156a4:	89fb      	ldrh	r3, [r7, #14]
 80156a6:	021b      	lsls	r3, r3, #8
 80156a8:	b21a      	sxth	r2, r3
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	b21b      	sxth	r3, r3
 80156b0:	4313      	orrs	r3, r2
 80156b2:	b21b      	sxth	r3, r3
 80156b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80156b6:	89fb      	ldrh	r3, [r7, #14]
}
 80156b8:	4618      	mov	r0, r3
 80156ba:	3714      	adds	r7, #20
 80156bc:	46bd      	mov	sp, r7
 80156be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c2:	4770      	bx	lr

080156c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80156c4:	b480      	push	{r7}
 80156c6:	b085      	sub	sp, #20
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	3303      	adds	r3, #3
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	021b      	lsls	r3, r3, #8
 80156d8:	687a      	ldr	r2, [r7, #4]
 80156da:	3202      	adds	r2, #2
 80156dc:	7812      	ldrb	r2, [r2, #0]
 80156de:	4313      	orrs	r3, r2
 80156e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	021b      	lsls	r3, r3, #8
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	3201      	adds	r2, #1
 80156ea:	7812      	ldrb	r2, [r2, #0]
 80156ec:	4313      	orrs	r3, r2
 80156ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	021b      	lsls	r3, r3, #8
 80156f4:	687a      	ldr	r2, [r7, #4]
 80156f6:	7812      	ldrb	r2, [r2, #0]
 80156f8:	4313      	orrs	r3, r2
 80156fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80156fc:	68fb      	ldr	r3, [r7, #12]
}
 80156fe:	4618      	mov	r0, r3
 8015700:	3714      	adds	r7, #20
 8015702:	46bd      	mov	sp, r7
 8015704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015708:	4770      	bx	lr

0801570a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801570a:	b480      	push	{r7}
 801570c:	b083      	sub	sp, #12
 801570e:	af00      	add	r7, sp, #0
 8015710:	6078      	str	r0, [r7, #4]
 8015712:	460b      	mov	r3, r1
 8015714:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	1c5a      	adds	r2, r3, #1
 801571a:	607a      	str	r2, [r7, #4]
 801571c:	887a      	ldrh	r2, [r7, #2]
 801571e:	b2d2      	uxtb	r2, r2
 8015720:	701a      	strb	r2, [r3, #0]
 8015722:	887b      	ldrh	r3, [r7, #2]
 8015724:	0a1b      	lsrs	r3, r3, #8
 8015726:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	1c5a      	adds	r2, r3, #1
 801572c:	607a      	str	r2, [r7, #4]
 801572e:	887a      	ldrh	r2, [r7, #2]
 8015730:	b2d2      	uxtb	r2, r2
 8015732:	701a      	strb	r2, [r3, #0]
}
 8015734:	bf00      	nop
 8015736:	370c      	adds	r7, #12
 8015738:	46bd      	mov	sp, r7
 801573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573e:	4770      	bx	lr

08015740 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015740:	b480      	push	{r7}
 8015742:	b083      	sub	sp, #12
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
 8015748:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	1c5a      	adds	r2, r3, #1
 801574e:	607a      	str	r2, [r7, #4]
 8015750:	683a      	ldr	r2, [r7, #0]
 8015752:	b2d2      	uxtb	r2, r2
 8015754:	701a      	strb	r2, [r3, #0]
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	0a1b      	lsrs	r3, r3, #8
 801575a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	1c5a      	adds	r2, r3, #1
 8015760:	607a      	str	r2, [r7, #4]
 8015762:	683a      	ldr	r2, [r7, #0]
 8015764:	b2d2      	uxtb	r2, r2
 8015766:	701a      	strb	r2, [r3, #0]
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	0a1b      	lsrs	r3, r3, #8
 801576c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	1c5a      	adds	r2, r3, #1
 8015772:	607a      	str	r2, [r7, #4]
 8015774:	683a      	ldr	r2, [r7, #0]
 8015776:	b2d2      	uxtb	r2, r2
 8015778:	701a      	strb	r2, [r3, #0]
 801577a:	683b      	ldr	r3, [r7, #0]
 801577c:	0a1b      	lsrs	r3, r3, #8
 801577e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	1c5a      	adds	r2, r3, #1
 8015784:	607a      	str	r2, [r7, #4]
 8015786:	683a      	ldr	r2, [r7, #0]
 8015788:	b2d2      	uxtb	r2, r2
 801578a:	701a      	strb	r2, [r3, #0]
}
 801578c:	bf00      	nop
 801578e:	370c      	adds	r7, #12
 8015790:	46bd      	mov	sp, r7
 8015792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015796:	4770      	bx	lr

08015798 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015798:	b480      	push	{r7}
 801579a:	b087      	sub	sp, #28
 801579c:	af00      	add	r7, sp, #0
 801579e:	60f8      	str	r0, [r7, #12]
 80157a0:	60b9      	str	r1, [r7, #8]
 80157a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d00d      	beq.n	80157ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80157b2:	693a      	ldr	r2, [r7, #16]
 80157b4:	1c53      	adds	r3, r2, #1
 80157b6:	613b      	str	r3, [r7, #16]
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	1c59      	adds	r1, r3, #1
 80157bc:	6179      	str	r1, [r7, #20]
 80157be:	7812      	ldrb	r2, [r2, #0]
 80157c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	3b01      	subs	r3, #1
 80157c6:	607b      	str	r3, [r7, #4]
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d1f1      	bne.n	80157b2 <mem_cpy+0x1a>
	}
}
 80157ce:	bf00      	nop
 80157d0:	371c      	adds	r7, #28
 80157d2:	46bd      	mov	sp, r7
 80157d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d8:	4770      	bx	lr

080157da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80157da:	b480      	push	{r7}
 80157dc:	b087      	sub	sp, #28
 80157de:	af00      	add	r7, sp, #0
 80157e0:	60f8      	str	r0, [r7, #12]
 80157e2:	60b9      	str	r1, [r7, #8]
 80157e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80157ea:	697b      	ldr	r3, [r7, #20]
 80157ec:	1c5a      	adds	r2, r3, #1
 80157ee:	617a      	str	r2, [r7, #20]
 80157f0:	68ba      	ldr	r2, [r7, #8]
 80157f2:	b2d2      	uxtb	r2, r2
 80157f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	3b01      	subs	r3, #1
 80157fa:	607b      	str	r3, [r7, #4]
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d1f3      	bne.n	80157ea <mem_set+0x10>
}
 8015802:	bf00      	nop
 8015804:	371c      	adds	r7, #28
 8015806:	46bd      	mov	sp, r7
 8015808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580c:	4770      	bx	lr

0801580e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801580e:	b480      	push	{r7}
 8015810:	b089      	sub	sp, #36	; 0x24
 8015812:	af00      	add	r7, sp, #0
 8015814:	60f8      	str	r0, [r7, #12]
 8015816:	60b9      	str	r1, [r7, #8]
 8015818:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	61fb      	str	r3, [r7, #28]
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8015822:	2300      	movs	r3, #0
 8015824:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	1c5a      	adds	r2, r3, #1
 801582a:	61fa      	str	r2, [r7, #28]
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	4619      	mov	r1, r3
 8015830:	69bb      	ldr	r3, [r7, #24]
 8015832:	1c5a      	adds	r2, r3, #1
 8015834:	61ba      	str	r2, [r7, #24]
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	1acb      	subs	r3, r1, r3
 801583a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	3b01      	subs	r3, #1
 8015840:	607b      	str	r3, [r7, #4]
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d002      	beq.n	801584e <mem_cmp+0x40>
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d0eb      	beq.n	8015826 <mem_cmp+0x18>

	return r;
 801584e:	697b      	ldr	r3, [r7, #20]
}
 8015850:	4618      	mov	r0, r3
 8015852:	3724      	adds	r7, #36	; 0x24
 8015854:	46bd      	mov	sp, r7
 8015856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585a:	4770      	bx	lr

0801585c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801585c:	b480      	push	{r7}
 801585e:	b083      	sub	sp, #12
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
 8015864:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015866:	e002      	b.n	801586e <chk_chr+0x12>
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	3301      	adds	r3, #1
 801586c:	607b      	str	r3, [r7, #4]
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d005      	beq.n	8015882 <chk_chr+0x26>
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	781b      	ldrb	r3, [r3, #0]
 801587a:	461a      	mov	r2, r3
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	4293      	cmp	r3, r2
 8015880:	d1f2      	bne.n	8015868 <chk_chr+0xc>
	return *str;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	781b      	ldrb	r3, [r3, #0]
}
 8015886:	4618      	mov	r0, r3
 8015888:	370c      	adds	r7, #12
 801588a:	46bd      	mov	sp, r7
 801588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015890:	4770      	bx	lr
	...

08015894 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015894:	b480      	push	{r7}
 8015896:	b085      	sub	sp, #20
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
 801589c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801589e:	2300      	movs	r3, #0
 80158a0:	60bb      	str	r3, [r7, #8]
 80158a2:	68bb      	ldr	r3, [r7, #8]
 80158a4:	60fb      	str	r3, [r7, #12]
 80158a6:	e029      	b.n	80158fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80158a8:	4a27      	ldr	r2, [pc, #156]	; (8015948 <chk_lock+0xb4>)
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	011b      	lsls	r3, r3, #4
 80158ae:	4413      	add	r3, r2
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d01d      	beq.n	80158f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80158b6:	4a24      	ldr	r2, [pc, #144]	; (8015948 <chk_lock+0xb4>)
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	011b      	lsls	r3, r3, #4
 80158bc:	4413      	add	r3, r2
 80158be:	681a      	ldr	r2, [r3, #0]
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	429a      	cmp	r2, r3
 80158c6:	d116      	bne.n	80158f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80158c8:	4a1f      	ldr	r2, [pc, #124]	; (8015948 <chk_lock+0xb4>)
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	011b      	lsls	r3, r3, #4
 80158ce:	4413      	add	r3, r2
 80158d0:	3304      	adds	r3, #4
 80158d2:	681a      	ldr	r2, [r3, #0]
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80158d8:	429a      	cmp	r2, r3
 80158da:	d10c      	bne.n	80158f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80158dc:	4a1a      	ldr	r2, [pc, #104]	; (8015948 <chk_lock+0xb4>)
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	011b      	lsls	r3, r3, #4
 80158e2:	4413      	add	r3, r2
 80158e4:	3308      	adds	r3, #8
 80158e6:	681a      	ldr	r2, [r3, #0]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80158ec:	429a      	cmp	r2, r3
 80158ee:	d102      	bne.n	80158f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80158f0:	e007      	b.n	8015902 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80158f2:	2301      	movs	r3, #1
 80158f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	3301      	adds	r3, #1
 80158fa:	60fb      	str	r3, [r7, #12]
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	2b01      	cmp	r3, #1
 8015900:	d9d2      	bls.n	80158a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	2b02      	cmp	r3, #2
 8015906:	d109      	bne.n	801591c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d102      	bne.n	8015914 <chk_lock+0x80>
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	2b02      	cmp	r3, #2
 8015912:	d101      	bne.n	8015918 <chk_lock+0x84>
 8015914:	2300      	movs	r3, #0
 8015916:	e010      	b.n	801593a <chk_lock+0xa6>
 8015918:	2312      	movs	r3, #18
 801591a:	e00e      	b.n	801593a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d108      	bne.n	8015934 <chk_lock+0xa0>
 8015922:	4a09      	ldr	r2, [pc, #36]	; (8015948 <chk_lock+0xb4>)
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	011b      	lsls	r3, r3, #4
 8015928:	4413      	add	r3, r2
 801592a:	330c      	adds	r3, #12
 801592c:	881b      	ldrh	r3, [r3, #0]
 801592e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015932:	d101      	bne.n	8015938 <chk_lock+0xa4>
 8015934:	2310      	movs	r3, #16
 8015936:	e000      	b.n	801593a <chk_lock+0xa6>
 8015938:	2300      	movs	r3, #0
}
 801593a:	4618      	mov	r0, r3
 801593c:	3714      	adds	r7, #20
 801593e:	46bd      	mov	sp, r7
 8015940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015944:	4770      	bx	lr
 8015946:	bf00      	nop
 8015948:	24000b58 	.word	0x24000b58

0801594c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801594c:	b480      	push	{r7}
 801594e:	b083      	sub	sp, #12
 8015950:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015952:	2300      	movs	r3, #0
 8015954:	607b      	str	r3, [r7, #4]
 8015956:	e002      	b.n	801595e <enq_lock+0x12>
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	3301      	adds	r3, #1
 801595c:	607b      	str	r3, [r7, #4]
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	2b01      	cmp	r3, #1
 8015962:	d806      	bhi.n	8015972 <enq_lock+0x26>
 8015964:	4a09      	ldr	r2, [pc, #36]	; (801598c <enq_lock+0x40>)
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	011b      	lsls	r3, r3, #4
 801596a:	4413      	add	r3, r2
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d1f2      	bne.n	8015958 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	2b02      	cmp	r3, #2
 8015976:	bf14      	ite	ne
 8015978:	2301      	movne	r3, #1
 801597a:	2300      	moveq	r3, #0
 801597c:	b2db      	uxtb	r3, r3
}
 801597e:	4618      	mov	r0, r3
 8015980:	370c      	adds	r7, #12
 8015982:	46bd      	mov	sp, r7
 8015984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015988:	4770      	bx	lr
 801598a:	bf00      	nop
 801598c:	24000b58 	.word	0x24000b58

08015990 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015990:	b480      	push	{r7}
 8015992:	b085      	sub	sp, #20
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801599a:	2300      	movs	r3, #0
 801599c:	60fb      	str	r3, [r7, #12]
 801599e:	e01f      	b.n	80159e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80159a0:	4a41      	ldr	r2, [pc, #260]	; (8015aa8 <inc_lock+0x118>)
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	011b      	lsls	r3, r3, #4
 80159a6:	4413      	add	r3, r2
 80159a8:	681a      	ldr	r2, [r3, #0]
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d113      	bne.n	80159da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80159b2:	4a3d      	ldr	r2, [pc, #244]	; (8015aa8 <inc_lock+0x118>)
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	011b      	lsls	r3, r3, #4
 80159b8:	4413      	add	r3, r2
 80159ba:	3304      	adds	r3, #4
 80159bc:	681a      	ldr	r2, [r3, #0]
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d109      	bne.n	80159da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80159c6:	4a38      	ldr	r2, [pc, #224]	; (8015aa8 <inc_lock+0x118>)
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	011b      	lsls	r3, r3, #4
 80159cc:	4413      	add	r3, r2
 80159ce:	3308      	adds	r3, #8
 80159d0:	681a      	ldr	r2, [r3, #0]
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d006      	beq.n	80159e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	3301      	adds	r3, #1
 80159de:	60fb      	str	r3, [r7, #12]
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2b01      	cmp	r3, #1
 80159e4:	d9dc      	bls.n	80159a0 <inc_lock+0x10>
 80159e6:	e000      	b.n	80159ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80159e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	2b02      	cmp	r3, #2
 80159ee:	d132      	bne.n	8015a56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80159f0:	2300      	movs	r3, #0
 80159f2:	60fb      	str	r3, [r7, #12]
 80159f4:	e002      	b.n	80159fc <inc_lock+0x6c>
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	3301      	adds	r3, #1
 80159fa:	60fb      	str	r3, [r7, #12]
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	2b01      	cmp	r3, #1
 8015a00:	d806      	bhi.n	8015a10 <inc_lock+0x80>
 8015a02:	4a29      	ldr	r2, [pc, #164]	; (8015aa8 <inc_lock+0x118>)
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	011b      	lsls	r3, r3, #4
 8015a08:	4413      	add	r3, r2
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d1f2      	bne.n	80159f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	2b02      	cmp	r3, #2
 8015a14:	d101      	bne.n	8015a1a <inc_lock+0x8a>
 8015a16:	2300      	movs	r3, #0
 8015a18:	e040      	b.n	8015a9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681a      	ldr	r2, [r3, #0]
 8015a1e:	4922      	ldr	r1, [pc, #136]	; (8015aa8 <inc_lock+0x118>)
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	011b      	lsls	r3, r3, #4
 8015a24:	440b      	add	r3, r1
 8015a26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	689a      	ldr	r2, [r3, #8]
 8015a2c:	491e      	ldr	r1, [pc, #120]	; (8015aa8 <inc_lock+0x118>)
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	011b      	lsls	r3, r3, #4
 8015a32:	440b      	add	r3, r1
 8015a34:	3304      	adds	r3, #4
 8015a36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	695a      	ldr	r2, [r3, #20]
 8015a3c:	491a      	ldr	r1, [pc, #104]	; (8015aa8 <inc_lock+0x118>)
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	011b      	lsls	r3, r3, #4
 8015a42:	440b      	add	r3, r1
 8015a44:	3308      	adds	r3, #8
 8015a46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015a48:	4a17      	ldr	r2, [pc, #92]	; (8015aa8 <inc_lock+0x118>)
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	011b      	lsls	r3, r3, #4
 8015a4e:	4413      	add	r3, r2
 8015a50:	330c      	adds	r3, #12
 8015a52:	2200      	movs	r2, #0
 8015a54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015a56:	683b      	ldr	r3, [r7, #0]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d009      	beq.n	8015a70 <inc_lock+0xe0>
 8015a5c:	4a12      	ldr	r2, [pc, #72]	; (8015aa8 <inc_lock+0x118>)
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	011b      	lsls	r3, r3, #4
 8015a62:	4413      	add	r3, r2
 8015a64:	330c      	adds	r3, #12
 8015a66:	881b      	ldrh	r3, [r3, #0]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d001      	beq.n	8015a70 <inc_lock+0xe0>
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	e015      	b.n	8015a9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d108      	bne.n	8015a88 <inc_lock+0xf8>
 8015a76:	4a0c      	ldr	r2, [pc, #48]	; (8015aa8 <inc_lock+0x118>)
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	011b      	lsls	r3, r3, #4
 8015a7c:	4413      	add	r3, r2
 8015a7e:	330c      	adds	r3, #12
 8015a80:	881b      	ldrh	r3, [r3, #0]
 8015a82:	3301      	adds	r3, #1
 8015a84:	b29a      	uxth	r2, r3
 8015a86:	e001      	b.n	8015a8c <inc_lock+0xfc>
 8015a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015a8c:	4906      	ldr	r1, [pc, #24]	; (8015aa8 <inc_lock+0x118>)
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	011b      	lsls	r3, r3, #4
 8015a92:	440b      	add	r3, r1
 8015a94:	330c      	adds	r3, #12
 8015a96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	3301      	adds	r3, #1
}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3714      	adds	r7, #20
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa6:	4770      	bx	lr
 8015aa8:	24000b58 	.word	0x24000b58

08015aac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015aac:	b480      	push	{r7}
 8015aae:	b085      	sub	sp, #20
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	3b01      	subs	r3, #1
 8015ab8:	607b      	str	r3, [r7, #4]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	d825      	bhi.n	8015b0c <dec_lock+0x60>
		n = Files[i].ctr;
 8015ac0:	4a17      	ldr	r2, [pc, #92]	; (8015b20 <dec_lock+0x74>)
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	011b      	lsls	r3, r3, #4
 8015ac6:	4413      	add	r3, r2
 8015ac8:	330c      	adds	r3, #12
 8015aca:	881b      	ldrh	r3, [r3, #0]
 8015acc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015ace:	89fb      	ldrh	r3, [r7, #14]
 8015ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ad4:	d101      	bne.n	8015ada <dec_lock+0x2e>
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015ada:	89fb      	ldrh	r3, [r7, #14]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d002      	beq.n	8015ae6 <dec_lock+0x3a>
 8015ae0:	89fb      	ldrh	r3, [r7, #14]
 8015ae2:	3b01      	subs	r3, #1
 8015ae4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015ae6:	4a0e      	ldr	r2, [pc, #56]	; (8015b20 <dec_lock+0x74>)
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	011b      	lsls	r3, r3, #4
 8015aec:	4413      	add	r3, r2
 8015aee:	330c      	adds	r3, #12
 8015af0:	89fa      	ldrh	r2, [r7, #14]
 8015af2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015af4:	89fb      	ldrh	r3, [r7, #14]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d105      	bne.n	8015b06 <dec_lock+0x5a>
 8015afa:	4a09      	ldr	r2, [pc, #36]	; (8015b20 <dec_lock+0x74>)
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	011b      	lsls	r3, r3, #4
 8015b00:	4413      	add	r3, r2
 8015b02:	2200      	movs	r2, #0
 8015b04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015b06:	2300      	movs	r3, #0
 8015b08:	737b      	strb	r3, [r7, #13]
 8015b0a:	e001      	b.n	8015b10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015b0c:	2302      	movs	r3, #2
 8015b0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015b10:	7b7b      	ldrb	r3, [r7, #13]
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3714      	adds	r7, #20
 8015b16:	46bd      	mov	sp, r7
 8015b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1c:	4770      	bx	lr
 8015b1e:	bf00      	nop
 8015b20:	24000b58 	.word	0x24000b58

08015b24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015b24:	b480      	push	{r7}
 8015b26:	b085      	sub	sp, #20
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	60fb      	str	r3, [r7, #12]
 8015b30:	e010      	b.n	8015b54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015b32:	4a0d      	ldr	r2, [pc, #52]	; (8015b68 <clear_lock+0x44>)
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	011b      	lsls	r3, r3, #4
 8015b38:	4413      	add	r3, r2
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	687a      	ldr	r2, [r7, #4]
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d105      	bne.n	8015b4e <clear_lock+0x2a>
 8015b42:	4a09      	ldr	r2, [pc, #36]	; (8015b68 <clear_lock+0x44>)
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	011b      	lsls	r3, r3, #4
 8015b48:	4413      	add	r3, r2
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	3301      	adds	r3, #1
 8015b52:	60fb      	str	r3, [r7, #12]
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	2b01      	cmp	r3, #1
 8015b58:	d9eb      	bls.n	8015b32 <clear_lock+0xe>
	}
}
 8015b5a:	bf00      	nop
 8015b5c:	3714      	adds	r7, #20
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b64:	4770      	bx	lr
 8015b66:	bf00      	nop
 8015b68:	24000b58 	.word	0x24000b58

08015b6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b086      	sub	sp, #24
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015b74:	2300      	movs	r3, #0
 8015b76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	78db      	ldrb	r3, [r3, #3]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d034      	beq.n	8015bea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	7858      	ldrb	r0, [r3, #1]
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015b90:	2301      	movs	r3, #1
 8015b92:	697a      	ldr	r2, [r7, #20]
 8015b94:	f7ff fd40 	bl	8015618 <disk_write>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d002      	beq.n	8015ba4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	73fb      	strb	r3, [r7, #15]
 8015ba2:	e022      	b.n	8015bea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	6a1b      	ldr	r3, [r3, #32]
 8015bae:	697a      	ldr	r2, [r7, #20]
 8015bb0:	1ad2      	subs	r2, r2, r3
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	699b      	ldr	r3, [r3, #24]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d217      	bcs.n	8015bea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	789b      	ldrb	r3, [r3, #2]
 8015bbe:	613b      	str	r3, [r7, #16]
 8015bc0:	e010      	b.n	8015be4 <sync_window+0x78>
					wsect += fs->fsize;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	699b      	ldr	r3, [r3, #24]
 8015bc6:	697a      	ldr	r2, [r7, #20]
 8015bc8:	4413      	add	r3, r2
 8015bca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	7858      	ldrb	r0, [r3, #1]
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	697a      	ldr	r2, [r7, #20]
 8015bda:	f7ff fd1d 	bl	8015618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	3b01      	subs	r3, #1
 8015be2:	613b      	str	r3, [r7, #16]
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	2b01      	cmp	r3, #1
 8015be8:	d8eb      	bhi.n	8015bc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3718      	adds	r7, #24
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}

08015bf4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b084      	sub	sp, #16
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
 8015bfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c06:	683a      	ldr	r2, [r7, #0]
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d01b      	beq.n	8015c44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f7ff ffad 	bl	8015b6c <sync_window>
 8015c12:	4603      	mov	r3, r0
 8015c14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015c16:	7bfb      	ldrb	r3, [r7, #15]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d113      	bne.n	8015c44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	7858      	ldrb	r0, [r3, #1]
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015c26:	2301      	movs	r3, #1
 8015c28:	683a      	ldr	r2, [r7, #0]
 8015c2a:	f7ff fcd5 	bl	80155d8 <disk_read>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d004      	beq.n	8015c3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015c34:	f04f 33ff 	mov.w	r3, #4294967295
 8015c38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	683a      	ldr	r2, [r7, #0]
 8015c42:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8015c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3710      	adds	r7, #16
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
	...

08015c50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f7ff ff87 	bl	8015b6c <sync_window>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015c62:	7bfb      	ldrb	r3, [r7, #15]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d158      	bne.n	8015d1a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	781b      	ldrb	r3, [r3, #0]
 8015c6c:	2b03      	cmp	r3, #3
 8015c6e:	d148      	bne.n	8015d02 <sync_fs+0xb2>
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	791b      	ldrb	r3, [r3, #4]
 8015c74:	2b01      	cmp	r3, #1
 8015c76:	d144      	bne.n	8015d02 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	3330      	adds	r3, #48	; 0x30
 8015c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015c80:	2100      	movs	r1, #0
 8015c82:	4618      	mov	r0, r3
 8015c84:	f7ff fda9 	bl	80157da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	3330      	adds	r3, #48	; 0x30
 8015c8c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015c90:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7ff fd38 	bl	801570a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	3330      	adds	r3, #48	; 0x30
 8015c9e:	4921      	ldr	r1, [pc, #132]	; (8015d24 <sync_fs+0xd4>)
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f7ff fd4d 	bl	8015740 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	3330      	adds	r3, #48	; 0x30
 8015caa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015cae:	491e      	ldr	r1, [pc, #120]	; (8015d28 <sync_fs+0xd8>)
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7ff fd45 	bl	8015740 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	3330      	adds	r3, #48	; 0x30
 8015cba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	691b      	ldr	r3, [r3, #16]
 8015cc2:	4619      	mov	r1, r3
 8015cc4:	4610      	mov	r0, r2
 8015cc6:	f7ff fd3b 	bl	8015740 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	3330      	adds	r3, #48	; 0x30
 8015cce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	68db      	ldr	r3, [r3, #12]
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	4610      	mov	r0, r2
 8015cda:	f7ff fd31 	bl	8015740 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	69db      	ldr	r3, [r3, #28]
 8015ce2:	1c5a      	adds	r2, r3, #1
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	7858      	ldrb	r0, [r3, #1]
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	f7ff fc8e 	bl	8015618 <disk_write>
			fs->fsi_flag = 0;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	785b      	ldrb	r3, [r3, #1]
 8015d06:	2200      	movs	r2, #0
 8015d08:	2100      	movs	r1, #0
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7ff fca4 	bl	8015658 <disk_ioctl>
 8015d10:	4603      	mov	r3, r0
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d001      	beq.n	8015d1a <sync_fs+0xca>
 8015d16:	2301      	movs	r3, #1
 8015d18:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	3710      	adds	r7, #16
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	41615252 	.word	0x41615252
 8015d28:	61417272 	.word	0x61417272

08015d2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015d2c:	b480      	push	{r7}
 8015d2e:	b083      	sub	sp, #12
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
 8015d34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	3b02      	subs	r3, #2
 8015d3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	695b      	ldr	r3, [r3, #20]
 8015d40:	3b02      	subs	r3, #2
 8015d42:	683a      	ldr	r2, [r7, #0]
 8015d44:	429a      	cmp	r2, r3
 8015d46:	d301      	bcc.n	8015d4c <clust2sect+0x20>
 8015d48:	2300      	movs	r3, #0
 8015d4a:	e008      	b.n	8015d5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	895b      	ldrh	r3, [r3, #10]
 8015d50:	461a      	mov	r2, r3
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	fb03 f202 	mul.w	r2, r3, r2
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d5c:	4413      	add	r3, r2
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	370c      	adds	r7, #12
 8015d62:	46bd      	mov	sp, r7
 8015d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d68:	4770      	bx	lr

08015d6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015d6a:	b580      	push	{r7, lr}
 8015d6c:	b086      	sub	sp, #24
 8015d6e:	af00      	add	r7, sp, #0
 8015d70:	6078      	str	r0, [r7, #4]
 8015d72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	2b01      	cmp	r3, #1
 8015d7e:	d904      	bls.n	8015d8a <get_fat+0x20>
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	695b      	ldr	r3, [r3, #20]
 8015d84:	683a      	ldr	r2, [r7, #0]
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d302      	bcc.n	8015d90 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015d8a:	2301      	movs	r3, #1
 8015d8c:	617b      	str	r3, [r7, #20]
 8015d8e:	e08c      	b.n	8015eaa <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015d90:	f04f 33ff 	mov.w	r3, #4294967295
 8015d94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	781b      	ldrb	r3, [r3, #0]
 8015d9a:	2b02      	cmp	r3, #2
 8015d9c:	d045      	beq.n	8015e2a <get_fat+0xc0>
 8015d9e:	2b03      	cmp	r3, #3
 8015da0:	d05d      	beq.n	8015e5e <get_fat+0xf4>
 8015da2:	2b01      	cmp	r3, #1
 8015da4:	d177      	bne.n	8015e96 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	60fb      	str	r3, [r7, #12]
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	085b      	lsrs	r3, r3, #1
 8015dae:	68fa      	ldr	r2, [r7, #12]
 8015db0:	4413      	add	r3, r2
 8015db2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015db4:	693b      	ldr	r3, [r7, #16]
 8015db6:	6a1a      	ldr	r2, [r3, #32]
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	0a5b      	lsrs	r3, r3, #9
 8015dbc:	4413      	add	r3, r2
 8015dbe:	4619      	mov	r1, r3
 8015dc0:	6938      	ldr	r0, [r7, #16]
 8015dc2:	f7ff ff17 	bl	8015bf4 <move_window>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d167      	bne.n	8015e9c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	1c5a      	adds	r2, r3, #1
 8015dd0:	60fa      	str	r2, [r7, #12]
 8015dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015dd6:	693a      	ldr	r2, [r7, #16]
 8015dd8:	4413      	add	r3, r2
 8015dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015dde:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	6a1a      	ldr	r2, [r3, #32]
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	0a5b      	lsrs	r3, r3, #9
 8015de8:	4413      	add	r3, r2
 8015dea:	4619      	mov	r1, r3
 8015dec:	6938      	ldr	r0, [r7, #16]
 8015dee:	f7ff ff01 	bl	8015bf4 <move_window>
 8015df2:	4603      	mov	r3, r0
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d153      	bne.n	8015ea0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015dfe:	693a      	ldr	r2, [r7, #16]
 8015e00:	4413      	add	r3, r2
 8015e02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015e06:	021b      	lsls	r3, r3, #8
 8015e08:	461a      	mov	r2, r3
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	4313      	orrs	r3, r2
 8015e0e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	f003 0301 	and.w	r3, r3, #1
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d002      	beq.n	8015e20 <get_fat+0xb6>
 8015e1a:	68bb      	ldr	r3, [r7, #8]
 8015e1c:	091b      	lsrs	r3, r3, #4
 8015e1e:	e002      	b.n	8015e26 <get_fat+0xbc>
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015e26:	617b      	str	r3, [r7, #20]
			break;
 8015e28:	e03f      	b.n	8015eaa <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015e2a:	693b      	ldr	r3, [r7, #16]
 8015e2c:	6a1a      	ldr	r2, [r3, #32]
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	0a1b      	lsrs	r3, r3, #8
 8015e32:	4413      	add	r3, r2
 8015e34:	4619      	mov	r1, r3
 8015e36:	6938      	ldr	r0, [r7, #16]
 8015e38:	f7ff fedc 	bl	8015bf4 <move_window>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d130      	bne.n	8015ea4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015e42:	693b      	ldr	r3, [r7, #16]
 8015e44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e48:	683b      	ldr	r3, [r7, #0]
 8015e4a:	005b      	lsls	r3, r3, #1
 8015e4c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015e50:	4413      	add	r3, r2
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7ff fc1e 	bl	8015694 <ld_word>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	617b      	str	r3, [r7, #20]
			break;
 8015e5c:	e025      	b.n	8015eaa <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015e5e:	693b      	ldr	r3, [r7, #16]
 8015e60:	6a1a      	ldr	r2, [r3, #32]
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	09db      	lsrs	r3, r3, #7
 8015e66:	4413      	add	r3, r2
 8015e68:	4619      	mov	r1, r3
 8015e6a:	6938      	ldr	r0, [r7, #16]
 8015e6c:	f7ff fec2 	bl	8015bf4 <move_window>
 8015e70:	4603      	mov	r3, r0
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d118      	bne.n	8015ea8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015e76:	693b      	ldr	r3, [r7, #16]
 8015e78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	009b      	lsls	r3, r3, #2
 8015e80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015e84:	4413      	add	r3, r2
 8015e86:	4618      	mov	r0, r3
 8015e88:	f7ff fc1c 	bl	80156c4 <ld_dword>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015e92:	617b      	str	r3, [r7, #20]
			break;
 8015e94:	e009      	b.n	8015eaa <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015e96:	2301      	movs	r3, #1
 8015e98:	617b      	str	r3, [r7, #20]
 8015e9a:	e006      	b.n	8015eaa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015e9c:	bf00      	nop
 8015e9e:	e004      	b.n	8015eaa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015ea0:	bf00      	nop
 8015ea2:	e002      	b.n	8015eaa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015ea4:	bf00      	nop
 8015ea6:	e000      	b.n	8015eaa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015ea8:	bf00      	nop
		}
	}

	return val;
 8015eaa:	697b      	ldr	r3, [r7, #20]
}
 8015eac:	4618      	mov	r0, r3
 8015eae:	3718      	adds	r7, #24
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}

08015eb4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015eb4:	b590      	push	{r4, r7, lr}
 8015eb6:	b089      	sub	sp, #36	; 0x24
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	60f8      	str	r0, [r7, #12]
 8015ebc:	60b9      	str	r1, [r7, #8]
 8015ebe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015ec0:	2302      	movs	r3, #2
 8015ec2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	2b01      	cmp	r3, #1
 8015ec8:	f240 80d6 	bls.w	8016078 <put_fat+0x1c4>
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	695b      	ldr	r3, [r3, #20]
 8015ed0:	68ba      	ldr	r2, [r7, #8]
 8015ed2:	429a      	cmp	r2, r3
 8015ed4:	f080 80d0 	bcs.w	8016078 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	2b02      	cmp	r3, #2
 8015ede:	d073      	beq.n	8015fc8 <put_fat+0x114>
 8015ee0:	2b03      	cmp	r3, #3
 8015ee2:	f000 8091 	beq.w	8016008 <put_fat+0x154>
 8015ee6:	2b01      	cmp	r3, #1
 8015ee8:	f040 80c6 	bne.w	8016078 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015eec:	68bb      	ldr	r3, [r7, #8]
 8015eee:	61bb      	str	r3, [r7, #24]
 8015ef0:	69bb      	ldr	r3, [r7, #24]
 8015ef2:	085b      	lsrs	r3, r3, #1
 8015ef4:	69ba      	ldr	r2, [r7, #24]
 8015ef6:	4413      	add	r3, r2
 8015ef8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	6a1a      	ldr	r2, [r3, #32]
 8015efe:	69bb      	ldr	r3, [r7, #24]
 8015f00:	0a5b      	lsrs	r3, r3, #9
 8015f02:	4413      	add	r3, r2
 8015f04:	4619      	mov	r1, r3
 8015f06:	68f8      	ldr	r0, [r7, #12]
 8015f08:	f7ff fe74 	bl	8015bf4 <move_window>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015f10:	7ffb      	ldrb	r3, [r7, #31]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	f040 80a9 	bne.w	801606a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015f1e:	69bb      	ldr	r3, [r7, #24]
 8015f20:	1c59      	adds	r1, r3, #1
 8015f22:	61b9      	str	r1, [r7, #24]
 8015f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f28:	4413      	add	r3, r2
 8015f2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015f2c:	68bb      	ldr	r3, [r7, #8]
 8015f2e:	f003 0301 	and.w	r3, r3, #1
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d00d      	beq.n	8015f52 <put_fat+0x9e>
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	781b      	ldrb	r3, [r3, #0]
 8015f3a:	b25b      	sxtb	r3, r3
 8015f3c:	f003 030f 	and.w	r3, r3, #15
 8015f40:	b25a      	sxtb	r2, r3
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	011b      	lsls	r3, r3, #4
 8015f48:	b25b      	sxtb	r3, r3
 8015f4a:	4313      	orrs	r3, r2
 8015f4c:	b25b      	sxtb	r3, r3
 8015f4e:	b2db      	uxtb	r3, r3
 8015f50:	e001      	b.n	8015f56 <put_fat+0xa2>
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	b2db      	uxtb	r3, r3
 8015f56:	697a      	ldr	r2, [r7, #20]
 8015f58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	2201      	movs	r2, #1
 8015f5e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	6a1a      	ldr	r2, [r3, #32]
 8015f64:	69bb      	ldr	r3, [r7, #24]
 8015f66:	0a5b      	lsrs	r3, r3, #9
 8015f68:	4413      	add	r3, r2
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	68f8      	ldr	r0, [r7, #12]
 8015f6e:	f7ff fe41 	bl	8015bf4 <move_window>
 8015f72:	4603      	mov	r3, r0
 8015f74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015f76:	7ffb      	ldrb	r3, [r7, #31]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d178      	bne.n	801606e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015f82:	69bb      	ldr	r3, [r7, #24]
 8015f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f88:	4413      	add	r3, r2
 8015f8a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	f003 0301 	and.w	r3, r3, #1
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d003      	beq.n	8015f9e <put_fat+0xea>
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	091b      	lsrs	r3, r3, #4
 8015f9a:	b2db      	uxtb	r3, r3
 8015f9c:	e00e      	b.n	8015fbc <put_fat+0x108>
 8015f9e:	697b      	ldr	r3, [r7, #20]
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	b25b      	sxtb	r3, r3
 8015fa4:	f023 030f 	bic.w	r3, r3, #15
 8015fa8:	b25a      	sxtb	r2, r3
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	0a1b      	lsrs	r3, r3, #8
 8015fae:	b25b      	sxtb	r3, r3
 8015fb0:	f003 030f 	and.w	r3, r3, #15
 8015fb4:	b25b      	sxtb	r3, r3
 8015fb6:	4313      	orrs	r3, r2
 8015fb8:	b25b      	sxtb	r3, r3
 8015fba:	b2db      	uxtb	r3, r3
 8015fbc:	697a      	ldr	r2, [r7, #20]
 8015fbe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	70da      	strb	r2, [r3, #3]
			break;
 8015fc6:	e057      	b.n	8016078 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	6a1a      	ldr	r2, [r3, #32]
 8015fcc:	68bb      	ldr	r3, [r7, #8]
 8015fce:	0a1b      	lsrs	r3, r3, #8
 8015fd0:	4413      	add	r3, r2
 8015fd2:	4619      	mov	r1, r3
 8015fd4:	68f8      	ldr	r0, [r7, #12]
 8015fd6:	f7ff fe0d 	bl	8015bf4 <move_window>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015fde:	7ffb      	ldrb	r3, [r7, #31]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d146      	bne.n	8016072 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015fea:	68bb      	ldr	r3, [r7, #8]
 8015fec:	005b      	lsls	r3, r3, #1
 8015fee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015ff2:	4413      	add	r3, r2
 8015ff4:	687a      	ldr	r2, [r7, #4]
 8015ff6:	b292      	uxth	r2, r2
 8015ff8:	4611      	mov	r1, r2
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7ff fb85 	bl	801570a <st_word>
			fs->wflag = 1;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	2201      	movs	r2, #1
 8016004:	70da      	strb	r2, [r3, #3]
			break;
 8016006:	e037      	b.n	8016078 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	6a1a      	ldr	r2, [r3, #32]
 801600c:	68bb      	ldr	r3, [r7, #8]
 801600e:	09db      	lsrs	r3, r3, #7
 8016010:	4413      	add	r3, r2
 8016012:	4619      	mov	r1, r3
 8016014:	68f8      	ldr	r0, [r7, #12]
 8016016:	f7ff fded 	bl	8015bf4 <move_window>
 801601a:	4603      	mov	r3, r0
 801601c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801601e:	7ffb      	ldrb	r3, [r7, #31]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d128      	bne.n	8016076 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016030:	68bb      	ldr	r3, [r7, #8]
 8016032:	009b      	lsls	r3, r3, #2
 8016034:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016038:	4413      	add	r3, r2
 801603a:	4618      	mov	r0, r3
 801603c:	f7ff fb42 	bl	80156c4 <ld_dword>
 8016040:	4603      	mov	r3, r0
 8016042:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016046:	4323      	orrs	r3, r4
 8016048:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016050:	68bb      	ldr	r3, [r7, #8]
 8016052:	009b      	lsls	r3, r3, #2
 8016054:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016058:	4413      	add	r3, r2
 801605a:	6879      	ldr	r1, [r7, #4]
 801605c:	4618      	mov	r0, r3
 801605e:	f7ff fb6f 	bl	8015740 <st_dword>
			fs->wflag = 1;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	2201      	movs	r2, #1
 8016066:	70da      	strb	r2, [r3, #3]
			break;
 8016068:	e006      	b.n	8016078 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801606a:	bf00      	nop
 801606c:	e004      	b.n	8016078 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801606e:	bf00      	nop
 8016070:	e002      	b.n	8016078 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016072:	bf00      	nop
 8016074:	e000      	b.n	8016078 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016076:	bf00      	nop
		}
	}
	return res;
 8016078:	7ffb      	ldrb	r3, [r7, #31]
}
 801607a:	4618      	mov	r0, r3
 801607c:	3724      	adds	r7, #36	; 0x24
 801607e:	46bd      	mov	sp, r7
 8016080:	bd90      	pop	{r4, r7, pc}

08016082 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016082:	b580      	push	{r7, lr}
 8016084:	b088      	sub	sp, #32
 8016086:	af00      	add	r7, sp, #0
 8016088:	60f8      	str	r0, [r7, #12]
 801608a:	60b9      	str	r1, [r7, #8]
 801608c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801608e:	2300      	movs	r3, #0
 8016090:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	2b01      	cmp	r3, #1
 801609c:	d904      	bls.n	80160a8 <remove_chain+0x26>
 801609e:	69bb      	ldr	r3, [r7, #24]
 80160a0:	695b      	ldr	r3, [r3, #20]
 80160a2:	68ba      	ldr	r2, [r7, #8]
 80160a4:	429a      	cmp	r2, r3
 80160a6:	d301      	bcc.n	80160ac <remove_chain+0x2a>
 80160a8:	2302      	movs	r3, #2
 80160aa:	e04b      	b.n	8016144 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d00c      	beq.n	80160cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80160b2:	f04f 32ff 	mov.w	r2, #4294967295
 80160b6:	6879      	ldr	r1, [r7, #4]
 80160b8:	69b8      	ldr	r0, [r7, #24]
 80160ba:	f7ff fefb 	bl	8015eb4 <put_fat>
 80160be:	4603      	mov	r3, r0
 80160c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80160c2:	7ffb      	ldrb	r3, [r7, #31]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d001      	beq.n	80160cc <remove_chain+0x4a>
 80160c8:	7ffb      	ldrb	r3, [r7, #31]
 80160ca:	e03b      	b.n	8016144 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80160cc:	68b9      	ldr	r1, [r7, #8]
 80160ce:	68f8      	ldr	r0, [r7, #12]
 80160d0:	f7ff fe4b 	bl	8015d6a <get_fat>
 80160d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80160d6:	697b      	ldr	r3, [r7, #20]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d031      	beq.n	8016140 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80160dc:	697b      	ldr	r3, [r7, #20]
 80160de:	2b01      	cmp	r3, #1
 80160e0:	d101      	bne.n	80160e6 <remove_chain+0x64>
 80160e2:	2302      	movs	r3, #2
 80160e4:	e02e      	b.n	8016144 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80160e6:	697b      	ldr	r3, [r7, #20]
 80160e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160ec:	d101      	bne.n	80160f2 <remove_chain+0x70>
 80160ee:	2301      	movs	r3, #1
 80160f0:	e028      	b.n	8016144 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80160f2:	2200      	movs	r2, #0
 80160f4:	68b9      	ldr	r1, [r7, #8]
 80160f6:	69b8      	ldr	r0, [r7, #24]
 80160f8:	f7ff fedc 	bl	8015eb4 <put_fat>
 80160fc:	4603      	mov	r3, r0
 80160fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8016100:	7ffb      	ldrb	r3, [r7, #31]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d001      	beq.n	801610a <remove_chain+0x88>
 8016106:	7ffb      	ldrb	r3, [r7, #31]
 8016108:	e01c      	b.n	8016144 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801610a:	69bb      	ldr	r3, [r7, #24]
 801610c:	691a      	ldr	r2, [r3, #16]
 801610e:	69bb      	ldr	r3, [r7, #24]
 8016110:	695b      	ldr	r3, [r3, #20]
 8016112:	3b02      	subs	r3, #2
 8016114:	429a      	cmp	r2, r3
 8016116:	d20b      	bcs.n	8016130 <remove_chain+0xae>
			fs->free_clst++;
 8016118:	69bb      	ldr	r3, [r7, #24]
 801611a:	691b      	ldr	r3, [r3, #16]
 801611c:	1c5a      	adds	r2, r3, #1
 801611e:	69bb      	ldr	r3, [r7, #24]
 8016120:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8016122:	69bb      	ldr	r3, [r7, #24]
 8016124:	791b      	ldrb	r3, [r3, #4]
 8016126:	f043 0301 	orr.w	r3, r3, #1
 801612a:	b2da      	uxtb	r2, r3
 801612c:	69bb      	ldr	r3, [r7, #24]
 801612e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016134:	69bb      	ldr	r3, [r7, #24]
 8016136:	695b      	ldr	r3, [r3, #20]
 8016138:	68ba      	ldr	r2, [r7, #8]
 801613a:	429a      	cmp	r2, r3
 801613c:	d3c6      	bcc.n	80160cc <remove_chain+0x4a>
 801613e:	e000      	b.n	8016142 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016140:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8016142:	2300      	movs	r3, #0
}
 8016144:	4618      	mov	r0, r3
 8016146:	3720      	adds	r7, #32
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}

0801614c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b088      	sub	sp, #32
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
 8016154:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d10d      	bne.n	801617e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8016162:	693b      	ldr	r3, [r7, #16]
 8016164:	68db      	ldr	r3, [r3, #12]
 8016166:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016168:	69bb      	ldr	r3, [r7, #24]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d004      	beq.n	8016178 <create_chain+0x2c>
 801616e:	693b      	ldr	r3, [r7, #16]
 8016170:	695b      	ldr	r3, [r3, #20]
 8016172:	69ba      	ldr	r2, [r7, #24]
 8016174:	429a      	cmp	r2, r3
 8016176:	d31b      	bcc.n	80161b0 <create_chain+0x64>
 8016178:	2301      	movs	r3, #1
 801617a:	61bb      	str	r3, [r7, #24]
 801617c:	e018      	b.n	80161b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801617e:	6839      	ldr	r1, [r7, #0]
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f7ff fdf2 	bl	8015d6a <get_fat>
 8016186:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	2b01      	cmp	r3, #1
 801618c:	d801      	bhi.n	8016192 <create_chain+0x46>
 801618e:	2301      	movs	r3, #1
 8016190:	e070      	b.n	8016274 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016198:	d101      	bne.n	801619e <create_chain+0x52>
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	e06a      	b.n	8016274 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801619e:	693b      	ldr	r3, [r7, #16]
 80161a0:	695b      	ldr	r3, [r3, #20]
 80161a2:	68fa      	ldr	r2, [r7, #12]
 80161a4:	429a      	cmp	r2, r3
 80161a6:	d201      	bcs.n	80161ac <create_chain+0x60>
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	e063      	b.n	8016274 <create_chain+0x128>
		scl = clst;
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80161b0:	69bb      	ldr	r3, [r7, #24]
 80161b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	3301      	adds	r3, #1
 80161b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80161ba:	693b      	ldr	r3, [r7, #16]
 80161bc:	695b      	ldr	r3, [r3, #20]
 80161be:	69fa      	ldr	r2, [r7, #28]
 80161c0:	429a      	cmp	r2, r3
 80161c2:	d307      	bcc.n	80161d4 <create_chain+0x88>
				ncl = 2;
 80161c4:	2302      	movs	r3, #2
 80161c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80161c8:	69fa      	ldr	r2, [r7, #28]
 80161ca:	69bb      	ldr	r3, [r7, #24]
 80161cc:	429a      	cmp	r2, r3
 80161ce:	d901      	bls.n	80161d4 <create_chain+0x88>
 80161d0:	2300      	movs	r3, #0
 80161d2:	e04f      	b.n	8016274 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80161d4:	69f9      	ldr	r1, [r7, #28]
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f7ff fdc7 	bl	8015d6a <get_fat>
 80161dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d00e      	beq.n	8016202 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	2b01      	cmp	r3, #1
 80161e8:	d003      	beq.n	80161f2 <create_chain+0xa6>
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161f0:	d101      	bne.n	80161f6 <create_chain+0xaa>
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	e03e      	b.n	8016274 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80161f6:	69fa      	ldr	r2, [r7, #28]
 80161f8:	69bb      	ldr	r3, [r7, #24]
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d1da      	bne.n	80161b4 <create_chain+0x68>
 80161fe:	2300      	movs	r3, #0
 8016200:	e038      	b.n	8016274 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8016202:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8016204:	f04f 32ff 	mov.w	r2, #4294967295
 8016208:	69f9      	ldr	r1, [r7, #28]
 801620a:	6938      	ldr	r0, [r7, #16]
 801620c:	f7ff fe52 	bl	8015eb4 <put_fat>
 8016210:	4603      	mov	r3, r0
 8016212:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8016214:	7dfb      	ldrb	r3, [r7, #23]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d109      	bne.n	801622e <create_chain+0xe2>
 801621a:	683b      	ldr	r3, [r7, #0]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d006      	beq.n	801622e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8016220:	69fa      	ldr	r2, [r7, #28]
 8016222:	6839      	ldr	r1, [r7, #0]
 8016224:	6938      	ldr	r0, [r7, #16]
 8016226:	f7ff fe45 	bl	8015eb4 <put_fat>
 801622a:	4603      	mov	r3, r0
 801622c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801622e:	7dfb      	ldrb	r3, [r7, #23]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d116      	bne.n	8016262 <create_chain+0x116>
		fs->last_clst = ncl;
 8016234:	693b      	ldr	r3, [r7, #16]
 8016236:	69fa      	ldr	r2, [r7, #28]
 8016238:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	691a      	ldr	r2, [r3, #16]
 801623e:	693b      	ldr	r3, [r7, #16]
 8016240:	695b      	ldr	r3, [r3, #20]
 8016242:	3b02      	subs	r3, #2
 8016244:	429a      	cmp	r2, r3
 8016246:	d804      	bhi.n	8016252 <create_chain+0x106>
 8016248:	693b      	ldr	r3, [r7, #16]
 801624a:	691b      	ldr	r3, [r3, #16]
 801624c:	1e5a      	subs	r2, r3, #1
 801624e:	693b      	ldr	r3, [r7, #16]
 8016250:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8016252:	693b      	ldr	r3, [r7, #16]
 8016254:	791b      	ldrb	r3, [r3, #4]
 8016256:	f043 0301 	orr.w	r3, r3, #1
 801625a:	b2da      	uxtb	r2, r3
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	711a      	strb	r2, [r3, #4]
 8016260:	e007      	b.n	8016272 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8016262:	7dfb      	ldrb	r3, [r7, #23]
 8016264:	2b01      	cmp	r3, #1
 8016266:	d102      	bne.n	801626e <create_chain+0x122>
 8016268:	f04f 33ff 	mov.w	r3, #4294967295
 801626c:	e000      	b.n	8016270 <create_chain+0x124>
 801626e:	2301      	movs	r3, #1
 8016270:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8016272:	69fb      	ldr	r3, [r7, #28]
}
 8016274:	4618      	mov	r0, r3
 8016276:	3720      	adds	r7, #32
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}

0801627c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801627c:	b480      	push	{r7}
 801627e:	b087      	sub	sp, #28
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016290:	3304      	adds	r3, #4
 8016292:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016294:	683b      	ldr	r3, [r7, #0]
 8016296:	0a5b      	lsrs	r3, r3, #9
 8016298:	68fa      	ldr	r2, [r7, #12]
 801629a:	8952      	ldrh	r2, [r2, #10]
 801629c:	fbb3 f3f2 	udiv	r3, r3, r2
 80162a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	1d1a      	adds	r2, r3, #4
 80162a6:	613a      	str	r2, [r7, #16]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80162ac:	68bb      	ldr	r3, [r7, #8]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d101      	bne.n	80162b6 <clmt_clust+0x3a>
 80162b2:	2300      	movs	r3, #0
 80162b4:	e010      	b.n	80162d8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80162b6:	697a      	ldr	r2, [r7, #20]
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	429a      	cmp	r2, r3
 80162bc:	d307      	bcc.n	80162ce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80162be:	697a      	ldr	r2, [r7, #20]
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	1ad3      	subs	r3, r2, r3
 80162c4:	617b      	str	r3, [r7, #20]
 80162c6:	693b      	ldr	r3, [r7, #16]
 80162c8:	3304      	adds	r3, #4
 80162ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80162cc:	e7e9      	b.n	80162a2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80162ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80162d0:	693b      	ldr	r3, [r7, #16]
 80162d2:	681a      	ldr	r2, [r3, #0]
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	4413      	add	r3, r2
}
 80162d8:	4618      	mov	r0, r3
 80162da:	371c      	adds	r7, #28
 80162dc:	46bd      	mov	sp, r7
 80162de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e2:	4770      	bx	lr

080162e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80162e4:	b580      	push	{r7, lr}
 80162e6:	b086      	sub	sp, #24
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
 80162ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80162fa:	d204      	bcs.n	8016306 <dir_sdi+0x22>
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	f003 031f 	and.w	r3, r3, #31
 8016302:	2b00      	cmp	r3, #0
 8016304:	d001      	beq.n	801630a <dir_sdi+0x26>
		return FR_INT_ERR;
 8016306:	2302      	movs	r3, #2
 8016308:	e063      	b.n	80163d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	683a      	ldr	r2, [r7, #0]
 801630e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	689b      	ldr	r3, [r3, #8]
 8016314:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016316:	697b      	ldr	r3, [r7, #20]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d106      	bne.n	801632a <dir_sdi+0x46>
 801631c:	693b      	ldr	r3, [r7, #16]
 801631e:	781b      	ldrb	r3, [r3, #0]
 8016320:	2b02      	cmp	r3, #2
 8016322:	d902      	bls.n	801632a <dir_sdi+0x46>
		clst = fs->dirbase;
 8016324:	693b      	ldr	r3, [r7, #16]
 8016326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016328:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d10c      	bne.n	801634a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8016330:	683b      	ldr	r3, [r7, #0]
 8016332:	095b      	lsrs	r3, r3, #5
 8016334:	693a      	ldr	r2, [r7, #16]
 8016336:	8912      	ldrh	r2, [r2, #8]
 8016338:	4293      	cmp	r3, r2
 801633a:	d301      	bcc.n	8016340 <dir_sdi+0x5c>
 801633c:	2302      	movs	r3, #2
 801633e:	e048      	b.n	80163d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8016340:	693b      	ldr	r3, [r7, #16]
 8016342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	61da      	str	r2, [r3, #28]
 8016348:	e029      	b.n	801639e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	895b      	ldrh	r3, [r3, #10]
 801634e:	025b      	lsls	r3, r3, #9
 8016350:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016352:	e019      	b.n	8016388 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	6979      	ldr	r1, [r7, #20]
 8016358:	4618      	mov	r0, r3
 801635a:	f7ff fd06 	bl	8015d6a <get_fat>
 801635e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016360:	697b      	ldr	r3, [r7, #20]
 8016362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016366:	d101      	bne.n	801636c <dir_sdi+0x88>
 8016368:	2301      	movs	r3, #1
 801636a:	e032      	b.n	80163d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	2b01      	cmp	r3, #1
 8016370:	d904      	bls.n	801637c <dir_sdi+0x98>
 8016372:	693b      	ldr	r3, [r7, #16]
 8016374:	695b      	ldr	r3, [r3, #20]
 8016376:	697a      	ldr	r2, [r7, #20]
 8016378:	429a      	cmp	r2, r3
 801637a:	d301      	bcc.n	8016380 <dir_sdi+0x9c>
 801637c:	2302      	movs	r3, #2
 801637e:	e028      	b.n	80163d2 <dir_sdi+0xee>
			ofs -= csz;
 8016380:	683a      	ldr	r2, [r7, #0]
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	1ad3      	subs	r3, r2, r3
 8016386:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016388:	683a      	ldr	r2, [r7, #0]
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	429a      	cmp	r2, r3
 801638e:	d2e1      	bcs.n	8016354 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8016390:	6979      	ldr	r1, [r7, #20]
 8016392:	6938      	ldr	r0, [r7, #16]
 8016394:	f7ff fcca 	bl	8015d2c <clust2sect>
 8016398:	4602      	mov	r2, r0
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	697a      	ldr	r2, [r7, #20]
 80163a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	69db      	ldr	r3, [r3, #28]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d101      	bne.n	80163b0 <dir_sdi+0xcc>
 80163ac:	2302      	movs	r3, #2
 80163ae:	e010      	b.n	80163d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	69da      	ldr	r2, [r3, #28]
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	0a5b      	lsrs	r3, r3, #9
 80163b8:	441a      	add	r2, r3
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80163be:	693b      	ldr	r3, [r7, #16]
 80163c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80163c4:	683b      	ldr	r3, [r7, #0]
 80163c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80163ca:	441a      	add	r2, r3
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80163d0:	2300      	movs	r3, #0
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	3718      	adds	r7, #24
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}

080163da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80163da:	b580      	push	{r7, lr}
 80163dc:	b086      	sub	sp, #24
 80163de:	af00      	add	r7, sp, #0
 80163e0:	6078      	str	r0, [r7, #4]
 80163e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	695b      	ldr	r3, [r3, #20]
 80163ee:	3320      	adds	r3, #32
 80163f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	69db      	ldr	r3, [r3, #28]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d003      	beq.n	8016402 <dir_next+0x28>
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016400:	d301      	bcc.n	8016406 <dir_next+0x2c>
 8016402:	2304      	movs	r3, #4
 8016404:	e0aa      	b.n	801655c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016406:	68bb      	ldr	r3, [r7, #8]
 8016408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801640c:	2b00      	cmp	r3, #0
 801640e:	f040 8098 	bne.w	8016542 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	69db      	ldr	r3, [r3, #28]
 8016416:	1c5a      	adds	r2, r3, #1
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	699b      	ldr	r3, [r3, #24]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d10b      	bne.n	801643c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016424:	68bb      	ldr	r3, [r7, #8]
 8016426:	095b      	lsrs	r3, r3, #5
 8016428:	68fa      	ldr	r2, [r7, #12]
 801642a:	8912      	ldrh	r2, [r2, #8]
 801642c:	4293      	cmp	r3, r2
 801642e:	f0c0 8088 	bcc.w	8016542 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2200      	movs	r2, #0
 8016436:	61da      	str	r2, [r3, #28]
 8016438:	2304      	movs	r3, #4
 801643a:	e08f      	b.n	801655c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801643c:	68bb      	ldr	r3, [r7, #8]
 801643e:	0a5b      	lsrs	r3, r3, #9
 8016440:	68fa      	ldr	r2, [r7, #12]
 8016442:	8952      	ldrh	r2, [r2, #10]
 8016444:	3a01      	subs	r2, #1
 8016446:	4013      	ands	r3, r2
 8016448:	2b00      	cmp	r3, #0
 801644a:	d17a      	bne.n	8016542 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801644c:	687a      	ldr	r2, [r7, #4]
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	699b      	ldr	r3, [r3, #24]
 8016452:	4619      	mov	r1, r3
 8016454:	4610      	mov	r0, r2
 8016456:	f7ff fc88 	bl	8015d6a <get_fat>
 801645a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801645c:	697b      	ldr	r3, [r7, #20]
 801645e:	2b01      	cmp	r3, #1
 8016460:	d801      	bhi.n	8016466 <dir_next+0x8c>
 8016462:	2302      	movs	r3, #2
 8016464:	e07a      	b.n	801655c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8016466:	697b      	ldr	r3, [r7, #20]
 8016468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801646c:	d101      	bne.n	8016472 <dir_next+0x98>
 801646e:	2301      	movs	r3, #1
 8016470:	e074      	b.n	801655c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	695b      	ldr	r3, [r3, #20]
 8016476:	697a      	ldr	r2, [r7, #20]
 8016478:	429a      	cmp	r2, r3
 801647a:	d358      	bcc.n	801652e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d104      	bne.n	801648c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	2200      	movs	r2, #0
 8016486:	61da      	str	r2, [r3, #28]
 8016488:	2304      	movs	r3, #4
 801648a:	e067      	b.n	801655c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801648c:	687a      	ldr	r2, [r7, #4]
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	699b      	ldr	r3, [r3, #24]
 8016492:	4619      	mov	r1, r3
 8016494:	4610      	mov	r0, r2
 8016496:	f7ff fe59 	bl	801614c <create_chain>
 801649a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801649c:	697b      	ldr	r3, [r7, #20]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d101      	bne.n	80164a6 <dir_next+0xcc>
 80164a2:	2307      	movs	r3, #7
 80164a4:	e05a      	b.n	801655c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80164a6:	697b      	ldr	r3, [r7, #20]
 80164a8:	2b01      	cmp	r3, #1
 80164aa:	d101      	bne.n	80164b0 <dir_next+0xd6>
 80164ac:	2302      	movs	r3, #2
 80164ae:	e055      	b.n	801655c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164b6:	d101      	bne.n	80164bc <dir_next+0xe2>
 80164b8:	2301      	movs	r3, #1
 80164ba:	e04f      	b.n	801655c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80164bc:	68f8      	ldr	r0, [r7, #12]
 80164be:	f7ff fb55 	bl	8015b6c <sync_window>
 80164c2:	4603      	mov	r3, r0
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d001      	beq.n	80164cc <dir_next+0xf2>
 80164c8:	2301      	movs	r3, #1
 80164ca:	e047      	b.n	801655c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	3330      	adds	r3, #48	; 0x30
 80164d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80164d4:	2100      	movs	r1, #0
 80164d6:	4618      	mov	r0, r3
 80164d8:	f7ff f97f 	bl	80157da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80164dc:	2300      	movs	r3, #0
 80164de:	613b      	str	r3, [r7, #16]
 80164e0:	6979      	ldr	r1, [r7, #20]
 80164e2:	68f8      	ldr	r0, [r7, #12]
 80164e4:	f7ff fc22 	bl	8015d2c <clust2sect>
 80164e8:	4602      	mov	r2, r0
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80164ee:	e012      	b.n	8016516 <dir_next+0x13c>
						fs->wflag = 1;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	2201      	movs	r2, #1
 80164f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80164f6:	68f8      	ldr	r0, [r7, #12]
 80164f8:	f7ff fb38 	bl	8015b6c <sync_window>
 80164fc:	4603      	mov	r3, r0
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d001      	beq.n	8016506 <dir_next+0x12c>
 8016502:	2301      	movs	r3, #1
 8016504:	e02a      	b.n	801655c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016506:	693b      	ldr	r3, [r7, #16]
 8016508:	3301      	adds	r3, #1
 801650a:	613b      	str	r3, [r7, #16]
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016510:	1c5a      	adds	r2, r3, #1
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	62da      	str	r2, [r3, #44]	; 0x2c
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	895b      	ldrh	r3, [r3, #10]
 801651a:	461a      	mov	r2, r3
 801651c:	693b      	ldr	r3, [r7, #16]
 801651e:	4293      	cmp	r3, r2
 8016520:	d3e6      	bcc.n	80164f0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	1ad2      	subs	r2, r2, r3
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	697a      	ldr	r2, [r7, #20]
 8016532:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8016534:	6979      	ldr	r1, [r7, #20]
 8016536:	68f8      	ldr	r0, [r7, #12]
 8016538:	f7ff fbf8 	bl	8015d2c <clust2sect>
 801653c:	4602      	mov	r2, r0
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	68ba      	ldr	r2, [r7, #8]
 8016546:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801654e:	68bb      	ldr	r3, [r7, #8]
 8016550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016554:	441a      	add	r2, r3
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801655a:	2300      	movs	r3, #0
}
 801655c:	4618      	mov	r0, r3
 801655e:	3718      	adds	r7, #24
 8016560:	46bd      	mov	sp, r7
 8016562:	bd80      	pop	{r7, pc}

08016564 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b086      	sub	sp, #24
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
 801656c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8016574:	2100      	movs	r1, #0
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	f7ff feb4 	bl	80162e4 <dir_sdi>
 801657c:	4603      	mov	r3, r0
 801657e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016580:	7dfb      	ldrb	r3, [r7, #23]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d12b      	bne.n	80165de <dir_alloc+0x7a>
		n = 0;
 8016586:	2300      	movs	r3, #0
 8016588:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	69db      	ldr	r3, [r3, #28]
 801658e:	4619      	mov	r1, r3
 8016590:	68f8      	ldr	r0, [r7, #12]
 8016592:	f7ff fb2f 	bl	8015bf4 <move_window>
 8016596:	4603      	mov	r3, r0
 8016598:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801659a:	7dfb      	ldrb	r3, [r7, #23]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d11d      	bne.n	80165dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	6a1b      	ldr	r3, [r3, #32]
 80165a4:	781b      	ldrb	r3, [r3, #0]
 80165a6:	2be5      	cmp	r3, #229	; 0xe5
 80165a8:	d004      	beq.n	80165b4 <dir_alloc+0x50>
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	6a1b      	ldr	r3, [r3, #32]
 80165ae:	781b      	ldrb	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d107      	bne.n	80165c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80165b4:	693b      	ldr	r3, [r7, #16]
 80165b6:	3301      	adds	r3, #1
 80165b8:	613b      	str	r3, [r7, #16]
 80165ba:	693a      	ldr	r2, [r7, #16]
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	429a      	cmp	r2, r3
 80165c0:	d102      	bne.n	80165c8 <dir_alloc+0x64>
 80165c2:	e00c      	b.n	80165de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80165c4:	2300      	movs	r3, #0
 80165c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80165c8:	2101      	movs	r1, #1
 80165ca:	6878      	ldr	r0, [r7, #4]
 80165cc:	f7ff ff05 	bl	80163da <dir_next>
 80165d0:	4603      	mov	r3, r0
 80165d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80165d4:	7dfb      	ldrb	r3, [r7, #23]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d0d7      	beq.n	801658a <dir_alloc+0x26>
 80165da:	e000      	b.n	80165de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80165dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80165de:	7dfb      	ldrb	r3, [r7, #23]
 80165e0:	2b04      	cmp	r3, #4
 80165e2:	d101      	bne.n	80165e8 <dir_alloc+0x84>
 80165e4:	2307      	movs	r3, #7
 80165e6:	75fb      	strb	r3, [r7, #23]
	return res;
 80165e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80165ea:	4618      	mov	r0, r3
 80165ec:	3718      	adds	r7, #24
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}

080165f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80165f2:	b580      	push	{r7, lr}
 80165f4:	b084      	sub	sp, #16
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
 80165fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80165fc:	683b      	ldr	r3, [r7, #0]
 80165fe:	331a      	adds	r3, #26
 8016600:	4618      	mov	r0, r3
 8016602:	f7ff f847 	bl	8015694 <ld_word>
 8016606:	4603      	mov	r3, r0
 8016608:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	781b      	ldrb	r3, [r3, #0]
 801660e:	2b03      	cmp	r3, #3
 8016610:	d109      	bne.n	8016626 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	3314      	adds	r3, #20
 8016616:	4618      	mov	r0, r3
 8016618:	f7ff f83c 	bl	8015694 <ld_word>
 801661c:	4603      	mov	r3, r0
 801661e:	041b      	lsls	r3, r3, #16
 8016620:	68fa      	ldr	r2, [r7, #12]
 8016622:	4313      	orrs	r3, r2
 8016624:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016626:	68fb      	ldr	r3, [r7, #12]
}
 8016628:	4618      	mov	r0, r3
 801662a:	3710      	adds	r7, #16
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}

08016630 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b084      	sub	sp, #16
 8016634:	af00      	add	r7, sp, #0
 8016636:	60f8      	str	r0, [r7, #12]
 8016638:	60b9      	str	r1, [r7, #8]
 801663a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801663c:	68bb      	ldr	r3, [r7, #8]
 801663e:	331a      	adds	r3, #26
 8016640:	687a      	ldr	r2, [r7, #4]
 8016642:	b292      	uxth	r2, r2
 8016644:	4611      	mov	r1, r2
 8016646:	4618      	mov	r0, r3
 8016648:	f7ff f85f 	bl	801570a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	781b      	ldrb	r3, [r3, #0]
 8016650:	2b03      	cmp	r3, #3
 8016652:	d109      	bne.n	8016668 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	f103 0214 	add.w	r2, r3, #20
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	0c1b      	lsrs	r3, r3, #16
 801665e:	b29b      	uxth	r3, r3
 8016660:	4619      	mov	r1, r3
 8016662:	4610      	mov	r0, r2
 8016664:	f7ff f851 	bl	801570a <st_word>
	}
}
 8016668:	bf00      	nop
 801666a:	3710      	adds	r7, #16
 801666c:	46bd      	mov	sp, r7
 801666e:	bd80      	pop	{r7, pc}

08016670 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b086      	sub	sp, #24
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801667e:	2100      	movs	r1, #0
 8016680:	6878      	ldr	r0, [r7, #4]
 8016682:	f7ff fe2f 	bl	80162e4 <dir_sdi>
 8016686:	4603      	mov	r3, r0
 8016688:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801668a:	7dfb      	ldrb	r3, [r7, #23]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d001      	beq.n	8016694 <dir_find+0x24>
 8016690:	7dfb      	ldrb	r3, [r7, #23]
 8016692:	e03e      	b.n	8016712 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	69db      	ldr	r3, [r3, #28]
 8016698:	4619      	mov	r1, r3
 801669a:	6938      	ldr	r0, [r7, #16]
 801669c:	f7ff faaa 	bl	8015bf4 <move_window>
 80166a0:	4603      	mov	r3, r0
 80166a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80166a4:	7dfb      	ldrb	r3, [r7, #23]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d12f      	bne.n	801670a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	6a1b      	ldr	r3, [r3, #32]
 80166ae:	781b      	ldrb	r3, [r3, #0]
 80166b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80166b2:	7bfb      	ldrb	r3, [r7, #15]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d102      	bne.n	80166be <dir_find+0x4e>
 80166b8:	2304      	movs	r3, #4
 80166ba:	75fb      	strb	r3, [r7, #23]
 80166bc:	e028      	b.n	8016710 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	6a1b      	ldr	r3, [r3, #32]
 80166c2:	330b      	adds	r3, #11
 80166c4:	781b      	ldrb	r3, [r3, #0]
 80166c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80166ca:	b2da      	uxtb	r2, r3
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	6a1b      	ldr	r3, [r3, #32]
 80166d4:	330b      	adds	r3, #11
 80166d6:	781b      	ldrb	r3, [r3, #0]
 80166d8:	f003 0308 	and.w	r3, r3, #8
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d10a      	bne.n	80166f6 <dir_find+0x86>
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	6a18      	ldr	r0, [r3, #32]
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	3324      	adds	r3, #36	; 0x24
 80166e8:	220b      	movs	r2, #11
 80166ea:	4619      	mov	r1, r3
 80166ec:	f7ff f88f 	bl	801580e <mem_cmp>
 80166f0:	4603      	mov	r3, r0
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d00b      	beq.n	801670e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80166f6:	2100      	movs	r1, #0
 80166f8:	6878      	ldr	r0, [r7, #4]
 80166fa:	f7ff fe6e 	bl	80163da <dir_next>
 80166fe:	4603      	mov	r3, r0
 8016700:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8016702:	7dfb      	ldrb	r3, [r7, #23]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d0c5      	beq.n	8016694 <dir_find+0x24>
 8016708:	e002      	b.n	8016710 <dir_find+0xa0>
		if (res != FR_OK) break;
 801670a:	bf00      	nop
 801670c:	e000      	b.n	8016710 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801670e:	bf00      	nop

	return res;
 8016710:	7dfb      	ldrb	r3, [r7, #23]
}
 8016712:	4618      	mov	r0, r3
 8016714:	3718      	adds	r7, #24
 8016716:	46bd      	mov	sp, r7
 8016718:	bd80      	pop	{r7, pc}

0801671a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801671a:	b580      	push	{r7, lr}
 801671c:	b084      	sub	sp, #16
 801671e:	af00      	add	r7, sp, #0
 8016720:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8016728:	2101      	movs	r1, #1
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f7ff ff1a 	bl	8016564 <dir_alloc>
 8016730:	4603      	mov	r3, r0
 8016732:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8016734:	7bfb      	ldrb	r3, [r7, #15]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d11c      	bne.n	8016774 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	69db      	ldr	r3, [r3, #28]
 801673e:	4619      	mov	r1, r3
 8016740:	68b8      	ldr	r0, [r7, #8]
 8016742:	f7ff fa57 	bl	8015bf4 <move_window>
 8016746:	4603      	mov	r3, r0
 8016748:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801674a:	7bfb      	ldrb	r3, [r7, #15]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d111      	bne.n	8016774 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	6a1b      	ldr	r3, [r3, #32]
 8016754:	2220      	movs	r2, #32
 8016756:	2100      	movs	r1, #0
 8016758:	4618      	mov	r0, r3
 801675a:	f7ff f83e 	bl	80157da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	6a18      	ldr	r0, [r3, #32]
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	3324      	adds	r3, #36	; 0x24
 8016766:	220b      	movs	r2, #11
 8016768:	4619      	mov	r1, r3
 801676a:	f7ff f815 	bl	8015798 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801676e:	68bb      	ldr	r3, [r7, #8]
 8016770:	2201      	movs	r2, #1
 8016772:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8016774:	7bfb      	ldrb	r3, [r7, #15]
}
 8016776:	4618      	mov	r0, r3
 8016778:	3710      	adds	r7, #16
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
	...

08016780 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b088      	sub	sp, #32
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	60fb      	str	r3, [r7, #12]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	3324      	adds	r3, #36	; 0x24
 8016794:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8016796:	220b      	movs	r2, #11
 8016798:	2120      	movs	r1, #32
 801679a:	68b8      	ldr	r0, [r7, #8]
 801679c:	f7ff f81d 	bl	80157da <mem_set>
	si = i = 0; ni = 8;
 80167a0:	2300      	movs	r3, #0
 80167a2:	613b      	str	r3, [r7, #16]
 80167a4:	693b      	ldr	r3, [r7, #16]
 80167a6:	617b      	str	r3, [r7, #20]
 80167a8:	2308      	movs	r3, #8
 80167aa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80167ac:	697b      	ldr	r3, [r7, #20]
 80167ae:	1c5a      	adds	r2, r3, #1
 80167b0:	617a      	str	r2, [r7, #20]
 80167b2:	68fa      	ldr	r2, [r7, #12]
 80167b4:	4413      	add	r3, r2
 80167b6:	781b      	ldrb	r3, [r3, #0]
 80167b8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80167ba:	7ffb      	ldrb	r3, [r7, #31]
 80167bc:	2b20      	cmp	r3, #32
 80167be:	d94e      	bls.n	801685e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80167c0:	7ffb      	ldrb	r3, [r7, #31]
 80167c2:	2b2f      	cmp	r3, #47	; 0x2f
 80167c4:	d006      	beq.n	80167d4 <create_name+0x54>
 80167c6:	7ffb      	ldrb	r3, [r7, #31]
 80167c8:	2b5c      	cmp	r3, #92	; 0x5c
 80167ca:	d110      	bne.n	80167ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80167cc:	e002      	b.n	80167d4 <create_name+0x54>
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	3301      	adds	r3, #1
 80167d2:	617b      	str	r3, [r7, #20]
 80167d4:	68fa      	ldr	r2, [r7, #12]
 80167d6:	697b      	ldr	r3, [r7, #20]
 80167d8:	4413      	add	r3, r2
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	2b2f      	cmp	r3, #47	; 0x2f
 80167de:	d0f6      	beq.n	80167ce <create_name+0x4e>
 80167e0:	68fa      	ldr	r2, [r7, #12]
 80167e2:	697b      	ldr	r3, [r7, #20]
 80167e4:	4413      	add	r3, r2
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	2b5c      	cmp	r3, #92	; 0x5c
 80167ea:	d0f0      	beq.n	80167ce <create_name+0x4e>
			break;
 80167ec:	e038      	b.n	8016860 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80167ee:	7ffb      	ldrb	r3, [r7, #31]
 80167f0:	2b2e      	cmp	r3, #46	; 0x2e
 80167f2:	d003      	beq.n	80167fc <create_name+0x7c>
 80167f4:	693a      	ldr	r2, [r7, #16]
 80167f6:	69bb      	ldr	r3, [r7, #24]
 80167f8:	429a      	cmp	r2, r3
 80167fa:	d30c      	bcc.n	8016816 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80167fc:	69bb      	ldr	r3, [r7, #24]
 80167fe:	2b0b      	cmp	r3, #11
 8016800:	d002      	beq.n	8016808 <create_name+0x88>
 8016802:	7ffb      	ldrb	r3, [r7, #31]
 8016804:	2b2e      	cmp	r3, #46	; 0x2e
 8016806:	d001      	beq.n	801680c <create_name+0x8c>
 8016808:	2306      	movs	r3, #6
 801680a:	e044      	b.n	8016896 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801680c:	2308      	movs	r3, #8
 801680e:	613b      	str	r3, [r7, #16]
 8016810:	230b      	movs	r3, #11
 8016812:	61bb      	str	r3, [r7, #24]
			continue;
 8016814:	e022      	b.n	801685c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8016816:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801681a:	2b00      	cmp	r3, #0
 801681c:	da04      	bge.n	8016828 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801681e:	7ffb      	ldrb	r3, [r7, #31]
 8016820:	3b80      	subs	r3, #128	; 0x80
 8016822:	4a1f      	ldr	r2, [pc, #124]	; (80168a0 <create_name+0x120>)
 8016824:	5cd3      	ldrb	r3, [r2, r3]
 8016826:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8016828:	7ffb      	ldrb	r3, [r7, #31]
 801682a:	4619      	mov	r1, r3
 801682c:	481d      	ldr	r0, [pc, #116]	; (80168a4 <create_name+0x124>)
 801682e:	f7ff f815 	bl	801585c <chk_chr>
 8016832:	4603      	mov	r3, r0
 8016834:	2b00      	cmp	r3, #0
 8016836:	d001      	beq.n	801683c <create_name+0xbc>
 8016838:	2306      	movs	r3, #6
 801683a:	e02c      	b.n	8016896 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801683c:	7ffb      	ldrb	r3, [r7, #31]
 801683e:	2b60      	cmp	r3, #96	; 0x60
 8016840:	d905      	bls.n	801684e <create_name+0xce>
 8016842:	7ffb      	ldrb	r3, [r7, #31]
 8016844:	2b7a      	cmp	r3, #122	; 0x7a
 8016846:	d802      	bhi.n	801684e <create_name+0xce>
 8016848:	7ffb      	ldrb	r3, [r7, #31]
 801684a:	3b20      	subs	r3, #32
 801684c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801684e:	693b      	ldr	r3, [r7, #16]
 8016850:	1c5a      	adds	r2, r3, #1
 8016852:	613a      	str	r2, [r7, #16]
 8016854:	68ba      	ldr	r2, [r7, #8]
 8016856:	4413      	add	r3, r2
 8016858:	7ffa      	ldrb	r2, [r7, #31]
 801685a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801685c:	e7a6      	b.n	80167ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801685e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8016860:	68fa      	ldr	r2, [r7, #12]
 8016862:	697b      	ldr	r3, [r7, #20]
 8016864:	441a      	add	r2, r3
 8016866:	683b      	ldr	r3, [r7, #0]
 8016868:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801686a:	693b      	ldr	r3, [r7, #16]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d101      	bne.n	8016874 <create_name+0xf4>
 8016870:	2306      	movs	r3, #6
 8016872:	e010      	b.n	8016896 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016874:	68bb      	ldr	r3, [r7, #8]
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	2be5      	cmp	r3, #229	; 0xe5
 801687a:	d102      	bne.n	8016882 <create_name+0x102>
 801687c:	68bb      	ldr	r3, [r7, #8]
 801687e:	2205      	movs	r2, #5
 8016880:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016882:	7ffb      	ldrb	r3, [r7, #31]
 8016884:	2b20      	cmp	r3, #32
 8016886:	d801      	bhi.n	801688c <create_name+0x10c>
 8016888:	2204      	movs	r2, #4
 801688a:	e000      	b.n	801688e <create_name+0x10e>
 801688c:	2200      	movs	r2, #0
 801688e:	68bb      	ldr	r3, [r7, #8]
 8016890:	330b      	adds	r3, #11
 8016892:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8016894:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8016896:	4618      	mov	r0, r3
 8016898:	3720      	adds	r7, #32
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}
 801689e:	bf00      	nop
 80168a0:	0801a070 	.word	0x0801a070
 80168a4:	08019f94 	.word	0x08019f94

080168a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b086      	sub	sp, #24
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
 80168b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80168b6:	693b      	ldr	r3, [r7, #16]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80168bc:	e002      	b.n	80168c4 <follow_path+0x1c>
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	3301      	adds	r3, #1
 80168c2:	603b      	str	r3, [r7, #0]
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	781b      	ldrb	r3, [r3, #0]
 80168c8:	2b2f      	cmp	r3, #47	; 0x2f
 80168ca:	d0f8      	beq.n	80168be <follow_path+0x16>
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	781b      	ldrb	r3, [r3, #0]
 80168d0:	2b5c      	cmp	r3, #92	; 0x5c
 80168d2:	d0f4      	beq.n	80168be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80168d4:	693b      	ldr	r3, [r7, #16]
 80168d6:	2200      	movs	r2, #0
 80168d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	781b      	ldrb	r3, [r3, #0]
 80168de:	2b1f      	cmp	r3, #31
 80168e0:	d80a      	bhi.n	80168f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2280      	movs	r2, #128	; 0x80
 80168e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80168ea:	2100      	movs	r1, #0
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	f7ff fcf9 	bl	80162e4 <dir_sdi>
 80168f2:	4603      	mov	r3, r0
 80168f4:	75fb      	strb	r3, [r7, #23]
 80168f6:	e043      	b.n	8016980 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80168f8:	463b      	mov	r3, r7
 80168fa:	4619      	mov	r1, r3
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f7ff ff3f 	bl	8016780 <create_name>
 8016902:	4603      	mov	r3, r0
 8016904:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016906:	7dfb      	ldrb	r3, [r7, #23]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d134      	bne.n	8016976 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f7ff feaf 	bl	8016670 <dir_find>
 8016912:	4603      	mov	r3, r0
 8016914:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801691c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801691e:	7dfb      	ldrb	r3, [r7, #23]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d00a      	beq.n	801693a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016924:	7dfb      	ldrb	r3, [r7, #23]
 8016926:	2b04      	cmp	r3, #4
 8016928:	d127      	bne.n	801697a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801692a:	7afb      	ldrb	r3, [r7, #11]
 801692c:	f003 0304 	and.w	r3, r3, #4
 8016930:	2b00      	cmp	r3, #0
 8016932:	d122      	bne.n	801697a <follow_path+0xd2>
 8016934:	2305      	movs	r3, #5
 8016936:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016938:	e01f      	b.n	801697a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801693a:	7afb      	ldrb	r3, [r7, #11]
 801693c:	f003 0304 	and.w	r3, r3, #4
 8016940:	2b00      	cmp	r3, #0
 8016942:	d11c      	bne.n	801697e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016944:	693b      	ldr	r3, [r7, #16]
 8016946:	799b      	ldrb	r3, [r3, #6]
 8016948:	f003 0310 	and.w	r3, r3, #16
 801694c:	2b00      	cmp	r3, #0
 801694e:	d102      	bne.n	8016956 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016950:	2305      	movs	r3, #5
 8016952:	75fb      	strb	r3, [r7, #23]
 8016954:	e014      	b.n	8016980 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	695b      	ldr	r3, [r3, #20]
 8016960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016964:	4413      	add	r3, r2
 8016966:	4619      	mov	r1, r3
 8016968:	68f8      	ldr	r0, [r7, #12]
 801696a:	f7ff fe42 	bl	80165f2 <ld_clust>
 801696e:	4602      	mov	r2, r0
 8016970:	693b      	ldr	r3, [r7, #16]
 8016972:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016974:	e7c0      	b.n	80168f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8016976:	bf00      	nop
 8016978:	e002      	b.n	8016980 <follow_path+0xd8>
				break;
 801697a:	bf00      	nop
 801697c:	e000      	b.n	8016980 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801697e:	bf00      	nop
			}
		}
	}

	return res;
 8016980:	7dfb      	ldrb	r3, [r7, #23]
}
 8016982:	4618      	mov	r0, r3
 8016984:	3718      	adds	r7, #24
 8016986:	46bd      	mov	sp, r7
 8016988:	bd80      	pop	{r7, pc}

0801698a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801698a:	b480      	push	{r7}
 801698c:	b087      	sub	sp, #28
 801698e:	af00      	add	r7, sp, #0
 8016990:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016992:	f04f 33ff 	mov.w	r3, #4294967295
 8016996:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d031      	beq.n	8016a04 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	617b      	str	r3, [r7, #20]
 80169a6:	e002      	b.n	80169ae <get_ldnumber+0x24>
 80169a8:	697b      	ldr	r3, [r7, #20]
 80169aa:	3301      	adds	r3, #1
 80169ac:	617b      	str	r3, [r7, #20]
 80169ae:	697b      	ldr	r3, [r7, #20]
 80169b0:	781b      	ldrb	r3, [r3, #0]
 80169b2:	2b20      	cmp	r3, #32
 80169b4:	d903      	bls.n	80169be <get_ldnumber+0x34>
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	781b      	ldrb	r3, [r3, #0]
 80169ba:	2b3a      	cmp	r3, #58	; 0x3a
 80169bc:	d1f4      	bne.n	80169a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80169be:	697b      	ldr	r3, [r7, #20]
 80169c0:	781b      	ldrb	r3, [r3, #0]
 80169c2:	2b3a      	cmp	r3, #58	; 0x3a
 80169c4:	d11c      	bne.n	8016a00 <get_ldnumber+0x76>
			tp = *path;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	1c5a      	adds	r2, r3, #1
 80169d0:	60fa      	str	r2, [r7, #12]
 80169d2:	781b      	ldrb	r3, [r3, #0]
 80169d4:	3b30      	subs	r3, #48	; 0x30
 80169d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80169d8:	68bb      	ldr	r3, [r7, #8]
 80169da:	2b09      	cmp	r3, #9
 80169dc:	d80e      	bhi.n	80169fc <get_ldnumber+0x72>
 80169de:	68fa      	ldr	r2, [r7, #12]
 80169e0:	697b      	ldr	r3, [r7, #20]
 80169e2:	429a      	cmp	r2, r3
 80169e4:	d10a      	bne.n	80169fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80169e6:	68bb      	ldr	r3, [r7, #8]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d107      	bne.n	80169fc <get_ldnumber+0x72>
					vol = (int)i;
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	3301      	adds	r3, #1
 80169f4:	617b      	str	r3, [r7, #20]
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	697a      	ldr	r2, [r7, #20]
 80169fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80169fc:	693b      	ldr	r3, [r7, #16]
 80169fe:	e002      	b.n	8016a06 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016a00:	2300      	movs	r3, #0
 8016a02:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016a04:	693b      	ldr	r3, [r7, #16]
}
 8016a06:	4618      	mov	r0, r3
 8016a08:	371c      	adds	r7, #28
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a10:	4770      	bx	lr
	...

08016a14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b082      	sub	sp, #8
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
 8016a1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	2200      	movs	r2, #0
 8016a22:	70da      	strb	r2, [r3, #3]
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f04f 32ff 	mov.w	r2, #4294967295
 8016a2a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016a2c:	6839      	ldr	r1, [r7, #0]
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f7ff f8e0 	bl	8015bf4 <move_window>
 8016a34:	4603      	mov	r3, r0
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d001      	beq.n	8016a3e <check_fs+0x2a>
 8016a3a:	2304      	movs	r3, #4
 8016a3c:	e038      	b.n	8016ab0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	3330      	adds	r3, #48	; 0x30
 8016a42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016a46:	4618      	mov	r0, r3
 8016a48:	f7fe fe24 	bl	8015694 <ld_word>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	461a      	mov	r2, r3
 8016a50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016a54:	429a      	cmp	r2, r3
 8016a56:	d001      	beq.n	8016a5c <check_fs+0x48>
 8016a58:	2303      	movs	r3, #3
 8016a5a:	e029      	b.n	8016ab0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a62:	2be9      	cmp	r3, #233	; 0xe9
 8016a64:	d009      	beq.n	8016a7a <check_fs+0x66>
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a6c:	2beb      	cmp	r3, #235	; 0xeb
 8016a6e:	d11e      	bne.n	8016aae <check_fs+0x9a>
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8016a76:	2b90      	cmp	r3, #144	; 0x90
 8016a78:	d119      	bne.n	8016aae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	3330      	adds	r3, #48	; 0x30
 8016a7e:	3336      	adds	r3, #54	; 0x36
 8016a80:	4618      	mov	r0, r3
 8016a82:	f7fe fe1f 	bl	80156c4 <ld_dword>
 8016a86:	4603      	mov	r3, r0
 8016a88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016a8c:	4a0a      	ldr	r2, [pc, #40]	; (8016ab8 <check_fs+0xa4>)
 8016a8e:	4293      	cmp	r3, r2
 8016a90:	d101      	bne.n	8016a96 <check_fs+0x82>
 8016a92:	2300      	movs	r3, #0
 8016a94:	e00c      	b.n	8016ab0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	3330      	adds	r3, #48	; 0x30
 8016a9a:	3352      	adds	r3, #82	; 0x52
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	f7fe fe11 	bl	80156c4 <ld_dword>
 8016aa2:	4602      	mov	r2, r0
 8016aa4:	4b05      	ldr	r3, [pc, #20]	; (8016abc <check_fs+0xa8>)
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d101      	bne.n	8016aae <check_fs+0x9a>
 8016aaa:	2300      	movs	r3, #0
 8016aac:	e000      	b.n	8016ab0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016aae:	2302      	movs	r3, #2
}
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	3708      	adds	r7, #8
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd80      	pop	{r7, pc}
 8016ab8:	00544146 	.word	0x00544146
 8016abc:	33544146 	.word	0x33544146

08016ac0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b096      	sub	sp, #88	; 0x58
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	60f8      	str	r0, [r7, #12]
 8016ac8:	60b9      	str	r1, [r7, #8]
 8016aca:	4613      	mov	r3, r2
 8016acc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016ad4:	68f8      	ldr	r0, [r7, #12]
 8016ad6:	f7ff ff58 	bl	801698a <get_ldnumber>
 8016ada:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	da01      	bge.n	8016ae6 <find_volume+0x26>
 8016ae2:	230b      	movs	r3, #11
 8016ae4:	e22e      	b.n	8016f44 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016ae6:	4aa8      	ldr	r2, [pc, #672]	; (8016d88 <find_volume+0x2c8>)
 8016ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016aee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d101      	bne.n	8016afa <find_volume+0x3a>
 8016af6:	230c      	movs	r3, #12
 8016af8:	e224      	b.n	8016f44 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016afa:	68bb      	ldr	r3, [r7, #8]
 8016afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016afe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016b00:	79fb      	ldrb	r3, [r7, #7]
 8016b02:	f023 0301 	bic.w	r3, r3, #1
 8016b06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b0a:	781b      	ldrb	r3, [r3, #0]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d01a      	beq.n	8016b46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b12:	785b      	ldrb	r3, [r3, #1]
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7fe fd1f 	bl	8015558 <disk_status>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016b20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016b24:	f003 0301 	and.w	r3, r3, #1
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d10c      	bne.n	8016b46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016b2c:	79fb      	ldrb	r3, [r7, #7]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d007      	beq.n	8016b42 <find_volume+0x82>
 8016b32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016b36:	f003 0304 	and.w	r3, r3, #4
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d001      	beq.n	8016b42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8016b3e:	230a      	movs	r3, #10
 8016b40:	e200      	b.n	8016f44 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8016b42:	2300      	movs	r3, #0
 8016b44:	e1fe      	b.n	8016f44 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b48:	2200      	movs	r2, #0
 8016b4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b4e:	b2da      	uxtb	r2, r3
 8016b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b56:	785b      	ldrb	r3, [r3, #1]
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f7fe fd17 	bl	801558c <disk_initialize>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016b64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016b68:	f003 0301 	and.w	r3, r3, #1
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d001      	beq.n	8016b74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016b70:	2303      	movs	r3, #3
 8016b72:	e1e7      	b.n	8016f44 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016b74:	79fb      	ldrb	r3, [r7, #7]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d007      	beq.n	8016b8a <find_volume+0xca>
 8016b7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016b7e:	f003 0304 	and.w	r3, r3, #4
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d001      	beq.n	8016b8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016b86:	230a      	movs	r3, #10
 8016b88:	e1dc      	b.n	8016f44 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016b8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016b90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016b92:	f7ff ff3f 	bl	8016a14 <check_fs>
 8016b96:	4603      	mov	r3, r0
 8016b98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ba0:	2b02      	cmp	r3, #2
 8016ba2:	d14b      	bne.n	8016c3c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8016ba8:	e01f      	b.n	8016bea <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bb2:	011b      	lsls	r3, r3, #4
 8016bb4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016bb8:	4413      	add	r3, r2
 8016bba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bbe:	3304      	adds	r3, #4
 8016bc0:	781b      	ldrb	r3, [r3, #0]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d006      	beq.n	8016bd4 <find_volume+0x114>
 8016bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc8:	3308      	adds	r3, #8
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7fe fd7a 	bl	80156c4 <ld_dword>
 8016bd0:	4602      	mov	r2, r0
 8016bd2:	e000      	b.n	8016bd6 <find_volume+0x116>
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bd8:	009b      	lsls	r3, r3, #2
 8016bda:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016bde:	440b      	add	r3, r1
 8016be0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016be6:	3301      	adds	r3, #1
 8016be8:	643b      	str	r3, [r7, #64]	; 0x40
 8016bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bec:	2b03      	cmp	r3, #3
 8016bee:	d9dc      	bls.n	8016baa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d002      	beq.n	8016c00 <find_volume+0x140>
 8016bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bfc:	3b01      	subs	r3, #1
 8016bfe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c02:	009b      	lsls	r3, r3, #2
 8016c04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016c08:	4413      	add	r3, r2
 8016c0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016c0e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d005      	beq.n	8016c22 <find_volume+0x162>
 8016c16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016c18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016c1a:	f7ff fefb 	bl	8016a14 <check_fs>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	e000      	b.n	8016c24 <find_volume+0x164>
 8016c22:	2303      	movs	r3, #3
 8016c24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016c28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016c2c:	2b01      	cmp	r3, #1
 8016c2e:	d905      	bls.n	8016c3c <find_volume+0x17c>
 8016c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c32:	3301      	adds	r3, #1
 8016c34:	643b      	str	r3, [r7, #64]	; 0x40
 8016c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c38:	2b03      	cmp	r3, #3
 8016c3a:	d9e1      	bls.n	8016c00 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016c3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016c40:	2b04      	cmp	r3, #4
 8016c42:	d101      	bne.n	8016c48 <find_volume+0x188>
 8016c44:	2301      	movs	r3, #1
 8016c46:	e17d      	b.n	8016f44 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016c48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016c4c:	2b01      	cmp	r3, #1
 8016c4e:	d901      	bls.n	8016c54 <find_volume+0x194>
 8016c50:	230d      	movs	r3, #13
 8016c52:	e177      	b.n	8016f44 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c56:	3330      	adds	r3, #48	; 0x30
 8016c58:	330b      	adds	r3, #11
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f7fe fd1a 	bl	8015694 <ld_word>
 8016c60:	4603      	mov	r3, r0
 8016c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c66:	d001      	beq.n	8016c6c <find_volume+0x1ac>
 8016c68:	230d      	movs	r3, #13
 8016c6a:	e16b      	b.n	8016f44 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c6e:	3330      	adds	r3, #48	; 0x30
 8016c70:	3316      	adds	r3, #22
 8016c72:	4618      	mov	r0, r3
 8016c74:	f7fe fd0e 	bl	8015694 <ld_word>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d106      	bne.n	8016c90 <find_volume+0x1d0>
 8016c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c84:	3330      	adds	r3, #48	; 0x30
 8016c86:	3324      	adds	r3, #36	; 0x24
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f7fe fd1b 	bl	80156c4 <ld_dword>
 8016c8e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016c94:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c98:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8016c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca2:	789b      	ldrb	r3, [r3, #2]
 8016ca4:	2b01      	cmp	r3, #1
 8016ca6:	d005      	beq.n	8016cb4 <find_volume+0x1f4>
 8016ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016caa:	789b      	ldrb	r3, [r3, #2]
 8016cac:	2b02      	cmp	r3, #2
 8016cae:	d001      	beq.n	8016cb4 <find_volume+0x1f4>
 8016cb0:	230d      	movs	r3, #13
 8016cb2:	e147      	b.n	8016f44 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cb6:	789b      	ldrb	r3, [r3, #2]
 8016cb8:	461a      	mov	r2, r3
 8016cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016cbc:	fb02 f303 	mul.w	r3, r2, r3
 8016cc0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016cc8:	b29a      	uxth	r2, r3
 8016cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ccc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd0:	895b      	ldrh	r3, [r3, #10]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d008      	beq.n	8016ce8 <find_volume+0x228>
 8016cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd8:	895b      	ldrh	r3, [r3, #10]
 8016cda:	461a      	mov	r2, r3
 8016cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cde:	895b      	ldrh	r3, [r3, #10]
 8016ce0:	3b01      	subs	r3, #1
 8016ce2:	4013      	ands	r3, r2
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d001      	beq.n	8016cec <find_volume+0x22c>
 8016ce8:	230d      	movs	r3, #13
 8016cea:	e12b      	b.n	8016f44 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cee:	3330      	adds	r3, #48	; 0x30
 8016cf0:	3311      	adds	r3, #17
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f7fe fcce 	bl	8015694 <ld_word>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	461a      	mov	r2, r3
 8016cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cfe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d02:	891b      	ldrh	r3, [r3, #8]
 8016d04:	f003 030f 	and.w	r3, r3, #15
 8016d08:	b29b      	uxth	r3, r3
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d001      	beq.n	8016d12 <find_volume+0x252>
 8016d0e:	230d      	movs	r3, #13
 8016d10:	e118      	b.n	8016f44 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d14:	3330      	adds	r3, #48	; 0x30
 8016d16:	3313      	adds	r3, #19
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7fe fcbb 	bl	8015694 <ld_word>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d106      	bne.n	8016d36 <find_volume+0x276>
 8016d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d2a:	3330      	adds	r3, #48	; 0x30
 8016d2c:	3320      	adds	r3, #32
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7fe fcc8 	bl	80156c4 <ld_dword>
 8016d34:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d38:	3330      	adds	r3, #48	; 0x30
 8016d3a:	330e      	adds	r3, #14
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f7fe fca9 	bl	8015694 <ld_word>
 8016d42:	4603      	mov	r3, r0
 8016d44:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016d46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d101      	bne.n	8016d50 <find_volume+0x290>
 8016d4c:	230d      	movs	r3, #13
 8016d4e:	e0f9      	b.n	8016f44 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016d50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d54:	4413      	add	r3, r2
 8016d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d58:	8912      	ldrh	r2, [r2, #8]
 8016d5a:	0912      	lsrs	r2, r2, #4
 8016d5c:	b292      	uxth	r2, r2
 8016d5e:	4413      	add	r3, r2
 8016d60:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d201      	bcs.n	8016d6e <find_volume+0x2ae>
 8016d6a:	230d      	movs	r3, #13
 8016d6c:	e0ea      	b.n	8016f44 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d72:	1ad3      	subs	r3, r2, r3
 8016d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d76:	8952      	ldrh	r2, [r2, #10]
 8016d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d103      	bne.n	8016d8c <find_volume+0x2cc>
 8016d84:	230d      	movs	r3, #13
 8016d86:	e0dd      	b.n	8016f44 <find_volume+0x484>
 8016d88:	24000b50 	.word	0x24000b50
		fmt = FS_FAT32;
 8016d8c:	2303      	movs	r3, #3
 8016d8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d94:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016d98:	4293      	cmp	r3, r2
 8016d9a:	d802      	bhi.n	8016da2 <find_volume+0x2e2>
 8016d9c:	2302      	movs	r3, #2
 8016d9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016da4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016da8:	4293      	cmp	r3, r2
 8016daa:	d802      	bhi.n	8016db2 <find_volume+0x2f2>
 8016dac:	2301      	movs	r3, #1
 8016dae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016db4:	1c9a      	adds	r2, r3, #2
 8016db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016db8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8016dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016dbe:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016dc0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016dc4:	441a      	add	r2, r3
 8016dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dc8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8016dca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dce:	441a      	add	r2, r3
 8016dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dd2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8016dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016dd8:	2b03      	cmp	r3, #3
 8016dda:	d11e      	bne.n	8016e1a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dde:	3330      	adds	r3, #48	; 0x30
 8016de0:	332a      	adds	r3, #42	; 0x2a
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7fe fc56 	bl	8015694 <ld_word>
 8016de8:	4603      	mov	r3, r0
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d001      	beq.n	8016df2 <find_volume+0x332>
 8016dee:	230d      	movs	r3, #13
 8016df0:	e0a8      	b.n	8016f44 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016df4:	891b      	ldrh	r3, [r3, #8]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d001      	beq.n	8016dfe <find_volume+0x33e>
 8016dfa:	230d      	movs	r3, #13
 8016dfc:	e0a2      	b.n	8016f44 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e00:	3330      	adds	r3, #48	; 0x30
 8016e02:	332c      	adds	r3, #44	; 0x2c
 8016e04:	4618      	mov	r0, r3
 8016e06:	f7fe fc5d 	bl	80156c4 <ld_dword>
 8016e0a:	4602      	mov	r2, r0
 8016e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e0e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e12:	695b      	ldr	r3, [r3, #20]
 8016e14:	009b      	lsls	r3, r3, #2
 8016e16:	647b      	str	r3, [r7, #68]	; 0x44
 8016e18:	e01f      	b.n	8016e5a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e1c:	891b      	ldrh	r3, [r3, #8]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d101      	bne.n	8016e26 <find_volume+0x366>
 8016e22:	230d      	movs	r3, #13
 8016e24:	e08e      	b.n	8016f44 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e28:	6a1a      	ldr	r2, [r3, #32]
 8016e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e2c:	441a      	add	r2, r3
 8016e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e30:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016e32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e36:	2b02      	cmp	r3, #2
 8016e38:	d103      	bne.n	8016e42 <find_volume+0x382>
 8016e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e3c:	695b      	ldr	r3, [r3, #20]
 8016e3e:	005b      	lsls	r3, r3, #1
 8016e40:	e00a      	b.n	8016e58 <find_volume+0x398>
 8016e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e44:	695a      	ldr	r2, [r3, #20]
 8016e46:	4613      	mov	r3, r2
 8016e48:	005b      	lsls	r3, r3, #1
 8016e4a:	4413      	add	r3, r2
 8016e4c:	085a      	lsrs	r2, r3, #1
 8016e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e50:	695b      	ldr	r3, [r3, #20]
 8016e52:	f003 0301 	and.w	r3, r3, #1
 8016e56:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016e58:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e5c:	699a      	ldr	r2, [r3, #24]
 8016e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016e64:	0a5b      	lsrs	r3, r3, #9
 8016e66:	429a      	cmp	r2, r3
 8016e68:	d201      	bcs.n	8016e6e <find_volume+0x3ae>
 8016e6a:	230d      	movs	r3, #13
 8016e6c:	e06a      	b.n	8016f44 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e70:	f04f 32ff 	mov.w	r2, #4294967295
 8016e74:	611a      	str	r2, [r3, #16]
 8016e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e78:	691a      	ldr	r2, [r3, #16]
 8016e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e7c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8016e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e80:	2280      	movs	r2, #128	; 0x80
 8016e82:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016e84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e88:	2b03      	cmp	r3, #3
 8016e8a:	d149      	bne.n	8016f20 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e8e:	3330      	adds	r3, #48	; 0x30
 8016e90:	3330      	adds	r3, #48	; 0x30
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7fe fbfe 	bl	8015694 <ld_word>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	2b01      	cmp	r3, #1
 8016e9c:	d140      	bne.n	8016f20 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ea0:	3301      	adds	r3, #1
 8016ea2:	4619      	mov	r1, r3
 8016ea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016ea6:	f7fe fea5 	bl	8015bf4 <move_window>
 8016eaa:	4603      	mov	r3, r0
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d137      	bne.n	8016f20 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8016eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eb8:	3330      	adds	r3, #48	; 0x30
 8016eba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f7fe fbe8 	bl	8015694 <ld_word>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d127      	bne.n	8016f20 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ed2:	3330      	adds	r3, #48	; 0x30
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f7fe fbf5 	bl	80156c4 <ld_dword>
 8016eda:	4602      	mov	r2, r0
 8016edc:	4b1b      	ldr	r3, [pc, #108]	; (8016f4c <find_volume+0x48c>)
 8016ede:	429a      	cmp	r2, r3
 8016ee0:	d11e      	bne.n	8016f20 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ee4:	3330      	adds	r3, #48	; 0x30
 8016ee6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7fe fbea 	bl	80156c4 <ld_dword>
 8016ef0:	4602      	mov	r2, r0
 8016ef2:	4b17      	ldr	r3, [pc, #92]	; (8016f50 <find_volume+0x490>)
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	d113      	bne.n	8016f20 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016efa:	3330      	adds	r3, #48	; 0x30
 8016efc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7fe fbdf 	bl	80156c4 <ld_dword>
 8016f06:	4602      	mov	r2, r0
 8016f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f0a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f0e:	3330      	adds	r3, #48	; 0x30
 8016f10:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7fe fbd5 	bl	80156c4 <ld_dword>
 8016f1a:	4602      	mov	r2, r0
 8016f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f1e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f22:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016f26:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016f28:	4b0a      	ldr	r3, [pc, #40]	; (8016f54 <find_volume+0x494>)
 8016f2a:	881b      	ldrh	r3, [r3, #0]
 8016f2c:	3301      	adds	r3, #1
 8016f2e:	b29a      	uxth	r2, r3
 8016f30:	4b08      	ldr	r3, [pc, #32]	; (8016f54 <find_volume+0x494>)
 8016f32:	801a      	strh	r2, [r3, #0]
 8016f34:	4b07      	ldr	r3, [pc, #28]	; (8016f54 <find_volume+0x494>)
 8016f36:	881a      	ldrh	r2, [r3, #0]
 8016f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f3a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8016f3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016f3e:	f7fe fdf1 	bl	8015b24 <clear_lock>
#endif
	return FR_OK;
 8016f42:	2300      	movs	r3, #0
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	3758      	adds	r7, #88	; 0x58
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}
 8016f4c:	41615252 	.word	0x41615252
 8016f50:	61417272 	.word	0x61417272
 8016f54:	24000b54 	.word	0x24000b54

08016f58 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b084      	sub	sp, #16
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
 8016f60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016f62:	2309      	movs	r3, #9
 8016f64:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d01c      	beq.n	8016fa6 <validate+0x4e>
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d018      	beq.n	8016fa6 <validate+0x4e>
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d013      	beq.n	8016fa6 <validate+0x4e>
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	889a      	ldrh	r2, [r3, #4]
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	88db      	ldrh	r3, [r3, #6]
 8016f88:	429a      	cmp	r2, r3
 8016f8a:	d10c      	bne.n	8016fa6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	785b      	ldrb	r3, [r3, #1]
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7fe fae0 	bl	8015558 <disk_status>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	f003 0301 	and.w	r3, r3, #1
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d101      	bne.n	8016fa6 <validate+0x4e>
			res = FR_OK;
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016fa6:	7bfb      	ldrb	r3, [r7, #15]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d102      	bne.n	8016fb2 <validate+0x5a>
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	e000      	b.n	8016fb4 <validate+0x5c>
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	683a      	ldr	r2, [r7, #0]
 8016fb6:	6013      	str	r3, [r2, #0]
	return res;
 8016fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fba:	4618      	mov	r0, r3
 8016fbc:	3710      	adds	r7, #16
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
	...

08016fc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b088      	sub	sp, #32
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	60f8      	str	r0, [r7, #12]
 8016fcc:	60b9      	str	r1, [r7, #8]
 8016fce:	4613      	mov	r3, r2
 8016fd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016fd6:	f107 0310 	add.w	r3, r7, #16
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f7ff fcd5 	bl	801698a <get_ldnumber>
 8016fe0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016fe2:	69fb      	ldr	r3, [r7, #28]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	da01      	bge.n	8016fec <f_mount+0x28>
 8016fe8:	230b      	movs	r3, #11
 8016fea:	e02b      	b.n	8017044 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016fec:	4a17      	ldr	r2, [pc, #92]	; (801704c <f_mount+0x88>)
 8016fee:	69fb      	ldr	r3, [r7, #28]
 8016ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016ff4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016ff6:	69bb      	ldr	r3, [r7, #24]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d005      	beq.n	8017008 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016ffc:	69b8      	ldr	r0, [r7, #24]
 8016ffe:	f7fe fd91 	bl	8015b24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017002:	69bb      	ldr	r3, [r7, #24]
 8017004:	2200      	movs	r2, #0
 8017006:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d002      	beq.n	8017014 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	2200      	movs	r2, #0
 8017012:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017014:	68fa      	ldr	r2, [r7, #12]
 8017016:	490d      	ldr	r1, [pc, #52]	; (801704c <f_mount+0x88>)
 8017018:	69fb      	ldr	r3, [r7, #28]
 801701a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d002      	beq.n	801702a <f_mount+0x66>
 8017024:	79fb      	ldrb	r3, [r7, #7]
 8017026:	2b01      	cmp	r3, #1
 8017028:	d001      	beq.n	801702e <f_mount+0x6a>
 801702a:	2300      	movs	r3, #0
 801702c:	e00a      	b.n	8017044 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801702e:	f107 010c 	add.w	r1, r7, #12
 8017032:	f107 0308 	add.w	r3, r7, #8
 8017036:	2200      	movs	r2, #0
 8017038:	4618      	mov	r0, r3
 801703a:	f7ff fd41 	bl	8016ac0 <find_volume>
 801703e:	4603      	mov	r3, r0
 8017040:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017042:	7dfb      	ldrb	r3, [r7, #23]
}
 8017044:	4618      	mov	r0, r3
 8017046:	3720      	adds	r7, #32
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}
 801704c:	24000b50 	.word	0x24000b50

08017050 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b098      	sub	sp, #96	; 0x60
 8017054:	af00      	add	r7, sp, #0
 8017056:	60f8      	str	r0, [r7, #12]
 8017058:	60b9      	str	r1, [r7, #8]
 801705a:	4613      	mov	r3, r2
 801705c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d101      	bne.n	8017068 <f_open+0x18>
 8017064:	2309      	movs	r3, #9
 8017066:	e1ad      	b.n	80173c4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017068:	79fb      	ldrb	r3, [r7, #7]
 801706a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801706e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017070:	79fa      	ldrb	r2, [r7, #7]
 8017072:	f107 0110 	add.w	r1, r7, #16
 8017076:	f107 0308 	add.w	r3, r7, #8
 801707a:	4618      	mov	r0, r3
 801707c:	f7ff fd20 	bl	8016ac0 <find_volume>
 8017080:	4603      	mov	r3, r0
 8017082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8017086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801708a:	2b00      	cmp	r3, #0
 801708c:	f040 8191 	bne.w	80173b2 <f_open+0x362>
		dj.obj.fs = fs;
 8017090:	693b      	ldr	r3, [r7, #16]
 8017092:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017094:	68ba      	ldr	r2, [r7, #8]
 8017096:	f107 0314 	add.w	r3, r7, #20
 801709a:	4611      	mov	r1, r2
 801709c:	4618      	mov	r0, r3
 801709e:	f7ff fc03 	bl	80168a8 <follow_path>
 80170a2:	4603      	mov	r3, r0
 80170a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80170a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d11a      	bne.n	80170e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80170b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80170b4:	b25b      	sxtb	r3, r3
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	da03      	bge.n	80170c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80170ba:	2306      	movs	r3, #6
 80170bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80170c0:	e011      	b.n	80170e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80170c2:	79fb      	ldrb	r3, [r7, #7]
 80170c4:	f023 0301 	bic.w	r3, r3, #1
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	bf14      	ite	ne
 80170cc:	2301      	movne	r3, #1
 80170ce:	2300      	moveq	r3, #0
 80170d0:	b2db      	uxtb	r3, r3
 80170d2:	461a      	mov	r2, r3
 80170d4:	f107 0314 	add.w	r3, r7, #20
 80170d8:	4611      	mov	r1, r2
 80170da:	4618      	mov	r0, r3
 80170dc:	f7fe fbda 	bl	8015894 <chk_lock>
 80170e0:	4603      	mov	r3, r0
 80170e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80170e6:	79fb      	ldrb	r3, [r7, #7]
 80170e8:	f003 031c 	and.w	r3, r3, #28
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d07f      	beq.n	80171f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80170f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d017      	beq.n	8017128 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80170f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80170fc:	2b04      	cmp	r3, #4
 80170fe:	d10e      	bne.n	801711e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017100:	f7fe fc24 	bl	801594c <enq_lock>
 8017104:	4603      	mov	r3, r0
 8017106:	2b00      	cmp	r3, #0
 8017108:	d006      	beq.n	8017118 <f_open+0xc8>
 801710a:	f107 0314 	add.w	r3, r7, #20
 801710e:	4618      	mov	r0, r3
 8017110:	f7ff fb03 	bl	801671a <dir_register>
 8017114:	4603      	mov	r3, r0
 8017116:	e000      	b.n	801711a <f_open+0xca>
 8017118:	2312      	movs	r3, #18
 801711a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801711e:	79fb      	ldrb	r3, [r7, #7]
 8017120:	f043 0308 	orr.w	r3, r3, #8
 8017124:	71fb      	strb	r3, [r7, #7]
 8017126:	e010      	b.n	801714a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017128:	7ebb      	ldrb	r3, [r7, #26]
 801712a:	f003 0311 	and.w	r3, r3, #17
 801712e:	2b00      	cmp	r3, #0
 8017130:	d003      	beq.n	801713a <f_open+0xea>
					res = FR_DENIED;
 8017132:	2307      	movs	r3, #7
 8017134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017138:	e007      	b.n	801714a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801713a:	79fb      	ldrb	r3, [r7, #7]
 801713c:	f003 0304 	and.w	r3, r3, #4
 8017140:	2b00      	cmp	r3, #0
 8017142:	d002      	beq.n	801714a <f_open+0xfa>
 8017144:	2308      	movs	r3, #8
 8017146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801714a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801714e:	2b00      	cmp	r3, #0
 8017150:	d168      	bne.n	8017224 <f_open+0x1d4>
 8017152:	79fb      	ldrb	r3, [r7, #7]
 8017154:	f003 0308 	and.w	r3, r3, #8
 8017158:	2b00      	cmp	r3, #0
 801715a:	d063      	beq.n	8017224 <f_open+0x1d4>
				dw = GET_FATTIME();
 801715c:	f7fb f8fe 	bl	801235c <get_fattime>
 8017160:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8017162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017164:	330e      	adds	r3, #14
 8017166:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017168:	4618      	mov	r0, r3
 801716a:	f7fe fae9 	bl	8015740 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801716e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017170:	3316      	adds	r3, #22
 8017172:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017174:	4618      	mov	r0, r3
 8017176:	f7fe fae3 	bl	8015740 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801717a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801717c:	330b      	adds	r3, #11
 801717e:	2220      	movs	r2, #32
 8017180:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017186:	4611      	mov	r1, r2
 8017188:	4618      	mov	r0, r3
 801718a:	f7ff fa32 	bl	80165f2 <ld_clust>
 801718e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017190:	693b      	ldr	r3, [r7, #16]
 8017192:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017194:	2200      	movs	r2, #0
 8017196:	4618      	mov	r0, r3
 8017198:	f7ff fa4a 	bl	8016630 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801719c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801719e:	331c      	adds	r3, #28
 80171a0:	2100      	movs	r1, #0
 80171a2:	4618      	mov	r0, r3
 80171a4:	f7fe facc 	bl	8015740 <st_dword>
					fs->wflag = 1;
 80171a8:	693b      	ldr	r3, [r7, #16]
 80171aa:	2201      	movs	r2, #1
 80171ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80171ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d037      	beq.n	8017224 <f_open+0x1d4>
						dw = fs->winsect;
 80171b4:	693b      	ldr	r3, [r7, #16]
 80171b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80171ba:	f107 0314 	add.w	r3, r7, #20
 80171be:	2200      	movs	r2, #0
 80171c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80171c2:	4618      	mov	r0, r3
 80171c4:	f7fe ff5d 	bl	8016082 <remove_chain>
 80171c8:	4603      	mov	r3, r0
 80171ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80171ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d126      	bne.n	8017224 <f_open+0x1d4>
							res = move_window(fs, dw);
 80171d6:	693b      	ldr	r3, [r7, #16]
 80171d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80171da:	4618      	mov	r0, r3
 80171dc:	f7fe fd0a 	bl	8015bf4 <move_window>
 80171e0:	4603      	mov	r3, r0
 80171e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80171e6:	693b      	ldr	r3, [r7, #16]
 80171e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80171ea:	3a01      	subs	r2, #1
 80171ec:	60da      	str	r2, [r3, #12]
 80171ee:	e019      	b.n	8017224 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80171f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d115      	bne.n	8017224 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80171f8:	7ebb      	ldrb	r3, [r7, #26]
 80171fa:	f003 0310 	and.w	r3, r3, #16
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d003      	beq.n	801720a <f_open+0x1ba>
					res = FR_NO_FILE;
 8017202:	2304      	movs	r3, #4
 8017204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017208:	e00c      	b.n	8017224 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801720a:	79fb      	ldrb	r3, [r7, #7]
 801720c:	f003 0302 	and.w	r3, r3, #2
 8017210:	2b00      	cmp	r3, #0
 8017212:	d007      	beq.n	8017224 <f_open+0x1d4>
 8017214:	7ebb      	ldrb	r3, [r7, #26]
 8017216:	f003 0301 	and.w	r3, r3, #1
 801721a:	2b00      	cmp	r3, #0
 801721c:	d002      	beq.n	8017224 <f_open+0x1d4>
						res = FR_DENIED;
 801721e:	2307      	movs	r3, #7
 8017220:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8017224:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017228:	2b00      	cmp	r3, #0
 801722a:	d128      	bne.n	801727e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801722c:	79fb      	ldrb	r3, [r7, #7]
 801722e:	f003 0308 	and.w	r3, r3, #8
 8017232:	2b00      	cmp	r3, #0
 8017234:	d003      	beq.n	801723e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8017236:	79fb      	ldrb	r3, [r7, #7]
 8017238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801723c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801723e:	693b      	ldr	r3, [r7, #16]
 8017240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8017246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801724c:	79fb      	ldrb	r3, [r7, #7]
 801724e:	f023 0301 	bic.w	r3, r3, #1
 8017252:	2b00      	cmp	r3, #0
 8017254:	bf14      	ite	ne
 8017256:	2301      	movne	r3, #1
 8017258:	2300      	moveq	r3, #0
 801725a:	b2db      	uxtb	r3, r3
 801725c:	461a      	mov	r2, r3
 801725e:	f107 0314 	add.w	r3, r7, #20
 8017262:	4611      	mov	r1, r2
 8017264:	4618      	mov	r0, r3
 8017266:	f7fe fb93 	bl	8015990 <inc_lock>
 801726a:	4602      	mov	r2, r0
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	691b      	ldr	r3, [r3, #16]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d102      	bne.n	801727e <f_open+0x22e>
 8017278:	2302      	movs	r3, #2
 801727a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801727e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017282:	2b00      	cmp	r3, #0
 8017284:	f040 8095 	bne.w	80173b2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8017288:	693b      	ldr	r3, [r7, #16]
 801728a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801728c:	4611      	mov	r1, r2
 801728e:	4618      	mov	r0, r3
 8017290:	f7ff f9af 	bl	80165f2 <ld_clust>
 8017294:	4602      	mov	r2, r0
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801729a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801729c:	331c      	adds	r3, #28
 801729e:	4618      	mov	r0, r3
 80172a0:	f7fe fa10 	bl	80156c4 <ld_dword>
 80172a4:	4602      	mov	r2, r0
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	2200      	movs	r2, #0
 80172ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80172b0:	693a      	ldr	r2, [r7, #16]
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80172b6:	693b      	ldr	r3, [r7, #16]
 80172b8:	88da      	ldrh	r2, [r3, #6]
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	79fa      	ldrb	r2, [r7, #7]
 80172c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	2200      	movs	r2, #0
 80172c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	2200      	movs	r2, #0
 80172ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	2200      	movs	r2, #0
 80172d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	3330      	adds	r3, #48	; 0x30
 80172da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80172de:	2100      	movs	r1, #0
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7fe fa7a 	bl	80157da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80172e6:	79fb      	ldrb	r3, [r7, #7]
 80172e8:	f003 0320 	and.w	r3, r3, #32
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d060      	beq.n	80173b2 <f_open+0x362>
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	68db      	ldr	r3, [r3, #12]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d05c      	beq.n	80173b2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	68da      	ldr	r2, [r3, #12]
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017300:	693b      	ldr	r3, [r7, #16]
 8017302:	895b      	ldrh	r3, [r3, #10]
 8017304:	025b      	lsls	r3, r3, #9
 8017306:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	689b      	ldr	r3, [r3, #8]
 801730c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	68db      	ldr	r3, [r3, #12]
 8017312:	657b      	str	r3, [r7, #84]	; 0x54
 8017314:	e016      	b.n	8017344 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801731a:	4618      	mov	r0, r3
 801731c:	f7fe fd25 	bl	8015d6a <get_fat>
 8017320:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8017322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017324:	2b01      	cmp	r3, #1
 8017326:	d802      	bhi.n	801732e <f_open+0x2de>
 8017328:	2302      	movs	r3, #2
 801732a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801732e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017334:	d102      	bne.n	801733c <f_open+0x2ec>
 8017336:	2301      	movs	r3, #1
 8017338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801733c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801733e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017340:	1ad3      	subs	r3, r2, r3
 8017342:	657b      	str	r3, [r7, #84]	; 0x54
 8017344:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017348:	2b00      	cmp	r3, #0
 801734a:	d103      	bne.n	8017354 <f_open+0x304>
 801734c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801734e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017350:	429a      	cmp	r2, r3
 8017352:	d8e0      	bhi.n	8017316 <f_open+0x2c6>
				}
				fp->clust = clst;
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017358:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801735a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801735e:	2b00      	cmp	r3, #0
 8017360:	d127      	bne.n	80173b2 <f_open+0x362>
 8017362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017368:	2b00      	cmp	r3, #0
 801736a:	d022      	beq.n	80173b2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801736c:	693b      	ldr	r3, [r7, #16]
 801736e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017370:	4618      	mov	r0, r3
 8017372:	f7fe fcdb 	bl	8015d2c <clust2sect>
 8017376:	6478      	str	r0, [r7, #68]	; 0x44
 8017378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801737a:	2b00      	cmp	r3, #0
 801737c:	d103      	bne.n	8017386 <f_open+0x336>
						res = FR_INT_ERR;
 801737e:	2302      	movs	r3, #2
 8017380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017384:	e015      	b.n	80173b2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8017386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017388:	0a5a      	lsrs	r2, r3, #9
 801738a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801738c:	441a      	add	r2, r3
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017392:	693b      	ldr	r3, [r7, #16]
 8017394:	7858      	ldrb	r0, [r3, #1]
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	6a1a      	ldr	r2, [r3, #32]
 80173a0:	2301      	movs	r3, #1
 80173a2:	f7fe f919 	bl	80155d8 <disk_read>
 80173a6:	4603      	mov	r3, r0
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d002      	beq.n	80173b2 <f_open+0x362>
 80173ac:	2301      	movs	r3, #1
 80173ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80173b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d002      	beq.n	80173c0 <f_open+0x370>
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	2200      	movs	r2, #0
 80173be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80173c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3760      	adds	r7, #96	; 0x60
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}

080173cc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b08e      	sub	sp, #56	; 0x38
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	60f8      	str	r0, [r7, #12]
 80173d4:	60b9      	str	r1, [r7, #8]
 80173d6:	607a      	str	r2, [r7, #4]
 80173d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80173da:	68bb      	ldr	r3, [r7, #8]
 80173dc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	2200      	movs	r2, #0
 80173e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	f107 0214 	add.w	r2, r7, #20
 80173ea:	4611      	mov	r1, r2
 80173ec:	4618      	mov	r0, r3
 80173ee:	f7ff fdb3 	bl	8016f58 <validate>
 80173f2:	4603      	mov	r3, r0
 80173f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80173f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d107      	bne.n	8017410 <f_read+0x44>
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	7d5b      	ldrb	r3, [r3, #21]
 8017404:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8017408:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801740c:	2b00      	cmp	r3, #0
 801740e:	d002      	beq.n	8017416 <f_read+0x4a>
 8017410:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017414:	e115      	b.n	8017642 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	7d1b      	ldrb	r3, [r3, #20]
 801741a:	f003 0301 	and.w	r3, r3, #1
 801741e:	2b00      	cmp	r3, #0
 8017420:	d101      	bne.n	8017426 <f_read+0x5a>
 8017422:	2307      	movs	r3, #7
 8017424:	e10d      	b.n	8017642 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	68da      	ldr	r2, [r3, #12]
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	699b      	ldr	r3, [r3, #24]
 801742e:	1ad3      	subs	r3, r2, r3
 8017430:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8017432:	687a      	ldr	r2, [r7, #4]
 8017434:	6a3b      	ldr	r3, [r7, #32]
 8017436:	429a      	cmp	r2, r3
 8017438:	f240 80fe 	bls.w	8017638 <f_read+0x26c>
 801743c:	6a3b      	ldr	r3, [r7, #32]
 801743e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8017440:	e0fa      	b.n	8017638 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	699b      	ldr	r3, [r3, #24]
 8017446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801744a:	2b00      	cmp	r3, #0
 801744c:	f040 80c6 	bne.w	80175dc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	699b      	ldr	r3, [r3, #24]
 8017454:	0a5b      	lsrs	r3, r3, #9
 8017456:	697a      	ldr	r2, [r7, #20]
 8017458:	8952      	ldrh	r2, [r2, #10]
 801745a:	3a01      	subs	r2, #1
 801745c:	4013      	ands	r3, r2
 801745e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8017460:	69fb      	ldr	r3, [r7, #28]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d12f      	bne.n	80174c6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	699b      	ldr	r3, [r3, #24]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d103      	bne.n	8017476 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	689b      	ldr	r3, [r3, #8]
 8017472:	633b      	str	r3, [r7, #48]	; 0x30
 8017474:	e013      	b.n	801749e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801747a:	2b00      	cmp	r3, #0
 801747c:	d007      	beq.n	801748e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	699b      	ldr	r3, [r3, #24]
 8017482:	4619      	mov	r1, r3
 8017484:	68f8      	ldr	r0, [r7, #12]
 8017486:	f7fe fef9 	bl	801627c <clmt_clust>
 801748a:	6338      	str	r0, [r7, #48]	; 0x30
 801748c:	e007      	b.n	801749e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801748e:	68fa      	ldr	r2, [r7, #12]
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	69db      	ldr	r3, [r3, #28]
 8017494:	4619      	mov	r1, r3
 8017496:	4610      	mov	r0, r2
 8017498:	f7fe fc67 	bl	8015d6a <get_fat>
 801749c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a0:	2b01      	cmp	r3, #1
 80174a2:	d804      	bhi.n	80174ae <f_read+0xe2>
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	2202      	movs	r2, #2
 80174a8:	755a      	strb	r2, [r3, #21]
 80174aa:	2302      	movs	r3, #2
 80174ac:	e0c9      	b.n	8017642 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80174ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174b4:	d104      	bne.n	80174c0 <f_read+0xf4>
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	2201      	movs	r2, #1
 80174ba:	755a      	strb	r2, [r3, #21]
 80174bc:	2301      	movs	r3, #1
 80174be:	e0c0      	b.n	8017642 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174c4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80174c6:	697a      	ldr	r2, [r7, #20]
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	69db      	ldr	r3, [r3, #28]
 80174cc:	4619      	mov	r1, r3
 80174ce:	4610      	mov	r0, r2
 80174d0:	f7fe fc2c 	bl	8015d2c <clust2sect>
 80174d4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80174d6:	69bb      	ldr	r3, [r7, #24]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d104      	bne.n	80174e6 <f_read+0x11a>
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	2202      	movs	r2, #2
 80174e0:	755a      	strb	r2, [r3, #21]
 80174e2:	2302      	movs	r3, #2
 80174e4:	e0ad      	b.n	8017642 <f_read+0x276>
			sect += csect;
 80174e6:	69ba      	ldr	r2, [r7, #24]
 80174e8:	69fb      	ldr	r3, [r7, #28]
 80174ea:	4413      	add	r3, r2
 80174ec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	0a5b      	lsrs	r3, r3, #9
 80174f2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80174f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d039      	beq.n	801756e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80174fa:	69fa      	ldr	r2, [r7, #28]
 80174fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fe:	4413      	add	r3, r2
 8017500:	697a      	ldr	r2, [r7, #20]
 8017502:	8952      	ldrh	r2, [r2, #10]
 8017504:	4293      	cmp	r3, r2
 8017506:	d905      	bls.n	8017514 <f_read+0x148>
					cc = fs->csize - csect;
 8017508:	697b      	ldr	r3, [r7, #20]
 801750a:	895b      	ldrh	r3, [r3, #10]
 801750c:	461a      	mov	r2, r3
 801750e:	69fb      	ldr	r3, [r7, #28]
 8017510:	1ad3      	subs	r3, r2, r3
 8017512:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017514:	697b      	ldr	r3, [r7, #20]
 8017516:	7858      	ldrb	r0, [r3, #1]
 8017518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801751a:	69ba      	ldr	r2, [r7, #24]
 801751c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801751e:	f7fe f85b 	bl	80155d8 <disk_read>
 8017522:	4603      	mov	r3, r0
 8017524:	2b00      	cmp	r3, #0
 8017526:	d004      	beq.n	8017532 <f_read+0x166>
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	2201      	movs	r2, #1
 801752c:	755a      	strb	r2, [r3, #21]
 801752e:	2301      	movs	r3, #1
 8017530:	e087      	b.n	8017642 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	7d1b      	ldrb	r3, [r3, #20]
 8017536:	b25b      	sxtb	r3, r3
 8017538:	2b00      	cmp	r3, #0
 801753a:	da14      	bge.n	8017566 <f_read+0x19a>
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	6a1a      	ldr	r2, [r3, #32]
 8017540:	69bb      	ldr	r3, [r7, #24]
 8017542:	1ad3      	subs	r3, r2, r3
 8017544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017546:	429a      	cmp	r2, r3
 8017548:	d90d      	bls.n	8017566 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	6a1a      	ldr	r2, [r3, #32]
 801754e:	69bb      	ldr	r3, [r7, #24]
 8017550:	1ad3      	subs	r3, r2, r3
 8017552:	025b      	lsls	r3, r3, #9
 8017554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017556:	18d0      	adds	r0, r2, r3
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	3330      	adds	r3, #48	; 0x30
 801755c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017560:	4619      	mov	r1, r3
 8017562:	f7fe f919 	bl	8015798 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8017566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017568:	025b      	lsls	r3, r3, #9
 801756a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801756c:	e050      	b.n	8017610 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	6a1b      	ldr	r3, [r3, #32]
 8017572:	69ba      	ldr	r2, [r7, #24]
 8017574:	429a      	cmp	r2, r3
 8017576:	d02e      	beq.n	80175d6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	7d1b      	ldrb	r3, [r3, #20]
 801757c:	b25b      	sxtb	r3, r3
 801757e:	2b00      	cmp	r3, #0
 8017580:	da18      	bge.n	80175b4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017582:	697b      	ldr	r3, [r7, #20]
 8017584:	7858      	ldrb	r0, [r3, #1]
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	6a1a      	ldr	r2, [r3, #32]
 8017590:	2301      	movs	r3, #1
 8017592:	f7fe f841 	bl	8015618 <disk_write>
 8017596:	4603      	mov	r3, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	d004      	beq.n	80175a6 <f_read+0x1da>
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	2201      	movs	r2, #1
 80175a0:	755a      	strb	r2, [r3, #21]
 80175a2:	2301      	movs	r3, #1
 80175a4:	e04d      	b.n	8017642 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	7d1b      	ldrb	r3, [r3, #20]
 80175aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80175ae:	b2da      	uxtb	r2, r3
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	7858      	ldrb	r0, [r3, #1]
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80175be:	2301      	movs	r3, #1
 80175c0:	69ba      	ldr	r2, [r7, #24]
 80175c2:	f7fe f809 	bl	80155d8 <disk_read>
 80175c6:	4603      	mov	r3, r0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d004      	beq.n	80175d6 <f_read+0x20a>
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	2201      	movs	r2, #1
 80175d0:	755a      	strb	r2, [r3, #21]
 80175d2:	2301      	movs	r3, #1
 80175d4:	e035      	b.n	8017642 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	69ba      	ldr	r2, [r7, #24]
 80175da:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	699b      	ldr	r3, [r3, #24]
 80175e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175e4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80175e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80175ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	429a      	cmp	r2, r3
 80175f0:	d901      	bls.n	80175f6 <f_read+0x22a>
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	699b      	ldr	r3, [r3, #24]
 8017600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017604:	4413      	add	r3, r2
 8017606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017608:	4619      	mov	r1, r3
 801760a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801760c:	f7fe f8c4 	bl	8015798 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017614:	4413      	add	r3, r2
 8017616:	627b      	str	r3, [r7, #36]	; 0x24
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	699a      	ldr	r2, [r3, #24]
 801761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801761e:	441a      	add	r2, r3
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	619a      	str	r2, [r3, #24]
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	681a      	ldr	r2, [r3, #0]
 8017628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801762a:	441a      	add	r2, r3
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	601a      	str	r2, [r3, #0]
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017634:	1ad3      	subs	r3, r2, r3
 8017636:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	2b00      	cmp	r3, #0
 801763c:	f47f af01 	bne.w	8017442 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8017640:	2300      	movs	r3, #0
}
 8017642:	4618      	mov	r0, r3
 8017644:	3738      	adds	r7, #56	; 0x38
 8017646:	46bd      	mov	sp, r7
 8017648:	bd80      	pop	{r7, pc}

0801764a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801764a:	b580      	push	{r7, lr}
 801764c:	b08c      	sub	sp, #48	; 0x30
 801764e:	af00      	add	r7, sp, #0
 8017650:	60f8      	str	r0, [r7, #12]
 8017652:	60b9      	str	r1, [r7, #8]
 8017654:	607a      	str	r2, [r7, #4]
 8017656:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	2200      	movs	r2, #0
 8017660:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	f107 0210 	add.w	r2, r7, #16
 8017668:	4611      	mov	r1, r2
 801766a:	4618      	mov	r0, r3
 801766c:	f7ff fc74 	bl	8016f58 <validate>
 8017670:	4603      	mov	r3, r0
 8017672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801767a:	2b00      	cmp	r3, #0
 801767c:	d107      	bne.n	801768e <f_write+0x44>
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	7d5b      	ldrb	r3, [r3, #21]
 8017682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801768a:	2b00      	cmp	r3, #0
 801768c:	d002      	beq.n	8017694 <f_write+0x4a>
 801768e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017692:	e14b      	b.n	801792c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	7d1b      	ldrb	r3, [r3, #20]
 8017698:	f003 0302 	and.w	r3, r3, #2
 801769c:	2b00      	cmp	r3, #0
 801769e:	d101      	bne.n	80176a4 <f_write+0x5a>
 80176a0:	2307      	movs	r3, #7
 80176a2:	e143      	b.n	801792c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	699a      	ldr	r2, [r3, #24]
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	441a      	add	r2, r3
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	699b      	ldr	r3, [r3, #24]
 80176b0:	429a      	cmp	r2, r3
 80176b2:	f080 812d 	bcs.w	8017910 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	699b      	ldr	r3, [r3, #24]
 80176ba:	43db      	mvns	r3, r3
 80176bc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80176be:	e127      	b.n	8017910 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	699b      	ldr	r3, [r3, #24]
 80176c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	f040 80e3 	bne.w	8017894 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	699b      	ldr	r3, [r3, #24]
 80176d2:	0a5b      	lsrs	r3, r3, #9
 80176d4:	693a      	ldr	r2, [r7, #16]
 80176d6:	8952      	ldrh	r2, [r2, #10]
 80176d8:	3a01      	subs	r2, #1
 80176da:	4013      	ands	r3, r2
 80176dc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80176de:	69bb      	ldr	r3, [r7, #24]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d143      	bne.n	801776c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	699b      	ldr	r3, [r3, #24]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d10c      	bne.n	8017706 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	689b      	ldr	r3, [r3, #8]
 80176f0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80176f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d11a      	bne.n	801772e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	2100      	movs	r1, #0
 80176fc:	4618      	mov	r0, r3
 80176fe:	f7fe fd25 	bl	801614c <create_chain>
 8017702:	62b8      	str	r0, [r7, #40]	; 0x28
 8017704:	e013      	b.n	801772e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801770a:	2b00      	cmp	r3, #0
 801770c:	d007      	beq.n	801771e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	699b      	ldr	r3, [r3, #24]
 8017712:	4619      	mov	r1, r3
 8017714:	68f8      	ldr	r0, [r7, #12]
 8017716:	f7fe fdb1 	bl	801627c <clmt_clust>
 801771a:	62b8      	str	r0, [r7, #40]	; 0x28
 801771c:	e007      	b.n	801772e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801771e:	68fa      	ldr	r2, [r7, #12]
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	69db      	ldr	r3, [r3, #28]
 8017724:	4619      	mov	r1, r3
 8017726:	4610      	mov	r0, r2
 8017728:	f7fe fd10 	bl	801614c <create_chain>
 801772c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017730:	2b00      	cmp	r3, #0
 8017732:	f000 80f2 	beq.w	801791a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017738:	2b01      	cmp	r3, #1
 801773a:	d104      	bne.n	8017746 <f_write+0xfc>
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	2202      	movs	r2, #2
 8017740:	755a      	strb	r2, [r3, #21]
 8017742:	2302      	movs	r3, #2
 8017744:	e0f2      	b.n	801792c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801774c:	d104      	bne.n	8017758 <f_write+0x10e>
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	2201      	movs	r2, #1
 8017752:	755a      	strb	r2, [r3, #21]
 8017754:	2301      	movs	r3, #1
 8017756:	e0e9      	b.n	801792c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801775c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	689b      	ldr	r3, [r3, #8]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d102      	bne.n	801776c <f_write+0x122>
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801776a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	7d1b      	ldrb	r3, [r3, #20]
 8017770:	b25b      	sxtb	r3, r3
 8017772:	2b00      	cmp	r3, #0
 8017774:	da18      	bge.n	80177a8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017776:	693b      	ldr	r3, [r7, #16]
 8017778:	7858      	ldrb	r0, [r3, #1]
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	6a1a      	ldr	r2, [r3, #32]
 8017784:	2301      	movs	r3, #1
 8017786:	f7fd ff47 	bl	8015618 <disk_write>
 801778a:	4603      	mov	r3, r0
 801778c:	2b00      	cmp	r3, #0
 801778e:	d004      	beq.n	801779a <f_write+0x150>
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	2201      	movs	r2, #1
 8017794:	755a      	strb	r2, [r3, #21]
 8017796:	2301      	movs	r3, #1
 8017798:	e0c8      	b.n	801792c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	7d1b      	ldrb	r3, [r3, #20]
 801779e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80177a2:	b2da      	uxtb	r2, r3
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80177a8:	693a      	ldr	r2, [r7, #16]
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	69db      	ldr	r3, [r3, #28]
 80177ae:	4619      	mov	r1, r3
 80177b0:	4610      	mov	r0, r2
 80177b2:	f7fe fabb 	bl	8015d2c <clust2sect>
 80177b6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d104      	bne.n	80177c8 <f_write+0x17e>
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	2202      	movs	r2, #2
 80177c2:	755a      	strb	r2, [r3, #21]
 80177c4:	2302      	movs	r3, #2
 80177c6:	e0b1      	b.n	801792c <f_write+0x2e2>
			sect += csect;
 80177c8:	697a      	ldr	r2, [r7, #20]
 80177ca:	69bb      	ldr	r3, [r7, #24]
 80177cc:	4413      	add	r3, r2
 80177ce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	0a5b      	lsrs	r3, r3, #9
 80177d4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80177d6:	6a3b      	ldr	r3, [r7, #32]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d03c      	beq.n	8017856 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80177dc:	69ba      	ldr	r2, [r7, #24]
 80177de:	6a3b      	ldr	r3, [r7, #32]
 80177e0:	4413      	add	r3, r2
 80177e2:	693a      	ldr	r2, [r7, #16]
 80177e4:	8952      	ldrh	r2, [r2, #10]
 80177e6:	4293      	cmp	r3, r2
 80177e8:	d905      	bls.n	80177f6 <f_write+0x1ac>
					cc = fs->csize - csect;
 80177ea:	693b      	ldr	r3, [r7, #16]
 80177ec:	895b      	ldrh	r3, [r3, #10]
 80177ee:	461a      	mov	r2, r3
 80177f0:	69bb      	ldr	r3, [r7, #24]
 80177f2:	1ad3      	subs	r3, r2, r3
 80177f4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80177f6:	693b      	ldr	r3, [r7, #16]
 80177f8:	7858      	ldrb	r0, [r3, #1]
 80177fa:	6a3b      	ldr	r3, [r7, #32]
 80177fc:	697a      	ldr	r2, [r7, #20]
 80177fe:	69f9      	ldr	r1, [r7, #28]
 8017800:	f7fd ff0a 	bl	8015618 <disk_write>
 8017804:	4603      	mov	r3, r0
 8017806:	2b00      	cmp	r3, #0
 8017808:	d004      	beq.n	8017814 <f_write+0x1ca>
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	2201      	movs	r2, #1
 801780e:	755a      	strb	r2, [r3, #21]
 8017810:	2301      	movs	r3, #1
 8017812:	e08b      	b.n	801792c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	6a1a      	ldr	r2, [r3, #32]
 8017818:	697b      	ldr	r3, [r7, #20]
 801781a:	1ad3      	subs	r3, r2, r3
 801781c:	6a3a      	ldr	r2, [r7, #32]
 801781e:	429a      	cmp	r2, r3
 8017820:	d915      	bls.n	801784e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	6a1a      	ldr	r2, [r3, #32]
 801782c:	697b      	ldr	r3, [r7, #20]
 801782e:	1ad3      	subs	r3, r2, r3
 8017830:	025b      	lsls	r3, r3, #9
 8017832:	69fa      	ldr	r2, [r7, #28]
 8017834:	4413      	add	r3, r2
 8017836:	f44f 7200 	mov.w	r2, #512	; 0x200
 801783a:	4619      	mov	r1, r3
 801783c:	f7fd ffac 	bl	8015798 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	7d1b      	ldrb	r3, [r3, #20]
 8017844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017848:	b2da      	uxtb	r2, r3
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801784e:	6a3b      	ldr	r3, [r7, #32]
 8017850:	025b      	lsls	r3, r3, #9
 8017852:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017854:	e03f      	b.n	80178d6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	6a1b      	ldr	r3, [r3, #32]
 801785a:	697a      	ldr	r2, [r7, #20]
 801785c:	429a      	cmp	r2, r3
 801785e:	d016      	beq.n	801788e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	699a      	ldr	r2, [r3, #24]
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017868:	429a      	cmp	r2, r3
 801786a:	d210      	bcs.n	801788e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801786c:	693b      	ldr	r3, [r7, #16]
 801786e:	7858      	ldrb	r0, [r3, #1]
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017876:	2301      	movs	r3, #1
 8017878:	697a      	ldr	r2, [r7, #20]
 801787a:	f7fd fead 	bl	80155d8 <disk_read>
 801787e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017880:	2b00      	cmp	r3, #0
 8017882:	d004      	beq.n	801788e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	2201      	movs	r2, #1
 8017888:	755a      	strb	r2, [r3, #21]
 801788a:	2301      	movs	r3, #1
 801788c:	e04e      	b.n	801792c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	697a      	ldr	r2, [r7, #20]
 8017892:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	699b      	ldr	r3, [r3, #24]
 8017898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801789c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80178a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80178a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	429a      	cmp	r2, r3
 80178a8:	d901      	bls.n	80178ae <f_write+0x264>
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	699b      	ldr	r3, [r3, #24]
 80178b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80178bc:	4413      	add	r3, r2
 80178be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178c0:	69f9      	ldr	r1, [r7, #28]
 80178c2:	4618      	mov	r0, r3
 80178c4:	f7fd ff68 	bl	8015798 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	7d1b      	ldrb	r3, [r3, #20]
 80178cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80178d0:	b2da      	uxtb	r2, r3
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80178d6:	69fa      	ldr	r2, [r7, #28]
 80178d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178da:	4413      	add	r3, r2
 80178dc:	61fb      	str	r3, [r7, #28]
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	699a      	ldr	r2, [r3, #24]
 80178e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178e4:	441a      	add	r2, r3
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	619a      	str	r2, [r3, #24]
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	68da      	ldr	r2, [r3, #12]
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	699b      	ldr	r3, [r3, #24]
 80178f2:	429a      	cmp	r2, r3
 80178f4:	bf38      	it	cc
 80178f6:	461a      	movcc	r2, r3
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	60da      	str	r2, [r3, #12]
 80178fc:	683b      	ldr	r3, [r7, #0]
 80178fe:	681a      	ldr	r2, [r3, #0]
 8017900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017902:	441a      	add	r2, r3
 8017904:	683b      	ldr	r3, [r7, #0]
 8017906:	601a      	str	r2, [r3, #0]
 8017908:	687a      	ldr	r2, [r7, #4]
 801790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801790c:	1ad3      	subs	r3, r2, r3
 801790e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	2b00      	cmp	r3, #0
 8017914:	f47f aed4 	bne.w	80176c0 <f_write+0x76>
 8017918:	e000      	b.n	801791c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801791a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	7d1b      	ldrb	r3, [r3, #20]
 8017920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017924:	b2da      	uxtb	r2, r3
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801792a:	2300      	movs	r3, #0
}
 801792c:	4618      	mov	r0, r3
 801792e:	3730      	adds	r7, #48	; 0x30
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}

08017934 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b086      	sub	sp, #24
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	f107 0208 	add.w	r2, r7, #8
 8017942:	4611      	mov	r1, r2
 8017944:	4618      	mov	r0, r3
 8017946:	f7ff fb07 	bl	8016f58 <validate>
 801794a:	4603      	mov	r3, r0
 801794c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801794e:	7dfb      	ldrb	r3, [r7, #23]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d168      	bne.n	8017a26 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	7d1b      	ldrb	r3, [r3, #20]
 8017958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801795c:	2b00      	cmp	r3, #0
 801795e:	d062      	beq.n	8017a26 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	7d1b      	ldrb	r3, [r3, #20]
 8017964:	b25b      	sxtb	r3, r3
 8017966:	2b00      	cmp	r3, #0
 8017968:	da15      	bge.n	8017996 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801796a:	68bb      	ldr	r3, [r7, #8]
 801796c:	7858      	ldrb	r0, [r3, #1]
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	6a1a      	ldr	r2, [r3, #32]
 8017978:	2301      	movs	r3, #1
 801797a:	f7fd fe4d 	bl	8015618 <disk_write>
 801797e:	4603      	mov	r3, r0
 8017980:	2b00      	cmp	r3, #0
 8017982:	d001      	beq.n	8017988 <f_sync+0x54>
 8017984:	2301      	movs	r3, #1
 8017986:	e04f      	b.n	8017a28 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	7d1b      	ldrb	r3, [r3, #20]
 801798c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017990:	b2da      	uxtb	r2, r3
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017996:	f7fa fce1 	bl	801235c <get_fattime>
 801799a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801799c:	68ba      	ldr	r2, [r7, #8]
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179a2:	4619      	mov	r1, r3
 80179a4:	4610      	mov	r0, r2
 80179a6:	f7fe f925 	bl	8015bf4 <move_window>
 80179aa:	4603      	mov	r3, r0
 80179ac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80179ae:	7dfb      	ldrb	r3, [r7, #23]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d138      	bne.n	8017a26 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179b8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	330b      	adds	r3, #11
 80179be:	781a      	ldrb	r2, [r3, #0]
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	330b      	adds	r3, #11
 80179c4:	f042 0220 	orr.w	r2, r2, #32
 80179c8:	b2d2      	uxtb	r2, r2
 80179ca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	6818      	ldr	r0, [r3, #0]
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	689b      	ldr	r3, [r3, #8]
 80179d4:	461a      	mov	r2, r3
 80179d6:	68f9      	ldr	r1, [r7, #12]
 80179d8:	f7fe fe2a 	bl	8016630 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	f103 021c 	add.w	r2, r3, #28
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	68db      	ldr	r3, [r3, #12]
 80179e6:	4619      	mov	r1, r3
 80179e8:	4610      	mov	r0, r2
 80179ea:	f7fd fea9 	bl	8015740 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	3316      	adds	r3, #22
 80179f2:	6939      	ldr	r1, [r7, #16]
 80179f4:	4618      	mov	r0, r3
 80179f6:	f7fd fea3 	bl	8015740 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	3312      	adds	r3, #18
 80179fe:	2100      	movs	r1, #0
 8017a00:	4618      	mov	r0, r3
 8017a02:	f7fd fe82 	bl	801570a <st_word>
					fs->wflag = 1;
 8017a06:	68bb      	ldr	r3, [r7, #8]
 8017a08:	2201      	movs	r2, #1
 8017a0a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017a0c:	68bb      	ldr	r3, [r7, #8]
 8017a0e:	4618      	mov	r0, r3
 8017a10:	f7fe f91e 	bl	8015c50 <sync_fs>
 8017a14:	4603      	mov	r3, r0
 8017a16:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	7d1b      	ldrb	r3, [r3, #20]
 8017a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017a20:	b2da      	uxtb	r2, r3
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a28:	4618      	mov	r0, r3
 8017a2a:	3718      	adds	r7, #24
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}

08017a30 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b084      	sub	sp, #16
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f7ff ff7b 	bl	8017934 <f_sync>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017a42:	7bfb      	ldrb	r3, [r7, #15]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d118      	bne.n	8017a7a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	f107 0208 	add.w	r2, r7, #8
 8017a4e:	4611      	mov	r1, r2
 8017a50:	4618      	mov	r0, r3
 8017a52:	f7ff fa81 	bl	8016f58 <validate>
 8017a56:	4603      	mov	r3, r0
 8017a58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017a5a:	7bfb      	ldrb	r3, [r7, #15]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d10c      	bne.n	8017a7a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	691b      	ldr	r3, [r3, #16]
 8017a64:	4618      	mov	r0, r3
 8017a66:	f7fe f821 	bl	8015aac <dec_lock>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8017a6e:	7bfb      	ldrb	r3, [r7, #15]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d102      	bne.n	8017a7a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2200      	movs	r2, #0
 8017a78:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	3710      	adds	r7, #16
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}

08017a84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017a84:	b480      	push	{r7}
 8017a86:	b087      	sub	sp, #28
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	60f8      	str	r0, [r7, #12]
 8017a8c:	60b9      	str	r1, [r7, #8]
 8017a8e:	4613      	mov	r3, r2
 8017a90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017a92:	2301      	movs	r3, #1
 8017a94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017a96:	2300      	movs	r3, #0
 8017a98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017a9a:	4b1f      	ldr	r3, [pc, #124]	; (8017b18 <FATFS_LinkDriverEx+0x94>)
 8017a9c:	7a5b      	ldrb	r3, [r3, #9]
 8017a9e:	b2db      	uxtb	r3, r3
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d131      	bne.n	8017b08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017aa4:	4b1c      	ldr	r3, [pc, #112]	; (8017b18 <FATFS_LinkDriverEx+0x94>)
 8017aa6:	7a5b      	ldrb	r3, [r3, #9]
 8017aa8:	b2db      	uxtb	r3, r3
 8017aaa:	461a      	mov	r2, r3
 8017aac:	4b1a      	ldr	r3, [pc, #104]	; (8017b18 <FATFS_LinkDriverEx+0x94>)
 8017aae:	2100      	movs	r1, #0
 8017ab0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017ab2:	4b19      	ldr	r3, [pc, #100]	; (8017b18 <FATFS_LinkDriverEx+0x94>)
 8017ab4:	7a5b      	ldrb	r3, [r3, #9]
 8017ab6:	b2db      	uxtb	r3, r3
 8017ab8:	4a17      	ldr	r2, [pc, #92]	; (8017b18 <FATFS_LinkDriverEx+0x94>)
 8017aba:	009b      	lsls	r3, r3, #2
 8017abc:	4413      	add	r3, r2
 8017abe:	68fa      	ldr	r2, [r7, #12]
 8017ac0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017ac2:	4b15      	ldr	r3, [pc, #84]	; (8017b18 <FATFS_LinkDriverEx+0x94>)
 8017ac4:	7a5b      	ldrb	r3, [r3, #9]
 8017ac6:	b2db      	uxtb	r3, r3
 8017ac8:	461a      	mov	r2, r3
 8017aca:	4b13      	ldr	r3, [pc, #76]	; (8017b18 <FATFS_LinkDriverEx+0x94>)
 8017acc:	4413      	add	r3, r2
 8017ace:	79fa      	ldrb	r2, [r7, #7]
 8017ad0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017ad2:	4b11      	ldr	r3, [pc, #68]	; (8017b18 <FATFS_LinkDriverEx+0x94>)
 8017ad4:	7a5b      	ldrb	r3, [r3, #9]
 8017ad6:	b2db      	uxtb	r3, r3
 8017ad8:	1c5a      	adds	r2, r3, #1
 8017ada:	b2d1      	uxtb	r1, r2
 8017adc:	4a0e      	ldr	r2, [pc, #56]	; (8017b18 <FATFS_LinkDriverEx+0x94>)
 8017ade:	7251      	strb	r1, [r2, #9]
 8017ae0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017ae2:	7dbb      	ldrb	r3, [r7, #22]
 8017ae4:	3330      	adds	r3, #48	; 0x30
 8017ae6:	b2da      	uxtb	r2, r3
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017aec:	68bb      	ldr	r3, [r7, #8]
 8017aee:	3301      	adds	r3, #1
 8017af0:	223a      	movs	r2, #58	; 0x3a
 8017af2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	3302      	adds	r3, #2
 8017af8:	222f      	movs	r2, #47	; 0x2f
 8017afa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017afc:	68bb      	ldr	r3, [r7, #8]
 8017afe:	3303      	adds	r3, #3
 8017b00:	2200      	movs	r2, #0
 8017b02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017b04:	2300      	movs	r3, #0
 8017b06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	371c      	adds	r7, #28
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b14:	4770      	bx	lr
 8017b16:	bf00      	nop
 8017b18:	24000b78 	.word	0x24000b78

08017b1c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b082      	sub	sp, #8
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
 8017b24:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017b26:	2200      	movs	r2, #0
 8017b28:	6839      	ldr	r1, [r7, #0]
 8017b2a:	6878      	ldr	r0, [r7, #4]
 8017b2c:	f7ff ffaa 	bl	8017a84 <FATFS_LinkDriverEx>
 8017b30:	4603      	mov	r3, r0
}
 8017b32:	4618      	mov	r0, r3
 8017b34:	3708      	adds	r7, #8
 8017b36:	46bd      	mov	sp, r7
 8017b38:	bd80      	pop	{r7, pc}
	...

08017b3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017b40:	2200      	movs	r2, #0
 8017b42:	4913      	ldr	r1, [pc, #76]	; (8017b90 <MX_USB_DEVICE_Init+0x54>)
 8017b44:	4813      	ldr	r0, [pc, #76]	; (8017b94 <MX_USB_DEVICE_Init+0x58>)
 8017b46:	f7fc fc20 	bl	801438a <USBD_Init>
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d001      	beq.n	8017b54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017b50:	f7eb f8ee 	bl	8002d30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8017b54:	4910      	ldr	r1, [pc, #64]	; (8017b98 <MX_USB_DEVICE_Init+0x5c>)
 8017b56:	480f      	ldr	r0, [pc, #60]	; (8017b94 <MX_USB_DEVICE_Init+0x58>)
 8017b58:	f7fc fc4d 	bl	80143f6 <USBD_RegisterClass>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d001      	beq.n	8017b66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017b62:	f7eb f8e5 	bl	8002d30 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8017b66:	490d      	ldr	r1, [pc, #52]	; (8017b9c <MX_USB_DEVICE_Init+0x60>)
 8017b68:	480a      	ldr	r0, [pc, #40]	; (8017b94 <MX_USB_DEVICE_Init+0x58>)
 8017b6a:	f7fa fff7 	bl	8012b5c <USBD_MSC_RegisterStorage>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d001      	beq.n	8017b78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017b74:	f7eb f8dc 	bl	8002d30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017b78:	4806      	ldr	r0, [pc, #24]	; (8017b94 <MX_USB_DEVICE_Init+0x58>)
 8017b7a:	f7fc fc5d 	bl	8014438 <USBD_Start>
 8017b7e:	4603      	mov	r3, r0
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d001      	beq.n	8017b88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017b84:	f7eb f8d4 	bl	8002d30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017b88:	f7f0 fe2e 	bl	80087e8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017b8c:	bf00      	nop
 8017b8e:	bd80      	pop	{r7, pc}
 8017b90:	24000104 	.word	0x24000104
 8017b94:	24001bac 	.word	0x24001bac
 8017b98:	2400001c 	.word	0x2400001c
 8017b9c:	24000154 	.word	0x24000154

08017ba0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ba0:	b480      	push	{r7}
 8017ba2:	b083      	sub	sp, #12
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	6039      	str	r1, [r7, #0]
 8017baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	2212      	movs	r2, #18
 8017bb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017bb2:	4b03      	ldr	r3, [pc, #12]	; (8017bc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	370c      	adds	r7, #12
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bbe:	4770      	bx	lr
 8017bc0:	24000120 	.word	0x24000120

08017bc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017bc4:	b480      	push	{r7}
 8017bc6:	b083      	sub	sp, #12
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	4603      	mov	r3, r0
 8017bcc:	6039      	str	r1, [r7, #0]
 8017bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017bd0:	683b      	ldr	r3, [r7, #0]
 8017bd2:	2204      	movs	r2, #4
 8017bd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017bd6:	4b03      	ldr	r3, [pc, #12]	; (8017be4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017bd8:	4618      	mov	r0, r3
 8017bda:	370c      	adds	r7, #12
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be2:	4770      	bx	lr
 8017be4:	24000134 	.word	0x24000134

08017be8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	4603      	mov	r3, r0
 8017bf0:	6039      	str	r1, [r7, #0]
 8017bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017bf4:	79fb      	ldrb	r3, [r7, #7]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d105      	bne.n	8017c06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017bfa:	683a      	ldr	r2, [r7, #0]
 8017bfc:	4907      	ldr	r1, [pc, #28]	; (8017c1c <USBD_FS_ProductStrDescriptor+0x34>)
 8017bfe:	4808      	ldr	r0, [pc, #32]	; (8017c20 <USBD_FS_ProductStrDescriptor+0x38>)
 8017c00:	f7fd fbe7 	bl	80153d2 <USBD_GetString>
 8017c04:	e004      	b.n	8017c10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017c06:	683a      	ldr	r2, [r7, #0]
 8017c08:	4904      	ldr	r1, [pc, #16]	; (8017c1c <USBD_FS_ProductStrDescriptor+0x34>)
 8017c0a:	4805      	ldr	r0, [pc, #20]	; (8017c20 <USBD_FS_ProductStrDescriptor+0x38>)
 8017c0c:	f7fd fbe1 	bl	80153d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017c10:	4b02      	ldr	r3, [pc, #8]	; (8017c1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017c12:	4618      	mov	r0, r3
 8017c14:	3708      	adds	r7, #8
 8017c16:	46bd      	mov	sp, r7
 8017c18:	bd80      	pop	{r7, pc}
 8017c1a:	bf00      	nop
 8017c1c:	24001e7c 	.word	0x24001e7c
 8017c20:	08019fd8 	.word	0x08019fd8

08017c24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b082      	sub	sp, #8
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	6039      	str	r1, [r7, #0]
 8017c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017c30:	683a      	ldr	r2, [r7, #0]
 8017c32:	4904      	ldr	r1, [pc, #16]	; (8017c44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017c34:	4804      	ldr	r0, [pc, #16]	; (8017c48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017c36:	f7fd fbcc 	bl	80153d2 <USBD_GetString>
  return USBD_StrDesc;
 8017c3a:	4b02      	ldr	r3, [pc, #8]	; (8017c44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	3708      	adds	r7, #8
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}
 8017c44:	24001e7c 	.word	0x24001e7c
 8017c48:	08019fec 	.word	0x08019fec

08017c4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b082      	sub	sp, #8
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	4603      	mov	r3, r0
 8017c54:	6039      	str	r1, [r7, #0]
 8017c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017c58:	683b      	ldr	r3, [r7, #0]
 8017c5a:	221a      	movs	r2, #26
 8017c5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017c5e:	f000 f843 	bl	8017ce8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017c62:	4b02      	ldr	r3, [pc, #8]	; (8017c6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	3708      	adds	r7, #8
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}
 8017c6c:	24000138 	.word	0x24000138

08017c70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b082      	sub	sp, #8
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	4603      	mov	r3, r0
 8017c78:	6039      	str	r1, [r7, #0]
 8017c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017c7c:	79fb      	ldrb	r3, [r7, #7]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d105      	bne.n	8017c8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017c82:	683a      	ldr	r2, [r7, #0]
 8017c84:	4907      	ldr	r1, [pc, #28]	; (8017ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017c86:	4808      	ldr	r0, [pc, #32]	; (8017ca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017c88:	f7fd fba3 	bl	80153d2 <USBD_GetString>
 8017c8c:	e004      	b.n	8017c98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017c8e:	683a      	ldr	r2, [r7, #0]
 8017c90:	4904      	ldr	r1, [pc, #16]	; (8017ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017c92:	4805      	ldr	r0, [pc, #20]	; (8017ca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017c94:	f7fd fb9d 	bl	80153d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017c98:	4b02      	ldr	r3, [pc, #8]	; (8017ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	3708      	adds	r7, #8
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	bd80      	pop	{r7, pc}
 8017ca2:	bf00      	nop
 8017ca4:	24001e7c 	.word	0x24001e7c
 8017ca8:	0801a000 	.word	0x0801a000

08017cac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b082      	sub	sp, #8
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	6039      	str	r1, [r7, #0]
 8017cb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017cb8:	79fb      	ldrb	r3, [r7, #7]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d105      	bne.n	8017cca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017cbe:	683a      	ldr	r2, [r7, #0]
 8017cc0:	4907      	ldr	r1, [pc, #28]	; (8017ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017cc2:	4808      	ldr	r0, [pc, #32]	; (8017ce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017cc4:	f7fd fb85 	bl	80153d2 <USBD_GetString>
 8017cc8:	e004      	b.n	8017cd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017cca:	683a      	ldr	r2, [r7, #0]
 8017ccc:	4904      	ldr	r1, [pc, #16]	; (8017ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017cce:	4805      	ldr	r0, [pc, #20]	; (8017ce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017cd0:	f7fd fb7f 	bl	80153d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017cd4:	4b02      	ldr	r3, [pc, #8]	; (8017ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	3708      	adds	r7, #8
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}
 8017cde:	bf00      	nop
 8017ce0:	24001e7c 	.word	0x24001e7c
 8017ce4:	0801a00c 	.word	0x0801a00c

08017ce8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b084      	sub	sp, #16
 8017cec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017cee:	4b0f      	ldr	r3, [pc, #60]	; (8017d2c <Get_SerialNum+0x44>)
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017cf4:	4b0e      	ldr	r3, [pc, #56]	; (8017d30 <Get_SerialNum+0x48>)
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017cfa:	4b0e      	ldr	r3, [pc, #56]	; (8017d34 <Get_SerialNum+0x4c>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017d00:	68fa      	ldr	r2, [r7, #12]
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	4413      	add	r3, r2
 8017d06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d009      	beq.n	8017d22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017d0e:	2208      	movs	r2, #8
 8017d10:	4909      	ldr	r1, [pc, #36]	; (8017d38 <Get_SerialNum+0x50>)
 8017d12:	68f8      	ldr	r0, [r7, #12]
 8017d14:	f000 f814 	bl	8017d40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017d18:	2204      	movs	r2, #4
 8017d1a:	4908      	ldr	r1, [pc, #32]	; (8017d3c <Get_SerialNum+0x54>)
 8017d1c:	68b8      	ldr	r0, [r7, #8]
 8017d1e:	f000 f80f 	bl	8017d40 <IntToUnicode>
  }
}
 8017d22:	bf00      	nop
 8017d24:	3710      	adds	r7, #16
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bd80      	pop	{r7, pc}
 8017d2a:	bf00      	nop
 8017d2c:	1ff1e800 	.word	0x1ff1e800
 8017d30:	1ff1e804 	.word	0x1ff1e804
 8017d34:	1ff1e808 	.word	0x1ff1e808
 8017d38:	2400013a 	.word	0x2400013a
 8017d3c:	2400014a 	.word	0x2400014a

08017d40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017d40:	b480      	push	{r7}
 8017d42:	b087      	sub	sp, #28
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	60f8      	str	r0, [r7, #12]
 8017d48:	60b9      	str	r1, [r7, #8]
 8017d4a:	4613      	mov	r3, r2
 8017d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017d4e:	2300      	movs	r3, #0
 8017d50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017d52:	2300      	movs	r3, #0
 8017d54:	75fb      	strb	r3, [r7, #23]
 8017d56:	e027      	b.n	8017da8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	0f1b      	lsrs	r3, r3, #28
 8017d5c:	2b09      	cmp	r3, #9
 8017d5e:	d80b      	bhi.n	8017d78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	0f1b      	lsrs	r3, r3, #28
 8017d64:	b2da      	uxtb	r2, r3
 8017d66:	7dfb      	ldrb	r3, [r7, #23]
 8017d68:	005b      	lsls	r3, r3, #1
 8017d6a:	4619      	mov	r1, r3
 8017d6c:	68bb      	ldr	r3, [r7, #8]
 8017d6e:	440b      	add	r3, r1
 8017d70:	3230      	adds	r2, #48	; 0x30
 8017d72:	b2d2      	uxtb	r2, r2
 8017d74:	701a      	strb	r2, [r3, #0]
 8017d76:	e00a      	b.n	8017d8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	0f1b      	lsrs	r3, r3, #28
 8017d7c:	b2da      	uxtb	r2, r3
 8017d7e:	7dfb      	ldrb	r3, [r7, #23]
 8017d80:	005b      	lsls	r3, r3, #1
 8017d82:	4619      	mov	r1, r3
 8017d84:	68bb      	ldr	r3, [r7, #8]
 8017d86:	440b      	add	r3, r1
 8017d88:	3237      	adds	r2, #55	; 0x37
 8017d8a:	b2d2      	uxtb	r2, r2
 8017d8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	011b      	lsls	r3, r3, #4
 8017d92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017d94:	7dfb      	ldrb	r3, [r7, #23]
 8017d96:	005b      	lsls	r3, r3, #1
 8017d98:	3301      	adds	r3, #1
 8017d9a:	68ba      	ldr	r2, [r7, #8]
 8017d9c:	4413      	add	r3, r2
 8017d9e:	2200      	movs	r2, #0
 8017da0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017da2:	7dfb      	ldrb	r3, [r7, #23]
 8017da4:	3301      	adds	r3, #1
 8017da6:	75fb      	strb	r3, [r7, #23]
 8017da8:	7dfa      	ldrb	r2, [r7, #23]
 8017daa:	79fb      	ldrb	r3, [r7, #7]
 8017dac:	429a      	cmp	r2, r3
 8017dae:	d3d3      	bcc.n	8017d58 <IntToUnicode+0x18>
  }
}
 8017db0:	bf00      	nop
 8017db2:	371c      	adds	r7, #28
 8017db4:	46bd      	mov	sp, r7
 8017db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dba:	4770      	bx	lr

08017dbc <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8017dbc:	b480      	push	{r7}
 8017dbe:	b083      	sub	sp, #12
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8017dc6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8017dc8:	4618      	mov	r0, r3
 8017dca:	370c      	adds	r7, #12
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd2:	4770      	bx	lr

08017dd4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b08e      	sub	sp, #56	; 0x38
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	4603      	mov	r3, r0
 8017ddc:	60b9      	str	r1, [r7, #8]
 8017dde:	607a      	str	r2, [r7, #4]
 8017de0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8017de2:	23ff      	movs	r3, #255	; 0xff
 8017de4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8017de8:	f107 0310 	add.w	r3, r7, #16
 8017dec:	4619      	mov	r1, r3
 8017dee:	480a      	ldr	r0, [pc, #40]	; (8017e18 <STORAGE_GetCapacity_FS+0x44>)
 8017df0:	f7f5 f89a 	bl	800cf28 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8017df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df6:	1e5a      	subs	r2, r3, #1
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8017dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dfe:	b29a      	uxth	r2, r3
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8017e04:	2300      	movs	r3, #0
 8017e06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8017e0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8017e0e:	4618      	mov	r0, r3
 8017e10:	3738      	adds	r7, #56	; 0x38
 8017e12:	46bd      	mov	sp, r7
 8017e14:	bd80      	pop	{r7, pc}
 8017e16:	bf00      	nop
 8017e18:	24001448 	.word	0x24001448

08017e1c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8017e1c:	b480      	push	{r7}
 8017e1e:	b083      	sub	sp, #12
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	4603      	mov	r3, r0
 8017e24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017e26:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	370c      	adds	r7, #12
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e32:	4770      	bx	lr

08017e34 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8017e34:	b480      	push	{r7}
 8017e36:	b083      	sub	sp, #12
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8017e3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017e40:	4618      	mov	r0, r3
 8017e42:	370c      	adds	r7, #12
 8017e44:	46bd      	mov	sp, r7
 8017e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4a:	4770      	bx	lr

08017e4c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b088      	sub	sp, #32
 8017e50:	af02      	add	r7, sp, #8
 8017e52:	60b9      	str	r1, [r7, #8]
 8017e54:	607a      	str	r2, [r7, #4]
 8017e56:	461a      	mov	r2, r3
 8017e58:	4603      	mov	r3, r0
 8017e5a:	73fb      	strb	r3, [r7, #15]
 8017e5c:	4613      	mov	r3, r2
 8017e5e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8017e60:	23ff      	movs	r3, #255	; 0xff
 8017e62:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017e64:	89ba      	ldrh	r2, [r7, #12]
 8017e66:	f04f 33ff 	mov.w	r3, #4294967295
 8017e6a:	9300      	str	r3, [sp, #0]
 8017e6c:	4613      	mov	r3, r2
 8017e6e:	687a      	ldr	r2, [r7, #4]
 8017e70:	68b9      	ldr	r1, [r7, #8]
 8017e72:	4809      	ldr	r0, [pc, #36]	; (8017e98 <STORAGE_Read_FS+0x4c>)
 8017e74:	f7f3 ffca 	bl	800be0c <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017e78:	bf00      	nop
 8017e7a:	4807      	ldr	r0, [pc, #28]	; (8017e98 <STORAGE_Read_FS+0x4c>)
 8017e7c:	f7f5 f92a 	bl	800d0d4 <HAL_SD_GetCardState>
 8017e80:	4603      	mov	r3, r0
 8017e82:	2b04      	cmp	r3, #4
 8017e84:	d1f9      	bne.n	8017e7a <STORAGE_Read_FS+0x2e>
	ret = 0;
 8017e86:	2300      	movs	r3, #0
 8017e88:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8017e8e:	4618      	mov	r0, r3
 8017e90:	3718      	adds	r7, #24
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}
 8017e96:	bf00      	nop
 8017e98:	24001448 	.word	0x24001448

08017e9c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b088      	sub	sp, #32
 8017ea0:	af02      	add	r7, sp, #8
 8017ea2:	60b9      	str	r1, [r7, #8]
 8017ea4:	607a      	str	r2, [r7, #4]
 8017ea6:	461a      	mov	r2, r3
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	73fb      	strb	r3, [r7, #15]
 8017eac:	4613      	mov	r3, r2
 8017eae:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8017eb0:	23ff      	movs	r3, #255	; 0xff
 8017eb2:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017eb4:	89ba      	ldrh	r2, [r7, #12]
 8017eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8017eba:	9300      	str	r3, [sp, #0]
 8017ebc:	4613      	mov	r3, r2
 8017ebe:	687a      	ldr	r2, [r7, #4]
 8017ec0:	68b9      	ldr	r1, [r7, #8]
 8017ec2:	4809      	ldr	r0, [pc, #36]	; (8017ee8 <STORAGE_Write_FS+0x4c>)
 8017ec4:	f7f4 f92c 	bl	800c120 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017ec8:	bf00      	nop
 8017eca:	4807      	ldr	r0, [pc, #28]	; (8017ee8 <STORAGE_Write_FS+0x4c>)
 8017ecc:	f7f5 f902 	bl	800d0d4 <HAL_SD_GetCardState>
 8017ed0:	4603      	mov	r3, r0
 8017ed2:	2b04      	cmp	r3, #4
 8017ed4:	d1f9      	bne.n	8017eca <STORAGE_Write_FS+0x2e>
	ret = 0;
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	3718      	adds	r7, #24
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}
 8017ee6:	bf00      	nop
 8017ee8:	24001448 	.word	0x24001448

08017eec <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017eec:	b480      	push	{r7}
 8017eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8017ef0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017efa:	4770      	bx	lr

08017efc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b08a      	sub	sp, #40	; 0x28
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f04:	f107 0314 	add.w	r3, r7, #20
 8017f08:	2200      	movs	r2, #0
 8017f0a:	601a      	str	r2, [r3, #0]
 8017f0c:	605a      	str	r2, [r3, #4]
 8017f0e:	609a      	str	r2, [r3, #8]
 8017f10:	60da      	str	r2, [r3, #12]
 8017f12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	4a1e      	ldr	r2, [pc, #120]	; (8017f94 <HAL_PCD_MspInit+0x98>)
 8017f1a:	4293      	cmp	r3, r2
 8017f1c:	d136      	bne.n	8017f8c <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017f1e:	4b1e      	ldr	r3, [pc, #120]	; (8017f98 <HAL_PCD_MspInit+0x9c>)
 8017f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017f24:	4a1c      	ldr	r2, [pc, #112]	; (8017f98 <HAL_PCD_MspInit+0x9c>)
 8017f26:	f043 0301 	orr.w	r3, r3, #1
 8017f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8017f2e:	4b1a      	ldr	r3, [pc, #104]	; (8017f98 <HAL_PCD_MspInit+0x9c>)
 8017f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017f34:	f003 0301 	and.w	r3, r3, #1
 8017f38:	613b      	str	r3, [r7, #16]
 8017f3a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017f3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f42:	2302      	movs	r3, #2
 8017f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f46:	2300      	movs	r3, #0
 8017f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017f4e:	230a      	movs	r3, #10
 8017f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017f52:	f107 0314 	add.w	r3, r7, #20
 8017f56:	4619      	mov	r1, r3
 8017f58:	4810      	ldr	r0, [pc, #64]	; (8017f9c <HAL_PCD_MspInit+0xa0>)
 8017f5a:	f7ee ff2f 	bl	8006dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017f5e:	4b0e      	ldr	r3, [pc, #56]	; (8017f98 <HAL_PCD_MspInit+0x9c>)
 8017f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017f64:	4a0c      	ldr	r2, [pc, #48]	; (8017f98 <HAL_PCD_MspInit+0x9c>)
 8017f66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017f6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017f6e:	4b0a      	ldr	r3, [pc, #40]	; (8017f98 <HAL_PCD_MspInit+0x9c>)
 8017f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017f78:	60fb      	str	r3, [r7, #12]
 8017f7a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	2100      	movs	r1, #0
 8017f80:	2065      	movs	r0, #101	; 0x65
 8017f82:	f7eb fcd2 	bl	800392a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017f86:	2065      	movs	r0, #101	; 0x65
 8017f88:	f7eb fce9 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017f8c:	bf00      	nop
 8017f8e:	3728      	adds	r7, #40	; 0x28
 8017f90:	46bd      	mov	sp, r7
 8017f92:	bd80      	pop	{r7, pc}
 8017f94:	40080000 	.word	0x40080000
 8017f98:	58024400 	.word	0x58024400
 8017f9c:	58020000 	.word	0x58020000

08017fa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017fb4:	4619      	mov	r1, r3
 8017fb6:	4610      	mov	r0, r2
 8017fb8:	f7fc fa89 	bl	80144ce <USBD_LL_SetupStage>
}
 8017fbc:	bf00      	nop
 8017fbe:	3708      	adds	r7, #8
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}

08017fc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b082      	sub	sp, #8
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
 8017fcc:	460b      	mov	r3, r1
 8017fce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017fd6:	78fa      	ldrb	r2, [r7, #3]
 8017fd8:	6879      	ldr	r1, [r7, #4]
 8017fda:	4613      	mov	r3, r2
 8017fdc:	00db      	lsls	r3, r3, #3
 8017fde:	1a9b      	subs	r3, r3, r2
 8017fe0:	009b      	lsls	r3, r3, #2
 8017fe2:	440b      	add	r3, r1
 8017fe4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017fe8:	681a      	ldr	r2, [r3, #0]
 8017fea:	78fb      	ldrb	r3, [r7, #3]
 8017fec:	4619      	mov	r1, r3
 8017fee:	f7fc fac1 	bl	8014574 <USBD_LL_DataOutStage>
}
 8017ff2:	bf00      	nop
 8017ff4:	3708      	adds	r7, #8
 8017ff6:	46bd      	mov	sp, r7
 8017ff8:	bd80      	pop	{r7, pc}

08017ffa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ffa:	b580      	push	{r7, lr}
 8017ffc:	b082      	sub	sp, #8
 8017ffe:	af00      	add	r7, sp, #0
 8018000:	6078      	str	r0, [r7, #4]
 8018002:	460b      	mov	r3, r1
 8018004:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801800c:	78fa      	ldrb	r2, [r7, #3]
 801800e:	6879      	ldr	r1, [r7, #4]
 8018010:	4613      	mov	r3, r2
 8018012:	00db      	lsls	r3, r3, #3
 8018014:	1a9b      	subs	r3, r3, r2
 8018016:	009b      	lsls	r3, r3, #2
 8018018:	440b      	add	r3, r1
 801801a:	3348      	adds	r3, #72	; 0x48
 801801c:	681a      	ldr	r2, [r3, #0]
 801801e:	78fb      	ldrb	r3, [r7, #3]
 8018020:	4619      	mov	r1, r3
 8018022:	f7fc fb0a 	bl	801463a <USBD_LL_DataInStage>
}
 8018026:	bf00      	nop
 8018028:	3708      	adds	r7, #8
 801802a:	46bd      	mov	sp, r7
 801802c:	bd80      	pop	{r7, pc}

0801802e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801802e:	b580      	push	{r7, lr}
 8018030:	b082      	sub	sp, #8
 8018032:	af00      	add	r7, sp, #0
 8018034:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801803c:	4618      	mov	r0, r3
 801803e:	f7fc fc0e 	bl	801485e <USBD_LL_SOF>
}
 8018042:	bf00      	nop
 8018044:	3708      	adds	r7, #8
 8018046:	46bd      	mov	sp, r7
 8018048:	bd80      	pop	{r7, pc}

0801804a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801804a:	b580      	push	{r7, lr}
 801804c:	b084      	sub	sp, #16
 801804e:	af00      	add	r7, sp, #0
 8018050:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018052:	2301      	movs	r3, #1
 8018054:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	68db      	ldr	r3, [r3, #12]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d102      	bne.n	8018064 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801805e:	2300      	movs	r3, #0
 8018060:	73fb      	strb	r3, [r7, #15]
 8018062:	e008      	b.n	8018076 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	68db      	ldr	r3, [r3, #12]
 8018068:	2b02      	cmp	r3, #2
 801806a:	d102      	bne.n	8018072 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801806c:	2301      	movs	r3, #1
 801806e:	73fb      	strb	r3, [r7, #15]
 8018070:	e001      	b.n	8018076 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018072:	f7ea fe5d 	bl	8002d30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801807c:	7bfa      	ldrb	r2, [r7, #15]
 801807e:	4611      	mov	r1, r2
 8018080:	4618      	mov	r0, r3
 8018082:	f7fc fbb1 	bl	80147e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801808c:	4618      	mov	r0, r3
 801808e:	f7fc fb6a 	bl	8014766 <USBD_LL_Reset>
}
 8018092:	bf00      	nop
 8018094:	3710      	adds	r7, #16
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
	...

0801809c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801809c:	b580      	push	{r7, lr}
 801809e:	b082      	sub	sp, #8
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80180aa:	4618      	mov	r0, r3
 80180ac:	f7fc fbac 	bl	8014808 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	687a      	ldr	r2, [r7, #4]
 80180bc:	6812      	ldr	r2, [r2, #0]
 80180be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80180c2:	f043 0301 	orr.w	r3, r3, #1
 80180c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	6a1b      	ldr	r3, [r3, #32]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d005      	beq.n	80180dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80180d0:	4b04      	ldr	r3, [pc, #16]	; (80180e4 <HAL_PCD_SuspendCallback+0x48>)
 80180d2:	691b      	ldr	r3, [r3, #16]
 80180d4:	4a03      	ldr	r2, [pc, #12]	; (80180e4 <HAL_PCD_SuspendCallback+0x48>)
 80180d6:	f043 0306 	orr.w	r3, r3, #6
 80180da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80180dc:	bf00      	nop
 80180de:	3708      	adds	r7, #8
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}
 80180e4:	e000ed00 	.word	0xe000ed00

080180e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b082      	sub	sp, #8
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80180f6:	4618      	mov	r0, r3
 80180f8:	f7fc fb9b 	bl	8014832 <USBD_LL_Resume>
}
 80180fc:	bf00      	nop
 80180fe:	3708      	adds	r7, #8
 8018100:	46bd      	mov	sp, r7
 8018102:	bd80      	pop	{r7, pc}

08018104 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b082      	sub	sp, #8
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
 801810c:	460b      	mov	r3, r1
 801810e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018116:	78fa      	ldrb	r2, [r7, #3]
 8018118:	4611      	mov	r1, r2
 801811a:	4618      	mov	r0, r3
 801811c:	f7fc fbc6 	bl	80148ac <USBD_LL_IsoOUTIncomplete>
}
 8018120:	bf00      	nop
 8018122:	3708      	adds	r7, #8
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}

08018128 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b082      	sub	sp, #8
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
 8018130:	460b      	mov	r3, r1
 8018132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801813a:	78fa      	ldrb	r2, [r7, #3]
 801813c:	4611      	mov	r1, r2
 801813e:	4618      	mov	r0, r3
 8018140:	f7fc fba7 	bl	8014892 <USBD_LL_IsoINIncomplete>
}
 8018144:	bf00      	nop
 8018146:	3708      	adds	r7, #8
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}

0801814c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b082      	sub	sp, #8
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801815a:	4618      	mov	r0, r3
 801815c:	f7fc fbb3 	bl	80148c6 <USBD_LL_DevConnected>
}
 8018160:	bf00      	nop
 8018162:	3708      	adds	r7, #8
 8018164:	46bd      	mov	sp, r7
 8018166:	bd80      	pop	{r7, pc}

08018168 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b082      	sub	sp, #8
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018176:	4618      	mov	r0, r3
 8018178:	f7fc fbb0 	bl	80148dc <USBD_LL_DevDisconnected>
}
 801817c:	bf00      	nop
 801817e:	3708      	adds	r7, #8
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}

08018184 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b082      	sub	sp, #8
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	781b      	ldrb	r3, [r3, #0]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d13e      	bne.n	8018212 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018194:	4a21      	ldr	r2, [pc, #132]	; (801821c <USBD_LL_Init+0x98>)
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	4a1f      	ldr	r2, [pc, #124]	; (801821c <USBD_LL_Init+0x98>)
 80181a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80181a4:	4b1d      	ldr	r3, [pc, #116]	; (801821c <USBD_LL_Init+0x98>)
 80181a6:	4a1e      	ldr	r2, [pc, #120]	; (8018220 <USBD_LL_Init+0x9c>)
 80181a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80181aa:	4b1c      	ldr	r3, [pc, #112]	; (801821c <USBD_LL_Init+0x98>)
 80181ac:	2209      	movs	r2, #9
 80181ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80181b0:	4b1a      	ldr	r3, [pc, #104]	; (801821c <USBD_LL_Init+0x98>)
 80181b2:	2202      	movs	r2, #2
 80181b4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80181b6:	4b19      	ldr	r3, [pc, #100]	; (801821c <USBD_LL_Init+0x98>)
 80181b8:	2200      	movs	r2, #0
 80181ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80181bc:	4b17      	ldr	r3, [pc, #92]	; (801821c <USBD_LL_Init+0x98>)
 80181be:	2202      	movs	r2, #2
 80181c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80181c2:	4b16      	ldr	r3, [pc, #88]	; (801821c <USBD_LL_Init+0x98>)
 80181c4:	2200      	movs	r2, #0
 80181c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80181c8:	4b14      	ldr	r3, [pc, #80]	; (801821c <USBD_LL_Init+0x98>)
 80181ca:	2200      	movs	r2, #0
 80181cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80181ce:	4b13      	ldr	r3, [pc, #76]	; (801821c <USBD_LL_Init+0x98>)
 80181d0:	2200      	movs	r2, #0
 80181d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80181d4:	4b11      	ldr	r3, [pc, #68]	; (801821c <USBD_LL_Init+0x98>)
 80181d6:	2200      	movs	r2, #0
 80181d8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80181da:	4b10      	ldr	r3, [pc, #64]	; (801821c <USBD_LL_Init+0x98>)
 80181dc:	2200      	movs	r2, #0
 80181de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80181e0:	4b0e      	ldr	r3, [pc, #56]	; (801821c <USBD_LL_Init+0x98>)
 80181e2:	2200      	movs	r2, #0
 80181e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80181e6:	480d      	ldr	r0, [pc, #52]	; (801821c <USBD_LL_Init+0x98>)
 80181e8:	f7ef f822 	bl	8007230 <HAL_PCD_Init>
 80181ec:	4603      	mov	r3, r0
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d001      	beq.n	80181f6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80181f2:	f7ea fd9d 	bl	8002d30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80181f6:	2180      	movs	r1, #128	; 0x80
 80181f8:	4808      	ldr	r0, [pc, #32]	; (801821c <USBD_LL_Init+0x98>)
 80181fa:	f7f0 f9e0 	bl	80085be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80181fe:	2240      	movs	r2, #64	; 0x40
 8018200:	2100      	movs	r1, #0
 8018202:	4806      	ldr	r0, [pc, #24]	; (801821c <USBD_LL_Init+0x98>)
 8018204:	f7f0 f994 	bl	8008530 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018208:	2280      	movs	r2, #128	; 0x80
 801820a:	2101      	movs	r1, #1
 801820c:	4803      	ldr	r0, [pc, #12]	; (801821c <USBD_LL_Init+0x98>)
 801820e:	f7f0 f98f 	bl	8008530 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018212:	2300      	movs	r3, #0
}
 8018214:	4618      	mov	r0, r3
 8018216:	3708      	adds	r7, #8
 8018218:	46bd      	mov	sp, r7
 801821a:	bd80      	pop	{r7, pc}
 801821c:	2400207c 	.word	0x2400207c
 8018220:	40080000 	.word	0x40080000

08018224 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b084      	sub	sp, #16
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801822c:	2300      	movs	r3, #0
 801822e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018230:	2300      	movs	r3, #0
 8018232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801823a:	4618      	mov	r0, r3
 801823c:	f7ef f91c 	bl	8007478 <HAL_PCD_Start>
 8018240:	4603      	mov	r3, r0
 8018242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018244:	7bfb      	ldrb	r3, [r7, #15]
 8018246:	4618      	mov	r0, r3
 8018248:	f000 f94a 	bl	80184e0 <USBD_Get_USB_Status>
 801824c:	4603      	mov	r3, r0
 801824e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018250:	7bbb      	ldrb	r3, [r7, #14]
}
 8018252:	4618      	mov	r0, r3
 8018254:	3710      	adds	r7, #16
 8018256:	46bd      	mov	sp, r7
 8018258:	bd80      	pop	{r7, pc}

0801825a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801825a:	b580      	push	{r7, lr}
 801825c:	b084      	sub	sp, #16
 801825e:	af00      	add	r7, sp, #0
 8018260:	6078      	str	r0, [r7, #4]
 8018262:	4608      	mov	r0, r1
 8018264:	4611      	mov	r1, r2
 8018266:	461a      	mov	r2, r3
 8018268:	4603      	mov	r3, r0
 801826a:	70fb      	strb	r3, [r7, #3]
 801826c:	460b      	mov	r3, r1
 801826e:	70bb      	strb	r3, [r7, #2]
 8018270:	4613      	mov	r3, r2
 8018272:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018274:	2300      	movs	r3, #0
 8018276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018278:	2300      	movs	r3, #0
 801827a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018282:	78bb      	ldrb	r3, [r7, #2]
 8018284:	883a      	ldrh	r2, [r7, #0]
 8018286:	78f9      	ldrb	r1, [r7, #3]
 8018288:	f7ef fd2d 	bl	8007ce6 <HAL_PCD_EP_Open>
 801828c:	4603      	mov	r3, r0
 801828e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018290:	7bfb      	ldrb	r3, [r7, #15]
 8018292:	4618      	mov	r0, r3
 8018294:	f000 f924 	bl	80184e0 <USBD_Get_USB_Status>
 8018298:	4603      	mov	r3, r0
 801829a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801829c:	7bbb      	ldrb	r3, [r7, #14]
}
 801829e:	4618      	mov	r0, r3
 80182a0:	3710      	adds	r7, #16
 80182a2:	46bd      	mov	sp, r7
 80182a4:	bd80      	pop	{r7, pc}

080182a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182a6:	b580      	push	{r7, lr}
 80182a8:	b084      	sub	sp, #16
 80182aa:	af00      	add	r7, sp, #0
 80182ac:	6078      	str	r0, [r7, #4]
 80182ae:	460b      	mov	r3, r1
 80182b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182b2:	2300      	movs	r3, #0
 80182b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182b6:	2300      	movs	r3, #0
 80182b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80182c0:	78fa      	ldrb	r2, [r7, #3]
 80182c2:	4611      	mov	r1, r2
 80182c4:	4618      	mov	r0, r3
 80182c6:	f7ef fd76 	bl	8007db6 <HAL_PCD_EP_Close>
 80182ca:	4603      	mov	r3, r0
 80182cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182ce:	7bfb      	ldrb	r3, [r7, #15]
 80182d0:	4618      	mov	r0, r3
 80182d2:	f000 f905 	bl	80184e0 <USBD_Get_USB_Status>
 80182d6:	4603      	mov	r3, r0
 80182d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182da:	7bbb      	ldrb	r3, [r7, #14]
}
 80182dc:	4618      	mov	r0, r3
 80182de:	3710      	adds	r7, #16
 80182e0:	46bd      	mov	sp, r7
 80182e2:	bd80      	pop	{r7, pc}

080182e4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b084      	sub	sp, #16
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
 80182ec:	460b      	mov	r3, r1
 80182ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182f0:	2300      	movs	r3, #0
 80182f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182f4:	2300      	movs	r3, #0
 80182f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80182fe:	78fa      	ldrb	r2, [r7, #3]
 8018300:	4611      	mov	r1, r2
 8018302:	4618      	mov	r0, r3
 8018304:	f7ef ff08 	bl	8008118 <HAL_PCD_EP_Flush>
 8018308:	4603      	mov	r3, r0
 801830a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801830c:	7bfb      	ldrb	r3, [r7, #15]
 801830e:	4618      	mov	r0, r3
 8018310:	f000 f8e6 	bl	80184e0 <USBD_Get_USB_Status>
 8018314:	4603      	mov	r3, r0
 8018316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018318:	7bbb      	ldrb	r3, [r7, #14]
}
 801831a:	4618      	mov	r0, r3
 801831c:	3710      	adds	r7, #16
 801831e:	46bd      	mov	sp, r7
 8018320:	bd80      	pop	{r7, pc}

08018322 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018322:	b580      	push	{r7, lr}
 8018324:	b084      	sub	sp, #16
 8018326:	af00      	add	r7, sp, #0
 8018328:	6078      	str	r0, [r7, #4]
 801832a:	460b      	mov	r3, r1
 801832c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801832e:	2300      	movs	r3, #0
 8018330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018332:	2300      	movs	r3, #0
 8018334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801833c:	78fa      	ldrb	r2, [r7, #3]
 801833e:	4611      	mov	r1, r2
 8018340:	4618      	mov	r0, r3
 8018342:	f7ef fe2f 	bl	8007fa4 <HAL_PCD_EP_SetStall>
 8018346:	4603      	mov	r3, r0
 8018348:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801834a:	7bfb      	ldrb	r3, [r7, #15]
 801834c:	4618      	mov	r0, r3
 801834e:	f000 f8c7 	bl	80184e0 <USBD_Get_USB_Status>
 8018352:	4603      	mov	r3, r0
 8018354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018356:	7bbb      	ldrb	r3, [r7, #14]
}
 8018358:	4618      	mov	r0, r3
 801835a:	3710      	adds	r7, #16
 801835c:	46bd      	mov	sp, r7
 801835e:	bd80      	pop	{r7, pc}

08018360 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b084      	sub	sp, #16
 8018364:	af00      	add	r7, sp, #0
 8018366:	6078      	str	r0, [r7, #4]
 8018368:	460b      	mov	r3, r1
 801836a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801836c:	2300      	movs	r3, #0
 801836e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018370:	2300      	movs	r3, #0
 8018372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801837a:	78fa      	ldrb	r2, [r7, #3]
 801837c:	4611      	mov	r1, r2
 801837e:	4618      	mov	r0, r3
 8018380:	f7ef fe74 	bl	800806c <HAL_PCD_EP_ClrStall>
 8018384:	4603      	mov	r3, r0
 8018386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018388:	7bfb      	ldrb	r3, [r7, #15]
 801838a:	4618      	mov	r0, r3
 801838c:	f000 f8a8 	bl	80184e0 <USBD_Get_USB_Status>
 8018390:	4603      	mov	r3, r0
 8018392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018394:	7bbb      	ldrb	r3, [r7, #14]
}
 8018396:	4618      	mov	r0, r3
 8018398:	3710      	adds	r7, #16
 801839a:	46bd      	mov	sp, r7
 801839c:	bd80      	pop	{r7, pc}

0801839e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801839e:	b480      	push	{r7}
 80183a0:	b085      	sub	sp, #20
 80183a2:	af00      	add	r7, sp, #0
 80183a4:	6078      	str	r0, [r7, #4]
 80183a6:	460b      	mov	r3, r1
 80183a8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80183b0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80183b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	da0b      	bge.n	80183d2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80183ba:	78fb      	ldrb	r3, [r7, #3]
 80183bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80183c0:	68f9      	ldr	r1, [r7, #12]
 80183c2:	4613      	mov	r3, r2
 80183c4:	00db      	lsls	r3, r3, #3
 80183c6:	1a9b      	subs	r3, r3, r2
 80183c8:	009b      	lsls	r3, r3, #2
 80183ca:	440b      	add	r3, r1
 80183cc:	333e      	adds	r3, #62	; 0x3e
 80183ce:	781b      	ldrb	r3, [r3, #0]
 80183d0:	e00b      	b.n	80183ea <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80183d2:	78fb      	ldrb	r3, [r7, #3]
 80183d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80183d8:	68f9      	ldr	r1, [r7, #12]
 80183da:	4613      	mov	r3, r2
 80183dc:	00db      	lsls	r3, r3, #3
 80183de:	1a9b      	subs	r3, r3, r2
 80183e0:	009b      	lsls	r3, r3, #2
 80183e2:	440b      	add	r3, r1
 80183e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80183e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80183ea:	4618      	mov	r0, r3
 80183ec:	3714      	adds	r7, #20
 80183ee:	46bd      	mov	sp, r7
 80183f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f4:	4770      	bx	lr

080183f6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80183f6:	b580      	push	{r7, lr}
 80183f8:	b084      	sub	sp, #16
 80183fa:	af00      	add	r7, sp, #0
 80183fc:	6078      	str	r0, [r7, #4]
 80183fe:	460b      	mov	r3, r1
 8018400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018402:	2300      	movs	r3, #0
 8018404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018406:	2300      	movs	r3, #0
 8018408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018410:	78fa      	ldrb	r2, [r7, #3]
 8018412:	4611      	mov	r1, r2
 8018414:	4618      	mov	r0, r3
 8018416:	f7ef fc41 	bl	8007c9c <HAL_PCD_SetAddress>
 801841a:	4603      	mov	r3, r0
 801841c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801841e:	7bfb      	ldrb	r3, [r7, #15]
 8018420:	4618      	mov	r0, r3
 8018422:	f000 f85d 	bl	80184e0 <USBD_Get_USB_Status>
 8018426:	4603      	mov	r3, r0
 8018428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801842a:	7bbb      	ldrb	r3, [r7, #14]
}
 801842c:	4618      	mov	r0, r3
 801842e:	3710      	adds	r7, #16
 8018430:	46bd      	mov	sp, r7
 8018432:	bd80      	pop	{r7, pc}

08018434 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018434:	b580      	push	{r7, lr}
 8018436:	b086      	sub	sp, #24
 8018438:	af00      	add	r7, sp, #0
 801843a:	60f8      	str	r0, [r7, #12]
 801843c:	607a      	str	r2, [r7, #4]
 801843e:	603b      	str	r3, [r7, #0]
 8018440:	460b      	mov	r3, r1
 8018442:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018444:	2300      	movs	r3, #0
 8018446:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018448:	2300      	movs	r3, #0
 801844a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018452:	7af9      	ldrb	r1, [r7, #11]
 8018454:	683b      	ldr	r3, [r7, #0]
 8018456:	687a      	ldr	r2, [r7, #4]
 8018458:	f7ef fd5a 	bl	8007f10 <HAL_PCD_EP_Transmit>
 801845c:	4603      	mov	r3, r0
 801845e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018460:	7dfb      	ldrb	r3, [r7, #23]
 8018462:	4618      	mov	r0, r3
 8018464:	f000 f83c 	bl	80184e0 <USBD_Get_USB_Status>
 8018468:	4603      	mov	r3, r0
 801846a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801846c:	7dbb      	ldrb	r3, [r7, #22]
}
 801846e:	4618      	mov	r0, r3
 8018470:	3718      	adds	r7, #24
 8018472:	46bd      	mov	sp, r7
 8018474:	bd80      	pop	{r7, pc}

08018476 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018476:	b580      	push	{r7, lr}
 8018478:	b086      	sub	sp, #24
 801847a:	af00      	add	r7, sp, #0
 801847c:	60f8      	str	r0, [r7, #12]
 801847e:	607a      	str	r2, [r7, #4]
 8018480:	603b      	str	r3, [r7, #0]
 8018482:	460b      	mov	r3, r1
 8018484:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018486:	2300      	movs	r3, #0
 8018488:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801848a:	2300      	movs	r3, #0
 801848c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018494:	7af9      	ldrb	r1, [r7, #11]
 8018496:	683b      	ldr	r3, [r7, #0]
 8018498:	687a      	ldr	r2, [r7, #4]
 801849a:	f7ef fcd6 	bl	8007e4a <HAL_PCD_EP_Receive>
 801849e:	4603      	mov	r3, r0
 80184a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184a2:	7dfb      	ldrb	r3, [r7, #23]
 80184a4:	4618      	mov	r0, r3
 80184a6:	f000 f81b 	bl	80184e0 <USBD_Get_USB_Status>
 80184aa:	4603      	mov	r3, r0
 80184ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80184ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80184b0:	4618      	mov	r0, r3
 80184b2:	3718      	adds	r7, #24
 80184b4:	46bd      	mov	sp, r7
 80184b6:	bd80      	pop	{r7, pc}

080184b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b082      	sub	sp, #8
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
 80184c0:	460b      	mov	r3, r1
 80184c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80184ca:	78fa      	ldrb	r2, [r7, #3]
 80184cc:	4611      	mov	r1, r2
 80184ce:	4618      	mov	r0, r3
 80184d0:	f7ef fd06 	bl	8007ee0 <HAL_PCD_EP_GetRxCount>
 80184d4:	4603      	mov	r3, r0
}
 80184d6:	4618      	mov	r0, r3
 80184d8:	3708      	adds	r7, #8
 80184da:	46bd      	mov	sp, r7
 80184dc:	bd80      	pop	{r7, pc}
	...

080184e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80184e0:	b480      	push	{r7}
 80184e2:	b085      	sub	sp, #20
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	4603      	mov	r3, r0
 80184e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184ea:	2300      	movs	r3, #0
 80184ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80184ee:	79fb      	ldrb	r3, [r7, #7]
 80184f0:	2b03      	cmp	r3, #3
 80184f2:	d817      	bhi.n	8018524 <USBD_Get_USB_Status+0x44>
 80184f4:	a201      	add	r2, pc, #4	; (adr r2, 80184fc <USBD_Get_USB_Status+0x1c>)
 80184f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184fa:	bf00      	nop
 80184fc:	0801850d 	.word	0x0801850d
 8018500:	08018513 	.word	0x08018513
 8018504:	08018519 	.word	0x08018519
 8018508:	0801851f 	.word	0x0801851f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801850c:	2300      	movs	r3, #0
 801850e:	73fb      	strb	r3, [r7, #15]
    break;
 8018510:	e00b      	b.n	801852a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018512:	2303      	movs	r3, #3
 8018514:	73fb      	strb	r3, [r7, #15]
    break;
 8018516:	e008      	b.n	801852a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018518:	2301      	movs	r3, #1
 801851a:	73fb      	strb	r3, [r7, #15]
    break;
 801851c:	e005      	b.n	801852a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801851e:	2303      	movs	r3, #3
 8018520:	73fb      	strb	r3, [r7, #15]
    break;
 8018522:	e002      	b.n	801852a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018524:	2303      	movs	r3, #3
 8018526:	73fb      	strb	r3, [r7, #15]
    break;
 8018528:	bf00      	nop
  }
  return usb_status;
 801852a:	7bfb      	ldrb	r3, [r7, #15]
}
 801852c:	4618      	mov	r0, r3
 801852e:	3714      	adds	r7, #20
 8018530:	46bd      	mov	sp, r7
 8018532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018536:	4770      	bx	lr

08018538 <__errno>:
 8018538:	4b01      	ldr	r3, [pc, #4]	; (8018540 <__errno+0x8>)
 801853a:	6818      	ldr	r0, [r3, #0]
 801853c:	4770      	bx	lr
 801853e:	bf00      	nop
 8018540:	24000174 	.word	0x24000174

08018544 <__libc_init_array>:
 8018544:	b570      	push	{r4, r5, r6, lr}
 8018546:	4e0d      	ldr	r6, [pc, #52]	; (801857c <__libc_init_array+0x38>)
 8018548:	4c0d      	ldr	r4, [pc, #52]	; (8018580 <__libc_init_array+0x3c>)
 801854a:	1ba4      	subs	r4, r4, r6
 801854c:	10a4      	asrs	r4, r4, #2
 801854e:	2500      	movs	r5, #0
 8018550:	42a5      	cmp	r5, r4
 8018552:	d109      	bne.n	8018568 <__libc_init_array+0x24>
 8018554:	4e0b      	ldr	r6, [pc, #44]	; (8018584 <__libc_init_array+0x40>)
 8018556:	4c0c      	ldr	r4, [pc, #48]	; (8018588 <__libc_init_array+0x44>)
 8018558:	f001 f972 	bl	8019840 <_init>
 801855c:	1ba4      	subs	r4, r4, r6
 801855e:	10a4      	asrs	r4, r4, #2
 8018560:	2500      	movs	r5, #0
 8018562:	42a5      	cmp	r5, r4
 8018564:	d105      	bne.n	8018572 <__libc_init_array+0x2e>
 8018566:	bd70      	pop	{r4, r5, r6, pc}
 8018568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801856c:	4798      	blx	r3
 801856e:	3501      	adds	r5, #1
 8018570:	e7ee      	b.n	8018550 <__libc_init_array+0xc>
 8018572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018576:	4798      	blx	r3
 8018578:	3501      	adds	r5, #1
 801857a:	e7f2      	b.n	8018562 <__libc_init_array+0x1e>
 801857c:	0801a1b4 	.word	0x0801a1b4
 8018580:	0801a1b4 	.word	0x0801a1b4
 8018584:	0801a1b4 	.word	0x0801a1b4
 8018588:	0801a1b8 	.word	0x0801a1b8

0801858c <malloc>:
 801858c:	4b02      	ldr	r3, [pc, #8]	; (8018598 <malloc+0xc>)
 801858e:	4601      	mov	r1, r0
 8018590:	6818      	ldr	r0, [r3, #0]
 8018592:	f000 b86d 	b.w	8018670 <_malloc_r>
 8018596:	bf00      	nop
 8018598:	24000174 	.word	0x24000174

0801859c <free>:
 801859c:	4b02      	ldr	r3, [pc, #8]	; (80185a8 <free+0xc>)
 801859e:	4601      	mov	r1, r0
 80185a0:	6818      	ldr	r0, [r3, #0]
 80185a2:	f000 b817 	b.w	80185d4 <_free_r>
 80185a6:	bf00      	nop
 80185a8:	24000174 	.word	0x24000174

080185ac <memcpy>:
 80185ac:	b510      	push	{r4, lr}
 80185ae:	1e43      	subs	r3, r0, #1
 80185b0:	440a      	add	r2, r1
 80185b2:	4291      	cmp	r1, r2
 80185b4:	d100      	bne.n	80185b8 <memcpy+0xc>
 80185b6:	bd10      	pop	{r4, pc}
 80185b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80185bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80185c0:	e7f7      	b.n	80185b2 <memcpy+0x6>

080185c2 <memset>:
 80185c2:	4402      	add	r2, r0
 80185c4:	4603      	mov	r3, r0
 80185c6:	4293      	cmp	r3, r2
 80185c8:	d100      	bne.n	80185cc <memset+0xa>
 80185ca:	4770      	bx	lr
 80185cc:	f803 1b01 	strb.w	r1, [r3], #1
 80185d0:	e7f9      	b.n	80185c6 <memset+0x4>
	...

080185d4 <_free_r>:
 80185d4:	b538      	push	{r3, r4, r5, lr}
 80185d6:	4605      	mov	r5, r0
 80185d8:	2900      	cmp	r1, #0
 80185da:	d045      	beq.n	8018668 <_free_r+0x94>
 80185dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80185e0:	1f0c      	subs	r4, r1, #4
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	bfb8      	it	lt
 80185e6:	18e4      	addlt	r4, r4, r3
 80185e8:	f000 fc1a 	bl	8018e20 <__malloc_lock>
 80185ec:	4a1f      	ldr	r2, [pc, #124]	; (801866c <_free_r+0x98>)
 80185ee:	6813      	ldr	r3, [r2, #0]
 80185f0:	4610      	mov	r0, r2
 80185f2:	b933      	cbnz	r3, 8018602 <_free_r+0x2e>
 80185f4:	6063      	str	r3, [r4, #4]
 80185f6:	6014      	str	r4, [r2, #0]
 80185f8:	4628      	mov	r0, r5
 80185fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80185fe:	f000 bc10 	b.w	8018e22 <__malloc_unlock>
 8018602:	42a3      	cmp	r3, r4
 8018604:	d90c      	bls.n	8018620 <_free_r+0x4c>
 8018606:	6821      	ldr	r1, [r4, #0]
 8018608:	1862      	adds	r2, r4, r1
 801860a:	4293      	cmp	r3, r2
 801860c:	bf04      	itt	eq
 801860e:	681a      	ldreq	r2, [r3, #0]
 8018610:	685b      	ldreq	r3, [r3, #4]
 8018612:	6063      	str	r3, [r4, #4]
 8018614:	bf04      	itt	eq
 8018616:	1852      	addeq	r2, r2, r1
 8018618:	6022      	streq	r2, [r4, #0]
 801861a:	6004      	str	r4, [r0, #0]
 801861c:	e7ec      	b.n	80185f8 <_free_r+0x24>
 801861e:	4613      	mov	r3, r2
 8018620:	685a      	ldr	r2, [r3, #4]
 8018622:	b10a      	cbz	r2, 8018628 <_free_r+0x54>
 8018624:	42a2      	cmp	r2, r4
 8018626:	d9fa      	bls.n	801861e <_free_r+0x4a>
 8018628:	6819      	ldr	r1, [r3, #0]
 801862a:	1858      	adds	r0, r3, r1
 801862c:	42a0      	cmp	r0, r4
 801862e:	d10b      	bne.n	8018648 <_free_r+0x74>
 8018630:	6820      	ldr	r0, [r4, #0]
 8018632:	4401      	add	r1, r0
 8018634:	1858      	adds	r0, r3, r1
 8018636:	4282      	cmp	r2, r0
 8018638:	6019      	str	r1, [r3, #0]
 801863a:	d1dd      	bne.n	80185f8 <_free_r+0x24>
 801863c:	6810      	ldr	r0, [r2, #0]
 801863e:	6852      	ldr	r2, [r2, #4]
 8018640:	605a      	str	r2, [r3, #4]
 8018642:	4401      	add	r1, r0
 8018644:	6019      	str	r1, [r3, #0]
 8018646:	e7d7      	b.n	80185f8 <_free_r+0x24>
 8018648:	d902      	bls.n	8018650 <_free_r+0x7c>
 801864a:	230c      	movs	r3, #12
 801864c:	602b      	str	r3, [r5, #0]
 801864e:	e7d3      	b.n	80185f8 <_free_r+0x24>
 8018650:	6820      	ldr	r0, [r4, #0]
 8018652:	1821      	adds	r1, r4, r0
 8018654:	428a      	cmp	r2, r1
 8018656:	bf04      	itt	eq
 8018658:	6811      	ldreq	r1, [r2, #0]
 801865a:	6852      	ldreq	r2, [r2, #4]
 801865c:	6062      	str	r2, [r4, #4]
 801865e:	bf04      	itt	eq
 8018660:	1809      	addeq	r1, r1, r0
 8018662:	6021      	streq	r1, [r4, #0]
 8018664:	605c      	str	r4, [r3, #4]
 8018666:	e7c7      	b.n	80185f8 <_free_r+0x24>
 8018668:	bd38      	pop	{r3, r4, r5, pc}
 801866a:	bf00      	nop
 801866c:	24000b84 	.word	0x24000b84

08018670 <_malloc_r>:
 8018670:	b570      	push	{r4, r5, r6, lr}
 8018672:	1ccd      	adds	r5, r1, #3
 8018674:	f025 0503 	bic.w	r5, r5, #3
 8018678:	3508      	adds	r5, #8
 801867a:	2d0c      	cmp	r5, #12
 801867c:	bf38      	it	cc
 801867e:	250c      	movcc	r5, #12
 8018680:	2d00      	cmp	r5, #0
 8018682:	4606      	mov	r6, r0
 8018684:	db01      	blt.n	801868a <_malloc_r+0x1a>
 8018686:	42a9      	cmp	r1, r5
 8018688:	d903      	bls.n	8018692 <_malloc_r+0x22>
 801868a:	230c      	movs	r3, #12
 801868c:	6033      	str	r3, [r6, #0]
 801868e:	2000      	movs	r0, #0
 8018690:	bd70      	pop	{r4, r5, r6, pc}
 8018692:	f000 fbc5 	bl	8018e20 <__malloc_lock>
 8018696:	4a21      	ldr	r2, [pc, #132]	; (801871c <_malloc_r+0xac>)
 8018698:	6814      	ldr	r4, [r2, #0]
 801869a:	4621      	mov	r1, r4
 801869c:	b991      	cbnz	r1, 80186c4 <_malloc_r+0x54>
 801869e:	4c20      	ldr	r4, [pc, #128]	; (8018720 <_malloc_r+0xb0>)
 80186a0:	6823      	ldr	r3, [r4, #0]
 80186a2:	b91b      	cbnz	r3, 80186ac <_malloc_r+0x3c>
 80186a4:	4630      	mov	r0, r6
 80186a6:	f000 f8b9 	bl	801881c <_sbrk_r>
 80186aa:	6020      	str	r0, [r4, #0]
 80186ac:	4629      	mov	r1, r5
 80186ae:	4630      	mov	r0, r6
 80186b0:	f000 f8b4 	bl	801881c <_sbrk_r>
 80186b4:	1c43      	adds	r3, r0, #1
 80186b6:	d124      	bne.n	8018702 <_malloc_r+0x92>
 80186b8:	230c      	movs	r3, #12
 80186ba:	6033      	str	r3, [r6, #0]
 80186bc:	4630      	mov	r0, r6
 80186be:	f000 fbb0 	bl	8018e22 <__malloc_unlock>
 80186c2:	e7e4      	b.n	801868e <_malloc_r+0x1e>
 80186c4:	680b      	ldr	r3, [r1, #0]
 80186c6:	1b5b      	subs	r3, r3, r5
 80186c8:	d418      	bmi.n	80186fc <_malloc_r+0x8c>
 80186ca:	2b0b      	cmp	r3, #11
 80186cc:	d90f      	bls.n	80186ee <_malloc_r+0x7e>
 80186ce:	600b      	str	r3, [r1, #0]
 80186d0:	50cd      	str	r5, [r1, r3]
 80186d2:	18cc      	adds	r4, r1, r3
 80186d4:	4630      	mov	r0, r6
 80186d6:	f000 fba4 	bl	8018e22 <__malloc_unlock>
 80186da:	f104 000b 	add.w	r0, r4, #11
 80186de:	1d23      	adds	r3, r4, #4
 80186e0:	f020 0007 	bic.w	r0, r0, #7
 80186e4:	1ac3      	subs	r3, r0, r3
 80186e6:	d0d3      	beq.n	8018690 <_malloc_r+0x20>
 80186e8:	425a      	negs	r2, r3
 80186ea:	50e2      	str	r2, [r4, r3]
 80186ec:	e7d0      	b.n	8018690 <_malloc_r+0x20>
 80186ee:	428c      	cmp	r4, r1
 80186f0:	684b      	ldr	r3, [r1, #4]
 80186f2:	bf16      	itet	ne
 80186f4:	6063      	strne	r3, [r4, #4]
 80186f6:	6013      	streq	r3, [r2, #0]
 80186f8:	460c      	movne	r4, r1
 80186fa:	e7eb      	b.n	80186d4 <_malloc_r+0x64>
 80186fc:	460c      	mov	r4, r1
 80186fe:	6849      	ldr	r1, [r1, #4]
 8018700:	e7cc      	b.n	801869c <_malloc_r+0x2c>
 8018702:	1cc4      	adds	r4, r0, #3
 8018704:	f024 0403 	bic.w	r4, r4, #3
 8018708:	42a0      	cmp	r0, r4
 801870a:	d005      	beq.n	8018718 <_malloc_r+0xa8>
 801870c:	1a21      	subs	r1, r4, r0
 801870e:	4630      	mov	r0, r6
 8018710:	f000 f884 	bl	801881c <_sbrk_r>
 8018714:	3001      	adds	r0, #1
 8018716:	d0cf      	beq.n	80186b8 <_malloc_r+0x48>
 8018718:	6025      	str	r5, [r4, #0]
 801871a:	e7db      	b.n	80186d4 <_malloc_r+0x64>
 801871c:	24000b84 	.word	0x24000b84
 8018720:	24000b88 	.word	0x24000b88

08018724 <iprintf>:
 8018724:	b40f      	push	{r0, r1, r2, r3}
 8018726:	4b0a      	ldr	r3, [pc, #40]	; (8018750 <iprintf+0x2c>)
 8018728:	b513      	push	{r0, r1, r4, lr}
 801872a:	681c      	ldr	r4, [r3, #0]
 801872c:	b124      	cbz	r4, 8018738 <iprintf+0x14>
 801872e:	69a3      	ldr	r3, [r4, #24]
 8018730:	b913      	cbnz	r3, 8018738 <iprintf+0x14>
 8018732:	4620      	mov	r0, r4
 8018734:	f000 fa86 	bl	8018c44 <__sinit>
 8018738:	ab05      	add	r3, sp, #20
 801873a:	9a04      	ldr	r2, [sp, #16]
 801873c:	68a1      	ldr	r1, [r4, #8]
 801873e:	9301      	str	r3, [sp, #4]
 8018740:	4620      	mov	r0, r4
 8018742:	f000 fceb 	bl	801911c <_vfiprintf_r>
 8018746:	b002      	add	sp, #8
 8018748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801874c:	b004      	add	sp, #16
 801874e:	4770      	bx	lr
 8018750:	24000174 	.word	0x24000174

08018754 <_puts_r>:
 8018754:	b570      	push	{r4, r5, r6, lr}
 8018756:	460e      	mov	r6, r1
 8018758:	4605      	mov	r5, r0
 801875a:	b118      	cbz	r0, 8018764 <_puts_r+0x10>
 801875c:	6983      	ldr	r3, [r0, #24]
 801875e:	b90b      	cbnz	r3, 8018764 <_puts_r+0x10>
 8018760:	f000 fa70 	bl	8018c44 <__sinit>
 8018764:	69ab      	ldr	r3, [r5, #24]
 8018766:	68ac      	ldr	r4, [r5, #8]
 8018768:	b913      	cbnz	r3, 8018770 <_puts_r+0x1c>
 801876a:	4628      	mov	r0, r5
 801876c:	f000 fa6a 	bl	8018c44 <__sinit>
 8018770:	4b23      	ldr	r3, [pc, #140]	; (8018800 <_puts_r+0xac>)
 8018772:	429c      	cmp	r4, r3
 8018774:	d117      	bne.n	80187a6 <_puts_r+0x52>
 8018776:	686c      	ldr	r4, [r5, #4]
 8018778:	89a3      	ldrh	r3, [r4, #12]
 801877a:	071b      	lsls	r3, r3, #28
 801877c:	d51d      	bpl.n	80187ba <_puts_r+0x66>
 801877e:	6923      	ldr	r3, [r4, #16]
 8018780:	b1db      	cbz	r3, 80187ba <_puts_r+0x66>
 8018782:	3e01      	subs	r6, #1
 8018784:	68a3      	ldr	r3, [r4, #8]
 8018786:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801878a:	3b01      	subs	r3, #1
 801878c:	60a3      	str	r3, [r4, #8]
 801878e:	b9e9      	cbnz	r1, 80187cc <_puts_r+0x78>
 8018790:	2b00      	cmp	r3, #0
 8018792:	da2e      	bge.n	80187f2 <_puts_r+0x9e>
 8018794:	4622      	mov	r2, r4
 8018796:	210a      	movs	r1, #10
 8018798:	4628      	mov	r0, r5
 801879a:	f000 f8a3 	bl	80188e4 <__swbuf_r>
 801879e:	3001      	adds	r0, #1
 80187a0:	d011      	beq.n	80187c6 <_puts_r+0x72>
 80187a2:	200a      	movs	r0, #10
 80187a4:	e011      	b.n	80187ca <_puts_r+0x76>
 80187a6:	4b17      	ldr	r3, [pc, #92]	; (8018804 <_puts_r+0xb0>)
 80187a8:	429c      	cmp	r4, r3
 80187aa:	d101      	bne.n	80187b0 <_puts_r+0x5c>
 80187ac:	68ac      	ldr	r4, [r5, #8]
 80187ae:	e7e3      	b.n	8018778 <_puts_r+0x24>
 80187b0:	4b15      	ldr	r3, [pc, #84]	; (8018808 <_puts_r+0xb4>)
 80187b2:	429c      	cmp	r4, r3
 80187b4:	bf08      	it	eq
 80187b6:	68ec      	ldreq	r4, [r5, #12]
 80187b8:	e7de      	b.n	8018778 <_puts_r+0x24>
 80187ba:	4621      	mov	r1, r4
 80187bc:	4628      	mov	r0, r5
 80187be:	f000 f8e3 	bl	8018988 <__swsetup_r>
 80187c2:	2800      	cmp	r0, #0
 80187c4:	d0dd      	beq.n	8018782 <_puts_r+0x2e>
 80187c6:	f04f 30ff 	mov.w	r0, #4294967295
 80187ca:	bd70      	pop	{r4, r5, r6, pc}
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	da04      	bge.n	80187da <_puts_r+0x86>
 80187d0:	69a2      	ldr	r2, [r4, #24]
 80187d2:	429a      	cmp	r2, r3
 80187d4:	dc06      	bgt.n	80187e4 <_puts_r+0x90>
 80187d6:	290a      	cmp	r1, #10
 80187d8:	d004      	beq.n	80187e4 <_puts_r+0x90>
 80187da:	6823      	ldr	r3, [r4, #0]
 80187dc:	1c5a      	adds	r2, r3, #1
 80187de:	6022      	str	r2, [r4, #0]
 80187e0:	7019      	strb	r1, [r3, #0]
 80187e2:	e7cf      	b.n	8018784 <_puts_r+0x30>
 80187e4:	4622      	mov	r2, r4
 80187e6:	4628      	mov	r0, r5
 80187e8:	f000 f87c 	bl	80188e4 <__swbuf_r>
 80187ec:	3001      	adds	r0, #1
 80187ee:	d1c9      	bne.n	8018784 <_puts_r+0x30>
 80187f0:	e7e9      	b.n	80187c6 <_puts_r+0x72>
 80187f2:	6823      	ldr	r3, [r4, #0]
 80187f4:	200a      	movs	r0, #10
 80187f6:	1c5a      	adds	r2, r3, #1
 80187f8:	6022      	str	r2, [r4, #0]
 80187fa:	7018      	strb	r0, [r3, #0]
 80187fc:	e7e5      	b.n	80187ca <_puts_r+0x76>
 80187fe:	bf00      	nop
 8018800:	0801a138 	.word	0x0801a138
 8018804:	0801a158 	.word	0x0801a158
 8018808:	0801a118 	.word	0x0801a118

0801880c <puts>:
 801880c:	4b02      	ldr	r3, [pc, #8]	; (8018818 <puts+0xc>)
 801880e:	4601      	mov	r1, r0
 8018810:	6818      	ldr	r0, [r3, #0]
 8018812:	f7ff bf9f 	b.w	8018754 <_puts_r>
 8018816:	bf00      	nop
 8018818:	24000174 	.word	0x24000174

0801881c <_sbrk_r>:
 801881c:	b538      	push	{r3, r4, r5, lr}
 801881e:	4c06      	ldr	r4, [pc, #24]	; (8018838 <_sbrk_r+0x1c>)
 8018820:	2300      	movs	r3, #0
 8018822:	4605      	mov	r5, r0
 8018824:	4608      	mov	r0, r1
 8018826:	6023      	str	r3, [r4, #0]
 8018828:	f7ea fdf8 	bl	800341c <_sbrk>
 801882c:	1c43      	adds	r3, r0, #1
 801882e:	d102      	bne.n	8018836 <_sbrk_r+0x1a>
 8018830:	6823      	ldr	r3, [r4, #0]
 8018832:	b103      	cbz	r3, 8018836 <_sbrk_r+0x1a>
 8018834:	602b      	str	r3, [r5, #0]
 8018836:	bd38      	pop	{r3, r4, r5, pc}
 8018838:	24002484 	.word	0x24002484

0801883c <sniprintf>:
 801883c:	b40c      	push	{r2, r3}
 801883e:	b530      	push	{r4, r5, lr}
 8018840:	4b17      	ldr	r3, [pc, #92]	; (80188a0 <sniprintf+0x64>)
 8018842:	1e0c      	subs	r4, r1, #0
 8018844:	b09d      	sub	sp, #116	; 0x74
 8018846:	681d      	ldr	r5, [r3, #0]
 8018848:	da08      	bge.n	801885c <sniprintf+0x20>
 801884a:	238b      	movs	r3, #139	; 0x8b
 801884c:	602b      	str	r3, [r5, #0]
 801884e:	f04f 30ff 	mov.w	r0, #4294967295
 8018852:	b01d      	add	sp, #116	; 0x74
 8018854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018858:	b002      	add	sp, #8
 801885a:	4770      	bx	lr
 801885c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018860:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018864:	bf14      	ite	ne
 8018866:	f104 33ff 	addne.w	r3, r4, #4294967295
 801886a:	4623      	moveq	r3, r4
 801886c:	9304      	str	r3, [sp, #16]
 801886e:	9307      	str	r3, [sp, #28]
 8018870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018874:	9002      	str	r0, [sp, #8]
 8018876:	9006      	str	r0, [sp, #24]
 8018878:	f8ad 3016 	strh.w	r3, [sp, #22]
 801887c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801887e:	ab21      	add	r3, sp, #132	; 0x84
 8018880:	a902      	add	r1, sp, #8
 8018882:	4628      	mov	r0, r5
 8018884:	9301      	str	r3, [sp, #4]
 8018886:	f000 fb27 	bl	8018ed8 <_svfiprintf_r>
 801888a:	1c43      	adds	r3, r0, #1
 801888c:	bfbc      	itt	lt
 801888e:	238b      	movlt	r3, #139	; 0x8b
 8018890:	602b      	strlt	r3, [r5, #0]
 8018892:	2c00      	cmp	r4, #0
 8018894:	d0dd      	beq.n	8018852 <sniprintf+0x16>
 8018896:	9b02      	ldr	r3, [sp, #8]
 8018898:	2200      	movs	r2, #0
 801889a:	701a      	strb	r2, [r3, #0]
 801889c:	e7d9      	b.n	8018852 <sniprintf+0x16>
 801889e:	bf00      	nop
 80188a0:	24000174 	.word	0x24000174

080188a4 <siprintf>:
 80188a4:	b40e      	push	{r1, r2, r3}
 80188a6:	b500      	push	{lr}
 80188a8:	b09c      	sub	sp, #112	; 0x70
 80188aa:	ab1d      	add	r3, sp, #116	; 0x74
 80188ac:	9002      	str	r0, [sp, #8]
 80188ae:	9006      	str	r0, [sp, #24]
 80188b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80188b4:	4809      	ldr	r0, [pc, #36]	; (80188dc <siprintf+0x38>)
 80188b6:	9107      	str	r1, [sp, #28]
 80188b8:	9104      	str	r1, [sp, #16]
 80188ba:	4909      	ldr	r1, [pc, #36]	; (80188e0 <siprintf+0x3c>)
 80188bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80188c0:	9105      	str	r1, [sp, #20]
 80188c2:	6800      	ldr	r0, [r0, #0]
 80188c4:	9301      	str	r3, [sp, #4]
 80188c6:	a902      	add	r1, sp, #8
 80188c8:	f000 fb06 	bl	8018ed8 <_svfiprintf_r>
 80188cc:	9b02      	ldr	r3, [sp, #8]
 80188ce:	2200      	movs	r2, #0
 80188d0:	701a      	strb	r2, [r3, #0]
 80188d2:	b01c      	add	sp, #112	; 0x70
 80188d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80188d8:	b003      	add	sp, #12
 80188da:	4770      	bx	lr
 80188dc:	24000174 	.word	0x24000174
 80188e0:	ffff0208 	.word	0xffff0208

080188e4 <__swbuf_r>:
 80188e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188e6:	460e      	mov	r6, r1
 80188e8:	4614      	mov	r4, r2
 80188ea:	4605      	mov	r5, r0
 80188ec:	b118      	cbz	r0, 80188f6 <__swbuf_r+0x12>
 80188ee:	6983      	ldr	r3, [r0, #24]
 80188f0:	b90b      	cbnz	r3, 80188f6 <__swbuf_r+0x12>
 80188f2:	f000 f9a7 	bl	8018c44 <__sinit>
 80188f6:	4b21      	ldr	r3, [pc, #132]	; (801897c <__swbuf_r+0x98>)
 80188f8:	429c      	cmp	r4, r3
 80188fa:	d12a      	bne.n	8018952 <__swbuf_r+0x6e>
 80188fc:	686c      	ldr	r4, [r5, #4]
 80188fe:	69a3      	ldr	r3, [r4, #24]
 8018900:	60a3      	str	r3, [r4, #8]
 8018902:	89a3      	ldrh	r3, [r4, #12]
 8018904:	071a      	lsls	r2, r3, #28
 8018906:	d52e      	bpl.n	8018966 <__swbuf_r+0x82>
 8018908:	6923      	ldr	r3, [r4, #16]
 801890a:	b363      	cbz	r3, 8018966 <__swbuf_r+0x82>
 801890c:	6923      	ldr	r3, [r4, #16]
 801890e:	6820      	ldr	r0, [r4, #0]
 8018910:	1ac0      	subs	r0, r0, r3
 8018912:	6963      	ldr	r3, [r4, #20]
 8018914:	b2f6      	uxtb	r6, r6
 8018916:	4283      	cmp	r3, r0
 8018918:	4637      	mov	r7, r6
 801891a:	dc04      	bgt.n	8018926 <__swbuf_r+0x42>
 801891c:	4621      	mov	r1, r4
 801891e:	4628      	mov	r0, r5
 8018920:	f000 f926 	bl	8018b70 <_fflush_r>
 8018924:	bb28      	cbnz	r0, 8018972 <__swbuf_r+0x8e>
 8018926:	68a3      	ldr	r3, [r4, #8]
 8018928:	3b01      	subs	r3, #1
 801892a:	60a3      	str	r3, [r4, #8]
 801892c:	6823      	ldr	r3, [r4, #0]
 801892e:	1c5a      	adds	r2, r3, #1
 8018930:	6022      	str	r2, [r4, #0]
 8018932:	701e      	strb	r6, [r3, #0]
 8018934:	6963      	ldr	r3, [r4, #20]
 8018936:	3001      	adds	r0, #1
 8018938:	4283      	cmp	r3, r0
 801893a:	d004      	beq.n	8018946 <__swbuf_r+0x62>
 801893c:	89a3      	ldrh	r3, [r4, #12]
 801893e:	07db      	lsls	r3, r3, #31
 8018940:	d519      	bpl.n	8018976 <__swbuf_r+0x92>
 8018942:	2e0a      	cmp	r6, #10
 8018944:	d117      	bne.n	8018976 <__swbuf_r+0x92>
 8018946:	4621      	mov	r1, r4
 8018948:	4628      	mov	r0, r5
 801894a:	f000 f911 	bl	8018b70 <_fflush_r>
 801894e:	b190      	cbz	r0, 8018976 <__swbuf_r+0x92>
 8018950:	e00f      	b.n	8018972 <__swbuf_r+0x8e>
 8018952:	4b0b      	ldr	r3, [pc, #44]	; (8018980 <__swbuf_r+0x9c>)
 8018954:	429c      	cmp	r4, r3
 8018956:	d101      	bne.n	801895c <__swbuf_r+0x78>
 8018958:	68ac      	ldr	r4, [r5, #8]
 801895a:	e7d0      	b.n	80188fe <__swbuf_r+0x1a>
 801895c:	4b09      	ldr	r3, [pc, #36]	; (8018984 <__swbuf_r+0xa0>)
 801895e:	429c      	cmp	r4, r3
 8018960:	bf08      	it	eq
 8018962:	68ec      	ldreq	r4, [r5, #12]
 8018964:	e7cb      	b.n	80188fe <__swbuf_r+0x1a>
 8018966:	4621      	mov	r1, r4
 8018968:	4628      	mov	r0, r5
 801896a:	f000 f80d 	bl	8018988 <__swsetup_r>
 801896e:	2800      	cmp	r0, #0
 8018970:	d0cc      	beq.n	801890c <__swbuf_r+0x28>
 8018972:	f04f 37ff 	mov.w	r7, #4294967295
 8018976:	4638      	mov	r0, r7
 8018978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801897a:	bf00      	nop
 801897c:	0801a138 	.word	0x0801a138
 8018980:	0801a158 	.word	0x0801a158
 8018984:	0801a118 	.word	0x0801a118

08018988 <__swsetup_r>:
 8018988:	4b32      	ldr	r3, [pc, #200]	; (8018a54 <__swsetup_r+0xcc>)
 801898a:	b570      	push	{r4, r5, r6, lr}
 801898c:	681d      	ldr	r5, [r3, #0]
 801898e:	4606      	mov	r6, r0
 8018990:	460c      	mov	r4, r1
 8018992:	b125      	cbz	r5, 801899e <__swsetup_r+0x16>
 8018994:	69ab      	ldr	r3, [r5, #24]
 8018996:	b913      	cbnz	r3, 801899e <__swsetup_r+0x16>
 8018998:	4628      	mov	r0, r5
 801899a:	f000 f953 	bl	8018c44 <__sinit>
 801899e:	4b2e      	ldr	r3, [pc, #184]	; (8018a58 <__swsetup_r+0xd0>)
 80189a0:	429c      	cmp	r4, r3
 80189a2:	d10f      	bne.n	80189c4 <__swsetup_r+0x3c>
 80189a4:	686c      	ldr	r4, [r5, #4]
 80189a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189aa:	b29a      	uxth	r2, r3
 80189ac:	0715      	lsls	r5, r2, #28
 80189ae:	d42c      	bmi.n	8018a0a <__swsetup_r+0x82>
 80189b0:	06d0      	lsls	r0, r2, #27
 80189b2:	d411      	bmi.n	80189d8 <__swsetup_r+0x50>
 80189b4:	2209      	movs	r2, #9
 80189b6:	6032      	str	r2, [r6, #0]
 80189b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189bc:	81a3      	strh	r3, [r4, #12]
 80189be:	f04f 30ff 	mov.w	r0, #4294967295
 80189c2:	e03e      	b.n	8018a42 <__swsetup_r+0xba>
 80189c4:	4b25      	ldr	r3, [pc, #148]	; (8018a5c <__swsetup_r+0xd4>)
 80189c6:	429c      	cmp	r4, r3
 80189c8:	d101      	bne.n	80189ce <__swsetup_r+0x46>
 80189ca:	68ac      	ldr	r4, [r5, #8]
 80189cc:	e7eb      	b.n	80189a6 <__swsetup_r+0x1e>
 80189ce:	4b24      	ldr	r3, [pc, #144]	; (8018a60 <__swsetup_r+0xd8>)
 80189d0:	429c      	cmp	r4, r3
 80189d2:	bf08      	it	eq
 80189d4:	68ec      	ldreq	r4, [r5, #12]
 80189d6:	e7e6      	b.n	80189a6 <__swsetup_r+0x1e>
 80189d8:	0751      	lsls	r1, r2, #29
 80189da:	d512      	bpl.n	8018a02 <__swsetup_r+0x7a>
 80189dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80189de:	b141      	cbz	r1, 80189f2 <__swsetup_r+0x6a>
 80189e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80189e4:	4299      	cmp	r1, r3
 80189e6:	d002      	beq.n	80189ee <__swsetup_r+0x66>
 80189e8:	4630      	mov	r0, r6
 80189ea:	f7ff fdf3 	bl	80185d4 <_free_r>
 80189ee:	2300      	movs	r3, #0
 80189f0:	6363      	str	r3, [r4, #52]	; 0x34
 80189f2:	89a3      	ldrh	r3, [r4, #12]
 80189f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80189f8:	81a3      	strh	r3, [r4, #12]
 80189fa:	2300      	movs	r3, #0
 80189fc:	6063      	str	r3, [r4, #4]
 80189fe:	6923      	ldr	r3, [r4, #16]
 8018a00:	6023      	str	r3, [r4, #0]
 8018a02:	89a3      	ldrh	r3, [r4, #12]
 8018a04:	f043 0308 	orr.w	r3, r3, #8
 8018a08:	81a3      	strh	r3, [r4, #12]
 8018a0a:	6923      	ldr	r3, [r4, #16]
 8018a0c:	b94b      	cbnz	r3, 8018a22 <__swsetup_r+0x9a>
 8018a0e:	89a3      	ldrh	r3, [r4, #12]
 8018a10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018a18:	d003      	beq.n	8018a22 <__swsetup_r+0x9a>
 8018a1a:	4621      	mov	r1, r4
 8018a1c:	4630      	mov	r0, r6
 8018a1e:	f000 f9bf 	bl	8018da0 <__smakebuf_r>
 8018a22:	89a2      	ldrh	r2, [r4, #12]
 8018a24:	f012 0301 	ands.w	r3, r2, #1
 8018a28:	d00c      	beq.n	8018a44 <__swsetup_r+0xbc>
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	60a3      	str	r3, [r4, #8]
 8018a2e:	6963      	ldr	r3, [r4, #20]
 8018a30:	425b      	negs	r3, r3
 8018a32:	61a3      	str	r3, [r4, #24]
 8018a34:	6923      	ldr	r3, [r4, #16]
 8018a36:	b953      	cbnz	r3, 8018a4e <__swsetup_r+0xc6>
 8018a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018a40:	d1ba      	bne.n	80189b8 <__swsetup_r+0x30>
 8018a42:	bd70      	pop	{r4, r5, r6, pc}
 8018a44:	0792      	lsls	r2, r2, #30
 8018a46:	bf58      	it	pl
 8018a48:	6963      	ldrpl	r3, [r4, #20]
 8018a4a:	60a3      	str	r3, [r4, #8]
 8018a4c:	e7f2      	b.n	8018a34 <__swsetup_r+0xac>
 8018a4e:	2000      	movs	r0, #0
 8018a50:	e7f7      	b.n	8018a42 <__swsetup_r+0xba>
 8018a52:	bf00      	nop
 8018a54:	24000174 	.word	0x24000174
 8018a58:	0801a138 	.word	0x0801a138
 8018a5c:	0801a158 	.word	0x0801a158
 8018a60:	0801a118 	.word	0x0801a118

08018a64 <__sflush_r>:
 8018a64:	898a      	ldrh	r2, [r1, #12]
 8018a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a6a:	4605      	mov	r5, r0
 8018a6c:	0710      	lsls	r0, r2, #28
 8018a6e:	460c      	mov	r4, r1
 8018a70:	d458      	bmi.n	8018b24 <__sflush_r+0xc0>
 8018a72:	684b      	ldr	r3, [r1, #4]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	dc05      	bgt.n	8018a84 <__sflush_r+0x20>
 8018a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	dc02      	bgt.n	8018a84 <__sflush_r+0x20>
 8018a7e:	2000      	movs	r0, #0
 8018a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a86:	2e00      	cmp	r6, #0
 8018a88:	d0f9      	beq.n	8018a7e <__sflush_r+0x1a>
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018a90:	682f      	ldr	r7, [r5, #0]
 8018a92:	6a21      	ldr	r1, [r4, #32]
 8018a94:	602b      	str	r3, [r5, #0]
 8018a96:	d032      	beq.n	8018afe <__sflush_r+0x9a>
 8018a98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018a9a:	89a3      	ldrh	r3, [r4, #12]
 8018a9c:	075a      	lsls	r2, r3, #29
 8018a9e:	d505      	bpl.n	8018aac <__sflush_r+0x48>
 8018aa0:	6863      	ldr	r3, [r4, #4]
 8018aa2:	1ac0      	subs	r0, r0, r3
 8018aa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018aa6:	b10b      	cbz	r3, 8018aac <__sflush_r+0x48>
 8018aa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018aaa:	1ac0      	subs	r0, r0, r3
 8018aac:	2300      	movs	r3, #0
 8018aae:	4602      	mov	r2, r0
 8018ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018ab2:	6a21      	ldr	r1, [r4, #32]
 8018ab4:	4628      	mov	r0, r5
 8018ab6:	47b0      	blx	r6
 8018ab8:	1c43      	adds	r3, r0, #1
 8018aba:	89a3      	ldrh	r3, [r4, #12]
 8018abc:	d106      	bne.n	8018acc <__sflush_r+0x68>
 8018abe:	6829      	ldr	r1, [r5, #0]
 8018ac0:	291d      	cmp	r1, #29
 8018ac2:	d848      	bhi.n	8018b56 <__sflush_r+0xf2>
 8018ac4:	4a29      	ldr	r2, [pc, #164]	; (8018b6c <__sflush_r+0x108>)
 8018ac6:	40ca      	lsrs	r2, r1
 8018ac8:	07d6      	lsls	r6, r2, #31
 8018aca:	d544      	bpl.n	8018b56 <__sflush_r+0xf2>
 8018acc:	2200      	movs	r2, #0
 8018ace:	6062      	str	r2, [r4, #4]
 8018ad0:	04d9      	lsls	r1, r3, #19
 8018ad2:	6922      	ldr	r2, [r4, #16]
 8018ad4:	6022      	str	r2, [r4, #0]
 8018ad6:	d504      	bpl.n	8018ae2 <__sflush_r+0x7e>
 8018ad8:	1c42      	adds	r2, r0, #1
 8018ada:	d101      	bne.n	8018ae0 <__sflush_r+0x7c>
 8018adc:	682b      	ldr	r3, [r5, #0]
 8018ade:	b903      	cbnz	r3, 8018ae2 <__sflush_r+0x7e>
 8018ae0:	6560      	str	r0, [r4, #84]	; 0x54
 8018ae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ae4:	602f      	str	r7, [r5, #0]
 8018ae6:	2900      	cmp	r1, #0
 8018ae8:	d0c9      	beq.n	8018a7e <__sflush_r+0x1a>
 8018aea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018aee:	4299      	cmp	r1, r3
 8018af0:	d002      	beq.n	8018af8 <__sflush_r+0x94>
 8018af2:	4628      	mov	r0, r5
 8018af4:	f7ff fd6e 	bl	80185d4 <_free_r>
 8018af8:	2000      	movs	r0, #0
 8018afa:	6360      	str	r0, [r4, #52]	; 0x34
 8018afc:	e7c0      	b.n	8018a80 <__sflush_r+0x1c>
 8018afe:	2301      	movs	r3, #1
 8018b00:	4628      	mov	r0, r5
 8018b02:	47b0      	blx	r6
 8018b04:	1c41      	adds	r1, r0, #1
 8018b06:	d1c8      	bne.n	8018a9a <__sflush_r+0x36>
 8018b08:	682b      	ldr	r3, [r5, #0]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d0c5      	beq.n	8018a9a <__sflush_r+0x36>
 8018b0e:	2b1d      	cmp	r3, #29
 8018b10:	d001      	beq.n	8018b16 <__sflush_r+0xb2>
 8018b12:	2b16      	cmp	r3, #22
 8018b14:	d101      	bne.n	8018b1a <__sflush_r+0xb6>
 8018b16:	602f      	str	r7, [r5, #0]
 8018b18:	e7b1      	b.n	8018a7e <__sflush_r+0x1a>
 8018b1a:	89a3      	ldrh	r3, [r4, #12]
 8018b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b20:	81a3      	strh	r3, [r4, #12]
 8018b22:	e7ad      	b.n	8018a80 <__sflush_r+0x1c>
 8018b24:	690f      	ldr	r7, [r1, #16]
 8018b26:	2f00      	cmp	r7, #0
 8018b28:	d0a9      	beq.n	8018a7e <__sflush_r+0x1a>
 8018b2a:	0793      	lsls	r3, r2, #30
 8018b2c:	680e      	ldr	r6, [r1, #0]
 8018b2e:	bf08      	it	eq
 8018b30:	694b      	ldreq	r3, [r1, #20]
 8018b32:	600f      	str	r7, [r1, #0]
 8018b34:	bf18      	it	ne
 8018b36:	2300      	movne	r3, #0
 8018b38:	eba6 0807 	sub.w	r8, r6, r7
 8018b3c:	608b      	str	r3, [r1, #8]
 8018b3e:	f1b8 0f00 	cmp.w	r8, #0
 8018b42:	dd9c      	ble.n	8018a7e <__sflush_r+0x1a>
 8018b44:	4643      	mov	r3, r8
 8018b46:	463a      	mov	r2, r7
 8018b48:	6a21      	ldr	r1, [r4, #32]
 8018b4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018b4c:	4628      	mov	r0, r5
 8018b4e:	47b0      	blx	r6
 8018b50:	2800      	cmp	r0, #0
 8018b52:	dc06      	bgt.n	8018b62 <__sflush_r+0xfe>
 8018b54:	89a3      	ldrh	r3, [r4, #12]
 8018b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b5a:	81a3      	strh	r3, [r4, #12]
 8018b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8018b60:	e78e      	b.n	8018a80 <__sflush_r+0x1c>
 8018b62:	4407      	add	r7, r0
 8018b64:	eba8 0800 	sub.w	r8, r8, r0
 8018b68:	e7e9      	b.n	8018b3e <__sflush_r+0xda>
 8018b6a:	bf00      	nop
 8018b6c:	20400001 	.word	0x20400001

08018b70 <_fflush_r>:
 8018b70:	b538      	push	{r3, r4, r5, lr}
 8018b72:	690b      	ldr	r3, [r1, #16]
 8018b74:	4605      	mov	r5, r0
 8018b76:	460c      	mov	r4, r1
 8018b78:	b1db      	cbz	r3, 8018bb2 <_fflush_r+0x42>
 8018b7a:	b118      	cbz	r0, 8018b84 <_fflush_r+0x14>
 8018b7c:	6983      	ldr	r3, [r0, #24]
 8018b7e:	b90b      	cbnz	r3, 8018b84 <_fflush_r+0x14>
 8018b80:	f000 f860 	bl	8018c44 <__sinit>
 8018b84:	4b0c      	ldr	r3, [pc, #48]	; (8018bb8 <_fflush_r+0x48>)
 8018b86:	429c      	cmp	r4, r3
 8018b88:	d109      	bne.n	8018b9e <_fflush_r+0x2e>
 8018b8a:	686c      	ldr	r4, [r5, #4]
 8018b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b90:	b17b      	cbz	r3, 8018bb2 <_fflush_r+0x42>
 8018b92:	4621      	mov	r1, r4
 8018b94:	4628      	mov	r0, r5
 8018b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b9a:	f7ff bf63 	b.w	8018a64 <__sflush_r>
 8018b9e:	4b07      	ldr	r3, [pc, #28]	; (8018bbc <_fflush_r+0x4c>)
 8018ba0:	429c      	cmp	r4, r3
 8018ba2:	d101      	bne.n	8018ba8 <_fflush_r+0x38>
 8018ba4:	68ac      	ldr	r4, [r5, #8]
 8018ba6:	e7f1      	b.n	8018b8c <_fflush_r+0x1c>
 8018ba8:	4b05      	ldr	r3, [pc, #20]	; (8018bc0 <_fflush_r+0x50>)
 8018baa:	429c      	cmp	r4, r3
 8018bac:	bf08      	it	eq
 8018bae:	68ec      	ldreq	r4, [r5, #12]
 8018bb0:	e7ec      	b.n	8018b8c <_fflush_r+0x1c>
 8018bb2:	2000      	movs	r0, #0
 8018bb4:	bd38      	pop	{r3, r4, r5, pc}
 8018bb6:	bf00      	nop
 8018bb8:	0801a138 	.word	0x0801a138
 8018bbc:	0801a158 	.word	0x0801a158
 8018bc0:	0801a118 	.word	0x0801a118

08018bc4 <std>:
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	b510      	push	{r4, lr}
 8018bc8:	4604      	mov	r4, r0
 8018bca:	e9c0 3300 	strd	r3, r3, [r0]
 8018bce:	6083      	str	r3, [r0, #8]
 8018bd0:	8181      	strh	r1, [r0, #12]
 8018bd2:	6643      	str	r3, [r0, #100]	; 0x64
 8018bd4:	81c2      	strh	r2, [r0, #14]
 8018bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018bda:	6183      	str	r3, [r0, #24]
 8018bdc:	4619      	mov	r1, r3
 8018bde:	2208      	movs	r2, #8
 8018be0:	305c      	adds	r0, #92	; 0x5c
 8018be2:	f7ff fcee 	bl	80185c2 <memset>
 8018be6:	4b05      	ldr	r3, [pc, #20]	; (8018bfc <std+0x38>)
 8018be8:	6263      	str	r3, [r4, #36]	; 0x24
 8018bea:	4b05      	ldr	r3, [pc, #20]	; (8018c00 <std+0x3c>)
 8018bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8018bee:	4b05      	ldr	r3, [pc, #20]	; (8018c04 <std+0x40>)
 8018bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018bf2:	4b05      	ldr	r3, [pc, #20]	; (8018c08 <std+0x44>)
 8018bf4:	6224      	str	r4, [r4, #32]
 8018bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8018bf8:	bd10      	pop	{r4, pc}
 8018bfa:	bf00      	nop
 8018bfc:	08019659 	.word	0x08019659
 8018c00:	0801967b 	.word	0x0801967b
 8018c04:	080196b3 	.word	0x080196b3
 8018c08:	080196d7 	.word	0x080196d7

08018c0c <_cleanup_r>:
 8018c0c:	4901      	ldr	r1, [pc, #4]	; (8018c14 <_cleanup_r+0x8>)
 8018c0e:	f000 b885 	b.w	8018d1c <_fwalk_reent>
 8018c12:	bf00      	nop
 8018c14:	08018b71 	.word	0x08018b71

08018c18 <__sfmoreglue>:
 8018c18:	b570      	push	{r4, r5, r6, lr}
 8018c1a:	1e4a      	subs	r2, r1, #1
 8018c1c:	2568      	movs	r5, #104	; 0x68
 8018c1e:	4355      	muls	r5, r2
 8018c20:	460e      	mov	r6, r1
 8018c22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018c26:	f7ff fd23 	bl	8018670 <_malloc_r>
 8018c2a:	4604      	mov	r4, r0
 8018c2c:	b140      	cbz	r0, 8018c40 <__sfmoreglue+0x28>
 8018c2e:	2100      	movs	r1, #0
 8018c30:	e9c0 1600 	strd	r1, r6, [r0]
 8018c34:	300c      	adds	r0, #12
 8018c36:	60a0      	str	r0, [r4, #8]
 8018c38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018c3c:	f7ff fcc1 	bl	80185c2 <memset>
 8018c40:	4620      	mov	r0, r4
 8018c42:	bd70      	pop	{r4, r5, r6, pc}

08018c44 <__sinit>:
 8018c44:	6983      	ldr	r3, [r0, #24]
 8018c46:	b510      	push	{r4, lr}
 8018c48:	4604      	mov	r4, r0
 8018c4a:	bb33      	cbnz	r3, 8018c9a <__sinit+0x56>
 8018c4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018c50:	6503      	str	r3, [r0, #80]	; 0x50
 8018c52:	4b12      	ldr	r3, [pc, #72]	; (8018c9c <__sinit+0x58>)
 8018c54:	4a12      	ldr	r2, [pc, #72]	; (8018ca0 <__sinit+0x5c>)
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	6282      	str	r2, [r0, #40]	; 0x28
 8018c5a:	4298      	cmp	r0, r3
 8018c5c:	bf04      	itt	eq
 8018c5e:	2301      	moveq	r3, #1
 8018c60:	6183      	streq	r3, [r0, #24]
 8018c62:	f000 f81f 	bl	8018ca4 <__sfp>
 8018c66:	6060      	str	r0, [r4, #4]
 8018c68:	4620      	mov	r0, r4
 8018c6a:	f000 f81b 	bl	8018ca4 <__sfp>
 8018c6e:	60a0      	str	r0, [r4, #8]
 8018c70:	4620      	mov	r0, r4
 8018c72:	f000 f817 	bl	8018ca4 <__sfp>
 8018c76:	2200      	movs	r2, #0
 8018c78:	60e0      	str	r0, [r4, #12]
 8018c7a:	2104      	movs	r1, #4
 8018c7c:	6860      	ldr	r0, [r4, #4]
 8018c7e:	f7ff ffa1 	bl	8018bc4 <std>
 8018c82:	2201      	movs	r2, #1
 8018c84:	2109      	movs	r1, #9
 8018c86:	68a0      	ldr	r0, [r4, #8]
 8018c88:	f7ff ff9c 	bl	8018bc4 <std>
 8018c8c:	2202      	movs	r2, #2
 8018c8e:	2112      	movs	r1, #18
 8018c90:	68e0      	ldr	r0, [r4, #12]
 8018c92:	f7ff ff97 	bl	8018bc4 <std>
 8018c96:	2301      	movs	r3, #1
 8018c98:	61a3      	str	r3, [r4, #24]
 8018c9a:	bd10      	pop	{r4, pc}
 8018c9c:	0801a114 	.word	0x0801a114
 8018ca0:	08018c0d 	.word	0x08018c0d

08018ca4 <__sfp>:
 8018ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ca6:	4b1b      	ldr	r3, [pc, #108]	; (8018d14 <__sfp+0x70>)
 8018ca8:	681e      	ldr	r6, [r3, #0]
 8018caa:	69b3      	ldr	r3, [r6, #24]
 8018cac:	4607      	mov	r7, r0
 8018cae:	b913      	cbnz	r3, 8018cb6 <__sfp+0x12>
 8018cb0:	4630      	mov	r0, r6
 8018cb2:	f7ff ffc7 	bl	8018c44 <__sinit>
 8018cb6:	3648      	adds	r6, #72	; 0x48
 8018cb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018cbc:	3b01      	subs	r3, #1
 8018cbe:	d503      	bpl.n	8018cc8 <__sfp+0x24>
 8018cc0:	6833      	ldr	r3, [r6, #0]
 8018cc2:	b133      	cbz	r3, 8018cd2 <__sfp+0x2e>
 8018cc4:	6836      	ldr	r6, [r6, #0]
 8018cc6:	e7f7      	b.n	8018cb8 <__sfp+0x14>
 8018cc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018ccc:	b16d      	cbz	r5, 8018cea <__sfp+0x46>
 8018cce:	3468      	adds	r4, #104	; 0x68
 8018cd0:	e7f4      	b.n	8018cbc <__sfp+0x18>
 8018cd2:	2104      	movs	r1, #4
 8018cd4:	4638      	mov	r0, r7
 8018cd6:	f7ff ff9f 	bl	8018c18 <__sfmoreglue>
 8018cda:	6030      	str	r0, [r6, #0]
 8018cdc:	2800      	cmp	r0, #0
 8018cde:	d1f1      	bne.n	8018cc4 <__sfp+0x20>
 8018ce0:	230c      	movs	r3, #12
 8018ce2:	603b      	str	r3, [r7, #0]
 8018ce4:	4604      	mov	r4, r0
 8018ce6:	4620      	mov	r0, r4
 8018ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cea:	4b0b      	ldr	r3, [pc, #44]	; (8018d18 <__sfp+0x74>)
 8018cec:	6665      	str	r5, [r4, #100]	; 0x64
 8018cee:	e9c4 5500 	strd	r5, r5, [r4]
 8018cf2:	60a5      	str	r5, [r4, #8]
 8018cf4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018cf8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018cfc:	2208      	movs	r2, #8
 8018cfe:	4629      	mov	r1, r5
 8018d00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018d04:	f7ff fc5d 	bl	80185c2 <memset>
 8018d08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018d0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018d10:	e7e9      	b.n	8018ce6 <__sfp+0x42>
 8018d12:	bf00      	nop
 8018d14:	0801a114 	.word	0x0801a114
 8018d18:	ffff0001 	.word	0xffff0001

08018d1c <_fwalk_reent>:
 8018d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d20:	4680      	mov	r8, r0
 8018d22:	4689      	mov	r9, r1
 8018d24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018d28:	2600      	movs	r6, #0
 8018d2a:	b914      	cbnz	r4, 8018d32 <_fwalk_reent+0x16>
 8018d2c:	4630      	mov	r0, r6
 8018d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018d36:	3f01      	subs	r7, #1
 8018d38:	d501      	bpl.n	8018d3e <_fwalk_reent+0x22>
 8018d3a:	6824      	ldr	r4, [r4, #0]
 8018d3c:	e7f5      	b.n	8018d2a <_fwalk_reent+0xe>
 8018d3e:	89ab      	ldrh	r3, [r5, #12]
 8018d40:	2b01      	cmp	r3, #1
 8018d42:	d907      	bls.n	8018d54 <_fwalk_reent+0x38>
 8018d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018d48:	3301      	adds	r3, #1
 8018d4a:	d003      	beq.n	8018d54 <_fwalk_reent+0x38>
 8018d4c:	4629      	mov	r1, r5
 8018d4e:	4640      	mov	r0, r8
 8018d50:	47c8      	blx	r9
 8018d52:	4306      	orrs	r6, r0
 8018d54:	3568      	adds	r5, #104	; 0x68
 8018d56:	e7ee      	b.n	8018d36 <_fwalk_reent+0x1a>

08018d58 <__swhatbuf_r>:
 8018d58:	b570      	push	{r4, r5, r6, lr}
 8018d5a:	460e      	mov	r6, r1
 8018d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d60:	2900      	cmp	r1, #0
 8018d62:	b096      	sub	sp, #88	; 0x58
 8018d64:	4614      	mov	r4, r2
 8018d66:	461d      	mov	r5, r3
 8018d68:	da07      	bge.n	8018d7a <__swhatbuf_r+0x22>
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	602b      	str	r3, [r5, #0]
 8018d6e:	89b3      	ldrh	r3, [r6, #12]
 8018d70:	061a      	lsls	r2, r3, #24
 8018d72:	d410      	bmi.n	8018d96 <__swhatbuf_r+0x3e>
 8018d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018d78:	e00e      	b.n	8018d98 <__swhatbuf_r+0x40>
 8018d7a:	466a      	mov	r2, sp
 8018d7c:	f000 fcd2 	bl	8019724 <_fstat_r>
 8018d80:	2800      	cmp	r0, #0
 8018d82:	dbf2      	blt.n	8018d6a <__swhatbuf_r+0x12>
 8018d84:	9a01      	ldr	r2, [sp, #4]
 8018d86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018d8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018d8e:	425a      	negs	r2, r3
 8018d90:	415a      	adcs	r2, r3
 8018d92:	602a      	str	r2, [r5, #0]
 8018d94:	e7ee      	b.n	8018d74 <__swhatbuf_r+0x1c>
 8018d96:	2340      	movs	r3, #64	; 0x40
 8018d98:	2000      	movs	r0, #0
 8018d9a:	6023      	str	r3, [r4, #0]
 8018d9c:	b016      	add	sp, #88	; 0x58
 8018d9e:	bd70      	pop	{r4, r5, r6, pc}

08018da0 <__smakebuf_r>:
 8018da0:	898b      	ldrh	r3, [r1, #12]
 8018da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018da4:	079d      	lsls	r5, r3, #30
 8018da6:	4606      	mov	r6, r0
 8018da8:	460c      	mov	r4, r1
 8018daa:	d507      	bpl.n	8018dbc <__smakebuf_r+0x1c>
 8018dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018db0:	6023      	str	r3, [r4, #0]
 8018db2:	6123      	str	r3, [r4, #16]
 8018db4:	2301      	movs	r3, #1
 8018db6:	6163      	str	r3, [r4, #20]
 8018db8:	b002      	add	sp, #8
 8018dba:	bd70      	pop	{r4, r5, r6, pc}
 8018dbc:	ab01      	add	r3, sp, #4
 8018dbe:	466a      	mov	r2, sp
 8018dc0:	f7ff ffca 	bl	8018d58 <__swhatbuf_r>
 8018dc4:	9900      	ldr	r1, [sp, #0]
 8018dc6:	4605      	mov	r5, r0
 8018dc8:	4630      	mov	r0, r6
 8018dca:	f7ff fc51 	bl	8018670 <_malloc_r>
 8018dce:	b948      	cbnz	r0, 8018de4 <__smakebuf_r+0x44>
 8018dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dd4:	059a      	lsls	r2, r3, #22
 8018dd6:	d4ef      	bmi.n	8018db8 <__smakebuf_r+0x18>
 8018dd8:	f023 0303 	bic.w	r3, r3, #3
 8018ddc:	f043 0302 	orr.w	r3, r3, #2
 8018de0:	81a3      	strh	r3, [r4, #12]
 8018de2:	e7e3      	b.n	8018dac <__smakebuf_r+0xc>
 8018de4:	4b0d      	ldr	r3, [pc, #52]	; (8018e1c <__smakebuf_r+0x7c>)
 8018de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8018de8:	89a3      	ldrh	r3, [r4, #12]
 8018dea:	6020      	str	r0, [r4, #0]
 8018dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018df0:	81a3      	strh	r3, [r4, #12]
 8018df2:	9b00      	ldr	r3, [sp, #0]
 8018df4:	6163      	str	r3, [r4, #20]
 8018df6:	9b01      	ldr	r3, [sp, #4]
 8018df8:	6120      	str	r0, [r4, #16]
 8018dfa:	b15b      	cbz	r3, 8018e14 <__smakebuf_r+0x74>
 8018dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018e00:	4630      	mov	r0, r6
 8018e02:	f000 fca1 	bl	8019748 <_isatty_r>
 8018e06:	b128      	cbz	r0, 8018e14 <__smakebuf_r+0x74>
 8018e08:	89a3      	ldrh	r3, [r4, #12]
 8018e0a:	f023 0303 	bic.w	r3, r3, #3
 8018e0e:	f043 0301 	orr.w	r3, r3, #1
 8018e12:	81a3      	strh	r3, [r4, #12]
 8018e14:	89a3      	ldrh	r3, [r4, #12]
 8018e16:	431d      	orrs	r5, r3
 8018e18:	81a5      	strh	r5, [r4, #12]
 8018e1a:	e7cd      	b.n	8018db8 <__smakebuf_r+0x18>
 8018e1c:	08018c0d 	.word	0x08018c0d

08018e20 <__malloc_lock>:
 8018e20:	4770      	bx	lr

08018e22 <__malloc_unlock>:
 8018e22:	4770      	bx	lr

08018e24 <__ssputs_r>:
 8018e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e28:	688e      	ldr	r6, [r1, #8]
 8018e2a:	429e      	cmp	r6, r3
 8018e2c:	4682      	mov	sl, r0
 8018e2e:	460c      	mov	r4, r1
 8018e30:	4690      	mov	r8, r2
 8018e32:	4699      	mov	r9, r3
 8018e34:	d837      	bhi.n	8018ea6 <__ssputs_r+0x82>
 8018e36:	898a      	ldrh	r2, [r1, #12]
 8018e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018e3c:	d031      	beq.n	8018ea2 <__ssputs_r+0x7e>
 8018e3e:	6825      	ldr	r5, [r4, #0]
 8018e40:	6909      	ldr	r1, [r1, #16]
 8018e42:	1a6f      	subs	r7, r5, r1
 8018e44:	6965      	ldr	r5, [r4, #20]
 8018e46:	2302      	movs	r3, #2
 8018e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e4c:	fb95 f5f3 	sdiv	r5, r5, r3
 8018e50:	f109 0301 	add.w	r3, r9, #1
 8018e54:	443b      	add	r3, r7
 8018e56:	429d      	cmp	r5, r3
 8018e58:	bf38      	it	cc
 8018e5a:	461d      	movcc	r5, r3
 8018e5c:	0553      	lsls	r3, r2, #21
 8018e5e:	d530      	bpl.n	8018ec2 <__ssputs_r+0x9e>
 8018e60:	4629      	mov	r1, r5
 8018e62:	f7ff fc05 	bl	8018670 <_malloc_r>
 8018e66:	4606      	mov	r6, r0
 8018e68:	b950      	cbnz	r0, 8018e80 <__ssputs_r+0x5c>
 8018e6a:	230c      	movs	r3, #12
 8018e6c:	f8ca 3000 	str.w	r3, [sl]
 8018e70:	89a3      	ldrh	r3, [r4, #12]
 8018e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e76:	81a3      	strh	r3, [r4, #12]
 8018e78:	f04f 30ff 	mov.w	r0, #4294967295
 8018e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e80:	463a      	mov	r2, r7
 8018e82:	6921      	ldr	r1, [r4, #16]
 8018e84:	f7ff fb92 	bl	80185ac <memcpy>
 8018e88:	89a3      	ldrh	r3, [r4, #12]
 8018e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e92:	81a3      	strh	r3, [r4, #12]
 8018e94:	6126      	str	r6, [r4, #16]
 8018e96:	6165      	str	r5, [r4, #20]
 8018e98:	443e      	add	r6, r7
 8018e9a:	1bed      	subs	r5, r5, r7
 8018e9c:	6026      	str	r6, [r4, #0]
 8018e9e:	60a5      	str	r5, [r4, #8]
 8018ea0:	464e      	mov	r6, r9
 8018ea2:	454e      	cmp	r6, r9
 8018ea4:	d900      	bls.n	8018ea8 <__ssputs_r+0x84>
 8018ea6:	464e      	mov	r6, r9
 8018ea8:	4632      	mov	r2, r6
 8018eaa:	4641      	mov	r1, r8
 8018eac:	6820      	ldr	r0, [r4, #0]
 8018eae:	f000 fc6d 	bl	801978c <memmove>
 8018eb2:	68a3      	ldr	r3, [r4, #8]
 8018eb4:	1b9b      	subs	r3, r3, r6
 8018eb6:	60a3      	str	r3, [r4, #8]
 8018eb8:	6823      	ldr	r3, [r4, #0]
 8018eba:	441e      	add	r6, r3
 8018ebc:	6026      	str	r6, [r4, #0]
 8018ebe:	2000      	movs	r0, #0
 8018ec0:	e7dc      	b.n	8018e7c <__ssputs_r+0x58>
 8018ec2:	462a      	mov	r2, r5
 8018ec4:	f000 fc7b 	bl	80197be <_realloc_r>
 8018ec8:	4606      	mov	r6, r0
 8018eca:	2800      	cmp	r0, #0
 8018ecc:	d1e2      	bne.n	8018e94 <__ssputs_r+0x70>
 8018ece:	6921      	ldr	r1, [r4, #16]
 8018ed0:	4650      	mov	r0, sl
 8018ed2:	f7ff fb7f 	bl	80185d4 <_free_r>
 8018ed6:	e7c8      	b.n	8018e6a <__ssputs_r+0x46>

08018ed8 <_svfiprintf_r>:
 8018ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018edc:	461d      	mov	r5, r3
 8018ede:	898b      	ldrh	r3, [r1, #12]
 8018ee0:	061f      	lsls	r7, r3, #24
 8018ee2:	b09d      	sub	sp, #116	; 0x74
 8018ee4:	4680      	mov	r8, r0
 8018ee6:	460c      	mov	r4, r1
 8018ee8:	4616      	mov	r6, r2
 8018eea:	d50f      	bpl.n	8018f0c <_svfiprintf_r+0x34>
 8018eec:	690b      	ldr	r3, [r1, #16]
 8018eee:	b96b      	cbnz	r3, 8018f0c <_svfiprintf_r+0x34>
 8018ef0:	2140      	movs	r1, #64	; 0x40
 8018ef2:	f7ff fbbd 	bl	8018670 <_malloc_r>
 8018ef6:	6020      	str	r0, [r4, #0]
 8018ef8:	6120      	str	r0, [r4, #16]
 8018efa:	b928      	cbnz	r0, 8018f08 <_svfiprintf_r+0x30>
 8018efc:	230c      	movs	r3, #12
 8018efe:	f8c8 3000 	str.w	r3, [r8]
 8018f02:	f04f 30ff 	mov.w	r0, #4294967295
 8018f06:	e0c8      	b.n	801909a <_svfiprintf_r+0x1c2>
 8018f08:	2340      	movs	r3, #64	; 0x40
 8018f0a:	6163      	str	r3, [r4, #20]
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8018f10:	2320      	movs	r3, #32
 8018f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018f16:	2330      	movs	r3, #48	; 0x30
 8018f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f1c:	9503      	str	r5, [sp, #12]
 8018f1e:	f04f 0b01 	mov.w	fp, #1
 8018f22:	4637      	mov	r7, r6
 8018f24:	463d      	mov	r5, r7
 8018f26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018f2a:	b10b      	cbz	r3, 8018f30 <_svfiprintf_r+0x58>
 8018f2c:	2b25      	cmp	r3, #37	; 0x25
 8018f2e:	d13e      	bne.n	8018fae <_svfiprintf_r+0xd6>
 8018f30:	ebb7 0a06 	subs.w	sl, r7, r6
 8018f34:	d00b      	beq.n	8018f4e <_svfiprintf_r+0x76>
 8018f36:	4653      	mov	r3, sl
 8018f38:	4632      	mov	r2, r6
 8018f3a:	4621      	mov	r1, r4
 8018f3c:	4640      	mov	r0, r8
 8018f3e:	f7ff ff71 	bl	8018e24 <__ssputs_r>
 8018f42:	3001      	adds	r0, #1
 8018f44:	f000 80a4 	beq.w	8019090 <_svfiprintf_r+0x1b8>
 8018f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f4a:	4453      	add	r3, sl
 8018f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8018f4e:	783b      	ldrb	r3, [r7, #0]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	f000 809d 	beq.w	8019090 <_svfiprintf_r+0x1b8>
 8018f56:	2300      	movs	r3, #0
 8018f58:	f04f 32ff 	mov.w	r2, #4294967295
 8018f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f60:	9304      	str	r3, [sp, #16]
 8018f62:	9307      	str	r3, [sp, #28]
 8018f64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018f68:	931a      	str	r3, [sp, #104]	; 0x68
 8018f6a:	462f      	mov	r7, r5
 8018f6c:	2205      	movs	r2, #5
 8018f6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018f72:	4850      	ldr	r0, [pc, #320]	; (80190b4 <_svfiprintf_r+0x1dc>)
 8018f74:	f7e7 f9bc 	bl	80002f0 <memchr>
 8018f78:	9b04      	ldr	r3, [sp, #16]
 8018f7a:	b9d0      	cbnz	r0, 8018fb2 <_svfiprintf_r+0xda>
 8018f7c:	06d9      	lsls	r1, r3, #27
 8018f7e:	bf44      	itt	mi
 8018f80:	2220      	movmi	r2, #32
 8018f82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018f86:	071a      	lsls	r2, r3, #28
 8018f88:	bf44      	itt	mi
 8018f8a:	222b      	movmi	r2, #43	; 0x2b
 8018f8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018f90:	782a      	ldrb	r2, [r5, #0]
 8018f92:	2a2a      	cmp	r2, #42	; 0x2a
 8018f94:	d015      	beq.n	8018fc2 <_svfiprintf_r+0xea>
 8018f96:	9a07      	ldr	r2, [sp, #28]
 8018f98:	462f      	mov	r7, r5
 8018f9a:	2000      	movs	r0, #0
 8018f9c:	250a      	movs	r5, #10
 8018f9e:	4639      	mov	r1, r7
 8018fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018fa4:	3b30      	subs	r3, #48	; 0x30
 8018fa6:	2b09      	cmp	r3, #9
 8018fa8:	d94d      	bls.n	8019046 <_svfiprintf_r+0x16e>
 8018faa:	b1b8      	cbz	r0, 8018fdc <_svfiprintf_r+0x104>
 8018fac:	e00f      	b.n	8018fce <_svfiprintf_r+0xf6>
 8018fae:	462f      	mov	r7, r5
 8018fb0:	e7b8      	b.n	8018f24 <_svfiprintf_r+0x4c>
 8018fb2:	4a40      	ldr	r2, [pc, #256]	; (80190b4 <_svfiprintf_r+0x1dc>)
 8018fb4:	1a80      	subs	r0, r0, r2
 8018fb6:	fa0b f000 	lsl.w	r0, fp, r0
 8018fba:	4318      	orrs	r0, r3
 8018fbc:	9004      	str	r0, [sp, #16]
 8018fbe:	463d      	mov	r5, r7
 8018fc0:	e7d3      	b.n	8018f6a <_svfiprintf_r+0x92>
 8018fc2:	9a03      	ldr	r2, [sp, #12]
 8018fc4:	1d11      	adds	r1, r2, #4
 8018fc6:	6812      	ldr	r2, [r2, #0]
 8018fc8:	9103      	str	r1, [sp, #12]
 8018fca:	2a00      	cmp	r2, #0
 8018fcc:	db01      	blt.n	8018fd2 <_svfiprintf_r+0xfa>
 8018fce:	9207      	str	r2, [sp, #28]
 8018fd0:	e004      	b.n	8018fdc <_svfiprintf_r+0x104>
 8018fd2:	4252      	negs	r2, r2
 8018fd4:	f043 0302 	orr.w	r3, r3, #2
 8018fd8:	9207      	str	r2, [sp, #28]
 8018fda:	9304      	str	r3, [sp, #16]
 8018fdc:	783b      	ldrb	r3, [r7, #0]
 8018fde:	2b2e      	cmp	r3, #46	; 0x2e
 8018fe0:	d10c      	bne.n	8018ffc <_svfiprintf_r+0x124>
 8018fe2:	787b      	ldrb	r3, [r7, #1]
 8018fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8018fe6:	d133      	bne.n	8019050 <_svfiprintf_r+0x178>
 8018fe8:	9b03      	ldr	r3, [sp, #12]
 8018fea:	1d1a      	adds	r2, r3, #4
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	9203      	str	r2, [sp, #12]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	bfb8      	it	lt
 8018ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8018ff8:	3702      	adds	r7, #2
 8018ffa:	9305      	str	r3, [sp, #20]
 8018ffc:	4d2e      	ldr	r5, [pc, #184]	; (80190b8 <_svfiprintf_r+0x1e0>)
 8018ffe:	7839      	ldrb	r1, [r7, #0]
 8019000:	2203      	movs	r2, #3
 8019002:	4628      	mov	r0, r5
 8019004:	f7e7 f974 	bl	80002f0 <memchr>
 8019008:	b138      	cbz	r0, 801901a <_svfiprintf_r+0x142>
 801900a:	2340      	movs	r3, #64	; 0x40
 801900c:	1b40      	subs	r0, r0, r5
 801900e:	fa03 f000 	lsl.w	r0, r3, r0
 8019012:	9b04      	ldr	r3, [sp, #16]
 8019014:	4303      	orrs	r3, r0
 8019016:	3701      	adds	r7, #1
 8019018:	9304      	str	r3, [sp, #16]
 801901a:	7839      	ldrb	r1, [r7, #0]
 801901c:	4827      	ldr	r0, [pc, #156]	; (80190bc <_svfiprintf_r+0x1e4>)
 801901e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019022:	2206      	movs	r2, #6
 8019024:	1c7e      	adds	r6, r7, #1
 8019026:	f7e7 f963 	bl	80002f0 <memchr>
 801902a:	2800      	cmp	r0, #0
 801902c:	d038      	beq.n	80190a0 <_svfiprintf_r+0x1c8>
 801902e:	4b24      	ldr	r3, [pc, #144]	; (80190c0 <_svfiprintf_r+0x1e8>)
 8019030:	bb13      	cbnz	r3, 8019078 <_svfiprintf_r+0x1a0>
 8019032:	9b03      	ldr	r3, [sp, #12]
 8019034:	3307      	adds	r3, #7
 8019036:	f023 0307 	bic.w	r3, r3, #7
 801903a:	3308      	adds	r3, #8
 801903c:	9303      	str	r3, [sp, #12]
 801903e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019040:	444b      	add	r3, r9
 8019042:	9309      	str	r3, [sp, #36]	; 0x24
 8019044:	e76d      	b.n	8018f22 <_svfiprintf_r+0x4a>
 8019046:	fb05 3202 	mla	r2, r5, r2, r3
 801904a:	2001      	movs	r0, #1
 801904c:	460f      	mov	r7, r1
 801904e:	e7a6      	b.n	8018f9e <_svfiprintf_r+0xc6>
 8019050:	2300      	movs	r3, #0
 8019052:	3701      	adds	r7, #1
 8019054:	9305      	str	r3, [sp, #20]
 8019056:	4619      	mov	r1, r3
 8019058:	250a      	movs	r5, #10
 801905a:	4638      	mov	r0, r7
 801905c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019060:	3a30      	subs	r2, #48	; 0x30
 8019062:	2a09      	cmp	r2, #9
 8019064:	d903      	bls.n	801906e <_svfiprintf_r+0x196>
 8019066:	2b00      	cmp	r3, #0
 8019068:	d0c8      	beq.n	8018ffc <_svfiprintf_r+0x124>
 801906a:	9105      	str	r1, [sp, #20]
 801906c:	e7c6      	b.n	8018ffc <_svfiprintf_r+0x124>
 801906e:	fb05 2101 	mla	r1, r5, r1, r2
 8019072:	2301      	movs	r3, #1
 8019074:	4607      	mov	r7, r0
 8019076:	e7f0      	b.n	801905a <_svfiprintf_r+0x182>
 8019078:	ab03      	add	r3, sp, #12
 801907a:	9300      	str	r3, [sp, #0]
 801907c:	4622      	mov	r2, r4
 801907e:	4b11      	ldr	r3, [pc, #68]	; (80190c4 <_svfiprintf_r+0x1ec>)
 8019080:	a904      	add	r1, sp, #16
 8019082:	4640      	mov	r0, r8
 8019084:	f3af 8000 	nop.w
 8019088:	f1b0 3fff 	cmp.w	r0, #4294967295
 801908c:	4681      	mov	r9, r0
 801908e:	d1d6      	bne.n	801903e <_svfiprintf_r+0x166>
 8019090:	89a3      	ldrh	r3, [r4, #12]
 8019092:	065b      	lsls	r3, r3, #25
 8019094:	f53f af35 	bmi.w	8018f02 <_svfiprintf_r+0x2a>
 8019098:	9809      	ldr	r0, [sp, #36]	; 0x24
 801909a:	b01d      	add	sp, #116	; 0x74
 801909c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190a0:	ab03      	add	r3, sp, #12
 80190a2:	9300      	str	r3, [sp, #0]
 80190a4:	4622      	mov	r2, r4
 80190a6:	4b07      	ldr	r3, [pc, #28]	; (80190c4 <_svfiprintf_r+0x1ec>)
 80190a8:	a904      	add	r1, sp, #16
 80190aa:	4640      	mov	r0, r8
 80190ac:	f000 f9c2 	bl	8019434 <_printf_i>
 80190b0:	e7ea      	b.n	8019088 <_svfiprintf_r+0x1b0>
 80190b2:	bf00      	nop
 80190b4:	0801a178 	.word	0x0801a178
 80190b8:	0801a17e 	.word	0x0801a17e
 80190bc:	0801a182 	.word	0x0801a182
 80190c0:	00000000 	.word	0x00000000
 80190c4:	08018e25 	.word	0x08018e25

080190c8 <__sfputc_r>:
 80190c8:	6893      	ldr	r3, [r2, #8]
 80190ca:	3b01      	subs	r3, #1
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	b410      	push	{r4}
 80190d0:	6093      	str	r3, [r2, #8]
 80190d2:	da08      	bge.n	80190e6 <__sfputc_r+0x1e>
 80190d4:	6994      	ldr	r4, [r2, #24]
 80190d6:	42a3      	cmp	r3, r4
 80190d8:	db01      	blt.n	80190de <__sfputc_r+0x16>
 80190da:	290a      	cmp	r1, #10
 80190dc:	d103      	bne.n	80190e6 <__sfputc_r+0x1e>
 80190de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190e2:	f7ff bbff 	b.w	80188e4 <__swbuf_r>
 80190e6:	6813      	ldr	r3, [r2, #0]
 80190e8:	1c58      	adds	r0, r3, #1
 80190ea:	6010      	str	r0, [r2, #0]
 80190ec:	7019      	strb	r1, [r3, #0]
 80190ee:	4608      	mov	r0, r1
 80190f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190f4:	4770      	bx	lr

080190f6 <__sfputs_r>:
 80190f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190f8:	4606      	mov	r6, r0
 80190fa:	460f      	mov	r7, r1
 80190fc:	4614      	mov	r4, r2
 80190fe:	18d5      	adds	r5, r2, r3
 8019100:	42ac      	cmp	r4, r5
 8019102:	d101      	bne.n	8019108 <__sfputs_r+0x12>
 8019104:	2000      	movs	r0, #0
 8019106:	e007      	b.n	8019118 <__sfputs_r+0x22>
 8019108:	463a      	mov	r2, r7
 801910a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801910e:	4630      	mov	r0, r6
 8019110:	f7ff ffda 	bl	80190c8 <__sfputc_r>
 8019114:	1c43      	adds	r3, r0, #1
 8019116:	d1f3      	bne.n	8019100 <__sfputs_r+0xa>
 8019118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801911c <_vfiprintf_r>:
 801911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019120:	460c      	mov	r4, r1
 8019122:	b09d      	sub	sp, #116	; 0x74
 8019124:	4617      	mov	r7, r2
 8019126:	461d      	mov	r5, r3
 8019128:	4606      	mov	r6, r0
 801912a:	b118      	cbz	r0, 8019134 <_vfiprintf_r+0x18>
 801912c:	6983      	ldr	r3, [r0, #24]
 801912e:	b90b      	cbnz	r3, 8019134 <_vfiprintf_r+0x18>
 8019130:	f7ff fd88 	bl	8018c44 <__sinit>
 8019134:	4b7c      	ldr	r3, [pc, #496]	; (8019328 <_vfiprintf_r+0x20c>)
 8019136:	429c      	cmp	r4, r3
 8019138:	d158      	bne.n	80191ec <_vfiprintf_r+0xd0>
 801913a:	6874      	ldr	r4, [r6, #4]
 801913c:	89a3      	ldrh	r3, [r4, #12]
 801913e:	0718      	lsls	r0, r3, #28
 8019140:	d55e      	bpl.n	8019200 <_vfiprintf_r+0xe4>
 8019142:	6923      	ldr	r3, [r4, #16]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d05b      	beq.n	8019200 <_vfiprintf_r+0xe4>
 8019148:	2300      	movs	r3, #0
 801914a:	9309      	str	r3, [sp, #36]	; 0x24
 801914c:	2320      	movs	r3, #32
 801914e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019152:	2330      	movs	r3, #48	; 0x30
 8019154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019158:	9503      	str	r5, [sp, #12]
 801915a:	f04f 0b01 	mov.w	fp, #1
 801915e:	46b8      	mov	r8, r7
 8019160:	4645      	mov	r5, r8
 8019162:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019166:	b10b      	cbz	r3, 801916c <_vfiprintf_r+0x50>
 8019168:	2b25      	cmp	r3, #37	; 0x25
 801916a:	d154      	bne.n	8019216 <_vfiprintf_r+0xfa>
 801916c:	ebb8 0a07 	subs.w	sl, r8, r7
 8019170:	d00b      	beq.n	801918a <_vfiprintf_r+0x6e>
 8019172:	4653      	mov	r3, sl
 8019174:	463a      	mov	r2, r7
 8019176:	4621      	mov	r1, r4
 8019178:	4630      	mov	r0, r6
 801917a:	f7ff ffbc 	bl	80190f6 <__sfputs_r>
 801917e:	3001      	adds	r0, #1
 8019180:	f000 80c2 	beq.w	8019308 <_vfiprintf_r+0x1ec>
 8019184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019186:	4453      	add	r3, sl
 8019188:	9309      	str	r3, [sp, #36]	; 0x24
 801918a:	f898 3000 	ldrb.w	r3, [r8]
 801918e:	2b00      	cmp	r3, #0
 8019190:	f000 80ba 	beq.w	8019308 <_vfiprintf_r+0x1ec>
 8019194:	2300      	movs	r3, #0
 8019196:	f04f 32ff 	mov.w	r2, #4294967295
 801919a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801919e:	9304      	str	r3, [sp, #16]
 80191a0:	9307      	str	r3, [sp, #28]
 80191a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80191a6:	931a      	str	r3, [sp, #104]	; 0x68
 80191a8:	46a8      	mov	r8, r5
 80191aa:	2205      	movs	r2, #5
 80191ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80191b0:	485e      	ldr	r0, [pc, #376]	; (801932c <_vfiprintf_r+0x210>)
 80191b2:	f7e7 f89d 	bl	80002f0 <memchr>
 80191b6:	9b04      	ldr	r3, [sp, #16]
 80191b8:	bb78      	cbnz	r0, 801921a <_vfiprintf_r+0xfe>
 80191ba:	06d9      	lsls	r1, r3, #27
 80191bc:	bf44      	itt	mi
 80191be:	2220      	movmi	r2, #32
 80191c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191c4:	071a      	lsls	r2, r3, #28
 80191c6:	bf44      	itt	mi
 80191c8:	222b      	movmi	r2, #43	; 0x2b
 80191ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191ce:	782a      	ldrb	r2, [r5, #0]
 80191d0:	2a2a      	cmp	r2, #42	; 0x2a
 80191d2:	d02a      	beq.n	801922a <_vfiprintf_r+0x10e>
 80191d4:	9a07      	ldr	r2, [sp, #28]
 80191d6:	46a8      	mov	r8, r5
 80191d8:	2000      	movs	r0, #0
 80191da:	250a      	movs	r5, #10
 80191dc:	4641      	mov	r1, r8
 80191de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191e2:	3b30      	subs	r3, #48	; 0x30
 80191e4:	2b09      	cmp	r3, #9
 80191e6:	d969      	bls.n	80192bc <_vfiprintf_r+0x1a0>
 80191e8:	b360      	cbz	r0, 8019244 <_vfiprintf_r+0x128>
 80191ea:	e024      	b.n	8019236 <_vfiprintf_r+0x11a>
 80191ec:	4b50      	ldr	r3, [pc, #320]	; (8019330 <_vfiprintf_r+0x214>)
 80191ee:	429c      	cmp	r4, r3
 80191f0:	d101      	bne.n	80191f6 <_vfiprintf_r+0xda>
 80191f2:	68b4      	ldr	r4, [r6, #8]
 80191f4:	e7a2      	b.n	801913c <_vfiprintf_r+0x20>
 80191f6:	4b4f      	ldr	r3, [pc, #316]	; (8019334 <_vfiprintf_r+0x218>)
 80191f8:	429c      	cmp	r4, r3
 80191fa:	bf08      	it	eq
 80191fc:	68f4      	ldreq	r4, [r6, #12]
 80191fe:	e79d      	b.n	801913c <_vfiprintf_r+0x20>
 8019200:	4621      	mov	r1, r4
 8019202:	4630      	mov	r0, r6
 8019204:	f7ff fbc0 	bl	8018988 <__swsetup_r>
 8019208:	2800      	cmp	r0, #0
 801920a:	d09d      	beq.n	8019148 <_vfiprintf_r+0x2c>
 801920c:	f04f 30ff 	mov.w	r0, #4294967295
 8019210:	b01d      	add	sp, #116	; 0x74
 8019212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019216:	46a8      	mov	r8, r5
 8019218:	e7a2      	b.n	8019160 <_vfiprintf_r+0x44>
 801921a:	4a44      	ldr	r2, [pc, #272]	; (801932c <_vfiprintf_r+0x210>)
 801921c:	1a80      	subs	r0, r0, r2
 801921e:	fa0b f000 	lsl.w	r0, fp, r0
 8019222:	4318      	orrs	r0, r3
 8019224:	9004      	str	r0, [sp, #16]
 8019226:	4645      	mov	r5, r8
 8019228:	e7be      	b.n	80191a8 <_vfiprintf_r+0x8c>
 801922a:	9a03      	ldr	r2, [sp, #12]
 801922c:	1d11      	adds	r1, r2, #4
 801922e:	6812      	ldr	r2, [r2, #0]
 8019230:	9103      	str	r1, [sp, #12]
 8019232:	2a00      	cmp	r2, #0
 8019234:	db01      	blt.n	801923a <_vfiprintf_r+0x11e>
 8019236:	9207      	str	r2, [sp, #28]
 8019238:	e004      	b.n	8019244 <_vfiprintf_r+0x128>
 801923a:	4252      	negs	r2, r2
 801923c:	f043 0302 	orr.w	r3, r3, #2
 8019240:	9207      	str	r2, [sp, #28]
 8019242:	9304      	str	r3, [sp, #16]
 8019244:	f898 3000 	ldrb.w	r3, [r8]
 8019248:	2b2e      	cmp	r3, #46	; 0x2e
 801924a:	d10e      	bne.n	801926a <_vfiprintf_r+0x14e>
 801924c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019250:	2b2a      	cmp	r3, #42	; 0x2a
 8019252:	d138      	bne.n	80192c6 <_vfiprintf_r+0x1aa>
 8019254:	9b03      	ldr	r3, [sp, #12]
 8019256:	1d1a      	adds	r2, r3, #4
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	9203      	str	r2, [sp, #12]
 801925c:	2b00      	cmp	r3, #0
 801925e:	bfb8      	it	lt
 8019260:	f04f 33ff 	movlt.w	r3, #4294967295
 8019264:	f108 0802 	add.w	r8, r8, #2
 8019268:	9305      	str	r3, [sp, #20]
 801926a:	4d33      	ldr	r5, [pc, #204]	; (8019338 <_vfiprintf_r+0x21c>)
 801926c:	f898 1000 	ldrb.w	r1, [r8]
 8019270:	2203      	movs	r2, #3
 8019272:	4628      	mov	r0, r5
 8019274:	f7e7 f83c 	bl	80002f0 <memchr>
 8019278:	b140      	cbz	r0, 801928c <_vfiprintf_r+0x170>
 801927a:	2340      	movs	r3, #64	; 0x40
 801927c:	1b40      	subs	r0, r0, r5
 801927e:	fa03 f000 	lsl.w	r0, r3, r0
 8019282:	9b04      	ldr	r3, [sp, #16]
 8019284:	4303      	orrs	r3, r0
 8019286:	f108 0801 	add.w	r8, r8, #1
 801928a:	9304      	str	r3, [sp, #16]
 801928c:	f898 1000 	ldrb.w	r1, [r8]
 8019290:	482a      	ldr	r0, [pc, #168]	; (801933c <_vfiprintf_r+0x220>)
 8019292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019296:	2206      	movs	r2, #6
 8019298:	f108 0701 	add.w	r7, r8, #1
 801929c:	f7e7 f828 	bl	80002f0 <memchr>
 80192a0:	2800      	cmp	r0, #0
 80192a2:	d037      	beq.n	8019314 <_vfiprintf_r+0x1f8>
 80192a4:	4b26      	ldr	r3, [pc, #152]	; (8019340 <_vfiprintf_r+0x224>)
 80192a6:	bb1b      	cbnz	r3, 80192f0 <_vfiprintf_r+0x1d4>
 80192a8:	9b03      	ldr	r3, [sp, #12]
 80192aa:	3307      	adds	r3, #7
 80192ac:	f023 0307 	bic.w	r3, r3, #7
 80192b0:	3308      	adds	r3, #8
 80192b2:	9303      	str	r3, [sp, #12]
 80192b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192b6:	444b      	add	r3, r9
 80192b8:	9309      	str	r3, [sp, #36]	; 0x24
 80192ba:	e750      	b.n	801915e <_vfiprintf_r+0x42>
 80192bc:	fb05 3202 	mla	r2, r5, r2, r3
 80192c0:	2001      	movs	r0, #1
 80192c2:	4688      	mov	r8, r1
 80192c4:	e78a      	b.n	80191dc <_vfiprintf_r+0xc0>
 80192c6:	2300      	movs	r3, #0
 80192c8:	f108 0801 	add.w	r8, r8, #1
 80192cc:	9305      	str	r3, [sp, #20]
 80192ce:	4619      	mov	r1, r3
 80192d0:	250a      	movs	r5, #10
 80192d2:	4640      	mov	r0, r8
 80192d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192d8:	3a30      	subs	r2, #48	; 0x30
 80192da:	2a09      	cmp	r2, #9
 80192dc:	d903      	bls.n	80192e6 <_vfiprintf_r+0x1ca>
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d0c3      	beq.n	801926a <_vfiprintf_r+0x14e>
 80192e2:	9105      	str	r1, [sp, #20]
 80192e4:	e7c1      	b.n	801926a <_vfiprintf_r+0x14e>
 80192e6:	fb05 2101 	mla	r1, r5, r1, r2
 80192ea:	2301      	movs	r3, #1
 80192ec:	4680      	mov	r8, r0
 80192ee:	e7f0      	b.n	80192d2 <_vfiprintf_r+0x1b6>
 80192f0:	ab03      	add	r3, sp, #12
 80192f2:	9300      	str	r3, [sp, #0]
 80192f4:	4622      	mov	r2, r4
 80192f6:	4b13      	ldr	r3, [pc, #76]	; (8019344 <_vfiprintf_r+0x228>)
 80192f8:	a904      	add	r1, sp, #16
 80192fa:	4630      	mov	r0, r6
 80192fc:	f3af 8000 	nop.w
 8019300:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019304:	4681      	mov	r9, r0
 8019306:	d1d5      	bne.n	80192b4 <_vfiprintf_r+0x198>
 8019308:	89a3      	ldrh	r3, [r4, #12]
 801930a:	065b      	lsls	r3, r3, #25
 801930c:	f53f af7e 	bmi.w	801920c <_vfiprintf_r+0xf0>
 8019310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019312:	e77d      	b.n	8019210 <_vfiprintf_r+0xf4>
 8019314:	ab03      	add	r3, sp, #12
 8019316:	9300      	str	r3, [sp, #0]
 8019318:	4622      	mov	r2, r4
 801931a:	4b0a      	ldr	r3, [pc, #40]	; (8019344 <_vfiprintf_r+0x228>)
 801931c:	a904      	add	r1, sp, #16
 801931e:	4630      	mov	r0, r6
 8019320:	f000 f888 	bl	8019434 <_printf_i>
 8019324:	e7ec      	b.n	8019300 <_vfiprintf_r+0x1e4>
 8019326:	bf00      	nop
 8019328:	0801a138 	.word	0x0801a138
 801932c:	0801a178 	.word	0x0801a178
 8019330:	0801a158 	.word	0x0801a158
 8019334:	0801a118 	.word	0x0801a118
 8019338:	0801a17e 	.word	0x0801a17e
 801933c:	0801a182 	.word	0x0801a182
 8019340:	00000000 	.word	0x00000000
 8019344:	080190f7 	.word	0x080190f7

08019348 <_printf_common>:
 8019348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801934c:	4691      	mov	r9, r2
 801934e:	461f      	mov	r7, r3
 8019350:	688a      	ldr	r2, [r1, #8]
 8019352:	690b      	ldr	r3, [r1, #16]
 8019354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019358:	4293      	cmp	r3, r2
 801935a:	bfb8      	it	lt
 801935c:	4613      	movlt	r3, r2
 801935e:	f8c9 3000 	str.w	r3, [r9]
 8019362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019366:	4606      	mov	r6, r0
 8019368:	460c      	mov	r4, r1
 801936a:	b112      	cbz	r2, 8019372 <_printf_common+0x2a>
 801936c:	3301      	adds	r3, #1
 801936e:	f8c9 3000 	str.w	r3, [r9]
 8019372:	6823      	ldr	r3, [r4, #0]
 8019374:	0699      	lsls	r1, r3, #26
 8019376:	bf42      	ittt	mi
 8019378:	f8d9 3000 	ldrmi.w	r3, [r9]
 801937c:	3302      	addmi	r3, #2
 801937e:	f8c9 3000 	strmi.w	r3, [r9]
 8019382:	6825      	ldr	r5, [r4, #0]
 8019384:	f015 0506 	ands.w	r5, r5, #6
 8019388:	d107      	bne.n	801939a <_printf_common+0x52>
 801938a:	f104 0a19 	add.w	sl, r4, #25
 801938e:	68e3      	ldr	r3, [r4, #12]
 8019390:	f8d9 2000 	ldr.w	r2, [r9]
 8019394:	1a9b      	subs	r3, r3, r2
 8019396:	42ab      	cmp	r3, r5
 8019398:	dc28      	bgt.n	80193ec <_printf_common+0xa4>
 801939a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801939e:	6822      	ldr	r2, [r4, #0]
 80193a0:	3300      	adds	r3, #0
 80193a2:	bf18      	it	ne
 80193a4:	2301      	movne	r3, #1
 80193a6:	0692      	lsls	r2, r2, #26
 80193a8:	d42d      	bmi.n	8019406 <_printf_common+0xbe>
 80193aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80193ae:	4639      	mov	r1, r7
 80193b0:	4630      	mov	r0, r6
 80193b2:	47c0      	blx	r8
 80193b4:	3001      	adds	r0, #1
 80193b6:	d020      	beq.n	80193fa <_printf_common+0xb2>
 80193b8:	6823      	ldr	r3, [r4, #0]
 80193ba:	68e5      	ldr	r5, [r4, #12]
 80193bc:	f8d9 2000 	ldr.w	r2, [r9]
 80193c0:	f003 0306 	and.w	r3, r3, #6
 80193c4:	2b04      	cmp	r3, #4
 80193c6:	bf08      	it	eq
 80193c8:	1aad      	subeq	r5, r5, r2
 80193ca:	68a3      	ldr	r3, [r4, #8]
 80193cc:	6922      	ldr	r2, [r4, #16]
 80193ce:	bf0c      	ite	eq
 80193d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80193d4:	2500      	movne	r5, #0
 80193d6:	4293      	cmp	r3, r2
 80193d8:	bfc4      	itt	gt
 80193da:	1a9b      	subgt	r3, r3, r2
 80193dc:	18ed      	addgt	r5, r5, r3
 80193de:	f04f 0900 	mov.w	r9, #0
 80193e2:	341a      	adds	r4, #26
 80193e4:	454d      	cmp	r5, r9
 80193e6:	d11a      	bne.n	801941e <_printf_common+0xd6>
 80193e8:	2000      	movs	r0, #0
 80193ea:	e008      	b.n	80193fe <_printf_common+0xb6>
 80193ec:	2301      	movs	r3, #1
 80193ee:	4652      	mov	r2, sl
 80193f0:	4639      	mov	r1, r7
 80193f2:	4630      	mov	r0, r6
 80193f4:	47c0      	blx	r8
 80193f6:	3001      	adds	r0, #1
 80193f8:	d103      	bne.n	8019402 <_printf_common+0xba>
 80193fa:	f04f 30ff 	mov.w	r0, #4294967295
 80193fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019402:	3501      	adds	r5, #1
 8019404:	e7c3      	b.n	801938e <_printf_common+0x46>
 8019406:	18e1      	adds	r1, r4, r3
 8019408:	1c5a      	adds	r2, r3, #1
 801940a:	2030      	movs	r0, #48	; 0x30
 801940c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019410:	4422      	add	r2, r4
 8019412:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801941a:	3302      	adds	r3, #2
 801941c:	e7c5      	b.n	80193aa <_printf_common+0x62>
 801941e:	2301      	movs	r3, #1
 8019420:	4622      	mov	r2, r4
 8019422:	4639      	mov	r1, r7
 8019424:	4630      	mov	r0, r6
 8019426:	47c0      	blx	r8
 8019428:	3001      	adds	r0, #1
 801942a:	d0e6      	beq.n	80193fa <_printf_common+0xb2>
 801942c:	f109 0901 	add.w	r9, r9, #1
 8019430:	e7d8      	b.n	80193e4 <_printf_common+0x9c>
	...

08019434 <_printf_i>:
 8019434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019438:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801943c:	460c      	mov	r4, r1
 801943e:	7e09      	ldrb	r1, [r1, #24]
 8019440:	b085      	sub	sp, #20
 8019442:	296e      	cmp	r1, #110	; 0x6e
 8019444:	4617      	mov	r7, r2
 8019446:	4606      	mov	r6, r0
 8019448:	4698      	mov	r8, r3
 801944a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801944c:	f000 80b3 	beq.w	80195b6 <_printf_i+0x182>
 8019450:	d822      	bhi.n	8019498 <_printf_i+0x64>
 8019452:	2963      	cmp	r1, #99	; 0x63
 8019454:	d036      	beq.n	80194c4 <_printf_i+0x90>
 8019456:	d80a      	bhi.n	801946e <_printf_i+0x3a>
 8019458:	2900      	cmp	r1, #0
 801945a:	f000 80b9 	beq.w	80195d0 <_printf_i+0x19c>
 801945e:	2958      	cmp	r1, #88	; 0x58
 8019460:	f000 8083 	beq.w	801956a <_printf_i+0x136>
 8019464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019468:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801946c:	e032      	b.n	80194d4 <_printf_i+0xa0>
 801946e:	2964      	cmp	r1, #100	; 0x64
 8019470:	d001      	beq.n	8019476 <_printf_i+0x42>
 8019472:	2969      	cmp	r1, #105	; 0x69
 8019474:	d1f6      	bne.n	8019464 <_printf_i+0x30>
 8019476:	6820      	ldr	r0, [r4, #0]
 8019478:	6813      	ldr	r3, [r2, #0]
 801947a:	0605      	lsls	r5, r0, #24
 801947c:	f103 0104 	add.w	r1, r3, #4
 8019480:	d52a      	bpl.n	80194d8 <_printf_i+0xa4>
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	6011      	str	r1, [r2, #0]
 8019486:	2b00      	cmp	r3, #0
 8019488:	da03      	bge.n	8019492 <_printf_i+0x5e>
 801948a:	222d      	movs	r2, #45	; 0x2d
 801948c:	425b      	negs	r3, r3
 801948e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019492:	486f      	ldr	r0, [pc, #444]	; (8019650 <_printf_i+0x21c>)
 8019494:	220a      	movs	r2, #10
 8019496:	e039      	b.n	801950c <_printf_i+0xd8>
 8019498:	2973      	cmp	r1, #115	; 0x73
 801949a:	f000 809d 	beq.w	80195d8 <_printf_i+0x1a4>
 801949e:	d808      	bhi.n	80194b2 <_printf_i+0x7e>
 80194a0:	296f      	cmp	r1, #111	; 0x6f
 80194a2:	d020      	beq.n	80194e6 <_printf_i+0xb2>
 80194a4:	2970      	cmp	r1, #112	; 0x70
 80194a6:	d1dd      	bne.n	8019464 <_printf_i+0x30>
 80194a8:	6823      	ldr	r3, [r4, #0]
 80194aa:	f043 0320 	orr.w	r3, r3, #32
 80194ae:	6023      	str	r3, [r4, #0]
 80194b0:	e003      	b.n	80194ba <_printf_i+0x86>
 80194b2:	2975      	cmp	r1, #117	; 0x75
 80194b4:	d017      	beq.n	80194e6 <_printf_i+0xb2>
 80194b6:	2978      	cmp	r1, #120	; 0x78
 80194b8:	d1d4      	bne.n	8019464 <_printf_i+0x30>
 80194ba:	2378      	movs	r3, #120	; 0x78
 80194bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80194c0:	4864      	ldr	r0, [pc, #400]	; (8019654 <_printf_i+0x220>)
 80194c2:	e055      	b.n	8019570 <_printf_i+0x13c>
 80194c4:	6813      	ldr	r3, [r2, #0]
 80194c6:	1d19      	adds	r1, r3, #4
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	6011      	str	r1, [r2, #0]
 80194cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80194d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80194d4:	2301      	movs	r3, #1
 80194d6:	e08c      	b.n	80195f2 <_printf_i+0x1be>
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	6011      	str	r1, [r2, #0]
 80194dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80194e0:	bf18      	it	ne
 80194e2:	b21b      	sxthne	r3, r3
 80194e4:	e7cf      	b.n	8019486 <_printf_i+0x52>
 80194e6:	6813      	ldr	r3, [r2, #0]
 80194e8:	6825      	ldr	r5, [r4, #0]
 80194ea:	1d18      	adds	r0, r3, #4
 80194ec:	6010      	str	r0, [r2, #0]
 80194ee:	0628      	lsls	r0, r5, #24
 80194f0:	d501      	bpl.n	80194f6 <_printf_i+0xc2>
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	e002      	b.n	80194fc <_printf_i+0xc8>
 80194f6:	0668      	lsls	r0, r5, #25
 80194f8:	d5fb      	bpl.n	80194f2 <_printf_i+0xbe>
 80194fa:	881b      	ldrh	r3, [r3, #0]
 80194fc:	4854      	ldr	r0, [pc, #336]	; (8019650 <_printf_i+0x21c>)
 80194fe:	296f      	cmp	r1, #111	; 0x6f
 8019500:	bf14      	ite	ne
 8019502:	220a      	movne	r2, #10
 8019504:	2208      	moveq	r2, #8
 8019506:	2100      	movs	r1, #0
 8019508:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801950c:	6865      	ldr	r5, [r4, #4]
 801950e:	60a5      	str	r5, [r4, #8]
 8019510:	2d00      	cmp	r5, #0
 8019512:	f2c0 8095 	blt.w	8019640 <_printf_i+0x20c>
 8019516:	6821      	ldr	r1, [r4, #0]
 8019518:	f021 0104 	bic.w	r1, r1, #4
 801951c:	6021      	str	r1, [r4, #0]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d13d      	bne.n	801959e <_printf_i+0x16a>
 8019522:	2d00      	cmp	r5, #0
 8019524:	f040 808e 	bne.w	8019644 <_printf_i+0x210>
 8019528:	4665      	mov	r5, ip
 801952a:	2a08      	cmp	r2, #8
 801952c:	d10b      	bne.n	8019546 <_printf_i+0x112>
 801952e:	6823      	ldr	r3, [r4, #0]
 8019530:	07db      	lsls	r3, r3, #31
 8019532:	d508      	bpl.n	8019546 <_printf_i+0x112>
 8019534:	6923      	ldr	r3, [r4, #16]
 8019536:	6862      	ldr	r2, [r4, #4]
 8019538:	429a      	cmp	r2, r3
 801953a:	bfde      	ittt	le
 801953c:	2330      	movle	r3, #48	; 0x30
 801953e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019542:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019546:	ebac 0305 	sub.w	r3, ip, r5
 801954a:	6123      	str	r3, [r4, #16]
 801954c:	f8cd 8000 	str.w	r8, [sp]
 8019550:	463b      	mov	r3, r7
 8019552:	aa03      	add	r2, sp, #12
 8019554:	4621      	mov	r1, r4
 8019556:	4630      	mov	r0, r6
 8019558:	f7ff fef6 	bl	8019348 <_printf_common>
 801955c:	3001      	adds	r0, #1
 801955e:	d14d      	bne.n	80195fc <_printf_i+0x1c8>
 8019560:	f04f 30ff 	mov.w	r0, #4294967295
 8019564:	b005      	add	sp, #20
 8019566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801956a:	4839      	ldr	r0, [pc, #228]	; (8019650 <_printf_i+0x21c>)
 801956c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019570:	6813      	ldr	r3, [r2, #0]
 8019572:	6821      	ldr	r1, [r4, #0]
 8019574:	1d1d      	adds	r5, r3, #4
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	6015      	str	r5, [r2, #0]
 801957a:	060a      	lsls	r2, r1, #24
 801957c:	d50b      	bpl.n	8019596 <_printf_i+0x162>
 801957e:	07ca      	lsls	r2, r1, #31
 8019580:	bf44      	itt	mi
 8019582:	f041 0120 	orrmi.w	r1, r1, #32
 8019586:	6021      	strmi	r1, [r4, #0]
 8019588:	b91b      	cbnz	r3, 8019592 <_printf_i+0x15e>
 801958a:	6822      	ldr	r2, [r4, #0]
 801958c:	f022 0220 	bic.w	r2, r2, #32
 8019590:	6022      	str	r2, [r4, #0]
 8019592:	2210      	movs	r2, #16
 8019594:	e7b7      	b.n	8019506 <_printf_i+0xd2>
 8019596:	064d      	lsls	r5, r1, #25
 8019598:	bf48      	it	mi
 801959a:	b29b      	uxthmi	r3, r3
 801959c:	e7ef      	b.n	801957e <_printf_i+0x14a>
 801959e:	4665      	mov	r5, ip
 80195a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80195a4:	fb02 3311 	mls	r3, r2, r1, r3
 80195a8:	5cc3      	ldrb	r3, [r0, r3]
 80195aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80195ae:	460b      	mov	r3, r1
 80195b0:	2900      	cmp	r1, #0
 80195b2:	d1f5      	bne.n	80195a0 <_printf_i+0x16c>
 80195b4:	e7b9      	b.n	801952a <_printf_i+0xf6>
 80195b6:	6813      	ldr	r3, [r2, #0]
 80195b8:	6825      	ldr	r5, [r4, #0]
 80195ba:	6961      	ldr	r1, [r4, #20]
 80195bc:	1d18      	adds	r0, r3, #4
 80195be:	6010      	str	r0, [r2, #0]
 80195c0:	0628      	lsls	r0, r5, #24
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	d501      	bpl.n	80195ca <_printf_i+0x196>
 80195c6:	6019      	str	r1, [r3, #0]
 80195c8:	e002      	b.n	80195d0 <_printf_i+0x19c>
 80195ca:	066a      	lsls	r2, r5, #25
 80195cc:	d5fb      	bpl.n	80195c6 <_printf_i+0x192>
 80195ce:	8019      	strh	r1, [r3, #0]
 80195d0:	2300      	movs	r3, #0
 80195d2:	6123      	str	r3, [r4, #16]
 80195d4:	4665      	mov	r5, ip
 80195d6:	e7b9      	b.n	801954c <_printf_i+0x118>
 80195d8:	6813      	ldr	r3, [r2, #0]
 80195da:	1d19      	adds	r1, r3, #4
 80195dc:	6011      	str	r1, [r2, #0]
 80195de:	681d      	ldr	r5, [r3, #0]
 80195e0:	6862      	ldr	r2, [r4, #4]
 80195e2:	2100      	movs	r1, #0
 80195e4:	4628      	mov	r0, r5
 80195e6:	f7e6 fe83 	bl	80002f0 <memchr>
 80195ea:	b108      	cbz	r0, 80195f0 <_printf_i+0x1bc>
 80195ec:	1b40      	subs	r0, r0, r5
 80195ee:	6060      	str	r0, [r4, #4]
 80195f0:	6863      	ldr	r3, [r4, #4]
 80195f2:	6123      	str	r3, [r4, #16]
 80195f4:	2300      	movs	r3, #0
 80195f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80195fa:	e7a7      	b.n	801954c <_printf_i+0x118>
 80195fc:	6923      	ldr	r3, [r4, #16]
 80195fe:	462a      	mov	r2, r5
 8019600:	4639      	mov	r1, r7
 8019602:	4630      	mov	r0, r6
 8019604:	47c0      	blx	r8
 8019606:	3001      	adds	r0, #1
 8019608:	d0aa      	beq.n	8019560 <_printf_i+0x12c>
 801960a:	6823      	ldr	r3, [r4, #0]
 801960c:	079b      	lsls	r3, r3, #30
 801960e:	d413      	bmi.n	8019638 <_printf_i+0x204>
 8019610:	68e0      	ldr	r0, [r4, #12]
 8019612:	9b03      	ldr	r3, [sp, #12]
 8019614:	4298      	cmp	r0, r3
 8019616:	bfb8      	it	lt
 8019618:	4618      	movlt	r0, r3
 801961a:	e7a3      	b.n	8019564 <_printf_i+0x130>
 801961c:	2301      	movs	r3, #1
 801961e:	464a      	mov	r2, r9
 8019620:	4639      	mov	r1, r7
 8019622:	4630      	mov	r0, r6
 8019624:	47c0      	blx	r8
 8019626:	3001      	adds	r0, #1
 8019628:	d09a      	beq.n	8019560 <_printf_i+0x12c>
 801962a:	3501      	adds	r5, #1
 801962c:	68e3      	ldr	r3, [r4, #12]
 801962e:	9a03      	ldr	r2, [sp, #12]
 8019630:	1a9b      	subs	r3, r3, r2
 8019632:	42ab      	cmp	r3, r5
 8019634:	dcf2      	bgt.n	801961c <_printf_i+0x1e8>
 8019636:	e7eb      	b.n	8019610 <_printf_i+0x1dc>
 8019638:	2500      	movs	r5, #0
 801963a:	f104 0919 	add.w	r9, r4, #25
 801963e:	e7f5      	b.n	801962c <_printf_i+0x1f8>
 8019640:	2b00      	cmp	r3, #0
 8019642:	d1ac      	bne.n	801959e <_printf_i+0x16a>
 8019644:	7803      	ldrb	r3, [r0, #0]
 8019646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801964a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801964e:	e76c      	b.n	801952a <_printf_i+0xf6>
 8019650:	0801a189 	.word	0x0801a189
 8019654:	0801a19a 	.word	0x0801a19a

08019658 <__sread>:
 8019658:	b510      	push	{r4, lr}
 801965a:	460c      	mov	r4, r1
 801965c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019660:	f000 f8d4 	bl	801980c <_read_r>
 8019664:	2800      	cmp	r0, #0
 8019666:	bfab      	itete	ge
 8019668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801966a:	89a3      	ldrhlt	r3, [r4, #12]
 801966c:	181b      	addge	r3, r3, r0
 801966e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019672:	bfac      	ite	ge
 8019674:	6563      	strge	r3, [r4, #84]	; 0x54
 8019676:	81a3      	strhlt	r3, [r4, #12]
 8019678:	bd10      	pop	{r4, pc}

0801967a <__swrite>:
 801967a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801967e:	461f      	mov	r7, r3
 8019680:	898b      	ldrh	r3, [r1, #12]
 8019682:	05db      	lsls	r3, r3, #23
 8019684:	4605      	mov	r5, r0
 8019686:	460c      	mov	r4, r1
 8019688:	4616      	mov	r6, r2
 801968a:	d505      	bpl.n	8019698 <__swrite+0x1e>
 801968c:	2302      	movs	r3, #2
 801968e:	2200      	movs	r2, #0
 8019690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019694:	f000 f868 	bl	8019768 <_lseek_r>
 8019698:	89a3      	ldrh	r3, [r4, #12]
 801969a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801969e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80196a2:	81a3      	strh	r3, [r4, #12]
 80196a4:	4632      	mov	r2, r6
 80196a6:	463b      	mov	r3, r7
 80196a8:	4628      	mov	r0, r5
 80196aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196ae:	f000 b817 	b.w	80196e0 <_write_r>

080196b2 <__sseek>:
 80196b2:	b510      	push	{r4, lr}
 80196b4:	460c      	mov	r4, r1
 80196b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196ba:	f000 f855 	bl	8019768 <_lseek_r>
 80196be:	1c43      	adds	r3, r0, #1
 80196c0:	89a3      	ldrh	r3, [r4, #12]
 80196c2:	bf15      	itete	ne
 80196c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80196c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80196ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80196ce:	81a3      	strheq	r3, [r4, #12]
 80196d0:	bf18      	it	ne
 80196d2:	81a3      	strhne	r3, [r4, #12]
 80196d4:	bd10      	pop	{r4, pc}

080196d6 <__sclose>:
 80196d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196da:	f000 b813 	b.w	8019704 <_close_r>
	...

080196e0 <_write_r>:
 80196e0:	b538      	push	{r3, r4, r5, lr}
 80196e2:	4c07      	ldr	r4, [pc, #28]	; (8019700 <_write_r+0x20>)
 80196e4:	4605      	mov	r5, r0
 80196e6:	4608      	mov	r0, r1
 80196e8:	4611      	mov	r1, r2
 80196ea:	2200      	movs	r2, #0
 80196ec:	6022      	str	r2, [r4, #0]
 80196ee:	461a      	mov	r2, r3
 80196f0:	f7e9 fb4f 	bl	8002d92 <_write>
 80196f4:	1c43      	adds	r3, r0, #1
 80196f6:	d102      	bne.n	80196fe <_write_r+0x1e>
 80196f8:	6823      	ldr	r3, [r4, #0]
 80196fa:	b103      	cbz	r3, 80196fe <_write_r+0x1e>
 80196fc:	602b      	str	r3, [r5, #0]
 80196fe:	bd38      	pop	{r3, r4, r5, pc}
 8019700:	24002484 	.word	0x24002484

08019704 <_close_r>:
 8019704:	b538      	push	{r3, r4, r5, lr}
 8019706:	4c06      	ldr	r4, [pc, #24]	; (8019720 <_close_r+0x1c>)
 8019708:	2300      	movs	r3, #0
 801970a:	4605      	mov	r5, r0
 801970c:	4608      	mov	r0, r1
 801970e:	6023      	str	r3, [r4, #0]
 8019710:	f7e9 fe4f 	bl	80033b2 <_close>
 8019714:	1c43      	adds	r3, r0, #1
 8019716:	d102      	bne.n	801971e <_close_r+0x1a>
 8019718:	6823      	ldr	r3, [r4, #0]
 801971a:	b103      	cbz	r3, 801971e <_close_r+0x1a>
 801971c:	602b      	str	r3, [r5, #0]
 801971e:	bd38      	pop	{r3, r4, r5, pc}
 8019720:	24002484 	.word	0x24002484

08019724 <_fstat_r>:
 8019724:	b538      	push	{r3, r4, r5, lr}
 8019726:	4c07      	ldr	r4, [pc, #28]	; (8019744 <_fstat_r+0x20>)
 8019728:	2300      	movs	r3, #0
 801972a:	4605      	mov	r5, r0
 801972c:	4608      	mov	r0, r1
 801972e:	4611      	mov	r1, r2
 8019730:	6023      	str	r3, [r4, #0]
 8019732:	f7e9 fe4a 	bl	80033ca <_fstat>
 8019736:	1c43      	adds	r3, r0, #1
 8019738:	d102      	bne.n	8019740 <_fstat_r+0x1c>
 801973a:	6823      	ldr	r3, [r4, #0]
 801973c:	b103      	cbz	r3, 8019740 <_fstat_r+0x1c>
 801973e:	602b      	str	r3, [r5, #0]
 8019740:	bd38      	pop	{r3, r4, r5, pc}
 8019742:	bf00      	nop
 8019744:	24002484 	.word	0x24002484

08019748 <_isatty_r>:
 8019748:	b538      	push	{r3, r4, r5, lr}
 801974a:	4c06      	ldr	r4, [pc, #24]	; (8019764 <_isatty_r+0x1c>)
 801974c:	2300      	movs	r3, #0
 801974e:	4605      	mov	r5, r0
 8019750:	4608      	mov	r0, r1
 8019752:	6023      	str	r3, [r4, #0]
 8019754:	f7e9 fe49 	bl	80033ea <_isatty>
 8019758:	1c43      	adds	r3, r0, #1
 801975a:	d102      	bne.n	8019762 <_isatty_r+0x1a>
 801975c:	6823      	ldr	r3, [r4, #0]
 801975e:	b103      	cbz	r3, 8019762 <_isatty_r+0x1a>
 8019760:	602b      	str	r3, [r5, #0]
 8019762:	bd38      	pop	{r3, r4, r5, pc}
 8019764:	24002484 	.word	0x24002484

08019768 <_lseek_r>:
 8019768:	b538      	push	{r3, r4, r5, lr}
 801976a:	4c07      	ldr	r4, [pc, #28]	; (8019788 <_lseek_r+0x20>)
 801976c:	4605      	mov	r5, r0
 801976e:	4608      	mov	r0, r1
 8019770:	4611      	mov	r1, r2
 8019772:	2200      	movs	r2, #0
 8019774:	6022      	str	r2, [r4, #0]
 8019776:	461a      	mov	r2, r3
 8019778:	f7e9 fe42 	bl	8003400 <_lseek>
 801977c:	1c43      	adds	r3, r0, #1
 801977e:	d102      	bne.n	8019786 <_lseek_r+0x1e>
 8019780:	6823      	ldr	r3, [r4, #0]
 8019782:	b103      	cbz	r3, 8019786 <_lseek_r+0x1e>
 8019784:	602b      	str	r3, [r5, #0]
 8019786:	bd38      	pop	{r3, r4, r5, pc}
 8019788:	24002484 	.word	0x24002484

0801978c <memmove>:
 801978c:	4288      	cmp	r0, r1
 801978e:	b510      	push	{r4, lr}
 8019790:	eb01 0302 	add.w	r3, r1, r2
 8019794:	d807      	bhi.n	80197a6 <memmove+0x1a>
 8019796:	1e42      	subs	r2, r0, #1
 8019798:	4299      	cmp	r1, r3
 801979a:	d00a      	beq.n	80197b2 <memmove+0x26>
 801979c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80197a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80197a4:	e7f8      	b.n	8019798 <memmove+0xc>
 80197a6:	4283      	cmp	r3, r0
 80197a8:	d9f5      	bls.n	8019796 <memmove+0xa>
 80197aa:	1881      	adds	r1, r0, r2
 80197ac:	1ad2      	subs	r2, r2, r3
 80197ae:	42d3      	cmn	r3, r2
 80197b0:	d100      	bne.n	80197b4 <memmove+0x28>
 80197b2:	bd10      	pop	{r4, pc}
 80197b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80197b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80197bc:	e7f7      	b.n	80197ae <memmove+0x22>

080197be <_realloc_r>:
 80197be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197c0:	4607      	mov	r7, r0
 80197c2:	4614      	mov	r4, r2
 80197c4:	460e      	mov	r6, r1
 80197c6:	b921      	cbnz	r1, 80197d2 <_realloc_r+0x14>
 80197c8:	4611      	mov	r1, r2
 80197ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80197ce:	f7fe bf4f 	b.w	8018670 <_malloc_r>
 80197d2:	b922      	cbnz	r2, 80197de <_realloc_r+0x20>
 80197d4:	f7fe fefe 	bl	80185d4 <_free_r>
 80197d8:	4625      	mov	r5, r4
 80197da:	4628      	mov	r0, r5
 80197dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197de:	f000 f827 	bl	8019830 <_malloc_usable_size_r>
 80197e2:	42a0      	cmp	r0, r4
 80197e4:	d20f      	bcs.n	8019806 <_realloc_r+0x48>
 80197e6:	4621      	mov	r1, r4
 80197e8:	4638      	mov	r0, r7
 80197ea:	f7fe ff41 	bl	8018670 <_malloc_r>
 80197ee:	4605      	mov	r5, r0
 80197f0:	2800      	cmp	r0, #0
 80197f2:	d0f2      	beq.n	80197da <_realloc_r+0x1c>
 80197f4:	4631      	mov	r1, r6
 80197f6:	4622      	mov	r2, r4
 80197f8:	f7fe fed8 	bl	80185ac <memcpy>
 80197fc:	4631      	mov	r1, r6
 80197fe:	4638      	mov	r0, r7
 8019800:	f7fe fee8 	bl	80185d4 <_free_r>
 8019804:	e7e9      	b.n	80197da <_realloc_r+0x1c>
 8019806:	4635      	mov	r5, r6
 8019808:	e7e7      	b.n	80197da <_realloc_r+0x1c>
	...

0801980c <_read_r>:
 801980c:	b538      	push	{r3, r4, r5, lr}
 801980e:	4c07      	ldr	r4, [pc, #28]	; (801982c <_read_r+0x20>)
 8019810:	4605      	mov	r5, r0
 8019812:	4608      	mov	r0, r1
 8019814:	4611      	mov	r1, r2
 8019816:	2200      	movs	r2, #0
 8019818:	6022      	str	r2, [r4, #0]
 801981a:	461a      	mov	r2, r3
 801981c:	f7e9 fdac 	bl	8003378 <_read>
 8019820:	1c43      	adds	r3, r0, #1
 8019822:	d102      	bne.n	801982a <_read_r+0x1e>
 8019824:	6823      	ldr	r3, [r4, #0]
 8019826:	b103      	cbz	r3, 801982a <_read_r+0x1e>
 8019828:	602b      	str	r3, [r5, #0]
 801982a:	bd38      	pop	{r3, r4, r5, pc}
 801982c:	24002484 	.word	0x24002484

08019830 <_malloc_usable_size_r>:
 8019830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019834:	1f18      	subs	r0, r3, #4
 8019836:	2b00      	cmp	r3, #0
 8019838:	bfbc      	itt	lt
 801983a:	580b      	ldrlt	r3, [r1, r0]
 801983c:	18c0      	addlt	r0, r0, r3
 801983e:	4770      	bx	lr

08019840 <_init>:
 8019840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019842:	bf00      	nop
 8019844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019846:	bc08      	pop	{r3}
 8019848:	469e      	mov	lr, r3
 801984a:	4770      	bx	lr

0801984c <_fini>:
 801984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801984e:	bf00      	nop
 8019850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019852:	bc08      	pop	{r3}
 8019854:	469e      	mov	lr, r3
 8019856:	4770      	bx	lr

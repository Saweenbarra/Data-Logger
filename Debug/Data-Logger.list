
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a3ec  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  0801a68c  0801a68c  0002a68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b020  0801b020  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b020  0801b020  0002b020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b028  0801b028  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b028  0801b028  0002b028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b02c  0801b02c  0002b02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  0801b030  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b0  240001e0  0801b20c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24002490  0801b20c  00032490  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a05d  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b2c  00000000  00000000  0007a267  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  000841b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  000862e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002816d  00000000  00000000  000c93d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00178689  00000000  00000000  000f153d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00269bc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f80  00000000  00000000  00269c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a674 	.word	0x0801a674

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0801a674 	.word	0x0801a674

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f006 fb36 	bl	8006d2c <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f006 fba4 	bl	8006e18 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f003 fa3d 	bl	8003b54 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f006 fbec 	bl	8006eb8 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f003 fa35 	bl	8003b54 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f006 fd6c 	bl	80071cc <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f003 fa2b 	bl	8003b54 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f006 fbb7 	bl	8006e72 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b91      	ldr	r3, [pc, #580]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000718:	4a91      	ldr	r2, [pc, #580]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f006 fbf7 	bl	8006f10 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 8114 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
			      {
					uint32_t time = HAL_GetTick();
 800072a:	f003 fefb 	bl	8004524 <HAL_GetTick>
 800072e:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000730:	2101      	movs	r1, #1
 8000732:	488c      	ldr	r0, [pc, #560]	; (8000964 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000734:	f007 fc35 	bl	8007fa2 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000738:	488b      	ldr	r0, [pc, #556]	; (8000968 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800073a:	f018 ff79 	bl	8019630 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073e:	4b88      	ldr	r3, [pc, #544]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d17f      	bne.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						CanFrame.id = RxHeader.Identifier;
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800074c:	6013      	str	r3, [r2, #0]
						switch(RxHeader.DataLength/65536){
 800074e:	4b84      	ldr	r3, [pc, #528]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	3b01      	subs	r3, #1
 8000756:	2b0e      	cmp	r3, #14
 8000758:	d85c      	bhi.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
 800075a:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	0800079d 	.word	0x0800079d
 8000764:	080007a5 	.word	0x080007a5
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007bd 	.word	0x080007bd
 8000774:	080007c5 	.word	0x080007c5
 8000778:	080007cd 	.word	0x080007cd
 800077c:	080007d5 	.word	0x080007d5
 8000780:	080007dd 	.word	0x080007dd
 8000784:	080007e5 	.word	0x080007e5
 8000788:	080007ed 	.word	0x080007ed
 800078c:	080007f5 	.word	0x080007f5
 8000790:	080007fd 	.word	0x080007fd
 8000794:	08000805 	.word	0x08000805
 8000798:	0800080d 	.word	0x0800080d
							case 1:
								CanFrame.length = 1;
 800079c:	4b73      	ldr	r3, [pc, #460]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]
								break;
 80007a2:	e037      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 2:
								CanFrame.length = 2;
 80007a4:	4b71      	ldr	r3, [pc, #452]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	715a      	strb	r2, [r3, #5]
								break;
 80007aa:	e033      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 3:
								CanFrame.length = 3;
 80007ac:	4b6f      	ldr	r3, [pc, #444]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	715a      	strb	r2, [r3, #5]
								break;
 80007b2:	e02f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 4:
								CanFrame.length = 4;
 80007b4:	4b6d      	ldr	r3, [pc, #436]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	715a      	strb	r2, [r3, #5]
								break;
 80007ba:	e02b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 5:
								CanFrame.length = 5;
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007be:	2205      	movs	r2, #5
 80007c0:	715a      	strb	r2, [r3, #5]
								break;
 80007c2:	e027      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 6:
								CanFrame.length = 6;
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007c6:	2206      	movs	r2, #6
 80007c8:	715a      	strb	r2, [r3, #5]
								break;
 80007ca:	e023      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 7:
								CanFrame.length = 7;
 80007cc:	4b67      	ldr	r3, [pc, #412]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	715a      	strb	r2, [r3, #5]
								break;
 80007d2:	e01f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 8:
								CanFrame.length = 8;
 80007d4:	4b65      	ldr	r3, [pc, #404]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	715a      	strb	r2, [r3, #5]
								break;
 80007da:	e01b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 9:
								CanFrame.length = 12;
 80007dc:	4b63      	ldr	r3, [pc, #396]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007de:	220c      	movs	r2, #12
 80007e0:	715a      	strb	r2, [r3, #5]
								break;
 80007e2:	e017      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 10:
								CanFrame.length = 16;
 80007e4:	4b61      	ldr	r3, [pc, #388]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	715a      	strb	r2, [r3, #5]
								break;
 80007ea:	e013      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 11:
								CanFrame.length = 20;
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ee:	2214      	movs	r2, #20
 80007f0:	715a      	strb	r2, [r3, #5]
								break;
 80007f2:	e00f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 12:
								CanFrame.length = 24;
 80007f4:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007f6:	2218      	movs	r2, #24
 80007f8:	715a      	strb	r2, [r3, #5]
								break;
 80007fa:	e00b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 13:
								CanFrame.length = 32;
 80007fc:	4b5b      	ldr	r3, [pc, #364]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007fe:	2220      	movs	r2, #32
 8000800:	715a      	strb	r2, [r3, #5]
								break;
 8000802:	e007      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 14:
								CanFrame.length = 48;
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	715a      	strb	r2, [r3, #5]
								break;
 800080a:	e003      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 15:
								CanFrame.length = 64;
 800080c:	4b57      	ldr	r3, [pc, #348]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	715a      	strb	r2, [r3, #5]
								break;
 8000812:	bf00      	nop
						}
						CanFrame.time = time;
 8000814:	4a55      	ldr	r2, [pc, #340]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <HAL_FDCAN_RxFifo0Callback+0x264>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	461a      	mov	r2, r3
 8000826:	494d      	ldr	r1, [pc, #308]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000828:	4852      	ldr	r0, [pc, #328]	; (8000974 <HAL_FDCAN_RxFifo0Callback+0x268>)
 800082a:	f018 fdd1 	bl	80193d0 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000836:	d103      	bne.n	8000840 <HAL_FDCAN_RxFifo0Callback+0x134>
							CanFrame.extended = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800083a:	2201      	movs	r2, #1
 800083c:	711a      	strb	r2, [r3, #4]
 800083e:	e002      	b.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						}
						else{
							CanFrame.extended = 0;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000842:	2200      	movs	r2, #0
 8000844:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800084e:	f040 8080 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
						CanFDFrame.id = RxHeader.Identifier;
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a48      	ldr	r2, [pc, #288]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000858:	6013      	str	r3, [r2, #0]

						switch(RxHeader.DataLength/65536){
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	3b01      	subs	r3, #1
 8000862:	2b0e      	cmp	r3, #14
 8000864:	d85c      	bhi.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_FDCAN_RxFifo0Callback+0x160>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008a9 	.word	0x080008a9
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008b9 	.word	0x080008b9
 8000878:	080008c1 	.word	0x080008c1
 800087c:	080008c9 	.word	0x080008c9
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008d9 	.word	0x080008d9
 8000888:	080008e1 	.word	0x080008e1
 800088c:	080008e9 	.word	0x080008e9
 8000890:	080008f1 	.word	0x080008f1
 8000894:	080008f9 	.word	0x080008f9
 8000898:	08000901 	.word	0x08000901
 800089c:	08000909 	.word	0x08000909
 80008a0:	08000911 	.word	0x08000911
 80008a4:	08000919 	.word	0x08000919
							case 1:
								CanFDFrame.length = 1;
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	609a      	str	r2, [r3, #8]
								break;
 80008ae:	e037      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 2:
								CanFDFrame.length = 2;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	609a      	str	r2, [r3, #8]
								break;
 80008b6:	e033      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 3:
								CanFDFrame.length = 3;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	609a      	str	r2, [r3, #8]
								break;
 80008be:	e02f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 4:
								CanFDFrame.length = 4;
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	609a      	str	r2, [r3, #8]
								break;
 80008c6:	e02b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 5:
								CanFDFrame.length = 5;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	609a      	str	r2, [r3, #8]
								break;
 80008ce:	e027      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 6:
								CanFDFrame.length = 6;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	609a      	str	r2, [r3, #8]
								break;
 80008d6:	e023      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 7:
								CanFDFrame.length = 7;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008da:	2207      	movs	r2, #7
 80008dc:	609a      	str	r2, [r3, #8]
								break;
 80008de:	e01f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 8:
								CanFDFrame.length = 8;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	609a      	str	r2, [r3, #8]
								break;
 80008e6:	e01b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 9:
								CanFDFrame.length = 12;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	609a      	str	r2, [r3, #8]
								break;
 80008ee:	e017      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 10:
								CanFDFrame.length = 16;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008f2:	2210      	movs	r2, #16
 80008f4:	609a      	str	r2, [r3, #8]
								break;
 80008f6:	e013      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 11:
								CanFDFrame.length = 20;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008fa:	2214      	movs	r2, #20
 80008fc:	609a      	str	r2, [r3, #8]
								break;
 80008fe:	e00f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 12:
								CanFDFrame.length = 24;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000902:	2218      	movs	r2, #24
 8000904:	609a      	str	r2, [r3, #8]
								break;
 8000906:	e00b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 13:
								CanFDFrame.length = 32;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800090a:	2220      	movs	r2, #32
 800090c:	609a      	str	r2, [r3, #8]
								break;
 800090e:	e007      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 14:
								CanFDFrame.length = 48;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	609a      	str	r2, [r3, #8]
								break;
 8000916:	e003      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 15:
								CanFDFrame.length = 64;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	609a      	str	r2, [r3, #8]
								break;
 800091e:	bf00      	nop
						}

						CanFDFrame.time = time;
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_FDCAN_RxFifo0Callback+0x270>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	461a      	mov	r2, r3
 8000932:	490a      	ldr	r1, [pc, #40]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000936:	f018 fd4b 	bl	80193d0 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000942:	d103      	bne.n	800094c <HAL_FDCAN_RxFifo0Callback+0x240>
							CanFDFrame.extended = 1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000946:	2201      	movs	r2, #1
 8000948:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 800094a:	e002      	b.n	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
							CanFDFrame.extended = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800094e:	2200      	movs	r2, #0
 8000950:	711a      	strb	r2, [r3, #4]
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24001000 	.word	0x24001000
 8000960:	24001090 	.word	0x24001090
 8000964:	58020400 	.word	0x58020400
 8000968:	0801a68c 	.word	0x0801a68c
 800096c:	240010b8 	.word	0x240010b8
 8000970:	24000200 	.word	0x24000200
 8000974:	240010c8 	.word	0x240010c8
 8000978:	24001040 	.word	0x24001040
 800097c:	240001fc 	.word	0x240001fc
 8000980:	24001050 	.word	0x24001050

08000984 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	; 0x78
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	f7ff fca5 	bl	80002e0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	2b03      	cmp	r3, #3
 800099a:	d001      	beq.n	80009a0 <gps_msg_config+0x1c>
 800099c:	2301      	movs	r3, #1
 800099e:	e052      	b.n	8000a46 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80009a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <gps_msg_config+0xcc>)
 80009ac:	211f      	movs	r1, #31
 80009ae:	f018 fe57 	bl	8019660 <sniprintf>

	int checksum_int = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80009ba:	e00b      	b.n	80009d4 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80009bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ca:	4053      	eors	r3, r2
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d0:	3301      	adds	r3, #1
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80009d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <gps_msg_config+0x64>
 80009e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	dde9      	ble.n	80009bc <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80009e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80009ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <gps_msg_config+0xd0>)
 80009f0:	2107      	movs	r1, #7
 80009f2:	f018 fe35 	bl	8019660 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80009f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009fa:	f107 0014 	add.w	r0, r7, #20
 80009fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4613      	mov	r3, r2
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <gps_msg_config+0xd4>)
 8000a08:	2129      	movs	r1, #41	; 0x29
 8000a0a:	f018 fe29 	bl	8019660 <sniprintf>
	printf("\n\rSending: ");
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <gps_msg_config+0xd8>)
 8000a10:	f018 fd9a 	bl	8019548 <iprintf>
	printf("%s", messagetosend);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <gps_msg_config+0xdc>)
 8000a1c:	f018 fd94 	bl	8019548 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc5b 	bl	80002e0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f107 0114 	add.w	r1, r7, #20
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f00f f85c 	bl	800faf2 <HAL_UART_Transmit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <gps_msg_config+0xc0>
		Error_Handler();
 8000a40:	f003 f888 	bl	8003b54 <Error_Handler>
	}
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	0801a6a0 	.word	0x0801a6a0
 8000a54:	0801a6b8 	.word	0x0801a6b8
 8000a58:	0801a6c0 	.word	0x0801a6c0
 8000a5c:	0801a6c8 	.word	0x0801a6c8
 8000a60:	0801a6d4 	.word	0x0801a6d4

08000a64 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4603      	mov	r3, r0
 8000a74:	817b      	strh	r3, [r7, #10]
 8000a76:	460b      	mov	r3, r1
 8000a78:	813b      	strh	r3, [r7, #8]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000a82:	23b5      	movs	r3, #181	; 0xb5
 8000a84:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000a86:	2362      	movs	r3, #98	; 0x62
 8000a88:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000a92:	8bfb      	ldrh	r3, [r7, #30]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000aa6:	893b      	ldrh	r3, [r7, #8]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	e013      	b.n	8000af4 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ada:	4413      	add	r3, r2
 8000adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ae8:	4413      	add	r3, r2
 8000aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	3301      	adds	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b0b      	cmp	r3, #11
 8000af8:	dde8      	ble.n	8000acc <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000afe:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b04:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000b06:	f107 0110 	add.w	r1, r7, #16
 8000b0a:	2364      	movs	r3, #100	; 0x64
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f00e ffef 	bl	800faf2 <HAL_UART_Transmit>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <gps_rate_config+0xbe>
				Error_Handler();
 8000b1a:	f003 f81b 	bl	8003b54 <Error_Handler>
				return 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <gps_rate_config+0xc0>
			}
		return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	24000204 	.word	0x24000204

08000b4c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <NRF24_DelayMicroSeconds+0x38>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <NRF24_DelayMicroSeconds+0x3c>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9a      	lsrs	r2, r3, #18
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000b6c:	bf00      	nop
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	60fa      	str	r2, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1fa      	bne.n	8000b6e <NRF24_DelayMicroSeconds+0x22>
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	24000010 	.word	0x24000010
 8000b88:	165e9f81 	.word	0x165e9f81

08000b8c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <NRF24_csn+0x20>
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <NRF24_csn+0x38>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <NRF24_csn+0x3c>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f007 f9e3 	bl	8007f70 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000baa:	e007      	b.n	8000bbc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <NRF24_csn+0x38>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <NRF24_csn+0x3c>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f007 f9da 	bl	8007f70 <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000210 	.word	0x24000210
 8000bc8:	24000214 	.word	0x24000214

08000bcc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <NRF24_ce+0x20>
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <NRF24_ce+0x38>)
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <NRF24_ce+0x3c>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	f007 f9c3 	bl	8007f70 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000bea:	e007      	b.n	8000bfc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <NRF24_ce+0x38>)
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <NRF24_ce+0x3c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f007 f9ba 	bl	8007f70 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	24000210 	.word	0x24000210
 8000c08:	24000216 	.word	0x24000216

08000c0c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff ffb8 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 031f 	and.w	r3, r3, #31
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c26:	f107 010c 	add.w	r1, r7, #12
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c30:	f00d ff56 	bl	800eae0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	1c59      	adds	r1, r3, #1
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c40:	f00e f940 	bl	800eec4 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ff9f 	bl	8000b8c <NRF24_csn>
	return retData;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000218 	.word	0x24000218

08000c5c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ff8d 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 031f 	and.w	r3, r3, #31
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c7c:	f107 010c 	add.w	r1, r7, #12
 8000c80:	2364      	movs	r3, #100	; 0x64
 8000c82:	2201      	movs	r2, #1
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c86:	f00d ff2b 	bl	800eae0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	2364      	movs	r3, #100	; 0x64
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c94:	f00e f916 	bl	800eec4 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff77 	bl	8000b8c <NRF24_csn>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	24000218 	.word	0x24000218

08000cac <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff65 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000cd0:	f107 010c 	add.w	r1, r7, #12
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <NRF24_write_register+0x40>)
 8000cda:	f00d ff01 	bl	800eae0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff ff54 	bl	8000b8c <NRF24_csn>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000218 	.word	0x24000218

08000cf0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff43 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f043 0320 	orr.w	r3, r3, #32
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000d10:	f107 010c 	add.w	r1, r7, #12
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	2201      	movs	r2, #1
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d1a:	f00d fee1 	bl	800eae0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	2364      	movs	r3, #100	; 0x64
 8000d24:	6839      	ldr	r1, [r7, #0]
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d28:	f00d feda 	bl	800eae0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff ff2d 	bl	8000b8c <NRF24_csn>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000218 	.word	0x24000218

08000d40 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff1d 	bl	8000b8c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000d52:	23a0      	movs	r3, #160	; 0xa0
 8000d54:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000d56:	f107 010f 	add.w	r1, r7, #15
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d60:	f00d febe 	bl	800eae0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	2364      	movs	r3, #100	; 0x64
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d6e:	f00d feb7 	bl	800eae0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff0a 	bl	8000b8c <NRF24_csn>
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	24000218 	.word	0x24000218

08000d84 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000d88:	21ff      	movs	r1, #255	; 0xff
 8000d8a:	20e1      	movs	r0, #225	; 0xe1
 8000d8c:	f7ff ff8e 	bl	8000cac <NRF24_write_register>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000d98:	21ff      	movs	r1, #255	; 0xff
 8000d9a:	20e2      	movs	r0, #226	; 0xe2
 8000d9c:	f7ff ff86 	bl	8000cac <NRF24_write_register>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f7ff ff2e 	bl	8000c0c <NRF24_read_register>
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000dd4:	4b66      	ldr	r3, [pc, #408]	; (8000f70 <NRF24_begin+0x1b0>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2288      	movs	r2, #136	; 0x88
 8000dde:	4619      	mov	r1, r3
 8000de0:	f018 faf6 	bl	80193d0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000de4:	4a63      	ldr	r2, [pc, #396]	; (8000f74 <NRF24_begin+0x1b4>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000dea:	4a63      	ldr	r2, [pc, #396]	; (8000f78 <NRF24_begin+0x1b8>)
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000df0:	4a62      	ldr	r2, [pc, #392]	; (8000f7c <NRF24_begin+0x1bc>)
 8000df2:	883b      	ldrh	r3, [r7, #0]
 8000df4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fec8 	bl	8000b8c <NRF24_csn>
	NRF24_ce(0);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fee5 	bl	8000bcc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000e02:	2005      	movs	r0, #5
 8000e04:	f003 fb9a 	bl	800453c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000e08:	2108      	movs	r1, #8
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ff4e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000e10:	213f      	movs	r1, #63	; 0x3f
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff4a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000e18:	2103      	movs	r1, #3
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f7ff ff46 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000e20:	2103      	movs	r1, #3
 8000e22:	2003      	movs	r0, #3
 8000e24:	f7ff ff42 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000e28:	2103      	movs	r1, #3
 8000e2a:	2004      	movs	r0, #4
 8000e2c:	f7ff ff3e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000e30:	2102      	movs	r1, #2
 8000e32:	2005      	movs	r0, #5
 8000e34:	f7ff ff3a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000e38:	210f      	movs	r1, #15
 8000e3a:	2006      	movs	r0, #6
 8000e3c:	f7ff ff36 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000e40:	210e      	movs	r1, #14
 8000e42:	2007      	movs	r0, #7
 8000e44:	f7ff ff32 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2008      	movs	r0, #8
 8000e4c:	f7ff ff2e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000e50:	2100      	movs	r1, #0
 8000e52:	2009      	movs	r0, #9
 8000e54:	f7ff ff2a 	bl	8000cac <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000e58:	23e7      	movs	r3, #231	; 0xe7
 8000e5a:	733b      	strb	r3, [r7, #12]
 8000e5c:	23e7      	movs	r3, #231	; 0xe7
 8000e5e:	72fb      	strb	r3, [r7, #11]
 8000e60:	23e7      	movs	r3, #231	; 0xe7
 8000e62:	72bb      	strb	r3, [r7, #10]
 8000e64:	23e7      	movs	r3, #231	; 0xe7
 8000e66:	727b      	strb	r3, [r7, #9]
 8000e68:	23e7      	movs	r3, #231	; 0xe7
 8000e6a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2205      	movs	r2, #5
 8000e72:	4619      	mov	r1, r3
 8000e74:	200a      	movs	r0, #10
 8000e76:	f7ff ff3b 	bl	8000cf0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000e7a:	23c2      	movs	r3, #194	; 0xc2
 8000e7c:	733b      	strb	r3, [r7, #12]
 8000e7e:	23c2      	movs	r3, #194	; 0xc2
 8000e80:	72fb      	strb	r3, [r7, #11]
 8000e82:	23c2      	movs	r3, #194	; 0xc2
 8000e84:	72bb      	strb	r3, [r7, #10]
 8000e86:	23c2      	movs	r3, #194	; 0xc2
 8000e88:	727b      	strb	r3, [r7, #9]
 8000e8a:	23c2      	movs	r3, #194	; 0xc2
 8000e8c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	2205      	movs	r2, #5
 8000e94:	4619      	mov	r1, r3
 8000e96:	200b      	movs	r0, #11
 8000e98:	f7ff ff2a 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000e9c:	21c3      	movs	r1, #195	; 0xc3
 8000e9e:	200c      	movs	r0, #12
 8000ea0:	f7ff ff04 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000ea4:	21c4      	movs	r1, #196	; 0xc4
 8000ea6:	200d      	movs	r0, #13
 8000ea8:	f7ff ff00 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000eac:	21c5      	movs	r1, #197	; 0xc5
 8000eae:	200e      	movs	r0, #14
 8000eb0:	f7ff fefc 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000eb4:	21c6      	movs	r1, #198	; 0xc6
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f7ff fef8 	bl	8000cac <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000ebc:	23e7      	movs	r3, #231	; 0xe7
 8000ebe:	733b      	strb	r3, [r7, #12]
 8000ec0:	23e7      	movs	r3, #231	; 0xe7
 8000ec2:	72fb      	strb	r3, [r7, #11]
 8000ec4:	23e7      	movs	r3, #231	; 0xe7
 8000ec6:	72bb      	strb	r3, [r7, #10]
 8000ec8:	23e7      	movs	r3, #231	; 0xe7
 8000eca:	727b      	strb	r3, [r7, #9]
 8000ecc:	23e7      	movs	r3, #231	; 0xe7
 8000ece:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f7ff ff09 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2011      	movs	r0, #17
 8000ee2:	f7ff fee3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2012      	movs	r0, #18
 8000eea:	f7ff fedf 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2013      	movs	r0, #19
 8000ef2:	f7ff fedb 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f7ff fed7 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2015      	movs	r0, #21
 8000f02:	f7ff fed3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000f06:	2100      	movs	r1, #0
 8000f08:	2016      	movs	r0, #22
 8000f0a:	f7ff fecf 	bl	8000cac <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000f0e:	f000 fa89 	bl	8001424 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000f12:	2100      	movs	r1, #0
 8000f14:	201c      	movs	r0, #28
 8000f16:	f7ff fec9 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f7ff fec5 	bl	8000cac <NRF24_write_register>
	printRadioSettings();
 8000f22:	f000 fa99 	bl	8001458 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000f26:	210f      	movs	r1, #15
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f000 f8ad 	bl	8001088 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 f927 	bl	8001182 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 f95d 	bl	80011f4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f000 f9a0 	bl	8001280 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000f40:	f000 f8f2 	bl	8001128 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000f44:	2020      	movs	r0, #32
 8000f46:	f000 f8cf 	bl	80010e8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000f4a:	f000 fa62 	bl	8001412 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000f4e:	204c      	movs	r0, #76	; 0x4c
 8000f50:	f000 f8b5 	bl	80010be <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000f54:	f7ff ff16 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f58:	f7ff ff1c 	bl	8000d94 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000f5c:	f000 f9b8 	bl	80012d0 <NRF24_powerDown>
	
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6a:	b002      	add	sp, #8
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	24000218 	.word	0x24000218
 8000f74:	24000210 	.word	0x24000210
 8000f78:	24000214 	.word	0x24000214
 8000f7c:	24000216 	.word	0x24000216

08000f80 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe21 	bl	8000bcc <NRF24_ce>
	NRF24_flush_tx();
 8000f8a:	f7ff fefb 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f8e:	f7ff ff01 	bl	8000d94 <NRF24_flush_rx>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000fa4:	f000 fa35 	bl	8001412 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f9ce 	bl	800134e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000fb2:	f003 fab7 	bl	8004524 <HAL_GetTick>
 8000fb6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000fb8:	230a      	movs	r3, #10
 8000fba:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000fbc:	f107 030d 	add.w	r3, r7, #13
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2008      	movs	r0, #8
 8000fc6:	f7ff fe49 	bl	8000c5c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000fca:	f7ff feeb 	bl	8000da4 <NRF24_get_status>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d107      	bne.n	8000fec <NRF24_write+0x54>
 8000fdc:	f003 faa2 	bl	8004524 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8e7      	bhi.n	8000fbc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000fec:	f107 010b 	add.w	r1, r7, #11
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <NRF24_write+0x90>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f9d8 	bl	80013ac <NRF24_whatHappened>
	retStatus = tx_ok;
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <NRF24_write+0x90>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001008:	f000 f886 	bl	8001118 <NRF24_getDynamicPayloadSize>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <NRF24_write+0x94>)
 8001012:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8001014:	f000 f80c 	bl	8001030 <NRF24_available>
	NRF24_flush_tx();
 8001018:	f7ff feb4 	bl	8000d84 <NRF24_flush_tx>
	return retStatus;
 800101c:	7bbb      	ldrb	r3, [r7, #14]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000208 	.word	0x24000208
 800102c:	24000209 	.word	0x24000209

08001030 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f95a 	bl	80012ee <NRF24_availablePipe>
 800103a:	4603      	mov	r3, r0
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}

08001040 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800104a:	463b      	mov	r3, r7
 800104c:	2205      	movs	r2, #5
 800104e:	4619      	mov	r1, r3
 8001050:	200a      	movs	r0, #10
 8001052:	f7ff fe4d 	bl	8000cf0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001056:	463b      	mov	r3, r7
 8001058:	2205      	movs	r2, #5
 800105a:	4619      	mov	r1, r3
 800105c:	2010      	movs	r0, #16
 800105e:	f7ff fe47 	bl	8000cf0 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8001062:	2320      	movs	r3, #32
 8001064:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <NRF24_openWritingPipe+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4293      	cmp	r3, r2
 800106e:	bf28      	it	cs
 8001070:	4613      	movcs	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	2011      	movs	r0, #17
 8001078:	f7ff fe18 	bl	8000cac <NRF24_write_register>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2400020a 	.word	0x2400020a

08001088 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	b25a      	sxtb	r2, r3
 800109e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	2004      	movs	r0, #4
 80010b2:	f7ff fdfb 	bl	8000cac <NRF24_write_register>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80010c8:	237f      	movs	r3, #127	; 0x7f
 80010ca:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	4293      	cmp	r3, r2
 80010d2:	bf28      	it	cs
 80010d4:	4613      	movcs	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	2005      	movs	r0, #5
 80010dc:	f7ff fde6 	bl	8000cac <NRF24_write_register>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80010f2:	2320      	movs	r3, #32
 80010f4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	bf28      	it	cs
 80010fe:	4613      	movcs	r3, r2
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <NRF24_setPayloadSize+0x2c>)
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2400020a 	.word	0x2400020a

08001118 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800111c:	2060      	movs	r0, #96	; 0x60
 800111e:	f7ff fd75 	bl	8000c0c <NRF24_read_register>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}

08001128 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800112c:	201d      	movs	r0, #29
 800112e:	f7ff fd6d 	bl	8000c0c <NRF24_read_register>
 8001132:	4603      	mov	r3, r0
 8001134:	f023 0304 	bic.w	r3, r3, #4
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	201d      	movs	r0, #29
 800113e:	f7ff fdb5 	bl	8000cac <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001142:	2100      	movs	r1, #0
 8001144:	201c      	movs	r0, #28
 8001146:	f7ff fdb1 	bl	8000cac <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800114a:	4b02      	ldr	r3, [pc, #8]	; (8001154 <NRF24_disableDynamicPayloads+0x2c>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2400020b 	.word	0x2400020b

08001158 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001168:	213f      	movs	r1, #63	; 0x3f
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fd9e 	bl	8000cac <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001170:	e003      	b.n	800117a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001172:	2100      	movs	r1, #0
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fd99 	bl	8000cac <NRF24_write_register>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800118c:	2006      	movs	r0, #6
 800118e:	f7ff fd3d 	bl	8000c0c <NRF24_read_register>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f023 0306 	bic.w	r3, r3, #6
 800119c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d104      	bne.n	80011ae <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	f043 0306 	orr.w	r3, r3, #6
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e019      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d104      	bne.n	80011be <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e011      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d104      	bne.n	80011ce <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e009      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d103      	bne.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	f043 0306 	orr.w	r3, r3, #6
 80011e0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	4619      	mov	r1, r3
 80011e6:	2006      	movs	r0, #6
 80011e8:	f7ff fd60 	bl	8000cac <NRF24_write_register>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001202:	2006      	movs	r0, #6
 8001204:	f7ff fd02 	bl	8000c0c <NRF24_read_register>
 8001208:	4603      	mov	r3, r0
 800120a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <NRF24_setDataRate+0x88>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001218:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d107      	bne.n	8001230 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <NRF24_setDataRate+0x88>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	73bb      	strb	r3, [r7, #14]
 800122e:	e00d      	b.n	800124c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d107      	bne.n	8001246 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <NRF24_setDataRate+0x88>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	73bb      	strb	r3, [r7, #14]
 8001244:	e002      	b.n	800124c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <NRF24_setDataRate+0x88>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	4619      	mov	r1, r3
 8001250:	2006      	movs	r0, #6
 8001252:	f7ff fd2b 	bl	8000cac <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001256:	2006      	movs	r0, #6
 8001258:	f7ff fcd8 	bl	8000c0c <NRF24_read_register>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	4293      	cmp	r3, r2
 8001264:	d102      	bne.n	800126c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001266:	2301      	movs	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e002      	b.n	8001272 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <NRF24_setDataRate+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2400020c 	.word	0x2400020c

08001280 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fcbe 	bl	8000c0c <NRF24_read_register>
 8001290:	4603      	mov	r3, r0
 8001292:	f023 030c 	bic.w	r3, r3, #12
 8001296:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00f      	beq.n	80012be <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d104      	bne.n	80012ae <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e007      	b.n	80012be <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fcf2 	bl	8000cac <NRF24_write_register>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fc99 	bl	8000c0c <NRF24_read_register>
 80012da:	4603      	mov	r3, r0
 80012dc:	f023 0302 	bic.w	r3, r3, #2
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fce1 	bl	8000cac <NRF24_write_register>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80012f6:	f7ff fd55 	bl	8000da4 <NRF24_get_status>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf14      	ite	ne
 8001308:	2301      	movne	r3, #1
 800130a:	2300      	moveq	r3, #0
 800130c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d017      	beq.n	8001344 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	2007      	movs	r0, #7
 800132e:	f7ff fcbd 	bl	8000cac <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800133c:	2120      	movs	r1, #32
 800133e:	2007      	movs	r0, #7
 8001340:	f7ff fcb4 	bl	8000cac <NRF24_write_register>
    }
  }
  return result;
 8001344:	7bbb      	ldrb	r3, [r7, #14]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fc36 	bl	8000bcc <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fc53 	bl	8000c0c <NRF24_read_register>
 8001366:	4603      	mov	r3, r0
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4619      	mov	r1, r3
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fc98 	bl	8000cac <NRF24_write_register>
  NRF24_ce(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fc25 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001382:	2096      	movs	r0, #150	; 0x96
 8001384:	f7ff fbe2 	bl	8000b4c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fcd7 	bl	8000d40 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fc1a 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001398:	200f      	movs	r0, #15
 800139a:	f7ff fbd7 	bl	8000b4c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fc14 	bl	8000bcc <NRF24_ce>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80013b8:	f7ff fcf4 	bl	8000da4 <NRF24_get_status>
 80013bc:	4603      	mov	r3, r0
 80013be:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013c6:	2170      	movs	r1, #112	; 0x70
 80013c8:	2007      	movs	r0, #7
 80013ca:	f7ff fc6f 	bl	8000cac <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	701a      	strb	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001416:	2170      	movs	r1, #112	; 0x70
 8001418:	2007      	movs	r0, #7
 800141a:	f7ff fc47 	bl	8000cac <NRF24_write_register>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fbae 	bl	8000b8c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001430:	2350      	movs	r3, #80	; 0x50
 8001432:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001434:	2373      	movs	r3, #115	; 0x73
 8001436:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2202      	movs	r2, #2
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <NRF24_ACTIVATE_cmd+0x30>)
 8001440:	f00d fb4e 	bl	800eae0 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fba1 	bl	8000b8c <NRF24_csn>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24000218 	.word	0x24000218

08001458 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	b0a1      	sub	sp, #132	; 0x84
 800145c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4ab6      	ldr	r2, [pc, #728]	; (800173c <printRadioSettings+0x2e4>)
 8001464:	461c      	mov	r4, r3
 8001466:	4615      	mov	r5, r2
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001474:	682b      	ldr	r3, [r5, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	8022      	strh	r2, [r4, #0]
 800147a:	3402      	adds	r4, #2
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48aa      	ldr	r0, [pc, #680]	; (8001740 <printRadioSettings+0x2e8>)
 8001496:	f00e fb2c 	bl	800faf2 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fbb6 	bl	8000c0c <NRF24_read_register>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80014a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d020      	beq.n	80014f4 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80014b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <printRadioSettings+0x7e>
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4aa0      	ldr	r2, [pc, #640]	; (8001744 <printRadioSettings+0x2ec>)
 80014c4:	461c      	mov	r4, r3
 80014c6:	4615      	mov	r5, r2
 80014c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014d4:	e017      	b.n	8001506 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4a9b      	ldr	r2, [pc, #620]	; (8001748 <printRadioSettings+0x2f0>)
 80014dc:	461c      	mov	r4, r3
 80014de:	4615      	mov	r5, r2
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e8:	c403      	stmia	r4!, {r0, r1}
 80014ea:	8022      	strh	r2, [r4, #0]
 80014ec:	3402      	adds	r4, #2
 80014ee:	0c13      	lsrs	r3, r2, #16
 80014f0:	7023      	strb	r3, [r4, #0]
 80014f2:	e008      	b.n	8001506 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	4a94      	ldr	r2, [pc, #592]	; (800174c <printRadioSettings+0x2f4>)
 80014fa:	461c      	mov	r4, r3
 80014fc:	4615      	mov	r5, r2
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	4889      	ldr	r0, [pc, #548]	; (8001740 <printRadioSettings+0x2e8>)
 800151c:	f00e fae9 	bl	800faf2 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fb73 	bl	8000c0c <NRF24_read_register>
 8001526:	4603      	mov	r3, r0
 8001528:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800152c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001530:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001534:	2b00      	cmp	r3, #0
 8001536:	bfcc      	ite	gt
 8001538:	2301      	movgt	r3, #1
 800153a:	2300      	movle	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001540:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001544:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001548:	2b00      	cmp	r3, #0
 800154a:	bfcc      	ite	gt
 800154c:	2301      	movgt	r3, #1
 800154e:	2300      	movle	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001554:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001558:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800155c:	2b00      	cmp	r3, #0
 800155e:	bfcc      	ite	gt
 8001560:	2301      	movgt	r3, #1
 8001562:	2300      	movle	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001568:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800156c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001570:	2b00      	cmp	r3, #0
 8001572:	bfcc      	ite	gt
 8001574:	2301      	movgt	r3, #1
 8001576:	2300      	movle	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800157c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001580:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001584:	2b00      	cmp	r3, #0
 8001586:	bfcc      	ite	gt
 8001588:	2301      	movgt	r3, #1
 800158a:	2300      	movle	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001590:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001594:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfcc      	ite	gt
 800159c:	2301      	movgt	r3, #1
 800159e:	2300      	movle	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f107 0008 	add.w	r0, r7, #8
 80015a6:	9303      	str	r3, [sp, #12]
 80015a8:	9402      	str	r4, [sp, #8]
 80015aa:	9101      	str	r1, [sp, #4]
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	4633      	mov	r3, r6
 80015b0:	462a      	mov	r2, r5
 80015b2:	4967      	ldr	r1, [pc, #412]	; (8001750 <printRadioSettings+0x2f8>)
 80015b4:	f018 f888 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe8f 	bl	80002e0 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	230a      	movs	r3, #10
 80015cc:	485c      	ldr	r0, [pc, #368]	; (8001740 <printRadioSettings+0x2e8>)
 80015ce:	f00e fa90 	bl	800faf2 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff fb1a 	bl	8000c0c <NRF24_read_register>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bfcc      	ite	gt
 80015ea:	2301      	movgt	r3, #1
 80015ec:	2300      	movle	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015f6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bfcc      	ite	gt
 80015fe:	2301      	movgt	r3, #1
 8001600:	2300      	movle	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001606:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800160a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800160e:	2b00      	cmp	r3, #0
 8001610:	bfcc      	ite	gt
 8001612:	2301      	movgt	r3, #1
 8001614:	2300      	movle	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800161a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001622:	2b00      	cmp	r3, #0
 8001624:	bfcc      	ite	gt
 8001626:	2301      	movgt	r3, #1
 8001628:	2300      	movle	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800162e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001632:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001636:	2b00      	cmp	r3, #0
 8001638:	bfcc      	ite	gt
 800163a:	2301      	movgt	r3, #1
 800163c:	2300      	movle	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001646:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800164a:	2b00      	cmp	r3, #0
 800164c:	bfcc      	ite	gt
 800164e:	2301      	movgt	r3, #1
 8001650:	2300      	movle	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f107 0008 	add.w	r0, r7, #8
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	9402      	str	r4, [sp, #8]
 800165c:	9101      	str	r1, [sp, #4]
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	4633      	mov	r3, r6
 8001662:	462a      	mov	r2, r5
 8001664:	493b      	ldr	r1, [pc, #236]	; (8001754 <printRadioSettings+0x2fc>)
 8001666:	f018 f82f 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fe36 	bl	80002e0 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	f107 0108 	add.w	r1, r7, #8
 800167c:	230a      	movs	r3, #10
 800167e:	4830      	ldr	r0, [pc, #192]	; (8001740 <printRadioSettings+0x2e8>)
 8001680:	f00e fa37 	bl	800faf2 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001684:	2003      	movs	r0, #3
 8001686:	f7ff fac1 	bl	8000c0c <NRF24_read_register>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001694:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001698:	3302      	adds	r3, #2
 800169a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800169e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	492c      	ldr	r1, [pc, #176]	; (8001758 <printRadioSettings+0x300>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f018 f80d 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fe14 	bl	80002e0 <strlen>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f107 0108 	add.w	r1, r7, #8
 80016c0:	230a      	movs	r3, #10
 80016c2:	481f      	ldr	r0, [pc, #124]	; (8001740 <printRadioSettings+0x2e8>)
 80016c4:	f00e fa15 	bl	800faf2 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80016c8:	2005      	movs	r0, #5
 80016ca:	f7ff fa9f 	bl	8000c0c <NRF24_read_register>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80016d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	491e      	ldr	r1, [pc, #120]	; (800175c <printRadioSettings+0x304>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f017 fff0 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fdf7 	bl	80002e0 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f107 0108 	add.w	r1, r7, #8
 80016fa:	230a      	movs	r3, #10
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <printRadioSettings+0x2e8>)
 80016fe:	f00e f9f8 	bl	800faf2 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001702:	2006      	movs	r0, #6
 8001704:	f7ff fa82 	bl	8000c0c <NRF24_read_register>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800170e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d024      	beq.n	8001764 <printRadioSettings+0x30c>
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <printRadioSettings+0x308>)
 8001720:	461c      	mov	r4, r3
 8001722:	4615      	mov	r5, r2
 8001724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001728:	e895 0003 	ldmia.w	r5, {r0, r1}
 800172c:	6020      	str	r0, [r4, #0]
 800172e:	3404      	adds	r4, #4
 8001730:	8021      	strh	r1, [r4, #0]
 8001732:	3402      	adds	r4, #2
 8001734:	0c0b      	lsrs	r3, r1, #16
 8001736:	7023      	strb	r3, [r4, #0]
 8001738:	e023      	b.n	8001782 <printRadioSettings+0x32a>
 800173a:	bf00      	nop
 800173c:	0801a6e0 	.word	0x0801a6e0
 8001740:	240002a0 	.word	0x240002a0
 8001744:	0801a714 	.word	0x0801a714
 8001748:	0801a730 	.word	0x0801a730
 800174c:	0801a74c 	.word	0x0801a74c
 8001750:	0801a760 	.word	0x0801a760
 8001754:	0801a7a4 	.word	0x0801a7a4
 8001758:	0801a7f0 	.word	0x0801a7f0
 800175c:	0801a80c 	.word	0x0801a80c
 8001760:	0801a820 	.word	0x0801a820
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <printRadioSettings+0x3b8>)
 800176a:	461c      	mov	r4, r3
 800176c:	4615      	mov	r5, r2
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001776:	6020      	str	r0, [r4, #0]
 8001778:	3404      	adds	r4, #4
 800177a:	8021      	strh	r1, [r4, #0]
 800177c:	3402      	adds	r4, #2
 800177e:	0c0b      	lsrs	r3, r1, #16
 8001780:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fdaa 	bl	80002e0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	f107 0108 	add.w	r1, r7, #8
 8001794:	230a      	movs	r3, #10
 8001796:	481f      	ldr	r0, [pc, #124]	; (8001814 <printRadioSettings+0x3bc>)
 8001798:	f00e f9ab 	bl	800faf2 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800179c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017a0:	f003 0306 	and.w	r3, r3, #6
 80017a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80017a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80017b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <printRadioSettings+0x376>
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <printRadioSettings+0x3c0>)
 80017c0:	461c      	mov	r4, r3
 80017c2:	4615      	mov	r5, r2
 80017c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	6023      	str	r3, [r4, #0]
 80017cc:	e037      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80017ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d109      	bne.n	80017ea <printRadioSettings+0x392>
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <printRadioSettings+0x3c4>)
 80017dc:	461c      	mov	r4, r3
 80017de:	4615      	mov	r5, r2
 80017e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	6023      	str	r3, [r4, #0]
 80017e8:	e029      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80017ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d118      	bne.n	8001824 <printRadioSettings+0x3cc>
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <printRadioSettings+0x3c8>)
 80017f8:	461c      	mov	r4, r3
 80017fa:	4615      	mov	r5, r2
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	8022      	strh	r2, [r4, #0]
 8001806:	3402      	adds	r4, #2
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	7023      	strb	r3, [r4, #0]
 800180c:	e017      	b.n	800183e <printRadioSettings+0x3e6>
 800180e:	bf00      	nop
 8001810:	0801a838 	.word	0x0801a838
 8001814:	240002a0 	.word	0x240002a0
 8001818:	0801a850 	.word	0x0801a850
 800181c:	0801a864 	.word	0x0801a864
 8001820:	0801a878 	.word	0x0801a878
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001824:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001828:	2b03      	cmp	r3, #3
 800182a:	d108      	bne.n	800183e <printRadioSettings+0x3e6>
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	4ad7      	ldr	r2, [pc, #860]	; (8001b90 <printRadioSettings+0x738>)
 8001832:	461c      	mov	r4, r3
 8001834:	4615      	mov	r5, r2
 8001836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fd4c 	bl	80002e0 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f107 0108 	add.w	r1, r7, #8
 8001850:	230a      	movs	r3, #10
 8001852:	48d0      	ldr	r0, [pc, #832]	; (8001b94 <printRadioSettings+0x73c>)
 8001854:	f00e f94d 	bl	800faf2 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001858:	463b      	mov	r3, r7
 800185a:	2205      	movs	r2, #5
 800185c:	4619      	mov	r1, r3
 800185e:	200a      	movs	r0, #10
 8001860:	f7ff f9fc 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001864:	793b      	ldrb	r3, [r7, #4]
 8001866:	461c      	mov	r4, r3
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	461d      	mov	r5, r3
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	787a      	ldrb	r2, [r7, #1]
 8001870:	7839      	ldrb	r1, [r7, #0]
 8001872:	f107 0008 	add.w	r0, r7, #8
 8001876:	9102      	str	r1, [sp, #8]
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	462b      	mov	r3, r5
 800187e:	4622      	mov	r2, r4
 8001880:	49c5      	ldr	r1, [pc, #788]	; (8001b98 <printRadioSettings+0x740>)
 8001882:	f017 ff21 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fd28 	bl	80002e0 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	f107 0108 	add.w	r1, r7, #8
 8001898:	230a      	movs	r3, #10
 800189a:	48be      	ldr	r0, [pc, #760]	; (8001b94 <printRadioSettings+0x73c>)
 800189c:	f00e f929 	bl	800faf2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80018a0:	463b      	mov	r3, r7
 80018a2:	2205      	movs	r2, #5
 80018a4:	4619      	mov	r1, r3
 80018a6:	200b      	movs	r0, #11
 80018a8:	f7ff f9d8 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018ac:	793b      	ldrb	r3, [r7, #4]
 80018ae:	461c      	mov	r4, r3
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	461d      	mov	r5, r3
 80018b4:	78bb      	ldrb	r3, [r7, #2]
 80018b6:	787a      	ldrb	r2, [r7, #1]
 80018b8:	7839      	ldrb	r1, [r7, #0]
 80018ba:	f107 0008 	add.w	r0, r7, #8
 80018be:	9102      	str	r1, [sp, #8]
 80018c0:	9201      	str	r2, [sp, #4]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	462b      	mov	r3, r5
 80018c6:	4622      	mov	r2, r4
 80018c8:	49b4      	ldr	r1, [pc, #720]	; (8001b9c <printRadioSettings+0x744>)
 80018ca:	f017 fefd 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd04 	bl	80002e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0108 	add.w	r1, r7, #8
 80018e0:	230a      	movs	r3, #10
 80018e2:	48ac      	ldr	r0, [pc, #688]	; (8001b94 <printRadioSettings+0x73c>)
 80018e4:	f00e f905 	bl	800faf2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80018e8:	463b      	mov	r3, r7
 80018ea:	2201      	movs	r2, #1
 80018ec:	4619      	mov	r1, r3
 80018ee:	200c      	movs	r0, #12
 80018f0:	f7ff f9b4 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018f4:	783b      	ldrb	r3, [r7, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	49a8      	ldr	r1, [pc, #672]	; (8001ba0 <printRadioSettings+0x748>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f017 fee2 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fce9 	bl	80002e0 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	230a      	movs	r3, #10
 8001918:	489e      	ldr	r0, [pc, #632]	; (8001b94 <printRadioSettings+0x73c>)
 800191a:	f00e f8ea 	bl	800faf2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800191e:	463b      	mov	r3, r7
 8001920:	2201      	movs	r2, #1
 8001922:	4619      	mov	r1, r3
 8001924:	200d      	movs	r0, #13
 8001926:	f7ff f999 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800192a:	783b      	ldrb	r3, [r7, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	499c      	ldr	r1, [pc, #624]	; (8001ba4 <printRadioSettings+0x74c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f017 fec7 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcce 	bl	80002e0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	f107 0108 	add.w	r1, r7, #8
 800194c:	230a      	movs	r3, #10
 800194e:	4891      	ldr	r0, [pc, #580]	; (8001b94 <printRadioSettings+0x73c>)
 8001950:	f00e f8cf 	bl	800faf2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001954:	463b      	mov	r3, r7
 8001956:	2201      	movs	r2, #1
 8001958:	4619      	mov	r1, r3
 800195a:	200e      	movs	r0, #14
 800195c:	f7ff f97e 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001960:	783b      	ldrb	r3, [r7, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	498f      	ldr	r1, [pc, #572]	; (8001ba8 <printRadioSettings+0x750>)
 800196a:	4618      	mov	r0, r3
 800196c:	f017 feac 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fcb3 	bl	80002e0 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	230a      	movs	r3, #10
 8001984:	4883      	ldr	r0, [pc, #524]	; (8001b94 <printRadioSettings+0x73c>)
 8001986:	f00e f8b4 	bl	800faf2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800198a:	463b      	mov	r3, r7
 800198c:	2201      	movs	r2, #1
 800198e:	4619      	mov	r1, r3
 8001990:	200f      	movs	r0, #15
 8001992:	f7ff f963 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001996:	783b      	ldrb	r3, [r7, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4983      	ldr	r1, [pc, #524]	; (8001bac <printRadioSettings+0x754>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f017 fe91 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fc98 	bl	80002e0 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	230a      	movs	r3, #10
 80019ba:	4876      	ldr	r0, [pc, #472]	; (8001b94 <printRadioSettings+0x73c>)
 80019bc:	f00e f899 	bl	800faf2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80019c0:	463b      	mov	r3, r7
 80019c2:	2205      	movs	r2, #5
 80019c4:	4619      	mov	r1, r3
 80019c6:	2010      	movs	r0, #16
 80019c8:	f7ff f948 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80019cc:	793b      	ldrb	r3, [r7, #4]
 80019ce:	461c      	mov	r4, r3
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	461d      	mov	r5, r3
 80019d4:	78bb      	ldrb	r3, [r7, #2]
 80019d6:	787a      	ldrb	r2, [r7, #1]
 80019d8:	7839      	ldrb	r1, [r7, #0]
 80019da:	f107 0008 	add.w	r0, r7, #8
 80019de:	9102      	str	r1, [sp, #8]
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	462b      	mov	r3, r5
 80019e6:	4622      	mov	r2, r4
 80019e8:	4971      	ldr	r1, [pc, #452]	; (8001bb0 <printRadioSettings+0x758>)
 80019ea:	f017 fe6d 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fc74 	bl	80002e0 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f107 0108 	add.w	r1, r7, #8
 8001a00:	230a      	movs	r3, #10
 8001a02:	4864      	ldr	r0, [pc, #400]	; (8001b94 <printRadioSettings+0x73c>)
 8001a04:	f00e f875 	bl	800faf2 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a08:	2011      	movs	r0, #17
 8001a0a:	f7ff f8ff 	bl	8000c0c <NRF24_read_register>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4964      	ldr	r1, [pc, #400]	; (8001bb4 <printRadioSettings+0x75c>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f017 fe50 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fc57 	bl	80002e0 <strlen>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f107 0108 	add.w	r1, r7, #8
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	4855      	ldr	r0, [pc, #340]	; (8001b94 <printRadioSettings+0x73c>)
 8001a3e:	f00e f858 	bl	800faf2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001a42:	2012      	movs	r0, #18
 8001a44:	f7ff f8e2 	bl	8000c0c <NRF24_read_register>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4957      	ldr	r1, [pc, #348]	; (8001bb8 <printRadioSettings+0x760>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f017 fe33 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fc3a 	bl	80002e0 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f107 0108 	add.w	r1, r7, #8
 8001a74:	230a      	movs	r3, #10
 8001a76:	4847      	ldr	r0, [pc, #284]	; (8001b94 <printRadioSettings+0x73c>)
 8001a78:	f00e f83b 	bl	800faf2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001a7c:	2013      	movs	r0, #19
 8001a7e:	f7ff f8c5 	bl	8000c0c <NRF24_read_register>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4949      	ldr	r1, [pc, #292]	; (8001bbc <printRadioSettings+0x764>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f017 fe16 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fc1d 	bl	80002e0 <strlen>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	f107 0108 	add.w	r1, r7, #8
 8001aae:	230a      	movs	r3, #10
 8001ab0:	4838      	ldr	r0, [pc, #224]	; (8001b94 <printRadioSettings+0x73c>)
 8001ab2:	f00e f81e 	bl	800faf2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001ab6:	2014      	movs	r0, #20
 8001ab8:	f7ff f8a8 	bl	8000c0c <NRF24_read_register>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	493c      	ldr	r1, [pc, #240]	; (8001bc0 <printRadioSettings+0x768>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f017 fdf9 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fc00 	bl	80002e0 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f107 0108 	add.w	r1, r7, #8
 8001ae8:	230a      	movs	r3, #10
 8001aea:	482a      	ldr	r0, [pc, #168]	; (8001b94 <printRadioSettings+0x73c>)
 8001aec:	f00e f801 	bl	800faf2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001af0:	2015      	movs	r0, #21
 8001af2:	f7ff f88b 	bl	8000c0c <NRF24_read_register>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001afc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	492e      	ldr	r1, [pc, #184]	; (8001bc4 <printRadioSettings+0x76c>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f017 fddc 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fbe3 	bl	80002e0 <strlen>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f107 0108 	add.w	r1, r7, #8
 8001b22:	230a      	movs	r3, #10
 8001b24:	481b      	ldr	r0, [pc, #108]	; (8001b94 <printRadioSettings+0x73c>)
 8001b26:	f00d ffe4 	bl	800faf2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001b2a:	2016      	movs	r0, #22
 8001b2c:	f7ff f86e 	bl	8000c0c <NRF24_read_register>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4921      	ldr	r1, [pc, #132]	; (8001bc8 <printRadioSettings+0x770>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f017 fdbf 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fbc6 	bl	80002e0 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f107 0108 	add.w	r1, r7, #8
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <printRadioSettings+0x73c>)
 8001b60:	f00d ffc7 	bl	800faf2 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001b64:	201c      	movs	r0, #28
 8001b66:	f7ff f851 	bl	8000c0c <NRF24_read_register>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b74:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bfcc      	ite	gt
 8001b7c:	2301      	movgt	r3, #1
 8001b7e:	2300      	movle	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	e01e      	b.n	8001bcc <printRadioSettings+0x774>
 8001b8e:	bf00      	nop
 8001b90:	0801a88c 	.word	0x0801a88c
 8001b94:	240002a0 	.word	0x240002a0
 8001b98:	0801a8a0 	.word	0x0801a8a0
 8001b9c:	0801a8d0 	.word	0x0801a8d0
 8001ba0:	0801a900 	.word	0x0801a900
 8001ba4:	0801a928 	.word	0x0801a928
 8001ba8:	0801a950 	.word	0x0801a950
 8001bac:	0801a978 	.word	0x0801a978
 8001bb0:	0801a9a0 	.word	0x0801a9a0
 8001bb4:	0801a9cc 	.word	0x0801a9cc
 8001bb8:	0801a9e8 	.word	0x0801a9e8
 8001bbc:	0801aa04 	.word	0x0801aa04
 8001bc0:	0801aa20 	.word	0x0801aa20
 8001bc4:	0801aa3c 	.word	0x0801aa3c
 8001bc8:	0801aa58 	.word	0x0801aa58
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bfcc      	ite	gt
 8001bd0:	2301      	movgt	r3, #1
 8001bd2:	2300      	movle	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bdc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bfcc      	ite	gt
 8001be4:	2301      	movgt	r3, #1
 8001be6:	2300      	movle	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bf0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bfcc      	ite	gt
 8001bf8:	2301      	movgt	r3, #1
 8001bfa:	2300      	movle	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c04:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bfcc      	ite	gt
 8001c0c:	2301      	movgt	r3, #1
 8001c0e:	2300      	movle	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c18:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bfcc      	ite	gt
 8001c20:	2301      	movgt	r3, #1
 8001c22:	2300      	movle	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f107 0008 	add.w	r0, r7, #8
 8001c2a:	9303      	str	r3, [sp, #12]
 8001c2c:	9402      	str	r4, [sp, #8]
 8001c2e:	9101      	str	r1, [sp, #4]
 8001c30:	9200      	str	r2, [sp, #0]
 8001c32:	4633      	mov	r3, r6
 8001c34:	462a      	mov	r2, r5
 8001c36:	494a      	ldr	r1, [pc, #296]	; (8001d60 <printRadioSettings+0x908>)
 8001c38:	f017 fd46 	bl	80196c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fb4d 	bl	80002e0 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	f107 0108 	add.w	r1, r7, #8
 8001c4e:	230a      	movs	r3, #10
 8001c50:	4844      	ldr	r0, [pc, #272]	; (8001d64 <printRadioSettings+0x90c>)
 8001c52:	f00d ff4e 	bl	800faf2 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001c56:	201d      	movs	r0, #29
 8001c58:	f7fe ffd8 	bl	8000c0c <NRF24_read_register>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001c62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <printRadioSettings+0x830>
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <printRadioSettings+0x910>)
 8001c74:	461c      	mov	r4, r3
 8001c76:	4615      	mov	r5, r2
 8001c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c80:	6020      	str	r0, [r4, #0]
 8001c82:	3404      	adds	r4, #4
 8001c84:	8021      	strh	r1, [r4, #0]
 8001c86:	e00e      	b.n	8001ca6 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <printRadioSettings+0x914>)
 8001c8e:	461c      	mov	r4, r3
 8001c90:	4615      	mov	r5, r2
 8001c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c9a:	6020      	str	r0, [r4, #0]
 8001c9c:	3404      	adds	r4, #4
 8001c9e:	8021      	strh	r1, [r4, #0]
 8001ca0:	3402      	adds	r4, #2
 8001ca2:	0c0b      	lsrs	r3, r1, #16
 8001ca4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fb18 	bl	80002e0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f107 0108 	add.w	r1, r7, #8
 8001cb8:	230a      	movs	r3, #10
 8001cba:	482a      	ldr	r0, [pc, #168]	; (8001d64 <printRadioSettings+0x90c>)
 8001cbc:	f00d ff19 	bl	800faf2 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001cc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <printRadioSettings+0x88c>
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <printRadioSettings+0x918>)
 8001cd2:	461c      	mov	r4, r3
 8001cd4:	4615      	mov	r5, r2
 8001cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cde:	c403      	stmia	r4!, {r0, r1}
 8001ce0:	8022      	strh	r2, [r4, #0]
 8001ce2:	e00d      	b.n	8001d00 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <printRadioSettings+0x91c>)
 8001cea:	461c      	mov	r4, r3
 8001cec:	4615      	mov	r5, r2
 8001cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf6:	c403      	stmia	r4!, {r0, r1}
 8001cf8:	8022      	strh	r2, [r4, #0]
 8001cfa:	3402      	adds	r4, #2
 8001cfc:	0c13      	lsrs	r3, r2, #16
 8001cfe:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe faeb 	bl	80002e0 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f107 0108 	add.w	r1, r7, #8
 8001d12:	230a      	movs	r3, #10
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <printRadioSettings+0x90c>)
 8001d16:	f00d feec 	bl	800faf2 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <printRadioSettings+0x920>)
 8001d20:	461c      	mov	r4, r3
 8001d22:	4615      	mov	r5, r2
 8001d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	8022      	strh	r2, [r4, #0]
 8001d36:	3402      	adds	r4, #2
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe facd 	bl	80002e0 <strlen>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	f107 0108 	add.w	r1, r7, #8
 8001d4e:	230a      	movs	r3, #10
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <printRadioSettings+0x90c>)
 8001d52:	f00d fece 	bl	800faf2 <HAL_UART_Transmit>
}
 8001d56:	bf00      	nop
 8001d58:	3774      	adds	r7, #116	; 0x74
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0801aa74 	.word	0x0801aa74
 8001d64:	240002a0 	.word	0x240002a0
 8001d68:	0801aac0 	.word	0x0801aac0
 8001d6c:	0801aad8 	.word	0x0801aad8
 8001d70:	0801aaf0 	.word	0x0801aaf0
 8001d74:	0801ab0c 	.word	0x0801ab0c
 8001d78:	0801a6e0 	.word	0x0801a6e0

08001d7c <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	dd03      	ble.n	8001d94 <WriteToBuff+0x18>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d92:	db01      	blt.n	8001d98 <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8001d94:	2303      	movs	r3, #3
 8001d96:	e089      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <WriteToBuff+0x138>)
 8001d9a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da2:	d238      	bcs.n	8001e16 <WriteToBuff+0x9a>
 8001da4:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <WriteToBuff+0x138>)
 8001da6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db2:	d330      	bcc.n	8001e16 <WriteToBuff+0x9a>
    DataBuffer.counter = Bufflength;
 8001db4:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <WriteToBuff+0x138>)
 8001db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001dc4:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f017 faff 	bl	80193d0 <memcpy>
    DataBuffer.counter += len;
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <WriteToBuff+0x138>)
 8001dd4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a35      	ldr	r2, [pc, #212]	; (8001eb4 <WriteToBuff+0x138>)
 8001dde:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <WriteToBuff+0x13c>)
 8001de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de8:	4932      	ldr	r1, [pc, #200]	; (8001eb4 <WriteToBuff+0x138>)
 8001dea:	4834      	ldr	r0, [pc, #208]	; (8001ebc <WriteToBuff+0x140>)
 8001dec:	f016 fb3f 	bl	801846e <f_write>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <WriteToBuff+0x96>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4830      	ldr	r0, [pc, #192]	; (8001ec0 <WriteToBuff+0x144>)
 8001dfe:	f017 faf2 	bl	80193e6 <memset>
    	f_sync(&myFILE);
 8001e02:	482e      	ldr	r0, [pc, #184]	; (8001ebc <WriteToBuff+0x140>)
 8001e04:	f016 fca8 	bl	8018758 <f_sync>
      printf("Buffer 1 has been written\n");
 8001e08:	482e      	ldr	r0, [pc, #184]	; (8001ec4 <WriteToBuff+0x148>)
 8001e0a:	f017 fc11 	bl	8019630 <puts>
      return 1; //buffer 1 has been written
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e04c      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e12:	2304      	movs	r3, #4
 8001e14:	e04a      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001e16:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <WriteToBuff+0x138>)
 8001e18:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e24:	d32f      	bcc.n	8001e86 <WriteToBuff+0x10a>
    DataBuffer.counter = 0;
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <WriteToBuff+0x138>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <WriteToBuff+0x138>)
 8001e30:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <WriteToBuff+0x138>)
 8001e36:	4413      	add	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f017 fac7 	bl	80193d0 <memcpy>
    DataBuffer.counter += len;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <WriteToBuff+0x138>)
 8001e44:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <WriteToBuff+0x138>)
 8001e4e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <WriteToBuff+0x13c>)
 8001e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e58:	4919      	ldr	r1, [pc, #100]	; (8001ec0 <WriteToBuff+0x144>)
 8001e5a:	4818      	ldr	r0, [pc, #96]	; (8001ebc <WriteToBuff+0x140>)
 8001e5c:	f016 fb07 	bl	801846e <f_write>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <WriteToBuff+0x106>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <WriteToBuff+0x138>)
 8001e6e:	f017 faba 	bl	80193e6 <memset>
    	f_sync(&myFILE);
 8001e72:	4812      	ldr	r0, [pc, #72]	; (8001ebc <WriteToBuff+0x140>)
 8001e74:	f016 fc70 	bl	8018758 <f_sync>
      printf("Buffer 2 has been written\n");
 8001e78:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <WriteToBuff+0x14c>)
 8001e7a:	f017 fbd9 	bl	8019630 <puts>
      return 2; //buffer 2 has been written
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e014      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e82:	2304      	movs	r3, #4
 8001e84:	e012      	b.n	8001eac <WriteToBuff+0x130>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <WriteToBuff+0x138>)
 8001e88:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <WriteToBuff+0x138>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f017 fa9b 	bl	80193d0 <memcpy>
  DataBuffer.counter += len;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <WriteToBuff+0x138>)
 8001e9c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <WriteToBuff+0x138>)
 8001ea6:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2400032c 	.word	0x2400032c
 8001eb8:	240010d0 	.word	0x240010d0
 8001ebc:	24000b98 	.word	0x24000b98
 8001ec0:	2400072c 	.word	0x2400072c
 8001ec4:	0801ac24 	.word	0x0801ac24
 8001ec8:	0801ac40 	.word	0x0801ac40

08001ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed0:	f5ad 5def 	sub.w	sp, sp, #7648	; 0x1de0
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed8:	f002 fa9e 	bl	8004418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001edc:	f001 f9ca 	bl	8003274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee0:	f001 fd2a 	bl	8003938 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee4:	f001 fd08 	bl	80038f8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001ee8:	f001 fbf6 	bl	80036d8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001eec:	f011 f936 	bl	801315c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001ef0:	f016 fd36 	bl	8018960 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001ef4:	f001 fac8 	bl	8003488 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001ef8:	f001 fb2c 	bl	8003554 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001efc:	f001 fc64 	bl	80037c8 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001f00:	f001 fcae 	bl	8003860 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001f04:	f001 fc0a 	bl	800371c <MX_SPI1_Init>
  MX_RTC_Init();
 8001f08:	f001 fb88 	bl	800361c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	48be      	ldr	r0, [pc, #760]	; (8002208 <main+0x33c>)
 8001f10:	f006 f847 	bl	8007fa2 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001f14:	4cbd      	ldr	r4, [pc, #756]	; (800220c <main+0x340>)
 8001f16:	4668      	mov	r0, sp
 8001f18:	1d23      	adds	r3, r4, #4
 8001f1a:	2284      	movs	r2, #132	; 0x84
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f017 fa57 	bl	80193d0 <memcpy>
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	2102      	movs	r1, #2
 8001f28:	48b9      	ldr	r0, [pc, #740]	; (8002210 <main+0x344>)
 8001f2a:	f7fe ff49 	bl	8000dc0 <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001f2e:	f7ff f827 	bl	8000f80 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001f32:	4bb8      	ldr	r3, [pc, #736]	; (8002214 <main+0x348>)
 8001f34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	f7ff f880 	bl	8001040 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff f909 	bl	8001158 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001f46:	202a      	movs	r0, #42	; 0x2a
 8001f48:	f7ff f8b9 	bl	80010be <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001f4c:	2020      	movs	r0, #32
 8001f4e:	f7ff f8cb 	bl	80010e8 <NRF24_setPayloadSize>

    printRadioSettings();
 8001f52:	f7ff fa81 	bl	8001458 <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001f56:	48b0      	ldr	r0, [pc, #704]	; (8002218 <main+0x34c>)
 8001f58:	f017 fb6a 	bl	8019630 <puts>
  FDCAN_Config(&hfdcan1);
 8001f5c:	48af      	ldr	r0, [pc, #700]	; (800221c <main+0x350>)
 8001f5e:	f7fe fb97 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001f62:	2228      	movs	r2, #40	; 0x28
 8001f64:	49ae      	ldr	r1, [pc, #696]	; (8002220 <main+0x354>)
 8001f66:	48af      	ldr	r0, [pc, #700]	; (8002224 <main+0x358>)
 8001f68:	f00d fe5a 	bl	800fc20 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f70:	f002 fae4 	bl	800453c <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001f74:	2364      	movs	r3, #100	; 0x64
 8001f76:	f641 522a 	movw	r2, #7466	; 0x1d2a
 8001f7a:	443a      	add	r2, r7
 8001f7c:	8013      	strh	r3, [r2, #0]
  uint16_t navRate = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f641 5228 	movw	r2, #7464	; 0x1d28
 8001f84:	443a      	add	r2, r7
 8001f86:	8013      	strh	r3, [r2, #0]
  uint16_t timeRef = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f641 5226 	movw	r2, #7462	; 0x1d26
 8001f8e:	443a      	add	r2, r7
 8001f90:	8013      	strh	r3, [r2, #0]
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001f92:	f641 5326 	movw	r3, #7462	; 0x1d26
 8001f96:	443b      	add	r3, r7
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	f641 5228 	movw	r2, #7464	; 0x1d28
 8001f9e:	443a      	add	r2, r7
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	f641 512a 	movw	r1, #7466	; 0x1d2a
 8001fa6:	4439      	add	r1, r7
 8001fa8:	8809      	ldrh	r1, [r1, #0]
 8001faa:	489e      	ldr	r0, [pc, #632]	; (8002224 <main+0x358>)
 8001fac:	f7fe fd5a 	bl	8000a64 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	499d      	ldr	r1, [pc, #628]	; (8002228 <main+0x35c>)
 8001fb4:	489b      	ldr	r0, [pc, #620]	; (8002224 <main+0x358>)
 8001fb6:	f7fe fce5 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	499b      	ldr	r1, [pc, #620]	; (800222c <main+0x360>)
 8001fbe:	4899      	ldr	r0, [pc, #612]	; (8002224 <main+0x358>)
 8001fc0:	f7fe fce0 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	499a      	ldr	r1, [pc, #616]	; (8002230 <main+0x364>)
 8001fc8:	4896      	ldr	r0, [pc, #600]	; (8002224 <main+0x358>)
 8001fca:	f7fe fcdb 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4998      	ldr	r1, [pc, #608]	; (8002234 <main+0x368>)
 8001fd2:	4894      	ldr	r0, [pc, #592]	; (8002224 <main+0x358>)
 8001fd4:	f7fe fcd6 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4997      	ldr	r1, [pc, #604]	; (8002238 <main+0x36c>)
 8001fdc:	4891      	ldr	r0, [pc, #580]	; (8002224 <main+0x358>)
 8001fde:	f7fe fcd1 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4995      	ldr	r1, [pc, #596]	; (800223c <main+0x370>)
 8001fe6:	488f      	ldr	r0, [pc, #572]	; (8002224 <main+0x358>)
 8001fe8:	f7fe fccc 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	4994      	ldr	r1, [pc, #592]	; (8002240 <main+0x374>)
 8001ff0:	488c      	ldr	r0, [pc, #560]	; (8002224 <main+0x358>)
 8001ff2:	f7fe fcc7 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4992      	ldr	r1, [pc, #584]	; (8002244 <main+0x378>)
 8001ffa:	488a      	ldr	r0, [pc, #552]	; (8002224 <main+0x358>)
 8001ffc:	f7fe fcc2 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8002000:	2200      	movs	r2, #0
 8002002:	4991      	ldr	r1, [pc, #580]	; (8002248 <main+0x37c>)
 8002004:	4887      	ldr	r0, [pc, #540]	; (8002224 <main+0x358>)
 8002006:	f7fe fcbd 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 800200a:	2200      	movs	r2, #0
 800200c:	498f      	ldr	r1, [pc, #572]	; (800224c <main+0x380>)
 800200e:	4885      	ldr	r0, [pc, #532]	; (8002224 <main+0x358>)
 8002010:	f7fe fcb8 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8002014:	2200      	movs	r2, #0
 8002016:	498e      	ldr	r1, [pc, #568]	; (8002250 <main+0x384>)
 8002018:	4882      	ldr	r0, [pc, #520]	; (8002224 <main+0x358>)
 800201a:	f7fe fcb3 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 800201e:	2200      	movs	r2, #0
 8002020:	498c      	ldr	r1, [pc, #560]	; (8002254 <main+0x388>)
 8002022:	4880      	ldr	r0, [pc, #512]	; (8002224 <main+0x358>)
 8002024:	f7fe fcae 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8002028:	2200      	movs	r2, #0
 800202a:	498b      	ldr	r1, [pc, #556]	; (8002258 <main+0x38c>)
 800202c:	487d      	ldr	r0, [pc, #500]	; (8002224 <main+0x358>)
 800202e:	f7fe fca9 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8002032:	2200      	movs	r2, #0
 8002034:	4989      	ldr	r1, [pc, #548]	; (800225c <main+0x390>)
 8002036:	487b      	ldr	r0, [pc, #492]	; (8002224 <main+0x358>)
 8002038:	f7fe fca4 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 800203c:	2200      	movs	r2, #0
 800203e:	4988      	ldr	r1, [pc, #544]	; (8002260 <main+0x394>)
 8002040:	4878      	ldr	r0, [pc, #480]	; (8002224 <main+0x358>)
 8002042:	f7fe fc9f 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8002046:	2201      	movs	r2, #1
 8002048:	4986      	ldr	r1, [pc, #536]	; (8002264 <main+0x398>)
 800204a:	4876      	ldr	r0, [pc, #472]	; (8002224 <main+0x358>)
 800204c:	f7fe fc9a 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8002050:	2200      	movs	r2, #0
 8002052:	4985      	ldr	r1, [pc, #532]	; (8002268 <main+0x39c>)
 8002054:	4873      	ldr	r0, [pc, #460]	; (8002224 <main+0x358>)
 8002056:	f7fe fc95 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 800205a:	2200      	movs	r2, #0
 800205c:	4983      	ldr	r1, [pc, #524]	; (800226c <main+0x3a0>)
 800205e:	4871      	ldr	r0, [pc, #452]	; (8002224 <main+0x358>)
 8002060:	f7fe fc90 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8002064:	2200      	movs	r2, #0
 8002066:	4982      	ldr	r1, [pc, #520]	; (8002270 <main+0x3a4>)
 8002068:	486e      	ldr	r0, [pc, #440]	; (8002224 <main+0x358>)
 800206a:	f7fe fc8b 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 800206e:	2200      	movs	r2, #0
 8002070:	4980      	ldr	r1, [pc, #512]	; (8002274 <main+0x3a8>)
 8002072:	486c      	ldr	r0, [pc, #432]	; (8002224 <main+0x358>)
 8002074:	f7fe fc86 	bl	8000984 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8002078:	2201      	movs	r2, #1
 800207a:	497f      	ldr	r1, [pc, #508]	; (8002278 <main+0x3ac>)
 800207c:	487f      	ldr	r0, [pc, #508]	; (800227c <main+0x3b0>)
 800207e:	f015 feb3 	bl	8017de8 <f_mount>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 8151 	bne.w	800232c <main+0x460>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char Filename[20] = "test";
 800208a:	4a7d      	ldr	r2, [pc, #500]	; (8002280 <main+0x3b4>)
 800208c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002090:	443b      	add	r3, r7
 8002092:	441a      	add	r2, r3
 8002094:	497b      	ldr	r1, [pc, #492]	; (8002284 <main+0x3b8>)
 8002096:	4613      	mov	r3, r2
 8002098:	c903      	ldmia	r1, {r0, r1}
 800209a:	6018      	str	r0, [r3, #0]
 800209c:	3304      	adds	r3, #4
 800209e:	7019      	strb	r1, [r3, #0]
 80020a0:	1d53      	adds	r3, r2, #5
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	f8c3 200b 	str.w	r2, [r3, #11]
      char FilePath[150];
      char ConfigPath[] ="Config.csv\0";
 80020ae:	4b76      	ldr	r3, [pc, #472]	; (8002288 <main+0x3bc>)
 80020b0:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020b4:	443a      	add	r2, r7
 80020b6:	4413      	add	r3, r2
 80020b8:	4a74      	ldr	r2, [pc, #464]	; (800228c <main+0x3c0>)
 80020ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80020bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 80020c0:	4b71      	ldr	r3, [pc, #452]	; (8002288 <main+0x3bc>)
 80020c2:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020c6:	443a      	add	r2, r7
 80020c8:	4413      	add	r3, r2
 80020ca:	2201      	movs	r2, #1
 80020cc:	4619      	mov	r1, r3
 80020ce:	4870      	ldr	r0, [pc, #448]	; (8002290 <main+0x3c4>)
 80020d0:	f015 fed0 	bl	8017e74 <f_open>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d156      	bne.n	8002188 <main+0x2bc>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 80020da:	4b6b      	ldr	r3, [pc, #428]	; (8002288 <main+0x3bc>)
 80020dc:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020e0:	443a      	add	r2, r7
 80020e2:	4413      	add	r3, r2
 80020e4:	220a      	movs	r2, #10
 80020e6:	4619      	mov	r1, r3
 80020e8:	4869      	ldr	r0, [pc, #420]	; (8002290 <main+0x3c4>)
 80020ea:	f015 fec3 	bl	8017e74 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 80020ee:	4b69      	ldr	r3, [pc, #420]	; (8002294 <main+0x3c8>)
 80020f0:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020f4:	443a      	add	r2, r7
 80020f6:	4413      	add	r3, r2
 80020f8:	4a67      	ldr	r2, [pc, #412]	; (8002298 <main+0x3cc>)
 80020fa:	461c      	mov	r4, r3
 80020fc:	4615      	mov	r5, r2
 80020fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002106:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800210a:	c403      	stmia	r4!, {r0, r1}
 800210c:	8022      	strh	r2, [r4, #0]
 800210e:	3402      	adds	r4, #2
 8002110:	0c13      	lsrs	r3, r2, #16
 8002112:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8002114:	4b5f      	ldr	r3, [pc, #380]	; (8002294 <main+0x3c8>)
 8002116:	f641 5270 	movw	r2, #7536	; 0x1d70
 800211a:	443a      	add	r2, r7
 800211c:	4413      	add	r3, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f8de 	bl	80002e0 <strlen>
 8002124:	4602      	mov	r2, r0
 8002126:	4b5b      	ldr	r3, [pc, #364]	; (8002294 <main+0x3c8>)
 8002128:	f641 5170 	movw	r1, #7536	; 0x1d70
 800212c:	4439      	add	r1, r7
 800212e:	440b      	add	r3, r1
 8002130:	4413      	add	r3, r2
 8002132:	4a5a      	ldr	r2, [pc, #360]	; (800229c <main+0x3d0>)
 8002134:	4614      	mov	r4, r2
 8002136:	469c      	mov	ip, r3
 8002138:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800213c:	4665      	mov	r5, ip
 800213e:	4626      	mov	r6, r4
 8002140:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002142:	6028      	str	r0, [r5, #0]
 8002144:	6069      	str	r1, [r5, #4]
 8002146:	60aa      	str	r2, [r5, #8]
 8002148:	60eb      	str	r3, [r5, #12]
 800214a:	3410      	adds	r4, #16
 800214c:	f10c 0c10 	add.w	ip, ip, #16
 8002150:	4574      	cmp	r4, lr
 8002152:	d1f3      	bne.n	800213c <main+0x270>
 8002154:	4662      	mov	r2, ip
 8002156:	4623      	mov	r3, r4
 8002158:	cb03      	ldmia	r3!, {r0, r1}
 800215a:	6010      	str	r0, [r2, #0]
 800215c:	6051      	str	r1, [r2, #4]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <main+0x3c8>)
 8002164:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002168:	443a      	add	r2, r7
 800216a:	4413      	add	r3, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f8b7 	bl	80002e0 <strlen>
 8002172:	4602      	mov	r2, r0
 8002174:	4947      	ldr	r1, [pc, #284]	; (8002294 <main+0x3c8>)
 8002176:	f641 5370 	movw	r3, #7536	; 0x1d70
 800217a:	443b      	add	r3, r7
 800217c:	4419      	add	r1, r3
 800217e:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <main+0x3d4>)
 8002180:	4843      	ldr	r0, [pc, #268]	; (8002290 <main+0x3c4>)
 8002182:	f016 f974 	bl	801846e <f_write>
 8002186:	e011      	b.n	80021ac <main+0x2e0>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8002188:	4b42      	ldr	r3, [pc, #264]	; (8002294 <main+0x3c8>)
 800218a:	f641 5270 	movw	r2, #7536	; 0x1d70
 800218e:	443a      	add	r2, r7
 8002190:	4413      	add	r3, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f8a4 	bl	80002e0 <strlen>
 8002198:	4602      	mov	r2, r0
 800219a:	493e      	ldr	r1, [pc, #248]	; (8002294 <main+0x3c8>)
 800219c:	f641 5370 	movw	r3, #7536	; 0x1d70
 80021a0:	443b      	add	r3, r7
 80021a2:	4419      	add	r1, r3
 80021a4:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <main+0x3d8>)
 80021a6:	483a      	ldr	r0, [pc, #232]	; (8002290 <main+0x3c4>)
 80021a8:	f016 f822 	bl	80181f0 <f_read>
      }
      f_close(&Config);
 80021ac:	4838      	ldr	r0, [pc, #224]	; (8002290 <main+0x3c4>)
 80021ae:	f016 fb51 	bl	8018854 <f_close>
      //MAKE NEW FILE INCREMENTED BY 1
      
      strcpy(FilePath,Filename);
 80021b2:	4a33      	ldr	r2, [pc, #204]	; (8002280 <main+0x3b4>)
 80021b4:	f641 5370 	movw	r3, #7536	; 0x1d70
 80021b8:	443b      	add	r3, r7
 80021ba:	441a      	add	r2, r3
 80021bc:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <main+0x3dc>)
 80021be:	f641 5170 	movw	r1, #7536	; 0x1d70
 80021c2:	4439      	add	r1, r7
 80021c4:	440b      	add	r3, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f017 fa9d 	bl	8019708 <strcpy>
      int FilePathLen = strlen(Filename);
 80021ce:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <main+0x3b4>)
 80021d0:	f641 5270 	movw	r2, #7536	; 0x1d70
 80021d4:	443a      	add	r2, r7
 80021d6:	4413      	add	r3, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f881 	bl	80002e0 <strlen>
 80021de:	4603      	mov	r3, r0
 80021e0:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 80021e4:	6013      	str	r3, [r2, #0]
      sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80021e6:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <main+0x3dc>)
 80021ee:	f641 5170 	movw	r1, #7536	; 0x1d70
 80021f2:	4439      	add	r1, r7
 80021f4:	440b      	add	r3, r1
 80021f6:	1898      	adds	r0, r3, r2
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <main+0x3e0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	492c      	ldr	r1, [pc, #176]	; (80022b0 <main+0x3e4>)
 8002200:	f017 fa62 	bl	80196c8 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 8002204:	e07b      	b.n	80022fe <main+0x432>
 8002206:	bf00      	nop
 8002208:	58020400 	.word	0x58020400
 800220c:	24001620 	.word	0x24001620
 8002210:	58020000 	.word	0x58020000
 8002214:	24000000 	.word	0x24000000
 8002218:	0801ac5c 	.word	0x0801ac5c
 800221c:	240014f4 	.word	0x240014f4
 8002220:	24001304 	.word	0x24001304
 8002224:	240013a4 	.word	0x240013a4
 8002228:	0801ac68 	.word	0x0801ac68
 800222c:	0801ac6c 	.word	0x0801ac6c
 8002230:	0801ac70 	.word	0x0801ac70
 8002234:	0801ac74 	.word	0x0801ac74
 8002238:	0801ac78 	.word	0x0801ac78
 800223c:	0801ac7c 	.word	0x0801ac7c
 8002240:	0801ac80 	.word	0x0801ac80
 8002244:	0801ac84 	.word	0x0801ac84
 8002248:	0801ac88 	.word	0x0801ac88
 800224c:	0801ac8c 	.word	0x0801ac8c
 8002250:	0801ac90 	.word	0x0801ac90
 8002254:	0801ac94 	.word	0x0801ac94
 8002258:	0801ac98 	.word	0x0801ac98
 800225c:	0801ac9c 	.word	0x0801ac9c
 8002260:	0801aca0 	.word	0x0801aca0
 8002264:	0801aca4 	.word	0x0801aca4
 8002268:	0801aca8 	.word	0x0801aca8
 800226c:	0801acac 	.word	0x0801acac
 8002270:	0801acb0 	.word	0x0801acb0
 8002274:	0801acb4 	.word	0x0801acb4
 8002278:	24001750 	.word	0x24001750
 800227c:	24000dd0 	.word	0x24000dd0
 8002280:	ffffe744 	.word	0xffffe744
 8002284:	0801ad7c 	.word	0x0801ad7c
 8002288:	ffffe738 	.word	0xffffe738
 800228c:	0801ad90 	.word	0x0801ad90
 8002290:	240010d4 	.word	0x240010d4
 8002294:	ffffe328 	.word	0xffffe328
 8002298:	0801acb8 	.word	0x0801acb8
 800229c:	0801ace4 	.word	0x0801ace4
 80022a0:	24000dcc 	.word	0x24000dcc
 80022a4:	24000dc8 	.word	0x24000dc8
 80022a8:	ffffe290 	.word	0xffffe290
 80022ac:	2400000c 	.word	0x2400000c
 80022b0:	0801ad20 	.word	0x0801ad20
    	  f_close(&myFILE);
 80022b4:	48b3      	ldr	r0, [pc, #716]	; (8002584 <main+0x6b8>)
 80022b6:	f016 facd 	bl	8018854 <f_close>
        fileNum++;
 80022ba:	4bb3      	ldr	r3, [pc, #716]	; (8002588 <main+0x6bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3301      	adds	r3, #1
 80022c0:	4ab1      	ldr	r2, [pc, #708]	; (8002588 <main+0x6bc>)
 80022c2:	6013      	str	r3, [r2, #0]
        strcpy(FilePath,Filename);
 80022c4:	4ab1      	ldr	r2, [pc, #708]	; (800258c <main+0x6c0>)
 80022c6:	f641 5370 	movw	r3, #7536	; 0x1d70
 80022ca:	443b      	add	r3, r7
 80022cc:	441a      	add	r2, r3
 80022ce:	4bb0      	ldr	r3, [pc, #704]	; (8002590 <main+0x6c4>)
 80022d0:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022d4:	4439      	add	r1, r7
 80022d6:	440b      	add	r3, r1
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f017 fa14 	bl	8019708 <strcpy>
        sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80022e0:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4baa      	ldr	r3, [pc, #680]	; (8002590 <main+0x6c4>)
 80022e8:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022ec:	4439      	add	r1, r7
 80022ee:	440b      	add	r3, r1
 80022f0:	1898      	adds	r0, r3, r2
 80022f2:	4ba5      	ldr	r3, [pc, #660]	; (8002588 <main+0x6bc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	49a6      	ldr	r1, [pc, #664]	; (8002594 <main+0x6c8>)
 80022fa:	f017 f9e5 	bl	80196c8 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80022fe:	4ba4      	ldr	r3, [pc, #656]	; (8002590 <main+0x6c4>)
 8002300:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002304:	443a      	add	r2, r7
 8002306:	4413      	add	r3, r2
 8002308:	2201      	movs	r2, #1
 800230a:	4619      	mov	r1, r3
 800230c:	489d      	ldr	r0, [pc, #628]	; (8002584 <main+0x6b8>)
 800230e:	f015 fdb1 	bl	8017e74 <f_open>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0cd      	beq.n	80022b4 <main+0x3e8>
      }
      f_open(&myFILE, FilePath, FA_WRITE | FA_CREATE_ALWAYS);
 8002318:	4b9d      	ldr	r3, [pc, #628]	; (8002590 <main+0x6c4>)
 800231a:	f641 5270 	movw	r2, #7536	; 0x1d70
 800231e:	443a      	add	r2, r7
 8002320:	4413      	add	r3, r2
 8002322:	220a      	movs	r2, #10
 8002324:	4619      	mov	r1, r3
 8002326:	4897      	ldr	r0, [pc, #604]	; (8002584 <main+0x6b8>)
 8002328:	f015 fda4 	bl	8017e74 <f_open>
  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;


  CAN_FD_FRAME FDBuffer[50] = {0};
 800232c:	4b9a      	ldr	r3, [pc, #616]	; (8002598 <main+0x6cc>)
 800232e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002332:	443a      	add	r2, r7
 8002334:	4413      	add	r3, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800233c:	461a      	mov	r2, r3
 800233e:	2100      	movs	r1, #0
 8002340:	f017 f851 	bl	80193e6 <memset>
  CAN_FRAME Buffer[50] = {0};
 8002344:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8002348:	4618      	mov	r0, r3
 800234a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800234e:	461a      	mov	r2, r3
 8002350:	2100      	movs	r1, #0
 8002352:	f017 f848 	bl	80193e6 <memset>
  uint32_t Tele_IDs[50] = {0};
 8002356:	4b91      	ldr	r3, [pc, #580]	; (800259c <main+0x6d0>)
 8002358:	f641 5270 	movw	r2, #7536	; 0x1d70
 800235c:	443a      	add	r2, r7
 800235e:	4413      	add	r3, r2
 8002360:	4618      	mov	r0, r3
 8002362:	23c8      	movs	r3, #200	; 0xc8
 8002364:	461a      	mov	r2, r3
 8002366:	2100      	movs	r1, #0
 8002368:	f017 f83d 	bl	80193e6 <memset>
  Tele_IDs[0] = 0x321;
 800236c:	4b8b      	ldr	r3, [pc, #556]	; (800259c <main+0x6d0>)
 800236e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002372:	443a      	add	r2, r7
 8002374:	4413      	add	r3, r2
 8002376:	f240 3221 	movw	r2, #801	; 0x321
 800237a:	601a      	str	r2, [r3, #0]

  sTime.SecondFraction = 999;
 800237c:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <main+0x6d4>)
 800237e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002382:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 8002384:	f002 f8ce 	bl	8004524 <HAL_GetTick>
 8002388:	f641 531c 	movw	r3, #7452	; 0x1d1c
 800238c:	443b      	add	r3, r7
 800238e:	6018      	str	r0, [r3, #0]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002390:	2200      	movs	r2, #0
 8002392:	4983      	ldr	r1, [pc, #524]	; (80025a0 <main+0x6d4>)
 8002394:	4883      	ldr	r0, [pc, #524]	; (80025a4 <main+0x6d8>)
 8002396:	f00a f927 	bl	800c5e8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800239a:	2200      	movs	r2, #0
 800239c:	4982      	ldr	r1, [pc, #520]	; (80025a8 <main+0x6dc>)
 800239e:	4881      	ldr	r0, [pc, #516]	; (80025a4 <main+0x6d8>)
 80023a0:	f00a fa06 	bl	800c7b0 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 80023a4:	4b7e      	ldr	r3, [pc, #504]	; (80025a0 <main+0x6d4>)
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80023ac:	443b      	add	r3, r7
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b7e      	ldr	r3, [pc, #504]	; (80025ac <main+0x6e0>)
 80023b2:	fba3 0302 	umull	r0, r3, r3, r2
 80023b6:	099b      	lsrs	r3, r3, #6
 80023b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023bc:	fb00 f303 	mul.w	r3, r0, r3
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	1acb      	subs	r3, r1, r3
 80023c4:	4a76      	ldr	r2, [pc, #472]	; (80025a0 <main+0x6d4>)
 80023c6:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 80023c8:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80023cc:	443b      	add	r3, r7
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a76      	ldr	r2, [pc, #472]	; (80025ac <main+0x6e0>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	099b      	lsrs	r3, r3, #6
 80023d8:	f641 521c 	movw	r2, #7452	; 0x1d1c
 80023dc:	443a      	add	r2, r7
 80023de:	6013      	str	r3, [r2, #0]
  sTime.Seconds -= LocalTime % 60;
 80023e0:	4b6f      	ldr	r3, [pc, #444]	; (80025a0 <main+0x6d4>)
 80023e2:	7898      	ldrb	r0, [r3, #2]
 80023e4:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80023e8:	443b      	add	r3, r7
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	4b70      	ldr	r3, [pc, #448]	; (80025b0 <main+0x6e4>)
 80023ee:	fba3 2301 	umull	r2, r3, r3, r1
 80023f2:	095a      	lsrs	r2, r3, #5
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	1aca      	subs	r2, r1, r3
 80023fe:	b2d3      	uxtb	r3, r2
 8002400:	1ac3      	subs	r3, r0, r3
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b66      	ldr	r3, [pc, #408]	; (80025a0 <main+0x6d4>)
 8002406:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8002408:	f641 531c 	movw	r3, #7452	; 0x1d1c
 800240c:	443b      	add	r3, r7
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a67      	ldr	r2, [pc, #412]	; (80025b0 <main+0x6e4>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	f641 521c 	movw	r2, #7452	; 0x1d1c
 800241c:	443a      	add	r2, r7
 800241e:	6013      	str	r3, [r2, #0]
  sTime.Minutes -= LocalTime % 60;
 8002420:	4b5f      	ldr	r3, [pc, #380]	; (80025a0 <main+0x6d4>)
 8002422:	7858      	ldrb	r0, [r3, #1]
 8002424:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002428:	443b      	add	r3, r7
 800242a:	6819      	ldr	r1, [r3, #0]
 800242c:	4b60      	ldr	r3, [pc, #384]	; (80025b0 <main+0x6e4>)
 800242e:	fba3 2301 	umull	r2, r3, r3, r1
 8002432:	095a      	lsrs	r2, r3, #5
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	1aca      	subs	r2, r1, r3
 800243e:	b2d3      	uxtb	r3, r2
 8002440:	1ac3      	subs	r3, r0, r3
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b56      	ldr	r3, [pc, #344]	; (80025a0 <main+0x6d4>)
 8002446:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8002448:	f641 531c 	movw	r3, #7452	; 0x1d1c
 800244c:	443b      	add	r3, r7
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a57      	ldr	r2, [pc, #348]	; (80025b0 <main+0x6e4>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	f641 521c 	movw	r2, #7452	; 0x1d1c
 800245c:	443a      	add	r2, r7
 800245e:	6013      	str	r3, [r2, #0]
  sTime.Hours -= LocalTime % 60;
 8002460:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <main+0x6d4>)
 8002462:	7818      	ldrb	r0, [r3, #0]
 8002464:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002468:	443b      	add	r3, r7
 800246a:	6819      	ldr	r1, [r3, #0]
 800246c:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <main+0x6e4>)
 800246e:	fba3 2301 	umull	r2, r3, r3, r1
 8002472:	095a      	lsrs	r2, r3, #5
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	1aca      	subs	r2, r1, r3
 800247e:	b2d3      	uxtb	r3, r2
 8002480:	1ac3      	subs	r3, r0, r3
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <main+0x6d4>)
 8002486:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	f641 526c 	movw	r2, #7532	; 0x1d6c
 800248e:	443a      	add	r2, r7
 8002490:	6013      	str	r3, [r2, #0]
  char CanFDWrite[400];
  int CFDW = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002498:	443a      	add	r2, r7
 800249a:	6013      	str	r3, [r2, #0]
  int AllowedTele = 1;
 800249c:	2301      	movs	r3, #1
 800249e:	f641 5218 	movw	r2, #7448	; 0x1d18
 80024a2:	443a      	add	r2, r7
 80024a4:	6013      	str	r3, [r2, #0]
  int BuffIndex = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f641 5264 	movw	r2, #7524	; 0x1d64
 80024ac:	443a      	add	r2, r7
 80024ae:	6013      	str	r3, [r2, #0]
  int Txcnt = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 80024b6:	6013      	str	r3, [r2, #0]
  int TxDataSpace = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f641 5214 	movw	r2, #7444	; 0x1d14
 80024be:	443a      	add	r2, r7
 80024c0:	6013      	str	r3, [r2, #0]
  uint32_t LoopTime = 10; //time a loop should take (this is aguess should test avg time)
 80024c2:	230a      	movs	r3, #10
 80024c4:	f641 5210 	movw	r2, #7440	; 0x1d10
 80024c8:	443a      	add	r2, r7
 80024ca:	6013      	str	r3, [r2, #0]
  uint32_t StartTime = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f641 520c 	movw	r2, #7436	; 0x1d0c
 80024d2:	443a      	add	r2, r7
 80024d4:	6013      	str	r3, [r2, #0]
  uint32_t EndTime = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f641 5208 	movw	r2, #7432	; 0x1d08
 80024dc:	443a      	add	r2, r7
 80024de:	6013      	str	r3, [r2, #0]
  uint32_t radiodelay = 1000;
 80024e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e4:	f641 5204 	movw	r2, #7428	; 0x1d04
 80024e8:	443a      	add	r2, r7
 80024ea:	6013      	str	r3, [r2, #0]
  uint32_t r_start = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80024f2:	443a      	add	r2, r7
 80024f4:	6013      	str	r3, [r2, #0]
  uint32_t r_end = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80024fc:	6013      	str	r3, [r2, #0]
  r_start = HAL_GetTick();
 80024fe:	f002 f811 	bl	8004524 <HAL_GetTick>
 8002502:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002506:	443b      	add	r3, r7
 8002508:	6018      	str	r0, [r3, #0]

  while (end_flag){
 800250a:	f000 be98 	b.w	800323e <main+0x1372>
    StartTime = HAL_GetTick();
 800250e:	f002 f809 	bl	8004524 <HAL_GetTick>
 8002512:	f641 530c 	movw	r3, #7436	; 0x1d0c
 8002516:	443b      	add	r3, r7
 8002518:	6018      	str	r0, [r3, #0]
	  if(GPS_flag){
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <main+0x6e8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <main+0x664>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8002522:	2128      	movs	r1, #40	; 0x28
 8002524:	4824      	ldr	r0, [pc, #144]	; (80025b8 <main+0x6ec>)
 8002526:	f7ff fc29 	bl	8001d7c <WriteToBuff>
		  GPS_flag=0;
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <main+0x6e8>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
	  }
	  
    r_end = HAL_GetTick();
 8002530:	f001 fff8 	bl	8004524 <HAL_GetTick>
 8002534:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8002538:	6018      	str	r0, [r3, #0]
    if(r_start - r_end > radiodelay && FDBuffer[0].id != 0){
 800253a:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800253e:	443b      	add	r3, r7
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f641 5204 	movw	r2, #7428	; 0x1d04
 800254e:	443a      	add	r2, r7
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	f080 82a2 	bcs.w	8002a9c <main+0xbd0>
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <main+0x6cc>)
 800255a:	f641 5270 	movw	r2, #7536	; 0x1d70
 800255e:	443a      	add	r2, r7
 8002560:	4413      	add	r3, r2
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8299 	beq.w	8002a9c <main+0xbd0>
      r_start = HAL_GetTick();
 800256a:	f001 ffdb 	bl	8004524 <HAL_GetTick>
 800256e:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002572:	443b      	add	r3, r7
 8002574:	6018      	str	r0, [r3, #0]
      for(int i = 0; i < AllowedTele; i++){
 8002576:	2300      	movs	r3, #0
 8002578:	f641 5258 	movw	r2, #7512	; 0x1d58
 800257c:	443a      	add	r2, r7
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	e281      	b.n	8002a86 <main+0xbba>
 8002582:	bf00      	nop
 8002584:	24000b98 	.word	0x24000b98
 8002588:	2400000c 	.word	0x2400000c
 800258c:	ffffe744 	.word	0xffffe744
 8002590:	ffffe290 	.word	0xffffe290
 8002594:	0801ad20 	.word	0x0801ad20
 8002598:	ffffeff0 	.word	0xffffeff0
 800259c:	ffffea78 	.word	0xffffea78
 80025a0:	24000b30 	.word	0x24000b30
 80025a4:	240014d0 	.word	0x240014d0
 80025a8:	24000b44 	.word	0x24000b44
 80025ac:	10624dd3 	.word	0x10624dd3
 80025b0:	88888889 	.word	0x88888889
 80025b4:	24000204 	.word	0x24000204
 80025b8:	24001304 	.word	0x24001304
        //make packet (Time ID data)
        Txcnt = sprintf(myTxData,"%u %x ",FDBuffer[BuffIndex].time, FDBuffer[BuffIndex].id);
 80025bc:	4ab4      	ldr	r2, [pc, #720]	; (8002890 <main+0x9c4>)
 80025be:	f641 5370 	movw	r3, #7536	; 0x1d70
 80025c2:	443b      	add	r3, r7
 80025c4:	441a      	add	r2, r3
 80025c6:	f641 5364 	movw	r3, #7524	; 0x1d64
 80025ca:	443b      	add	r3, r7
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	460b      	mov	r3, r1
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	4413      	add	r3, r2
 80025d8:	330c      	adds	r3, #12
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	4aac      	ldr	r2, [pc, #688]	; (8002890 <main+0x9c4>)
 80025de:	f641 5370 	movw	r3, #7536	; 0x1d70
 80025e2:	443b      	add	r3, r7
 80025e4:	441a      	add	r2, r3
 80025e6:	f641 5364 	movw	r3, #7524	; 0x1d64
 80025ea:	443b      	add	r3, r7
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	460b      	mov	r3, r1
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4413      	add	r3, r2
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4602      	mov	r2, r0
 80025fc:	49a5      	ldr	r1, [pc, #660]	; (8002894 <main+0x9c8>)
 80025fe:	48a6      	ldr	r0, [pc, #664]	; (8002898 <main+0x9cc>)
 8002600:	f017 f862 	bl	80196c8 <siprintf>
 8002604:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002608:	6018      	str	r0, [r3, #0]
        TxDataSpace = 32 - Txcnt;
 800260a:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f1c3 0320 	rsb	r3, r3, #32
 8002614:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002618:	443a      	add	r2, r7
 800261a:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].length > TxDataSpace){
 800261c:	4a9c      	ldr	r2, [pc, #624]	; (8002890 <main+0x9c4>)
 800261e:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002622:	443b      	add	r3, r7
 8002624:	441a      	add	r2, r3
 8002626:	f641 5364 	movw	r3, #7524	; 0x1d64
 800262a:	443b      	add	r3, r7
 800262c:	6819      	ldr	r1, [r3, #0]
 800262e:	460b      	mov	r3, r1
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	4413      	add	r3, r2
 8002638:	3308      	adds	r3, #8
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002640:	443b      	add	r3, r7
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	f240 81a1 	bls.w	800298c <main+0xac0>
          for(int i = 0; i < TxDataSpace; i++){
 800264a:	2300      	movs	r3, #0
 800264c:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002650:	443a      	add	r2, r7
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e02e      	b.n	80026b4 <main+0x7e8>
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 8002656:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a8e      	ldr	r2, [pc, #568]	; (8002898 <main+0x9cc>)
 800265e:	1898      	adds	r0, r3, r2
 8002660:	4a8b      	ldr	r2, [pc, #556]	; (8002890 <main+0x9c4>)
 8002662:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002666:	443b      	add	r3, r7
 8002668:	441a      	add	r2, r3
 800266a:	f641 5364 	movw	r3, #7524	; 0x1d64
 800266e:	443b      	add	r3, r7
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	460b      	mov	r3, r1
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	441a      	add	r2, r3
 800267c:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002680:	443b      	add	r3, r7
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4413      	add	r3, r2
 8002686:	3310      	adds	r3, #16
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	4983      	ldr	r1, [pc, #524]	; (800289c <main+0x9d0>)
 800268e:	f017 f81b 	bl	80196c8 <siprintf>
 8002692:	4602      	mov	r2, r0
 8002694:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4413      	add	r3, r2
 800269c:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 80026a0:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < TxDataSpace; i++){
 80026a2:	f641 5354 	movw	r3, #7508	; 0x1d54
 80026a6:	443b      	add	r3, r7
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	f641 5254 	movw	r2, #7508	; 0x1d54
 80026b0:	443a      	add	r2, r7
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	f641 5354 	movw	r3, #7508	; 0x1d54
 80026b8:	443b      	add	r3, r7
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	f641 5314 	movw	r3, #7444	; 0x1d14
 80026c0:	443b      	add	r3, r7
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	dbc6      	blt.n	8002656 <main+0x78a>
          }
          NRF24_write(myTxData, 32);
 80026c8:	2120      	movs	r1, #32
 80026ca:	4873      	ldr	r0, [pc, #460]	; (8002898 <main+0x9cc>)
 80026cc:	f7fe fc64 	bl	8000f98 <NRF24_write>
          Txcnt = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 80026d6:	6013      	str	r3, [r2, #0]
          if(FDBuffer[BuffIndex].length - TxDataSpace > 32){
 80026d8:	4a6d      	ldr	r2, [pc, #436]	; (8002890 <main+0x9c4>)
 80026da:	f641 5370 	movw	r3, #7536	; 0x1d70
 80026de:	443b      	add	r3, r7
 80026e0:	441a      	add	r2, r3
 80026e2:	f641 5364 	movw	r3, #7524	; 0x1d64
 80026e6:	443b      	add	r3, r7
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	460b      	mov	r3, r1
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	4413      	add	r3, r2
 80026f4:	3308      	adds	r3, #8
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	f641 5314 	movw	r3, #7444	; 0x1d14
 80026fc:	443b      	add	r3, r7
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	f240 80ba 	bls.w	800287c <main+0x9b0>
            for(int i = 0; i < 32; i++){
 8002708:	2300      	movs	r3, #0
 800270a:	f641 5250 	movw	r2, #7504	; 0x1d50
 800270e:	443a      	add	r2, r7
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e034      	b.n	800277e <main+0x8b2>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 8002714:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a5f      	ldr	r2, [pc, #380]	; (8002898 <main+0x9cc>)
 800271c:	189c      	adds	r4, r3, r2
 800271e:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002722:	443b      	add	r3, r7
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f641 5314 	movw	r3, #7444	; 0x1d14
 800272a:	443b      	add	r3, r7
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	18d0      	adds	r0, r2, r3
 8002730:	4a57      	ldr	r2, [pc, #348]	; (8002890 <main+0x9c4>)
 8002732:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002736:	443b      	add	r3, r7
 8002738:	441a      	add	r2, r3
 800273a:	f641 5364 	movw	r3, #7524	; 0x1d64
 800273e:	443b      	add	r3, r7
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	460b      	mov	r3, r1
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4413      	add	r3, r2
 800274c:	4403      	add	r3, r0
 800274e:	3310      	adds	r3, #16
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	4951      	ldr	r1, [pc, #324]	; (800289c <main+0x9d0>)
 8002756:	4620      	mov	r0, r4
 8002758:	f016 ffb6 	bl	80196c8 <siprintf>
 800275c:	4602      	mov	r2, r0
 800275e:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4413      	add	r3, r2
 8002766:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 800276a:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < 32; i++){
 800276c:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002770:	443b      	add	r3, r7
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	f641 5250 	movw	r2, #7504	; 0x1d50
 800277a:	443a      	add	r2, r7
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002782:	443b      	add	r3, r7
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b1f      	cmp	r3, #31
 8002788:	ddc4      	ble.n	8002714 <main+0x848>
            }
            Txcnt = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002790:	6013      	str	r3, [r2, #0]
            i++;
 8002792:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002796:	443b      	add	r3, r7
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	f641 5258 	movw	r2, #7512	; 0x1d58
 80027a0:	443a      	add	r2, r7
 80027a2:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 80027a4:	2120      	movs	r1, #32
 80027a6:	483c      	ldr	r0, [pc, #240]	; (8002898 <main+0x9cc>)
 80027a8:	f7fe fbf6 	bl	8000f98 <NRF24_write>
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 80027ac:	2300      	movs	r3, #0
 80027ae:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80027b2:	443a      	add	r2, r7
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e036      	b.n	8002826 <main+0x95a>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace + 32]);
 80027b8:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a36      	ldr	r2, [pc, #216]	; (8002898 <main+0x9cc>)
 80027c0:	189c      	adds	r4, r3, r2
 80027c2:	f641 534c 	movw	r3, #7500	; 0x1d4c
 80027c6:	443b      	add	r3, r7
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	f641 5314 	movw	r3, #7444	; 0x1d14
 80027ce:	443b      	add	r3, r7
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	f103 0020 	add.w	r0, r3, #32
 80027d8:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <main+0x9c4>)
 80027da:	f641 5370 	movw	r3, #7536	; 0x1d70
 80027de:	443b      	add	r3, r7
 80027e0:	441a      	add	r2, r3
 80027e2:	f641 5364 	movw	r3, #7524	; 0x1d64
 80027e6:	443b      	add	r3, r7
 80027e8:	6819      	ldr	r1, [r3, #0]
 80027ea:	460b      	mov	r3, r1
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	4413      	add	r3, r2
 80027f4:	4403      	add	r3, r0
 80027f6:	3310      	adds	r3, #16
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4927      	ldr	r1, [pc, #156]	; (800289c <main+0x9d0>)
 80027fe:	4620      	mov	r0, r4
 8002800:	f016 ff62 	bl	80196c8 <siprintf>
 8002804:	4602      	mov	r2, r0
 8002806:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4413      	add	r3, r2
 800280e:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002812:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8002814:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002818:	443b      	add	r3, r7
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002822:	443a      	add	r2, r7
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <main+0x9c4>)
 8002828:	f641 5370 	movw	r3, #7536	; 0x1d70
 800282c:	443b      	add	r3, r7
 800282e:	441a      	add	r2, r3
 8002830:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002834:	443b      	add	r3, r7
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	460b      	mov	r3, r1
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	4413      	add	r3, r2
 8002842:	3308      	adds	r3, #8
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	f641 5314 	movw	r3, #7444	; 0x1d14
 800284a:	443b      	add	r3, r7
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f103 0220 	add.w	r2, r3, #32
 8002854:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002858:	443b      	add	r3, r7
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d8ab      	bhi.n	80027b8 <main+0x8ec>
            }
            i++;
 8002860:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002864:	443b      	add	r3, r7
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	f641 5258 	movw	r2, #7512	; 0x1d58
 800286e:	443a      	add	r2, r7
 8002870:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 8002872:	2120      	movs	r1, #32
 8002874:	4808      	ldr	r0, [pc, #32]	; (8002898 <main+0x9cc>)
 8002876:	f7fe fb8f 	bl	8000f98 <NRF24_write>
 800287a:	e0dc      	b.n	8002a36 <main+0xb6a>
          }else{
            Txcnt = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002882:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 8002884:	2300      	movs	r3, #0
 8002886:	f641 5248 	movw	r2, #7496	; 0x1d48
 800288a:	443a      	add	r2, r7
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e03c      	b.n	800290a <main+0xa3e>
 8002890:	ffffeff0 	.word	0xffffeff0
 8002894:	0801ad28 	.word	0x0801ad28
 8002898:	24001430 	.word	0x24001430
 800289c:	0801ad30 	.word	0x0801ad30
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 80028a0:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a3c      	ldr	r2, [pc, #240]	; (8002998 <main+0xacc>)
 80028a8:	189c      	adds	r4, r3, r2
 80028aa:	f641 5348 	movw	r3, #7496	; 0x1d48
 80028ae:	443b      	add	r3, r7
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	f641 5314 	movw	r3, #7444	; 0x1d14
 80028b6:	443b      	add	r3, r7
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	18d0      	adds	r0, r2, r3
 80028bc:	4a37      	ldr	r2, [pc, #220]	; (800299c <main+0xad0>)
 80028be:	f641 5370 	movw	r3, #7536	; 0x1d70
 80028c2:	443b      	add	r3, r7
 80028c4:	441a      	add	r2, r3
 80028c6:	f641 5364 	movw	r3, #7524	; 0x1d64
 80028ca:	443b      	add	r3, r7
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	460b      	mov	r3, r1
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	4413      	add	r3, r2
 80028d8:	4403      	add	r3, r0
 80028da:	3310      	adds	r3, #16
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	492f      	ldr	r1, [pc, #188]	; (80029a0 <main+0xad4>)
 80028e2:	4620      	mov	r0, r4
 80028e4:	f016 fef0 	bl	80196c8 <siprintf>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 80028f6:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 80028f8:	f641 5348 	movw	r3, #7496	; 0x1d48
 80028fc:	443b      	add	r3, r7
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	f641 5248 	movw	r2, #7496	; 0x1d48
 8002906:	443a      	add	r2, r7
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4a24      	ldr	r2, [pc, #144]	; (800299c <main+0xad0>)
 800290c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002910:	443b      	add	r3, r7
 8002912:	441a      	add	r2, r3
 8002914:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002918:	443b      	add	r3, r7
 800291a:	6819      	ldr	r1, [r3, #0]
 800291c:	460b      	mov	r3, r1
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	4413      	add	r3, r2
 8002926:	3308      	adds	r3, #8
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	f641 5314 	movw	r3, #7444	; 0x1d14
 800292e:	443b      	add	r3, r7
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	f641 5348 	movw	r3, #7496	; 0x1d48
 8002938:	443b      	add	r3, r7
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d8af      	bhi.n	80028a0 <main+0x9d4>
            }
            i++;
 8002940:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002944:	443b      	add	r3, r7
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	f641 5258 	movw	r2, #7512	; 0x1d58
 800294e:	443a      	add	r2, r7
 8002950:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace);
 8002952:	4a12      	ldr	r2, [pc, #72]	; (800299c <main+0xad0>)
 8002954:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002958:	443b      	add	r3, r7
 800295a:	441a      	add	r2, r3
 800295c:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002960:	443b      	add	r3, r7
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	460b      	mov	r3, r1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	4413      	add	r3, r2
 800296e:	3308      	adds	r3, #8
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002978:	443b      	add	r3, r7
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4619      	mov	r1, r3
 8002984:	4804      	ldr	r0, [pc, #16]	; (8002998 <main+0xacc>)
 8002986:	f7fe fb07 	bl	8000f98 <NRF24_write>
 800298a:	e054      	b.n	8002a36 <main+0xb6a>
          }
        }
        else{
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 800298c:	2300      	movs	r3, #0
 800298e:	f641 5244 	movw	r2, #7492	; 0x1d44
 8002992:	443a      	add	r2, r7
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e034      	b.n	8002a02 <main+0xb36>
 8002998:	24001430 	.word	0x24001430
 800299c:	ffffeff0 	.word	0xffffeff0
 80029a0:	0801ad30 	.word	0x0801ad30
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 80029a4:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4ab0      	ldr	r2, [pc, #704]	; (8002c6c <main+0xda0>)
 80029ac:	1898      	adds	r0, r3, r2
 80029ae:	4ab0      	ldr	r2, [pc, #704]	; (8002c70 <main+0xda4>)
 80029b0:	f641 5370 	movw	r3, #7536	; 0x1d70
 80029b4:	443b      	add	r3, r7
 80029b6:	441a      	add	r2, r3
 80029b8:	f641 5364 	movw	r3, #7524	; 0x1d64
 80029bc:	443b      	add	r3, r7
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	460b      	mov	r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	441a      	add	r2, r3
 80029ca:	f641 5344 	movw	r3, #7492	; 0x1d44
 80029ce:	443b      	add	r3, r7
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	3310      	adds	r3, #16
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	49a6      	ldr	r1, [pc, #664]	; (8002c74 <main+0xda8>)
 80029dc:	f016 fe74 	bl	80196c8 <siprintf>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 80029ee:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 80029f0:	f641 5344 	movw	r3, #7492	; 0x1d44
 80029f4:	443b      	add	r3, r7
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	f641 5244 	movw	r2, #7492	; 0x1d44
 80029fe:	443a      	add	r2, r7
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4a9b      	ldr	r2, [pc, #620]	; (8002c70 <main+0xda4>)
 8002a04:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a08:	443b      	add	r3, r7
 8002a0a:	441a      	add	r2, r3
 8002a0c:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002a10:	443b      	add	r3, r7
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	460b      	mov	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3308      	adds	r3, #8
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	f641 5344 	movw	r3, #7492	; 0x1d44
 8002a26:	443b      	add	r3, r7
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d8ba      	bhi.n	80029a4 <main+0xad8>
          }
          NRF24_write(myTxData, 32);//FDBuffer[BuffIndex].length + (32 - TxDataSpace)
 8002a2e:	2120      	movs	r1, #32
 8002a30:	488e      	ldr	r0, [pc, #568]	; (8002c6c <main+0xda0>)
 8002a32:	f7fe fab1 	bl	8000f98 <NRF24_write>
        }
        BuffIndex++;
 8002a36:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002a3a:	443b      	add	r3, r7
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f641 5264 	movw	r2, #7524	; 0x1d64
 8002a44:	443a      	add	r2, r7
 8002a46:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].id == 0){
 8002a48:	4a89      	ldr	r2, [pc, #548]	; (8002c70 <main+0xda4>)
 8002a4a:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a4e:	443b      	add	r3, r7
 8002a50:	441a      	add	r2, r3
 8002a52:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002a56:	443b      	add	r3, r7
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	4413      	add	r3, r2
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <main+0xba8>
          BuffIndex = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f641 5264 	movw	r2, #7524	; 0x1d64
 8002a70:	443a      	add	r2, r7
 8002a72:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < AllowedTele; i++){
 8002a74:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002a78:	443b      	add	r3, r7
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f641 5258 	movw	r2, #7512	; 0x1d58
 8002a82:	443a      	add	r2, r7
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002a8a:	443b      	add	r3, r7
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002a92:	443b      	add	r3, r7
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	f6ff ad90 	blt.w	80025bc <main+0x6f0>


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/

	  if(FDCAN_Flag){
 8002a9c:	4b76      	ldr	r3, [pc, #472]	; (8002c78 <main+0xdac>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 81e8 	beq.w	8002e76 <main+0xfaa>

		  RTC_TimeTypeDef lTime = sTime;
 8002aa6:	4b75      	ldr	r3, [pc, #468]	; (8002c7c <main+0xdb0>)
 8002aa8:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002aac:	443a      	add	r2, r7
 8002aae:	4413      	add	r3, r2
 8002ab0:	4a73      	ldr	r2, [pc, #460]	; (8002c80 <main+0xdb4>)
 8002ab2:	461c      	mov	r4, r3
 8002ab4:	4615      	mov	r5, r2
 8002ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8002abe:	4b71      	ldr	r3, [pc, #452]	; (8002c84 <main+0xdb8>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002ac6:	443a      	add	r2, r7
 8002ac8:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002aca:	4b6c      	ldr	r3, [pc, #432]	; (8002c7c <main+0xdb0>)
 8002acc:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ad0:	443a      	add	r2, r7
 8002ad2:	4413      	add	r3, r2
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002ada:	443b      	add	r3, r7
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <main+0xdbc>)
 8002ae0:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aea:	fb00 f303 	mul.w	r3, r0, r3
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	18ca      	adds	r2, r1, r3
 8002af2:	4b62      	ldr	r3, [pc, #392]	; (8002c7c <main+0xdb0>)
 8002af4:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002af8:	4439      	add	r1, r7
 8002afa:	440b      	add	r3, r1
 8002afc:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002afe:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b02:	443b      	add	r3, r7
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a60      	ldr	r2, [pc, #384]	; (8002c88 <main+0xdbc>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002b12:	443a      	add	r2, r7
 8002b14:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002b16:	4b59      	ldr	r3, [pc, #356]	; (8002c7c <main+0xdb0>)
 8002b18:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b1c:	443a      	add	r2, r7
 8002b1e:	4413      	add	r3, r2
 8002b20:	7898      	ldrb	r0, [r3, #2]
 8002b22:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b26:	443b      	add	r3, r7
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	4b58      	ldr	r3, [pc, #352]	; (8002c8c <main+0xdc0>)
 8002b2c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b30:	095a      	lsrs	r2, r3, #5
 8002b32:	4613      	mov	r3, r2
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	1aca      	subs	r2, r1, r3
 8002b3c:	b2d3      	uxtb	r3, r2
 8002b3e:	4403      	add	r3, r0
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4b4e      	ldr	r3, [pc, #312]	; (8002c7c <main+0xdb0>)
 8002b44:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002b48:	4439      	add	r1, r7
 8002b4a:	440b      	add	r3, r1
 8002b4c:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002b4e:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b52:	443b      	add	r3, r7
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a4d      	ldr	r2, [pc, #308]	; (8002c8c <main+0xdc0>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002b62:	443a      	add	r2, r7
 8002b64:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002b66:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <main+0xdb0>)
 8002b68:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b6c:	443a      	add	r2, r7
 8002b6e:	4413      	add	r3, r2
 8002b70:	7858      	ldrb	r0, [r3, #1]
 8002b72:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002b76:	443b      	add	r3, r7
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <main+0xdc0>)
 8002b7c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b80:	095a      	lsrs	r2, r3, #5
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	1aca      	subs	r2, r1, r3
 8002b8c:	b2d3      	uxtb	r3, r2
 8002b8e:	4403      	add	r3, r0
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <main+0xdb0>)
 8002b94:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002b98:	4439      	add	r1, r7
 8002b9a:	440b      	add	r3, r1
 8002b9c:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002b9e:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002ba2:	443b      	add	r3, r7
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <main+0xdc0>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002bb2:	443a      	add	r2, r7
 8002bb4:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002bb6:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <main+0xdb0>)
 8002bb8:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002bbc:	443a      	add	r2, r7
 8002bbe:	4413      	add	r3, r2
 8002bc0:	7818      	ldrb	r0, [r3, #0]
 8002bc2:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002bc6:	443b      	add	r3, r7
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <main+0xdc0>)
 8002bcc:	fba3 2301 	umull	r2, r3, r3, r1
 8002bd0:	095a      	lsrs	r2, r3, #5
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	1aca      	subs	r2, r1, r3
 8002bdc:	b2d3      	uxtb	r3, r2
 8002bde:	4403      	add	r3, r0
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <main+0xdb0>)
 8002be4:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002be8:	4439      	add	r1, r7
 8002bea:	440b      	add	r3, r1
 8002bec:	701a      	strb	r2, [r3, #0]
      //Write to SD Card
		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <main+0xdc4>)
 8002bf0:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bf2:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bf4:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <main+0xdc4>)
 8002bf6:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bf8:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bfa:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <main+0xdc4>)
 8002bfc:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bfe:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <main+0xdb0>)
 8002c02:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c06:	443a      	add	r2, r7
 8002c08:	4413      	add	r3, r2
 8002c0a:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c0c:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <main+0xdb0>)
 8002c10:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c14:	443a      	add	r2, r7
 8002c16:	4413      	add	r3, r2
 8002c18:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c1a:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c1c:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <main+0xdb0>)
 8002c1e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c22:	443a      	add	r2, r7
 8002c24:	4413      	add	r3, r2
 8002c26:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c28:	461e      	mov	r6, r3
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <main+0xdb0>)
 8002c2c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c30:	443a      	add	r2, r7
 8002c32:	4413      	add	r3, r2
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <main+0xdb8>)
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	4816      	ldr	r0, [pc, #88]	; (8002c94 <main+0xdc8>)
 8002c3c:	f641 5870 	movw	r8, #7536	; 0x1d70
 8002c40:	44b8      	add	r8, r7
 8002c42:	4440      	add	r0, r8
 8002c44:	9205      	str	r2, [sp, #20]
 8002c46:	9304      	str	r3, [sp, #16]
 8002c48:	9603      	str	r6, [sp, #12]
 8002c4a:	9502      	str	r5, [sp, #8]
 8002c4c:	9401      	str	r4, [sp, #4]
 8002c4e:	9100      	str	r1, [sp, #0]
 8002c50:	4673      	mov	r3, lr
 8002c52:	4662      	mov	r2, ip
 8002c54:	4910      	ldr	r1, [pc, #64]	; (8002c98 <main+0xdcc>)
 8002c56:	f016 fd37 	bl	80196c8 <siprintf>
 8002c5a:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002c5e:	443b      	add	r3, r7
 8002c60:	6018      	str	r0, [r3, #0]
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002c62:	2300      	movs	r3, #0
 8002c64:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e03d      	b.n	8002ce8 <main+0xe1c>
 8002c6c:	24001430 	.word	0x24001430
 8002c70:	ffffeff0 	.word	0xffffeff0
 8002c74:	0801ad30 	.word	0x0801ad30
 8002c78:	240001fc 	.word	0x240001fc
 8002c7c:	ffffe724 	.word	0xffffe724
 8002c80:	24000b30 	.word	0x24000b30
 8002c84:	24001040 	.word	0x24001040
 8002c88:	10624dd3 	.word	0x10624dd3
 8002c8c:	88888889 	.word	0x88888889
 8002c90:	24000b44 	.word	0x24000b44
 8002c94:	ffffe758 	.word	0xffffe758
 8002c98:	0801ad34 	.word	0x0801ad34
			  CFDW += sprintf(CanFDWrite + CFDW, "%c", CanFDFrame.data.bytes[i]);
 8002c9c:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002ca0:	443b      	add	r3, r7
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <main+0xf4c>)
 8002ca6:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002caa:	4439      	add	r1, r7
 8002cac:	440b      	add	r3, r1
 8002cae:	1898      	adds	r0, r3, r2
 8002cb0:	4a5a      	ldr	r2, [pc, #360]	; (8002e1c <main+0xf50>)
 8002cb2:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	3310      	adds	r3, #16
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4957      	ldr	r1, [pc, #348]	; (8002e20 <main+0xf54>)
 8002cc2:	f016 fd01 	bl	80196c8 <siprintf>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002ccc:	443b      	add	r3, r7
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002cd6:	443a      	add	r2, r7
 8002cd8:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002cda:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b4c      	ldr	r3, [pc, #304]	; (8002e1c <main+0xf50>)
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d8d2      	bhi.n	8002c9c <main+0xdd0>
		  }
		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 8002cf6:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002cfa:	443b      	add	r3, r7
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <main+0xf4c>)
 8002d00:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002d04:	4439      	add	r1, r7
 8002d06:	440b      	add	r3, r1
 8002d08:	4413      	add	r3, r2
 8002d0a:	4a46      	ldr	r2, [pc, #280]	; (8002e24 <main+0xf58>)
 8002d0c:	8811      	ldrh	r1, [r2, #0]
 8002d0e:	7892      	ldrb	r2, [r2, #2]
 8002d10:	8019      	strh	r1, [r3, #0]
 8002d12:	709a      	strb	r2, [r3, #2]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d1a:	443b      	add	r3, r7
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d24:	443a      	add	r2, r7
 8002d26:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanFDWrite, CFDW);
 8002d28:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <main+0xf4c>)
 8002d2a:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002d2e:	443a      	add	r2, r7
 8002d30:	4413      	add	r3, r2
 8002d32:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d36:	443a      	add	r2, r7
 8002d38:	6811      	ldr	r1, [r2, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff f81e 	bl	8001d7c <WriteToBuff>

      //Write to telemetry buffer
      
      for(int i = 0; i <50; i++){
 8002d40:	2300      	movs	r3, #0
 8002d42:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002d46:	443a      	add	r2, r7
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e089      	b.n	8002e60 <main+0xf94>
        if(CanFDFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8002d4c:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <main+0xf50>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <main+0xf5c>)
 8002d52:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002d56:	4439      	add	r1, r7
 8002d58:	440b      	add	r3, r1
 8002d5a:	f641 513c 	movw	r1, #7484	; 0x1d3c
 8002d5e:	4439      	add	r1, r7
 8002d60:	6809      	ldr	r1, [r1, #0]
 8002d62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d171      	bne.n	8002e4e <main+0xf82>
          for(int j = 0; j < 50; j++){
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002d70:	443a      	add	r2, r7
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e065      	b.n	8002e42 <main+0xf76>
            if(FDBuffer[j].id == CanFDFrame.id){
 8002d76:	4a2d      	ldr	r2, [pc, #180]	; (8002e2c <main+0xf60>)
 8002d78:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002d7c:	443b      	add	r3, r7
 8002d7e:	441a      	add	r2, r3
 8002d80:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002d84:	443b      	add	r3, r7
 8002d86:	6819      	ldr	r1, [r3, #0]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	4413      	add	r3, r2
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <main+0xf50>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d115      	bne.n	8002dc8 <main+0xefc>
              FDBuffer[j] = CanFDFrame;
 8002d9c:	4a23      	ldr	r2, [pc, #140]	; (8002e2c <main+0xf60>)
 8002d9e:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002da2:	443b      	add	r3, r7
 8002da4:	441a      	add	r2, r3
 8002da6:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002daa:	443b      	add	r3, r7
 8002dac:	6819      	ldr	r1, [r3, #0]
 8002dae:	460b      	mov	r3, r1
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	4413      	add	r3, r2
 8002db8:	4a18      	ldr	r2, [pc, #96]	; (8002e1c <main+0xf50>)
 8002dba:	4618      	mov	r0, r3
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	2350      	movs	r3, #80	; 0x50
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f016 fb05 	bl	80193d0 <memcpy>
              goto TeleDoneFD;
 8002dc6:	e053      	b.n	8002e70 <main+0xfa4>
            }
            if(FDBuffer[j].id == 0){
 8002dc8:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <main+0xf60>)
 8002dca:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002dce:	443b      	add	r3, r7
 8002dd0:	441a      	add	r2, r3
 8002dd2:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002dd6:	443b      	add	r3, r7
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	4413      	add	r3, r2
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d122      	bne.n	8002e30 <main+0xf64>
              FDBuffer[j] = CanFDFrame;
 8002dea:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <main+0xf60>)
 8002dec:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002df0:	443b      	add	r3, r7
 8002df2:	441a      	add	r2, r3
 8002df4:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002df8:	443b      	add	r3, r7
 8002dfa:	6819      	ldr	r1, [r3, #0]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	4413      	add	r3, r2
 8002e06:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <main+0xf50>)
 8002e08:	4618      	mov	r0, r3
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	2350      	movs	r3, #80	; 0x50
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f016 fade 	bl	80193d0 <memcpy>
              goto TeleDoneFD;
 8002e14:	e02c      	b.n	8002e70 <main+0xfa4>
 8002e16:	bf00      	nop
 8002e18:	ffffe758 	.word	0xffffe758
 8002e1c:	24001040 	.word	0x24001040
 8002e20:	0801ad30 	.word	0x0801ad30
 8002e24:	0801ad50 	.word	0x0801ad50
 8002e28:	ffffea78 	.word	0xffffea78
 8002e2c:	ffffeff0 	.word	0xffffeff0
          for(int j = 0; j < 50; j++){
 8002e30:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e34:	443b      	add	r3, r7
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002e3e:	443a      	add	r2, r7
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e46:	443b      	add	r3, r7
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b31      	cmp	r3, #49	; 0x31
 8002e4c:	dd93      	ble.n	8002d76 <main+0xeaa>
      for(int i = 0; i <50; i++){
 8002e4e:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002e52:	443b      	add	r3, r7
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3301      	adds	r3, #1
 8002e58:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002e5c:	443a      	add	r2, r7
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002e64:	443b      	add	r3, r7
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b31      	cmp	r3, #49	; 0x31
 8002e6a:	f77f af6f 	ble.w	8002d4c <main+0xe80>
            }
          }
        }
      }
TeleDoneFD:
 8002e6e:	bf00      	nop
		  FDCAN_Flag = 0;
 8002e70:	4bae      	ldr	r3, [pc, #696]	; (800312c <main+0x1260>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 8002e76:	4bae      	ldr	r3, [pc, #696]	; (8003130 <main+0x1264>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 81df 	beq.w	800323e <main+0x1372>

		  RTC_TimeTypeDef lTime = sTime;
 8002e80:	4bac      	ldr	r3, [pc, #688]	; (8003134 <main+0x1268>)
 8002e82:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002e86:	443a      	add	r2, r7
 8002e88:	4413      	add	r3, r2
 8002e8a:	4aab      	ldr	r2, [pc, #684]	; (8003138 <main+0x126c>)
 8002e8c:	461c      	mov	r4, r3
 8002e8e:	4615      	mov	r5, r2
 8002e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e94:	682b      	ldr	r3, [r5, #0]
 8002e96:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 8002e98:	4ba8      	ldr	r3, [pc, #672]	; (800313c <main+0x1270>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002ea0:	443a      	add	r2, r7
 8002ea2:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002ea4:	4ba3      	ldr	r3, [pc, #652]	; (8003134 <main+0x1268>)
 8002ea6:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002eaa:	443a      	add	r2, r7
 8002eac:	4413      	add	r3, r2
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002eb4:	443b      	add	r3, r7
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4ba1      	ldr	r3, [pc, #644]	; (8003140 <main+0x1274>)
 8002eba:	fba3 0302 	umull	r0, r3, r3, r2
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ec4:	fb00 f303 	mul.w	r3, r0, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	18ca      	adds	r2, r1, r3
 8002ecc:	4b99      	ldr	r3, [pc, #612]	; (8003134 <main+0x1268>)
 8002ece:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002ed2:	4439      	add	r1, r7
 8002ed4:	440b      	add	r3, r1
 8002ed6:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002ed8:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002edc:	443b      	add	r3, r7
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a97      	ldr	r2, [pc, #604]	; (8003140 <main+0x1274>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002eec:	443a      	add	r2, r7
 8002eee:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002ef0:	4b90      	ldr	r3, [pc, #576]	; (8003134 <main+0x1268>)
 8002ef2:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ef6:	443a      	add	r2, r7
 8002ef8:	4413      	add	r3, r2
 8002efa:	7898      	ldrb	r0, [r3, #2]
 8002efc:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002f00:	443b      	add	r3, r7
 8002f02:	6819      	ldr	r1, [r3, #0]
 8002f04:	4b8f      	ldr	r3, [pc, #572]	; (8003144 <main+0x1278>)
 8002f06:	fba3 2301 	umull	r2, r3, r3, r1
 8002f0a:	095a      	lsrs	r2, r3, #5
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	1aca      	subs	r2, r1, r3
 8002f16:	b2d3      	uxtb	r3, r2
 8002f18:	4403      	add	r3, r0
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	4b85      	ldr	r3, [pc, #532]	; (8003134 <main+0x1268>)
 8002f1e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002f22:	4439      	add	r1, r7
 8002f24:	440b      	add	r3, r1
 8002f26:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002f28:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002f2c:	443b      	add	r3, r7
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a84      	ldr	r2, [pc, #528]	; (8003144 <main+0x1278>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002f3c:	443a      	add	r2, r7
 8002f3e:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002f40:	4b7c      	ldr	r3, [pc, #496]	; (8003134 <main+0x1268>)
 8002f42:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002f46:	443a      	add	r2, r7
 8002f48:	4413      	add	r3, r2
 8002f4a:	7858      	ldrb	r0, [r3, #1]
 8002f4c:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002f50:	443b      	add	r3, r7
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <main+0x1278>)
 8002f56:	fba3 2301 	umull	r2, r3, r3, r1
 8002f5a:	095a      	lsrs	r2, r3, #5
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	1aca      	subs	r2, r1, r3
 8002f66:	b2d3      	uxtb	r3, r2
 8002f68:	4403      	add	r3, r0
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	4b71      	ldr	r3, [pc, #452]	; (8003134 <main+0x1268>)
 8002f6e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002f72:	4439      	add	r1, r7
 8002f74:	440b      	add	r3, r1
 8002f76:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002f78:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002f7c:	443b      	add	r3, r7
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a70      	ldr	r2, [pc, #448]	; (8003144 <main+0x1278>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002f8c:	443a      	add	r2, r7
 8002f8e:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002f90:	4b68      	ldr	r3, [pc, #416]	; (8003134 <main+0x1268>)
 8002f92:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002f96:	443a      	add	r2, r7
 8002f98:	4413      	add	r3, r2
 8002f9a:	7818      	ldrb	r0, [r3, #0]
 8002f9c:	f641 531c 	movw	r3, #7452	; 0x1d1c
 8002fa0:	443b      	add	r3, r7
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	4b67      	ldr	r3, [pc, #412]	; (8003144 <main+0x1278>)
 8002fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8002faa:	095a      	lsrs	r2, r3, #5
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	1aca      	subs	r2, r1, r3
 8002fb6:	b2d3      	uxtb	r3, r2
 8002fb8:	4403      	add	r3, r0
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	4b5d      	ldr	r3, [pc, #372]	; (8003134 <main+0x1268>)
 8002fbe:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002fc2:	4439      	add	r1, r7
 8002fc4:	440b      	add	r3, r1
 8002fc6:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fc8:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <main+0x127c>)
 8002fca:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fcc:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fce:	4b5e      	ldr	r3, [pc, #376]	; (8003148 <main+0x127c>)
 8002fd0:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fd2:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fd4:	4b5c      	ldr	r3, [pc, #368]	; (8003148 <main+0x127c>)
 8002fd6:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fd8:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fda:	4b56      	ldr	r3, [pc, #344]	; (8003134 <main+0x1268>)
 8002fdc:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002fe0:	443a      	add	r2, r7
 8002fe2:	4413      	add	r3, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fe6:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fe8:	4b52      	ldr	r3, [pc, #328]	; (8003134 <main+0x1268>)
 8002fea:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002fee:	443a      	add	r2, r7
 8002ff0:	4413      	add	r3, r2
 8002ff2:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002ff4:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002ff6:	4b4f      	ldr	r3, [pc, #316]	; (8003134 <main+0x1268>)
 8002ff8:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ffc:	443a      	add	r2, r7
 8002ffe:	4413      	add	r3, r2
 8003000:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003002:	461e      	mov	r6, r3
 8003004:	4b4b      	ldr	r3, [pc, #300]	; (8003134 <main+0x1268>)
 8003006:	f641 5270 	movw	r2, #7536	; 0x1d70
 800300a:	443a      	add	r2, r7
 800300c:	4413      	add	r3, r2
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a4a      	ldr	r2, [pc, #296]	; (800313c <main+0x1270>)
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	484d      	ldr	r0, [pc, #308]	; (800314c <main+0x1280>)
 8003016:	f641 5870 	movw	r8, #7536	; 0x1d70
 800301a:	44b8      	add	r8, r7
 800301c:	4440      	add	r0, r8
 800301e:	9205      	str	r2, [sp, #20]
 8003020:	9304      	str	r3, [sp, #16]
 8003022:	9603      	str	r6, [sp, #12]
 8003024:	9502      	str	r5, [sp, #8]
 8003026:	9401      	str	r4, [sp, #4]
 8003028:	9100      	str	r1, [sp, #0]
 800302a:	4673      	mov	r3, lr
 800302c:	4662      	mov	r2, ip
 800302e:	4948      	ldr	r1, [pc, #288]	; (8003150 <main+0x1284>)
 8003030:	f016 fb4a 	bl	80196c8 <siprintf>
 8003034:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003038:	443b      	add	r3, r7
 800303a:	6018      	str	r0, [r3, #0]
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 800303c:	2300      	movs	r3, #0
 800303e:	f641 5234 	movw	r2, #7476	; 0x1d34
 8003042:	443a      	add	r2, r7
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e028      	b.n	800309a <main+0x11ce>
			  CW += sprintf(CanWrite + CW, "%c", CanFrame.data.bytes[i]);
 8003048:	f641 536c 	movw	r3, #7532	; 0x1d6c
 800304c:	443b      	add	r3, r7
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b3e      	ldr	r3, [pc, #248]	; (800314c <main+0x1280>)
 8003052:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003056:	4439      	add	r1, r7
 8003058:	440b      	add	r3, r1
 800305a:	1898      	adds	r0, r3, r2
 800305c:	4a37      	ldr	r2, [pc, #220]	; (800313c <main+0x1270>)
 800305e:	f641 5334 	movw	r3, #7476	; 0x1d34
 8003062:	443b      	add	r3, r7
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4413      	add	r3, r2
 8003068:	3310      	adds	r3, #16
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4939      	ldr	r1, [pc, #228]	; (8003154 <main+0x1288>)
 8003070:	f016 fb2a 	bl	80196c8 <siprintf>
 8003074:	4602      	mov	r2, r0
 8003076:	f641 536c 	movw	r3, #7532	; 0x1d6c
 800307a:	443b      	add	r3, r7
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4413      	add	r3, r2
 8003080:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8003084:	443a      	add	r2, r7
 8003086:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 8003088:	f641 5334 	movw	r3, #7476	; 0x1d34
 800308c:	443b      	add	r3, r7
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3301      	adds	r3, #1
 8003092:	f641 5234 	movw	r2, #7476	; 0x1d34
 8003096:	443a      	add	r2, r7
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <main+0x128c>)
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	f641 5334 	movw	r3, #7476	; 0x1d34
 80030a2:	443b      	add	r3, r7
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d8ce      	bhi.n	8003048 <main+0x117c>
		  }
		  CW += sprintf(CanWrite + CW, "\n\r");
 80030aa:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80030ae:	443b      	add	r3, r7
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b26      	ldr	r3, [pc, #152]	; (800314c <main+0x1280>)
 80030b4:	f641 5170 	movw	r1, #7536	; 0x1d70
 80030b8:	4439      	add	r1, r7
 80030ba:	440b      	add	r3, r1
 80030bc:	4413      	add	r3, r2
 80030be:	4a27      	ldr	r2, [pc, #156]	; (800315c <main+0x1290>)
 80030c0:	8811      	ldrh	r1, [r2, #0]
 80030c2:	7892      	ldrb	r2, [r2, #2]
 80030c4:	8019      	strh	r1, [r3, #0]
 80030c6:	709a      	strb	r2, [r3, #2]
 80030c8:	2202      	movs	r2, #2
 80030ca:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80030ce:	443b      	add	r3, r7
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4413      	add	r3, r2
 80030d4:	f641 526c 	movw	r2, #7532	; 0x1d6c
 80030d8:	443a      	add	r2, r7
 80030da:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanWrite, CW);
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <main+0x1280>)
 80030de:	f641 5270 	movw	r2, #7536	; 0x1d70
 80030e2:	443a      	add	r2, r7
 80030e4:	4413      	add	r3, r2
 80030e6:	f641 526c 	movw	r2, #7532	; 0x1d6c
 80030ea:	443a      	add	r2, r7
 80030ec:	6811      	ldr	r1, [r2, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe fe44 	bl	8001d7c <WriteToBuff>

      for(int i = 0; i <50; i++){
 80030f4:	2300      	movs	r3, #0
 80030f6:	f641 5230 	movw	r2, #7472	; 0x1d30
 80030fa:	443a      	add	r2, r7
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e091      	b.n	8003224 <main+0x1358>
        if(CanFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <main+0x1270>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b16      	ldr	r3, [pc, #88]	; (8003160 <main+0x1294>)
 8003106:	f641 5170 	movw	r1, #7536	; 0x1d70
 800310a:	4439      	add	r1, r7
 800310c:	440b      	add	r3, r1
 800310e:	f641 5130 	movw	r1, #7472	; 0x1d30
 8003112:	4439      	add	r1, r7
 8003114:	6809      	ldr	r1, [r1, #0]
 8003116:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800311a:	429a      	cmp	r2, r3
 800311c:	d179      	bne.n	8003212 <main+0x1346>
          for(int j = 0; j < 50; j++){
 800311e:	2300      	movs	r3, #0
 8003120:	f641 522c 	movw	r2, #7468	; 0x1d2c
 8003124:	443a      	add	r2, r7
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e06d      	b.n	8003206 <main+0x133a>
 800312a:	bf00      	nop
 800312c:	240001fc 	.word	0x240001fc
 8003130:	24000200 	.word	0x24000200
 8003134:	ffffe710 	.word	0xffffe710
 8003138:	24000b30 	.word	0x24000b30
 800313c:	240010b8 	.word	0x240010b8
 8003140:	10624dd3 	.word	0x10624dd3
 8003144:	88888889 	.word	0x88888889
 8003148:	24000b44 	.word	0x24000b44
 800314c:	ffffe8e8 	.word	0xffffe8e8
 8003150:	0801ad34 	.word	0x0801ad34
 8003154:	0801ad30 	.word	0x0801ad30
 8003158:	24001040 	.word	0x24001040
 800315c:	0801ad50 	.word	0x0801ad50
 8003160:	ffffea78 	.word	0xffffea78
            if(Buffer[j].id == CanFrame.id){
 8003164:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8003168:	f641 532c 	movw	r3, #7468	; 0x1d2c
 800316c:	443b      	add	r3, r7
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b38      	ldr	r3, [pc, #224]	; (8003260 <main+0x1394>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d114      	bne.n	80031ae <main+0x12e2>
              Buffer[j] = CanFrame;     //if its already in the buffer replace it
 8003184:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8003188:	f641 532c 	movw	r3, #7468	; 0x1d2c
 800318c:	443b      	add	r3, r7
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	4a31      	ldr	r2, [pc, #196]	; (8003260 <main+0x1394>)
 800319c:	461c      	mov	r4, r3
 800319e:	4615      	mov	r5, r2
 80031a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031a8:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 80031ac:	e044      	b.n	8003238 <main+0x136c>
            }
            if(Buffer[j].id == 0){
 80031ae:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031b2:	f641 532c 	movw	r3, #7468	; 0x1d2c
 80031b6:	443b      	add	r3, r7
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d114      	bne.n	80031f4 <main+0x1328>
              Buffer[j] = CanFrame;     //if you get to the end of the defined packets withoout finding anything add the packet on the end
 80031ca:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031ce:	f641 532c 	movw	r3, #7468	; 0x1d2c
 80031d2:	443b      	add	r3, r7
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <main+0x1394>)
 80031e2:	461c      	mov	r4, r3
 80031e4:	4615      	mov	r5, r2
 80031e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031ee:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 80031f2:	e021      	b.n	8003238 <main+0x136c>
          for(int j = 0; j < 50; j++){
 80031f4:	f641 532c 	movw	r3, #7468	; 0x1d2c
 80031f8:	443b      	add	r3, r7
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	f641 522c 	movw	r2, #7468	; 0x1d2c
 8003202:	443a      	add	r2, r7
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	f641 532c 	movw	r3, #7468	; 0x1d2c
 800320a:	443b      	add	r3, r7
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b31      	cmp	r3, #49	; 0x31
 8003210:	dda8      	ble.n	8003164 <main+0x1298>
      for(int i = 0; i <50; i++){
 8003212:	f641 5330 	movw	r3, #7472	; 0x1d30
 8003216:	443b      	add	r3, r7
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	f641 5230 	movw	r2, #7472	; 0x1d30
 8003220:	443a      	add	r2, r7
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	f641 5330 	movw	r3, #7472	; 0x1d30
 8003228:	443b      	add	r3, r7
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b31      	cmp	r3, #49	; 0x31
 800322e:	f77f af67 	ble.w	8003100 <main+0x1234>
            }
          }
        }
      }
      printf("couldnt track, id buffer too full :(");
 8003232:	480c      	ldr	r0, [pc, #48]	; (8003264 <main+0x1398>)
 8003234:	f016 f988 	bl	8019548 <iprintf>
TeleDone:
		  CAN_Flag = 0;
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <main+0x139c>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
  while (end_flag){
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <main+0x13a0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f47f a963 	bne.w	800250e <main+0x642>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8003248:	2101      	movs	r1, #1
 800324a:	4809      	ldr	r0, [pc, #36]	; (8003270 <main+0x13a4>)
 800324c:	f004 fea9 	bl	8007fa2 <HAL_GPIO_TogglePin>
 8003250:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 8003252:	4618      	mov	r0, r3
 8003254:	f507 57eb 	add.w	r7, r7, #7520	; 0x1d60
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003260:	240010b8 	.word	0x240010b8
 8003264:	0801ad54 	.word	0x0801ad54
 8003268:	24000200 	.word	0x24000200
 800326c:	24000008 	.word	0x24000008
 8003270:	58020400 	.word	0x58020400

08003274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b0cc      	sub	sp, #304	; 0x130
 8003278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800327a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800327e:	224c      	movs	r2, #76	; 0x4c
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f016 f8af 	bl	80193e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003288:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800328c:	2220      	movs	r2, #32
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f016 f8a8 	bl	80193e6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003296:	f107 0308 	add.w	r3, r7, #8
 800329a:	4618      	mov	r0, r3
 800329c:	23bc      	movs	r3, #188	; 0xbc
 800329e:	461a      	mov	r2, r3
 80032a0:	2100      	movs	r1, #0
 80032a2:	f016 f8a0 	bl	80193e6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80032a6:	2002      	movs	r0, #2
 80032a8:	f006 f976 	bl	8009598 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ac:	1d3b      	adds	r3, r7, #4
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	4b71      	ldr	r3, [pc, #452]	; (8003478 <SystemClock_Config+0x204>)
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	4a70      	ldr	r2, [pc, #448]	; (8003478 <SystemClock_Config+0x204>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032be:	4b6e      	ldr	r3, [pc, #440]	; (8003478 <SystemClock_Config+0x204>)
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	f003 0201 	and.w	r2, r3, #1
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	4b6c      	ldr	r3, [pc, #432]	; (800347c <SystemClock_Config+0x208>)
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	4a6b      	ldr	r2, [pc, #428]	; (800347c <SystemClock_Config+0x208>)
 80032d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d4:	6193      	str	r3, [r2, #24]
 80032d6:	4b69      	ldr	r3, [pc, #420]	; (800347c <SystemClock_Config+0x208>)
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80032e6:	bf00      	nop
 80032e8:	4b64      	ldr	r3, [pc, #400]	; (800347c <SystemClock_Config+0x208>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f4:	d1f8      	bne.n	80032e8 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80032f6:	f006 f8b5 	bl	8009464 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 80032fa:	f001 f941 	bl	8004580 <HAL_GetREVID>
 80032fe:	4b60      	ldr	r3, [pc, #384]	; (8003480 <SystemClock_Config+0x20c>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a5f      	ldr	r2, [pc, #380]	; (8003480 <SystemClock_Config+0x20c>)
 8003304:	f043 0318 	orr.w	r3, r3, #24
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800330a:	4b5d      	ldr	r3, [pc, #372]	; (8003480 <SystemClock_Config+0x20c>)
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	4a5b      	ldr	r2, [pc, #364]	; (8003480 <SystemClock_Config+0x20c>)
 8003314:	f043 0302 	orr.w	r3, r3, #2
 8003318:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800331a:	2325      	movs	r3, #37	; 0x25
 800331c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003324:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003328:	2301      	movs	r3, #1
 800332a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800332e:	2301      	movs	r3, #1
 8003330:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003334:	2302      	movs	r3, #2
 8003336:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800333a:	2302      	movs	r3, #2
 800333c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003340:	2302      	movs	r3, #2
 8003342:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8003346:	2340      	movs	r3, #64	; 0x40
 8003348:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800334c:	2302      	movs	r3, #2
 800334e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8003352:	230a      	movs	r3, #10
 8003354:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003358:	2302      	movs	r3, #2
 800335a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800335e:	230c      	movs	r3, #12
 8003360:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003370:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003374:	4618      	mov	r0, r3
 8003376:	f006 f99d 	bl	80096b4 <HAL_RCC_OscConfig>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8003380:	f000 fbe8 	bl	8003b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003384:	233f      	movs	r3, #63	; 0x3f
 8003386:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800338a:	2303      	movs	r3, #3
 800338c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003396:	2308      	movs	r3, #8
 8003398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800339c:	2340      	movs	r3, #64	; 0x40
 800339e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80033a2:	2340      	movs	r3, #64	; 0x40
 80033a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80033a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80033b0:	2340      	movs	r3, #64	; 0x40
 80033b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033ba:	2102      	movs	r1, #2
 80033bc:	4618      	mov	r0, r3
 80033be:	f006 fd89 	bl	8009ed4 <HAL_RCC_ClockConfig>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <SystemClock_Config+0x158>
  {
    Error_Handler();
 80033c8:	f000 fbc4 	bl	8003b54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	4a2c      	ldr	r2, [pc, #176]	; (8003484 <SystemClock_Config+0x210>)
 80033d2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80033d4:	f107 0308 	add.w	r3, r7, #8
 80033d8:	2202      	movs	r2, #2
 80033da:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80033dc:	f107 0308 	add.w	r3, r7, #8
 80033e0:	220c      	movs	r2, #12
 80033e2:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80033e4:	f107 0308 	add.w	r3, r7, #8
 80033e8:	2203      	movs	r2, #3
 80033ea:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80033ec:	f107 0308 	add.w	r3, r7, #8
 80033f0:	2202      	movs	r2, #2
 80033f2:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 80033f4:	f107 0308 	add.w	r3, r7, #8
 80033f8:	2203      	movs	r2, #3
 80033fa:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80033fc:	f107 0308 	add.w	r3, r7, #8
 8003400:	22c0      	movs	r2, #192	; 0xc0
 8003402:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003404:	f107 0308 	add.w	r3, r7, #8
 8003408:	2220      	movs	r2, #32
 800340a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800340c:	f107 0308 	add.w	r3, r7, #8
 8003410:	2200      	movs	r2, #0
 8003412:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8003414:	f107 0308 	add.w	r3, r7, #8
 8003418:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800341c:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800341e:	f107 0308 	add.w	r3, r7, #8
 8003422:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003426:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003428:	f107 0308 	add.w	r3, r7, #8
 800342c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003430:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003432:	f107 0308 	add.w	r3, r7, #8
 8003436:	2200      	movs	r2, #0
 8003438:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800343a:	f107 0308 	add.w	r3, r7, #8
 800343e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8003442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003446:	f107 0308 	add.w	r3, r7, #8
 800344a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800344e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003452:	f107 0308 	add.w	r3, r7, #8
 8003456:	4618      	mov	r0, r3
 8003458:	f007 f8ec 	bl	800a634 <HAL_RCCEx_PeriphCLKConfig>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 8003462:	f000 fb77 	bl	8003b54 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003466:	f006 feeb 	bl	800a240 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800346a:	f006 f8cf 	bl	800960c <HAL_PWREx_EnableUSBVoltageDetector>
}
 800346e:	bf00      	nop
 8003470:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	58000400 	.word	0x58000400
 800347c:	58024800 	.word	0x58024800
 8003480:	58024400 	.word	0x58024400
 8003484:	00459002 	.word	0x00459002

08003488 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800348c:	4b2f      	ldr	r3, [pc, #188]	; (800354c <MX_FDCAN1_Init+0xc4>)
 800348e:	4a30      	ldr	r2, [pc, #192]	; (8003550 <MX_FDCAN1_Init+0xc8>)
 8003490:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003492:	4b2e      	ldr	r3, [pc, #184]	; (800354c <MX_FDCAN1_Init+0xc4>)
 8003494:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003498:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <MX_FDCAN1_Init+0xc4>)
 800349c:	2200      	movs	r2, #0
 800349e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80034a0:	4b2a      	ldr	r3, [pc, #168]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80034a6:	4b29      	ldr	r3, [pc, #164]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80034ac:	4b27      	ldr	r3, [pc, #156]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 80034b8:	4b24      	ldr	r3, [pc, #144]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034ba:	2217      	movs	r2, #23
 80034bc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 80034be:	4b23      	ldr	r3, [pc, #140]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034c0:	2238      	movs	r2, #56	; 0x38
 80034c2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 80034c4:	4b21      	ldr	r3, [pc, #132]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034c6:	2217      	movs	r2, #23
 80034c8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80034ca:	4b20      	ldr	r3, [pc, #128]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034d2:	2205      	movs	r2, #5
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034d8:	220a      	movs	r2, #10
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034de:	2205      	movs	r2, #5
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 80034e8:	4b18      	ldr	r3, [pc, #96]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034ea:	2202      	movs	r2, #2
 80034ec:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 80034ee:	4b17      	ldr	r3, [pc, #92]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034f0:	2202      	movs	r2, #2
 80034f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80034f4:	4b15      	ldr	r3, [pc, #84]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034f6:	2240      	movs	r2, #64	; 0x40
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <MX_FDCAN1_Init+0xc4>)
 80034fc:	2212      	movs	r2, #18
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <MX_FDCAN1_Init+0xc4>)
 8003502:	2200      	movs	r2, #0
 8003504:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <MX_FDCAN1_Init+0xc4>)
 8003508:	2204      	movs	r2, #4
 800350a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <MX_FDCAN1_Init+0xc4>)
 800350e:	2200      	movs	r2, #0
 8003510:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <MX_FDCAN1_Init+0xc4>)
 8003514:	2204      	movs	r2, #4
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <MX_FDCAN1_Init+0xc4>)
 800351a:	2200      	movs	r2, #0
 800351c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800351e:	4b0b      	ldr	r3, [pc, #44]	; (800354c <MX_FDCAN1_Init+0xc4>)
 8003520:	2200      	movs	r2, #0
 8003522:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <MX_FDCAN1_Init+0xc4>)
 8003526:	2200      	movs	r2, #0
 8003528:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <MX_FDCAN1_Init+0xc4>)
 800352c:	2200      	movs	r2, #0
 800352e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <MX_FDCAN1_Init+0xc4>)
 8003532:	2204      	movs	r2, #4
 8003534:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003536:	4805      	ldr	r0, [pc, #20]	; (800354c <MX_FDCAN1_Init+0xc4>)
 8003538:	f003 fa16 	bl	8006968 <HAL_FDCAN_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8003542:	f000 fb07 	bl	8003b54 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	240014f4 	.word	0x240014f4
 8003550:	4000a000 	.word	0x4000a000

08003554 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003558:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 800355a:	4a2f      	ldr	r2, [pc, #188]	; (8003618 <MX_FDCAN2_Init+0xc4>)
 800355c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800355e:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003564:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 8003566:	2200      	movs	r2, #0
 8003568:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800356a:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 800356c:	2200      	movs	r2, #0
 800356e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003570:	4b28      	ldr	r3, [pc, #160]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 8003572:	2200      	movs	r2, #0
 8003574:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8003576:	4b27      	ldr	r3, [pc, #156]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 8003578:	2200      	movs	r2, #0
 800357a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 800357e:	2201      	movs	r2, #1
 8003580:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 8003584:	2201      	movs	r2, #1
 8003586:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 800358a:	2202      	movs	r2, #2
 800358c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800358e:	4b21      	ldr	r3, [pc, #132]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 8003590:	2202      	movs	r2, #2
 8003592:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003594:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 8003596:	2201      	movs	r2, #1
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 800359c:	2201      	movs	r2, #1
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80035a0:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80035b8:	4b16      	ldr	r3, [pc, #88]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80035c4:	4b13      	ldr	r3, [pc, #76]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035c6:	2204      	movs	r2, #4
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80035d0:	4b10      	ldr	r3, [pc, #64]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035d2:	2204      	movs	r2, #4
 80035d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035d8:	2200      	movs	r2, #0
 80035da:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80035dc:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035de:	2204      	movs	r2, #4
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 80035fc:	2204      	movs	r2, #4
 80035fe:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003600:	4804      	ldr	r0, [pc, #16]	; (8003614 <MX_FDCAN2_Init+0xc0>)
 8003602:	f003 f9b1 	bl	8006968 <HAL_FDCAN_Init>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800360c:	f000 faa2 	bl	8003b54 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	240016a8 	.word	0x240016a8
 8003618:	4000a400 	.word	0x4000a400

0800361c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003630:	2300      	movs	r3, #0
 8003632:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003634:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <MX_RTC_Init+0xb4>)
 8003636:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <MX_RTC_Init+0xb8>)
 8003638:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800363a:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <MX_RTC_Init+0xb4>)
 800363c:	2200      	movs	r2, #0
 800363e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 8003640:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <MX_RTC_Init+0xb4>)
 8003642:	2201      	movs	r2, #1
 8003644:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <MX_RTC_Init+0xb4>)
 8003648:	f244 0204 	movw	r2, #16388	; 0x4004
 800364c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <MX_RTC_Init+0xb4>)
 8003650:	2200      	movs	r2, #0
 8003652:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003654:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <MX_RTC_Init+0xb4>)
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <MX_RTC_Init+0xb4>)
 800365c:	2200      	movs	r2, #0
 800365e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <MX_RTC_Init+0xb4>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003666:	481a      	ldr	r0, [pc, #104]	; (80036d0 <MX_RTC_Init+0xb4>)
 8003668:	f008 fea8 	bl	800c3bc <HAL_RTC_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003672:	f000 fa6f 	bl	8003b54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	2200      	movs	r2, #0
 800368e:	4619      	mov	r1, r3
 8003690:	480f      	ldr	r0, [pc, #60]	; (80036d0 <MX_RTC_Init+0xb4>)
 8003692:	f008 ff0b 	bl	800c4ac <HAL_RTC_SetTime>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800369c:	f000 fa5a 	bl	8003b54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036a0:	2301      	movs	r3, #1
 80036a2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80036a4:	2301      	movs	r3, #1
 80036a6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80036a8:	2301      	movs	r3, #1
 80036aa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80036b0:	463b      	mov	r3, r7
 80036b2:	2200      	movs	r2, #0
 80036b4:	4619      	mov	r1, r3
 80036b6:	4806      	ldr	r0, [pc, #24]	; (80036d0 <MX_RTC_Init+0xb4>)
 80036b8:	f008 fff2 	bl	800c6a0 <HAL_RTC_SetDate>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80036c2:	f000 fa47 	bl	8003b54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80036c6:	bf00      	nop
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	240014d0 	.word	0x240014d0
 80036d4:	58004000 	.word	0x58004000

080036d8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <MX_SDMMC1_SD_Init+0x3c>)
 80036de:	4a0e      	ldr	r2, [pc, #56]	; (8003718 <MX_SDMMC1_SD_Init+0x40>)
 80036e0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80036e2:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <MX_SDMMC1_SD_Init+0x3c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <MX_SDMMC1_SD_Init+0x3c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <MX_SDMMC1_SD_Init+0x3c>)
 80036f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036f4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <MX_SDMMC1_SD_Init+0x3c>)
 80036f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036fc:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <MX_SDMMC1_SD_Init+0x3c>)
 8003700:	2200      	movs	r2, #0
 8003702:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <MX_SDMMC1_SD_Init+0x3c>)
 8003706:	2201      	movs	r2, #1
 8003708:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800370a:	bf00      	nop
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	24001450 	.word	0x24001450
 8003718:	52007000 	.word	0x52007000

0800371c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003720:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003722:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <MX_SPI1_Init+0xa8>)
 8003724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003726:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003728:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800372c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800372e:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003736:	2207      	movs	r2, #7
 8003738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800373a:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <MX_SPI1_Init+0xa4>)
 800373c:	2200      	movs	r2, #0
 800373e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003740:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003742:	2200      	movs	r2, #0
 8003744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003748:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800374c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800374e:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003750:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003754:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003758:	2200      	movs	r2, #0
 800375a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800375c:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <MX_SPI1_Init+0xa4>)
 800375e:	2200      	movs	r2, #0
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003764:	2200      	movs	r2, #0
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003768:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <MX_SPI1_Init+0xa4>)
 800376a:	2200      	movs	r2, #0
 800376c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003770:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003774:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003778:	2200      	movs	r2, #0
 800377a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <MX_SPI1_Init+0xa4>)
 800377e:	2200      	movs	r2, #0
 8003780:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003782:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003784:	2200      	movs	r2, #0
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003788:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <MX_SPI1_Init+0xa4>)
 800378a:	2200      	movs	r2, #0
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003790:	2200      	movs	r2, #0
 8003792:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <MX_SPI1_Init+0xa4>)
 8003796:	2200      	movs	r2, #0
 8003798:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <MX_SPI1_Init+0xa4>)
 800379c:	2200      	movs	r2, #0
 800379e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <MX_SPI1_Init+0xa4>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <MX_SPI1_Init+0xa4>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037ac:	4804      	ldr	r0, [pc, #16]	; (80037c0 <MX_SPI1_Init+0xa4>)
 80037ae:	f00b f89f 	bl	800e8f0 <HAL_SPI_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80037b8:	f000 f9cc 	bl	8003b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	24001620 	.word	0x24001620
 80037c4:	40013000 	.word	0x40013000

080037c8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80037cc:	4b22      	ldr	r3, [pc, #136]	; (8003858 <MX_UART8_Init+0x90>)
 80037ce:	4a23      	ldr	r2, [pc, #140]	; (800385c <MX_UART8_Init+0x94>)
 80037d0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80037d2:	4b21      	ldr	r3, [pc, #132]	; (8003858 <MX_UART8_Init+0x90>)
 80037d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037d8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80037da:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <MX_UART8_Init+0x90>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <MX_UART8_Init+0x90>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <MX_UART8_Init+0x90>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80037ec:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <MX_UART8_Init+0x90>)
 80037ee:	220c      	movs	r2, #12
 80037f0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037f2:	4b19      	ldr	r3, [pc, #100]	; (8003858 <MX_UART8_Init+0x90>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f8:	4b17      	ldr	r3, [pc, #92]	; (8003858 <MX_UART8_Init+0x90>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037fe:	4b16      	ldr	r3, [pc, #88]	; (8003858 <MX_UART8_Init+0x90>)
 8003800:	2200      	movs	r2, #0
 8003802:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003804:	4b14      	ldr	r3, [pc, #80]	; (8003858 <MX_UART8_Init+0x90>)
 8003806:	2200      	movs	r2, #0
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <MX_UART8_Init+0x90>)
 800380c:	2200      	movs	r2, #0
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003810:	4811      	ldr	r0, [pc, #68]	; (8003858 <MX_UART8_Init+0x90>)
 8003812:	f00c f91e 	bl	800fa52 <HAL_UART_Init>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800381c:	f000 f99a 	bl	8003b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003820:	2100      	movs	r1, #0
 8003822:	480d      	ldr	r0, [pc, #52]	; (8003858 <MX_UART8_Init+0x90>)
 8003824:	f00d faae 	bl	8010d84 <HAL_UARTEx_SetTxFifoThreshold>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800382e:	f000 f991 	bl	8003b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003832:	2100      	movs	r1, #0
 8003834:	4808      	ldr	r0, [pc, #32]	; (8003858 <MX_UART8_Init+0x90>)
 8003836:	f00d fae3 	bl	8010e00 <HAL_UARTEx_SetRxFifoThreshold>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8003840:	f000 f988 	bl	8003b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8003844:	4804      	ldr	r0, [pc, #16]	; (8003858 <MX_UART8_Init+0x90>)
 8003846:	f00d fa64 	bl	8010d12 <HAL_UARTEx_DisableFifoMode>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8003850:	f000 f980 	bl	8003b54 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	24001594 	.word	0x24001594
 800385c:	40007c00 	.word	0x40007c00

08003860 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 8003866:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <MX_USART3_UART_Init+0x94>)
 8003868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 800386c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003872:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 800387a:	2200      	movs	r2, #0
 800387c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800387e:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 8003880:	2200      	movs	r2, #0
 8003882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003884:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 8003886:	220c      	movs	r2, #12
 8003888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800388a:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003890:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 8003892:	2200      	movs	r2, #0
 8003894:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 8003898:	2200      	movs	r2, #0
 800389a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 800389e:	2200      	movs	r2, #0
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038a2:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038a8:	4811      	ldr	r0, [pc, #68]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 80038aa:	f00c f8d2 	bl	800fa52 <HAL_UART_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80038b4:	f000 f94e 	bl	8003b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038b8:	2100      	movs	r1, #0
 80038ba:	480d      	ldr	r0, [pc, #52]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 80038bc:	f00d fa62 	bl	8010d84 <HAL_UARTEx_SetTxFifoThreshold>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80038c6:	f000 f945 	bl	8003b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038ca:	2100      	movs	r1, #0
 80038cc:	4808      	ldr	r0, [pc, #32]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 80038ce:	f00d fa97 	bl	8010e00 <HAL_UARTEx_SetRxFifoThreshold>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80038d8:	f000 f93c 	bl	8003b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80038dc:	4804      	ldr	r0, [pc, #16]	; (80038f0 <MX_USART3_UART_Init+0x90>)
 80038de:	f00d fa18 	bl	8010d12 <HAL_UARTEx_DisableFifoMode>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80038e8:	f000 f934 	bl	8003b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	240013a4 	.word	0x240013a4
 80038f4:	40004800 	.word	0x40004800

080038f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <MX_DMA_Init+0x3c>)
 8003900:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003904:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <MX_DMA_Init+0x3c>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <MX_DMA_Init+0x3c>)
 8003910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800391c:	2200      	movs	r2, #0
 800391e:	2100      	movs	r1, #0
 8003920:	200c      	movs	r0, #12
 8003922:	f000 ff14 	bl	800474e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003926:	200c      	movs	r0, #12
 8003928:	f000 ff2b 	bl	8004782 <HAL_NVIC_EnableIRQ>

}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	58024400 	.word	0x58024400

08003938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08c      	sub	sp, #48	; 0x30
 800393c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393e:	f107 031c 	add.w	r3, r7, #28
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	60da      	str	r2, [r3, #12]
 800394c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800394e:	4b6d      	ldr	r3, [pc, #436]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 8003950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003954:	4a6b      	ldr	r2, [pc, #428]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 8003956:	f043 0310 	orr.w	r3, r3, #16
 800395a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800395e:	4b69      	ldr	r3, [pc, #420]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 8003960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800396c:	4b65      	ldr	r3, [pc, #404]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 800396e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003972:	4a64      	ldr	r2, [pc, #400]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 8003974:	f043 0304 	orr.w	r3, r3, #4
 8003978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800397c:	4b61      	ldr	r3, [pc, #388]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 800397e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800398a:	4b5e      	ldr	r3, [pc, #376]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 800398c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003990:	4a5c      	ldr	r2, [pc, #368]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 8003992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800399a:	4b5a      	ldr	r3, [pc, #360]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 800399c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a8:	4b56      	ldr	r3, [pc, #344]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 80039aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ae:	4a55      	ldr	r2, [pc, #340]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039b8:	4b52      	ldr	r3, [pc, #328]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 80039ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c6:	4b4f      	ldr	r3, [pc, #316]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 80039c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039cc:	4a4d      	ldr	r2, [pc, #308]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 80039ce:	f043 0302 	orr.w	r3, r3, #2
 80039d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039d6:	4b4b      	ldr	r3, [pc, #300]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 80039d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039e4:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 80039e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ea:	4a46      	ldr	r2, [pc, #280]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 80039ec:	f043 0308 	orr.w	r3, r3, #8
 80039f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039f4:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <MX_GPIO_Init+0x1cc>)
 80039f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8003a02:	2200      	movs	r2, #0
 8003a04:	210c      	movs	r1, #12
 8003a06:	4840      	ldr	r0, [pc, #256]	; (8003b08 <MX_GPIO_Init+0x1d0>)
 8003a08:	f004 fab2 	bl	8007f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2103      	movs	r1, #3
 8003a10:	483e      	ldr	r0, [pc, #248]	; (8003b0c <MX_GPIO_Init+0x1d4>)
 8003a12:	f004 faad 	bl	8007f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2101      	movs	r1, #1
 8003a1a:	483d      	ldr	r0, [pc, #244]	; (8003b10 <MX_GPIO_Init+0x1d8>)
 8003a1c:	f004 faa8 	bl	8007f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8003a20:	2201      	movs	r2, #1
 8003a22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a26:	483b      	ldr	r0, [pc, #236]	; (8003b14 <MX_GPIO_Init+0x1dc>)
 8003a28:	f004 faa2 	bl	8007f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a30:	2301      	movs	r3, #1
 8003a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a3c:	f107 031c 	add.w	r3, r7, #28
 8003a40:	4619      	mov	r1, r3
 8003a42:	4831      	ldr	r0, [pc, #196]	; (8003b08 <MX_GPIO_Init+0x1d0>)
 8003a44:	f004 f8cc 	bl	8007be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a54:	2300      	movs	r3, #0
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a58:	f107 031c 	add.w	r3, r7, #28
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	482b      	ldr	r0, [pc, #172]	; (8003b0c <MX_GPIO_Init+0x1d4>)
 8003a60:	f004 f8be 	bl	8007be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8003a64:	2304      	movs	r3, #4
 8003a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a68:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <MX_GPIO_Init+0x1e0>)
 8003a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	4619      	mov	r1, r3
 8003a76:	4825      	ldr	r0, [pc, #148]	; (8003b0c <MX_GPIO_Init+0x1d4>)
 8003a78:	f004 f8b2 	bl	8007be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a80:	2301      	movs	r3, #1
 8003a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003a8c:	f107 031c 	add.w	r3, r7, #28
 8003a90:	4619      	mov	r1, r3
 8003a92:	481f      	ldr	r0, [pc, #124]	; (8003b10 <MX_GPIO_Init+0x1d8>)
 8003a94:	f004 f8a4 	bl	8007be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8003a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <MX_GPIO_Init+0x1e0>)
 8003aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8003aa6:	f107 031c 	add.w	r3, r7, #28
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4816      	ldr	r0, [pc, #88]	; (8003b08 <MX_GPIO_Init+0x1d0>)
 8003aae:	f004 f897 	bl	8007be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8003ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8003ac4:	f107 031c 	add.w	r3, r7, #28
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4812      	ldr	r0, [pc, #72]	; (8003b14 <MX_GPIO_Init+0x1dc>)
 8003acc:	f004 f888 	bl	8007be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8003ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8003ade:	f107 031c 	add.w	r3, r7, #28
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4809      	ldr	r0, [pc, #36]	; (8003b0c <MX_GPIO_Init+0x1d4>)
 8003ae6:	f004 f87b 	bl	8007be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2100      	movs	r1, #0
 8003aee:	2017      	movs	r0, #23
 8003af0:	f000 fe2d 	bl	800474e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003af4:	2017      	movs	r0, #23
 8003af6:	f000 fe44 	bl	8004782 <HAL_NVIC_EnableIRQ>

}
 8003afa:	bf00      	nop
 8003afc:	3730      	adds	r7, #48	; 0x30
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	58024400 	.word	0x58024400
 8003b08:	58021000 	.word	0x58021000
 8003b0c:	58020000 	.word	0x58020000
 8003b10:	58020400 	.word	0x58020400
 8003b14:	58020c00 	.word	0x58020c00
 8003b18:	11110000 	.word	0x11110000

08003b1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8003b26:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <HAL_GPIO_EXTI_Callback+0x1c>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	24000008 	.word	0x24000008

08003b3c <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_PWR_PVDCallback+0x14>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	24000008 	.word	0x24000008

08003b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8003b5a:	4802      	ldr	r0, [pc, #8]	; (8003b64 <Error_Handler+0x10>)
 8003b5c:	f015 fd68 	bl	8019630 <puts>
 8003b60:	e7fb      	b.n	8003b5a <Error_Handler+0x6>
 8003b62:	bf00      	nop
 8003b64:	0801ad9c 	.word	0x0801ad9c

08003b68 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b74:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003b80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b84:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003b88:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00b      	beq.n	8003ba8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003b90:	e000      	b.n	8003b94 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003b92:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003b94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f9      	beq.n	8003b92 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003b9e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003ba8:	687b      	ldr	r3, [r7, #4]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
  int i=0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e009      	b.n	8003be0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	60ba      	str	r2, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ffc7 	bl	8003b68 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	dbf1      	blt.n	8003bcc <_write+0x16>
  return len;
 8003be8:	687b      	ldr	r3, [r7, #4]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003bfa:	f107 0308 	add.w	r3, r7, #8
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_MspInit+0x60>)
 8003c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <HAL_MspInit+0x60>)
 8003c0c:	f043 0302 	orr.w	r3, r3, #2
 8003c10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <HAL_MspInit+0x60>)
 8003c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	607b      	str	r3, [r7, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8003c22:	2200      	movs	r2, #0
 8003c24:	2100      	movs	r1, #0
 8003c26:	2001      	movs	r0, #1
 8003c28:	f000 fd91 	bl	800474e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f000 fda8 	bl	8004782 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8003c32:	23c0      	movs	r3, #192	; 0xc0
 8003c34:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8003c36:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003c3a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003c3c:	f107 0308 	add.w	r3, r7, #8
 8003c40:	4618      	mov	r0, r3
 8003c42:	f005 fc1f 	bl	8009484 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003c46:	f005 fc97 	bl	8009578 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	58024400 	.word	0x58024400

08003c58 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	; 0x30
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c60:	f107 031c 	add.w	r3, r7, #28
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a48      	ldr	r2, [pc, #288]	; (8003d98 <HAL_FDCAN_MspInit+0x140>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d14e      	bne.n	8003d18 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003c7a:	4b48      	ldr	r3, [pc, #288]	; (8003d9c <HAL_FDCAN_MspInit+0x144>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	4a46      	ldr	r2, [pc, #280]	; (8003d9c <HAL_FDCAN_MspInit+0x144>)
 8003c82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003c84:	4b45      	ldr	r3, [pc, #276]	; (8003d9c <HAL_FDCAN_MspInit+0x144>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10e      	bne.n	8003caa <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003c8c:	4b44      	ldr	r3, [pc, #272]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003c8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c92:	4a43      	ldr	r2, [pc, #268]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c98:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003c9c:	4b40      	ldr	r3, [pc, #256]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003c9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	61bb      	str	r3, [r7, #24]
 8003ca8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003caa:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cb0:	4a3b      	ldr	r2, [pc, #236]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003cb2:	f043 0302 	orr.w	r3, r3, #2
 8003cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cba:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003cc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003cda:	2309      	movs	r3, #9
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cde:	f107 031c 	add.w	r3, r7, #28
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	482f      	ldr	r0, [pc, #188]	; (8003da4 <HAL_FDCAN_MspInit+0x14c>)
 8003ce6:	f003 ff7b 	bl	8007be0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8003cea:	2040      	movs	r0, #64	; 0x40
 8003cec:	f004 f98e 	bl	800800c <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8003cf0:	2080      	movs	r0, #128	; 0x80
 8003cf2:	f004 f98b 	bl	800800c <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	2013      	movs	r0, #19
 8003cfc:	f000 fd27 	bl	800474e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003d00:	2013      	movs	r0, #19
 8003d02:	f000 fd3e 	bl	8004782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8003d06:	2200      	movs	r2, #0
 8003d08:	2100      	movs	r1, #0
 8003d0a:	2015      	movs	r0, #21
 8003d0c:	f000 fd1f 	bl	800474e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003d10:	2015      	movs	r0, #21
 8003d12:	f000 fd36 	bl	8004782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8003d16:	e03b      	b.n	8003d90 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a22      	ldr	r2, [pc, #136]	; (8003da8 <HAL_FDCAN_MspInit+0x150>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d136      	bne.n	8003d90 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003d22:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <HAL_FDCAN_MspInit+0x144>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3301      	adds	r3, #1
 8003d28:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <HAL_FDCAN_MspInit+0x144>)
 8003d2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <HAL_FDCAN_MspInit+0x144>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d10e      	bne.n	8003d52 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003d36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d3a:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d40:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d44:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003d46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d52:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d58:	4a11      	ldr	r2, [pc, #68]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d62:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_FDCAN_MspInit+0x148>)
 8003d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003d70:	2360      	movs	r3, #96	; 0x60
 8003d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d74:	2302      	movs	r3, #2
 8003d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003d80:	2309      	movs	r3, #9
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d84:	f107 031c 	add.w	r3, r7, #28
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4806      	ldr	r0, [pc, #24]	; (8003da4 <HAL_FDCAN_MspInit+0x14c>)
 8003d8c:	f003 ff28 	bl	8007be0 <HAL_GPIO_Init>
}
 8003d90:	bf00      	nop
 8003d92:	3730      	adds	r7, #48	; 0x30
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	4000a000 	.word	0x4000a000
 8003d9c:	24000b48 	.word	0x24000b48
 8003da0:	58024400 	.word	0x58024400
 8003da4:	58020400 	.word	0x58020400
 8003da8:	4000a400 	.word	0x4000a400

08003dac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a07      	ldr	r2, [pc, #28]	; (8003dd8 <HAL_RTC_MspInit+0x2c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d105      	bne.n	8003dca <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <HAL_RTC_MspInit+0x30>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a06      	ldr	r2, [pc, #24]	; (8003ddc <HAL_RTC_MspInit+0x30>)
 8003dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	58004000 	.word	0x58004000
 8003ddc:	58024400 	.word	0x58024400

08003de0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08a      	sub	sp, #40	; 0x28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 0314 	add.w	r3, r7, #20
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a2e      	ldr	r2, [pc, #184]	; (8003eb8 <HAL_SD_MspInit+0xd8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d155      	bne.n	8003eae <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003e02:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <HAL_SD_MspInit+0xdc>)
 8003e04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003e08:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <HAL_SD_MspInit+0xdc>)
 8003e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003e12:	4b2a      	ldr	r3, [pc, #168]	; (8003ebc <HAL_SD_MspInit+0xdc>)
 8003e14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e20:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <HAL_SD_MspInit+0xdc>)
 8003e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e26:	4a25      	ldr	r2, [pc, #148]	; (8003ebc <HAL_SD_MspInit+0xdc>)
 8003e28:	f043 0304 	orr.w	r3, r3, #4
 8003e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e30:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <HAL_SD_MspInit+0xdc>)
 8003e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e3e:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <HAL_SD_MspInit+0xdc>)
 8003e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <HAL_SD_MspInit+0xdc>)
 8003e46:	f043 0308 	orr.w	r3, r3, #8
 8003e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <HAL_SD_MspInit+0xdc>)
 8003e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003e5c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003e60:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e62:	2302      	movs	r3, #2
 8003e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003e6e:	230c      	movs	r3, #12
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e72:	f107 0314 	add.w	r3, r7, #20
 8003e76:	4619      	mov	r1, r3
 8003e78:	4811      	ldr	r0, [pc, #68]	; (8003ec0 <HAL_SD_MspInit+0xe0>)
 8003e7a:	f003 feb1 	bl	8007be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e7e:	2304      	movs	r3, #4
 8003e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e82:	2302      	movs	r3, #2
 8003e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003e8e:	230c      	movs	r3, #12
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e92:	f107 0314 	add.w	r3, r7, #20
 8003e96:	4619      	mov	r1, r3
 8003e98:	480a      	ldr	r0, [pc, #40]	; (8003ec4 <HAL_SD_MspInit+0xe4>)
 8003e9a:	f003 fea1 	bl	8007be0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	2031      	movs	r0, #49	; 0x31
 8003ea4:	f000 fc53 	bl	800474e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003ea8:	2031      	movs	r0, #49	; 0x31
 8003eaa:	f000 fc6a 	bl	8004782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003eae:	bf00      	nop
 8003eb0:	3728      	adds	r7, #40	; 0x28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	52007000 	.word	0x52007000
 8003ebc:	58024400 	.word	0x58024400
 8003ec0:	58020800 	.word	0x58020800
 8003ec4:	58020c00 	.word	0x58020c00

08003ec8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	60da      	str	r2, [r3, #12]
 8003ede:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1a      	ldr	r2, [pc, #104]	; (8003f50 <HAL_SPI_MspInit+0x88>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d12d      	bne.n	8003f46 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003eea:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <HAL_SPI_MspInit+0x8c>)
 8003eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ef0:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <HAL_SPI_MspInit+0x8c>)
 8003ef2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ef6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <HAL_SPI_MspInit+0x8c>)
 8003efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f08:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <HAL_SPI_MspInit+0x8c>)
 8003f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f0e:	4a11      	ldr	r2, [pc, #68]	; (8003f54 <HAL_SPI_MspInit+0x8c>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <HAL_SPI_MspInit+0x8c>)
 8003f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f26:	23e0      	movs	r3, #224	; 0xe0
 8003f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f32:	2303      	movs	r3, #3
 8003f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f36:	2305      	movs	r3, #5
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3a:	f107 0314 	add.w	r3, r7, #20
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4805      	ldr	r0, [pc, #20]	; (8003f58 <HAL_SPI_MspInit+0x90>)
 8003f42:	f003 fe4d 	bl	8007be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f46:	bf00      	nop
 8003f48:	3728      	adds	r7, #40	; 0x28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40013000 	.word	0x40013000
 8003f54:	58024400 	.word	0x58024400
 8003f58:	58020000 	.word	0x58020000

08003f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08c      	sub	sp, #48	; 0x30
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 031c 	add.w	r3, r7, #28
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a4b      	ldr	r2, [pc, #300]	; (80040a8 <HAL_UART_MspInit+0x14c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d12e      	bne.n	8003fdc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003f7e:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <HAL_UART_MspInit+0x150>)
 8003f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f84:	4a49      	ldr	r2, [pc, #292]	; (80040ac <HAL_UART_MspInit+0x150>)
 8003f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f8e:	4b47      	ldr	r3, [pc, #284]	; (80040ac <HAL_UART_MspInit+0x150>)
 8003f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f9c:	4b43      	ldr	r3, [pc, #268]	; (80040ac <HAL_UART_MspInit+0x150>)
 8003f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa2:	4a42      	ldr	r2, [pc, #264]	; (80040ac <HAL_UART_MspInit+0x150>)
 8003fa4:	f043 0310 	orr.w	r3, r3, #16
 8003fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fac:	4b3f      	ldr	r3, [pc, #252]	; (80040ac <HAL_UART_MspInit+0x150>)
 8003fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003fca:	2308      	movs	r3, #8
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fce:	f107 031c 	add.w	r3, r7, #28
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4836      	ldr	r0, [pc, #216]	; (80040b0 <HAL_UART_MspInit+0x154>)
 8003fd6:	f003 fe03 	bl	8007be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003fda:	e061      	b.n	80040a0 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a34      	ldr	r2, [pc, #208]	; (80040b4 <HAL_UART_MspInit+0x158>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d15c      	bne.n	80040a0 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fe6:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_UART_MspInit+0x150>)
 8003fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fec:	4a2f      	ldr	r2, [pc, #188]	; (80040ac <HAL_UART_MspInit+0x150>)
 8003fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ff6:	4b2d      	ldr	r3, [pc, #180]	; (80040ac <HAL_UART_MspInit+0x150>)
 8003ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004004:	4b29      	ldr	r3, [pc, #164]	; (80040ac <HAL_UART_MspInit+0x150>)
 8004006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800400a:	4a28      	ldr	r2, [pc, #160]	; (80040ac <HAL_UART_MspInit+0x150>)
 800400c:	f043 0308 	orr.w	r3, r3, #8
 8004010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <HAL_UART_MspInit+0x150>)
 8004016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004022:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004028:	2302      	movs	r3, #2
 800402a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402c:	2300      	movs	r3, #0
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004030:	2300      	movs	r3, #0
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004034:	2307      	movs	r3, #7
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004038:	f107 031c 	add.w	r3, r7, #28
 800403c:	4619      	mov	r1, r3
 800403e:	481e      	ldr	r0, [pc, #120]	; (80040b8 <HAL_UART_MspInit+0x15c>)
 8004040:	f003 fdce 	bl	8007be0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004044:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <HAL_UART_MspInit+0x160>)
 8004046:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <HAL_UART_MspInit+0x164>)
 8004048:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <HAL_UART_MspInit+0x160>)
 800404c:	222d      	movs	r2, #45	; 0x2d
 800404e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004050:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <HAL_UART_MspInit+0x160>)
 8004052:	2200      	movs	r2, #0
 8004054:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004056:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_UART_MspInit+0x160>)
 8004058:	2200      	movs	r2, #0
 800405a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800405c:	4b17      	ldr	r3, [pc, #92]	; (80040bc <HAL_UART_MspInit+0x160>)
 800405e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004062:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004064:	4b15      	ldr	r3, [pc, #84]	; (80040bc <HAL_UART_MspInit+0x160>)
 8004066:	2200      	movs	r2, #0
 8004068:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800406a:	4b14      	ldr	r3, [pc, #80]	; (80040bc <HAL_UART_MspInit+0x160>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_UART_MspInit+0x160>)
 8004072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004076:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004078:	4b10      	ldr	r3, [pc, #64]	; (80040bc <HAL_UART_MspInit+0x160>)
 800407a:	2200      	movs	r2, #0
 800407c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_UART_MspInit+0x160>)
 8004080:	2200      	movs	r2, #0
 8004082:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004084:	480d      	ldr	r0, [pc, #52]	; (80040bc <HAL_UART_MspInit+0x160>)
 8004086:	f000 fb97 	bl	80047b8 <HAL_DMA_Init>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8004090:	f7ff fd60 	bl	8003b54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <HAL_UART_MspInit+0x160>)
 8004098:	679a      	str	r2, [r3, #120]	; 0x78
 800409a:	4a08      	ldr	r2, [pc, #32]	; (80040bc <HAL_UART_MspInit+0x160>)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6393      	str	r3, [r2, #56]	; 0x38
}
 80040a0:	bf00      	nop
 80040a2:	3730      	adds	r7, #48	; 0x30
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40007c00 	.word	0x40007c00
 80040ac:	58024400 	.word	0x58024400
 80040b0:	58021000 	.word	0x58021000
 80040b4:	40004800 	.word	0x40004800
 80040b8:	58020c00 	.word	0x58020c00
 80040bc:	2400132c 	.word	0x2400132c
 80040c0:	40020028 	.word	0x40020028

080040c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80040c8:	f006 fa98 	bl	800a5fc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040cc:	e7fe      	b.n	80040cc <NMI_Handler+0x8>

080040ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040d2:	e7fe      	b.n	80040d2 <HardFault_Handler+0x4>

080040d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040d8:	e7fe      	b.n	80040d8 <MemManage_Handler+0x4>

080040da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040de:	e7fe      	b.n	80040de <BusFault_Handler+0x4>

080040e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040e4:	e7fe      	b.n	80040e4 <UsageFault_Handler+0x4>

080040e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004102:	b480      	push	{r7}
 8004104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004114:	f000 f9f2 	bl	80044fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}

0800411c <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 8004120:	f005 fa84 	bl	800962c <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 8004124:	bf00      	nop
 8004126:	bd80      	pop	{r7, pc}

08004128 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800412c:	4802      	ldr	r0, [pc, #8]	; (8004138 <DMA1_Stream1_IRQHandler+0x10>)
 800412e:	f001 f909 	bl	8005344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	2400132c 	.word	0x2400132c

0800413c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004140:	4802      	ldr	r0, [pc, #8]	; (800414c <FDCAN1_IT0_IRQHandler+0x10>)
 8004142:	f003 f8bd 	bl	80072c0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004146:	bf00      	nop
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	240014f4 	.word	0x240014f4

08004150 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004154:	4802      	ldr	r0, [pc, #8]	; (8004160 <FDCAN1_IT1_IRQHandler+0x10>)
 8004156:	f003 f8b3 	bl	80072c0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	240014f4 	.word	0x240014f4

08004164 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004168:	f44f 7000 	mov.w	r0, #512	; 0x200
 800416c:	f003 ff34 	bl	8007fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004170:	bf00      	nop
 8004172:	bd80      	pop	{r7, pc}

08004174 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004178:	4802      	ldr	r0, [pc, #8]	; (8004184 <SDMMC1_IRQHandler+0x10>)
 800417a:	f009 f9c1 	bl	800d500 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	24001450 	.word	0x24001450

08004188 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800418c:	4802      	ldr	r0, [pc, #8]	; (8004198 <OTG_FS_IRQHandler+0x10>)
 800418e:	f004 f8b8 	bl	8008302 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	24002084 	.word	0x24002084

0800419c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e00a      	b.n	80041c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041ae:	f3af 8000 	nop.w
 80041b2:	4601      	mov	r1, r0
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	60ba      	str	r2, [r7, #8]
 80041ba:	b2ca      	uxtb	r2, r1
 80041bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	3301      	adds	r3, #1
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	dbf0      	blt.n	80041ae <_read+0x12>
	}

return len;
 80041cc:	687b      	ldr	r3, [r7, #4]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
	return -1;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041fe:	605a      	str	r2, [r3, #4]
	return 0;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <_isatty>:

int _isatty(int file)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
	return 1;
 8004216:	2301      	movs	r3, #1
}
 8004218:	4618      	mov	r0, r3
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
	return 0;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004248:	4a14      	ldr	r2, [pc, #80]	; (800429c <_sbrk+0x5c>)
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <_sbrk+0x60>)
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <_sbrk+0x64>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d102      	bne.n	8004262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <_sbrk+0x64>)
 800425e:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <_sbrk+0x68>)
 8004260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004262:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <_sbrk+0x64>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4413      	add	r3, r2
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	429a      	cmp	r2, r3
 800426e:	d207      	bcs.n	8004280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004270:	f015 f874 	bl	801935c <__errno>
 8004274:	4602      	mov	r2, r0
 8004276:	230c      	movs	r3, #12
 8004278:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800427a:	f04f 33ff 	mov.w	r3, #4294967295
 800427e:	e009      	b.n	8004294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004280:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <_sbrk+0x64>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004286:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <_sbrk+0x64>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	4a05      	ldr	r2, [pc, #20]	; (80042a4 <_sbrk+0x64>)
 8004290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004292:	68fb      	ldr	r3, [r7, #12]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	24080000 	.word	0x24080000
 80042a0:	00000400 	.word	0x00000400
 80042a4:	24000b4c 	.word	0x24000b4c
 80042a8:	24002490 	.word	0x24002490

080042ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80042b0:	4b39      	ldr	r3, [pc, #228]	; (8004398 <SystemInit+0xec>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	4a38      	ldr	r2, [pc, #224]	; (8004398 <SystemInit+0xec>)
 80042b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80042c0:	4b36      	ldr	r3, [pc, #216]	; (800439c <SystemInit+0xf0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d807      	bhi.n	80042dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80042cc:	4b33      	ldr	r3, [pc, #204]	; (800439c <SystemInit+0xf0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f023 030f 	bic.w	r3, r3, #15
 80042d4:	4a31      	ldr	r2, [pc, #196]	; (800439c <SystemInit+0xf0>)
 80042d6:	f043 0307 	orr.w	r3, r3, #7
 80042da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80042dc:	4b30      	ldr	r3, [pc, #192]	; (80043a0 <SystemInit+0xf4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <SystemInit+0xf4>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80042e8:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <SystemInit+0xf4>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80042ee:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <SystemInit+0xf4>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	492b      	ldr	r1, [pc, #172]	; (80043a0 <SystemInit+0xf4>)
 80042f4:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <SystemInit+0xf8>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80042fa:	4b28      	ldr	r3, [pc, #160]	; (800439c <SystemInit+0xf0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	2b07      	cmp	r3, #7
 8004304:	d907      	bls.n	8004316 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004306:	4b25      	ldr	r3, [pc, #148]	; (800439c <SystemInit+0xf0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 030f 	bic.w	r3, r3, #15
 800430e:	4a23      	ldr	r2, [pc, #140]	; (800439c <SystemInit+0xf0>)
 8004310:	f043 0307 	orr.w	r3, r3, #7
 8004314:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <SystemInit+0xf4>)
 8004318:	2200      	movs	r2, #0
 800431a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800431c:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <SystemInit+0xf4>)
 800431e:	2200      	movs	r2, #0
 8004320:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004322:	4b1f      	ldr	r3, [pc, #124]	; (80043a0 <SystemInit+0xf4>)
 8004324:	2200      	movs	r2, #0
 8004326:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <SystemInit+0xf4>)
 800432a:	4a1f      	ldr	r2, [pc, #124]	; (80043a8 <SystemInit+0xfc>)
 800432c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <SystemInit+0xf4>)
 8004330:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <SystemInit+0x100>)
 8004332:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <SystemInit+0xf4>)
 8004336:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <SystemInit+0x104>)
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800433a:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <SystemInit+0xf4>)
 800433c:	2200      	movs	r2, #0
 800433e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <SystemInit+0xf4>)
 8004342:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <SystemInit+0x104>)
 8004344:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <SystemInit+0xf4>)
 8004348:	2200      	movs	r2, #0
 800434a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800434c:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <SystemInit+0xf4>)
 800434e:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <SystemInit+0x104>)
 8004350:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004352:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <SystemInit+0xf4>)
 8004354:	2200      	movs	r2, #0
 8004356:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004358:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <SystemInit+0xf4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a10      	ldr	r2, [pc, #64]	; (80043a0 <SystemInit+0xf4>)
 800435e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004362:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004364:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <SystemInit+0xf4>)
 8004366:	2200      	movs	r2, #0
 8004368:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <SystemInit+0x108>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <SystemInit+0x10c>)
 8004370:	4013      	ands	r3, r2
 8004372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004376:	d202      	bcs.n	800437e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004378:	4b10      	ldr	r3, [pc, #64]	; (80043bc <SystemInit+0x110>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <SystemInit+0x114>)
 8004380:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004384:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004386:	4b04      	ldr	r3, [pc, #16]	; (8004398 <SystemInit+0xec>)
 8004388:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800438c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	e000ed00 	.word	0xe000ed00
 800439c:	52002000 	.word	0x52002000
 80043a0:	58024400 	.word	0x58024400
 80043a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80043a8:	02020200 	.word	0x02020200
 80043ac:	01ff0000 	.word	0x01ff0000
 80043b0:	01010280 	.word	0x01010280
 80043b4:	5c001000 	.word	0x5c001000
 80043b8:	ffff0000 	.word	0xffff0000
 80043bc:	51008108 	.word	0x51008108
 80043c0:	52004000 	.word	0x52004000

080043c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043fc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80043c8:	f7ff ff70 	bl	80042ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80043cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80043ce:	e003      	b.n	80043d8 <LoopCopyDataInit>

080043d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80043d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043d6:	3104      	adds	r1, #4

080043d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043d8:	480a      	ldr	r0, [pc, #40]	; (8004404 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80043dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80043e0:	d3f6      	bcc.n	80043d0 <CopyDataInit>
  ldr  r2, =_sbss
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80043e4:	e002      	b.n	80043ec <LoopFillZerobss>

080043e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043e8:	f842 3b04 	str.w	r3, [r2], #4

080043ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043ec:	4b08      	ldr	r3, [pc, #32]	; (8004410 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80043ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043f0:	d3f9      	bcc.n	80043e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043f2:	f014 ffb9 	bl	8019368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043f6:	f7fd fd69 	bl	8001ecc <main>
  bx  lr    
 80043fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043fc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004400:	0801b030 	.word	0x0801b030
  ldr  r0, =_sdata
 8004404:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004408:	240001dc 	.word	0x240001dc
  ldr  r2, =_sbss
 800440c:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 8004410:	24002490 	.word	0x24002490

08004414 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004414:	e7fe      	b.n	8004414 <ADC3_IRQHandler>
	...

08004418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800441e:	2003      	movs	r0, #3
 8004420:	f000 f98a 	bl	8004738 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004424:	f005 ff1c 	bl	800a260 <HAL_RCC_GetSysClockFreq>
 8004428:	4601      	mov	r1, r0
 800442a:	4b15      	ldr	r3, [pc, #84]	; (8004480 <HAL_Init+0x68>)
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	4a13      	ldr	r2, [pc, #76]	; (8004484 <HAL_Init+0x6c>)
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	fa21 f303 	lsr.w	r3, r1, r3
 8004440:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004442:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <HAL_Init+0x68>)
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <HAL_Init+0x6c>)
 800444c:	5cd3      	ldrb	r3, [r2, r3]
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	4a0b      	ldr	r2, [pc, #44]	; (8004488 <HAL_Init+0x70>)
 800445a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800445c:	4a0b      	ldr	r2, [pc, #44]	; (800448c <HAL_Init+0x74>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004462:	2000      	movs	r0, #0
 8004464:	f000 f814 	bl	8004490 <HAL_InitTick>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e002      	b.n	8004478 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004472:	f7ff fbbf 	bl	8003bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	58024400 	.word	0x58024400
 8004484:	0801ae90 	.word	0x0801ae90
 8004488:	24000014 	.word	0x24000014
 800448c:	24000010 	.word	0x24000010

08004490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <HAL_InitTick+0x60>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e021      	b.n	80044e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80044a4:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <HAL_InitTick+0x64>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <HAL_InitTick+0x60>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	4619      	mov	r1, r3
 80044ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f96f 	bl	800479e <HAL_SYSTICK_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e00e      	b.n	80044e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b0f      	cmp	r3, #15
 80044ce:	d80a      	bhi.n	80044e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044d0:	2200      	movs	r2, #0
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295
 80044d8:	f000 f939 	bl	800474e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044dc:	4a06      	ldr	r2, [pc, #24]	; (80044f8 <HAL_InitTick+0x68>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e000      	b.n	80044e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	2400001c 	.word	0x2400001c
 80044f4:	24000010 	.word	0x24000010
 80044f8:	24000018 	.word	0x24000018

080044fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_IncTick+0x20>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_IncTick+0x24>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4413      	add	r3, r2
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <HAL_IncTick+0x24>)
 800450e:	6013      	str	r3, [r2, #0]
}
 8004510:	bf00      	nop
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	2400001c 	.word	0x2400001c
 8004520:	24001748 	.word	0x24001748

08004524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return uwTick;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_GetTick+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	24001748 	.word	0x24001748

0800453c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004544:	f7ff ffee 	bl	8004524 <HAL_GetTick>
 8004548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d005      	beq.n	8004562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004556:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_Delay+0x40>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004562:	bf00      	nop
 8004564:	f7ff ffde 	bl	8004524 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	429a      	cmp	r2, r3
 8004572:	d8f7      	bhi.n	8004564 <HAL_Delay+0x28>
  {
  }
}
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	2400001c 	.word	0x2400001c

08004580 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <HAL_GetREVID+0x14>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0c1b      	lsrs	r3, r3, #16
}
 800458a:	4618      	mov	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	5c001000 	.word	0x5c001000

08004598 <__NVIC_SetPriorityGrouping>:
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <__NVIC_SetPriorityGrouping+0x40>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045b4:	4013      	ands	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <__NVIC_SetPriorityGrouping+0x44>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045c6:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <__NVIC_SetPriorityGrouping+0x40>)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	60d3      	str	r3, [r2, #12]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000ed00 	.word	0xe000ed00
 80045dc:	05fa0000 	.word	0x05fa0000

080045e0 <__NVIC_GetPriorityGrouping>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e4:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <__NVIC_GetPriorityGrouping+0x18>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	0a1b      	lsrs	r3, r3, #8
 80045ea:	f003 0307 	and.w	r3, r3, #7
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <__NVIC_EnableIRQ>:
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800460a:	2b00      	cmp	r3, #0
 800460c:	db0b      	blt.n	8004626 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	f003 021f 	and.w	r2, r3, #31
 8004614:	4907      	ldr	r1, [pc, #28]	; (8004634 <__NVIC_EnableIRQ+0x38>)
 8004616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2001      	movs	r0, #1
 800461e:	fa00 f202 	lsl.w	r2, r0, r2
 8004622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	e000e100 	.word	0xe000e100

08004638 <__NVIC_SetPriority>:
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	db0a      	blt.n	8004662 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	490c      	ldr	r1, [pc, #48]	; (8004684 <__NVIC_SetPriority+0x4c>)
 8004652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004656:	0112      	lsls	r2, r2, #4
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	440b      	add	r3, r1
 800465c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004660:	e00a      	b.n	8004678 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	4908      	ldr	r1, [pc, #32]	; (8004688 <__NVIC_SetPriority+0x50>)
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	3b04      	subs	r3, #4
 8004670:	0112      	lsls	r2, r2, #4
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	440b      	add	r3, r1
 8004676:	761a      	strb	r2, [r3, #24]
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	e000e100 	.word	0xe000e100
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <NVIC_EncodePriority>:
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	; 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f1c3 0307 	rsb	r3, r3, #7
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	bf28      	it	cs
 80046aa:	2304      	movcs	r3, #4
 80046ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3304      	adds	r3, #4
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d902      	bls.n	80046bc <NVIC_EncodePriority+0x30>
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3b03      	subs	r3, #3
 80046ba:	e000      	b.n	80046be <NVIC_EncodePriority+0x32>
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c0:	f04f 32ff 	mov.w	r2, #4294967295
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43da      	mvns	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	401a      	ands	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046d4:	f04f 31ff 	mov.w	r1, #4294967295
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	fa01 f303 	lsl.w	r3, r1, r3
 80046de:	43d9      	mvns	r1, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e4:	4313      	orrs	r3, r2
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3724      	adds	r7, #36	; 0x24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <SysTick_Config>:
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3b01      	subs	r3, #1
 8004700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004704:	d301      	bcc.n	800470a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004706:	2301      	movs	r3, #1
 8004708:	e00f      	b.n	800472a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800470a:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <SysTick_Config+0x40>)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3b01      	subs	r3, #1
 8004710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004712:	210f      	movs	r1, #15
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	f7ff ff8e 	bl	8004638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <SysTick_Config+0x40>)
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004722:	4b04      	ldr	r3, [pc, #16]	; (8004734 <SysTick_Config+0x40>)
 8004724:	2207      	movs	r2, #7
 8004726:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	e000e010 	.word	0xe000e010

08004738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff29 	bl	8004598 <__NVIC_SetPriorityGrouping>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b086      	sub	sp, #24
 8004752:	af00      	add	r7, sp, #0
 8004754:	4603      	mov	r3, r0
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800475c:	f7ff ff40 	bl	80045e0 <__NVIC_GetPriorityGrouping>
 8004760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	6978      	ldr	r0, [r7, #20]
 8004768:	f7ff ff90 	bl	800468c <NVIC_EncodePriority>
 800476c:	4602      	mov	r2, r0
 800476e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff ff5f 	bl	8004638 <__NVIC_SetPriority>
}
 800477a:	bf00      	nop
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	4603      	mov	r3, r0
 800478a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800478c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff ff33 	bl	80045fc <__NVIC_EnableIRQ>
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff ffa4 	bl	80046f4 <SysTick_Config>
 80047ac:	4603      	mov	r3, r0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80047c0:	f7ff feb0 	bl	8004524 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e316      	b.n	8004dfe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a66      	ldr	r2, [pc, #408]	; (8004970 <HAL_DMA_Init+0x1b8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d04a      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a65      	ldr	r2, [pc, #404]	; (8004974 <HAL_DMA_Init+0x1bc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d045      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a63      	ldr	r2, [pc, #396]	; (8004978 <HAL_DMA_Init+0x1c0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d040      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a62      	ldr	r2, [pc, #392]	; (800497c <HAL_DMA_Init+0x1c4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d03b      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a60      	ldr	r2, [pc, #384]	; (8004980 <HAL_DMA_Init+0x1c8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d036      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a5f      	ldr	r2, [pc, #380]	; (8004984 <HAL_DMA_Init+0x1cc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d031      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a5d      	ldr	r2, [pc, #372]	; (8004988 <HAL_DMA_Init+0x1d0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02c      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a5c      	ldr	r2, [pc, #368]	; (800498c <HAL_DMA_Init+0x1d4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d027      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a5a      	ldr	r2, [pc, #360]	; (8004990 <HAL_DMA_Init+0x1d8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d022      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a59      	ldr	r2, [pc, #356]	; (8004994 <HAL_DMA_Init+0x1dc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d01d      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_DMA_Init+0x1e0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d018      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a56      	ldr	r2, [pc, #344]	; (800499c <HAL_DMA_Init+0x1e4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a54      	ldr	r2, [pc, #336]	; (80049a0 <HAL_DMA_Init+0x1e8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a53      	ldr	r2, [pc, #332]	; (80049a4 <HAL_DMA_Init+0x1ec>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a51      	ldr	r2, [pc, #324]	; (80049a8 <HAL_DMA_Init+0x1f0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_DMA_Init+0xb8>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a50      	ldr	r2, [pc, #320]	; (80049ac <HAL_DMA_Init+0x1f4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_DMA_Init+0xbc>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <HAL_DMA_Init+0xbe>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 813b 	beq.w	8004af2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a37      	ldr	r2, [pc, #220]	; (8004970 <HAL_DMA_Init+0x1b8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d04a      	beq.n	800492c <HAL_DMA_Init+0x174>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a36      	ldr	r2, [pc, #216]	; (8004974 <HAL_DMA_Init+0x1bc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d045      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a34      	ldr	r2, [pc, #208]	; (8004978 <HAL_DMA_Init+0x1c0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d040      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a33      	ldr	r2, [pc, #204]	; (800497c <HAL_DMA_Init+0x1c4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d03b      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a31      	ldr	r2, [pc, #196]	; (8004980 <HAL_DMA_Init+0x1c8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d036      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a30      	ldr	r2, [pc, #192]	; (8004984 <HAL_DMA_Init+0x1cc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d031      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2e      	ldr	r2, [pc, #184]	; (8004988 <HAL_DMA_Init+0x1d0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d02c      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2d      	ldr	r2, [pc, #180]	; (800498c <HAL_DMA_Init+0x1d4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d027      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <HAL_DMA_Init+0x1d8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d022      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2a      	ldr	r2, [pc, #168]	; (8004994 <HAL_DMA_Init+0x1dc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d01d      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a28      	ldr	r2, [pc, #160]	; (8004998 <HAL_DMA_Init+0x1e0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d018      	beq.n	800492c <HAL_DMA_Init+0x174>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a27      	ldr	r2, [pc, #156]	; (800499c <HAL_DMA_Init+0x1e4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_DMA_Init+0x174>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <HAL_DMA_Init+0x1e8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <HAL_DMA_Init+0x174>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a24      	ldr	r2, [pc, #144]	; (80049a4 <HAL_DMA_Init+0x1ec>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_DMA_Init+0x174>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a22      	ldr	r2, [pc, #136]	; (80049a8 <HAL_DMA_Init+0x1f0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_DMA_Init+0x174>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a21      	ldr	r2, [pc, #132]	; (80049ac <HAL_DMA_Init+0x1f4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d108      	bne.n	800493e <HAL_DMA_Init+0x186>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e007      	b.n	800494e <HAL_DMA_Init+0x196>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800494e:	e02f      	b.n	80049b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004950:	f7ff fde8 	bl	8004524 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b05      	cmp	r3, #5
 800495c:	d928      	bls.n	80049b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2203      	movs	r2, #3
 8004968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e246      	b.n	8004dfe <HAL_DMA_Init+0x646>
 8004970:	40020010 	.word	0x40020010
 8004974:	40020028 	.word	0x40020028
 8004978:	40020040 	.word	0x40020040
 800497c:	40020058 	.word	0x40020058
 8004980:	40020070 	.word	0x40020070
 8004984:	40020088 	.word	0x40020088
 8004988:	400200a0 	.word	0x400200a0
 800498c:	400200b8 	.word	0x400200b8
 8004990:	40020410 	.word	0x40020410
 8004994:	40020428 	.word	0x40020428
 8004998:	40020440 	.word	0x40020440
 800499c:	40020458 	.word	0x40020458
 80049a0:	40020470 	.word	0x40020470
 80049a4:	40020488 	.word	0x40020488
 80049a8:	400204a0 	.word	0x400204a0
 80049ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1c8      	bne.n	8004950 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4b83      	ldr	r3, [pc, #524]	; (8004bd8 <HAL_DMA_Init+0x420>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80049d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d107      	bne.n	8004a14 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004a14:	4b71      	ldr	r3, [pc, #452]	; (8004bdc <HAL_DMA_Init+0x424>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b71      	ldr	r3, [pc, #452]	; (8004be0 <HAL_DMA_Init+0x428>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a20:	d328      	bcc.n	8004a74 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b28      	cmp	r3, #40	; 0x28
 8004a28:	d903      	bls.n	8004a32 <HAL_DMA_Init+0x27a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a30:	d917      	bls.n	8004a62 <HAL_DMA_Init+0x2aa>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b3e      	cmp	r3, #62	; 0x3e
 8004a38:	d903      	bls.n	8004a42 <HAL_DMA_Init+0x28a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b42      	cmp	r3, #66	; 0x42
 8004a40:	d90f      	bls.n	8004a62 <HAL_DMA_Init+0x2aa>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b46      	cmp	r3, #70	; 0x46
 8004a48:	d903      	bls.n	8004a52 <HAL_DMA_Init+0x29a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b48      	cmp	r3, #72	; 0x48
 8004a50:	d907      	bls.n	8004a62 <HAL_DMA_Init+0x2aa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b4e      	cmp	r3, #78	; 0x4e
 8004a58:	d905      	bls.n	8004a66 <HAL_DMA_Init+0x2ae>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b52      	cmp	r3, #82	; 0x52
 8004a60:	d801      	bhi.n	8004a66 <HAL_DMA_Init+0x2ae>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <HAL_DMA_Init+0x2b0>
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a72:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d117      	bne.n	8004ace <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00e      	beq.n	8004ace <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f001 fdcf 	bl	8006654 <DMA_CheckFifoParam>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2240      	movs	r2, #64	; 0x40
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e197      	b.n	8004dfe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f001 fd0a 	bl	80064f0 <DMA_CalcBaseAndBitshift>
 8004adc:	4603      	mov	r3, r0
 8004ade:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	223f      	movs	r2, #63	; 0x3f
 8004aea:	409a      	lsls	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	e0cd      	b.n	8004c8e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a3b      	ldr	r2, [pc, #236]	; (8004be4 <HAL_DMA_Init+0x42c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a39      	ldr	r2, [pc, #228]	; (8004be8 <HAL_DMA_Init+0x430>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a38      	ldr	r2, [pc, #224]	; (8004bec <HAL_DMA_Init+0x434>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a36      	ldr	r2, [pc, #216]	; (8004bf0 <HAL_DMA_Init+0x438>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a35      	ldr	r2, [pc, #212]	; (8004bf4 <HAL_DMA_Init+0x43c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a33      	ldr	r2, [pc, #204]	; (8004bf8 <HAL_DMA_Init+0x440>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a32      	ldr	r2, [pc, #200]	; (8004bfc <HAL_DMA_Init+0x444>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_DMA_Init+0x38a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a30      	ldr	r2, [pc, #192]	; (8004c00 <HAL_DMA_Init+0x448>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <HAL_DMA_Init+0x38e>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_DMA_Init+0x390>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8097 	beq.w	8004c7c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a24      	ldr	r2, [pc, #144]	; (8004be4 <HAL_DMA_Init+0x42c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d021      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <HAL_DMA_Init+0x430>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01c      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a21      	ldr	r2, [pc, #132]	; (8004bec <HAL_DMA_Init+0x434>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d017      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <HAL_DMA_Init+0x438>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d012      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1e      	ldr	r2, [pc, #120]	; (8004bf4 <HAL_DMA_Init+0x43c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00d      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <HAL_DMA_Init+0x440>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d008      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <HAL_DMA_Init+0x444>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <HAL_DMA_Init+0x3e4>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <HAL_DMA_Init+0x448>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <HAL_DMA_Init+0x44c>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	d020      	beq.n	8004c08 <HAL_DMA_Init+0x450>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b80      	cmp	r3, #128	; 0x80
 8004bcc:	d102      	bne.n	8004bd4 <HAL_DMA_Init+0x41c>
 8004bce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bd2:	e01a      	b.n	8004c0a <HAL_DMA_Init+0x452>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e018      	b.n	8004c0a <HAL_DMA_Init+0x452>
 8004bd8:	fe10803f 	.word	0xfe10803f
 8004bdc:	5c001000 	.word	0x5c001000
 8004be0:	ffff0000 	.word	0xffff0000
 8004be4:	58025408 	.word	0x58025408
 8004be8:	5802541c 	.word	0x5802541c
 8004bec:	58025430 	.word	0x58025430
 8004bf0:	58025444 	.word	0x58025444
 8004bf4:	58025458 	.word	0x58025458
 8004bf8:	5802546c 	.word	0x5802546c
 8004bfc:	58025480 	.word	0x58025480
 8004c00:	58025494 	.word	0x58025494
 8004c04:	fffe000f 	.word	0xfffe000f
 8004c08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68d2      	ldr	r2, [r2, #12]
 8004c0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b6e      	ldr	r3, [pc, #440]	; (8004e08 <HAL_DMA_Init+0x650>)
 8004c50:	4413      	add	r3, r2
 8004c52:	4a6e      	ldr	r2, [pc, #440]	; (8004e0c <HAL_DMA_Init+0x654>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	009a      	lsls	r2, r3, #2
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 fc45 	bl	80064f0 <DMA_CalcBaseAndBitshift>
 8004c66:	4603      	mov	r3, r0
 8004c68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	2201      	movs	r2, #1
 8004c74:	409a      	lsls	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	e008      	b.n	8004c8e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2240      	movs	r2, #64	; 0x40
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2203      	movs	r2, #3
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0b7      	b.n	8004dfe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a5f      	ldr	r2, [pc, #380]	; (8004e10 <HAL_DMA_Init+0x658>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d072      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5d      	ldr	r2, [pc, #372]	; (8004e14 <HAL_DMA_Init+0x65c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d06d      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a5c      	ldr	r2, [pc, #368]	; (8004e18 <HAL_DMA_Init+0x660>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d068      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5a      	ldr	r2, [pc, #360]	; (8004e1c <HAL_DMA_Init+0x664>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d063      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a59      	ldr	r2, [pc, #356]	; (8004e20 <HAL_DMA_Init+0x668>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d05e      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a57      	ldr	r2, [pc, #348]	; (8004e24 <HAL_DMA_Init+0x66c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d059      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a56      	ldr	r2, [pc, #344]	; (8004e28 <HAL_DMA_Init+0x670>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d054      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a54      	ldr	r2, [pc, #336]	; (8004e2c <HAL_DMA_Init+0x674>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d04f      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a53      	ldr	r2, [pc, #332]	; (8004e30 <HAL_DMA_Init+0x678>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d04a      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a51      	ldr	r2, [pc, #324]	; (8004e34 <HAL_DMA_Init+0x67c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d045      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a50      	ldr	r2, [pc, #320]	; (8004e38 <HAL_DMA_Init+0x680>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d040      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a4e      	ldr	r2, [pc, #312]	; (8004e3c <HAL_DMA_Init+0x684>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d03b      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a4d      	ldr	r2, [pc, #308]	; (8004e40 <HAL_DMA_Init+0x688>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d036      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a4b      	ldr	r2, [pc, #300]	; (8004e44 <HAL_DMA_Init+0x68c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d031      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4a      	ldr	r2, [pc, #296]	; (8004e48 <HAL_DMA_Init+0x690>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d02c      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a48      	ldr	r2, [pc, #288]	; (8004e4c <HAL_DMA_Init+0x694>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d027      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a47      	ldr	r2, [pc, #284]	; (8004e50 <HAL_DMA_Init+0x698>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a45      	ldr	r2, [pc, #276]	; (8004e54 <HAL_DMA_Init+0x69c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a44      	ldr	r2, [pc, #272]	; (8004e58 <HAL_DMA_Init+0x6a0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a42      	ldr	r2, [pc, #264]	; (8004e5c <HAL_DMA_Init+0x6a4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a41      	ldr	r2, [pc, #260]	; (8004e60 <HAL_DMA_Init+0x6a8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a3f      	ldr	r2, [pc, #252]	; (8004e64 <HAL_DMA_Init+0x6ac>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a3e      	ldr	r2, [pc, #248]	; (8004e68 <HAL_DMA_Init+0x6b0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_DMA_Init+0x5c6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <HAL_DMA_Init+0x6b4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <HAL_DMA_Init+0x5ca>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <HAL_DMA_Init+0x5cc>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d032      	beq.n	8004dee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f001 fcdf 	bl	800674c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b80      	cmp	r3, #128	; 0x80
 8004d94:	d102      	bne.n	8004d9c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004db0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d010      	beq.n	8004ddc <HAL_DMA_Init+0x624>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d80c      	bhi.n	8004ddc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f001 fd5c 	bl	8006880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	e008      	b.n	8004dee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	a7fdabf8 	.word	0xa7fdabf8
 8004e0c:	cccccccd 	.word	0xcccccccd
 8004e10:	40020010 	.word	0x40020010
 8004e14:	40020028 	.word	0x40020028
 8004e18:	40020040 	.word	0x40020040
 8004e1c:	40020058 	.word	0x40020058
 8004e20:	40020070 	.word	0x40020070
 8004e24:	40020088 	.word	0x40020088
 8004e28:	400200a0 	.word	0x400200a0
 8004e2c:	400200b8 	.word	0x400200b8
 8004e30:	40020410 	.word	0x40020410
 8004e34:	40020428 	.word	0x40020428
 8004e38:	40020440 	.word	0x40020440
 8004e3c:	40020458 	.word	0x40020458
 8004e40:	40020470 	.word	0x40020470
 8004e44:	40020488 	.word	0x40020488
 8004e48:	400204a0 	.word	0x400204a0
 8004e4c:	400204b8 	.word	0x400204b8
 8004e50:	58025408 	.word	0x58025408
 8004e54:	5802541c 	.word	0x5802541c
 8004e58:	58025430 	.word	0x58025430
 8004e5c:	58025444 	.word	0x58025444
 8004e60:	58025458 	.word	0x58025458
 8004e64:	5802546c 	.word	0x5802546c
 8004e68:	58025480 	.word	0x58025480
 8004e6c:	58025494 	.word	0x58025494

08004e70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e226      	b.n	80052da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_DMA_Start_IT+0x2a>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e21f      	b.n	80052da <HAL_DMA_Start_IT+0x46a>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	f040 820a 	bne.w	80052c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a68      	ldr	r2, [pc, #416]	; (8005064 <HAL_DMA_Start_IT+0x1f4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d04a      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a66      	ldr	r2, [pc, #408]	; (8005068 <HAL_DMA_Start_IT+0x1f8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d045      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a65      	ldr	r2, [pc, #404]	; (800506c <HAL_DMA_Start_IT+0x1fc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d040      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a63      	ldr	r2, [pc, #396]	; (8005070 <HAL_DMA_Start_IT+0x200>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d03b      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a62      	ldr	r2, [pc, #392]	; (8005074 <HAL_DMA_Start_IT+0x204>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d036      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a60      	ldr	r2, [pc, #384]	; (8005078 <HAL_DMA_Start_IT+0x208>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d031      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a5f      	ldr	r2, [pc, #380]	; (800507c <HAL_DMA_Start_IT+0x20c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d02c      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a5d      	ldr	r2, [pc, #372]	; (8005080 <HAL_DMA_Start_IT+0x210>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d027      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5c      	ldr	r2, [pc, #368]	; (8005084 <HAL_DMA_Start_IT+0x214>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a5a      	ldr	r2, [pc, #360]	; (8005088 <HAL_DMA_Start_IT+0x218>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a59      	ldr	r2, [pc, #356]	; (800508c <HAL_DMA_Start_IT+0x21c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a57      	ldr	r2, [pc, #348]	; (8005090 <HAL_DMA_Start_IT+0x220>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a56      	ldr	r2, [pc, #344]	; (8005094 <HAL_DMA_Start_IT+0x224>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a54      	ldr	r2, [pc, #336]	; (8005098 <HAL_DMA_Start_IT+0x228>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a53      	ldr	r2, [pc, #332]	; (800509c <HAL_DMA_Start_IT+0x22c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_DMA_Start_IT+0xee>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a51      	ldr	r2, [pc, #324]	; (80050a0 <HAL_DMA_Start_IT+0x230>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d108      	bne.n	8004f70 <HAL_DMA_Start_IT+0x100>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e007      	b.n	8004f80 <HAL_DMA_Start_IT+0x110>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f001 f906 	bl	8006198 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a34      	ldr	r2, [pc, #208]	; (8005064 <HAL_DMA_Start_IT+0x1f4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d04a      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a33      	ldr	r2, [pc, #204]	; (8005068 <HAL_DMA_Start_IT+0x1f8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d045      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a31      	ldr	r2, [pc, #196]	; (800506c <HAL_DMA_Start_IT+0x1fc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d040      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a30      	ldr	r2, [pc, #192]	; (8005070 <HAL_DMA_Start_IT+0x200>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d03b      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2e      	ldr	r2, [pc, #184]	; (8005074 <HAL_DMA_Start_IT+0x204>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d036      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2d      	ldr	r2, [pc, #180]	; (8005078 <HAL_DMA_Start_IT+0x208>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d031      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2b      	ldr	r2, [pc, #172]	; (800507c <HAL_DMA_Start_IT+0x20c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d02c      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2a      	ldr	r2, [pc, #168]	; (8005080 <HAL_DMA_Start_IT+0x210>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d027      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a28      	ldr	r2, [pc, #160]	; (8005084 <HAL_DMA_Start_IT+0x214>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d022      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a27      	ldr	r2, [pc, #156]	; (8005088 <HAL_DMA_Start_IT+0x218>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d01d      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a25      	ldr	r2, [pc, #148]	; (800508c <HAL_DMA_Start_IT+0x21c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d018      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a24      	ldr	r2, [pc, #144]	; (8005090 <HAL_DMA_Start_IT+0x220>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a22      	ldr	r2, [pc, #136]	; (8005094 <HAL_DMA_Start_IT+0x224>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a21      	ldr	r2, [pc, #132]	; (8005098 <HAL_DMA_Start_IT+0x228>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1f      	ldr	r2, [pc, #124]	; (800509c <HAL_DMA_Start_IT+0x22c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_DMA_Start_IT+0x1bc>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <HAL_DMA_Start_IT+0x230>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_DMA_Start_IT+0x1c0>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_DMA_Start_IT+0x1c2>
 8005030:	2300      	movs	r3, #0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d036      	beq.n	80050a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 021e 	bic.w	r2, r3, #30
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0216 	orr.w	r2, r2, #22
 8005048:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d03e      	beq.n	80050d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0208 	orr.w	r2, r2, #8
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e035      	b.n	80050d0 <HAL_DMA_Start_IT+0x260>
 8005064:	40020010 	.word	0x40020010
 8005068:	40020028 	.word	0x40020028
 800506c:	40020040 	.word	0x40020040
 8005070:	40020058 	.word	0x40020058
 8005074:	40020070 	.word	0x40020070
 8005078:	40020088 	.word	0x40020088
 800507c:	400200a0 	.word	0x400200a0
 8005080:	400200b8 	.word	0x400200b8
 8005084:	40020410 	.word	0x40020410
 8005088:	40020428 	.word	0x40020428
 800508c:	40020440 	.word	0x40020440
 8005090:	40020458 	.word	0x40020458
 8005094:	40020470 	.word	0x40020470
 8005098:	40020488 	.word	0x40020488
 800509c:	400204a0 	.word	0x400204a0
 80050a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 020e 	bic.w	r2, r3, #14
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 020a 	orr.w	r2, r2, #10
 80050b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0204 	orr.w	r2, r2, #4
 80050ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a83      	ldr	r2, [pc, #524]	; (80052e4 <HAL_DMA_Start_IT+0x474>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d072      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a82      	ldr	r2, [pc, #520]	; (80052e8 <HAL_DMA_Start_IT+0x478>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d06d      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a80      	ldr	r2, [pc, #512]	; (80052ec <HAL_DMA_Start_IT+0x47c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d068      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a7f      	ldr	r2, [pc, #508]	; (80052f0 <HAL_DMA_Start_IT+0x480>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d063      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a7d      	ldr	r2, [pc, #500]	; (80052f4 <HAL_DMA_Start_IT+0x484>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d05e      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a7c      	ldr	r2, [pc, #496]	; (80052f8 <HAL_DMA_Start_IT+0x488>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d059      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a7a      	ldr	r2, [pc, #488]	; (80052fc <HAL_DMA_Start_IT+0x48c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d054      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a79      	ldr	r2, [pc, #484]	; (8005300 <HAL_DMA_Start_IT+0x490>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d04f      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a77      	ldr	r2, [pc, #476]	; (8005304 <HAL_DMA_Start_IT+0x494>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d04a      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a76      	ldr	r2, [pc, #472]	; (8005308 <HAL_DMA_Start_IT+0x498>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d045      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a74      	ldr	r2, [pc, #464]	; (800530c <HAL_DMA_Start_IT+0x49c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d040      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a73      	ldr	r2, [pc, #460]	; (8005310 <HAL_DMA_Start_IT+0x4a0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d03b      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a71      	ldr	r2, [pc, #452]	; (8005314 <HAL_DMA_Start_IT+0x4a4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d036      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a70      	ldr	r2, [pc, #448]	; (8005318 <HAL_DMA_Start_IT+0x4a8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d031      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a6e      	ldr	r2, [pc, #440]	; (800531c <HAL_DMA_Start_IT+0x4ac>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d02c      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a6d      	ldr	r2, [pc, #436]	; (8005320 <HAL_DMA_Start_IT+0x4b0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d027      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a6b      	ldr	r2, [pc, #428]	; (8005324 <HAL_DMA_Start_IT+0x4b4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a6a      	ldr	r2, [pc, #424]	; (8005328 <HAL_DMA_Start_IT+0x4b8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d01d      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a68      	ldr	r2, [pc, #416]	; (800532c <HAL_DMA_Start_IT+0x4bc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a67      	ldr	r2, [pc, #412]	; (8005330 <HAL_DMA_Start_IT+0x4c0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a65      	ldr	r2, [pc, #404]	; (8005334 <HAL_DMA_Start_IT+0x4c4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a64      	ldr	r2, [pc, #400]	; (8005338 <HAL_DMA_Start_IT+0x4c8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a62      	ldr	r2, [pc, #392]	; (800533c <HAL_DMA_Start_IT+0x4cc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_DMA_Start_IT+0x350>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a61      	ldr	r2, [pc, #388]	; (8005340 <HAL_DMA_Start_IT+0x4d0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <HAL_DMA_Start_IT+0x354>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_DMA_Start_IT+0x356>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01a      	beq.n	8005200 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a37      	ldr	r2, [pc, #220]	; (80052e4 <HAL_DMA_Start_IT+0x474>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d04a      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a36      	ldr	r2, [pc, #216]	; (80052e8 <HAL_DMA_Start_IT+0x478>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d045      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a34      	ldr	r2, [pc, #208]	; (80052ec <HAL_DMA_Start_IT+0x47c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d040      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a33      	ldr	r2, [pc, #204]	; (80052f0 <HAL_DMA_Start_IT+0x480>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d03b      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a31      	ldr	r2, [pc, #196]	; (80052f4 <HAL_DMA_Start_IT+0x484>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d036      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a30      	ldr	r2, [pc, #192]	; (80052f8 <HAL_DMA_Start_IT+0x488>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d031      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2e      	ldr	r2, [pc, #184]	; (80052fc <HAL_DMA_Start_IT+0x48c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d02c      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2d      	ldr	r2, [pc, #180]	; (8005300 <HAL_DMA_Start_IT+0x490>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d027      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2b      	ldr	r2, [pc, #172]	; (8005304 <HAL_DMA_Start_IT+0x494>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d022      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2a      	ldr	r2, [pc, #168]	; (8005308 <HAL_DMA_Start_IT+0x498>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d01d      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a28      	ldr	r2, [pc, #160]	; (800530c <HAL_DMA_Start_IT+0x49c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d018      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a27      	ldr	r2, [pc, #156]	; (8005310 <HAL_DMA_Start_IT+0x4a0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d013      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a25      	ldr	r2, [pc, #148]	; (8005314 <HAL_DMA_Start_IT+0x4a4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00e      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a24      	ldr	r2, [pc, #144]	; (8005318 <HAL_DMA_Start_IT+0x4a8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d009      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a22      	ldr	r2, [pc, #136]	; (800531c <HAL_DMA_Start_IT+0x4ac>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <HAL_DMA_Start_IT+0x430>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a21      	ldr	r2, [pc, #132]	; (8005320 <HAL_DMA_Start_IT+0x4b0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d108      	bne.n	80052b2 <HAL_DMA_Start_IT+0x442>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e012      	b.n	80052d8 <HAL_DMA_Start_IT+0x468>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e009      	b.n	80052d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40020010 	.word	0x40020010
 80052e8:	40020028 	.word	0x40020028
 80052ec:	40020040 	.word	0x40020040
 80052f0:	40020058 	.word	0x40020058
 80052f4:	40020070 	.word	0x40020070
 80052f8:	40020088 	.word	0x40020088
 80052fc:	400200a0 	.word	0x400200a0
 8005300:	400200b8 	.word	0x400200b8
 8005304:	40020410 	.word	0x40020410
 8005308:	40020428 	.word	0x40020428
 800530c:	40020440 	.word	0x40020440
 8005310:	40020458 	.word	0x40020458
 8005314:	40020470 	.word	0x40020470
 8005318:	40020488 	.word	0x40020488
 800531c:	400204a0 	.word	0x400204a0
 8005320:	400204b8 	.word	0x400204b8
 8005324:	58025408 	.word	0x58025408
 8005328:	5802541c 	.word	0x5802541c
 800532c:	58025430 	.word	0x58025430
 8005330:	58025444 	.word	0x58025444
 8005334:	58025458 	.word	0x58025458
 8005338:	5802546c 	.word	0x5802546c
 800533c:	58025480 	.word	0x58025480
 8005340:	58025494 	.word	0x58025494

08005344 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	; 0x28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005350:	4b67      	ldr	r3, [pc, #412]	; (80054f0 <HAL_DMA_IRQHandler+0x1ac>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a67      	ldr	r2, [pc, #412]	; (80054f4 <HAL_DMA_IRQHandler+0x1b0>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	0a9b      	lsrs	r3, r3, #10
 800535c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005368:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a5f      	ldr	r2, [pc, #380]	; (80054f8 <HAL_DMA_IRQHandler+0x1b4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d04a      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a5d      	ldr	r2, [pc, #372]	; (80054fc <HAL_DMA_IRQHandler+0x1b8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d045      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a5c      	ldr	r2, [pc, #368]	; (8005500 <HAL_DMA_IRQHandler+0x1bc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d040      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a5a      	ldr	r2, [pc, #360]	; (8005504 <HAL_DMA_IRQHandler+0x1c0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d03b      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a59      	ldr	r2, [pc, #356]	; (8005508 <HAL_DMA_IRQHandler+0x1c4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d036      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a57      	ldr	r2, [pc, #348]	; (800550c <HAL_DMA_IRQHandler+0x1c8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d031      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a56      	ldr	r2, [pc, #344]	; (8005510 <HAL_DMA_IRQHandler+0x1cc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d02c      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a54      	ldr	r2, [pc, #336]	; (8005514 <HAL_DMA_IRQHandler+0x1d0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d027      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a53      	ldr	r2, [pc, #332]	; (8005518 <HAL_DMA_IRQHandler+0x1d4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d022      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a51      	ldr	r2, [pc, #324]	; (800551c <HAL_DMA_IRQHandler+0x1d8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d01d      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a50      	ldr	r2, [pc, #320]	; (8005520 <HAL_DMA_IRQHandler+0x1dc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d018      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a4e      	ldr	r2, [pc, #312]	; (8005524 <HAL_DMA_IRQHandler+0x1e0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a4d      	ldr	r2, [pc, #308]	; (8005528 <HAL_DMA_IRQHandler+0x1e4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00e      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a4b      	ldr	r2, [pc, #300]	; (800552c <HAL_DMA_IRQHandler+0x1e8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d009      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a4a      	ldr	r2, [pc, #296]	; (8005530 <HAL_DMA_IRQHandler+0x1ec>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d004      	beq.n	8005416 <HAL_DMA_IRQHandler+0xd2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a48      	ldr	r2, [pc, #288]	; (8005534 <HAL_DMA_IRQHandler+0x1f0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d101      	bne.n	800541a <HAL_DMA_IRQHandler+0xd6>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <HAL_DMA_IRQHandler+0xd8>
 800541a:	2300      	movs	r3, #0
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 842b 	beq.w	8005c78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	2208      	movs	r2, #8
 800542c:	409a      	lsls	r2, r3
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	4013      	ands	r3, r2
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80a2 	beq.w	800557c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a2e      	ldr	r2, [pc, #184]	; (80054f8 <HAL_DMA_IRQHandler+0x1b4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d04a      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2d      	ldr	r2, [pc, #180]	; (80054fc <HAL_DMA_IRQHandler+0x1b8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d045      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2b      	ldr	r2, [pc, #172]	; (8005500 <HAL_DMA_IRQHandler+0x1bc>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d040      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2a      	ldr	r2, [pc, #168]	; (8005504 <HAL_DMA_IRQHandler+0x1c0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d03b      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a28      	ldr	r2, [pc, #160]	; (8005508 <HAL_DMA_IRQHandler+0x1c4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d036      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a27      	ldr	r2, [pc, #156]	; (800550c <HAL_DMA_IRQHandler+0x1c8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d031      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a25      	ldr	r2, [pc, #148]	; (8005510 <HAL_DMA_IRQHandler+0x1cc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d02c      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a24      	ldr	r2, [pc, #144]	; (8005514 <HAL_DMA_IRQHandler+0x1d0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d027      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a22      	ldr	r2, [pc, #136]	; (8005518 <HAL_DMA_IRQHandler+0x1d4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a21      	ldr	r2, [pc, #132]	; (800551c <HAL_DMA_IRQHandler+0x1d8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d01d      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1f      	ldr	r2, [pc, #124]	; (8005520 <HAL_DMA_IRQHandler+0x1dc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1e      	ldr	r2, [pc, #120]	; (8005524 <HAL_DMA_IRQHandler+0x1e0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <HAL_DMA_IRQHandler+0x1e4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1b      	ldr	r2, [pc, #108]	; (800552c <HAL_DMA_IRQHandler+0x1e8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a19      	ldr	r2, [pc, #100]	; (8005530 <HAL_DMA_IRQHandler+0x1ec>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x194>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a18      	ldr	r2, [pc, #96]	; (8005534 <HAL_DMA_IRQHandler+0x1f0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d12f      	bne.n	8005538 <HAL_DMA_IRQHandler+0x1f4>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf14      	ite	ne
 80054e6:	2301      	movne	r3, #1
 80054e8:	2300      	moveq	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	e02e      	b.n	800554c <HAL_DMA_IRQHandler+0x208>
 80054ee:	bf00      	nop
 80054f0:	24000010 	.word	0x24000010
 80054f4:	1b4e81b5 	.word	0x1b4e81b5
 80054f8:	40020010 	.word	0x40020010
 80054fc:	40020028 	.word	0x40020028
 8005500:	40020040 	.word	0x40020040
 8005504:	40020058 	.word	0x40020058
 8005508:	40020070 	.word	0x40020070
 800550c:	40020088 	.word	0x40020088
 8005510:	400200a0 	.word	0x400200a0
 8005514:	400200b8 	.word	0x400200b8
 8005518:	40020410 	.word	0x40020410
 800551c:	40020428 	.word	0x40020428
 8005520:	40020440 	.word	0x40020440
 8005524:	40020458 	.word	0x40020458
 8005528:	40020470 	.word	0x40020470
 800552c:	40020488 	.word	0x40020488
 8005530:	400204a0 	.word	0x400204a0
 8005534:	400204b8 	.word	0x400204b8
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	bf14      	ite	ne
 8005546:	2301      	movne	r3, #1
 8005548:	2300      	moveq	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d015      	beq.n	800557c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0204 	bic.w	r2, r2, #4
 800555e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	2208      	movs	r2, #8
 800556a:	409a      	lsls	r2, r3
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	f043 0201 	orr.w	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	fa22 f303 	lsr.w	r3, r2, r3
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d06e      	beq.n	8005670 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a69      	ldr	r2, [pc, #420]	; (800573c <HAL_DMA_IRQHandler+0x3f8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d04a      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a67      	ldr	r2, [pc, #412]	; (8005740 <HAL_DMA_IRQHandler+0x3fc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d045      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a66      	ldr	r2, [pc, #408]	; (8005744 <HAL_DMA_IRQHandler+0x400>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d040      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a64      	ldr	r2, [pc, #400]	; (8005748 <HAL_DMA_IRQHandler+0x404>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d03b      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a63      	ldr	r2, [pc, #396]	; (800574c <HAL_DMA_IRQHandler+0x408>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d036      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a61      	ldr	r2, [pc, #388]	; (8005750 <HAL_DMA_IRQHandler+0x40c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d031      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a60      	ldr	r2, [pc, #384]	; (8005754 <HAL_DMA_IRQHandler+0x410>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d02c      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a5e      	ldr	r2, [pc, #376]	; (8005758 <HAL_DMA_IRQHandler+0x414>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d027      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a5d      	ldr	r2, [pc, #372]	; (800575c <HAL_DMA_IRQHandler+0x418>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d022      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a5b      	ldr	r2, [pc, #364]	; (8005760 <HAL_DMA_IRQHandler+0x41c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01d      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a5a      	ldr	r2, [pc, #360]	; (8005764 <HAL_DMA_IRQHandler+0x420>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d018      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a58      	ldr	r2, [pc, #352]	; (8005768 <HAL_DMA_IRQHandler+0x424>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a57      	ldr	r2, [pc, #348]	; (800576c <HAL_DMA_IRQHandler+0x428>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00e      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a55      	ldr	r2, [pc, #340]	; (8005770 <HAL_DMA_IRQHandler+0x42c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d009      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a54      	ldr	r2, [pc, #336]	; (8005774 <HAL_DMA_IRQHandler+0x430>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d004      	beq.n	8005632 <HAL_DMA_IRQHandler+0x2ee>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a52      	ldr	r2, [pc, #328]	; (8005778 <HAL_DMA_IRQHandler+0x434>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d10a      	bne.n	8005648 <HAL_DMA_IRQHandler+0x304>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e003      	b.n	8005650 <HAL_DMA_IRQHandler+0x30c>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	2201      	movs	r2, #1
 800565e:	409a      	lsls	r2, r3
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005668:	f043 0202 	orr.w	r2, r3, #2
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	2204      	movs	r2, #4
 800567a:	409a      	lsls	r2, r3
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 808f 	beq.w	80057a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2c      	ldr	r2, [pc, #176]	; (800573c <HAL_DMA_IRQHandler+0x3f8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d04a      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2a      	ldr	r2, [pc, #168]	; (8005740 <HAL_DMA_IRQHandler+0x3fc>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d045      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a29      	ldr	r2, [pc, #164]	; (8005744 <HAL_DMA_IRQHandler+0x400>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d040      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a27      	ldr	r2, [pc, #156]	; (8005748 <HAL_DMA_IRQHandler+0x404>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d03b      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a26      	ldr	r2, [pc, #152]	; (800574c <HAL_DMA_IRQHandler+0x408>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d036      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a24      	ldr	r2, [pc, #144]	; (8005750 <HAL_DMA_IRQHandler+0x40c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d031      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a23      	ldr	r2, [pc, #140]	; (8005754 <HAL_DMA_IRQHandler+0x410>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d02c      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a21      	ldr	r2, [pc, #132]	; (8005758 <HAL_DMA_IRQHandler+0x414>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d027      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a20      	ldr	r2, [pc, #128]	; (800575c <HAL_DMA_IRQHandler+0x418>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d022      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <HAL_DMA_IRQHandler+0x41c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d01d      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <HAL_DMA_IRQHandler+0x420>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d018      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1b      	ldr	r2, [pc, #108]	; (8005768 <HAL_DMA_IRQHandler+0x424>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1a      	ldr	r2, [pc, #104]	; (800576c <HAL_DMA_IRQHandler+0x428>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00e      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a18      	ldr	r2, [pc, #96]	; (8005770 <HAL_DMA_IRQHandler+0x42c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d009      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a17      	ldr	r2, [pc, #92]	; (8005774 <HAL_DMA_IRQHandler+0x430>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d004      	beq.n	8005726 <HAL_DMA_IRQHandler+0x3e2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a15      	ldr	r2, [pc, #84]	; (8005778 <HAL_DMA_IRQHandler+0x434>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d12a      	bne.n	800577c <HAL_DMA_IRQHandler+0x438>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	bf14      	ite	ne
 8005734:	2301      	movne	r3, #1
 8005736:	2300      	moveq	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e023      	b.n	8005784 <HAL_DMA_IRQHandler+0x440>
 800573c:	40020010 	.word	0x40020010
 8005740:	40020028 	.word	0x40020028
 8005744:	40020040 	.word	0x40020040
 8005748:	40020058 	.word	0x40020058
 800574c:	40020070 	.word	0x40020070
 8005750:	40020088 	.word	0x40020088
 8005754:	400200a0 	.word	0x400200a0
 8005758:	400200b8 	.word	0x400200b8
 800575c:	40020410 	.word	0x40020410
 8005760:	40020428 	.word	0x40020428
 8005764:	40020440 	.word	0x40020440
 8005768:	40020458 	.word	0x40020458
 800576c:	40020470 	.word	0x40020470
 8005770:	40020488 	.word	0x40020488
 8005774:	400204a0 	.word	0x400204a0
 8005778:	400204b8 	.word	0x400204b8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00d      	beq.n	80057a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	2204      	movs	r2, #4
 8005792:	409a      	lsls	r2, r3
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579c:	f043 0204 	orr.w	r2, r3, #4
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	2210      	movs	r2, #16
 80057ae:	409a      	lsls	r2, r3
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80a6 	beq.w	8005906 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a85      	ldr	r2, [pc, #532]	; (80059d4 <HAL_DMA_IRQHandler+0x690>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d04a      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a83      	ldr	r2, [pc, #524]	; (80059d8 <HAL_DMA_IRQHandler+0x694>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d045      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a82      	ldr	r2, [pc, #520]	; (80059dc <HAL_DMA_IRQHandler+0x698>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d040      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a80      	ldr	r2, [pc, #512]	; (80059e0 <HAL_DMA_IRQHandler+0x69c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d03b      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a7f      	ldr	r2, [pc, #508]	; (80059e4 <HAL_DMA_IRQHandler+0x6a0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d036      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a7d      	ldr	r2, [pc, #500]	; (80059e8 <HAL_DMA_IRQHandler+0x6a4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d031      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a7c      	ldr	r2, [pc, #496]	; (80059ec <HAL_DMA_IRQHandler+0x6a8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d02c      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a7a      	ldr	r2, [pc, #488]	; (80059f0 <HAL_DMA_IRQHandler+0x6ac>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d027      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a79      	ldr	r2, [pc, #484]	; (80059f4 <HAL_DMA_IRQHandler+0x6b0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d022      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a77      	ldr	r2, [pc, #476]	; (80059f8 <HAL_DMA_IRQHandler+0x6b4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01d      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a76      	ldr	r2, [pc, #472]	; (80059fc <HAL_DMA_IRQHandler+0x6b8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d018      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a74      	ldr	r2, [pc, #464]	; (8005a00 <HAL_DMA_IRQHandler+0x6bc>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a73      	ldr	r2, [pc, #460]	; (8005a04 <HAL_DMA_IRQHandler+0x6c0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00e      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a71      	ldr	r2, [pc, #452]	; (8005a08 <HAL_DMA_IRQHandler+0x6c4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a70      	ldr	r2, [pc, #448]	; (8005a0c <HAL_DMA_IRQHandler+0x6c8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_DMA_IRQHandler+0x516>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a6e      	ldr	r2, [pc, #440]	; (8005a10 <HAL_DMA_IRQHandler+0x6cc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d10a      	bne.n	8005870 <HAL_DMA_IRQHandler+0x52c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e009      	b.n	8005884 <HAL_DMA_IRQHandler+0x540>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b00      	cmp	r3, #0
 800587c:	bf14      	ite	ne
 800587e:	2301      	movne	r3, #1
 8005880:	2300      	moveq	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d03e      	beq.n	8005906 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	2210      	movs	r2, #16
 8005892:	409a      	lsls	r2, r3
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d018      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d108      	bne.n	80058c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d024      	beq.n	8005906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4798      	blx	r3
 80058c4:	e01f      	b.n	8005906 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01b      	beq.n	8005906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
 80058d6:	e016      	b.n	8005906 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d107      	bne.n	80058f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0208 	bic.w	r2, r2, #8
 80058f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2220      	movs	r2, #32
 8005910:	409a      	lsls	r2, r3
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	4013      	ands	r3, r2
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 8110 	beq.w	8005b3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a2c      	ldr	r2, [pc, #176]	; (80059d4 <HAL_DMA_IRQHandler+0x690>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d04a      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a2b      	ldr	r2, [pc, #172]	; (80059d8 <HAL_DMA_IRQHandler+0x694>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d045      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a29      	ldr	r2, [pc, #164]	; (80059dc <HAL_DMA_IRQHandler+0x698>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d040      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a28      	ldr	r2, [pc, #160]	; (80059e0 <HAL_DMA_IRQHandler+0x69c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d03b      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a26      	ldr	r2, [pc, #152]	; (80059e4 <HAL_DMA_IRQHandler+0x6a0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d036      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a25      	ldr	r2, [pc, #148]	; (80059e8 <HAL_DMA_IRQHandler+0x6a4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d031      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a23      	ldr	r2, [pc, #140]	; (80059ec <HAL_DMA_IRQHandler+0x6a8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d02c      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a22      	ldr	r2, [pc, #136]	; (80059f0 <HAL_DMA_IRQHandler+0x6ac>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d027      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <HAL_DMA_IRQHandler+0x6b0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d022      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_DMA_IRQHandler+0x6b4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d01d      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <HAL_DMA_IRQHandler+0x6b8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d018      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_DMA_IRQHandler+0x6bc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <HAL_DMA_IRQHandler+0x6c0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00e      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a19      	ldr	r2, [pc, #100]	; (8005a08 <HAL_DMA_IRQHandler+0x6c4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d009      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <HAL_DMA_IRQHandler+0x6c8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d004      	beq.n	80059bc <HAL_DMA_IRQHandler+0x678>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <HAL_DMA_IRQHandler+0x6cc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d12b      	bne.n	8005a14 <HAL_DMA_IRQHandler+0x6d0>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bf14      	ite	ne
 80059ca:	2301      	movne	r3, #1
 80059cc:	2300      	moveq	r3, #0
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	e02a      	b.n	8005a28 <HAL_DMA_IRQHandler+0x6e4>
 80059d2:	bf00      	nop
 80059d4:	40020010 	.word	0x40020010
 80059d8:	40020028 	.word	0x40020028
 80059dc:	40020040 	.word	0x40020040
 80059e0:	40020058 	.word	0x40020058
 80059e4:	40020070 	.word	0x40020070
 80059e8:	40020088 	.word	0x40020088
 80059ec:	400200a0 	.word	0x400200a0
 80059f0:	400200b8 	.word	0x400200b8
 80059f4:	40020410 	.word	0x40020410
 80059f8:	40020428 	.word	0x40020428
 80059fc:	40020440 	.word	0x40020440
 8005a00:	40020458 	.word	0x40020458
 8005a04:	40020470 	.word	0x40020470
 8005a08:	40020488 	.word	0x40020488
 8005a0c:	400204a0 	.word	0x400204a0
 8005a10:	400204b8 	.word	0x400204b8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	bf14      	ite	ne
 8005a22:	2301      	movne	r3, #1
 8005a24:	2300      	moveq	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8087 	beq.w	8005b3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a32:	f003 031f 	and.w	r3, r3, #31
 8005a36:	2220      	movs	r2, #32
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d139      	bne.n	8005abe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0216 	bic.w	r2, r2, #22
 8005a58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695a      	ldr	r2, [r3, #20]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <HAL_DMA_IRQHandler+0x736>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0208 	bic.w	r2, r2, #8
 8005a88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8e:	f003 031f 	and.w	r3, r3, #31
 8005a92:	223f      	movs	r2, #63	; 0x3f
 8005a94:	409a      	lsls	r2, r3
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 834a 	beq.w	8006148 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
          }
          return;
 8005abc:	e344      	b.n	8006148 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d018      	beq.n	8005afe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d108      	bne.n	8005aec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d02c      	beq.n	8005b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
 8005aea:	e027      	b.n	8005b3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d023      	beq.n	8005b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	4798      	blx	r3
 8005afc:	e01e      	b.n	8005b3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10f      	bne.n	8005b2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0210 	bic.w	r2, r2, #16
 8005b1a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8306 	beq.w	8006152 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 8088 	beq.w	8005c64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2204      	movs	r2, #4
 8005b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a7a      	ldr	r2, [pc, #488]	; (8005d4c <HAL_DMA_IRQHandler+0xa08>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d04a      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a79      	ldr	r2, [pc, #484]	; (8005d50 <HAL_DMA_IRQHandler+0xa0c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d045      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a77      	ldr	r2, [pc, #476]	; (8005d54 <HAL_DMA_IRQHandler+0xa10>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d040      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a76      	ldr	r2, [pc, #472]	; (8005d58 <HAL_DMA_IRQHandler+0xa14>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d03b      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a74      	ldr	r2, [pc, #464]	; (8005d5c <HAL_DMA_IRQHandler+0xa18>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d036      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a73      	ldr	r2, [pc, #460]	; (8005d60 <HAL_DMA_IRQHandler+0xa1c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d031      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a71      	ldr	r2, [pc, #452]	; (8005d64 <HAL_DMA_IRQHandler+0xa20>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d02c      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a70      	ldr	r2, [pc, #448]	; (8005d68 <HAL_DMA_IRQHandler+0xa24>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d027      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a6e      	ldr	r2, [pc, #440]	; (8005d6c <HAL_DMA_IRQHandler+0xa28>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d022      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a6d      	ldr	r2, [pc, #436]	; (8005d70 <HAL_DMA_IRQHandler+0xa2c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d01d      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a6b      	ldr	r2, [pc, #428]	; (8005d74 <HAL_DMA_IRQHandler+0xa30>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d018      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a6a      	ldr	r2, [pc, #424]	; (8005d78 <HAL_DMA_IRQHandler+0xa34>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d013      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a68      	ldr	r2, [pc, #416]	; (8005d7c <HAL_DMA_IRQHandler+0xa38>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00e      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a67      	ldr	r2, [pc, #412]	; (8005d80 <HAL_DMA_IRQHandler+0xa3c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d009      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a65      	ldr	r2, [pc, #404]	; (8005d84 <HAL_DMA_IRQHandler+0xa40>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x8b8>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a64      	ldr	r2, [pc, #400]	; (8005d88 <HAL_DMA_IRQHandler+0xa44>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d108      	bne.n	8005c0e <HAL_DMA_IRQHandler+0x8ca>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e007      	b.n	8005c1e <HAL_DMA_IRQHandler+0x8da>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0201 	bic.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3301      	adds	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d307      	bcc.n	8005c3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f2      	bne.n	8005c1e <HAL_DMA_IRQHandler+0x8da>
 8005c38:	e000      	b.n	8005c3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c3a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2203      	movs	r2, #3
 8005c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005c5a:	e003      	b.n	8005c64 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8272 	beq.w	8006152 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	4798      	blx	r3
 8005c76:	e26c      	b.n	8006152 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a43      	ldr	r2, [pc, #268]	; (8005d8c <HAL_DMA_IRQHandler+0xa48>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d022      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x984>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a42      	ldr	r2, [pc, #264]	; (8005d90 <HAL_DMA_IRQHandler+0xa4c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d01d      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x984>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a40      	ldr	r2, [pc, #256]	; (8005d94 <HAL_DMA_IRQHandler+0xa50>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d018      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x984>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a3f      	ldr	r2, [pc, #252]	; (8005d98 <HAL_DMA_IRQHandler+0xa54>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x984>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a3d      	ldr	r2, [pc, #244]	; (8005d9c <HAL_DMA_IRQHandler+0xa58>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x984>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a3c      	ldr	r2, [pc, #240]	; (8005da0 <HAL_DMA_IRQHandler+0xa5c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d009      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x984>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a3a      	ldr	r2, [pc, #232]	; (8005da4 <HAL_DMA_IRQHandler+0xa60>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x984>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a39      	ldr	r2, [pc, #228]	; (8005da8 <HAL_DMA_IRQHandler+0xa64>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d101      	bne.n	8005ccc <HAL_DMA_IRQHandler+0x988>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_DMA_IRQHandler+0x98a>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 823f 	beq.w	8006152 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80cd 	beq.w	8005e8c <HAL_DMA_IRQHandler+0xb48>
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 80c7 	beq.w	8005e8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	2204      	movs	r2, #4
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d049      	beq.n	8005dac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 8210 	beq.w	800614c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d34:	e20a      	b.n	800614c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8206 	beq.w	800614c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d48:	e200      	b.n	800614c <HAL_DMA_IRQHandler+0xe08>
 8005d4a:	bf00      	nop
 8005d4c:	40020010 	.word	0x40020010
 8005d50:	40020028 	.word	0x40020028
 8005d54:	40020040 	.word	0x40020040
 8005d58:	40020058 	.word	0x40020058
 8005d5c:	40020070 	.word	0x40020070
 8005d60:	40020088 	.word	0x40020088
 8005d64:	400200a0 	.word	0x400200a0
 8005d68:	400200b8 	.word	0x400200b8
 8005d6c:	40020410 	.word	0x40020410
 8005d70:	40020428 	.word	0x40020428
 8005d74:	40020440 	.word	0x40020440
 8005d78:	40020458 	.word	0x40020458
 8005d7c:	40020470 	.word	0x40020470
 8005d80:	40020488 	.word	0x40020488
 8005d84:	400204a0 	.word	0x400204a0
 8005d88:	400204b8 	.word	0x400204b8
 8005d8c:	58025408 	.word	0x58025408
 8005d90:	5802541c 	.word	0x5802541c
 8005d94:	58025430 	.word	0x58025430
 8005d98:	58025444 	.word	0x58025444
 8005d9c:	58025458 	.word	0x58025458
 8005da0:	5802546c 	.word	0x5802546c
 8005da4:	58025480 	.word	0x58025480
 8005da8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d160      	bne.n	8005e78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a8c      	ldr	r2, [pc, #560]	; (8005fec <HAL_DMA_IRQHandler+0xca8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d04a      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a8a      	ldr	r2, [pc, #552]	; (8005ff0 <HAL_DMA_IRQHandler+0xcac>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d045      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a89      	ldr	r2, [pc, #548]	; (8005ff4 <HAL_DMA_IRQHandler+0xcb0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d040      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a87      	ldr	r2, [pc, #540]	; (8005ff8 <HAL_DMA_IRQHandler+0xcb4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d03b      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a86      	ldr	r2, [pc, #536]	; (8005ffc <HAL_DMA_IRQHandler+0xcb8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d036      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a84      	ldr	r2, [pc, #528]	; (8006000 <HAL_DMA_IRQHandler+0xcbc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d031      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a83      	ldr	r2, [pc, #524]	; (8006004 <HAL_DMA_IRQHandler+0xcc0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d02c      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a81      	ldr	r2, [pc, #516]	; (8006008 <HAL_DMA_IRQHandler+0xcc4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d027      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a80      	ldr	r2, [pc, #512]	; (800600c <HAL_DMA_IRQHandler+0xcc8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d022      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a7e      	ldr	r2, [pc, #504]	; (8006010 <HAL_DMA_IRQHandler+0xccc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d01d      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a7d      	ldr	r2, [pc, #500]	; (8006014 <HAL_DMA_IRQHandler+0xcd0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d018      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a7b      	ldr	r2, [pc, #492]	; (8006018 <HAL_DMA_IRQHandler+0xcd4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a7a      	ldr	r2, [pc, #488]	; (800601c <HAL_DMA_IRQHandler+0xcd8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00e      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a78      	ldr	r2, [pc, #480]	; (8006020 <HAL_DMA_IRQHandler+0xcdc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d009      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a77      	ldr	r2, [pc, #476]	; (8006024 <HAL_DMA_IRQHandler+0xce0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xb12>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a75      	ldr	r2, [pc, #468]	; (8006028 <HAL_DMA_IRQHandler+0xce4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d108      	bne.n	8005e68 <HAL_DMA_IRQHandler+0xb24>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0208 	bic.w	r2, r2, #8
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	e007      	b.n	8005e78 <HAL_DMA_IRQHandler+0xb34>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0204 	bic.w	r2, r2, #4
 8005e76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8165 	beq.w	800614c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e8a:	e15f      	b.n	800614c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e90:	f003 031f 	and.w	r3, r3, #31
 8005e94:	2202      	movs	r2, #2
 8005e96:	409a      	lsls	r2, r3
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80c5 	beq.w	800602c <HAL_DMA_IRQHandler+0xce8>
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80bf 	beq.w	800602c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d018      	beq.n	8005efa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 813a 	beq.w	8006150 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ee4:	e134      	b.n	8006150 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8130 	beq.w	8006150 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ef8:	e12a      	b.n	8006150 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d168      	bne.n	8005fd6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a38      	ldr	r2, [pc, #224]	; (8005fec <HAL_DMA_IRQHandler+0xca8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d04a      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a37      	ldr	r2, [pc, #220]	; (8005ff0 <HAL_DMA_IRQHandler+0xcac>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d045      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a35      	ldr	r2, [pc, #212]	; (8005ff4 <HAL_DMA_IRQHandler+0xcb0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d040      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a34      	ldr	r2, [pc, #208]	; (8005ff8 <HAL_DMA_IRQHandler+0xcb4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d03b      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a32      	ldr	r2, [pc, #200]	; (8005ffc <HAL_DMA_IRQHandler+0xcb8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d036      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a31      	ldr	r2, [pc, #196]	; (8006000 <HAL_DMA_IRQHandler+0xcbc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d031      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a2f      	ldr	r2, [pc, #188]	; (8006004 <HAL_DMA_IRQHandler+0xcc0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d02c      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a2e      	ldr	r2, [pc, #184]	; (8006008 <HAL_DMA_IRQHandler+0xcc4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d027      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a2c      	ldr	r2, [pc, #176]	; (800600c <HAL_DMA_IRQHandler+0xcc8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d022      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a2b      	ldr	r2, [pc, #172]	; (8006010 <HAL_DMA_IRQHandler+0xccc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d01d      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a29      	ldr	r2, [pc, #164]	; (8006014 <HAL_DMA_IRQHandler+0xcd0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d018      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a28      	ldr	r2, [pc, #160]	; (8006018 <HAL_DMA_IRQHandler+0xcd4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d013      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a26      	ldr	r2, [pc, #152]	; (800601c <HAL_DMA_IRQHandler+0xcd8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00e      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a25      	ldr	r2, [pc, #148]	; (8006020 <HAL_DMA_IRQHandler+0xcdc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d009      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a23      	ldr	r2, [pc, #140]	; (8006024 <HAL_DMA_IRQHandler+0xce0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d004      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0xc60>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a22      	ldr	r2, [pc, #136]	; (8006028 <HAL_DMA_IRQHandler+0xce4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d108      	bne.n	8005fb6 <HAL_DMA_IRQHandler+0xc72>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0214 	bic.w	r2, r2, #20
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e007      	b.n	8005fc6 <HAL_DMA_IRQHandler+0xc82>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 020a 	bic.w	r2, r2, #10
 8005fc4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80b8 	beq.w	8006150 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fe8:	e0b2      	b.n	8006150 <HAL_DMA_IRQHandler+0xe0c>
 8005fea:	bf00      	nop
 8005fec:	40020010 	.word	0x40020010
 8005ff0:	40020028 	.word	0x40020028
 8005ff4:	40020040 	.word	0x40020040
 8005ff8:	40020058 	.word	0x40020058
 8005ffc:	40020070 	.word	0x40020070
 8006000:	40020088 	.word	0x40020088
 8006004:	400200a0 	.word	0x400200a0
 8006008:	400200b8 	.word	0x400200b8
 800600c:	40020410 	.word	0x40020410
 8006010:	40020428 	.word	0x40020428
 8006014:	40020440 	.word	0x40020440
 8006018:	40020458 	.word	0x40020458
 800601c:	40020470 	.word	0x40020470
 8006020:	40020488 	.word	0x40020488
 8006024:	400204a0 	.word	0x400204a0
 8006028:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006030:	f003 031f 	and.w	r3, r3, #31
 8006034:	2208      	movs	r2, #8
 8006036:	409a      	lsls	r2, r3
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	4013      	ands	r3, r2
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8088 	beq.w	8006152 <HAL_DMA_IRQHandler+0xe0e>
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8082 	beq.w	8006152 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a41      	ldr	r2, [pc, #260]	; (8006158 <HAL_DMA_IRQHandler+0xe14>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d04a      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a3f      	ldr	r2, [pc, #252]	; (800615c <HAL_DMA_IRQHandler+0xe18>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d045      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a3e      	ldr	r2, [pc, #248]	; (8006160 <HAL_DMA_IRQHandler+0xe1c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d040      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a3c      	ldr	r2, [pc, #240]	; (8006164 <HAL_DMA_IRQHandler+0xe20>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d03b      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a3b      	ldr	r2, [pc, #236]	; (8006168 <HAL_DMA_IRQHandler+0xe24>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d036      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a39      	ldr	r2, [pc, #228]	; (800616c <HAL_DMA_IRQHandler+0xe28>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d031      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a38      	ldr	r2, [pc, #224]	; (8006170 <HAL_DMA_IRQHandler+0xe2c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d02c      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a36      	ldr	r2, [pc, #216]	; (8006174 <HAL_DMA_IRQHandler+0xe30>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d027      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a35      	ldr	r2, [pc, #212]	; (8006178 <HAL_DMA_IRQHandler+0xe34>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d022      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a33      	ldr	r2, [pc, #204]	; (800617c <HAL_DMA_IRQHandler+0xe38>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01d      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a32      	ldr	r2, [pc, #200]	; (8006180 <HAL_DMA_IRQHandler+0xe3c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d018      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a30      	ldr	r2, [pc, #192]	; (8006184 <HAL_DMA_IRQHandler+0xe40>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a2f      	ldr	r2, [pc, #188]	; (8006188 <HAL_DMA_IRQHandler+0xe44>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00e      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a2d      	ldr	r2, [pc, #180]	; (800618c <HAL_DMA_IRQHandler+0xe48>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d009      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a2c      	ldr	r2, [pc, #176]	; (8006190 <HAL_DMA_IRQHandler+0xe4c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d004      	beq.n	80060ee <HAL_DMA_IRQHandler+0xdaa>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a2a      	ldr	r2, [pc, #168]	; (8006194 <HAL_DMA_IRQHandler+0xe50>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d108      	bne.n	8006100 <HAL_DMA_IRQHandler+0xdbc>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 021c 	bic.w	r2, r2, #28
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e007      	b.n	8006110 <HAL_DMA_IRQHandler+0xdcc>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 020e 	bic.w	r2, r2, #14
 800610e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	2201      	movs	r2, #1
 800611a:	409a      	lsls	r2, r3
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d009      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
 8006146:	e004      	b.n	8006152 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006148:	bf00      	nop
 800614a:	e002      	b.n	8006152 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800614c:	bf00      	nop
 800614e:	e000      	b.n	8006152 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006150:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006152:	3728      	adds	r7, #40	; 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40020010 	.word	0x40020010
 800615c:	40020028 	.word	0x40020028
 8006160:	40020040 	.word	0x40020040
 8006164:	40020058 	.word	0x40020058
 8006168:	40020070 	.word	0x40020070
 800616c:	40020088 	.word	0x40020088
 8006170:	400200a0 	.word	0x400200a0
 8006174:	400200b8 	.word	0x400200b8
 8006178:	40020410 	.word	0x40020410
 800617c:	40020428 	.word	0x40020428
 8006180:	40020440 	.word	0x40020440
 8006184:	40020458 	.word	0x40020458
 8006188:	40020470 	.word	0x40020470
 800618c:	40020488 	.word	0x40020488
 8006190:	400204a0 	.word	0x400204a0
 8006194:	400204b8 	.word	0x400204b8

08006198 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a84      	ldr	r2, [pc, #528]	; (80063c8 <DMA_SetConfig+0x230>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d072      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a82      	ldr	r2, [pc, #520]	; (80063cc <DMA_SetConfig+0x234>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d06d      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a81      	ldr	r2, [pc, #516]	; (80063d0 <DMA_SetConfig+0x238>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d068      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a7f      	ldr	r2, [pc, #508]	; (80063d4 <DMA_SetConfig+0x23c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d063      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a7e      	ldr	r2, [pc, #504]	; (80063d8 <DMA_SetConfig+0x240>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d05e      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a7c      	ldr	r2, [pc, #496]	; (80063dc <DMA_SetConfig+0x244>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d059      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a7b      	ldr	r2, [pc, #492]	; (80063e0 <DMA_SetConfig+0x248>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d054      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a79      	ldr	r2, [pc, #484]	; (80063e4 <DMA_SetConfig+0x24c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d04f      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a78      	ldr	r2, [pc, #480]	; (80063e8 <DMA_SetConfig+0x250>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d04a      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a76      	ldr	r2, [pc, #472]	; (80063ec <DMA_SetConfig+0x254>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d045      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a75      	ldr	r2, [pc, #468]	; (80063f0 <DMA_SetConfig+0x258>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d040      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a73      	ldr	r2, [pc, #460]	; (80063f4 <DMA_SetConfig+0x25c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d03b      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a72      	ldr	r2, [pc, #456]	; (80063f8 <DMA_SetConfig+0x260>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d036      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a70      	ldr	r2, [pc, #448]	; (80063fc <DMA_SetConfig+0x264>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d031      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a6f      	ldr	r2, [pc, #444]	; (8006400 <DMA_SetConfig+0x268>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d02c      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a6d      	ldr	r2, [pc, #436]	; (8006404 <DMA_SetConfig+0x26c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d027      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a6c      	ldr	r2, [pc, #432]	; (8006408 <DMA_SetConfig+0x270>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d022      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a6a      	ldr	r2, [pc, #424]	; (800640c <DMA_SetConfig+0x274>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01d      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a69      	ldr	r2, [pc, #420]	; (8006410 <DMA_SetConfig+0x278>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a67      	ldr	r2, [pc, #412]	; (8006414 <DMA_SetConfig+0x27c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a66      	ldr	r2, [pc, #408]	; (8006418 <DMA_SetConfig+0x280>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a64      	ldr	r2, [pc, #400]	; (800641c <DMA_SetConfig+0x284>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a63      	ldr	r2, [pc, #396]	; (8006420 <DMA_SetConfig+0x288>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <DMA_SetConfig+0x10a>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a61      	ldr	r2, [pc, #388]	; (8006424 <DMA_SetConfig+0x28c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d101      	bne.n	80062a6 <DMA_SetConfig+0x10e>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <DMA_SetConfig+0x110>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00d      	beq.n	80062c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d004      	beq.n	80062c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3e      	ldr	r2, [pc, #248]	; (80063c8 <DMA_SetConfig+0x230>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d04a      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a3d      	ldr	r2, [pc, #244]	; (80063cc <DMA_SetConfig+0x234>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d045      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a3b      	ldr	r2, [pc, #236]	; (80063d0 <DMA_SetConfig+0x238>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d040      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a3a      	ldr	r2, [pc, #232]	; (80063d4 <DMA_SetConfig+0x23c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d03b      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a38      	ldr	r2, [pc, #224]	; (80063d8 <DMA_SetConfig+0x240>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d036      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a37      	ldr	r2, [pc, #220]	; (80063dc <DMA_SetConfig+0x244>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d031      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a35      	ldr	r2, [pc, #212]	; (80063e0 <DMA_SetConfig+0x248>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d02c      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a34      	ldr	r2, [pc, #208]	; (80063e4 <DMA_SetConfig+0x24c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d027      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a32      	ldr	r2, [pc, #200]	; (80063e8 <DMA_SetConfig+0x250>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d022      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a31      	ldr	r2, [pc, #196]	; (80063ec <DMA_SetConfig+0x254>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d01d      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a2f      	ldr	r2, [pc, #188]	; (80063f0 <DMA_SetConfig+0x258>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d018      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a2e      	ldr	r2, [pc, #184]	; (80063f4 <DMA_SetConfig+0x25c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d013      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a2c      	ldr	r2, [pc, #176]	; (80063f8 <DMA_SetConfig+0x260>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d00e      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a2b      	ldr	r2, [pc, #172]	; (80063fc <DMA_SetConfig+0x264>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d009      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a29      	ldr	r2, [pc, #164]	; (8006400 <DMA_SetConfig+0x268>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d004      	beq.n	8006368 <DMA_SetConfig+0x1d0>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a28      	ldr	r2, [pc, #160]	; (8006404 <DMA_SetConfig+0x26c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d101      	bne.n	800636c <DMA_SetConfig+0x1d4>
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <DMA_SetConfig+0x1d6>
 800636c:	2300      	movs	r3, #0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d05a      	beq.n	8006428 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	223f      	movs	r2, #63	; 0x3f
 800637c:	409a      	lsls	r2, r3
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006390:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b40      	cmp	r3, #64	; 0x40
 80063a0:	d108      	bne.n	80063b4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063b2:	e087      	b.n	80064c4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	60da      	str	r2, [r3, #12]
}
 80063c4:	e07e      	b.n	80064c4 <DMA_SetConfig+0x32c>
 80063c6:	bf00      	nop
 80063c8:	40020010 	.word	0x40020010
 80063cc:	40020028 	.word	0x40020028
 80063d0:	40020040 	.word	0x40020040
 80063d4:	40020058 	.word	0x40020058
 80063d8:	40020070 	.word	0x40020070
 80063dc:	40020088 	.word	0x40020088
 80063e0:	400200a0 	.word	0x400200a0
 80063e4:	400200b8 	.word	0x400200b8
 80063e8:	40020410 	.word	0x40020410
 80063ec:	40020428 	.word	0x40020428
 80063f0:	40020440 	.word	0x40020440
 80063f4:	40020458 	.word	0x40020458
 80063f8:	40020470 	.word	0x40020470
 80063fc:	40020488 	.word	0x40020488
 8006400:	400204a0 	.word	0x400204a0
 8006404:	400204b8 	.word	0x400204b8
 8006408:	58025408 	.word	0x58025408
 800640c:	5802541c 	.word	0x5802541c
 8006410:	58025430 	.word	0x58025430
 8006414:	58025444 	.word	0x58025444
 8006418:	58025458 	.word	0x58025458
 800641c:	5802546c 	.word	0x5802546c
 8006420:	58025480 	.word	0x58025480
 8006424:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a28      	ldr	r2, [pc, #160]	; (80064d0 <DMA_SetConfig+0x338>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d022      	beq.n	8006478 <DMA_SetConfig+0x2e0>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a27      	ldr	r2, [pc, #156]	; (80064d4 <DMA_SetConfig+0x33c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d01d      	beq.n	8006478 <DMA_SetConfig+0x2e0>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a25      	ldr	r2, [pc, #148]	; (80064d8 <DMA_SetConfig+0x340>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d018      	beq.n	8006478 <DMA_SetConfig+0x2e0>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a24      	ldr	r2, [pc, #144]	; (80064dc <DMA_SetConfig+0x344>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d013      	beq.n	8006478 <DMA_SetConfig+0x2e0>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a22      	ldr	r2, [pc, #136]	; (80064e0 <DMA_SetConfig+0x348>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00e      	beq.n	8006478 <DMA_SetConfig+0x2e0>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a21      	ldr	r2, [pc, #132]	; (80064e4 <DMA_SetConfig+0x34c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d009      	beq.n	8006478 <DMA_SetConfig+0x2e0>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1f      	ldr	r2, [pc, #124]	; (80064e8 <DMA_SetConfig+0x350>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d004      	beq.n	8006478 <DMA_SetConfig+0x2e0>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <DMA_SetConfig+0x354>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d101      	bne.n	800647c <DMA_SetConfig+0x2e4>
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <DMA_SetConfig+0x2e6>
 800647c:	2300      	movs	r3, #0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d020      	beq.n	80064c4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006486:	f003 031f 	and.w	r3, r3, #31
 800648a:	2201      	movs	r2, #1
 800648c:	409a      	lsls	r2, r3
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d108      	bne.n	80064b4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	60da      	str	r2, [r3, #12]
}
 80064b2:	e007      	b.n	80064c4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
}
 80064c4:	bf00      	nop
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	58025408 	.word	0x58025408
 80064d4:	5802541c 	.word	0x5802541c
 80064d8:	58025430 	.word	0x58025430
 80064dc:	58025444 	.word	0x58025444
 80064e0:	58025458 	.word	0x58025458
 80064e4:	5802546c 	.word	0x5802546c
 80064e8:	58025480 	.word	0x58025480
 80064ec:	58025494 	.word	0x58025494

080064f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a42      	ldr	r2, [pc, #264]	; (8006608 <DMA_CalcBaseAndBitshift+0x118>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d04a      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a41      	ldr	r2, [pc, #260]	; (800660c <DMA_CalcBaseAndBitshift+0x11c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d045      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a3f      	ldr	r2, [pc, #252]	; (8006610 <DMA_CalcBaseAndBitshift+0x120>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d040      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a3e      	ldr	r2, [pc, #248]	; (8006614 <DMA_CalcBaseAndBitshift+0x124>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d03b      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a3c      	ldr	r2, [pc, #240]	; (8006618 <DMA_CalcBaseAndBitshift+0x128>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d036      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a3b      	ldr	r2, [pc, #236]	; (800661c <DMA_CalcBaseAndBitshift+0x12c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d031      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a39      	ldr	r2, [pc, #228]	; (8006620 <DMA_CalcBaseAndBitshift+0x130>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d02c      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a38      	ldr	r2, [pc, #224]	; (8006624 <DMA_CalcBaseAndBitshift+0x134>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d027      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a36      	ldr	r2, [pc, #216]	; (8006628 <DMA_CalcBaseAndBitshift+0x138>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d022      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a35      	ldr	r2, [pc, #212]	; (800662c <DMA_CalcBaseAndBitshift+0x13c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d01d      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a33      	ldr	r2, [pc, #204]	; (8006630 <DMA_CalcBaseAndBitshift+0x140>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d018      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a32      	ldr	r2, [pc, #200]	; (8006634 <DMA_CalcBaseAndBitshift+0x144>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d013      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a30      	ldr	r2, [pc, #192]	; (8006638 <DMA_CalcBaseAndBitshift+0x148>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00e      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a2f      	ldr	r2, [pc, #188]	; (800663c <DMA_CalcBaseAndBitshift+0x14c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d009      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2d      	ldr	r2, [pc, #180]	; (8006640 <DMA_CalcBaseAndBitshift+0x150>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d004      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2c      	ldr	r2, [pc, #176]	; (8006644 <DMA_CalcBaseAndBitshift+0x154>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d101      	bne.n	800659c <DMA_CalcBaseAndBitshift+0xac>
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <DMA_CalcBaseAndBitshift+0xae>
 800659c:	2300      	movs	r3, #0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d024      	beq.n	80065ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	3b10      	subs	r3, #16
 80065aa:	4a27      	ldr	r2, [pc, #156]	; (8006648 <DMA_CalcBaseAndBitshift+0x158>)
 80065ac:	fba2 2303 	umull	r2, r3, r2, r3
 80065b0:	091b      	lsrs	r3, r3, #4
 80065b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	4a24      	ldr	r2, [pc, #144]	; (800664c <DMA_CalcBaseAndBitshift+0x15c>)
 80065bc:	5cd3      	ldrb	r3, [r2, r3]
 80065be:	461a      	mov	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d908      	bls.n	80065dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	4b1f      	ldr	r3, [pc, #124]	; (8006650 <DMA_CalcBaseAndBitshift+0x160>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	1d1a      	adds	r2, r3, #4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	659a      	str	r2, [r3, #88]	; 0x58
 80065da:	e00d      	b.n	80065f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <DMA_CalcBaseAndBitshift+0x160>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6593      	str	r3, [r2, #88]	; 0x58
 80065ea:	e005      	b.n	80065f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40020010 	.word	0x40020010
 800660c:	40020028 	.word	0x40020028
 8006610:	40020040 	.word	0x40020040
 8006614:	40020058 	.word	0x40020058
 8006618:	40020070 	.word	0x40020070
 800661c:	40020088 	.word	0x40020088
 8006620:	400200a0 	.word	0x400200a0
 8006624:	400200b8 	.word	0x400200b8
 8006628:	40020410 	.word	0x40020410
 800662c:	40020428 	.word	0x40020428
 8006630:	40020440 	.word	0x40020440
 8006634:	40020458 	.word	0x40020458
 8006638:	40020470 	.word	0x40020470
 800663c:	40020488 	.word	0x40020488
 8006640:	400204a0 	.word	0x400204a0
 8006644:	400204b8 	.word	0x400204b8
 8006648:	aaaaaaab 	.word	0xaaaaaaab
 800664c:	0801aea0 	.word	0x0801aea0
 8006650:	fffffc00 	.word	0xfffffc00

08006654 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d120      	bne.n	80066aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	2b03      	cmp	r3, #3
 800666e:	d858      	bhi.n	8006722 <DMA_CheckFifoParam+0xce>
 8006670:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <DMA_CheckFifoParam+0x24>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	08006689 	.word	0x08006689
 800667c:	0800669b 	.word	0x0800669b
 8006680:	08006689 	.word	0x08006689
 8006684:	08006723 	.word	0x08006723
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d048      	beq.n	8006726 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006698:	e045      	b.n	8006726 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066a2:	d142      	bne.n	800672a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066a8:	e03f      	b.n	800672a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066b2:	d123      	bne.n	80066fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d838      	bhi.n	800672e <DMA_CheckFifoParam+0xda>
 80066bc:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <DMA_CheckFifoParam+0x70>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066d5 	.word	0x080066d5
 80066c8:	080066db 	.word	0x080066db
 80066cc:	080066d5 	.word	0x080066d5
 80066d0:	080066ed 	.word	0x080066ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	73fb      	strb	r3, [r7, #15]
        break;
 80066d8:	e030      	b.n	800673c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d025      	beq.n	8006732 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066ea:	e022      	b.n	8006732 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066f4:	d11f      	bne.n	8006736 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066fa:	e01c      	b.n	8006736 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006700:	2b02      	cmp	r3, #2
 8006702:	d902      	bls.n	800670a <DMA_CheckFifoParam+0xb6>
 8006704:	2b03      	cmp	r3, #3
 8006706:	d003      	beq.n	8006710 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006708:	e018      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	73fb      	strb	r3, [r7, #15]
        break;
 800670e:	e015      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00e      	beq.n	800673a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	73fb      	strb	r3, [r7, #15]
    break;
 8006720:	e00b      	b.n	800673a <DMA_CheckFifoParam+0xe6>
        break;
 8006722:	bf00      	nop
 8006724:	e00a      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        break;
 8006726:	bf00      	nop
 8006728:	e008      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        break;
 800672a:	bf00      	nop
 800672c:	e006      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        break;
 800672e:	bf00      	nop
 8006730:	e004      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        break;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <DMA_CheckFifoParam+0xe8>
    break;
 800673a:	bf00      	nop
    }
  }

  return status;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop

0800674c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a38      	ldr	r2, [pc, #224]	; (8006840 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d022      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a36      	ldr	r2, [pc, #216]	; (8006844 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01d      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a35      	ldr	r2, [pc, #212]	; (8006848 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d018      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a33      	ldr	r2, [pc, #204]	; (800684c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a32      	ldr	r2, [pc, #200]	; (8006850 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a30      	ldr	r2, [pc, #192]	; (8006854 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a2f      	ldr	r2, [pc, #188]	; (8006858 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a2d      	ldr	r2, [pc, #180]	; (800685c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01a      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	3b08      	subs	r3, #8
 80067bc:	4a28      	ldr	r2, [pc, #160]	; (8006860 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	091b      	lsrs	r3, r3, #4
 80067c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4b26      	ldr	r3, [pc, #152]	; (8006864 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	461a      	mov	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a24      	ldr	r2, [pc, #144]	; (8006868 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80067d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f003 031f 	and.w	r3, r3, #31
 80067e0:	2201      	movs	r2, #1
 80067e2:	409a      	lsls	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80067e8:	e024      	b.n	8006834 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	3b10      	subs	r3, #16
 80067f2:	4a1e      	ldr	r2, [pc, #120]	; (800686c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80067f4:	fba2 2303 	umull	r2, r3, r2, r3
 80067f8:	091b      	lsrs	r3, r3, #4
 80067fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d806      	bhi.n	8006812 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4a1b      	ldr	r2, [pc, #108]	; (8006874 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d902      	bls.n	8006812 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3308      	adds	r3, #8
 8006810:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4b18      	ldr	r3, [pc, #96]	; (8006878 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	461a      	mov	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a16      	ldr	r2, [pc, #88]	; (800687c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006824:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	2201      	movs	r2, #1
 800682e:	409a      	lsls	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006834:	bf00      	nop
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	58025408 	.word	0x58025408
 8006844:	5802541c 	.word	0x5802541c
 8006848:	58025430 	.word	0x58025430
 800684c:	58025444 	.word	0x58025444
 8006850:	58025458 	.word	0x58025458
 8006854:	5802546c 	.word	0x5802546c
 8006858:	58025480 	.word	0x58025480
 800685c:	58025494 	.word	0x58025494
 8006860:	cccccccd 	.word	0xcccccccd
 8006864:	16009600 	.word	0x16009600
 8006868:	58025880 	.word	0x58025880
 800686c:	aaaaaaab 	.word	0xaaaaaaab
 8006870:	400204b8 	.word	0x400204b8
 8006874:	4002040f 	.word	0x4002040f
 8006878:	10008200 	.word	0x10008200
 800687c:	40020880 	.word	0x40020880

08006880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d04a      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b08      	cmp	r3, #8
 800689a:	d847      	bhi.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a25      	ldr	r2, [pc, #148]	; (8006938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d022      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a24      	ldr	r2, [pc, #144]	; (800693c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d01d      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a22      	ldr	r2, [pc, #136]	; (8006940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d018      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a21      	ldr	r2, [pc, #132]	; (8006944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d013      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1f      	ldr	r2, [pc, #124]	; (8006948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d00e      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1e      	ldr	r2, [pc, #120]	; (800694c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d009      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1c      	ldr	r2, [pc, #112]	; (8006950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d004      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1b      	ldr	r2, [pc, #108]	; (8006954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d101      	bne.n	80068f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80068f0:	2300      	movs	r3, #0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4b17      	ldr	r3, [pc, #92]	; (8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	461a      	mov	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a15      	ldr	r2, [pc, #84]	; (800695c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006908:	671a      	str	r2, [r3, #112]	; 0x70
 800690a:	e009      	b.n	8006920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	4b14      	ldr	r3, [pc, #80]	; (8006960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	461a      	mov	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a11      	ldr	r2, [pc, #68]	; (8006964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800691e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3b01      	subs	r3, #1
 8006924:	2201      	movs	r2, #1
 8006926:	409a      	lsls	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800692c:	bf00      	nop
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	58025408 	.word	0x58025408
 800693c:	5802541c 	.word	0x5802541c
 8006940:	58025430 	.word	0x58025430
 8006944:	58025444 	.word	0x58025444
 8006948:	58025458 	.word	0x58025458
 800694c:	5802546c 	.word	0x5802546c
 8006950:	58025480 	.word	0x58025480
 8006954:	58025494 	.word	0x58025494
 8006958:	1600963f 	.word	0x1600963f
 800695c:	58025940 	.word	0x58025940
 8006960:	1000823f 	.word	0x1000823f
 8006964:	40020940 	.word	0x40020940

08006968 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b098      	sub	sp, #96	; 0x60
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006970:	4a84      	ldr	r2, [pc, #528]	; (8006b84 <HAL_FDCAN_Init+0x21c>)
 8006972:	f107 030c 	add.w	r3, r7, #12
 8006976:	4611      	mov	r1, r2
 8006978:	224c      	movs	r2, #76	; 0x4c
 800697a:	4618      	mov	r0, r3
 800697c:	f012 fd28 	bl	80193d0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e1ca      	b.n	8006d20 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a7e      	ldr	r2, [pc, #504]	; (8006b88 <HAL_FDCAN_Init+0x220>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d106      	bne.n	80069a2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800699c:	461a      	mov	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fd f94e 	bl	8003c58 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0210 	bic.w	r2, r2, #16
 80069ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069cc:	f7fd fdaa 	bl	8004524 <HAL_GetTick>
 80069d0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80069d2:	e014      	b.n	80069fe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80069d4:	f7fd fda6 	bl	8004524 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b0a      	cmp	r3, #10
 80069e0:	d90d      	bls.n	80069fe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069e8:	f043 0201 	orr.w	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2203      	movs	r2, #3
 80069f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e190      	b.n	8006d20 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d0e3      	beq.n	80069d4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0201 	orr.w	r2, r2, #1
 8006a1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a1c:	f7fd fd82 	bl	8004524 <HAL_GetTick>
 8006a20:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006a22:	e014      	b.n	8006a4e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a24:	f7fd fd7e 	bl	8004524 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b0a      	cmp	r3, #10
 8006a30:	d90d      	bls.n	8006a4e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a38:	f043 0201 	orr.w	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2203      	movs	r2, #3
 8006a46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e168      	b.n	8006d20 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0e3      	beq.n	8006a24 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0202 	orr.w	r2, r2, #2
 8006a6a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7c1b      	ldrb	r3, [r3, #16]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d108      	bne.n	8006a86 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a82:	619a      	str	r2, [r3, #24]
 8006a84:	e007      	b.n	8006a96 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	699a      	ldr	r2, [r3, #24]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a94:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	7c5b      	ldrb	r3, [r3, #17]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d108      	bne.n	8006ab0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aac:	619a      	str	r2, [r3, #24]
 8006aae:	e007      	b.n	8006ac0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699a      	ldr	r2, [r3, #24]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006abe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	7c9b      	ldrb	r3, [r3, #18]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d108      	bne.n	8006ada <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ad6:	619a      	str	r2, [r3, #24]
 8006ad8:	e007      	b.n	8006aea <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699a      	ldr	r2, [r3, #24]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ae8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006b0e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0210 	bic.w	r2, r2, #16
 8006b1e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d108      	bne.n	8006b3a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f042 0204 	orr.w	r2, r2, #4
 8006b36:	619a      	str	r2, [r3, #24]
 8006b38:	e030      	b.n	8006b9c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d02c      	beq.n	8006b9c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d020      	beq.n	8006b8c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699a      	ldr	r2, [r3, #24]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b58:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691a      	ldr	r2, [r3, #16]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0210 	orr.w	r2, r2, #16
 8006b68:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d114      	bne.n	8006b9c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699a      	ldr	r2, [r3, #24]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0220 	orr.w	r2, r2, #32
 8006b80:	619a      	str	r2, [r3, #24]
 8006b82:	e00b      	b.n	8006b9c <HAL_FDCAN_Init+0x234>
 8006b84:	0801adac 	.word	0x0801adac
 8006b88:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699a      	ldr	r2, [r3, #24]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0220 	orr.w	r2, r2, #32
 8006b9a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bac:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006bb4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006bc4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bc6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd0:	d115      	bne.n	8006bfe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006be0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	3b01      	subs	r3, #1
 8006be8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006bea:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006bfa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006bfc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c24:	4413      	add	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d012      	beq.n	8006c50 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006c32:	f023 0107 	bic.w	r1, r3, #7
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006c40:	4413      	add	r3, r2
 8006c42:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d012      	beq.n	8006c7e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c60:	f023 0107 	bic.w	r1, r3, #7
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006c6e:	4413      	add	r3, r2
 8006c70:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d013      	beq.n	8006cae <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c8e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006ca2:	011a      	lsls	r2, r3, #4
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d013      	beq.n	8006cde <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006cbe:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006ccc:	4413      	add	r3, r2
 8006cce:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006cd2:	021a      	lsls	r2, r3, #8
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a11      	ldr	r2, [pc, #68]	; (8006d28 <HAL_FDCAN_Init+0x3c0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d107      	bne.n	8006cf8 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f022 0203 	bic.w	r2, r2, #3
 8006cf6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fddf 	bl	80078d4 <FDCAN_CalcultateRamBlockAddresses>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006d1c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3760      	adds	r7, #96	; 0x60
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	4000a000 	.word	0x4000a000

08006d2c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006d3c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d002      	beq.n	8006d4a <HAL_FDCAN_ConfigFilter+0x1e>
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d157      	bne.n	8006dfa <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d12b      	bne.n	8006daa <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	2b07      	cmp	r3, #7
 8006d58:	d10d      	bne.n	8006d76 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8006d66:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006d6c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8006d6e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	e00e      	b.n	8006d94 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d82:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006d8a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d90:	4313      	orrs	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	e025      	b.n	8006df6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	075a      	lsls	r2, r3, #29
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	2b07      	cmp	r3, #7
 8006dbe:	d103      	bne.n	8006dc8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	e006      	b.n	8006dd6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	079a      	lsls	r2, r3, #30
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4413      	add	r3, r2
 8006de2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	3304      	adds	r3, #4
 8006dee:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	e008      	b.n	8006e0c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e00:	f043 0202 	orr.w	r2, r3, #2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
  }
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d110      	bne.n	8006e54 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006e3a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006e40:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	e008      	b.n	8006e66 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e5a:	f043 0204 	orr.w	r2, r3, #4
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d109      	bne.n	8006e9a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006e94:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e008      	b.n	8006eac <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ea0:	f043 0204 	orr.w	r2, r3, #4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
  }
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d111      	bne.n	8006ef0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0201 	bic.w	r2, r2, #1
 8006ee2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e008      	b.n	8006f02 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ef6:	f043 0204 	orr.w	r2, r3, #4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
  }
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b08b      	sub	sp, #44	; 0x2c
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f28:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006f2a:	7efb      	ldrb	r3, [r7, #27]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	f040 813b 	bne.w	80071a8 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b40      	cmp	r3, #64	; 0x40
 8006f36:	d145      	bne.n	8006fc4 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f40:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d109      	bne.n	8006f5c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e12e      	b.n	80071ba <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e11c      	b.n	80071ba <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f88:	0e1b      	lsrs	r3, r3, #24
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d103      	bne.n	8006f9a <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fa2:	0a1b      	lsrs	r3, r3, #8
 8006fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	4413      	add	r3, r2
 8006fac:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	69f9      	ldr	r1, [r7, #28]
 8006fb8:	fb01 f303 	mul.w	r3, r1, r3
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc2:	e061      	b.n	8007088 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b41      	cmp	r3, #65	; 0x41
 8006fc8:	d145      	bne.n	8007056 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fe0:	f043 0220 	orr.w	r2, r3, #32
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e0e5      	b.n	80071ba <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d109      	bne.n	8007012 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007004:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e0d3      	b.n	80071ba <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800701a:	0e1b      	lsrs	r3, r3, #24
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b01      	cmp	r3, #1
 8007022:	d103      	bne.n	800702c <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007034:	0a1b      	lsrs	r3, r3, #8
 8007036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	4413      	add	r3, r2
 800703e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007048:	69f9      	ldr	r1, [r7, #28]
 800704a:	fb01 f303 	mul.w	r3, r1, r3
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
 8007054:	e018      	b.n	8007088 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	429a      	cmp	r2, r3
 800705e:	d309      	bcc.n	8007074 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007066:	f043 0220 	orr.w	r2, r3, #32
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e0a2      	b.n	80071ba <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d107      	bne.n	80070ac <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	0c9b      	lsrs	r3, r3, #18
 80070a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	e005      	b.n	80070b8 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	3304      	adds	r3, #4
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	b29a      	uxth	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	0e1b      	lsrs	r3, r3, #24
 800710a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	0fda      	lsrs	r2, r3, #31
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	3304      	adds	r3, #4
 8007120:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8007126:	2300      	movs	r3, #0
 8007128:	623b      	str	r3, [r7, #32]
 800712a:	e00a      	b.n	8007142 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	441a      	add	r2, r3
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	440b      	add	r3, r1
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	3301      	adds	r3, #1
 8007140:	623b      	str	r3, [r7, #32]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	0c1b      	lsrs	r3, r3, #16
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <HAL_FDCAN_GetRxMessage+0x2b8>)
 800714a:	5cd3      	ldrb	r3, [r2, r3]
 800714c:	461a      	mov	r2, r3
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	4293      	cmp	r3, r2
 8007152:	d3eb      	bcc.n	800712c <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b40      	cmp	r3, #64	; 0x40
 8007158:	d105      	bne.n	8007166 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007164:	e01e      	b.n	80071a4 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b41      	cmp	r3, #65	; 0x41
 800716a:	d105      	bne.n	8007178 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	69fa      	ldr	r2, [r7, #28]
 8007172:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8007176:	e015      	b.n	80071a4 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b1f      	cmp	r3, #31
 800717c:	d808      	bhi.n	8007190 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2101      	movs	r1, #1
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	fa01 f202 	lsl.w	r2, r1, r2
 800718a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800718e:	e009      	b.n	80071a4 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 021f 	and.w	r2, r3, #31
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2101      	movs	r1, #1
 800719c:	fa01 f202 	lsl.w	r2, r1, r2
 80071a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	e008      	b.n	80071ba <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071ae:	f043 0208 	orr.w	r2, r3, #8
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
  }
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	372c      	adds	r7, #44	; 0x2c
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	0801aea8 	.word	0x0801aea8

080071cc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80071de:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d002      	beq.n	80071ec <HAL_FDCAN_ActivateNotification+0x20>
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d155      	bne.n	8007298 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4013      	ands	r3, r2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d108      	bne.n	800720c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0201 	orr.w	r2, r2, #1
 8007208:	65da      	str	r2, [r3, #92]	; 0x5c
 800720a:	e014      	b.n	8007236 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4013      	ands	r3, r2
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	429a      	cmp	r2, r3
 800721a:	d108      	bne.n	800722e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0202 	orr.w	r2, r2, #2
 800722a:	65da      	str	r2, [r3, #92]	; 0x5c
 800722c:	e003      	b.n	8007236 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2203      	movs	r2, #3
 8007234:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800723c:	2b00      	cmp	r3, #0
 800723e:	d009      	beq.n	8007254 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	430a      	orrs	r2, r1
 8007250:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	430a      	orrs	r2, r1
 800726e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <HAL_FDCAN_ActivateNotification+0xec>)
 800727c:	4013      	ands	r3, r2
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	6812      	ldr	r2, [r2, #0]
 8007282:	430b      	orrs	r3, r1
 8007284:	6553      	str	r3, [r2, #84]	; 0x54
 8007286:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <HAL_FDCAN_ActivateNotification+0xf0>)
 8007288:	695a      	ldr	r2, [r3, #20]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	0f9b      	lsrs	r3, r3, #30
 800728e:	490b      	ldr	r1, [pc, #44]	; (80072bc <HAL_FDCAN_ActivateNotification+0xf0>)
 8007290:	4313      	orrs	r3, r2
 8007292:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	e008      	b.n	80072aa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800729e:	f043 0202 	orr.w	r2, r3, #2
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
  }
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	3fcfffff 	.word	0x3fcfffff
 80072bc:	4000a800 	.word	0x4000a800

080072c0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b092      	sub	sp, #72	; 0x48
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80072c8:	4b90      	ldr	r3, [pc, #576]	; (800750c <HAL_FDCAN_IRQHandler+0x24c>)
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	079b      	lsls	r3, r3, #30
 80072ce:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80072d0:	4b8e      	ldr	r3, [pc, #568]	; (800750c <HAL_FDCAN_IRQHandler+0x24c>)
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	079b      	lsls	r3, r3, #30
 80072d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d8:	4013      	ands	r3, r2
 80072da:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80072e6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072f0:	4013      	ands	r3, r2
 80072f2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007308:	4013      	ands	r3, r2
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007316:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007320:	4013      	ands	r3, r2
 8007322:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800732e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007338:	4013      	ands	r3, r2
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007342:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8007346:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007350:	4013      	ands	r3, r2
 8007352:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	d011      	beq.n	8007386 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007378:	651a      	str	r2, [r3, #80]	; 0x50
 800737a:	4b64      	ldr	r3, [pc, #400]	; (800750c <HAL_FDCAN_IRQHandler+0x24c>)
 800737c:	2200      	movs	r2, #0
 800737e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa5a 	bl	800783a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01e      	beq.n	80073d2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d017      	beq.n	80073d2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80073aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80073b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b6:	4013      	ands	r3, r2
 80073b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073c2:	651a      	str	r2, [r3, #80]	; 0x50
 80073c4:	4b51      	ldr	r3, [pc, #324]	; (800750c <HAL_FDCAN_IRQHandler+0x24c>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80073ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fa0b 	bl	80077e8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80073d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00d      	beq.n	80073f4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073de:	4b4c      	ldr	r3, [pc, #304]	; (8007510 <HAL_FDCAN_IRQHandler+0x250>)
 80073e0:	400b      	ands	r3, r1
 80073e2:	6513      	str	r3, [r2, #80]	; 0x50
 80073e4:	4a49      	ldr	r2, [pc, #292]	; (800750c <HAL_FDCAN_IRQHandler+0x24c>)
 80073e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073e8:	0f9b      	lsrs	r3, r3, #30
 80073ea:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80073ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f9c4 	bl	800777c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80073f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00d      	beq.n	8007416 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007400:	4b43      	ldr	r3, [pc, #268]	; (8007510 <HAL_FDCAN_IRQHandler+0x250>)
 8007402:	400b      	ands	r3, r1
 8007404:	6513      	str	r3, [r2, #80]	; 0x50
 8007406:	4a41      	ldr	r2, [pc, #260]	; (800750c <HAL_FDCAN_IRQHandler+0x24c>)
 8007408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740a:	0f9b      	lsrs	r3, r3, #30
 800740c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800740e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f9be 	bl	8007792 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00d      	beq.n	8007438 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007422:	4b3b      	ldr	r3, [pc, #236]	; (8007510 <HAL_FDCAN_IRQHandler+0x250>)
 8007424:	400b      	ands	r3, r1
 8007426:	6513      	str	r3, [r2, #80]	; 0x50
 8007428:	4a38      	ldr	r2, [pc, #224]	; (800750c <HAL_FDCAN_IRQHandler+0x24c>)
 800742a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742c:	0f9b      	lsrs	r3, r3, #30
 800742e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007430:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7f9 f96a 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00d      	beq.n	800745a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007444:	4b32      	ldr	r3, [pc, #200]	; (8007510 <HAL_FDCAN_IRQHandler+0x250>)
 8007446:	400b      	ands	r3, r1
 8007448:	6513      	str	r3, [r2, #80]	; 0x50
 800744a:	4a30      	ldr	r2, [pc, #192]	; (800750c <HAL_FDCAN_IRQHandler+0x24c>)
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	0f9b      	lsrs	r3, r3, #30
 8007450:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007452:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f9a7 	bl	80077a8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007464:	2b00      	cmp	r3, #0
 8007466:	d011      	beq.n	800748c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800747e:	651a      	str	r2, [r3, #80]	; 0x50
 8007480:	4b22      	ldr	r3, [pc, #136]	; (800750c <HAL_FDCAN_IRQHandler+0x24c>)
 8007482:	2200      	movs	r2, #0
 8007484:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f999 	bl	80077be <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01e      	beq.n	80074d8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d017      	beq.n	80074d8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074b0:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074bc:	4013      	ands	r3, r2
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074c8:	651a      	str	r2, [r3, #80]	; 0x50
 80074ca:	4b10      	ldr	r3, [pc, #64]	; (800750c <HAL_FDCAN_IRQHandler+0x24c>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80074d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f97d 	bl	80077d2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d016      	beq.n	8007514 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00f      	beq.n	8007514 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80074fc:	651a      	str	r2, [r3, #80]	; 0x50
 80074fe:	4b03      	ldr	r3, [pc, #12]	; (800750c <HAL_FDCAN_IRQHandler+0x24c>)
 8007500:	2200      	movs	r2, #0
 8007502:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f97a 	bl	80077fe <HAL_FDCAN_RxBufferNewMessageCallback>
 800750a:	e003      	b.n	8007514 <HAL_FDCAN_IRQHandler+0x254>
 800750c:	4000a800 	.word	0x4000a800
 8007510:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d011      	beq.n	8007546 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007538:	651a      	str	r2, [r3, #80]	; 0x50
 800753a:	4b8d      	ldr	r3, [pc, #564]	; (8007770 <HAL_FDCAN_IRQHandler+0x4b0>)
 800753c:	2200      	movs	r2, #0
 800753e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f966 	bl	8007812 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d011      	beq.n	8007578 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800756a:	651a      	str	r2, [r3, #80]	; 0x50
 800756c:	4b80      	ldr	r3, [pc, #512]	; (8007770 <HAL_FDCAN_IRQHandler+0x4b0>)
 800756e:	2200      	movs	r2, #0
 8007570:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f957 	bl	8007826 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d016      	beq.n	80075b4 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00f      	beq.n	80075b4 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800759c:	651a      	str	r2, [r3, #80]	; 0x50
 800759e:	4b74      	ldr	r3, [pc, #464]	; (8007770 <HAL_FDCAN_IRQHandler+0x4b0>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00d      	beq.n	80075d6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075c0:	4b6c      	ldr	r3, [pc, #432]	; (8007774 <HAL_FDCAN_IRQHandler+0x4b4>)
 80075c2:	400b      	ands	r3, r1
 80075c4:	6513      	str	r3, [r2, #80]	; 0x50
 80075c6:	4a6a      	ldr	r2, [pc, #424]	; (8007770 <HAL_FDCAN_IRQHandler+0x4b0>)
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	0f9b      	lsrs	r3, r3, #30
 80075cc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80075ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f946 	bl	8007862 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80075d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d011      	beq.n	8007600 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075e2:	4b64      	ldr	r3, [pc, #400]	; (8007774 <HAL_FDCAN_IRQHandler+0x4b4>)
 80075e4:	400b      	ands	r3, r1
 80075e6:	6513      	str	r3, [r2, #80]	; 0x50
 80075e8:	4a61      	ldr	r2, [pc, #388]	; (8007770 <HAL_FDCAN_IRQHandler+0x4b0>)
 80075ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ec:	0f9b      	lsrs	r3, r3, #30
 80075ee:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80075f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a5c      	ldr	r2, [pc, #368]	; (8007778 <HAL_FDCAN_IRQHandler+0x4b8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	f040 80a6 	bne.w	8007758 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 809e 	beq.w	8007758 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007630:	4013      	ands	r3, r2
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800763e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	6a3a      	ldr	r2, [r7, #32]
 8007648:	4013      	ands	r3, r2
 800764a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007656:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	4013      	ands	r3, r2
 8007662:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800766e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	4013      	ands	r3, r2
 800767a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8007686:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4013      	ands	r3, r2
 8007692:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	2b00      	cmp	r3, #0
 8007698:	d007      	beq.n	80076aa <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80076a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f8e7 	bl	8007878 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	6a3a      	ldr	r2, [r7, #32]
 80076b6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80076b8:	6a39      	ldr	r1, [r7, #32]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8e7 	bl	800788e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01b      	beq.n	8007706 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d014      	beq.n	8007706 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	0c1b      	lsrs	r3, r3, #16
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076f2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2240      	movs	r2, #64	; 0x40
 80076fa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	6939      	ldr	r1, [r7, #16]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f8cf 	bl	80078a4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d007      	beq.n	800771c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007714:	69f9      	ldr	r1, [r7, #28]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f8d0 	bl	80078bc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f873 	bl	800784e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007768:	bf00      	nop
 800776a:	3748      	adds	r7, #72	; 0x48
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	4000a800 	.word	0x4000a800
 8007774:	3fcfffff 	.word	0x3fcfffff
 8007778:	4000a000 	.word	0x4000a000

0800777c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
	...

080078d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80078ea:	4ba7      	ldr	r3, [pc, #668]	; (8007b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	0091      	lsls	r1, r2, #2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6812      	ldr	r2, [r2, #0]
 80078f6:	430b      	orrs	r3, r1
 80078f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007904:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	041a      	lsls	r2, r3, #16
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	4413      	add	r3, r2
 8007920:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800792a:	4b97      	ldr	r3, [pc, #604]	; (8007b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800792c:	4013      	ands	r3, r2
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	0091      	lsls	r1, r2, #2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	430b      	orrs	r3, r1
 8007938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007944:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794c:	041a      	lsls	r2, r3, #16
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	4413      	add	r3, r2
 8007962:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800796c:	4b86      	ldr	r3, [pc, #536]	; (8007b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800796e:	4013      	ands	r3, r2
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	0091      	lsls	r1, r2, #2
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6812      	ldr	r2, [r2, #0]
 8007978:	430b      	orrs	r3, r1
 800797a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007986:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	041a      	lsls	r2, r3, #16
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80079a2:	fb02 f303 	mul.w	r3, r2, r3
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	4413      	add	r3, r2
 80079aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80079b4:	4b74      	ldr	r3, [pc, #464]	; (8007b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	0091      	lsls	r1, r2, #2
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	430b      	orrs	r3, r1
 80079c2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079ce:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079d6:	041a      	lsls	r2, r3, #16
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80079ea:	fb02 f303 	mul.w	r3, r2, r3
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	4413      	add	r3, r2
 80079f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80079fc:	4b62      	ldr	r3, [pc, #392]	; (8007b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079fe:	4013      	ands	r3, r2
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	0091      	lsls	r1, r2, #2
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6812      	ldr	r2, [r2, #0]
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007a16:	fb02 f303 	mul.w	r3, r2, r3
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007a28:	4b57      	ldr	r3, [pc, #348]	; (8007b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	0091      	lsls	r1, r2, #2
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	430b      	orrs	r3, r1
 8007a36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a42:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4a:	041a      	lsls	r2, r3, #16
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	4413      	add	r3, r2
 8007a60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007a6a:	4b47      	ldr	r3, [pc, #284]	; (8007b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	0091      	lsls	r1, r2, #2
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6812      	ldr	r2, [r2, #0]
 8007a76:	430b      	orrs	r3, r1
 8007a78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a84:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a8c:	041a      	lsls	r2, r3, #16
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007aa0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa8:	061a      	lsls	r2, r3, #24
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ab8:	4b34      	ldr	r3, [pc, #208]	; (8007b8c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007aba:	4413      	add	r3, r2
 8007abc:	009a      	lsls	r2, r3, #2
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	441a      	add	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	441a      	add	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007b06:	fb01 f303 	mul.w	r3, r1, r3
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	441a      	add	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007b1e:	fb01 f303 	mul.w	r3, r1, r3
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	441a      	add	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	441a      	add	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b4e:	fb01 f303 	mul.w	r3, r1, r3
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b6a:	fb01 f303 	mul.w	r3, r1, r3
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	441a      	add	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b7e:	4a04      	ldr	r2, [pc, #16]	; (8007b90 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d915      	bls.n	8007bb0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007b84:	e006      	b.n	8007b94 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007b86:	bf00      	nop
 8007b88:	ffff0003 	.word	0xffff0003
 8007b8c:	10002b00 	.word	0x10002b00
 8007b90:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b9a:	f043 0220 	orr.w	r2, r3, #32
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2203      	movs	r2, #3
 8007ba8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e010      	b.n	8007bd2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	e005      	b.n	8007bc4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d3f3      	bcc.n	8007bb8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop

08007be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b089      	sub	sp, #36	; 0x24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007bee:	4b89      	ldr	r3, [pc, #548]	; (8007e14 <HAL_GPIO_Init+0x234>)
 8007bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bf2:	e194      	b.n	8007f1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8007c00:	4013      	ands	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 8186 	beq.w	8007f18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d00b      	beq.n	8007c2c <HAL_GPIO_Init+0x4c>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d007      	beq.n	8007c2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c20:	2b11      	cmp	r3, #17
 8007c22:	d003      	beq.n	8007c2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	2b12      	cmp	r3, #18
 8007c2a:	d130      	bne.n	8007c8e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	2203      	movs	r2, #3
 8007c38:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	4013      	ands	r3, r2
 8007c42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	68da      	ldr	r2, [r3, #12]
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c62:	2201      	movs	r2, #1
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	091b      	lsrs	r3, r3, #4
 8007c78:	f003 0201 	and.w	r2, r3, #1
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	2203      	movs	r2, #3
 8007c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9e:	43db      	mvns	r3, r3
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d003      	beq.n	8007cce <HAL_GPIO_Init+0xee>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b12      	cmp	r3, #18
 8007ccc:	d123      	bne.n	8007d16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	08da      	lsrs	r2, r3, #3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3208      	adds	r2, #8
 8007cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	220f      	movs	r2, #15
 8007ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cea:	43db      	mvns	r3, r3
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	691a      	ldr	r2, [r3, #16]
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	08da      	lsrs	r2, r3, #3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3208      	adds	r2, #8
 8007d10:	69b9      	ldr	r1, [r7, #24]
 8007d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	2203      	movs	r2, #3
 8007d22:	fa02 f303 	lsl.w	r3, r2, r3
 8007d26:	43db      	mvns	r3, r3
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f003 0203 	and.w	r2, r3, #3
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 80e0 	beq.w	8007f18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d58:	4b2f      	ldr	r3, [pc, #188]	; (8007e18 <HAL_GPIO_Init+0x238>)
 8007d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d5e:	4a2e      	ldr	r2, [pc, #184]	; (8007e18 <HAL_GPIO_Init+0x238>)
 8007d60:	f043 0302 	orr.w	r3, r3, #2
 8007d64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d68:	4b2b      	ldr	r3, [pc, #172]	; (8007e18 <HAL_GPIO_Init+0x238>)
 8007d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d76:	4a29      	ldr	r2, [pc, #164]	; (8007e1c <HAL_GPIO_Init+0x23c>)
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	089b      	lsrs	r3, r3, #2
 8007d7c:	3302      	adds	r3, #2
 8007d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	220f      	movs	r2, #15
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	43db      	mvns	r3, r3
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	4013      	ands	r3, r2
 8007d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a20      	ldr	r2, [pc, #128]	; (8007e20 <HAL_GPIO_Init+0x240>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d052      	beq.n	8007e48 <HAL_GPIO_Init+0x268>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a1f      	ldr	r2, [pc, #124]	; (8007e24 <HAL_GPIO_Init+0x244>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d031      	beq.n	8007e0e <HAL_GPIO_Init+0x22e>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a1e      	ldr	r2, [pc, #120]	; (8007e28 <HAL_GPIO_Init+0x248>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d02b      	beq.n	8007e0a <HAL_GPIO_Init+0x22a>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a1d      	ldr	r2, [pc, #116]	; (8007e2c <HAL_GPIO_Init+0x24c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d025      	beq.n	8007e06 <HAL_GPIO_Init+0x226>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a1c      	ldr	r2, [pc, #112]	; (8007e30 <HAL_GPIO_Init+0x250>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d01f      	beq.n	8007e02 <HAL_GPIO_Init+0x222>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a1b      	ldr	r2, [pc, #108]	; (8007e34 <HAL_GPIO_Init+0x254>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d019      	beq.n	8007dfe <HAL_GPIO_Init+0x21e>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a1a      	ldr	r2, [pc, #104]	; (8007e38 <HAL_GPIO_Init+0x258>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d013      	beq.n	8007dfa <HAL_GPIO_Init+0x21a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a19      	ldr	r2, [pc, #100]	; (8007e3c <HAL_GPIO_Init+0x25c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00d      	beq.n	8007df6 <HAL_GPIO_Init+0x216>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a18      	ldr	r2, [pc, #96]	; (8007e40 <HAL_GPIO_Init+0x260>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d007      	beq.n	8007df2 <HAL_GPIO_Init+0x212>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a17      	ldr	r2, [pc, #92]	; (8007e44 <HAL_GPIO_Init+0x264>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d101      	bne.n	8007dee <HAL_GPIO_Init+0x20e>
 8007dea:	2309      	movs	r3, #9
 8007dec:	e02d      	b.n	8007e4a <HAL_GPIO_Init+0x26a>
 8007dee:	230a      	movs	r3, #10
 8007df0:	e02b      	b.n	8007e4a <HAL_GPIO_Init+0x26a>
 8007df2:	2308      	movs	r3, #8
 8007df4:	e029      	b.n	8007e4a <HAL_GPIO_Init+0x26a>
 8007df6:	2307      	movs	r3, #7
 8007df8:	e027      	b.n	8007e4a <HAL_GPIO_Init+0x26a>
 8007dfa:	2306      	movs	r3, #6
 8007dfc:	e025      	b.n	8007e4a <HAL_GPIO_Init+0x26a>
 8007dfe:	2305      	movs	r3, #5
 8007e00:	e023      	b.n	8007e4a <HAL_GPIO_Init+0x26a>
 8007e02:	2304      	movs	r3, #4
 8007e04:	e021      	b.n	8007e4a <HAL_GPIO_Init+0x26a>
 8007e06:	2303      	movs	r3, #3
 8007e08:	e01f      	b.n	8007e4a <HAL_GPIO_Init+0x26a>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e01d      	b.n	8007e4a <HAL_GPIO_Init+0x26a>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e01b      	b.n	8007e4a <HAL_GPIO_Init+0x26a>
 8007e12:	bf00      	nop
 8007e14:	58000080 	.word	0x58000080
 8007e18:	58024400 	.word	0x58024400
 8007e1c:	58000400 	.word	0x58000400
 8007e20:	58020000 	.word	0x58020000
 8007e24:	58020400 	.word	0x58020400
 8007e28:	58020800 	.word	0x58020800
 8007e2c:	58020c00 	.word	0x58020c00
 8007e30:	58021000 	.word	0x58021000
 8007e34:	58021400 	.word	0x58021400
 8007e38:	58021800 	.word	0x58021800
 8007e3c:	58021c00 	.word	0x58021c00
 8007e40:	58022000 	.word	0x58022000
 8007e44:	58022400 	.word	0x58022400
 8007e48:	2300      	movs	r3, #0
 8007e4a:	69fa      	ldr	r2, [r7, #28]
 8007e4c:	f002 0203 	and.w	r2, r2, #3
 8007e50:	0092      	lsls	r2, r2, #2
 8007e52:	4093      	lsls	r3, r2
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e5a:	4938      	ldr	r1, [pc, #224]	; (8007f3c <HAL_GPIO_Init+0x35c>)
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	089b      	lsrs	r3, r3, #2
 8007e60:	3302      	adds	r3, #2
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	43db      	mvns	r3, r3
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	4013      	ands	r3, r2
 8007e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	43db      	mvns	r3, r3
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	43db      	mvns	r3, r3
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	43db      	mvns	r3, r3
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	fa22 f303 	lsr.w	r3, r2, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f47f ae63 	bne.w	8007bf4 <HAL_GPIO_Init+0x14>
  }
}
 8007f2e:	bf00      	nop
 8007f30:	3724      	adds	r7, #36	; 0x24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	58000400 	.word	0x58000400

08007f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	887b      	ldrh	r3, [r7, #2]
 8007f52:	4013      	ands	r3, r2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	73fb      	strb	r3, [r7, #15]
 8007f5c:	e001      	b.n	8007f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	807b      	strh	r3, [r7, #2]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f80:	787b      	ldrb	r3, [r7, #1]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f86:	887a      	ldrh	r2, [r7, #2]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f8c:	e003      	b.n	8007f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f8e:	887b      	ldrh	r3, [r7, #2]
 8007f90:	041a      	lsls	r2, r3, #16
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	619a      	str	r2, [r3, #24]
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	460b      	mov	r3, r1
 8007fac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695a      	ldr	r2, [r3, #20]
 8007fb2:	887b      	ldrh	r3, [r7, #2]
 8007fb4:	401a      	ands	r2, r3
 8007fb6:	887b      	ldrh	r3, [r7, #2]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d104      	bne.n	8007fc6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007fbc:	887b      	ldrh	r3, [r7, #2]
 8007fbe:	041a      	lsls	r2, r3, #16
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007fc4:	e002      	b.n	8007fcc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8007fc6:	887a      	ldrh	r2, [r7, #2]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	619a      	str	r2, [r3, #24]
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fea:	88fb      	ldrh	r3, [r7, #6]
 8007fec:	4013      	ands	r3, r2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d008      	beq.n	8008004 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ff6:	88fb      	ldrh	r3, [r7, #6]
 8007ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ffc:	88fb      	ldrh	r3, [r7, #6]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fb fd8c 	bl	8003b1c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008014:	4b0d      	ldr	r3, [pc, #52]	; (800804c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800801a:	4a0c      	ldr	r2, [pc, #48]	; (800804c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800801c:	f043 0302 	orr.w	r3, r3, #2
 8008020:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008024:	4b09      	ldr	r3, [pc, #36]	; (800804c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8008032:	4b07      	ldr	r3, [pc, #28]	; (8008050 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	4906      	ldr	r1, [pc, #24]	; (8008050 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4313      	orrs	r3, r2
 800803c:	604b      	str	r3, [r1, #4]
}
 800803e:	bf00      	nop
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	58024400 	.word	0x58024400
 8008050:	58000400 	.word	0x58000400

08008054 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008056:	b08f      	sub	sp, #60	; 0x3c
 8008058:	af0a      	add	r7, sp, #40	; 0x28
 800805a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e116      	b.n	8008294 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d106      	bne.n	8008086 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f010 fe4d 	bl	8018d20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2203      	movs	r2, #3
 800808a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f009 fe52 	bl	8011d4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	687e      	ldr	r6, [r7, #4]
 80080b2:	466d      	mov	r5, sp
 80080b4:	f106 0410 	add.w	r4, r6, #16
 80080b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80080c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80080c8:	1d33      	adds	r3, r6, #4
 80080ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080cc:	6838      	ldr	r0, [r7, #0]
 80080ce:	f009 fd29 	bl	8011b24 <USB_CoreInit>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e0d7      	b.n	8008294 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f009 fe40 	bl	8011d70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
 80080f4:	e04a      	b.n	800818c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80080f6:	7bfa      	ldrb	r2, [r7, #15]
 80080f8:	6879      	ldr	r1, [r7, #4]
 80080fa:	4613      	mov	r3, r2
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	1a9b      	subs	r3, r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	440b      	add	r3, r1
 8008104:	333d      	adds	r3, #61	; 0x3d
 8008106:	2201      	movs	r2, #1
 8008108:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800810a:	7bfa      	ldrb	r2, [r7, #15]
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	4613      	mov	r3, r2
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	440b      	add	r3, r1
 8008118:	333c      	adds	r3, #60	; 0x3c
 800811a:	7bfa      	ldrb	r2, [r7, #15]
 800811c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800811e:	7bfa      	ldrb	r2, [r7, #15]
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	b298      	uxth	r0, r3
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	4613      	mov	r3, r2
 8008128:	00db      	lsls	r3, r3, #3
 800812a:	1a9b      	subs	r3, r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	440b      	add	r3, r1
 8008130:	3342      	adds	r3, #66	; 0x42
 8008132:	4602      	mov	r2, r0
 8008134:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008136:	7bfa      	ldrb	r2, [r7, #15]
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	4613      	mov	r3, r2
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	1a9b      	subs	r3, r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	440b      	add	r3, r1
 8008144:	333f      	adds	r3, #63	; 0x3f
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800814a:	7bfa      	ldrb	r2, [r7, #15]
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	4613      	mov	r3, r2
 8008150:	00db      	lsls	r3, r3, #3
 8008152:	1a9b      	subs	r3, r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	440b      	add	r3, r1
 8008158:	3344      	adds	r3, #68	; 0x44
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800815e:	7bfa      	ldrb	r2, [r7, #15]
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	00db      	lsls	r3, r3, #3
 8008166:	1a9b      	subs	r3, r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	3348      	adds	r3, #72	; 0x48
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008172:	7bfa      	ldrb	r2, [r7, #15]
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	4613      	mov	r3, r2
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	440b      	add	r3, r1
 8008180:	3350      	adds	r3, #80	; 0x50
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	3301      	adds	r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
 800818c:	7bfa      	ldrb	r2, [r7, #15]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	429a      	cmp	r2, r3
 8008194:	d3af      	bcc.n	80080f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
 800819a:	e044      	b.n	8008226 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800819c:	7bfa      	ldrb	r2, [r7, #15]
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	4613      	mov	r3, r2
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80081ae:	2200      	movs	r2, #0
 80081b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80081b2:	7bfa      	ldrb	r2, [r7, #15]
 80081b4:	6879      	ldr	r1, [r7, #4]
 80081b6:	4613      	mov	r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80081c4:	7bfa      	ldrb	r2, [r7, #15]
 80081c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80081c8:	7bfa      	ldrb	r2, [r7, #15]
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	4613      	mov	r3, r2
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	1a9b      	subs	r3, r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	440b      	add	r3, r1
 80081d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80081de:	7bfa      	ldrb	r2, [r7, #15]
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	4613      	mov	r3, r2
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80081f4:	7bfa      	ldrb	r2, [r7, #15]
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4613      	mov	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800820a:	7bfa      	ldrb	r2, [r7, #15]
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	4613      	mov	r3, r2
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	1a9b      	subs	r3, r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	3301      	adds	r3, #1
 8008224:	73fb      	strb	r3, [r7, #15]
 8008226:	7bfa      	ldrb	r2, [r7, #15]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	429a      	cmp	r2, r3
 800822e:	d3b5      	bcc.n	800819c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	603b      	str	r3, [r7, #0]
 8008236:	687e      	ldr	r6, [r7, #4]
 8008238:	466d      	mov	r5, sp
 800823a:	f106 0410 	add.w	r4, r6, #16
 800823e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008246:	e894 0003 	ldmia.w	r4, {r0, r1}
 800824a:	e885 0003 	stmia.w	r5, {r0, r1}
 800824e:	1d33      	adds	r3, r6, #4
 8008250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008252:	6838      	ldr	r0, [r7, #0]
 8008254:	f009 fdb6 	bl	8011dc4 <USB_DevInit>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2202      	movs	r2, #2
 8008262:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e014      	b.n	8008294 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	2b01      	cmp	r3, #1
 8008280:	d102      	bne.n	8008288 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f001 f8be 	bl	8009404 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4618      	mov	r0, r3
 800828e:	f00a fdf5 	bl	8012e7c <USB_DevDisconnect>

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800829c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d101      	bne.n	80082b8 <HAL_PCD_Start+0x1c>
 80082b4:	2302      	movs	r3, #2
 80082b6:	e020      	b.n	80082fa <HAL_PCD_Start+0x5e>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d109      	bne.n	80082dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d005      	beq.n	80082dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f00a fdb3 	bl	8012e4c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f009 fd1e 	bl	8011d2c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008302:	b590      	push	{r4, r7, lr}
 8008304:	b08d      	sub	sp, #52	; 0x34
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4618      	mov	r0, r3
 800831a:	f00a fe5a 	bl	8012fd2 <USB_GetMode>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	f040 83ca 	bne.w	8008aba <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4618      	mov	r0, r3
 800832c:	f00a fdbe 	bl	8012eac <USB_ReadInterrupts>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 83c0 	beq.w	8008ab8 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f00a fdb5 	bl	8012eac <USB_ReadInterrupts>
 8008342:	4603      	mov	r3, r0
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b02      	cmp	r3, #2
 800834a:	d107      	bne.n	800835c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	695a      	ldr	r2, [r3, #20]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f002 0202 	and.w	r2, r2, #2
 800835a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f00a fda3 	bl	8012eac <USB_ReadInterrupts>
 8008366:	4603      	mov	r3, r0
 8008368:	f003 0310 	and.w	r3, r3, #16
 800836c:	2b10      	cmp	r3, #16
 800836e:	d161      	bne.n	8008434 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699a      	ldr	r2, [r3, #24]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0210 	bic.w	r2, r2, #16
 800837e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	f003 020f 	and.w	r2, r3, #15
 800838c:	4613      	mov	r3, r2
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	1a9b      	subs	r3, r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	4413      	add	r3, r2
 800839c:	3304      	adds	r3, #4
 800839e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	0c5b      	lsrs	r3, r3, #17
 80083a4:	f003 030f 	and.w	r3, r3, #15
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d124      	bne.n	80083f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80083b2:	4013      	ands	r3, r2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d035      	beq.n	8008424 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	091b      	lsrs	r3, r3, #4
 80083c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80083c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	461a      	mov	r2, r3
 80083ca:	6a38      	ldr	r0, [r7, #32]
 80083cc:	f00a fc1b 	bl	8012c06 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	68da      	ldr	r2, [r3, #12]
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	091b      	lsrs	r3, r3, #4
 80083d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083dc:	441a      	add	r2, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	091b      	lsrs	r3, r3, #4
 80083ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083ee:	441a      	add	r2, r3
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	619a      	str	r2, [r3, #24]
 80083f4:	e016      	b.n	8008424 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	0c5b      	lsrs	r3, r3, #17
 80083fa:	f003 030f 	and.w	r3, r3, #15
 80083fe:	2b06      	cmp	r3, #6
 8008400:	d110      	bne.n	8008424 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008408:	2208      	movs	r2, #8
 800840a:	4619      	mov	r1, r3
 800840c:	6a38      	ldr	r0, [r7, #32]
 800840e:	f00a fbfa 	bl	8012c06 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	091b      	lsrs	r3, r3, #4
 800841a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800841e:	441a      	add	r2, r3
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0210 	orr.w	r2, r2, #16
 8008432:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4618      	mov	r0, r3
 800843a:	f00a fd37 	bl	8012eac <USB_ReadInterrupts>
 800843e:	4603      	mov	r3, r0
 8008440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008444:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008448:	d16e      	bne.n	8008528 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f00a fd3d 	bl	8012ed2 <USB_ReadDevAllOutEpInterrupt>
 8008458:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800845a:	e062      	b.n	8008522 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d057      	beq.n	8008516 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846c:	b2d2      	uxtb	r2, r2
 800846e:	4611      	mov	r1, r2
 8008470:	4618      	mov	r0, r3
 8008472:	f00a fd62 	bl	8012f3a <USB_ReadDevOutEPInterrupt>
 8008476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00c      	beq.n	800849c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	4413      	add	r3, r2
 800848a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848e:	461a      	mov	r2, r3
 8008490:	2301      	movs	r3, #1
 8008492:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fe0a 	bl	80090b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f003 0308 	and.w	r3, r3, #8
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00c      	beq.n	80084c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b2:	461a      	mov	r2, r3
 80084b4:	2308      	movs	r3, #8
 80084b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80084b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 ff04 	bl	80092c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f003 0310 	and.w	r3, r3, #16
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d008      	beq.n	80084dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d6:	461a      	mov	r2, r3
 80084d8:	2310      	movs	r3, #16
 80084da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f003 0320 	and.w	r3, r3, #32
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d008      	beq.n	80084f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f2:	461a      	mov	r2, r3
 80084f4:	2320      	movs	r3, #32
 80084f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850e:	461a      	mov	r2, r3
 8008510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008514:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	3301      	adds	r3, #1
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	085b      	lsrs	r3, r3, #1
 8008520:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008524:	2b00      	cmp	r3, #0
 8008526:	d199      	bne.n	800845c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4618      	mov	r0, r3
 800852e:	f00a fcbd 	bl	8012eac <USB_ReadInterrupts>
 8008532:	4603      	mov	r3, r0
 8008534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800853c:	f040 80c0 	bne.w	80086c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4618      	mov	r0, r3
 8008546:	f00a fcde 	bl	8012f06 <USB_ReadDevAllInEpInterrupt>
 800854a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008550:	e0b2      	b.n	80086b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 80a7 	beq.w	80086ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008564:	b2d2      	uxtb	r2, r2
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f00a fd04 	bl	8012f76 <USB_ReadDevInEPInterrupt>
 800856e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d057      	beq.n	800862a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	2201      	movs	r2, #1
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	43db      	mvns	r3, r3
 8008594:	69f9      	ldr	r1, [r7, #28]
 8008596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800859a:	4013      	ands	r3, r2
 800859c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085aa:	461a      	mov	r2, r3
 80085ac:	2301      	movs	r3, #1
 80085ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d132      	bne.n	800861e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085bc:	4613      	mov	r3, r2
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	1a9b      	subs	r3, r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	3348      	adds	r3, #72	; 0x48
 80085c8:	6819      	ldr	r1, [r3, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ce:	4613      	mov	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4403      	add	r3, r0
 80085d8:	3344      	adds	r3, #68	; 0x44
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4419      	add	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e2:	4613      	mov	r3, r2
 80085e4:	00db      	lsls	r3, r3, #3
 80085e6:	1a9b      	subs	r3, r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4403      	add	r3, r0
 80085ec:	3348      	adds	r3, #72	; 0x48
 80085ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d113      	bne.n	800861e <HAL_PCD_IRQHandler+0x31c>
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085fa:	4613      	mov	r3, r2
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	1a9b      	subs	r3, r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	440b      	add	r3, r1
 8008604:	3350      	adds	r3, #80	; 0x50
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d108      	bne.n	800861e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6818      	ldr	r0, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008616:	461a      	mov	r2, r3
 8008618:	2101      	movs	r1, #1
 800861a:	f00a fd0d 	bl	8013038 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	b2db      	uxtb	r3, r3
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f010 fbfa 	bl	8018e1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f003 0308 	and.w	r3, r3, #8
 8008630:	2b00      	cmp	r3, #0
 8008632:	d008      	beq.n	8008646 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008640:	461a      	mov	r2, r3
 8008642:	2308      	movs	r3, #8
 8008644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	d008      	beq.n	8008662 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865c:	461a      	mov	r2, r3
 800865e:	2310      	movs	r3, #16
 8008660:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	d008      	beq.n	800867e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008678:	461a      	mov	r2, r3
 800867a:	2340      	movs	r3, #64	; 0x40
 800867c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f003 0302 	and.w	r3, r3, #2
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008694:	461a      	mov	r2, r3
 8008696:	2302      	movs	r3, #2
 8008698:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d003      	beq.n	80086ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80086a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fc75 	bl	8008f96 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	3301      	adds	r3, #1
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80086b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b4:	085b      	lsrs	r3, r3, #1
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f47f af49 	bne.w	8008552 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f00a fbf1 	bl	8012eac <USB_ReadInterrupts>
 80086ca:	4603      	mov	r3, r0
 80086cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086d4:	d122      	bne.n	800871c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086e4:	f023 0301 	bic.w	r3, r3, #1
 80086e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d108      	bne.n	8008706 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80086fc:	2100      	movs	r1, #0
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fea4 	bl	800944c <HAL_PCDEx_LPM_Callback>
 8008704:	e002      	b.n	800870c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f010 fc00 	bl	8018f0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	695a      	ldr	r2, [r3, #20]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800871a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4618      	mov	r0, r3
 8008722:	f00a fbc3 	bl	8012eac <USB_ReadInterrupts>
 8008726:	4603      	mov	r3, r0
 8008728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800872c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008730:	d112      	bne.n	8008758 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b01      	cmp	r3, #1
 8008740:	d102      	bne.n	8008748 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f010 fbbc 	bl	8018ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695a      	ldr	r2, [r3, #20]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008756:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4618      	mov	r0, r3
 800875e:	f00a fba5 	bl	8012eac <USB_ReadInterrupts>
 8008762:	4603      	mov	r3, r0
 8008764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800876c:	d121      	bne.n	80087b2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	695a      	ldr	r2, [r3, #20]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800877c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d111      	bne.n	80087ac <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008796:	089b      	lsrs	r3, r3, #2
 8008798:	f003 020f 	and.w	r2, r3, #15
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80087a2:	2101      	movs	r1, #1
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fe51 	bl	800944c <HAL_PCDEx_LPM_Callback>
 80087aa:	e002      	b.n	80087b2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f010 fb87 	bl	8018ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f00a fb78 	bl	8012eac <USB_ReadInterrupts>
 80087bc:	4603      	mov	r3, r0
 80087be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087c6:	f040 80c7 	bne.w	8008958 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	69fa      	ldr	r2, [r7, #28]
 80087d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087d8:	f023 0301 	bic.w	r3, r3, #1
 80087dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2110      	movs	r1, #16
 80087e4:	4618      	mov	r0, r3
 80087e6:	f009 fc4b 	bl	8012080 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087ea:	2300      	movs	r3, #0
 80087ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087ee:	e056      	b.n	800889e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fc:	461a      	mov	r2, r3
 80087fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008802:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008814:	0151      	lsls	r1, r2, #5
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	440a      	add	r2, r1
 800881a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008822:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	440a      	add	r2, r1
 800883a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800883e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008842:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008850:	461a      	mov	r2, r3
 8008852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008856:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008868:	0151      	lsls	r1, r2, #5
 800886a:	69fa      	ldr	r2, [r7, #28]
 800886c:	440a      	add	r2, r1
 800886e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008876:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008888:	0151      	lsls	r1, r2, #5
 800888a:	69fa      	ldr	r2, [r7, #28]
 800888c:	440a      	add	r2, r1
 800888e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008892:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008896:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	3301      	adds	r3, #1
 800889c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d3a3      	bcc.n	80087f0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	69fa      	ldr	r2, [r7, #28]
 80088b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80088ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d016      	beq.n	80088f2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088d4:	f043 030b 	orr.w	r3, r3, #11
 80088d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e4:	69fa      	ldr	r2, [r7, #28]
 80088e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088ea:	f043 030b 	orr.w	r3, r3, #11
 80088ee:	6453      	str	r3, [r2, #68]	; 0x44
 80088f0:	e015      	b.n	800891e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008900:	4619      	mov	r1, r3
 8008902:	f242 032b 	movw	r3, #8235	; 0x202b
 8008906:	4313      	orrs	r3, r2
 8008908:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	69fa      	ldr	r2, [r7, #28]
 8008914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008918:	f043 030b 	orr.w	r3, r3, #11
 800891c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800892c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008930:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008942:	461a      	mov	r2, r3
 8008944:	f00a fb78 	bl	8013038 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695a      	ldr	r2, [r3, #20]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4618      	mov	r0, r3
 800895e:	f00a faa5 	bl	8012eac <USB_ReadInterrupts>
 8008962:	4603      	mov	r3, r0
 8008964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800896c:	d124      	bne.n	80089b8 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f00a fb3c 	bl	8012ff0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4618      	mov	r0, r3
 800897e:	f009 fbe0 	bl	8012142 <USB_GetDevSpeed>
 8008982:	4603      	mov	r3, r0
 8008984:	461a      	mov	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681c      	ldr	r4, [r3, #0]
 800898e:	f001 fdd9 	bl	800a544 <HAL_RCC_GetHCLKFreq>
 8008992:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008998:	b2db      	uxtb	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	4620      	mov	r0, r4
 800899e:	f009 f923 	bl	8011be8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f010 fa63 	bl	8018e6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	695a      	ldr	r2, [r3, #20]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80089b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4618      	mov	r0, r3
 80089be:	f00a fa75 	bl	8012eac <USB_ReadInterrupts>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f003 0308 	and.w	r3, r3, #8
 80089c8:	2b08      	cmp	r3, #8
 80089ca:	d10a      	bne.n	80089e2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f010 fa40 	bl	8018e52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	695a      	ldr	r2, [r3, #20]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f002 0208 	and.w	r2, r2, #8
 80089e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f00a fa60 	bl	8012eac <USB_ReadInterrupts>
 80089ec:	4603      	mov	r3, r0
 80089ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089f6:	d10f      	bne.n	8008a18 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f010 faa2 	bl	8018f4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695a      	ldr	r2, [r3, #20]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f00a fa45 	bl	8012eac <USB_ReadInterrupts>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a2c:	d10f      	bne.n	8008a4e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f010 fa75 	bl	8018f28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	695a      	ldr	r2, [r3, #20]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f00a fa2a 	bl	8012eac <USB_ReadInterrupts>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a62:	d10a      	bne.n	8008a7a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f010 fa83 	bl	8018f70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	695a      	ldr	r2, [r3, #20]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f00a fa14 	bl	8012eac <USB_ReadInterrupts>
 8008a84:	4603      	mov	r3, r0
 8008a86:	f003 0304 	and.w	r3, r3, #4
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d115      	bne.n	8008aba <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f010 fa73 	bl	8018f8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6859      	ldr	r1, [r3, #4]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	605a      	str	r2, [r3, #4]
 8008ab6:	e000      	b.n	8008aba <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008ab8:	bf00      	nop
    }
  }
}
 8008aba:	3734      	adds	r7, #52	; 0x34
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd90      	pop	{r4, r7, pc}

08008ac0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_PCD_SetAddress+0x1a>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e013      	b.n	8008b02 <HAL_PCD_SetAddress+0x42>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	78fa      	ldrb	r2, [r7, #3]
 8008ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	78fa      	ldrb	r2, [r7, #3]
 8008af0:	4611      	mov	r1, r2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f00a f984 	bl	8012e00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	4608      	mov	r0, r1
 8008b14:	4611      	mov	r1, r2
 8008b16:	461a      	mov	r2, r3
 8008b18:	4603      	mov	r3, r0
 8008b1a:	70fb      	strb	r3, [r7, #3]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	803b      	strh	r3, [r7, #0]
 8008b20:	4613      	mov	r3, r2
 8008b22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	da0f      	bge.n	8008b50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	f003 020f 	and.w	r2, r3, #15
 8008b36:	4613      	mov	r3, r2
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	1a9b      	subs	r3, r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	3338      	adds	r3, #56	; 0x38
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	4413      	add	r3, r2
 8008b44:	3304      	adds	r3, #4
 8008b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	705a      	strb	r2, [r3, #1]
 8008b4e:	e00f      	b.n	8008b70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	f003 020f 	and.w	r2, r3, #15
 8008b56:	4613      	mov	r3, r2
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	4413      	add	r3, r2
 8008b66:	3304      	adds	r3, #4
 8008b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	f003 030f 	and.w	r3, r3, #15
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008b7c:	883a      	ldrh	r2, [r7, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	78ba      	ldrb	r2, [r7, #2]
 8008b86:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	785b      	ldrb	r3, [r3, #1]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d004      	beq.n	8008b9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008b9a:	78bb      	ldrb	r3, [r7, #2]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d102      	bne.n	8008ba6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d101      	bne.n	8008bb4 <HAL_PCD_EP_Open+0xaa>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e00e      	b.n	8008bd2 <HAL_PCD_EP_Open+0xc8>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68f9      	ldr	r1, [r7, #12]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f009 fae2 	bl	801218c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	da0f      	bge.n	8008c0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bee:	78fb      	ldrb	r3, [r7, #3]
 8008bf0:	f003 020f 	and.w	r2, r3, #15
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	1a9b      	subs	r3, r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	3338      	adds	r3, #56	; 0x38
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	4413      	add	r3, r2
 8008c02:	3304      	adds	r3, #4
 8008c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	705a      	strb	r2, [r3, #1]
 8008c0c:	e00f      	b.n	8008c2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c0e:	78fb      	ldrb	r3, [r7, #3]
 8008c10:	f003 020f 	and.w	r2, r3, #15
 8008c14:	4613      	mov	r3, r2
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	1a9b      	subs	r3, r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	4413      	add	r3, r2
 8008c24:	3304      	adds	r3, #4
 8008c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d101      	bne.n	8008c48 <HAL_PCD_EP_Close+0x6e>
 8008c44:	2302      	movs	r3, #2
 8008c46:	e00e      	b.n	8008c66 <HAL_PCD_EP_Close+0x8c>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68f9      	ldr	r1, [r7, #12]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f009 fb20 	bl	801229c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b086      	sub	sp, #24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	603b      	str	r3, [r7, #0]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c7e:	7afb      	ldrb	r3, [r7, #11]
 8008c80:	f003 020f 	and.w	r2, r3, #15
 8008c84:	4613      	mov	r3, r2
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	1a9b      	subs	r3, r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4413      	add	r3, r2
 8008c94:	3304      	adds	r3, #4
 8008c96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2200      	movs	r2, #0
 8008cae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cb0:	7afb      	ldrb	r3, [r7, #11]
 8008cb2:	f003 030f 	and.w	r3, r3, #15
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d102      	bne.n	8008cca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008cca:	7afb      	ldrb	r3, [r7, #11]
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d109      	bne.n	8008ce8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6818      	ldr	r0, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	461a      	mov	r2, r3
 8008ce0:	6979      	ldr	r1, [r7, #20]
 8008ce2:	f009 fe03 	bl	80128ec <USB_EP0StartXfer>
 8008ce6:	e008      	b.n	8008cfa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6979      	ldr	r1, [r7, #20]
 8008cf6:	f009 fbad 	bl	8012454 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008d10:	78fb      	ldrb	r3, [r7, #3]
 8008d12:	f003 020f 	and.w	r2, r3, #15
 8008d16:	6879      	ldr	r1, [r7, #4]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	440b      	add	r3, r1
 8008d22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008d26:	681b      	ldr	r3, [r3, #0]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	607a      	str	r2, [r7, #4]
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	460b      	mov	r3, r1
 8008d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	f003 020f 	and.w	r2, r3, #15
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	1a9b      	subs	r3, r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	3338      	adds	r3, #56	; 0x38
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	4413      	add	r3, r2
 8008d58:	3304      	adds	r3, #4
 8008d5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2201      	movs	r2, #1
 8008d72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d74:	7afb      	ldrb	r3, [r7, #11]
 8008d76:	f003 030f 	and.w	r3, r3, #15
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d102      	bne.n	8008d8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d8e:	7afb      	ldrb	r3, [r7, #11]
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d109      	bne.n	8008dac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	461a      	mov	r2, r3
 8008da4:	6979      	ldr	r1, [r7, #20]
 8008da6:	f009 fda1 	bl	80128ec <USB_EP0StartXfer>
 8008daa:	e008      	b.n	8008dbe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	6979      	ldr	r1, [r7, #20]
 8008dba:	f009 fb4b 	bl	8012454 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	f003 020f 	and.w	r2, r3, #15
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d901      	bls.n	8008de6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e050      	b.n	8008e88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	da0f      	bge.n	8008e0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dee:	78fb      	ldrb	r3, [r7, #3]
 8008df0:	f003 020f 	and.w	r2, r3, #15
 8008df4:	4613      	mov	r3, r2
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	1a9b      	subs	r3, r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	3338      	adds	r3, #56	; 0x38
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	4413      	add	r3, r2
 8008e02:	3304      	adds	r3, #4
 8008e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	705a      	strb	r2, [r3, #1]
 8008e0c:	e00d      	b.n	8008e2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	4613      	mov	r3, r2
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	1a9b      	subs	r3, r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4413      	add	r3, r2
 8008e20:	3304      	adds	r3, #4
 8008e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	f003 030f 	and.w	r3, r3, #15
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <HAL_PCD_EP_SetStall+0x82>
 8008e46:	2302      	movs	r3, #2
 8008e48:	e01e      	b.n	8008e88 <HAL_PCD_EP_SetStall+0xc0>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68f9      	ldr	r1, [r7, #12]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f009 fefd 	bl	8012c58 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e5e:	78fb      	ldrb	r3, [r7, #3]
 8008e60:	f003 030f 	and.w	r3, r3, #15
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10a      	bne.n	8008e7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6818      	ldr	r0, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	b2d9      	uxtb	r1, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f00a f8dd 	bl	8013038 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008e9c:	78fb      	ldrb	r3, [r7, #3]
 8008e9e:	f003 020f 	and.w	r2, r3, #15
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d901      	bls.n	8008eae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e042      	b.n	8008f34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	da0f      	bge.n	8008ed6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	f003 020f 	and.w	r2, r3, #15
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	3338      	adds	r3, #56	; 0x38
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	4413      	add	r3, r2
 8008eca:	3304      	adds	r3, #4
 8008ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	705a      	strb	r2, [r3, #1]
 8008ed4:	e00f      	b.n	8008ef6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ed6:	78fb      	ldrb	r3, [r7, #3]
 8008ed8:	f003 020f 	and.w	r2, r3, #15
 8008edc:	4613      	mov	r3, r2
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	1a9b      	subs	r3, r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	4413      	add	r3, r2
 8008eec:	3304      	adds	r3, #4
 8008eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	f003 030f 	and.w	r3, r3, #15
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d101      	bne.n	8008f16 <HAL_PCD_EP_ClrStall+0x86>
 8008f12:	2302      	movs	r3, #2
 8008f14:	e00e      	b.n	8008f34 <HAL_PCD_EP_ClrStall+0xa4>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68f9      	ldr	r1, [r7, #12]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f009 ff05 	bl	8012d34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <HAL_PCD_EP_Flush+0x1a>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e01b      	b.n	8008f8e <HAL_PCD_EP_Flush+0x52>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8008f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da09      	bge.n	8008f7a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	f003 030f 	and.w	r3, r3, #15
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f009 f884 	bl	8012080 <USB_FlushTxFifo>
 8008f78:	e004      	b.n	8008f84 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f009 f8a4 	bl	80120cc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b08a      	sub	sp, #40	; 0x28
 8008f9a:	af02      	add	r7, sp, #8
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	4613      	mov	r3, r2
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	1a9b      	subs	r3, r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	3338      	adds	r3, #56	; 0x38
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	4413      	add	r3, r2
 8008fba:	3304      	adds	r3, #4
 8008fbc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d901      	bls.n	8008fce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e06c      	b.n	80090a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	695a      	ldr	r2, [r3, #20]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	69fa      	ldr	r2, [r7, #28]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d902      	bls.n	8008fea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	3303      	adds	r3, #3
 8008fee:	089b      	lsrs	r3, r3, #2
 8008ff0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ff2:	e02b      	b.n	800904c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	695a      	ldr	r2, [r3, #20]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	69fa      	ldr	r2, [r7, #28]
 8009006:	429a      	cmp	r2, r3
 8009008:	d902      	bls.n	8009010 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	3303      	adds	r3, #3
 8009014:	089b      	lsrs	r3, r3, #2
 8009016:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	68d9      	ldr	r1, [r3, #12]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	b2da      	uxtb	r2, r3
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009028:	b2db      	uxtb	r3, r3
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	4603      	mov	r3, r0
 800902e:	6978      	ldr	r0, [r7, #20]
 8009030:	f009 fdb4 	bl	8012b9c <USB_WritePacket>

    ep->xfer_buff  += len;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	441a      	add	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	699a      	ldr	r2, [r3, #24]
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	441a      	add	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	b29b      	uxth	r3, r3
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	429a      	cmp	r2, r3
 8009060:	d809      	bhi.n	8009076 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800906a:	429a      	cmp	r2, r3
 800906c:	d203      	bcs.n	8009076 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1be      	bne.n	8008ff4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	695a      	ldr	r2, [r3, #20]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	429a      	cmp	r2, r3
 8009080:	d811      	bhi.n	80090a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	f003 030f 	and.w	r3, r3, #15
 8009088:	2201      	movs	r2, #1
 800908a:	fa02 f303 	lsl.w	r3, r2, r3
 800908e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	43db      	mvns	r3, r3
 800909c:	6939      	ldr	r1, [r7, #16]
 800909e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090a2:	4013      	ands	r3, r2
 80090a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	333c      	adds	r3, #60	; 0x3c
 80090c8:	3304      	adds	r3, #4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	f040 80a0 	bne.w	8009228 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f003 0308 	and.w	r3, r3, #8
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d015      	beq.n	800911e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	4a72      	ldr	r2, [pc, #456]	; (80092c0 <PCD_EP_OutXfrComplete_int+0x210>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	f240 80dd 	bls.w	80092b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 80d7 	beq.w	80092b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009114:	461a      	mov	r2, r3
 8009116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800911a:	6093      	str	r3, [r2, #8]
 800911c:	e0cb      	b.n	80092b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	f003 0320 	and.w	r3, r3, #32
 8009124:	2b00      	cmp	r3, #0
 8009126:	d009      	beq.n	800913c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009134:	461a      	mov	r2, r3
 8009136:	2320      	movs	r3, #32
 8009138:	6093      	str	r3, [r2, #8]
 800913a:	e0bc      	b.n	80092b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009142:	2b00      	cmp	r3, #0
 8009144:	f040 80b7 	bne.w	80092b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	4a5d      	ldr	r2, [pc, #372]	; (80092c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d90f      	bls.n	8009170 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009166:	461a      	mov	r2, r3
 8009168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800916c:	6093      	str	r3, [r2, #8]
 800916e:	e0a2      	b.n	80092b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4613      	mov	r3, r2
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	1a9b      	subs	r3, r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	440b      	add	r3, r1
 800917e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009182:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	0159      	lsls	r1, r3, #5
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	440b      	add	r3, r1
 800918c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009196:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	4613      	mov	r3, r2
 800919e:	00db      	lsls	r3, r3, #3
 80091a0:	1a9b      	subs	r3, r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4403      	add	r3, r0
 80091a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80091aa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80091ac:	6879      	ldr	r1, [r7, #4]
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	4613      	mov	r3, r2
 80091b2:	00db      	lsls	r3, r3, #3
 80091b4:	1a9b      	subs	r3, r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	440b      	add	r3, r1
 80091ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80091be:	6819      	ldr	r1, [r3, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	4613      	mov	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	1a9b      	subs	r3, r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4403      	add	r3, r0
 80091ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4419      	add	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	4613      	mov	r3, r2
 80091dc:	00db      	lsls	r3, r3, #3
 80091de:	1a9b      	subs	r3, r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4403      	add	r3, r0
 80091e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80091e8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d114      	bne.n	800921a <PCD_EP_OutXfrComplete_int+0x16a>
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	4613      	mov	r3, r2
 80091f6:	00db      	lsls	r3, r3, #3
 80091f8:	1a9b      	subs	r3, r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	440b      	add	r3, r1
 80091fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d108      	bne.n	800921a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6818      	ldr	r0, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009212:	461a      	mov	r2, r3
 8009214:	2101      	movs	r1, #1
 8009216:	f009 ff0f 	bl	8013038 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f00f fde1 	bl	8018de8 <HAL_PCD_DataOutStageCallback>
 8009226:	e046      	b.n	80092b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4a26      	ldr	r2, [pc, #152]	; (80092c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d124      	bne.n	800927a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009246:	461a      	mov	r2, r3
 8009248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800924c:	6093      	str	r3, [r2, #8]
 800924e:	e032      	b.n	80092b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d008      	beq.n	800926c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009266:	461a      	mov	r2, r3
 8009268:	2320      	movs	r3, #32
 800926a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f00f fdb8 	bl	8018de8 <HAL_PCD_DataOutStageCallback>
 8009278:	e01d      	b.n	80092b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d114      	bne.n	80092aa <PCD_EP_OutXfrComplete_int+0x1fa>
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	4613      	mov	r3, r2
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	1a9b      	subs	r3, r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	440b      	add	r3, r1
 800928e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d108      	bne.n	80092aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80092a2:	461a      	mov	r2, r3
 80092a4:	2100      	movs	r1, #0
 80092a6:	f009 fec7 	bl	8013038 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f00f fd99 	bl	8018de8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	4f54300a 	.word	0x4f54300a
 80092c4:	4f54310a 	.word	0x4f54310a

080092c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	333c      	adds	r3, #60	; 0x3c
 80092e0:	3304      	adds	r3, #4
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4a15      	ldr	r2, [pc, #84]	; (8009350 <PCD_EP_OutSetupPacket_int+0x88>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d90e      	bls.n	800931c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009304:	2b00      	cmp	r3, #0
 8009306:	d009      	beq.n	800931c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009314:	461a      	mov	r2, r3
 8009316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800931a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f00f fd51 	bl	8018dc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4a0a      	ldr	r2, [pc, #40]	; (8009350 <PCD_EP_OutSetupPacket_int+0x88>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d90c      	bls.n	8009344 <PCD_EP_OutSetupPacket_int+0x7c>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d108      	bne.n	8009344 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6818      	ldr	r0, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800933c:	461a      	mov	r2, r3
 800933e:	2101      	movs	r1, #1
 8009340:	f009 fe7a 	bl	8013038 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	4f54300a 	.word	0x4f54300a

08009354 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	70fb      	strb	r3, [r7, #3]
 8009360:	4613      	mov	r3, r2
 8009362:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d107      	bne.n	8009382 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009372:	883b      	ldrh	r3, [r7, #0]
 8009374:	0419      	lsls	r1, r3, #16
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	430a      	orrs	r2, r1
 800937e:	629a      	str	r2, [r3, #40]	; 0x28
 8009380:	e028      	b.n	80093d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009388:	0c1b      	lsrs	r3, r3, #16
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	4413      	add	r3, r2
 800938e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
 8009394:	e00d      	b.n	80093b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	3340      	adds	r3, #64	; 0x40
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	0c1b      	lsrs	r3, r3, #16
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	4413      	add	r3, r2
 80093aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	3301      	adds	r3, #1
 80093b0:	73fb      	strb	r3, [r7, #15]
 80093b2:	7bfa      	ldrb	r2, [r7, #15]
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d3ec      	bcc.n	8009396 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80093bc:	883b      	ldrh	r3, [r7, #0]
 80093be:	0418      	lsls	r0, r3, #16
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	4302      	orrs	r2, r0
 80093cc:	3340      	adds	r3, #64	; 0x40
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	440b      	add	r3, r1
 80093d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	460b      	mov	r3, r1
 80093ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	887a      	ldrh	r2, [r7, #2]
 80093f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009432:	4b05      	ldr	r3, [pc, #20]	; (8009448 <HAL_PCDEx_ActivateLPM+0x44>)
 8009434:	4313      	orrs	r3, r2
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	10000003 	.word	0x10000003

0800944c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	460b      	mov	r3, r1
 8009456:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009468:	4b05      	ldr	r3, [pc, #20]	; (8009480 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a04      	ldr	r2, [pc, #16]	; (8009480 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800946e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009472:	6013      	str	r3, [r2, #0]
}
 8009474:	bf00      	nop
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	58024800 	.word	0x58024800

08009484 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d069      	beq.n	8009566 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8009492:	4b38      	ldr	r3, [pc, #224]	; (8009574 <HAL_PWR_ConfigPVD+0xf0>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4935      	ldr	r1, [pc, #212]	; (8009574 <HAL_PWR_ConfigPVD+0xf0>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 80094a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 80094b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 80094cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094da:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 80094dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094ea:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d009      	beq.n	800950c <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 80094f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009508:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d009      	beq.n	800952c <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 8009518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800951c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009528:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d007      	beq.n	8009548 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 8009538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009546:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d009      	beq.n	8009568 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8009554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800955e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009562:	6053      	str	r3, [r2, #4]
 8009564:	e000      	b.n	8009568 <HAL_PWR_ConfigPVD+0xe4>
    return;
 8009566:	bf00      	nop
  }
}
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	58024800 	.word	0x58024800

08009578 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8009578:	b480      	push	{r7}
 800957a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 800957c:	4b05      	ldr	r3, [pc, #20]	; (8009594 <HAL_PWR_EnablePVD+0x1c>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a04      	ldr	r2, [pc, #16]	; (8009594 <HAL_PWR_EnablePVD+0x1c>)
 8009582:	f043 0310 	orr.w	r3, r3, #16
 8009586:	6013      	str	r3, [r2, #0]
}
 8009588:	bf00      	nop
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	58024800 	.word	0x58024800

08009598 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80095a0:	4b19      	ldr	r3, [pc, #100]	; (8009608 <HAL_PWREx_ConfigSupply+0x70>)
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	2b04      	cmp	r3, #4
 80095aa:	d00a      	beq.n	80095c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80095ac:	4b16      	ldr	r3, [pc, #88]	; (8009608 <HAL_PWREx_ConfigSupply+0x70>)
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f003 0307 	and.w	r3, r3, #7
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d001      	beq.n	80095be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e01f      	b.n	80095fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	e01d      	b.n	80095fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80095c2:	4b11      	ldr	r3, [pc, #68]	; (8009608 <HAL_PWREx_ConfigSupply+0x70>)
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f023 0207 	bic.w	r2, r3, #7
 80095ca:	490f      	ldr	r1, [pc, #60]	; (8009608 <HAL_PWREx_ConfigSupply+0x70>)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80095d2:	f7fa ffa7 	bl	8004524 <HAL_GetTick>
 80095d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095d8:	e009      	b.n	80095ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80095da:	f7fa ffa3 	bl	8004524 <HAL_GetTick>
 80095de:	4602      	mov	r2, r0
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095e8:	d901      	bls.n	80095ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e007      	b.n	80095fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095ee:	4b06      	ldr	r3, [pc, #24]	; (8009608 <HAL_PWREx_ConfigSupply+0x70>)
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095fa:	d1ee      	bne.n	80095da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	58024800 	.word	0x58024800

0800960c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800960c:	b480      	push	{r7}
 800960e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009610:	4b05      	ldr	r3, [pc, #20]	; (8009628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	4a04      	ldr	r2, [pc, #16]	; (8009628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800961a:	60d3      	str	r3, [r2, #12]
}
 800961c:	bf00      	nop
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	58024800 	.word	0x58024800

0800962c <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 8009630:	4b1b      	ldr	r3, [pc, #108]	; (80096a0 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0310 	and.w	r3, r3, #16
 8009638:	2b00      	cmp	r3, #0
 800963a:	d014      	beq.n	8009666 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 800963c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800964c:	d10b      	bne.n	8009666 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 800964e:	f7fa fa75 	bl	8003b3c <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8009652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800965a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800965e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009662:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 8009666:	4b0e      	ldr	r3, [pc, #56]	; (80096a0 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d014      	beq.n	800969c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 8009672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800967a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800967e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009682:	d10b      	bne.n	800969c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8009684:	f000 f80e 	bl	80096a4 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8009688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800968c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 800969c:	bf00      	nop
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	58024800 	.word	0x58024800

080096a4 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 80096a4:	b480      	push	{r7}
 80096a6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 80096a8:	bf00      	nop
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
	...

080096b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08c      	sub	sp, #48	; 0x30
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e3ff      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 8087 	beq.w	80097e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096d4:	4b99      	ldr	r3, [pc, #612]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096de:	4b97      	ldr	r3, [pc, #604]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80096e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80096e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e6:	2b10      	cmp	r3, #16
 80096e8:	d007      	beq.n	80096fa <HAL_RCC_OscConfig+0x46>
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	2b18      	cmp	r3, #24
 80096ee:	d110      	bne.n	8009712 <HAL_RCC_OscConfig+0x5e>
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d10b      	bne.n	8009712 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096fa:	4b90      	ldr	r3, [pc, #576]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d06c      	beq.n	80097e0 <HAL_RCC_OscConfig+0x12c>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d168      	bne.n	80097e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e3d9      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800971a:	d106      	bne.n	800972a <HAL_RCC_OscConfig+0x76>
 800971c:	4b87      	ldr	r3, [pc, #540]	; (800993c <HAL_RCC_OscConfig+0x288>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a86      	ldr	r2, [pc, #536]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009726:	6013      	str	r3, [r2, #0]
 8009728:	e02e      	b.n	8009788 <HAL_RCC_OscConfig+0xd4>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10c      	bne.n	800974c <HAL_RCC_OscConfig+0x98>
 8009732:	4b82      	ldr	r3, [pc, #520]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a81      	ldr	r2, [pc, #516]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	4b7f      	ldr	r3, [pc, #508]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a7e      	ldr	r2, [pc, #504]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	e01d      	b.n	8009788 <HAL_RCC_OscConfig+0xd4>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009754:	d10c      	bne.n	8009770 <HAL_RCC_OscConfig+0xbc>
 8009756:	4b79      	ldr	r3, [pc, #484]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a78      	ldr	r2, [pc, #480]	; (800993c <HAL_RCC_OscConfig+0x288>)
 800975c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009760:	6013      	str	r3, [r2, #0]
 8009762:	4b76      	ldr	r3, [pc, #472]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a75      	ldr	r2, [pc, #468]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	e00b      	b.n	8009788 <HAL_RCC_OscConfig+0xd4>
 8009770:	4b72      	ldr	r3, [pc, #456]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a71      	ldr	r2, [pc, #452]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	4b6f      	ldr	r3, [pc, #444]	; (800993c <HAL_RCC_OscConfig+0x288>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a6e      	ldr	r2, [pc, #440]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d013      	beq.n	80097b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009790:	f7fa fec8 	bl	8004524 <HAL_GetTick>
 8009794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009796:	e008      	b.n	80097aa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009798:	f7fa fec4 	bl	8004524 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b64      	cmp	r3, #100	; 0x64
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e38d      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097aa:	4b64      	ldr	r3, [pc, #400]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0f0      	beq.n	8009798 <HAL_RCC_OscConfig+0xe4>
 80097b6:	e014      	b.n	80097e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097b8:	f7fa feb4 	bl	8004524 <HAL_GetTick>
 80097bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097be:	e008      	b.n	80097d2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097c0:	f7fa feb0 	bl	8004524 <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	2b64      	cmp	r3, #100	; 0x64
 80097cc:	d901      	bls.n	80097d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e379      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097d2:	4b5a      	ldr	r3, [pc, #360]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1f0      	bne.n	80097c0 <HAL_RCC_OscConfig+0x10c>
 80097de:	e000      	b.n	80097e2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 80ae 	beq.w	800994c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097f0:	4b52      	ldr	r3, [pc, #328]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097fa:	4b50      	ldr	r3, [pc, #320]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80097fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d007      	beq.n	8009816 <HAL_RCC_OscConfig+0x162>
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	2b18      	cmp	r3, #24
 800980a:	d13a      	bne.n	8009882 <HAL_RCC_OscConfig+0x1ce>
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d135      	bne.n	8009882 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009816:	4b49      	ldr	r3, [pc, #292]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0304 	and.w	r3, r3, #4
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <HAL_RCC_OscConfig+0x17a>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d101      	bne.n	800982e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e34b      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800982e:	f7fa fea7 	bl	8004580 <HAL_GetREVID>
 8009832:	4602      	mov	r2, r0
 8009834:	f241 0303 	movw	r3, #4099	; 0x1003
 8009838:	429a      	cmp	r2, r3
 800983a:	d817      	bhi.n	800986c <HAL_RCC_OscConfig+0x1b8>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	2b40      	cmp	r3, #64	; 0x40
 8009842:	d108      	bne.n	8009856 <HAL_RCC_OscConfig+0x1a2>
 8009844:	4b3d      	ldr	r3, [pc, #244]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800984c:	4a3b      	ldr	r2, [pc, #236]	; (800993c <HAL_RCC_OscConfig+0x288>)
 800984e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009852:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009854:	e07a      	b.n	800994c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009856:	4b39      	ldr	r3, [pc, #228]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	031b      	lsls	r3, r3, #12
 8009864:	4935      	ldr	r1, [pc, #212]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009866:	4313      	orrs	r3, r2
 8009868:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800986a:	e06f      	b.n	800994c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800986c:	4b33      	ldr	r3, [pc, #204]	; (800993c <HAL_RCC_OscConfig+0x288>)
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	061b      	lsls	r3, r3, #24
 800987a:	4930      	ldr	r1, [pc, #192]	; (800993c <HAL_RCC_OscConfig+0x288>)
 800987c:	4313      	orrs	r3, r2
 800987e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009880:	e064      	b.n	800994c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d045      	beq.n	8009916 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800988a:	4b2c      	ldr	r3, [pc, #176]	; (800993c <HAL_RCC_OscConfig+0x288>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f023 0219 	bic.w	r2, r3, #25
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	4929      	ldr	r1, [pc, #164]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009898:	4313      	orrs	r3, r2
 800989a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800989c:	f7fa fe42 	bl	8004524 <HAL_GetTick>
 80098a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098a2:	e008      	b.n	80098b6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098a4:	f7fa fe3e 	bl	8004524 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d901      	bls.n	80098b6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	e307      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098b6:	4b21      	ldr	r3, [pc, #132]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0f0      	beq.n	80098a4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098c2:	f7fa fe5d 	bl	8004580 <HAL_GetREVID>
 80098c6:	4602      	mov	r2, r0
 80098c8:	f241 0303 	movw	r3, #4099	; 0x1003
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d817      	bhi.n	8009900 <HAL_RCC_OscConfig+0x24c>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	2b40      	cmp	r3, #64	; 0x40
 80098d6:	d108      	bne.n	80098ea <HAL_RCC_OscConfig+0x236>
 80098d8:	4b18      	ldr	r3, [pc, #96]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80098e0:	4a16      	ldr	r2, [pc, #88]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80098e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098e6:	6053      	str	r3, [r2, #4]
 80098e8:	e030      	b.n	800994c <HAL_RCC_OscConfig+0x298>
 80098ea:	4b14      	ldr	r3, [pc, #80]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	031b      	lsls	r3, r3, #12
 80098f8:	4910      	ldr	r1, [pc, #64]	; (800993c <HAL_RCC_OscConfig+0x288>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	604b      	str	r3, [r1, #4]
 80098fe:	e025      	b.n	800994c <HAL_RCC_OscConfig+0x298>
 8009900:	4b0e      	ldr	r3, [pc, #56]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	061b      	lsls	r3, r3, #24
 800990e:	490b      	ldr	r1, [pc, #44]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009910:	4313      	orrs	r3, r2
 8009912:	604b      	str	r3, [r1, #4]
 8009914:	e01a      	b.n	800994c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009916:	4b09      	ldr	r3, [pc, #36]	; (800993c <HAL_RCC_OscConfig+0x288>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a08      	ldr	r2, [pc, #32]	; (800993c <HAL_RCC_OscConfig+0x288>)
 800991c:	f023 0301 	bic.w	r3, r3, #1
 8009920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009922:	f7fa fdff 	bl	8004524 <HAL_GetTick>
 8009926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009928:	e00a      	b.n	8009940 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800992a:	f7fa fdfb 	bl	8004524 <HAL_GetTick>
 800992e:	4602      	mov	r2, r0
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	2b02      	cmp	r3, #2
 8009936:	d903      	bls.n	8009940 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e2c4      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
 800993c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009940:	4ba4      	ldr	r3, [pc, #656]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1ee      	bne.n	800992a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0310 	and.w	r3, r3, #16
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 80a9 	beq.w	8009aac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800995a:	4b9e      	ldr	r3, [pc, #632]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009962:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009964:	4b9b      	ldr	r3, [pc, #620]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009968:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	2b08      	cmp	r3, #8
 800996e:	d007      	beq.n	8009980 <HAL_RCC_OscConfig+0x2cc>
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	2b18      	cmp	r3, #24
 8009974:	d13a      	bne.n	80099ec <HAL_RCC_OscConfig+0x338>
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f003 0303 	and.w	r3, r3, #3
 800997c:	2b01      	cmp	r3, #1
 800997e:	d135      	bne.n	80099ec <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009980:	4b94      	ldr	r3, [pc, #592]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009988:	2b00      	cmp	r3, #0
 800998a:	d005      	beq.n	8009998 <HAL_RCC_OscConfig+0x2e4>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	2b80      	cmp	r3, #128	; 0x80
 8009992:	d001      	beq.n	8009998 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e296      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009998:	f7fa fdf2 	bl	8004580 <HAL_GetREVID>
 800999c:	4602      	mov	r2, r0
 800999e:	f241 0303 	movw	r3, #4099	; 0x1003
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d817      	bhi.n	80099d6 <HAL_RCC_OscConfig+0x322>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	2b20      	cmp	r3, #32
 80099ac:	d108      	bne.n	80099c0 <HAL_RCC_OscConfig+0x30c>
 80099ae:	4b89      	ldr	r3, [pc, #548]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80099b6:	4a87      	ldr	r2, [pc, #540]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 80099b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099be:	e075      	b.n	8009aac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099c0:	4b84      	ldr	r3, [pc, #528]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	069b      	lsls	r3, r3, #26
 80099ce:	4981      	ldr	r1, [pc, #516]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099d4:	e06a      	b.n	8009aac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099d6:	4b7f      	ldr	r3, [pc, #508]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	061b      	lsls	r3, r3, #24
 80099e4:	497b      	ldr	r1, [pc, #492]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099ea:	e05f      	b.n	8009aac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d042      	beq.n	8009a7a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80099f4:	4b77      	ldr	r3, [pc, #476]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a76      	ldr	r2, [pc, #472]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 80099fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a00:	f7fa fd90 	bl	8004524 <HAL_GetTick>
 8009a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a06:	e008      	b.n	8009a1a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009a08:	f7fa fd8c 	bl	8004524 <HAL_GetTick>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d901      	bls.n	8009a1a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e255      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a1a:	4b6e      	ldr	r3, [pc, #440]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0f0      	beq.n	8009a08 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a26:	f7fa fdab 	bl	8004580 <HAL_GetREVID>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	f241 0303 	movw	r3, #4099	; 0x1003
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d817      	bhi.n	8009a64 <HAL_RCC_OscConfig+0x3b0>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	2b20      	cmp	r3, #32
 8009a3a:	d108      	bne.n	8009a4e <HAL_RCC_OscConfig+0x39a>
 8009a3c:	4b65      	ldr	r3, [pc, #404]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a44:	4a63      	ldr	r2, [pc, #396]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009a46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a4a:	6053      	str	r3, [r2, #4]
 8009a4c:	e02e      	b.n	8009aac <HAL_RCC_OscConfig+0x3f8>
 8009a4e:	4b61      	ldr	r3, [pc, #388]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	069b      	lsls	r3, r3, #26
 8009a5c:	495d      	ldr	r1, [pc, #372]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	604b      	str	r3, [r1, #4]
 8009a62:	e023      	b.n	8009aac <HAL_RCC_OscConfig+0x3f8>
 8009a64:	4b5b      	ldr	r3, [pc, #364]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	061b      	lsls	r3, r3, #24
 8009a72:	4958      	ldr	r1, [pc, #352]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	60cb      	str	r3, [r1, #12]
 8009a78:	e018      	b.n	8009aac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009a7a:	4b56      	ldr	r3, [pc, #344]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a55      	ldr	r2, [pc, #340]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a86:	f7fa fd4d 	bl	8004524 <HAL_GetTick>
 8009a8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a8c:	e008      	b.n	8009aa0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009a8e:	f7fa fd49 	bl	8004524 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d901      	bls.n	8009aa0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e212      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009aa0:	4b4c      	ldr	r3, [pc, #304]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1f0      	bne.n	8009a8e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d036      	beq.n	8009b26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d019      	beq.n	8009af4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ac0:	4b44      	ldr	r3, [pc, #272]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ac4:	4a43      	ldr	r2, [pc, #268]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009ac6:	f043 0301 	orr.w	r3, r3, #1
 8009aca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009acc:	f7fa fd2a 	bl	8004524 <HAL_GetTick>
 8009ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ad2:	e008      	b.n	8009ae6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ad4:	f7fa fd26 	bl	8004524 <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d901      	bls.n	8009ae6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e1ef      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ae6:	4b3b      	ldr	r3, [pc, #236]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aea:	f003 0302 	and.w	r3, r3, #2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0f0      	beq.n	8009ad4 <HAL_RCC_OscConfig+0x420>
 8009af2:	e018      	b.n	8009b26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009af4:	4b37      	ldr	r3, [pc, #220]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009af8:	4a36      	ldr	r2, [pc, #216]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009afa:	f023 0301 	bic.w	r3, r3, #1
 8009afe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b00:	f7fa fd10 	bl	8004524 <HAL_GetTick>
 8009b04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b06:	e008      	b.n	8009b1a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b08:	f7fa fd0c 	bl	8004524 <HAL_GetTick>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d901      	bls.n	8009b1a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e1d5      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b1a:	4b2e      	ldr	r3, [pc, #184]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1f0      	bne.n	8009b08 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0320 	and.w	r3, r3, #32
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d036      	beq.n	8009ba0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d019      	beq.n	8009b6e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009b3a:	4b26      	ldr	r3, [pc, #152]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a25      	ldr	r2, [pc, #148]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b46:	f7fa fced 	bl	8004524 <HAL_GetTick>
 8009b4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b4c:	e008      	b.n	8009b60 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009b4e:	f7fa fce9 	bl	8004524 <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d901      	bls.n	8009b60 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e1b2      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b60:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0f0      	beq.n	8009b4e <HAL_RCC_OscConfig+0x49a>
 8009b6c:	e018      	b.n	8009ba0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009b6e:	4b19      	ldr	r3, [pc, #100]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a18      	ldr	r2, [pc, #96]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b7a:	f7fa fcd3 	bl	8004524 <HAL_GetTick>
 8009b7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b80:	e008      	b.n	8009b94 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009b82:	f7fa fccf 	bl	8004524 <HAL_GetTick>
 8009b86:	4602      	mov	r2, r0
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d901      	bls.n	8009b94 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e198      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b94:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <HAL_RCC_OscConfig+0x520>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1f0      	bne.n	8009b82 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0304 	and.w	r3, r3, #4
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 8085 	beq.w	8009cb8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009bae:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <HAL_RCC_OscConfig+0x524>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a09      	ldr	r2, [pc, #36]	; (8009bd8 <HAL_RCC_OscConfig+0x524>)
 8009bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bba:	f7fa fcb3 	bl	8004524 <HAL_GetTick>
 8009bbe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bc0:	e00c      	b.n	8009bdc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009bc2:	f7fa fcaf 	bl	8004524 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	2b64      	cmp	r3, #100	; 0x64
 8009bce:	d905      	bls.n	8009bdc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e178      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bdc:	4b96      	ldr	r3, [pc, #600]	; (8009e38 <HAL_RCC_OscConfig+0x784>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0ec      	beq.n	8009bc2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d106      	bne.n	8009bfe <HAL_RCC_OscConfig+0x54a>
 8009bf0:	4b92      	ldr	r3, [pc, #584]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf4:	4a91      	ldr	r2, [pc, #580]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009bf6:	f043 0301 	orr.w	r3, r3, #1
 8009bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8009bfc:	e02d      	b.n	8009c5a <HAL_RCC_OscConfig+0x5a6>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10c      	bne.n	8009c20 <HAL_RCC_OscConfig+0x56c>
 8009c06:	4b8d      	ldr	r3, [pc, #564]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0a:	4a8c      	ldr	r2, [pc, #560]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c0c:	f023 0301 	bic.w	r3, r3, #1
 8009c10:	6713      	str	r3, [r2, #112]	; 0x70
 8009c12:	4b8a      	ldr	r3, [pc, #552]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	4a89      	ldr	r2, [pc, #548]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c18:	f023 0304 	bic.w	r3, r3, #4
 8009c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c1e:	e01c      	b.n	8009c5a <HAL_RCC_OscConfig+0x5a6>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	2b05      	cmp	r3, #5
 8009c26:	d10c      	bne.n	8009c42 <HAL_RCC_OscConfig+0x58e>
 8009c28:	4b84      	ldr	r3, [pc, #528]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2c:	4a83      	ldr	r2, [pc, #524]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c2e:	f043 0304 	orr.w	r3, r3, #4
 8009c32:	6713      	str	r3, [r2, #112]	; 0x70
 8009c34:	4b81      	ldr	r3, [pc, #516]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c38:	4a80      	ldr	r2, [pc, #512]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c3a:	f043 0301 	orr.w	r3, r3, #1
 8009c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c40:	e00b      	b.n	8009c5a <HAL_RCC_OscConfig+0x5a6>
 8009c42:	4b7e      	ldr	r3, [pc, #504]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c46:	4a7d      	ldr	r2, [pc, #500]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c48:	f023 0301 	bic.w	r3, r3, #1
 8009c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c4e:	4b7b      	ldr	r3, [pc, #492]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c52:	4a7a      	ldr	r2, [pc, #488]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c54:	f023 0304 	bic.w	r3, r3, #4
 8009c58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d015      	beq.n	8009c8e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c62:	f7fa fc5f 	bl	8004524 <HAL_GetTick>
 8009c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c68:	e00a      	b.n	8009c80 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c6a:	f7fa fc5b 	bl	8004524 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d901      	bls.n	8009c80 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e122      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c80:	4b6e      	ldr	r3, [pc, #440]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c84:	f003 0302 	and.w	r3, r3, #2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d0ee      	beq.n	8009c6a <HAL_RCC_OscConfig+0x5b6>
 8009c8c:	e014      	b.n	8009cb8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c8e:	f7fa fc49 	bl	8004524 <HAL_GetTick>
 8009c92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c94:	e00a      	b.n	8009cac <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c96:	f7fa fc45 	bl	8004524 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d901      	bls.n	8009cac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e10c      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cac:	4b63      	ldr	r3, [pc, #396]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb0:	f003 0302 	and.w	r3, r3, #2
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1ee      	bne.n	8009c96 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 8101 	beq.w	8009ec4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009cc2:	4b5e      	ldr	r3, [pc, #376]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cca:	2b18      	cmp	r3, #24
 8009ccc:	f000 80bc 	beq.w	8009e48 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	f040 8095 	bne.w	8009e04 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cda:	4b58      	ldr	r3, [pc, #352]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a57      	ldr	r2, [pc, #348]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ce6:	f7fa fc1d 	bl	8004524 <HAL_GetTick>
 8009cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cec:	e008      	b.n	8009d00 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cee:	f7fa fc19 	bl	8004524 <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d901      	bls.n	8009d00 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e0e2      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d00:	4b4e      	ldr	r3, [pc, #312]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1f0      	bne.n	8009cee <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d0c:	4b4b      	ldr	r3, [pc, #300]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d10:	4b4b      	ldr	r3, [pc, #300]	; (8009e40 <HAL_RCC_OscConfig+0x78c>)
 8009d12:	4013      	ands	r3, r2
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d1c:	0112      	lsls	r2, r2, #4
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	4946      	ldr	r1, [pc, #280]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d22:	4313      	orrs	r3, r2
 8009d24:	628b      	str	r3, [r1, #40]	; 0x28
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d34:	3b01      	subs	r3, #1
 8009d36:	025b      	lsls	r3, r3, #9
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	431a      	orrs	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	3b01      	subs	r3, #1
 8009d42:	041b      	lsls	r3, r3, #16
 8009d44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	061b      	lsls	r3, r3, #24
 8009d52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d56:	4939      	ldr	r1, [pc, #228]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009d5c:	4b37      	ldr	r3, [pc, #220]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d60:	4a36      	ldr	r2, [pc, #216]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d62:	f023 0301 	bic.w	r3, r3, #1
 8009d66:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d68:	4b34      	ldr	r3, [pc, #208]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d6c:	4b35      	ldr	r3, [pc, #212]	; (8009e44 <HAL_RCC_OscConfig+0x790>)
 8009d6e:	4013      	ands	r3, r2
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d74:	00d2      	lsls	r2, r2, #3
 8009d76:	4931      	ldr	r1, [pc, #196]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009d7c:	4b2f      	ldr	r3, [pc, #188]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	f023 020c 	bic.w	r2, r3, #12
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d88:	492c      	ldr	r1, [pc, #176]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009d8e:	4b2b      	ldr	r3, [pc, #172]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d92:	f023 0202 	bic.w	r2, r3, #2
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d9a:	4928      	ldr	r1, [pc, #160]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009da0:	4b26      	ldr	r3, [pc, #152]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	4a25      	ldr	r2, [pc, #148]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009daa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dac:	4b23      	ldr	r3, [pc, #140]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db0:	4a22      	ldr	r2, [pc, #136]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009db6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009db8:	4b20      	ldr	r3, [pc, #128]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	4a1f      	ldr	r2, [pc, #124]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009dbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009dc4:	4b1d      	ldr	r3, [pc, #116]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc8:	4a1c      	ldr	r2, [pc, #112]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009dca:	f043 0301 	orr.w	r3, r3, #1
 8009dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009dd0:	4b1a      	ldr	r3, [pc, #104]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a19      	ldr	r2, [pc, #100]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ddc:	f7fa fba2 	bl	8004524 <HAL_GetTick>
 8009de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009de2:	e008      	b.n	8009df6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009de4:	f7fa fb9e 	bl	8004524 <HAL_GetTick>
 8009de8:	4602      	mov	r2, r0
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d901      	bls.n	8009df6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e067      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009df6:	4b11      	ldr	r3, [pc, #68]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0f0      	beq.n	8009de4 <HAL_RCC_OscConfig+0x730>
 8009e02:	e05f      	b.n	8009ec4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e04:	4b0d      	ldr	r3, [pc, #52]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a0c      	ldr	r2, [pc, #48]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e10:	f7fa fb88 	bl	8004524 <HAL_GetTick>
 8009e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e16:	e008      	b.n	8009e2a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e18:	f7fa fb84 	bl	8004524 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d901      	bls.n	8009e2a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e04d      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e2a:	4b04      	ldr	r3, [pc, #16]	; (8009e3c <HAL_RCC_OscConfig+0x788>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1f0      	bne.n	8009e18 <HAL_RCC_OscConfig+0x764>
 8009e36:	e045      	b.n	8009ec4 <HAL_RCC_OscConfig+0x810>
 8009e38:	58024800 	.word	0x58024800
 8009e3c:	58024400 	.word	0x58024400
 8009e40:	fffffc0c 	.word	0xfffffc0c
 8009e44:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e48:	4b21      	ldr	r3, [pc, #132]	; (8009ed0 <HAL_RCC_OscConfig+0x81c>)
 8009e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e4e:	4b20      	ldr	r3, [pc, #128]	; (8009ed0 <HAL_RCC_OscConfig+0x81c>)
 8009e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e52:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d031      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	f003 0203 	and.w	r2, r3, #3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d12a      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	091b      	lsrs	r3, r3, #4
 8009e6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d122      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e84:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d11a      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	0a5b      	lsrs	r3, r3, #9
 8009e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e96:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d111      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	0c1b      	lsrs	r3, r3, #16
 8009ea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d108      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	0e1b      	lsrs	r3, r3, #24
 8009eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d001      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e000      	b.n	8009ec6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3730      	adds	r7, #48	; 0x30
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	58024400 	.word	0x58024400

08009ed4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e19c      	b.n	800a222 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ee8:	4b8a      	ldr	r3, [pc, #552]	; (800a114 <HAL_RCC_ClockConfig+0x240>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 030f 	and.w	r3, r3, #15
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d910      	bls.n	8009f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ef6:	4b87      	ldr	r3, [pc, #540]	; (800a114 <HAL_RCC_ClockConfig+0x240>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f023 020f 	bic.w	r2, r3, #15
 8009efe:	4985      	ldr	r1, [pc, #532]	; (800a114 <HAL_RCC_ClockConfig+0x240>)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f06:	4b83      	ldr	r3, [pc, #524]	; (800a114 <HAL_RCC_ClockConfig+0x240>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 030f 	and.w	r3, r3, #15
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d001      	beq.n	8009f18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e184      	b.n	800a222 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0304 	and.w	r3, r3, #4
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d010      	beq.n	8009f46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691a      	ldr	r2, [r3, #16]
 8009f28:	4b7b      	ldr	r3, [pc, #492]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d908      	bls.n	8009f46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009f34:	4b78      	ldr	r3, [pc, #480]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	4975      	ldr	r1, [pc, #468]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0308 	and.w	r3, r3, #8
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d010      	beq.n	8009f74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	695a      	ldr	r2, [r3, #20]
 8009f56:	4b70      	ldr	r3, [pc, #448]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d908      	bls.n	8009f74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f62:	4b6d      	ldr	r3, [pc, #436]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009f64:	69db      	ldr	r3, [r3, #28]
 8009f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	496a      	ldr	r1, [pc, #424]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d010      	beq.n	8009fa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	699a      	ldr	r2, [r3, #24]
 8009f84:	4b64      	ldr	r3, [pc, #400]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009f86:	69db      	ldr	r3, [r3, #28]
 8009f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d908      	bls.n	8009fa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f90:	4b61      	ldr	r3, [pc, #388]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	495e      	ldr	r1, [pc, #376]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 0320 	and.w	r3, r3, #32
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d010      	beq.n	8009fd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	69da      	ldr	r2, [r3, #28]
 8009fb2:	4b59      	ldr	r3, [pc, #356]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d908      	bls.n	8009fd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009fbe:	4b56      	ldr	r3, [pc, #344]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	4953      	ldr	r1, [pc, #332]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0302 	and.w	r3, r3, #2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d010      	beq.n	8009ffe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68da      	ldr	r2, [r3, #12]
 8009fe0:	4b4d      	ldr	r3, [pc, #308]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	f003 030f 	and.w	r3, r3, #15
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d908      	bls.n	8009ffe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fec:	4b4a      	ldr	r3, [pc, #296]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	f023 020f 	bic.w	r2, r3, #15
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	4947      	ldr	r1, [pc, #284]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	d055      	beq.n	800a0b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a00a:	4b43      	ldr	r3, [pc, #268]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	4940      	ldr	r1, [pc, #256]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	2b02      	cmp	r3, #2
 800a022:	d107      	bne.n	800a034 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a024:	4b3c      	ldr	r3, [pc, #240]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d121      	bne.n	800a074 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e0f6      	b.n	800a222 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d107      	bne.n	800a04c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a03c:	4b36      	ldr	r3, [pc, #216]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d115      	bne.n	800a074 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e0ea      	b.n	800a222 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d107      	bne.n	800a064 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a054:	4b30      	ldr	r3, [pc, #192]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d109      	bne.n	800a074 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	e0de      	b.n	800a222 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a064:	4b2c      	ldr	r3, [pc, #176]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0304 	and.w	r3, r3, #4
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e0d6      	b.n	800a222 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a074:	4b28      	ldr	r3, [pc, #160]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	f023 0207 	bic.w	r2, r3, #7
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	4925      	ldr	r1, [pc, #148]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a082:	4313      	orrs	r3, r2
 800a084:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a086:	f7fa fa4d 	bl	8004524 <HAL_GetTick>
 800a08a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a08c:	e00a      	b.n	800a0a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a08e:	f7fa fa49 	bl	8004524 <HAL_GetTick>
 800a092:	4602      	mov	r2, r0
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	f241 3288 	movw	r2, #5000	; 0x1388
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d901      	bls.n	800a0a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e0be      	b.n	800a222 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0a4:	4b1c      	ldr	r3, [pc, #112]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	00db      	lsls	r3, r3, #3
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d1eb      	bne.n	800a08e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d010      	beq.n	800a0e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68da      	ldr	r2, [r3, #12]
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	f003 030f 	and.w	r3, r3, #15
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d208      	bcs.n	800a0e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0d2:	4b11      	ldr	r3, [pc, #68]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	f023 020f 	bic.w	r2, r3, #15
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	490e      	ldr	r1, [pc, #56]	; (800a118 <HAL_RCC_ClockConfig+0x244>)
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a0e4:	4b0b      	ldr	r3, [pc, #44]	; (800a114 <HAL_RCC_ClockConfig+0x240>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 030f 	and.w	r3, r3, #15
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d214      	bcs.n	800a11c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0f2:	4b08      	ldr	r3, [pc, #32]	; (800a114 <HAL_RCC_ClockConfig+0x240>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f023 020f 	bic.w	r2, r3, #15
 800a0fa:	4906      	ldr	r1, [pc, #24]	; (800a114 <HAL_RCC_ClockConfig+0x240>)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a102:	4b04      	ldr	r3, [pc, #16]	; (800a114 <HAL_RCC_ClockConfig+0x240>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 030f 	and.w	r3, r3, #15
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d005      	beq.n	800a11c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e086      	b.n	800a222 <HAL_RCC_ClockConfig+0x34e>
 800a114:	52002000 	.word	0x52002000
 800a118:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b00      	cmp	r3, #0
 800a126:	d010      	beq.n	800a14a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	4b3f      	ldr	r3, [pc, #252]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a134:	429a      	cmp	r2, r3
 800a136:	d208      	bcs.n	800a14a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a138:	4b3c      	ldr	r3, [pc, #240]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	4939      	ldr	r1, [pc, #228]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a146:	4313      	orrs	r3, r2
 800a148:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0308 	and.w	r3, r3, #8
 800a152:	2b00      	cmp	r3, #0
 800a154:	d010      	beq.n	800a178 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	695a      	ldr	r2, [r3, #20]
 800a15a:	4b34      	ldr	r3, [pc, #208]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a162:	429a      	cmp	r2, r3
 800a164:	d208      	bcs.n	800a178 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a166:	4b31      	ldr	r3, [pc, #196]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a168:	69db      	ldr	r3, [r3, #28]
 800a16a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	492e      	ldr	r1, [pc, #184]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a174:	4313      	orrs	r3, r2
 800a176:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0310 	and.w	r3, r3, #16
 800a180:	2b00      	cmp	r3, #0
 800a182:	d010      	beq.n	800a1a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	699a      	ldr	r2, [r3, #24]
 800a188:	4b28      	ldr	r3, [pc, #160]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a18a:	69db      	ldr	r3, [r3, #28]
 800a18c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a190:	429a      	cmp	r2, r3
 800a192:	d208      	bcs.n	800a1a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a194:	4b25      	ldr	r3, [pc, #148]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	4922      	ldr	r1, [pc, #136]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0320 	and.w	r3, r3, #32
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d010      	beq.n	800a1d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	69da      	ldr	r2, [r3, #28]
 800a1b6:	4b1d      	ldr	r3, [pc, #116]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d208      	bcs.n	800a1d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a1c2:	4b1a      	ldr	r3, [pc, #104]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	4917      	ldr	r1, [pc, #92]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a1d4:	f000 f844 	bl	800a260 <HAL_RCC_GetSysClockFreq>
 800a1d8:	4601      	mov	r1, r0
 800a1da:	4b14      	ldr	r3, [pc, #80]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	0a1b      	lsrs	r3, r3, #8
 800a1e0:	f003 030f 	and.w	r3, r3, #15
 800a1e4:	4a12      	ldr	r2, [pc, #72]	; (800a230 <HAL_RCC_ClockConfig+0x35c>)
 800a1e6:	5cd3      	ldrb	r3, [r2, r3]
 800a1e8:	f003 031f 	and.w	r3, r3, #31
 800a1ec:	fa21 f303 	lsr.w	r3, r1, r3
 800a1f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1f2:	4b0e      	ldr	r3, [pc, #56]	; (800a22c <HAL_RCC_ClockConfig+0x358>)
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	4a0d      	ldr	r2, [pc, #52]	; (800a230 <HAL_RCC_ClockConfig+0x35c>)
 800a1fc:	5cd3      	ldrb	r3, [r2, r3]
 800a1fe:	f003 031f 	and.w	r3, r3, #31
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	fa22 f303 	lsr.w	r3, r2, r3
 800a208:	4a0a      	ldr	r2, [pc, #40]	; (800a234 <HAL_RCC_ClockConfig+0x360>)
 800a20a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a20c:	4a0a      	ldr	r2, [pc, #40]	; (800a238 <HAL_RCC_ClockConfig+0x364>)
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a212:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <HAL_RCC_ClockConfig+0x368>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4618      	mov	r0, r3
 800a218:	f7fa f93a 	bl	8004490 <HAL_InitTick>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a220:	7bfb      	ldrb	r3, [r7, #15]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	58024400 	.word	0x58024400
 800a230:	0801ae90 	.word	0x0801ae90
 800a234:	24000014 	.word	0x24000014
 800a238:	24000010 	.word	0x24000010
 800a23c:	24000018 	.word	0x24000018

0800a240 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <HAL_RCC_EnableCSS+0x1c>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a04      	ldr	r2, [pc, #16]	; (800a25c <HAL_RCC_EnableCSS+0x1c>)
 800a24a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a24e:	6013      	str	r3, [r2, #0]
}
 800a250:	bf00      	nop
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	58024400 	.word	0x58024400

0800a260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a260:	b480      	push	{r7}
 800a262:	b089      	sub	sp, #36	; 0x24
 800a264:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a266:	4baf      	ldr	r3, [pc, #700]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a26e:	2b18      	cmp	r3, #24
 800a270:	f200 814e 	bhi.w	800a510 <HAL_RCC_GetSysClockFreq+0x2b0>
 800a274:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <HAL_RCC_GetSysClockFreq+0x1c>)
 800a276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27a:	bf00      	nop
 800a27c:	0800a2e1 	.word	0x0800a2e1
 800a280:	0800a511 	.word	0x0800a511
 800a284:	0800a511 	.word	0x0800a511
 800a288:	0800a511 	.word	0x0800a511
 800a28c:	0800a511 	.word	0x0800a511
 800a290:	0800a511 	.word	0x0800a511
 800a294:	0800a511 	.word	0x0800a511
 800a298:	0800a511 	.word	0x0800a511
 800a29c:	0800a307 	.word	0x0800a307
 800a2a0:	0800a511 	.word	0x0800a511
 800a2a4:	0800a511 	.word	0x0800a511
 800a2a8:	0800a511 	.word	0x0800a511
 800a2ac:	0800a511 	.word	0x0800a511
 800a2b0:	0800a511 	.word	0x0800a511
 800a2b4:	0800a511 	.word	0x0800a511
 800a2b8:	0800a511 	.word	0x0800a511
 800a2bc:	0800a30d 	.word	0x0800a30d
 800a2c0:	0800a511 	.word	0x0800a511
 800a2c4:	0800a511 	.word	0x0800a511
 800a2c8:	0800a511 	.word	0x0800a511
 800a2cc:	0800a511 	.word	0x0800a511
 800a2d0:	0800a511 	.word	0x0800a511
 800a2d4:	0800a511 	.word	0x0800a511
 800a2d8:	0800a511 	.word	0x0800a511
 800a2dc:	0800a313 	.word	0x0800a313
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2e0:	4b90      	ldr	r3, [pc, #576]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0320 	and.w	r3, r3, #32
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d009      	beq.n	800a300 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2ec:	4b8d      	ldr	r3, [pc, #564]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	08db      	lsrs	r3, r3, #3
 800a2f2:	f003 0303 	and.w	r3, r3, #3
 800a2f6:	4a8c      	ldr	r2, [pc, #560]	; (800a528 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a2f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a2fe:	e10a      	b.n	800a516 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a300:	4b89      	ldr	r3, [pc, #548]	; (800a528 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a302:	61bb      	str	r3, [r7, #24]
    break;
 800a304:	e107      	b.n	800a516 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a306:	4b89      	ldr	r3, [pc, #548]	; (800a52c <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a308:	61bb      	str	r3, [r7, #24]
    break;
 800a30a:	e104      	b.n	800a516 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a30c:	4b88      	ldr	r3, [pc, #544]	; (800a530 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800a30e:	61bb      	str	r3, [r7, #24]
    break;
 800a310:	e101      	b.n	800a516 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a312:	4b84      	ldr	r3, [pc, #528]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a316:	f003 0303 	and.w	r3, r3, #3
 800a31a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a31c:	4b81      	ldr	r3, [pc, #516]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a320:	091b      	lsrs	r3, r3, #4
 800a322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a326:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a328:	4b7e      	ldr	r3, [pc, #504]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32c:	f003 0301 	and.w	r3, r3, #1
 800a330:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a332:	4b7c      	ldr	r3, [pc, #496]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a336:	08db      	lsrs	r3, r3, #3
 800a338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	fb02 f303 	mul.w	r3, r2, r3
 800a342:	ee07 3a90 	vmov	s15, r3
 800a346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 80da 	beq.w	800a50a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d05a      	beq.n	800a412 <HAL_RCC_GetSysClockFreq+0x1b2>
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d302      	bcc.n	800a366 <HAL_RCC_GetSysClockFreq+0x106>
 800a360:	2b02      	cmp	r3, #2
 800a362:	d078      	beq.n	800a456 <HAL_RCC_GetSysClockFreq+0x1f6>
 800a364:	e099      	b.n	800a49a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a366:	4b6f      	ldr	r3, [pc, #444]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0320 	and.w	r3, r3, #32
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d02d      	beq.n	800a3ce <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a372:	4b6c      	ldr	r3, [pc, #432]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	08db      	lsrs	r3, r3, #3
 800a378:	f003 0303 	and.w	r3, r3, #3
 800a37c:	4a6a      	ldr	r2, [pc, #424]	; (800a528 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a37e:	fa22 f303 	lsr.w	r3, r2, r3
 800a382:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	ee07 3a90 	vmov	s15, r3
 800a38a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	ee07 3a90 	vmov	s15, r3
 800a394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a39c:	4b61      	ldr	r3, [pc, #388]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a4:	ee07 3a90 	vmov	s15, r3
 800a3a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ac:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3b0:	eddf 5a60 	vldr	s11, [pc, #384]	; 800a534 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a3b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a3cc:	e087      	b.n	800a4de <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	ee07 3a90 	vmov	s15, r3
 800a3d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d8:	eddf 6a57 	vldr	s13, [pc, #348]	; 800a538 <HAL_RCC_GetSysClockFreq+0x2d8>
 800a3dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3e0:	4b50      	ldr	r3, [pc, #320]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e8:	ee07 3a90 	vmov	s15, r3
 800a3ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3f0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3f4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800a534 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a3f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a400:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a404:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a40c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a410:	e065      	b.n	800a4de <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	ee07 3a90 	vmov	s15, r3
 800a418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a41c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a53c <HAL_RCC_GetSysClockFreq+0x2dc>
 800a420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a424:	4b3f      	ldr	r3, [pc, #252]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a42c:	ee07 3a90 	vmov	s15, r3
 800a430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a434:	ed97 6a02 	vldr	s12, [r7, #8]
 800a438:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a534 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a43c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a44c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a450:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a454:	e043      	b.n	800a4de <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	ee07 3a90 	vmov	s15, r3
 800a45c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a460:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a540 <HAL_RCC_GetSysClockFreq+0x2e0>
 800a464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a468:	4b2e      	ldr	r3, [pc, #184]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a470:	ee07 3a90 	vmov	s15, r3
 800a474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a478:	ed97 6a02 	vldr	s12, [r7, #8]
 800a47c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800a534 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a48c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a490:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a494:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a498:	e021      	b.n	800a4de <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	ee07 3a90 	vmov	s15, r3
 800a4a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4a4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a53c <HAL_RCC_GetSysClockFreq+0x2dc>
 800a4a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ac:	4b1d      	ldr	r3, [pc, #116]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4b4:	ee07 3a90 	vmov	s15, r3
 800a4b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4bc:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4c0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800a534 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a4c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4dc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a4de:	4b11      	ldr	r3, [pc, #68]	; (800a524 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e2:	0a5b      	lsrs	r3, r3, #9
 800a4e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	ee07 3a90 	vmov	s15, r3
 800a4f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a4f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a502:	ee17 3a90 	vmov	r3, s15
 800a506:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a508:	e005      	b.n	800a516 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	61bb      	str	r3, [r7, #24]
    break;
 800a50e:	e002      	b.n	800a516 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800a510:	4b06      	ldr	r3, [pc, #24]	; (800a52c <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a512:	61bb      	str	r3, [r7, #24]
    break;
 800a514:	bf00      	nop
  }

  return sysclockfreq;
 800a516:	69bb      	ldr	r3, [r7, #24]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3724      	adds	r7, #36	; 0x24
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	58024400 	.word	0x58024400
 800a528:	03d09000 	.word	0x03d09000
 800a52c:	003d0900 	.word	0x003d0900
 800a530:	017d7840 	.word	0x017d7840
 800a534:	46000000 	.word	0x46000000
 800a538:	4c742400 	.word	0x4c742400
 800a53c:	4a742400 	.word	0x4a742400
 800a540:	4bbebc20 	.word	0x4bbebc20

0800a544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a54a:	f7ff fe89 	bl	800a260 <HAL_RCC_GetSysClockFreq>
 800a54e:	4601      	mov	r1, r0
 800a550:	4b10      	ldr	r3, [pc, #64]	; (800a594 <HAL_RCC_GetHCLKFreq+0x50>)
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	0a1b      	lsrs	r3, r3, #8
 800a556:	f003 030f 	and.w	r3, r3, #15
 800a55a:	4a0f      	ldr	r2, [pc, #60]	; (800a598 <HAL_RCC_GetHCLKFreq+0x54>)
 800a55c:	5cd3      	ldrb	r3, [r2, r3]
 800a55e:	f003 031f 	and.w	r3, r3, #31
 800a562:	fa21 f303 	lsr.w	r3, r1, r3
 800a566:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a568:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <HAL_RCC_GetHCLKFreq+0x50>)
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	f003 030f 	and.w	r3, r3, #15
 800a570:	4a09      	ldr	r2, [pc, #36]	; (800a598 <HAL_RCC_GetHCLKFreq+0x54>)
 800a572:	5cd3      	ldrb	r3, [r2, r3]
 800a574:	f003 031f 	and.w	r3, r3, #31
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	fa22 f303 	lsr.w	r3, r2, r3
 800a57e:	4a07      	ldr	r2, [pc, #28]	; (800a59c <HAL_RCC_GetHCLKFreq+0x58>)
 800a580:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a582:	4a07      	ldr	r2, [pc, #28]	; (800a5a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a588:	4b04      	ldr	r3, [pc, #16]	; (800a59c <HAL_RCC_GetHCLKFreq+0x58>)
 800a58a:	681b      	ldr	r3, [r3, #0]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	58024400 	.word	0x58024400
 800a598:	0801ae90 	.word	0x0801ae90
 800a59c:	24000014 	.word	0x24000014
 800a5a0:	24000010 	.word	0x24000010

0800a5a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a5a8:	f7ff ffcc 	bl	800a544 <HAL_RCC_GetHCLKFreq>
 800a5ac:	4601      	mov	r1, r0
 800a5ae:	4b06      	ldr	r3, [pc, #24]	; (800a5c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	091b      	lsrs	r3, r3, #4
 800a5b4:	f003 0307 	and.w	r3, r3, #7
 800a5b8:	4a04      	ldr	r2, [pc, #16]	; (800a5cc <HAL_RCC_GetPCLK1Freq+0x28>)
 800a5ba:	5cd3      	ldrb	r3, [r2, r3]
 800a5bc:	f003 031f 	and.w	r3, r3, #31
 800a5c0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	58024400 	.word	0x58024400
 800a5cc:	0801ae90 	.word	0x0801ae90

0800a5d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a5d4:	f7ff ffb6 	bl	800a544 <HAL_RCC_GetHCLKFreq>
 800a5d8:	4601      	mov	r1, r0
 800a5da:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	0a1b      	lsrs	r3, r3, #8
 800a5e0:	f003 0307 	and.w	r3, r3, #7
 800a5e4:	4a04      	ldr	r2, [pc, #16]	; (800a5f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a5e6:	5cd3      	ldrb	r3, [r2, r3]
 800a5e8:	f003 031f 	and.w	r3, r3, #31
 800a5ec:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	58024400 	.word	0x58024400
 800a5f8:	0801ae90 	.word	0x0801ae90

0800a5fc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a600:	4b07      	ldr	r3, [pc, #28]	; (800a620 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a60c:	d105      	bne.n	800a61a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800a60e:	f000 f809 	bl	800a624 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a612:	4b03      	ldr	r3, [pc, #12]	; (800a620 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a618:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a61a:	bf00      	nop
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	58024400 	.word	0x58024400

0800a624 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800a624:	b480      	push	{r7}
 800a626:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800a628:	bf00      	nop
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
	...

0800a634 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a63c:	2300      	movs	r3, #0
 800a63e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a640:	2300      	movs	r3, #0
 800a642:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d03d      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a658:	d013      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a65a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a65e:	d802      	bhi.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800a660:	2b00      	cmp	r3, #0
 800a662:	d007      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a664:	e01f      	b.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800a666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a66a:	d013      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800a66c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a670:	d01c      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a672:	e018      	b.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a674:	4baf      	ldr	r3, [pc, #700]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a678:	4aae      	ldr	r2, [pc, #696]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a67a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a67e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a680:	e015      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	3304      	adds	r3, #4
 800a686:	2102      	movs	r1, #2
 800a688:	4618      	mov	r0, r3
 800a68a:	f001 fd33 	bl	800c0f4 <RCCEx_PLL2_Config>
 800a68e:	4603      	mov	r3, r0
 800a690:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a692:	e00c      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3324      	adds	r3, #36	; 0x24
 800a698:	2102      	movs	r1, #2
 800a69a:	4618      	mov	r0, r3
 800a69c:	f001 fddc 	bl	800c258 <RCCEx_PLL3_Config>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a6a4:	e003      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6aa:	e000      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800a6ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a6b4:	4b9f      	ldr	r3, [pc, #636]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6c0:	499c      	ldr	r1, [pc, #624]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	650b      	str	r3, [r1, #80]	; 0x50
 800a6c6:	e001      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6c8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d03d      	beq.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6dc:	2b04      	cmp	r3, #4
 800a6de:	d826      	bhi.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800a6e0:	a201      	add	r2, pc, #4	; (adr r2, 800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800a6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e6:	bf00      	nop
 800a6e8:	0800a6fd 	.word	0x0800a6fd
 800a6ec:	0800a70b 	.word	0x0800a70b
 800a6f0:	0800a71d 	.word	0x0800a71d
 800a6f4:	0800a735 	.word	0x0800a735
 800a6f8:	0800a735 	.word	0x0800a735
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6fc:	4b8d      	ldr	r3, [pc, #564]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a700:	4a8c      	ldr	r2, [pc, #560]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a708:	e015      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	3304      	adds	r3, #4
 800a70e:	2100      	movs	r1, #0
 800a710:	4618      	mov	r0, r3
 800a712:	f001 fcef 	bl	800c0f4 <RCCEx_PLL2_Config>
 800a716:	4603      	mov	r3, r0
 800a718:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a71a:	e00c      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3324      	adds	r3, #36	; 0x24
 800a720:	2100      	movs	r1, #0
 800a722:	4618      	mov	r0, r3
 800a724:	f001 fd98 	bl	800c258 <RCCEx_PLL3_Config>
 800a728:	4603      	mov	r3, r0
 800a72a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a72c:	e003      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	75fb      	strb	r3, [r7, #23]
      break;
 800a732:	e000      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800a734:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a736:	7dfb      	ldrb	r3, [r7, #23]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d109      	bne.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a73c:	4b7d      	ldr	r3, [pc, #500]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a73e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a740:	f023 0207 	bic.w	r2, r3, #7
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a748:	497a      	ldr	r1, [pc, #488]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	650b      	str	r3, [r1, #80]	; 0x50
 800a74e:	e001      	b.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a750:	7dfb      	ldrb	r3, [r7, #23]
 800a752:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d03e      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a764:	2b80      	cmp	r3, #128	; 0x80
 800a766:	d01c      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800a768:	2b80      	cmp	r3, #128	; 0x80
 800a76a:	d804      	bhi.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d008      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a770:	2b40      	cmp	r3, #64	; 0x40
 800a772:	d00d      	beq.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a774:	e01e      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a776:	2bc0      	cmp	r3, #192	; 0xc0
 800a778:	d01f      	beq.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x186>
 800a77a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a77e:	d01e      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a780:	e018      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a782:	4b6c      	ldr	r3, [pc, #432]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a786:	4a6b      	ldr	r2, [pc, #428]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a78c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a78e:	e017      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3304      	adds	r3, #4
 800a794:	2100      	movs	r1, #0
 800a796:	4618      	mov	r0, r3
 800a798:	f001 fcac 	bl	800c0f4 <RCCEx_PLL2_Config>
 800a79c:	4603      	mov	r3, r0
 800a79e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a7a0:	e00e      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	3324      	adds	r3, #36	; 0x24
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f001 fd55 	bl	800c258 <RCCEx_PLL3_Config>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a7b2:	e005      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7b8:	e002      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a7ba:	bf00      	nop
 800a7bc:	e000      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a7be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7c0:	7dfb      	ldrb	r3, [r7, #23]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d109      	bne.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a7c6:	4b5b      	ldr	r3, [pc, #364]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d2:	4958      	ldr	r1, [pc, #352]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	650b      	str	r3, [r1, #80]	; 0x50
 800a7d8:	e001      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d044      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a7f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7f4:	d01f      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a7f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7fa:	d805      	bhi.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00a      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a800:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a804:	d00e      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800a806:	e01f      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800a808:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a80c:	d01f      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800a80e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a812:	d01e      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a814:	e018      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a816:	4b47      	ldr	r3, [pc, #284]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81a:	4a46      	ldr	r2, [pc, #280]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a81c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a822:	e017      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3304      	adds	r3, #4
 800a828:	2100      	movs	r1, #0
 800a82a:	4618      	mov	r0, r3
 800a82c:	f001 fc62 	bl	800c0f4 <RCCEx_PLL2_Config>
 800a830:	4603      	mov	r3, r0
 800a832:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a834:	e00e      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3324      	adds	r3, #36	; 0x24
 800a83a:	2100      	movs	r1, #0
 800a83c:	4618      	mov	r0, r3
 800a83e:	f001 fd0b 	bl	800c258 <RCCEx_PLL3_Config>
 800a842:	4603      	mov	r3, r0
 800a844:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a846:	e005      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	75fb      	strb	r3, [r7, #23]
      break;
 800a84c:	e002      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a84e:	bf00      	nop
 800a850:	e000      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a852:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a854:	7dfb      	ldrb	r3, [r7, #23]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a85a:	4b36      	ldr	r3, [pc, #216]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a85e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a868:	4932      	ldr	r1, [pc, #200]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a86a:	4313      	orrs	r3, r2
 800a86c:	658b      	str	r3, [r1, #88]	; 0x58
 800a86e:	e001      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a870:	7dfb      	ldrb	r3, [r7, #23]
 800a872:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d044      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a88a:	d01f      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a88c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a890:	d805      	bhi.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00a      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x278>
 800a896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a89a:	d00e      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a89c:	e01f      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800a89e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a8a2:	d01f      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a8a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8a8:	d01e      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a8aa:	e018      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8ac:	4b21      	ldr	r3, [pc, #132]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b0:	4a20      	ldr	r2, [pc, #128]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8b8:	e017      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3304      	adds	r3, #4
 800a8be:	2100      	movs	r1, #0
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f001 fc17 	bl	800c0f4 <RCCEx_PLL2_Config>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a8ca:	e00e      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	3324      	adds	r3, #36	; 0x24
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f001 fcc0 	bl	800c258 <RCCEx_PLL3_Config>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8dc:	e005      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a8e2:	e002      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a8e4:	bf00      	nop
 800a8e6:	e000      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a8e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8ea:	7dfb      	ldrb	r3, [r7, #23]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10a      	bne.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a8f0:	4b10      	ldr	r3, [pc, #64]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a8fe:	490d      	ldr	r1, [pc, #52]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a900:	4313      	orrs	r3, r2
 800a902:	658b      	str	r3, [r1, #88]	; 0x58
 800a904:	e001      	b.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a906:	7dfb      	ldrb	r3, [r7, #23]
 800a908:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d035      	beq.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a91a:	2b10      	cmp	r3, #16
 800a91c:	d00c      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800a91e:	2b10      	cmp	r3, #16
 800a920:	d802      	bhi.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800a922:	2b00      	cmp	r3, #0
 800a924:	d01b      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800a926:	e017      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a928:	2b20      	cmp	r3, #32
 800a92a:	d00c      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800a92c:	2b30      	cmp	r3, #48	; 0x30
 800a92e:	d018      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800a930:	e012      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a932:	bf00      	nop
 800a934:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a938:	4baf      	ldr	r3, [pc, #700]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93c:	4aae      	ldr	r2, [pc, #696]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a93e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a944:	e00e      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	3304      	adds	r3, #4
 800a94a:	2102      	movs	r1, #2
 800a94c:	4618      	mov	r0, r3
 800a94e:	f001 fbd1 	bl	800c0f4 <RCCEx_PLL2_Config>
 800a952:	4603      	mov	r3, r0
 800a954:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a956:	e005      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	75fb      	strb	r3, [r7, #23]
      break;
 800a95c:	e002      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a95e:	bf00      	nop
 800a960:	e000      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a962:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a964:	7dfb      	ldrb	r3, [r7, #23]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d109      	bne.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a96a:	4ba3      	ldr	r3, [pc, #652]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a96e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a976:	49a0      	ldr	r1, [pc, #640]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a978:	4313      	orrs	r3, r2
 800a97a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a97c:	e001      	b.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
 800a980:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d042      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a996:	d01f      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800a998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a99c:	d805      	bhi.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00a      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800a9a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9a6:	d00e      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 800a9a8:	e01f      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800a9aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9ae:	d01f      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a9b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9b4:	d01e      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800a9b6:	e018      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9b8:	4b8f      	ldr	r3, [pc, #572]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9bc:	4a8e      	ldr	r2, [pc, #568]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a9c4:	e017      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f001 fb91 	bl	800c0f4 <RCCEx_PLL2_Config>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a9d6:	e00e      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3324      	adds	r3, #36	; 0x24
 800a9dc:	2100      	movs	r1, #0
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f001 fc3a 	bl	800c258 <RCCEx_PLL3_Config>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a9e8:	e005      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ee:	e002      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800a9f0:	bf00      	nop
 800a9f2:	e000      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800a9f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9f6:	7dfb      	ldrb	r3, [r7, #23]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d109      	bne.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a9fc:	4b7e      	ldr	r3, [pc, #504]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa00:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa08:	497b      	ldr	r1, [pc, #492]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	650b      	str	r3, [r1, #80]	; 0x50
 800aa0e:	e001      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa10:	7dfb      	ldrb	r3, [r7, #23]
 800aa12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d042      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa28:	d01b      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800aa2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa2e:	d805      	bhi.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d022      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x446>
 800aa34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa38:	d00a      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800aa3a:	e01b      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800aa3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa40:	d01d      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800aa42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa46:	d01c      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800aa48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa4c:	d01b      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800aa4e:	e011      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	3304      	adds	r3, #4
 800aa54:	2101      	movs	r1, #1
 800aa56:	4618      	mov	r0, r3
 800aa58:	f001 fb4c 	bl	800c0f4 <RCCEx_PLL2_Config>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aa60:	e012      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	3324      	adds	r3, #36	; 0x24
 800aa66:	2101      	movs	r1, #1
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f001 fbf5 	bl	800c258 <RCCEx_PLL3_Config>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aa72:	e009      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	75fb      	strb	r3, [r7, #23]
      break;
 800aa78:	e006      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800aa7a:	bf00      	nop
 800aa7c:	e004      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800aa7e:	bf00      	nop
 800aa80:	e002      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800aa82:	bf00      	nop
 800aa84:	e000      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800aa86:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d109      	bne.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aa8e:	4b5a      	ldr	r3, [pc, #360]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa92:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa9a:	4957      	ldr	r1, [pc, #348]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	650b      	str	r3, [r1, #80]	; 0x50
 800aaa0:	e001      	b.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa2:	7dfb      	ldrb	r3, [r7, #23]
 800aaa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d044      	beq.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aabc:	d01b      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800aabe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aac2:	d805      	bhi.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d022      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800aac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aacc:	d00a      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800aace:	e01b      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800aad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aad4:	d01d      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800aad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aada:	d01c      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800aadc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aae0:	d01b      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800aae2:	e011      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	3304      	adds	r3, #4
 800aae8:	2101      	movs	r1, #1
 800aaea:	4618      	mov	r0, r3
 800aaec:	f001 fb02 	bl	800c0f4 <RCCEx_PLL2_Config>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800aaf4:	e012      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	3324      	adds	r3, #36	; 0x24
 800aafa:	2101      	movs	r1, #1
 800aafc:	4618      	mov	r0, r3
 800aafe:	f001 fbab 	bl	800c258 <RCCEx_PLL3_Config>
 800ab02:	4603      	mov	r3, r0
 800ab04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ab06:	e009      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab0c:	e006      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab0e:	bf00      	nop
 800ab10:	e004      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab12:	bf00      	nop
 800ab14:	e002      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab16:	bf00      	nop
 800ab18:	e000      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab1c:	7dfb      	ldrb	r3, [r7, #23]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ab22:	4b35      	ldr	r3, [pc, #212]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab30:	4931      	ldr	r1, [pc, #196]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab32:	4313      	orrs	r3, r2
 800ab34:	658b      	str	r3, [r1, #88]	; 0x58
 800ab36:	e001      	b.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab38:	7dfb      	ldrb	r3, [r7, #23]
 800ab3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d02d      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab50:	d005      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800ab52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab56:	d009      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x538>
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d013      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800ab5c:	e00f      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab5e:	4b26      	ldr	r3, [pc, #152]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab62:	4a25      	ldr	r2, [pc, #148]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ab6a:	e00c      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	2101      	movs	r1, #1
 800ab72:	4618      	mov	r0, r3
 800ab74:	f001 fabe 	bl	800c0f4 <RCCEx_PLL2_Config>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ab7c:	e003      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	75fb      	strb	r3, [r7, #23]
      break;
 800ab82:	e000      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800ab84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d109      	bne.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ab8c:	4b1a      	ldr	r3, [pc, #104]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab98:	4917      	ldr	r1, [pc, #92]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	650b      	str	r3, [r1, #80]	; 0x50
 800ab9e:	e001      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d035      	beq.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d81b      	bhi.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800abb8:	a201      	add	r2, pc, #4	; (adr r2, 800abc0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800abba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbe:	bf00      	nop
 800abc0:	0800abfd 	.word	0x0800abfd
 800abc4:	0800abd1 	.word	0x0800abd1
 800abc8:	0800abdf 	.word	0x0800abdf
 800abcc:	0800abfd 	.word	0x0800abfd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abd0:	4b09      	ldr	r3, [pc, #36]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd4:	4a08      	ldr	r2, [pc, #32]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800abdc:	e00f      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3304      	adds	r3, #4
 800abe2:	2102      	movs	r1, #2
 800abe4:	4618      	mov	r0, r3
 800abe6:	f001 fa85 	bl	800c0f4 <RCCEx_PLL2_Config>
 800abea:	4603      	mov	r3, r0
 800abec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800abee:	e006      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	75fb      	strb	r3, [r7, #23]
      break;
 800abf4:	e003      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800abf6:	bf00      	nop
 800abf8:	58024400 	.word	0x58024400
      break;
 800abfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d109      	bne.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ac04:	4bba      	ldr	r3, [pc, #744]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac08:	f023 0203 	bic.w	r2, r3, #3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac10:	49b7      	ldr	r1, [pc, #732]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac12:	4313      	orrs	r3, r2
 800ac14:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ac16:	e001      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac18:	7dfb      	ldrb	r3, [r7, #23]
 800ac1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 8086 	beq.w	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac2a:	4bb2      	ldr	r3, [pc, #712]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4ab1      	ldr	r2, [pc, #708]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800ac30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac36:	f7f9 fc75 	bl	8004524 <HAL_GetTick>
 800ac3a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac3c:	e009      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac3e:	f7f9 fc71 	bl	8004524 <HAL_GetTick>
 800ac42:	4602      	mov	r2, r0
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	2b64      	cmp	r3, #100	; 0x64
 800ac4a:	d902      	bls.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	75fb      	strb	r3, [r7, #23]
        break;
 800ac50:	e005      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac52:	4ba8      	ldr	r3, [pc, #672]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d0ef      	beq.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d166      	bne.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ac64:	4ba2      	ldr	r3, [pc, #648]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac6e:	4053      	eors	r3, r2
 800ac70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d013      	beq.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac78:	4b9d      	ldr	r3, [pc, #628]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac80:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ac82:	4b9b      	ldr	r3, [pc, #620]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac86:	4a9a      	ldr	r2, [pc, #616]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ac8e:	4b98      	ldr	r3, [pc, #608]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac92:	4a97      	ldr	r2, [pc, #604]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ac9a:	4a95      	ldr	r2, [pc, #596]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acaa:	d115      	bne.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acac:	f7f9 fc3a 	bl	8004524 <HAL_GetTick>
 800acb0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acb2:	e00b      	b.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acb4:	f7f9 fc36 	bl	8004524 <HAL_GetTick>
 800acb8:	4602      	mov	r2, r0
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d902      	bls.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800acc6:	2303      	movs	r3, #3
 800acc8:	75fb      	strb	r3, [r7, #23]
            break;
 800acca:	e005      	b.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800accc:	4b88      	ldr	r3, [pc, #544]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd0:	f003 0302 	and.w	r3, r3, #2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d0ed      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d126      	bne.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ace4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ace8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acec:	d10d      	bne.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800acee:	4b80      	ldr	r3, [pc, #512]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800acfc:	0919      	lsrs	r1, r3, #4
 800acfe:	4b7e      	ldr	r3, [pc, #504]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ad00:	400b      	ands	r3, r1
 800ad02:	497b      	ldr	r1, [pc, #492]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad04:	4313      	orrs	r3, r2
 800ad06:	610b      	str	r3, [r1, #16]
 800ad08:	e005      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800ad0a:	4b79      	ldr	r3, [pc, #484]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	4a78      	ldr	r2, [pc, #480]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad14:	6113      	str	r3, [r2, #16]
 800ad16:	4b76      	ldr	r3, [pc, #472]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad24:	4972      	ldr	r1, [pc, #456]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad26:	4313      	orrs	r3, r2
 800ad28:	670b      	str	r3, [r1, #112]	; 0x70
 800ad2a:	e004      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
 800ad2e:	75bb      	strb	r3, [r7, #22]
 800ad30:	e001      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
 800ad34:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 0301 	and.w	r3, r3, #1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d07d      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad46:	2b28      	cmp	r3, #40	; 0x28
 800ad48:	d866      	bhi.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800ad4a:	a201      	add	r2, pc, #4	; (adr r2, 800ad50 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ad4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad50:	0800ae1f 	.word	0x0800ae1f
 800ad54:	0800ae19 	.word	0x0800ae19
 800ad58:	0800ae19 	.word	0x0800ae19
 800ad5c:	0800ae19 	.word	0x0800ae19
 800ad60:	0800ae19 	.word	0x0800ae19
 800ad64:	0800ae19 	.word	0x0800ae19
 800ad68:	0800ae19 	.word	0x0800ae19
 800ad6c:	0800ae19 	.word	0x0800ae19
 800ad70:	0800adf5 	.word	0x0800adf5
 800ad74:	0800ae19 	.word	0x0800ae19
 800ad78:	0800ae19 	.word	0x0800ae19
 800ad7c:	0800ae19 	.word	0x0800ae19
 800ad80:	0800ae19 	.word	0x0800ae19
 800ad84:	0800ae19 	.word	0x0800ae19
 800ad88:	0800ae19 	.word	0x0800ae19
 800ad8c:	0800ae19 	.word	0x0800ae19
 800ad90:	0800ae07 	.word	0x0800ae07
 800ad94:	0800ae19 	.word	0x0800ae19
 800ad98:	0800ae19 	.word	0x0800ae19
 800ad9c:	0800ae19 	.word	0x0800ae19
 800ada0:	0800ae19 	.word	0x0800ae19
 800ada4:	0800ae19 	.word	0x0800ae19
 800ada8:	0800ae19 	.word	0x0800ae19
 800adac:	0800ae19 	.word	0x0800ae19
 800adb0:	0800ae1f 	.word	0x0800ae1f
 800adb4:	0800ae19 	.word	0x0800ae19
 800adb8:	0800ae19 	.word	0x0800ae19
 800adbc:	0800ae19 	.word	0x0800ae19
 800adc0:	0800ae19 	.word	0x0800ae19
 800adc4:	0800ae19 	.word	0x0800ae19
 800adc8:	0800ae19 	.word	0x0800ae19
 800adcc:	0800ae19 	.word	0x0800ae19
 800add0:	0800ae1f 	.word	0x0800ae1f
 800add4:	0800ae19 	.word	0x0800ae19
 800add8:	0800ae19 	.word	0x0800ae19
 800addc:	0800ae19 	.word	0x0800ae19
 800ade0:	0800ae19 	.word	0x0800ae19
 800ade4:	0800ae19 	.word	0x0800ae19
 800ade8:	0800ae19 	.word	0x0800ae19
 800adec:	0800ae19 	.word	0x0800ae19
 800adf0:	0800ae1f 	.word	0x0800ae1f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	3304      	adds	r3, #4
 800adf8:	2101      	movs	r1, #1
 800adfa:	4618      	mov	r0, r3
 800adfc:	f001 f97a 	bl	800c0f4 <RCCEx_PLL2_Config>
 800ae00:	4603      	mov	r3, r0
 800ae02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ae04:	e00c      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	3324      	adds	r3, #36	; 0x24
 800ae0a:	2101      	movs	r1, #1
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f001 fa23 	bl	800c258 <RCCEx_PLL3_Config>
 800ae12:	4603      	mov	r3, r0
 800ae14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ae16:	e003      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	75fb      	strb	r3, [r7, #23]
      break;
 800ae1c:	e000      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800ae1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae20:	7dfb      	ldrb	r3, [r7, #23]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d109      	bne.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ae26:	4b32      	ldr	r3, [pc, #200]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae32:	492f      	ldr	r1, [pc, #188]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae34:	4313      	orrs	r3, r2
 800ae36:	654b      	str	r3, [r1, #84]	; 0x54
 800ae38:	e001      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae3a:	7dfb      	ldrb	r3, [r7, #23]
 800ae3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d037      	beq.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae4e:	2b05      	cmp	r3, #5
 800ae50:	d820      	bhi.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800ae52:	a201      	add	r2, pc, #4	; (adr r2, 800ae58 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800ae54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae58:	0800ae9b 	.word	0x0800ae9b
 800ae5c:	0800ae71 	.word	0x0800ae71
 800ae60:	0800ae83 	.word	0x0800ae83
 800ae64:	0800ae9b 	.word	0x0800ae9b
 800ae68:	0800ae9b 	.word	0x0800ae9b
 800ae6c:	0800ae9b 	.word	0x0800ae9b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3304      	adds	r3, #4
 800ae74:	2101      	movs	r1, #1
 800ae76:	4618      	mov	r0, r3
 800ae78:	f001 f93c 	bl	800c0f4 <RCCEx_PLL2_Config>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ae80:	e00c      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3324      	adds	r3, #36	; 0x24
 800ae86:	2101      	movs	r1, #1
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f001 f9e5 	bl	800c258 <RCCEx_PLL3_Config>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ae92:	e003      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	75fb      	strb	r3, [r7, #23]
      break;
 800ae98:	e000      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800ae9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d109      	bne.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aea2:	4b13      	ldr	r3, [pc, #76]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea6:	f023 0207 	bic.w	r2, r3, #7
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeae:	4910      	ldr	r1, [pc, #64]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	654b      	str	r3, [r1, #84]	; 0x54
 800aeb4:	e001      	b.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb6:	7dfb      	ldrb	r3, [r7, #23]
 800aeb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0304 	and.w	r3, r3, #4
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d040      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aecc:	2b05      	cmp	r3, #5
 800aece:	d827      	bhi.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800aed0:	a201      	add	r2, pc, #4	; (adr r2, 800aed8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800aed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed6:	bf00      	nop
 800aed8:	0800af27 	.word	0x0800af27
 800aedc:	0800aefd 	.word	0x0800aefd
 800aee0:	0800af0f 	.word	0x0800af0f
 800aee4:	0800af27 	.word	0x0800af27
 800aee8:	0800af27 	.word	0x0800af27
 800aeec:	0800af27 	.word	0x0800af27
 800aef0:	58024400 	.word	0x58024400
 800aef4:	58024800 	.word	0x58024800
 800aef8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	3304      	adds	r3, #4
 800af00:	2101      	movs	r1, #1
 800af02:	4618      	mov	r0, r3
 800af04:	f001 f8f6 	bl	800c0f4 <RCCEx_PLL2_Config>
 800af08:	4603      	mov	r3, r0
 800af0a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800af0c:	e00c      	b.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	3324      	adds	r3, #36	; 0x24
 800af12:	2101      	movs	r1, #1
 800af14:	4618      	mov	r0, r3
 800af16:	f001 f99f 	bl	800c258 <RCCEx_PLL3_Config>
 800af1a:	4603      	mov	r3, r0
 800af1c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800af1e:	e003      	b.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	75fb      	strb	r3, [r7, #23]
      break;
 800af24:	e000      	b.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800af26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af28:	7dfb      	ldrb	r3, [r7, #23]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10a      	bne.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800af2e:	4bb2      	ldr	r3, [pc, #712]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800af30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af32:	f023 0207 	bic.w	r2, r3, #7
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af3c:	49ae      	ldr	r1, [pc, #696]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800af3e:	4313      	orrs	r3, r2
 800af40:	658b      	str	r3, [r1, #88]	; 0x58
 800af42:	e001      	b.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af44:	7dfb      	ldrb	r3, [r7, #23]
 800af46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 0320 	and.w	r3, r3, #32
 800af50:	2b00      	cmp	r3, #0
 800af52:	d044      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af5e:	d01b      	beq.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800af60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af64:	d805      	bhi.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800af66:	2b00      	cmp	r3, #0
 800af68:	d022      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800af6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af6e:	d00a      	beq.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800af70:	e01b      	b.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x976>
 800af72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af76:	d01d      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800af78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af7c:	d01c      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800af7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af82:	d01b      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x988>
 800af84:	e011      	b.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3304      	adds	r3, #4
 800af8a:	2100      	movs	r1, #0
 800af8c:	4618      	mov	r0, r3
 800af8e:	f001 f8b1 	bl	800c0f4 <RCCEx_PLL2_Config>
 800af92:	4603      	mov	r3, r0
 800af94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800af96:	e012      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3324      	adds	r3, #36	; 0x24
 800af9c:	2102      	movs	r1, #2
 800af9e:	4618      	mov	r0, r3
 800afa0:	f001 f95a 	bl	800c258 <RCCEx_PLL3_Config>
 800afa4:	4603      	mov	r3, r0
 800afa6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800afa8:	e009      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	75fb      	strb	r3, [r7, #23]
      break;
 800afae:	e006      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800afb0:	bf00      	nop
 800afb2:	e004      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800afb4:	bf00      	nop
 800afb6:	e002      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800afb8:	bf00      	nop
 800afba:	e000      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800afbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afbe:	7dfb      	ldrb	r3, [r7, #23]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800afc4:	4b8c      	ldr	r3, [pc, #560]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800afc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afd2:	4989      	ldr	r1, [pc, #548]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800afd4:	4313      	orrs	r3, r2
 800afd6:	654b      	str	r3, [r1, #84]	; 0x54
 800afd8:	e001      	b.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afda:	7dfb      	ldrb	r3, [r7, #23]
 800afdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d044      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aff4:	d01b      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800aff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800affa:	d805      	bhi.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800affc:	2b00      	cmp	r3, #0
 800affe:	d022      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b004:	d00a      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800b006:	e01b      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800b008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b00c:	d01d      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b00e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b012:	d01c      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800b014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b018:	d01b      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800b01a:	e011      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3304      	adds	r3, #4
 800b020:	2100      	movs	r1, #0
 800b022:	4618      	mov	r0, r3
 800b024:	f001 f866 	bl	800c0f4 <RCCEx_PLL2_Config>
 800b028:	4603      	mov	r3, r0
 800b02a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b02c:	e012      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	3324      	adds	r3, #36	; 0x24
 800b032:	2102      	movs	r1, #2
 800b034:	4618      	mov	r0, r3
 800b036:	f001 f90f 	bl	800c258 <RCCEx_PLL3_Config>
 800b03a:	4603      	mov	r3, r0
 800b03c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b03e:	e009      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	75fb      	strb	r3, [r7, #23]
      break;
 800b044:	e006      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b046:	bf00      	nop
 800b048:	e004      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b04a:	bf00      	nop
 800b04c:	e002      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b04e:	bf00      	nop
 800b050:	e000      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b052:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b054:	7dfb      	ldrb	r3, [r7, #23]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10a      	bne.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b05a:	4b67      	ldr	r3, [pc, #412]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b05c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b05e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b068:	4963      	ldr	r1, [pc, #396]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b06a:	4313      	orrs	r3, r2
 800b06c:	658b      	str	r3, [r1, #88]	; 0x58
 800b06e:	e001      	b.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b070:	7dfb      	ldrb	r3, [r7, #23]
 800b072:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d044      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b08a:	d01b      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800b08c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b090:	d805      	bhi.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800b092:	2b00      	cmp	r3, #0
 800b094:	d022      	beq.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b09a:	d00a      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b09c:	e01b      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800b09e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0a2:	d01d      	beq.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b0a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b0a8:	d01c      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800b0aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b0ae:	d01b      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800b0b0:	e011      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f001 f81b 	bl	800c0f4 <RCCEx_PLL2_Config>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b0c2:	e012      	b.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3324      	adds	r3, #36	; 0x24
 800b0c8:	2102      	movs	r1, #2
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f001 f8c4 	bl	800c258 <RCCEx_PLL3_Config>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b0d4:	e009      	b.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	75fb      	strb	r3, [r7, #23]
      break;
 800b0da:	e006      	b.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b0dc:	bf00      	nop
 800b0de:	e004      	b.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b0e0:	bf00      	nop
 800b0e2:	e002      	b.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b0e4:	bf00      	nop
 800b0e6:	e000      	b.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b0e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0ea:	7dfb      	ldrb	r3, [r7, #23]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10a      	bne.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b0f0:	4b41      	ldr	r3, [pc, #260]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b0f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0fe:	493e      	ldr	r1, [pc, #248]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b100:	4313      	orrs	r3, r2
 800b102:	658b      	str	r3, [r1, #88]	; 0x58
 800b104:	e001      	b.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f003 0308 	and.w	r3, r3, #8
 800b112:	2b00      	cmp	r3, #0
 800b114:	d01a      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b11c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b120:	d10a      	bne.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3324      	adds	r3, #36	; 0x24
 800b126:	2102      	movs	r1, #2
 800b128:	4618      	mov	r0, r3
 800b12a:	f001 f895 	bl	800c258 <RCCEx_PLL3_Config>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d001      	beq.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b138:	4b2f      	ldr	r3, [pc, #188]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b13a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b13c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b146:	492c      	ldr	r1, [pc, #176]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b148:	4313      	orrs	r3, r2
 800b14a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0310 	and.w	r3, r3, #16
 800b154:	2b00      	cmp	r3, #0
 800b156:	d01a      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b15e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b162:	d10a      	bne.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	3324      	adds	r3, #36	; 0x24
 800b168:	2102      	movs	r1, #2
 800b16a:	4618      	mov	r0, r3
 800b16c:	f001 f874 	bl	800c258 <RCCEx_PLL3_Config>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b17a:	4b1f      	ldr	r3, [pc, #124]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b17c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b17e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b188:	491b      	ldr	r1, [pc, #108]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b18a:	4313      	orrs	r3, r2
 800b18c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b196:	2b00      	cmp	r3, #0
 800b198:	d032      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b1a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1a4:	d00d      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800b1a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1aa:	d016      	beq.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d111      	bne.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 ff9c 	bl	800c0f4 <RCCEx_PLL2_Config>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b1c0:	e00c      	b.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	3324      	adds	r3, #36	; 0x24
 800b1c6:	2102      	movs	r1, #2
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f001 f845 	bl	800c258 <RCCEx_PLL3_Config>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b1d2:	e003      	b.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b1d8:	e000      	b.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800b1da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10c      	bne.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b1e2:	4b05      	ldr	r3, [pc, #20]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b1f0:	4901      	ldr	r1, [pc, #4]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	658b      	str	r3, [r1, #88]	; 0x58
 800b1f6:	e003      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800b1f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1fc:	7dfb      	ldrb	r3, [r7, #23]
 800b1fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d02f      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b212:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b216:	d00c      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b218:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b21c:	d015      	beq.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800b21e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b222:	d10f      	bne.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b224:	4b79      	ldr	r3, [pc, #484]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b228:	4a78      	ldr	r2, [pc, #480]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b22a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b22e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b230:	e00c      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3324      	adds	r3, #36	; 0x24
 800b236:	2101      	movs	r1, #1
 800b238:	4618      	mov	r0, r3
 800b23a:	f001 f80d 	bl	800c258 <RCCEx_PLL3_Config>
 800b23e:	4603      	mov	r3, r0
 800b240:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b242:	e003      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	75fb      	strb	r3, [r7, #23]
      break;
 800b248:	e000      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800b24a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b24c:	7dfb      	ldrb	r3, [r7, #23]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10a      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b252:	4b6e      	ldr	r3, [pc, #440]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b260:	496a      	ldr	r1, [pc, #424]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b262:	4313      	orrs	r3, r2
 800b264:	654b      	str	r3, [r1, #84]	; 0x54
 800b266:	e001      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d029      	beq.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d003      	beq.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800b280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b284:	d007      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800b286:	e00f      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b288:	4b60      	ldr	r3, [pc, #384]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28c:	4a5f      	ldr	r2, [pc, #380]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b28e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b292:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b294:	e00b      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3304      	adds	r3, #4
 800b29a:	2102      	movs	r1, #2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 ff29 	bl	800c0f4 <RCCEx_PLL2_Config>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b2a6:	e002      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b2ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d109      	bne.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b2b4:	4b55      	ldr	r3, [pc, #340]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2c0:	4952      	ldr	r1, [pc, #328]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b2c6:	e001      	b.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00a      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3324      	adds	r3, #36	; 0x24
 800b2dc:	2102      	movs	r1, #2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 ffba 	bl	800c258 <RCCEx_PLL3_Config>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d02f      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b302:	d00c      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b308:	d802      	bhi.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d011      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800b30e:	e00d      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800b310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b314:	d00f      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800b316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b31a:	d00e      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800b31c:	e006      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b31e:	4b3b      	ldr	r3, [pc, #236]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b322:	4a3a      	ldr	r2, [pc, #232]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b328:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b32a:	e007      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	75fb      	strb	r3, [r7, #23]
      break;
 800b330:	e004      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b332:	bf00      	nop
 800b334:	e002      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b336:	bf00      	nop
 800b338:	e000      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b33a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d109      	bne.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b342:	4b32      	ldr	r3, [pc, #200]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b346:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b34e:	492f      	ldr	r1, [pc, #188]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b350:	4313      	orrs	r3, r2
 800b352:	654b      	str	r3, [r1, #84]	; 0x54
 800b354:	e001      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b356:	7dfb      	ldrb	r3, [r7, #23]
 800b358:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b362:	2b00      	cmp	r3, #0
 800b364:	d008      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b366:	4b29      	ldr	r3, [pc, #164]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b36a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b372:	4926      	ldr	r1, [pc, #152]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b374:	4313      	orrs	r3, r2
 800b376:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d009      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b384:	4b21      	ldr	r3, [pc, #132]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b392:	491e      	ldr	r1, [pc, #120]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b394:	4313      	orrs	r3, r2
 800b396:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d008      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b3a4:	4b19      	ldr	r3, [pc, #100]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3b0:	4916      	ldr	r1, [pc, #88]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00d      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b3c2:	4b12      	ldr	r3, [pc, #72]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	4a11      	ldr	r2, [pc, #68]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3cc:	6113      	str	r3, [r2, #16]
 800b3ce:	4b0f      	ldr	r3, [pc, #60]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3d0:	691a      	ldr	r2, [r3, #16]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b3d8:	490c      	ldr	r1, [pc, #48]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	da08      	bge.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b3e6:	4b09      	ldr	r3, [pc, #36]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f2:	4906      	ldr	r1, [pc, #24]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800b3f8:	7dbb      	ldrb	r3, [r7, #22]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
 800b400:	e000      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800b402:	2301      	movs	r3, #1
}
 800b404:	4618      	mov	r0, r3
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	58024400 	.word	0x58024400

0800b410 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b090      	sub	sp, #64	; 0x40
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b41e:	d150      	bne.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b420:	4ba1      	ldr	r3, [pc, #644]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b424:	f003 0307 	and.w	r3, r3, #7
 800b428:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42c:	2b04      	cmp	r3, #4
 800b42e:	d844      	bhi.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800b430:	a201      	add	r2, pc, #4	; (adr r2, 800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800b432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b436:	bf00      	nop
 800b438:	0800b44d 	.word	0x0800b44d
 800b43c:	0800b45d 	.word	0x0800b45d
 800b440:	0800b46d 	.word	0x0800b46d
 800b444:	0800b4b5 	.word	0x0800b4b5
 800b448:	0800b47d 	.word	0x0800b47d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b44c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b450:	4618      	mov	r0, r3
 800b452:	f000 fd03 	bl	800be5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b45a:	e241      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b45c:	f107 0318 	add.w	r3, r7, #24
 800b460:	4618      	mov	r0, r3
 800b462:	f000 fa63 	bl	800b92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b46a:	e239      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b46c:	f107 030c 	add.w	r3, r7, #12
 800b470:	4618      	mov	r0, r3
 800b472:	f000 fba7 	bl	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b47a:	e231      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b47c:	4b8a      	ldr	r3, [pc, #552]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b47e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b484:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d102      	bne.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b48c:	4b87      	ldr	r3, [pc, #540]	; (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b48e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b490:	e226      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b498:	d102      	bne.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800b49a:	4b85      	ldr	r3, [pc, #532]	; (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b49c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b49e:	e21f      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4a6:	d102      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800b4a8:	4b82      	ldr	r3, [pc, #520]	; (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4ac:	e218      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4b2:	e215      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b4b4:	4b80      	ldr	r3, [pc, #512]	; (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4b8:	e212      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4be:	bf00      	nop
 800b4c0:	e20e      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4c8:	d14f      	bne.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b4ca:	4b77      	ldr	r3, [pc, #476]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b4cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b4d2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d6:	2b80      	cmp	r3, #128	; 0x80
 800b4d8:	d01c      	beq.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b4da:	2b80      	cmp	r3, #128	; 0x80
 800b4dc:	d804      	bhi.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d008      	beq.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b4e2:	2b40      	cmp	r3, #64	; 0x40
 800b4e4:	d00e      	beq.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800b4e6:	e03c      	b.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800b4e8:	2bc0      	cmp	r3, #192	; 0xc0
 800b4ea:	d037      	beq.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800b4ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4f0:	d018      	beq.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800b4f2:	e036      	b.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 fcaf 	bl	800be5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b502:	e1ed      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b504:	f107 0318 	add.w	r3, r7, #24
 800b508:	4618      	mov	r0, r3
 800b50a:	f000 fa0f 	bl	800b92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b512:	e1e5      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b514:	f107 030c 	add.w	r3, r7, #12
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 fb53 	bl	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b522:	e1dd      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b524:	4b60      	ldr	r3, [pc, #384]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b528:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b52c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b534:	4b5d      	ldr	r3, [pc, #372]	; (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b536:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b538:	e1d2      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b540:	d102      	bne.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800b542:	4b5b      	ldr	r3, [pc, #364]	; (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b544:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b546:	e1cb      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b54e:	d102      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800b550:	4b58      	ldr	r3, [pc, #352]	; (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b554:	e1c4      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b55a:	e1c1      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b55c:	4b56      	ldr	r3, [pc, #344]	; (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b55e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b560:	e1be      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b562:	2300      	movs	r3, #0
 800b564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b566:	bf00      	nop
 800b568:	e1ba      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b570:	d153      	bne.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b572:	4b4d      	ldr	r3, [pc, #308]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b576:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b57a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b582:	d01f      	beq.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800b584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b588:	d805      	bhi.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00a      	beq.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800b58e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b592:	d00f      	beq.n	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800b594:	e03d      	b.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800b596:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b59a:	d037      	beq.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800b59c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b5a0:	d018      	beq.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800b5a2:	e036      	b.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 fc57 	bl	800be5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5b2:	e195      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5b4:	f107 0318 	add.w	r3, r7, #24
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 f9b7 	bl	800b92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5c2:	e18d      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5c4:	f107 030c 	add.w	r3, r7, #12
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 fafb 	bl	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5d2:	e185      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b5d4:	4b34      	ldr	r3, [pc, #208]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b5d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5dc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d102      	bne.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b5e4:	4b31      	ldr	r3, [pc, #196]	; (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b5e8:	e17a      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5f0:	d102      	bne.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800b5f2:	4b2f      	ldr	r3, [pc, #188]	; (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5f6:	e173      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5fe:	d102      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800b600:	4b2c      	ldr	r3, [pc, #176]	; (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b602:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b604:	e16c      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b60a:	e169      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b60c:	4b2a      	ldr	r3, [pc, #168]	; (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b60e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b610:	e166      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b612:	2300      	movs	r3, #0
 800b614:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b616:	bf00      	nop
 800b618:	e162      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b620:	d15d      	bne.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b622:	4b21      	ldr	r3, [pc, #132]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b626:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b62a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b632:	d01f      	beq.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b638:	d805      	bhi.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00a      	beq.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b63e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b642:	d00f      	beq.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800b644:	e047      	b.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800b646:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b64a:	d041      	beq.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800b64c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b650:	d018      	beq.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800b652:	e040      	b.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 fbff 	bl	800be5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b660:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b662:	e13d      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b664:	f107 0318 	add.w	r3, r7, #24
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 f95f 	bl	800b92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b672:	e135      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b674:	f107 030c 	add.w	r3, r7, #12
 800b678:	4618      	mov	r0, r3
 800b67a:	f000 faa3 	bl	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b682:	e12d      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b684:	4b08      	ldr	r3, [pc, #32]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b688:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b68c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b690:	2b00      	cmp	r3, #0
 800b692:	d102      	bne.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b694:	4b05      	ldr	r3, [pc, #20]	; (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b696:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b698:	e122      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6a0:	d10c      	bne.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800b6a2:	4b03      	ldr	r3, [pc, #12]	; (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6a6:	e11b      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b6a8:	58024400 	.word	0x58024400
 800b6ac:	03d09000 	.word	0x03d09000
 800b6b0:	003d0900 	.word	0x003d0900
 800b6b4:	017d7840 	.word	0x017d7840
 800b6b8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6c2:	d102      	bne.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800b6c4:	4b89      	ldr	r3, [pc, #548]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6c8:	e10a      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6ce:	e107      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b6d0:	4b87      	ldr	r3, [pc, #540]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6d4:	e104      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6da:	bf00      	nop
 800b6dc:	e100      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6e4:	d153      	bne.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b6e6:	4b83      	ldr	r3, [pc, #524]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b6e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b6ee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6f6:	d01f      	beq.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b6f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6fc:	d805      	bhi.n	800b70a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00a      	beq.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800b702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b706:	d00f      	beq.n	800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800b708:	e03d      	b.n	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800b70a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b70e:	d037      	beq.n	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800b710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b714:	d018      	beq.n	800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b716:	e036      	b.n	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 fb9d 	bl	800be5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b726:	e0db      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b728:	f107 0318 	add.w	r3, r7, #24
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 f8fd 	bl	800b92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b736:	e0d3      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b738:	f107 030c 	add.w	r3, r7, #12
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 fa41 	bl	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b746:	e0cb      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b748:	4b6a      	ldr	r3, [pc, #424]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b74a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b74c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b750:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b754:	2b00      	cmp	r3, #0
 800b756:	d102      	bne.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b758:	4b67      	ldr	r3, [pc, #412]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b75a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b75c:	e0c0      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b764:	d102      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800b766:	4b65      	ldr	r3, [pc, #404]	; (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b768:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b76a:	e0b9      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b76e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b772:	d102      	bne.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800b774:	4b5d      	ldr	r3, [pc, #372]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b776:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b778:	e0b2      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b77e:	e0af      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b780:	4b5b      	ldr	r3, [pc, #364]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b784:	e0ac      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b78a:	bf00      	nop
 800b78c:	e0a8      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b794:	d13d      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b796:	4b57      	ldr	r3, [pc, #348]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b79e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7a6:	d00c      	beq.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b7a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7ac:	d011      	beq.n	800b7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d12b      	bne.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7b2:	f107 0318 	add.w	r3, r7, #24
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f000 f8b8 	bl	800b92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7c0:	e08e      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7c2:	f107 030c 	add.w	r3, r7, #12
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 f9fc 	bl	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7d0:	e086      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b7d2:	4b48      	ldr	r3, [pc, #288]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b7da:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d102      	bne.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b7e2:	4b45      	ldr	r3, [pc, #276]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b7e6:	e07b      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7ee:	d102      	bne.n	800b7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800b7f0:	4b42      	ldr	r3, [pc, #264]	; (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7f4:	e074      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7fc:	d102      	bne.n	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800b7fe:	4b3b      	ldr	r3, [pc, #236]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b802:	e06d      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b808:	e06a      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b80e:	bf00      	nop
 800b810:	e066      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b818:	d11f      	bne.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b81a:	4b36      	ldr	r3, [pc, #216]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b81c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b81e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b822:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b82a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b82e:	d008      	beq.n	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800b830:	e00f      	b.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b836:	4618      	mov	r0, r3
 800b838:	f000 fb10 	bl	800be5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b840:	e04e      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b842:	f107 0318 	add.w	r3, r7, #24
 800b846:	4618      	mov	r0, r3
 800b848:	f000 f870 	bl	800b92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b84c:	6a3b      	ldr	r3, [r7, #32]
 800b84e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b850:	e046      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b856:	bf00      	nop
 800b858:	e042      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b860:	d13c      	bne.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b862:	4b24      	ldr	r3, [pc, #144]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b866:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b86a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b872:	d01e      	beq.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800b874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b878:	d805      	bhi.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00d      	beq.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b87e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b882:	d00e      	beq.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800b884:	e026      	b.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800b886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b88a:	d01d      	beq.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800b88c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b890:	d01d      	beq.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b892:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b896:	d014      	beq.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b898:	e01c      	b.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b89a:	f000 f831 	bl	800b900 <HAL_RCCEx_GetD3PCLK1Freq>
 800b89e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b8a0:	e01e      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8a2:	f107 0318 	add.w	r3, r7, #24
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f000 f840 	bl	800b92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8b0:	e016      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8b2:	f107 030c 	add.w	r3, r7, #12
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 f984 	bl	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8c0:	e00e      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800b8c2:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8c6:	e00b      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800b8c8:	4b0c      	ldr	r3, [pc, #48]	; (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8cc:	e008      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800b8ce:	4b07      	ldr	r3, [pc, #28]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8d2:	e005      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8d8:	bf00      	nop
 800b8da:	e001      	b.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3740      	adds	r7, #64	; 0x40
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	017d7840 	.word	0x017d7840
 800b8f0:	00bb8000 	.word	0x00bb8000
 800b8f4:	58024400 	.word	0x58024400
 800b8f8:	03d09000 	.word	0x03d09000
 800b8fc:	003d0900 	.word	0x003d0900

0800b900 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b904:	f7fe fe1e 	bl	800a544 <HAL_RCC_GetHCLKFreq>
 800b908:	4601      	mov	r1, r0
 800b90a:	4b06      	ldr	r3, [pc, #24]	; (800b924 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b90c:	6a1b      	ldr	r3, [r3, #32]
 800b90e:	091b      	lsrs	r3, r3, #4
 800b910:	f003 0307 	and.w	r3, r3, #7
 800b914:	4a04      	ldr	r2, [pc, #16]	; (800b928 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b916:	5cd3      	ldrb	r3, [r2, r3]
 800b918:	f003 031f 	and.w	r3, r3, #31
 800b91c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b920:	4618      	mov	r0, r3
 800b922:	bd80      	pop	{r7, pc}
 800b924:	58024400 	.word	0x58024400
 800b928:	0801ae90 	.word	0x0801ae90

0800b92c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b089      	sub	sp, #36	; 0x24
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b934:	4b9d      	ldr	r3, [pc, #628]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b938:	f003 0303 	and.w	r3, r3, #3
 800b93c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b93e:	4b9b      	ldr	r3, [pc, #620]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b942:	0b1b      	lsrs	r3, r3, #12
 800b944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b948:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b94a:	4b98      	ldr	r3, [pc, #608]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94e:	091b      	lsrs	r3, r3, #4
 800b950:	f003 0301 	and.w	r3, r3, #1
 800b954:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b956:	4b95      	ldr	r3, [pc, #596]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b95a:	08db      	lsrs	r3, r3, #3
 800b95c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b960:	693a      	ldr	r2, [r7, #16]
 800b962:	fb02 f303 	mul.w	r3, r2, r3
 800b966:	ee07 3a90 	vmov	s15, r3
 800b96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 810a 	beq.w	800bb8e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d05a      	beq.n	800ba36 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800b980:	2b01      	cmp	r3, #1
 800b982:	d302      	bcc.n	800b98a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800b984:	2b02      	cmp	r3, #2
 800b986:	d078      	beq.n	800ba7a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800b988:	e099      	b.n	800babe <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b98a:	4b88      	ldr	r3, [pc, #544]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f003 0320 	and.w	r3, r3, #32
 800b992:	2b00      	cmp	r3, #0
 800b994:	d02d      	beq.n	800b9f2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b996:	4b85      	ldr	r3, [pc, #532]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	08db      	lsrs	r3, r3, #3
 800b99c:	f003 0303 	and.w	r3, r3, #3
 800b9a0:	4a83      	ldr	r2, [pc, #524]	; (800bbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800b9a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9a6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	ee07 3a90 	vmov	s15, r3
 800b9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	ee07 3a90 	vmov	s15, r3
 800b9b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9c0:	4b7a      	ldr	r3, [pc, #488]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9c8:	ee07 3a90 	vmov	s15, r3
 800b9cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800b9d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b9f0:	e087      	b.n	800bb02 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	ee07 3a90 	vmov	s15, r3
 800b9f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800ba00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba04:	4b69      	ldr	r3, [pc, #420]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba0c:	ee07 3a90 	vmov	s15, r3
 800ba10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba14:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba18:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ba1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba34:	e065      	b.n	800bb02 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	ee07 3a90 	vmov	s15, r3
 800ba3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba40:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800ba44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba48:	4b58      	ldr	r3, [pc, #352]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba50:	ee07 3a90 	vmov	s15, r3
 800ba54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba58:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba5c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ba60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba78:	e043      	b.n	800bb02 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	ee07 3a90 	vmov	s15, r3
 800ba80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800ba88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba8c:	4b47      	ldr	r3, [pc, #284]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba94:	ee07 3a90 	vmov	s15, r3
 800ba98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800baa0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800baa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bab8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800babc:	e021      	b.n	800bb02 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	ee07 3a90 	vmov	s15, r3
 800bac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bacc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bad0:	4b36      	ldr	r3, [pc, #216]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bad8:	ee07 3a90 	vmov	s15, r3
 800badc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bae0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bae4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bae8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bafc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb00:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bb02:	4b2a      	ldr	r3, [pc, #168]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb06:	0a5b      	lsrs	r3, r3, #9
 800bb08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb0c:	ee07 3a90 	vmov	s15, r3
 800bb10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb28:	ee17 2a90 	vmov	r2, s15
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bb30:	4b1e      	ldr	r3, [pc, #120]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb34:	0c1b      	lsrs	r3, r3, #16
 800bb36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb3a:	ee07 3a90 	vmov	s15, r3
 800bb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb56:	ee17 2a90 	vmov	r2, s15
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bb5e:	4b13      	ldr	r3, [pc, #76]	; (800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb62:	0e1b      	lsrs	r3, r3, #24
 800bb64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb68:	ee07 3a90 	vmov	s15, r3
 800bb6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb78:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb84:	ee17 2a90 	vmov	r2, s15
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bb8c:	e008      	b.n	800bba0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	609a      	str	r2, [r3, #8]
}
 800bba0:	bf00      	nop
 800bba2:	3724      	adds	r7, #36	; 0x24
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr
 800bbac:	58024400 	.word	0x58024400
 800bbb0:	03d09000 	.word	0x03d09000
 800bbb4:	46000000 	.word	0x46000000
 800bbb8:	4c742400 	.word	0x4c742400
 800bbbc:	4a742400 	.word	0x4a742400
 800bbc0:	4bbebc20 	.word	0x4bbebc20

0800bbc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b089      	sub	sp, #36	; 0x24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbcc:	4b9d      	ldr	r3, [pc, #628]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd0:	f003 0303 	and.w	r3, r3, #3
 800bbd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bbd6:	4b9b      	ldr	r3, [pc, #620]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbda:	0d1b      	lsrs	r3, r3, #20
 800bbdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbe0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bbe2:	4b98      	ldr	r3, [pc, #608]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe6:	0a1b      	lsrs	r3, r3, #8
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bbee:	4b95      	ldr	r3, [pc, #596]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bbf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbf2:	08db      	lsrs	r3, r3, #3
 800bbf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	fb02 f303 	mul.w	r3, r2, r3
 800bbfe:	ee07 3a90 	vmov	s15, r3
 800bc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 810a 	beq.w	800be26 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d05a      	beq.n	800bcce <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d302      	bcc.n	800bc22 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d078      	beq.n	800bd12 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800bc20:	e099      	b.n	800bd56 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc22:	4b88      	ldr	r3, [pc, #544]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 0320 	and.w	r3, r3, #32
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d02d      	beq.n	800bc8a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc2e:	4b85      	ldr	r3, [pc, #532]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	08db      	lsrs	r3, r3, #3
 800bc34:	f003 0303 	and.w	r3, r3, #3
 800bc38:	4a83      	ldr	r2, [pc, #524]	; (800be48 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800bc3a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc3e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	ee07 3a90 	vmov	s15, r3
 800bc46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	ee07 3a90 	vmov	s15, r3
 800bc50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc58:	4b7a      	ldr	r3, [pc, #488]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc60:	ee07 3a90 	vmov	s15, r3
 800bc64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc68:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc6c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800be4c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bc70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc84:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bc88:	e087      	b.n	800bd9a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	ee07 3a90 	vmov	s15, r3
 800bc90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc94:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800be50 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800bc98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc9c:	4b69      	ldr	r3, [pc, #420]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca4:	ee07 3a90 	vmov	s15, r3
 800bca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcac:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcb0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800be4c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bcb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bccc:	e065      	b.n	800bd9a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	ee07 3a90 	vmov	s15, r3
 800bcd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800be54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800bcdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce0:	4b58      	ldr	r3, [pc, #352]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce8:	ee07 3a90 	vmov	s15, r3
 800bcec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcf4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800be4c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bcf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd10:	e043      	b.n	800bd9a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	ee07 3a90 	vmov	s15, r3
 800bd18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800be58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800bd20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd24:	4b47      	ldr	r3, [pc, #284]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd2c:	ee07 3a90 	vmov	s15, r3
 800bd30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd34:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd38:	eddf 5a44 	vldr	s11, [pc, #272]	; 800be4c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd54:	e021      	b.n	800bd9a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	ee07 3a90 	vmov	s15, r3
 800bd5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd60:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800be54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800bd64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd68:	4b36      	ldr	r3, [pc, #216]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd70:	ee07 3a90 	vmov	s15, r3
 800bd74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd78:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800be4c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd98:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bd9a:	4b2a      	ldr	r3, [pc, #168]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9e:	0a5b      	lsrs	r3, r3, #9
 800bda0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda4:	ee07 3a90 	vmov	s15, r3
 800bda8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdc0:	ee17 2a90 	vmov	r2, s15
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bdc8:	4b1e      	ldr	r3, [pc, #120]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bdca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdcc:	0c1b      	lsrs	r3, r3, #16
 800bdce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd2:	ee07 3a90 	vmov	s15, r3
 800bdd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bde2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bde6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdee:	ee17 2a90 	vmov	r2, s15
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bdf6:	4b13      	ldr	r3, [pc, #76]	; (800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfa:	0e1b      	lsrs	r3, r3, #24
 800bdfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be00:	ee07 3a90 	vmov	s15, r3
 800be04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be10:	edd7 6a07 	vldr	s13, [r7, #28]
 800be14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be1c:	ee17 2a90 	vmov	r2, s15
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800be24:	e008      	b.n	800be38 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	609a      	str	r2, [r3, #8]
}
 800be38:	bf00      	nop
 800be3a:	3724      	adds	r7, #36	; 0x24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	58024400 	.word	0x58024400
 800be48:	03d09000 	.word	0x03d09000
 800be4c:	46000000 	.word	0x46000000
 800be50:	4c742400 	.word	0x4c742400
 800be54:	4a742400 	.word	0x4a742400
 800be58:	4bbebc20 	.word	0x4bbebc20

0800be5c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b089      	sub	sp, #36	; 0x24
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be64:	4b9d      	ldr	r3, [pc, #628]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800be66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be68:	f003 0303 	and.w	r3, r3, #3
 800be6c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800be6e:	4b9b      	ldr	r3, [pc, #620]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800be70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be72:	091b      	lsrs	r3, r3, #4
 800be74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be78:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800be7a:	4b98      	ldr	r3, [pc, #608]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800be7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7e:	f003 0301 	and.w	r3, r3, #1
 800be82:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800be84:	4b95      	ldr	r3, [pc, #596]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800be86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be88:	08db      	lsrs	r3, r3, #3
 800be8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	fb02 f303 	mul.w	r3, r2, r3
 800be94:	ee07 3a90 	vmov	s15, r3
 800be98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f000 810a 	beq.w	800c0bc <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d05a      	beq.n	800bf64 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d302      	bcc.n	800beb8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800beb2:	2b02      	cmp	r3, #2
 800beb4:	d078      	beq.n	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800beb6:	e099      	b.n	800bfec <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800beb8:	4b88      	ldr	r3, [pc, #544]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 0320 	and.w	r3, r3, #32
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d02d      	beq.n	800bf20 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bec4:	4b85      	ldr	r3, [pc, #532]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	08db      	lsrs	r3, r3, #3
 800beca:	f003 0303 	and.w	r3, r3, #3
 800bece:	4a84      	ldr	r2, [pc, #528]	; (800c0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800bed0:	fa22 f303 	lsr.w	r3, r2, r3
 800bed4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	ee07 3a90 	vmov	s15, r3
 800bedc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	ee07 3a90 	vmov	s15, r3
 800bee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beee:	4b7b      	ldr	r3, [pc, #492]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef6:	ee07 3a90 	vmov	s15, r3
 800befa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800befe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf02:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c0e4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bf06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bf1e:	e087      	b.n	800c030 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	ee07 3a90 	vmov	s15, r3
 800bf26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800bf2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf32:	4b6a      	ldr	r3, [pc, #424]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf42:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf46:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c0e4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bf4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf62:	e065      	b.n	800c030 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	ee07 3a90 	vmov	s15, r3
 800bf6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c0ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800bf72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf76:	4b59      	ldr	r3, [pc, #356]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf86:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c0e4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bf8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfa6:	e043      	b.n	800c030 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfba:	4b48      	ldr	r3, [pc, #288]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc2:	ee07 3a90 	vmov	s15, r3
 800bfc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfca:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c0e4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bfd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfea:	e021      	b.n	800c030 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c0ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800bffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bffe:	4b37      	ldr	r3, [pc, #220]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c006:	ee07 3a90 	vmov	s15, r3
 800c00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c00e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c012:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c0e4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c01e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c02a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c02e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c030:	4b2a      	ldr	r3, [pc, #168]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c034:	0a5b      	lsrs	r3, r3, #9
 800c036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c03a:	ee07 3a90 	vmov	s15, r3
 800c03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c04a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c04e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c056:	ee17 2a90 	vmov	r2, s15
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c05e:	4b1f      	ldr	r3, [pc, #124]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c062:	0c1b      	lsrs	r3, r3, #16
 800c064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c068:	ee07 3a90 	vmov	s15, r3
 800c06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c074:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c078:	edd7 6a07 	vldr	s13, [r7, #28]
 800c07c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c084:	ee17 2a90 	vmov	r2, s15
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c08c:	4b13      	ldr	r3, [pc, #76]	; (800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c090:	0e1b      	lsrs	r3, r3, #24
 800c092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c096:	ee07 3a90 	vmov	s15, r3
 800c09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c09e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0b2:	ee17 2a90 	vmov	r2, s15
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c0ba:	e008      	b.n	800c0ce <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	609a      	str	r2, [r3, #8]
}
 800c0ce:	bf00      	nop
 800c0d0:	3724      	adds	r7, #36	; 0x24
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	58024400 	.word	0x58024400
 800c0e0:	03d09000 	.word	0x03d09000
 800c0e4:	46000000 	.word	0x46000000
 800c0e8:	4c742400 	.word	0x4c742400
 800c0ec:	4a742400 	.word	0x4a742400
 800c0f0:	4bbebc20 	.word	0x4bbebc20

0800c0f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c102:	4b53      	ldr	r3, [pc, #332]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c106:	f003 0303 	and.w	r3, r3, #3
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d101      	bne.n	800c112 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e099      	b.n	800c246 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c112:	4b4f      	ldr	r3, [pc, #316]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a4e      	ldr	r2, [pc, #312]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c118:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c11c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c11e:	f7f8 fa01 	bl	8004524 <HAL_GetTick>
 800c122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c124:	e008      	b.n	800c138 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c126:	f7f8 f9fd 	bl	8004524 <HAL_GetTick>
 800c12a:	4602      	mov	r2, r0
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	1ad3      	subs	r3, r2, r3
 800c130:	2b02      	cmp	r3, #2
 800c132:	d901      	bls.n	800c138 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c134:	2303      	movs	r3, #3
 800c136:	e086      	b.n	800c246 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c138:	4b45      	ldr	r3, [pc, #276]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d1f0      	bne.n	800c126 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c144:	4b42      	ldr	r3, [pc, #264]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c148:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	031b      	lsls	r3, r3, #12
 800c152:	493f      	ldr	r1, [pc, #252]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c154:	4313      	orrs	r3, r2
 800c156:	628b      	str	r3, [r1, #40]	; 0x28
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	3b01      	subs	r3, #1
 800c168:	025b      	lsls	r3, r3, #9
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	431a      	orrs	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	3b01      	subs	r3, #1
 800c174:	041b      	lsls	r3, r3, #16
 800c176:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c17a:	431a      	orrs	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	3b01      	subs	r3, #1
 800c182:	061b      	lsls	r3, r3, #24
 800c184:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c188:	4931      	ldr	r1, [pc, #196]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c18a:	4313      	orrs	r3, r2
 800c18c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c18e:	4b30      	ldr	r3, [pc, #192]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c192:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	492d      	ldr	r1, [pc, #180]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c19c:	4313      	orrs	r3, r2
 800c19e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c1a0:	4b2b      	ldr	r3, [pc, #172]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a4:	f023 0220 	bic.w	r2, r3, #32
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	4928      	ldr	r1, [pc, #160]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c1b2:	4b27      	ldr	r3, [pc, #156]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b6:	4a26      	ldr	r2, [pc, #152]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1b8:	f023 0310 	bic.w	r3, r3, #16
 800c1bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c1be:	4b24      	ldr	r3, [pc, #144]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1c2:	4b24      	ldr	r3, [pc, #144]	; (800c254 <RCCEx_PLL2_Config+0x160>)
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	69d2      	ldr	r2, [r2, #28]
 800c1ca:	00d2      	lsls	r2, r2, #3
 800c1cc:	4920      	ldr	r1, [pc, #128]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c1d2:	4b1f      	ldr	r3, [pc, #124]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d6:	4a1e      	ldr	r2, [pc, #120]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1d8:	f043 0310 	orr.w	r3, r3, #16
 800c1dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d106      	bne.n	800c1f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c1e4:	4b1a      	ldr	r3, [pc, #104]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e8:	4a19      	ldr	r2, [pc, #100]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1f0:	e00f      	b.n	800c212 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d106      	bne.n	800c206 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c1f8:	4b15      	ldr	r3, [pc, #84]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fc:	4a14      	ldr	r2, [pc, #80]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c1fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c202:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c204:	e005      	b.n	800c212 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c206:	4b12      	ldr	r3, [pc, #72]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20a:	4a11      	ldr	r2, [pc, #68]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c20c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c210:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c212:	4b0f      	ldr	r3, [pc, #60]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a0e      	ldr	r2, [pc, #56]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c218:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c21c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c21e:	f7f8 f981 	bl	8004524 <HAL_GetTick>
 800c222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c224:	e008      	b.n	800c238 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c226:	f7f8 f97d 	bl	8004524 <HAL_GetTick>
 800c22a:	4602      	mov	r2, r0
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	2b02      	cmp	r3, #2
 800c232:	d901      	bls.n	800c238 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c234:	2303      	movs	r3, #3
 800c236:	e006      	b.n	800c246 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c238:	4b05      	ldr	r3, [pc, #20]	; (800c250 <RCCEx_PLL2_Config+0x15c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c240:	2b00      	cmp	r3, #0
 800c242:	d0f0      	beq.n	800c226 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c244:	7bfb      	ldrb	r3, [r7, #15]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	58024400 	.word	0x58024400
 800c254:	ffff0007 	.word	0xffff0007

0800c258 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c266:	4b53      	ldr	r3, [pc, #332]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26a:	f003 0303 	and.w	r3, r3, #3
 800c26e:	2b03      	cmp	r3, #3
 800c270:	d101      	bne.n	800c276 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	e099      	b.n	800c3aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c276:	4b4f      	ldr	r3, [pc, #316]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a4e      	ldr	r2, [pc, #312]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c27c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c282:	f7f8 f94f 	bl	8004524 <HAL_GetTick>
 800c286:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c288:	e008      	b.n	800c29c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c28a:	f7f8 f94b 	bl	8004524 <HAL_GetTick>
 800c28e:	4602      	mov	r2, r0
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	2b02      	cmp	r3, #2
 800c296:	d901      	bls.n	800c29c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c298:	2303      	movs	r3, #3
 800c29a:	e086      	b.n	800c3aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c29c:	4b45      	ldr	r3, [pc, #276]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1f0      	bne.n	800c28a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c2a8:	4b42      	ldr	r3, [pc, #264]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	051b      	lsls	r3, r3, #20
 800c2b6:	493f      	ldr	r1, [pc, #252]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	628b      	str	r3, [r1, #40]	; 0x28
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	025b      	lsls	r3, r3, #9
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	431a      	orrs	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	041b      	lsls	r3, r3, #16
 800c2da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	061b      	lsls	r3, r3, #24
 800c2e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c2ec:	4931      	ldr	r1, [pc, #196]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c2f2:	4b30      	ldr	r3, [pc, #192]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	492d      	ldr	r1, [pc, #180]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c300:	4313      	orrs	r3, r2
 800c302:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c304:	4b2b      	ldr	r3, [pc, #172]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c308:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	4928      	ldr	r1, [pc, #160]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c312:	4313      	orrs	r3, r2
 800c314:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c316:	4b27      	ldr	r3, [pc, #156]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31a:	4a26      	ldr	r2, [pc, #152]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c31c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c320:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c322:	4b24      	ldr	r3, [pc, #144]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c326:	4b24      	ldr	r3, [pc, #144]	; (800c3b8 <RCCEx_PLL3_Config+0x160>)
 800c328:	4013      	ands	r3, r2
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	69d2      	ldr	r2, [r2, #28]
 800c32e:	00d2      	lsls	r2, r2, #3
 800c330:	4920      	ldr	r1, [pc, #128]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c332:	4313      	orrs	r3, r2
 800c334:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c336:	4b1f      	ldr	r3, [pc, #124]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33a:	4a1e      	ldr	r2, [pc, #120]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c33c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c340:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d106      	bne.n	800c356 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c348:	4b1a      	ldr	r3, [pc, #104]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34c:	4a19      	ldr	r2, [pc, #100]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c34e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c352:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c354:	e00f      	b.n	800c376 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d106      	bne.n	800c36a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c35c:	4b15      	ldr	r3, [pc, #84]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c360:	4a14      	ldr	r2, [pc, #80]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c362:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c366:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c368:	e005      	b.n	800c376 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c36a:	4b12      	ldr	r3, [pc, #72]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36e:	4a11      	ldr	r2, [pc, #68]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c370:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c374:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c376:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a0e      	ldr	r2, [pc, #56]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c37c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c382:	f7f8 f8cf 	bl	8004524 <HAL_GetTick>
 800c386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c388:	e008      	b.n	800c39c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c38a:	f7f8 f8cb 	bl	8004524 <HAL_GetTick>
 800c38e:	4602      	mov	r2, r0
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	2b02      	cmp	r3, #2
 800c396:	d901      	bls.n	800c39c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c398:	2303      	movs	r3, #3
 800c39a:	e006      	b.n	800c3aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c39c:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <RCCEx_PLL3_Config+0x15c>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d0f0      	beq.n	800c38a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	58024400 	.word	0x58024400
 800c3b8:	ffff0007 	.word	0xffff0007

0800c3bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d067      	beq.n	800c49e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d106      	bne.n	800c3e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7f7 fce2 	bl	8003dac <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	22ca      	movs	r2, #202	; 0xca
 800c3f6:	625a      	str	r2, [r3, #36]	; 0x24
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2253      	movs	r2, #83	; 0x53
 800c3fe:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 fa49 	bl	800c898 <RTC_EnterInitMode>
 800c406:	4603      	mov	r3, r0
 800c408:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d13b      	bne.n	800c488 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6899      	ldr	r1, [r3, #8]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	4b23      	ldr	r3, [pc, #140]	; (800c4a8 <HAL_RTC_Init+0xec>)
 800c41c:	400b      	ands	r3, r1
 800c41e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6899      	ldr	r1, [r3, #8]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685a      	ldr	r2, [r3, #4]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	431a      	orrs	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	431a      	orrs	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	430a      	orrs	r2, r1
 800c43c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	0419      	lsls	r1, r3, #16
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68da      	ldr	r2, [r3, #12]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fa51 	bl	800c8f8 <RTC_ExitInitMode>
 800c456:	4603      	mov	r3, r0
 800c458:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800c45a:	7bfb      	ldrb	r3, [r7, #15]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d113      	bne.n	800c488 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f022 0203 	bic.w	r2, r2, #3
 800c46e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	69da      	ldr	r2, [r3, #28]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	431a      	orrs	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	430a      	orrs	r2, r1
 800c486:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	22ff      	movs	r2, #255	; 0xff
 800c48e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800c490:	7bfb      	ldrb	r3, [r7, #15]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d103      	bne.n	800c49e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2201      	movs	r2, #1
 800c49a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	ff8fffbf 	.word	0xff8fffbf

0800c4ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c4ac:	b590      	push	{r4, r7, lr}
 800c4ae:	b087      	sub	sp, #28
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d101      	bne.n	800c4c6 <HAL_RTC_SetTime+0x1a>
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	e089      	b.n	800c5da <HAL_RTC_SetTime+0x12e>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2202      	movs	r2, #2
 800c4d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	22ca      	movs	r2, #202	; 0xca
 800c4dc:	625a      	str	r2, [r3, #36]	; 0x24
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2253      	movs	r2, #83	; 0x53
 800c4e4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f000 f9d6 	bl	800c898 <RTC_EnterInitMode>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c4f0:	7cfb      	ldrb	r3, [r7, #19]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d161      	bne.n	800c5ba <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d126      	bne.n	800c54a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c506:	2b00      	cmp	r3, #0
 800c508:	d102      	bne.n	800c510 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	2200      	movs	r2, #0
 800c50e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	4618      	mov	r0, r3
 800c516:	f000 fa2d 	bl	800c974 <RTC_ByteToBcd2>
 800c51a:	4603      	mov	r3, r0
 800c51c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	785b      	ldrb	r3, [r3, #1]
 800c522:	4618      	mov	r0, r3
 800c524:	f000 fa26 	bl	800c974 <RTC_ByteToBcd2>
 800c528:	4603      	mov	r3, r0
 800c52a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c52c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	789b      	ldrb	r3, [r3, #2]
 800c532:	4618      	mov	r0, r3
 800c534:	f000 fa1e 	bl	800c974 <RTC_ByteToBcd2>
 800c538:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c53a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	78db      	ldrb	r3, [r3, #3]
 800c542:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c544:	4313      	orrs	r3, r2
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	e018      	b.n	800c57c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c554:	2b00      	cmp	r3, #0
 800c556:	d102      	bne.n	800c55e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	2200      	movs	r2, #0
 800c55c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	785b      	ldrb	r3, [r3, #1]
 800c568:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c56a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c570:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	78db      	ldrb	r3, [r3, #3]
 800c576:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c578:	4313      	orrs	r3, r2
 800c57a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	6979      	ldr	r1, [r7, #20]
 800c582:	4b18      	ldr	r3, [pc, #96]	; (800c5e4 <HAL_RTC_SetTime+0x138>)
 800c584:	400b      	ands	r3, r1
 800c586:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	689a      	ldr	r2, [r3, #8]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c596:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	6899      	ldr	r1, [r3, #8]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	68da      	ldr	r2, [r3, #12]
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	431a      	orrs	r2, r3
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	430a      	orrs	r2, r1
 800c5ae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 f9a1 	bl	800c8f8 <RTC_ExitInitMode>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	22ff      	movs	r2, #255	; 0xff
 800c5c0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c5c2:	7cfb      	ldrb	r3, [r7, #19]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d103      	bne.n	800c5d0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c5d8:	7cfb      	ldrb	r3, [r7, #19]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	371c      	adds	r7, #28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd90      	pop	{r4, r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	007f7f7f 	.word	0x007f7f7f

0800c5e8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b086      	sub	sp, #24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	4b22      	ldr	r3, [pc, #136]	; (800c69c <HAL_RTC_GetTime+0xb4>)
 800c614:	4013      	ands	r3, r2
 800c616:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	0c1b      	lsrs	r3, r3, #16
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c622:	b2da      	uxtb	r2, r3
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	0a1b      	lsrs	r3, r3, #8
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c632:	b2da      	uxtb	r2, r3
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c640:	b2da      	uxtb	r2, r3
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	0d9b      	lsrs	r3, r3, #22
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	f003 0301 	and.w	r3, r3, #1
 800c650:	b2da      	uxtb	r2, r3
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d11a      	bne.n	800c692 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	4618      	mov	r0, r3
 800c662:	f000 f9a7 	bl	800c9b4 <RTC_Bcd2ToByte>
 800c666:	4603      	mov	r3, r0
 800c668:	461a      	mov	r2, r3
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	785b      	ldrb	r3, [r3, #1]
 800c672:	4618      	mov	r0, r3
 800c674:	f000 f99e 	bl	800c9b4 <RTC_Bcd2ToByte>
 800c678:	4603      	mov	r3, r0
 800c67a:	461a      	mov	r2, r3
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	789b      	ldrb	r3, [r3, #2]
 800c684:	4618      	mov	r0, r3
 800c686:	f000 f995 	bl	800c9b4 <RTC_Bcd2ToByte>
 800c68a:	4603      	mov	r3, r0
 800c68c:	461a      	mov	r2, r3
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3718      	adds	r7, #24
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	007f7f7f 	.word	0x007f7f7f

0800c6a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c6a0:	b590      	push	{r4, r7, lr}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d101      	bne.n	800c6ba <HAL_RTC_SetDate+0x1a>
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	e073      	b.n	800c7a2 <HAL_RTC_SetDate+0x102>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2202      	movs	r2, #2
 800c6c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d10e      	bne.n	800c6ee <HAL_RTC_SetDate+0x4e>
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	785b      	ldrb	r3, [r3, #1]
 800c6d4:	f003 0310 	and.w	r3, r3, #16
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d008      	beq.n	800c6ee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	785b      	ldrb	r3, [r3, #1]
 800c6e0:	f023 0310 	bic.w	r3, r3, #16
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	330a      	adds	r3, #10
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d11c      	bne.n	800c72e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	78db      	ldrb	r3, [r3, #3]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 f93b 	bl	800c974 <RTC_ByteToBcd2>
 800c6fe:	4603      	mov	r3, r0
 800c700:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	785b      	ldrb	r3, [r3, #1]
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f934 	bl	800c974 <RTC_ByteToBcd2>
 800c70c:	4603      	mov	r3, r0
 800c70e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c710:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	789b      	ldrb	r3, [r3, #2]
 800c716:	4618      	mov	r0, r3
 800c718:	f000 f92c 	bl	800c974 <RTC_ByteToBcd2>
 800c71c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c71e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c728:	4313      	orrs	r3, r2
 800c72a:	617b      	str	r3, [r7, #20]
 800c72c:	e00e      	b.n	800c74c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	78db      	ldrb	r3, [r3, #3]
 800c732:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	785b      	ldrb	r3, [r3, #1]
 800c738:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c73a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c740:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c748:	4313      	orrs	r3, r2
 800c74a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	22ca      	movs	r2, #202	; 0xca
 800c752:	625a      	str	r2, [r3, #36]	; 0x24
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2253      	movs	r2, #83	; 0x53
 800c75a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f000 f89b 	bl	800c898 <RTC_EnterInitMode>
 800c762:	4603      	mov	r3, r0
 800c764:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c766:	7cfb      	ldrb	r3, [r7, #19]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10a      	bne.n	800c782 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	6979      	ldr	r1, [r7, #20]
 800c772:	4b0e      	ldr	r3, [pc, #56]	; (800c7ac <HAL_RTC_SetDate+0x10c>)
 800c774:	400b      	ands	r3, r1
 800c776:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f000 f8bd 	bl	800c8f8 <RTC_ExitInitMode>
 800c77e:	4603      	mov	r3, r0
 800c780:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	22ff      	movs	r2, #255	; 0xff
 800c788:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c78a:	7cfb      	ldrb	r3, [r7, #19]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d103      	bne.n	800c798 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c7a0:	7cfb      	ldrb	r3, [r7, #19]


}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd90      	pop	{r4, r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	00ffff3f 	.word	0x00ffff3f

0800c7b0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	685a      	ldr	r2, [r3, #4]
 800c7c2:	4b21      	ldr	r3, [pc, #132]	; (800c848 <HAL_RTC_GetDate+0x98>)
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	0c1b      	lsrs	r3, r3, #16
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	0a1b      	lsrs	r3, r3, #8
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	f003 031f 	and.w	r3, r3, #31
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	0b5b      	lsrs	r3, r3, #13
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	f003 0307 	and.w	r3, r3, #7
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d11a      	bne.n	800c83c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	78db      	ldrb	r3, [r3, #3]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 f8d2 	bl	800c9b4 <RTC_Bcd2ToByte>
 800c810:	4603      	mov	r3, r0
 800c812:	461a      	mov	r2, r3
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	785b      	ldrb	r3, [r3, #1]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f000 f8c9 	bl	800c9b4 <RTC_Bcd2ToByte>
 800c822:	4603      	mov	r3, r0
 800c824:	461a      	mov	r2, r3
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	789b      	ldrb	r3, [r3, #2]
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 f8c0 	bl	800c9b4 <RTC_Bcd2ToByte>
 800c834:	4603      	mov	r3, r0
 800c836:	461a      	mov	r2, r3
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3718      	adds	r7, #24
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	00ffff3f 	.word	0x00ffff3f

0800c84c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	68da      	ldr	r2, [r3, #12]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c862:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800c864:	f7f7 fe5e 	bl	8004524 <HAL_GetTick>
 800c868:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c86a:	e009      	b.n	800c880 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c86c:	f7f7 fe5a 	bl	8004524 <HAL_GetTick>
 800c870:	4602      	mov	r2, r0
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c87a:	d901      	bls.n	800c880 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	e007      	b.n	800c890 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	f003 0320 	and.w	r3, r3, #32
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d0ee      	beq.n	800c86c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d11d      	bne.n	800c8ee <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c8bc:	f7f7 fe32 	bl	8004524 <HAL_GetTick>
 800c8c0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c8c2:	e00d      	b.n	800c8e0 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c8c4:	f7f7 fe2e 	bl	8004524 <HAL_GetTick>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8d2:	d905      	bls.n	800c8e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2203      	movs	r2, #3
 800c8dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d0ea      	beq.n	800c8c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800c904:	4b1a      	ldr	r3, [pc, #104]	; (800c970 <RTC_ExitInitMode+0x78>)
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	4a19      	ldr	r2, [pc, #100]	; (800c970 <RTC_ExitInitMode+0x78>)
 800c90a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c90e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c910:	4b17      	ldr	r3, [pc, #92]	; (800c970 <RTC_ExitInitMode+0x78>)
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	f003 0320 	and.w	r3, r3, #32
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10c      	bne.n	800c936 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7ff ff95 	bl	800c84c <HAL_RTC_WaitForSynchro>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d01e      	beq.n	800c966 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2203      	movs	r2, #3
 800c92c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c930:	2303      	movs	r3, #3
 800c932:	73fb      	strb	r3, [r7, #15]
 800c934:	e017      	b.n	800c966 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c936:	4b0e      	ldr	r3, [pc, #56]	; (800c970 <RTC_ExitInitMode+0x78>)
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	4a0d      	ldr	r2, [pc, #52]	; (800c970 <RTC_ExitInitMode+0x78>)
 800c93c:	f023 0320 	bic.w	r3, r3, #32
 800c940:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7ff ff82 	bl	800c84c <HAL_RTC_WaitForSynchro>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d005      	beq.n	800c95a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2203      	movs	r2, #3
 800c952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c956:	2303      	movs	r3, #3
 800c958:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c95a:	4b05      	ldr	r3, [pc, #20]	; (800c970 <RTC_ExitInitMode+0x78>)
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	4a04      	ldr	r2, [pc, #16]	; (800c970 <RTC_ExitInitMode+0x78>)
 800c960:	f043 0320 	orr.w	r3, r3, #32
 800c964:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c966:	7bfb      	ldrb	r3, [r7, #15]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	58004000 	.word	0x58004000

0800c974 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	4603      	mov	r3, r0
 800c97c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c982:	79fb      	ldrb	r3, [r7, #7]
 800c984:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c986:	e005      	b.n	800c994 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	3301      	adds	r3, #1
 800c98c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c98e:	7afb      	ldrb	r3, [r7, #11]
 800c990:	3b0a      	subs	r3, #10
 800c992:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c994:	7afb      	ldrb	r3, [r7, #11]
 800c996:	2b09      	cmp	r3, #9
 800c998:	d8f6      	bhi.n	800c988 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	011b      	lsls	r3, r3, #4
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	7afb      	ldrb	r3, [r7, #11]
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	b2db      	uxtb	r3, r3
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c9be:	79fb      	ldrb	r3, [r7, #7]
 800c9c0:	091b      	lsrs	r3, r3, #4
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	0092      	lsls	r2, r2, #2
 800c9c8:	4413      	add	r3, r2
 800c9ca:	005b      	lsls	r3, r3, #1
 800c9cc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c9ce:	79fb      	ldrb	r3, [r7, #7]
 800c9d0:	f003 030f 	and.w	r3, r3, #15
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	7bfb      	ldrb	r3, [r7, #15]
 800c9d8:	4413      	add	r3, r2
 800c9da:	b2db      	uxtb	r3, r3
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08a      	sub	sp, #40	; 0x28
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d101      	bne.n	800c9fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e07c      	b.n	800caf4 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d10c      	bne.n	800ca20 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d102      	bne.n	800ca1a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2202      	movs	r2, #2
 800ca18:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7f7 f9e0 	bl	8003de0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2203      	movs	r2, #3
 800ca24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f867 	bl	800cafc <HAL_SD_InitCard>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d001      	beq.n	800ca38 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	e05d      	b.n	800caf4 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ca38:	f107 0308 	add.w	r3, r7, #8
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f001 f8ce 	bl	800dbe0 <HAL_SD_GetCardStatus>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e052      	b.n	800caf4 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ca4e:	7e3b      	ldrb	r3, [r7, #24]
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ca54:	7e7b      	ldrb	r3, [r7, #25]
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d10a      	bne.n	800ca78 <HAL_SD_Init+0x90>
 800ca62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d102      	bne.n	800ca6e <HAL_SD_Init+0x86>
 800ca68:	6a3b      	ldr	r3, [r7, #32]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d004      	beq.n	800ca78 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca74:	65da      	str	r2, [r3, #92]	; 0x5c
 800ca76:	e00b      	b.n	800ca90 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d104      	bne.n	800ca8a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca86:	65da      	str	r2, [r3, #92]	; 0x5c
 800ca88:	e002      	b.n	800ca90 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	4619      	mov	r1, r3
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f001 f984 	bl	800dda4 <HAL_SD_ConfigWideBusOperation>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d001      	beq.n	800caa6 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	e026      	b.n	800caf4 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800caa6:	f7f7 fd3d 	bl	8004524 <HAL_GetTick>
 800caaa:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800caac:	e011      	b.n	800cad2 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800caae:	f7f7 fd39 	bl	8004524 <HAL_GetTick>
 800cab2:	4602      	mov	r2, r0
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	1ad3      	subs	r3, r2, r3
 800cab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cabc:	d109      	bne.n	800cad2 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cac4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800cace:	2303      	movs	r3, #3
 800cad0:	e010      	b.n	800caf4 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f001 fa10 	bl	800def8 <HAL_SD_GetCardState>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b04      	cmp	r3, #4
 800cadc:	d1e7      	bne.n	800caae <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2201      	movs	r2, #1
 800caee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800caf2:	2300      	movs	r3, #0
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3728      	adds	r7, #40	; 0x28
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cafc:	b5b0      	push	{r4, r5, r7, lr}
 800cafe:	b08e      	sub	sp, #56	; 0x38
 800cb00:	af04      	add	r7, sp, #16
 800cb02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cb04:	2300      	movs	r3, #0
 800cb06:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cb10:	2300      	movs	r3, #0
 800cb12:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cb14:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cb18:	f7fe fc7a 	bl	800b410 <HAL_RCCEx_GetPeriphCLKFreq>
 800cb1c:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb20:	0a1b      	lsrs	r3, r3, #8
 800cb22:	4a40      	ldr	r2, [pc, #256]	; (800cc24 <HAL_SD_InitCard+0x128>)
 800cb24:	fba2 2303 	umull	r2, r3, r2, r3
 800cb28:	091b      	lsrs	r3, r3, #4
 800cb2a:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	699b      	ldr	r3, [r3, #24]
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d107      	bne.n	800cb44 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f042 0210 	orr.w	r2, r2, #16
 800cb42:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681d      	ldr	r5, [r3, #0]
 800cb48:	466c      	mov	r4, sp
 800cb4a:	f107 0314 	add.w	r3, r7, #20
 800cb4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb56:	f107 0308 	add.w	r3, r7, #8
 800cb5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	f004 f9f5 	bl	8010f4c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4618      	mov	r0, r3
 800cb68:	f004 fa38 	bl	8010fdc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	005b      	lsls	r3, r3, #1
 800cb70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb72:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb76:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d008      	beq.n	800cb90 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800cb7e:	4a2a      	ldr	r2, [pc, #168]	; (800cc28 <HAL_SD_InitCard+0x12c>)
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb82:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb86:	3301      	adds	r3, #1
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7f7 fcd7 	bl	800453c <HAL_Delay>
 800cb8e:	e002      	b.n	800cb96 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800cb90:	2002      	movs	r0, #2
 800cb92:	f7f7 fcd3 	bl	800453c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f001 fa8c 	bl	800e0b4 <SD_PowerON>
 800cb9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb9e:	6a3b      	ldr	r3, [r7, #32]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00b      	beq.n	800cbbc <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2201      	movs	r2, #1
 800cba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbb0:	6a3b      	ldr	r3, [r7, #32]
 800cbb2:	431a      	orrs	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e02e      	b.n	800cc1a <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f001 f9bb 	bl	800df38 <SD_InitCard>
 800cbc2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbc4:	6a3b      	ldr	r3, [r7, #32]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00b      	beq.n	800cbe2 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbd6:	6a3b      	ldr	r3, [r7, #32]
 800cbd8:	431a      	orrs	r2, r3
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e01b      	b.n	800cc1a <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cbea:	4618      	mov	r0, r3
 800cbec:	f004 fa8c 	bl	8011108 <SDMMC_CmdBlockLength>
 800cbf0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbf2:	6a3b      	ldr	r3, [r7, #32]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00f      	beq.n	800cc18 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a0b      	ldr	r2, [pc, #44]	; (800cc2c <HAL_SD_InitCard+0x130>)
 800cbfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	431a      	orrs	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	e000      	b.n	800cc1a <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3728      	adds	r7, #40	; 0x28
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bdb0      	pop	{r4, r5, r7, pc}
 800cc22:	bf00      	nop
 800cc24:	014f8b59 	.word	0x014f8b59
 800cc28:	00012110 	.word	0x00012110
 800cc2c:	1fe00fff 	.word	0x1fe00fff

0800cc30 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b092      	sub	sp, #72	; 0x48
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
 800cc3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cc3e:	f7f7 fc71 	bl	8004524 <HAL_GetTick>
 800cc42:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d107      	bne.n	800cc62 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e167      	b.n	800cf32 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	f040 815a 	bne.w	800cf24 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2200      	movs	r2, #0
 800cc74:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cc76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	441a      	add	r2, r3
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d907      	bls.n	800cc94 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc88:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cc90:	2301      	movs	r3, #1
 800cc92:	e14e      	b.n	800cf32 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2203      	movs	r2, #3
 800cc98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2200      	movs	r2, #0
 800cca2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d002      	beq.n	800ccb2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800ccac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccae:	025b      	lsls	r3, r3, #9
 800ccb0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ccb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	025b      	lsls	r3, r3, #9
 800ccbc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ccbe:	2390      	movs	r3, #144	; 0x90
 800ccc0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ccc2:	2302      	movs	r3, #2
 800ccc4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ccca:	2300      	movs	r3, #0
 800cccc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f107 0214 	add.w	r2, r7, #20
 800ccd6:	4611      	mov	r1, r2
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f004 f9e9 	bl	80110b0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68da      	ldr	r2, [r3, #12]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccec:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d90a      	bls.n	800cd0a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd00:	4618      	mov	r0, r3
 800cd02:	f004 fa47 	bl	8011194 <SDMMC_CmdReadMultiBlock>
 800cd06:	6478      	str	r0, [r7, #68]	; 0x44
 800cd08:	e009      	b.n	800cd1e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd16:	4618      	mov	r0, r3
 800cd18:	f004 fa19 	bl	801114e <SDMMC_CmdReadSingleBlock>
 800cd1c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d012      	beq.n	800cd4a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a84      	ldr	r2, [pc, #528]	; (800cf3c <HAL_SD_ReadBlocks+0x30c>)
 800cd2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd32:	431a      	orrs	r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e0f3      	b.n	800cf32 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd4e:	e058      	b.n	800ce02 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d033      	beq.n	800cdc6 <HAL_SD_ReadBlocks+0x196>
 800cd5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd60:	2b1f      	cmp	r3, #31
 800cd62:	d930      	bls.n	800cdc6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cd64:	2300      	movs	r3, #0
 800cd66:	643b      	str	r3, [r7, #64]	; 0x40
 800cd68:	e027      	b.n	800cdba <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f004 f916 	bl	8010fa0 <SDMMC_ReadFIFO>
 800cd74:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd80:	3301      	adds	r3, #1
 800cd82:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd86:	0a1b      	lsrs	r3, r3, #8
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cd8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd90:	3301      	adds	r3, #1
 800cd92:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd96:	0c1b      	lsrs	r3, r3, #16
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda0:	3301      	adds	r3, #1
 800cda2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda6:	0e1b      	lsrs	r3, r3, #24
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800cdb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	643b      	str	r3, [r7, #64]	; 0x40
 800cdba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdbc:	2b07      	cmp	r3, #7
 800cdbe:	d9d4      	bls.n	800cd6a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800cdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc2:	3b20      	subs	r3, #32
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cdc6:	f7f7 fbad 	bl	8004524 <HAL_GetTick>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d902      	bls.n	800cddc <HAL_SD_ReadBlocks+0x1ac>
 800cdd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d112      	bne.n	800ce02 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a56      	ldr	r2, [pc, #344]	; (800cf3c <HAL_SD_ReadBlocks+0x30c>)
 800cde2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e097      	b.n	800cf32 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce08:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d09f      	beq.n	800cd50 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68da      	ldr	r2, [r3, #12]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce1e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d022      	beq.n	800ce74 <HAL_SD_ReadBlocks+0x244>
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d91f      	bls.n	800ce74 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce38:	2b03      	cmp	r3, #3
 800ce3a:	d01b      	beq.n	800ce74 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f004 fa11 	bl	8011268 <SDMMC_CmdStopTransfer>
 800ce46:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d012      	beq.n	800ce74 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a3a      	ldr	r2, [pc, #232]	; (800cf3c <HAL_SD_ReadBlocks+0x30c>)
 800ce54:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce5c:	431a      	orrs	r2, r3
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2201      	movs	r2, #1
 800ce66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800ce70:	2301      	movs	r3, #1
 800ce72:	e05e      	b.n	800cf32 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce7a:	f003 0308 	and.w	r3, r3, #8
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d012      	beq.n	800cea8 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4a2d      	ldr	r2, [pc, #180]	; (800cf3c <HAL_SD_ReadBlocks+0x30c>)
 800ce88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce8e:	f043 0208 	orr.w	r2, r3, #8
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2200      	movs	r2, #0
 800cea2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cea4:	2301      	movs	r3, #1
 800cea6:	e044      	b.n	800cf32 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceae:	f003 0302 	and.w	r3, r3, #2
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d012      	beq.n	800cedc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a20      	ldr	r2, [pc, #128]	; (800cf3c <HAL_SD_ReadBlocks+0x30c>)
 800cebc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec2:	f043 0202 	orr.w	r2, r3, #2
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2201      	movs	r2, #1
 800cece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ced8:	2301      	movs	r3, #1
 800ceda:	e02a      	b.n	800cf32 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cee2:	f003 0320 	and.w	r3, r3, #32
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d012      	beq.n	800cf10 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a13      	ldr	r2, [pc, #76]	; (800cf3c <HAL_SD_ReadBlocks+0x30c>)
 800cef0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef6:	f043 0220 	orr.w	r2, r3, #32
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2201      	movs	r2, #1
 800cf02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e010      	b.n	800cf32 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a0a      	ldr	r2, [pc, #40]	; (800cf40 <HAL_SD_ReadBlocks+0x310>)
 800cf16:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	e006      	b.n	800cf32 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
  }
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3748      	adds	r7, #72	; 0x48
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	1fe00fff 	.word	0x1fe00fff
 800cf40:	18000f3a 	.word	0x18000f3a

0800cf44 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b092      	sub	sp, #72	; 0x48
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
 800cf50:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cf52:	f7f7 fae7 	bl	8004524 <HAL_GetTick>
 800cf56:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d107      	bne.n	800cf76 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e16b      	b.n	800d24e <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	f040 815e 	bne.w	800d240 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2200      	movs	r2, #0
 800cf88:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cf8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	441a      	add	r2, r3
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d907      	bls.n	800cfa8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e152      	b.n	800d24e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2203      	movs	r2, #3
 800cfac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d002      	beq.n	800cfc6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	025b      	lsls	r3, r3, #9
 800cfc4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfc6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfca:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	025b      	lsls	r3, r3, #9
 800cfd0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cfd2:	2390      	movs	r3, #144	; 0x90
 800cfd4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f107 0218 	add.w	r2, r7, #24
 800cfea:	4611      	mov	r1, r2
 800cfec:	4618      	mov	r0, r3
 800cfee:	f004 f85f 	bl	80110b0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	68da      	ldr	r2, [r3, #12]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d000:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	2b01      	cmp	r3, #1
 800d006:	d90a      	bls.n	800d01e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2220      	movs	r2, #32
 800d00c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d014:	4618      	mov	r0, r3
 800d016:	f004 f903 	bl	8011220 <SDMMC_CmdWriteMultiBlock>
 800d01a:	6478      	str	r0, [r7, #68]	; 0x44
 800d01c:	e009      	b.n	800d032 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2210      	movs	r2, #16
 800d022:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d02a:	4618      	mov	r0, r3
 800d02c:	f004 f8d5 	bl	80111da <SDMMC_CmdWriteSingleBlock>
 800d030:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d034:	2b00      	cmp	r3, #0
 800d036:	d012      	beq.n	800d05e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a86      	ldr	r2, [pc, #536]	; (800d258 <HAL_SD_WriteBlocks+0x314>)
 800d03e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d046:	431a      	orrs	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2201      	movs	r2, #1
 800d050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2200      	movs	r2, #0
 800d058:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e0f7      	b.n	800d24e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d062:	e05c      	b.n	800d11e <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d06a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d037      	beq.n	800d0e2 <HAL_SD_WriteBlocks+0x19e>
 800d072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d074:	2b1f      	cmp	r3, #31
 800d076:	d934      	bls.n	800d0e2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d078:	2300      	movs	r3, #0
 800d07a:	643b      	str	r3, [r7, #64]	; 0x40
 800d07c:	e02b      	b.n	800d0d6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800d07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d086:	3301      	adds	r3, #1
 800d088:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	021a      	lsls	r2, r3, #8
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	4313      	orrs	r3, r2
 800d094:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d098:	3301      	adds	r3, #1
 800d09a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	041a      	lsls	r2, r3, #16
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	061a      	lsls	r2, r3, #24
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0bc:	3301      	adds	r3, #1
 800d0be:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f107 0214 	add.w	r2, r7, #20
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f003 ff75 	bl	8010fba <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	643b      	str	r3, [r7, #64]	; 0x40
 800d0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d8:	2b07      	cmp	r3, #7
 800d0da:	d9d0      	bls.n	800d07e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0de:	3b20      	subs	r3, #32
 800d0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d0e2:	f7f7 fa1f 	bl	8004524 <HAL_GetTick>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d902      	bls.n	800d0f8 <HAL_SD_WriteBlocks+0x1b4>
 800d0f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d112      	bne.n	800d11e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a56      	ldr	r2, [pc, #344]	; (800d258 <HAL_SD_WriteBlocks+0x314>)
 800d0fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d106:	431a      	orrs	r2, r3
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2200      	movs	r2, #0
 800d118:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d11a:	2303      	movs	r3, #3
 800d11c:	e097      	b.n	800d24e <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d124:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d09b      	beq.n	800d064 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	68da      	ldr	r2, [r3, #12]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d13a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d146:	2b00      	cmp	r3, #0
 800d148:	d022      	beq.n	800d190 <HAL_SD_WriteBlocks+0x24c>
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d91f      	bls.n	800d190 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d154:	2b03      	cmp	r3, #3
 800d156:	d01b      	beq.n	800d190 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4618      	mov	r0, r3
 800d15e:	f004 f883 	bl	8011268 <SDMMC_CmdStopTransfer>
 800d162:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d166:	2b00      	cmp	r3, #0
 800d168:	d012      	beq.n	800d190 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a3a      	ldr	r2, [pc, #232]	; (800d258 <HAL_SD_WriteBlocks+0x314>)
 800d170:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d178:	431a      	orrs	r2, r3
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2201      	movs	r2, #1
 800d182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2200      	movs	r2, #0
 800d18a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d18c:	2301      	movs	r3, #1
 800d18e:	e05e      	b.n	800d24e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d196:	f003 0308 	and.w	r3, r3, #8
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d012      	beq.n	800d1c4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a2d      	ldr	r2, [pc, #180]	; (800d258 <HAL_SD_WriteBlocks+0x314>)
 800d1a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1aa:	f043 0208 	orr.w	r2, r3, #8
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e044      	b.n	800d24e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ca:	f003 0302 	and.w	r3, r3, #2
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d012      	beq.n	800d1f8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a20      	ldr	r2, [pc, #128]	; (800d258 <HAL_SD_WriteBlocks+0x314>)
 800d1d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1de:	f043 0202 	orr.w	r2, r3, #2
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	e02a      	b.n	800d24e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1fe:	f003 0310 	and.w	r3, r3, #16
 800d202:	2b00      	cmp	r3, #0
 800d204:	d012      	beq.n	800d22c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a13      	ldr	r2, [pc, #76]	; (800d258 <HAL_SD_WriteBlocks+0x314>)
 800d20c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d212:	f043 0210 	orr.w	r2, r3, #16
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2200      	movs	r2, #0
 800d226:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d228:	2301      	movs	r3, #1
 800d22a:	e010      	b.n	800d24e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a0a      	ldr	r2, [pc, #40]	; (800d25c <HAL_SD_WriteBlocks+0x318>)
 800d232:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2201      	movs	r2, #1
 800d238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	e006      	b.n	800d24e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d244:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
  }
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3748      	adds	r7, #72	; 0x48
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	1fe00fff 	.word	0x1fe00fff
 800d25c:	18000f3a 	.word	0x18000f3a

0800d260 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b08c      	sub	sp, #48	; 0x30
 800d264:	af00      	add	r7, sp, #0
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	607a      	str	r2, [r7, #4]
 800d26c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d107      	bne.n	800d288 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	e08d      	b.n	800d3a4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	2b01      	cmp	r3, #1
 800d292:	f040 8086 	bne.w	800d3a2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2200      	movs	r2, #0
 800d29a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d29c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	441a      	add	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d907      	bls.n	800d2ba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e074      	b.n	800d3a4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2203      	movs	r2, #3
 800d2be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	025a      	lsls	r2, r3, #9
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d002      	beq.n	800d2e6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e2:	025b      	lsls	r3, r3, #9
 800d2e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ea:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	025b      	lsls	r3, r3, #9
 800d2f0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d2f2:	2390      	movs	r3, #144	; 0x90
 800d2f4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2f6:	2302      	movs	r3, #2
 800d2f8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d2fe:	2300      	movs	r3, #0
 800d300:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f107 0210 	add.w	r2, r7, #16
 800d30a:	4611      	mov	r1, r2
 800d30c:	4618      	mov	r0, r3
 800d30e:	f003 fecf 	bl	80110b0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	68da      	ldr	r2, [r3, #12]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d320:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	68ba      	ldr	r2, [r7, #8]
 800d328:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2201      	movs	r2, #1
 800d330:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	2b01      	cmp	r3, #1
 800d336:	d90a      	bls.n	800d34e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2282      	movs	r2, #130	; 0x82
 800d33c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d344:	4618      	mov	r0, r3
 800d346:	f003 ff25 	bl	8011194 <SDMMC_CmdReadMultiBlock>
 800d34a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d34c:	e009      	b.n	800d362 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2281      	movs	r2, #129	; 0x81
 800d352:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d35a:	4618      	mov	r0, r3
 800d35c:	f003 fef7 	bl	801114e <SDMMC_CmdReadSingleBlock>
 800d360:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d364:	2b00      	cmp	r3, #0
 800d366:	d012      	beq.n	800d38e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a0f      	ldr	r2, [pc, #60]	; (800d3ac <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d36e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	431a      	orrs	r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2200      	movs	r2, #0
 800d388:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	e00a      	b.n	800d3a4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d39c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	e000      	b.n	800d3a4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d3a2:	2302      	movs	r3, #2
  }
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3730      	adds	r7, #48	; 0x30
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	1fe00fff 	.word	0x1fe00fff

0800d3b0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b08c      	sub	sp, #48	; 0x30
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	607a      	str	r2, [r7, #4]
 800d3bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d107      	bne.n	800d3d8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e08d      	b.n	800d4f4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	f040 8086 	bne.w	800d4f2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d3ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	441a      	add	r2, r3
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d907      	bls.n	800d40a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	e074      	b.n	800d4f4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2203      	movs	r2, #3
 800d40e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2200      	movs	r2, #0
 800d418:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	025a      	lsls	r2, r3, #9
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d002      	beq.n	800d436 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d432:	025b      	lsls	r3, r3, #9
 800d434:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d436:	f04f 33ff 	mov.w	r3, #4294967295
 800d43a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	025b      	lsls	r3, r3, #9
 800d440:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d442:	2390      	movs	r3, #144	; 0x90
 800d444:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d446:	2300      	movs	r3, #0
 800d448:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d44e:	2300      	movs	r3, #0
 800d450:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f107 0210 	add.w	r2, r7, #16
 800d45a:	4611      	mov	r1, r2
 800d45c:	4618      	mov	r0, r3
 800d45e:	f003 fe27 	bl	80110b0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	68da      	ldr	r2, [r3, #12]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d470:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2201      	movs	r2, #1
 800d480:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d90a      	bls.n	800d49e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	22a0      	movs	r2, #160	; 0xa0
 800d48c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d494:	4618      	mov	r0, r3
 800d496:	f003 fec3 	bl	8011220 <SDMMC_CmdWriteMultiBlock>
 800d49a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d49c:	e009      	b.n	800d4b2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2290      	movs	r2, #144	; 0x90
 800d4a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f003 fe95 	bl	80111da <SDMMC_CmdWriteSingleBlock>
 800d4b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d012      	beq.n	800d4de <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a0f      	ldr	r2, [pc, #60]	; (800d4fc <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d4be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	431a      	orrs	r2, r3
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e00a      	b.n	800d4f4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d4ec:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	e000      	b.n	800d4f4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d4f2:	2302      	movs	r3, #2
  }
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3730      	adds	r7, #48	; 0x30
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	1fe00fff 	.word	0x1fe00fff

0800d500 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d008      	beq.n	800d52e <HAL_SD_IRQHandler+0x2e>
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f003 0308 	and.w	r3, r3, #8
 800d522:	2b00      	cmp	r3, #0
 800d524:	d003      	beq.n	800d52e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f001 f92a 	bl	800e780 <SD_Read_IT>
 800d52c:	e19a      	b.n	800d864 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f000 80ac 	beq.w	800d696 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d546:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	4b9d      	ldr	r3, [pc, #628]	; (800d7c8 <HAL_SD_IRQHandler+0x2c8>)
 800d554:	400b      	ands	r3, r1
 800d556:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d566:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	68da      	ldr	r2, [r3, #12]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d576:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f003 0308 	and.w	r3, r3, #8
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d038      	beq.n	800d5f4 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f003 0302 	and.w	r3, r3, #2
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d104      	bne.n	800d596 <HAL_SD_IRQHandler+0x96>
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f003 0320 	and.w	r3, r3, #32
 800d592:	2b00      	cmp	r3, #0
 800d594:	d011      	beq.n	800d5ba <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f003 fe64 	bl	8011268 <SDMMC_CmdStopTransfer>
 800d5a0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d008      	beq.n	800d5ba <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	431a      	orrs	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 f959 	bl	800d86c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a83      	ldr	r2, [pc, #524]	; (800d7cc <HAL_SD_IRQHandler+0x2cc>)
 800d5c0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f003 0301 	and.w	r3, r3, #1
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d104      	bne.n	800d5e4 <HAL_SD_IRQHandler+0xe4>
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f003 0302 	and.w	r3, r3, #2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d003      	beq.n	800d5ec <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f005 fe55 	bl	8013294 <HAL_SD_RxCpltCallback>
 800d5ea:	e13b      	b.n	800d864 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f005 fe47 	bl	8013280 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d5f2:	e137      	b.n	800d864 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f000 8132 	beq.w	800d864 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2200      	movs	r2, #0
 800d606:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2200      	movs	r2, #0
 800d60e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2200      	movs	r2, #0
 800d616:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f003 0302 	and.w	r3, r3, #2
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d104      	bne.n	800d62c <HAL_SD_IRQHandler+0x12c>
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f003 0320 	and.w	r3, r3, #32
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d011      	beq.n	800d650 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4618      	mov	r0, r3
 800d632:	f003 fe19 	bl	8011268 <SDMMC_CmdStopTransfer>
 800d636:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d008      	beq.n	800d650 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	431a      	orrs	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 f90e 	bl	800d86c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2201      	movs	r2, #1
 800d654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f003 0310 	and.w	r3, r3, #16
 800d664:	2b00      	cmp	r3, #0
 800d666:	d104      	bne.n	800d672 <HAL_SD_IRQHandler+0x172>
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f003 0320 	and.w	r3, r3, #32
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d002      	beq.n	800d678 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f005 fe04 	bl	8013280 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f003 0301 	and.w	r3, r3, #1
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d105      	bne.n	800d68e <HAL_SD_IRQHandler+0x18e>
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f003 0302 	and.w	r3, r3, #2
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f000 80eb 	beq.w	800d864 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f005 fe00 	bl	8013294 <HAL_SD_RxCpltCallback>
}
 800d694:	e0e6      	b.n	800d864 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d69c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d008      	beq.n	800d6b6 <HAL_SD_IRQHandler+0x1b6>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f003 0308 	and.w	r3, r3, #8
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d003      	beq.n	800d6b6 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f001 f8ac 	bl	800e80c <SD_Write_IT>
 800d6b4:	e0d6      	b.n	800d864 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6bc:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f000 80a2 	beq.w	800d80a <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6cc:	f003 0302 	and.w	r3, r3, #2
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d005      	beq.n	800d6e0 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d8:	f043 0202 	orr.w	r2, r3, #2
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e6:	f003 0308 	and.w	r3, r3, #8
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d005      	beq.n	800d6fa <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f2:	f043 0208 	orr.w	r2, r3, #8
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d700:	f003 0320 	and.w	r3, r3, #32
 800d704:	2b00      	cmp	r3, #0
 800d706:	d005      	beq.n	800d714 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d70c:	f043 0220 	orr.w	r2, r3, #32
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71a:	f003 0310 	and.w	r3, r3, #16
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d005      	beq.n	800d72e <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d726:	f043 0210 	orr.w	r2, r3, #16
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a26      	ldr	r2, [pc, #152]	; (800d7cc <HAL_SD_IRQHandler+0x2cc>)
 800d734:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d744:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	68da      	ldr	r2, [r3, #12]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d754:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d764:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	68da      	ldr	r2, [r3, #12]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d774:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f003 fd74 	bl	8011268 <SDMMC_CmdStopTransfer>
 800d780:	4602      	mov	r2, r0
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d786:	431a      	orrs	r2, r3
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	68da      	ldr	r2, [r3, #12]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d79a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7a4:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f003 0308 	and.w	r3, r3, #8
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00f      	beq.n	800d7d0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 f854 	bl	800d86c <HAL_SD_ErrorCallback>
}
 800d7c4:	e04e      	b.n	800d864 <HAL_SD_IRQHandler+0x364>
 800d7c6:	bf00      	nop
 800d7c8:	ffff3ec5 	.word	0xffff3ec5
 800d7cc:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d044      	beq.n	800d864 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d040      	beq.n	800d864 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d7f0:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f832 	bl	800d86c <HAL_SD_ErrorCallback>
}
 800d808:	e02c      	b.n	800d864 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d814:	2b00      	cmp	r3, #0
 800d816:	d025      	beq.n	800d864 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d820:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d828:	f003 0304 	and.w	r3, r3, #4
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10c      	bne.n	800d84a <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f003 0320 	and.w	r3, r3, #32
 800d836:	2b00      	cmp	r3, #0
 800d838:	d003      	beq.n	800d842 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f001 f84e 	bl	800e8dc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d840:	e010      	b.n	800d864 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f001 f836 	bl	800e8b4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d848:	e00c      	b.n	800d864 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f003 0320 	and.w	r3, r3, #32
 800d850:	2b00      	cmp	r3, #0
 800d852:	d003      	beq.n	800d85c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f001 f837 	bl	800e8c8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d85a:	e003      	b.n	800d864 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f001 f81f 	bl	800e8a0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d862:	e7ff      	b.n	800d864 <HAL_SD_IRQHandler+0x364>
 800d864:	bf00      	nop
 800d866:	3710      	adds	r7, #16
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d874:	bf00      	nop
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	4603      	mov	r3, r0
 800d888:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800d88a:	bf00      	nop
 800d88c:	370c      	adds	r7, #12
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
	...

0800d898 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8a6:	0f9b      	lsrs	r3, r3, #30
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8b2:	0e9b      	lsrs	r3, r3, #26
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 030f 	and.w	r3, r3, #15
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8c4:	0e1b      	lsrs	r3, r3, #24
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 0303 	and.w	r3, r3, #3
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8d6:	0c1b      	lsrs	r3, r3, #16
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8e2:	0a1b      	lsrs	r3, r3, #8
 800d8e4:	b2da      	uxtb	r2, r3
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8f8:	0d1b      	lsrs	r3, r3, #20
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d904:	0c1b      	lsrs	r3, r3, #16
 800d906:	b2db      	uxtb	r3, r3
 800d908:	f003 030f 	and.w	r3, r3, #15
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d916:	0bdb      	lsrs	r3, r3, #15
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	f003 0301 	and.w	r3, r3, #1
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d928:	0b9b      	lsrs	r3, r3, #14
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	f003 0301 	and.w	r3, r3, #1
 800d930:	b2da      	uxtb	r2, r3
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d93a:	0b5b      	lsrs	r3, r3, #13
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	b2da      	uxtb	r2, r3
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d94c:	0b1b      	lsrs	r3, r3, #12
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	b2da      	uxtb	r2, r3
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	2200      	movs	r2, #0
 800d95e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d964:	2b00      	cmp	r3, #0
 800d966:	d163      	bne.n	800da30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d96c:	009a      	lsls	r2, r3, #2
 800d96e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d972:	4013      	ands	r3, r2
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d978:	0f92      	lsrs	r2, r2, #30
 800d97a:	431a      	orrs	r2, r3
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d984:	0edb      	lsrs	r3, r3, #27
 800d986:	b2db      	uxtb	r3, r3
 800d988:	f003 0307 	and.w	r3, r3, #7
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d996:	0e1b      	lsrs	r3, r3, #24
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	f003 0307 	and.w	r3, r3, #7
 800d99e:	b2da      	uxtb	r2, r3
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9a8:	0d5b      	lsrs	r3, r3, #21
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	f003 0307 	and.w	r3, r3, #7
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9ba:	0c9b      	lsrs	r3, r3, #18
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	f003 0307 	and.w	r3, r3, #7
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9cc:	0bdb      	lsrs	r3, r3, #15
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	f003 0307 	and.w	r3, r3, #7
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	1c5a      	adds	r2, r3, #1
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	7e1b      	ldrb	r3, [r3, #24]
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	f003 0307 	and.w	r3, r3, #7
 800d9ee:	3302      	adds	r3, #2
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d9fa:	fb02 f203 	mul.w	r2, r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	7a1b      	ldrb	r3, [r3, #8]
 800da06:	b2db      	uxtb	r3, r3
 800da08:	f003 030f 	and.w	r3, r3, #15
 800da0c:	2201      	movs	r2, #1
 800da0e:	409a      	lsls	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800da1c:	0a52      	lsrs	r2, r2, #9
 800da1e:	fb02 f203 	mul.w	r2, r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da2c:	659a      	str	r2, [r3, #88]	; 0x58
 800da2e:	e031      	b.n	800da94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da34:	2b01      	cmp	r3, #1
 800da36:	d11d      	bne.n	800da74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da3c:	041b      	lsls	r3, r3, #16
 800da3e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da46:	0c1b      	lsrs	r3, r3, #16
 800da48:	431a      	orrs	r2, r3
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	3301      	adds	r3, #1
 800da54:	029a      	lsls	r2, r3, #10
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da68:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	659a      	str	r2, [r3, #88]	; 0x58
 800da72:	e00f      	b.n	800da94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a58      	ldr	r2, [pc, #352]	; (800dbdc <HAL_SD_GetCardCSD+0x344>)
 800da7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800da90:	2301      	movs	r3, #1
 800da92:	e09d      	b.n	800dbd0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da98:	0b9b      	lsrs	r3, r3, #14
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	f003 0301 	and.w	r3, r3, #1
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daaa:	09db      	lsrs	r3, r3, #7
 800daac:	b2db      	uxtb	r3, r3
 800daae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dab2:	b2da      	uxtb	r2, r3
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dac2:	b2da      	uxtb	r2, r3
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dacc:	0fdb      	lsrs	r3, r3, #31
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad8:	0f5b      	lsrs	r3, r3, #29
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	f003 0303 	and.w	r3, r3, #3
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daea:	0e9b      	lsrs	r3, r3, #26
 800daec:	b2db      	uxtb	r3, r3
 800daee:	f003 0307 	and.w	r3, r3, #7
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dafc:	0d9b      	lsrs	r3, r3, #22
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	f003 030f 	and.w	r3, r3, #15
 800db04:	b2da      	uxtb	r2, r3
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db0e:	0d5b      	lsrs	r3, r3, #21
 800db10:	b2db      	uxtb	r3, r3
 800db12:	f003 0301 	and.w	r3, r3, #1
 800db16:	b2da      	uxtb	r2, r3
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	2200      	movs	r2, #0
 800db22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db2a:	0c1b      	lsrs	r3, r3, #16
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	f003 0301 	and.w	r3, r3, #1
 800db32:	b2da      	uxtb	r2, r3
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db3e:	0bdb      	lsrs	r3, r3, #15
 800db40:	b2db      	uxtb	r3, r3
 800db42:	f003 0301 	and.w	r3, r3, #1
 800db46:	b2da      	uxtb	r2, r3
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db52:	0b9b      	lsrs	r3, r3, #14
 800db54:	b2db      	uxtb	r3, r3
 800db56:	f003 0301 	and.w	r3, r3, #1
 800db5a:	b2da      	uxtb	r2, r3
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db66:	0b5b      	lsrs	r3, r3, #13
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	f003 0301 	and.w	r3, r3, #1
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db7a:	0b1b      	lsrs	r3, r3, #12
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	f003 0301 	and.w	r3, r3, #1
 800db82:	b2da      	uxtb	r2, r3
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db8e:	0a9b      	lsrs	r3, r3, #10
 800db90:	b2db      	uxtb	r3, r3
 800db92:	f003 0303 	and.w	r3, r3, #3
 800db96:	b2da      	uxtb	r2, r3
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba2:	0a1b      	lsrs	r3, r3, #8
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	f003 0303 	and.w	r3, r3, #3
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbb6:	085b      	lsrs	r3, r3, #1
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbbe:	b2da      	uxtb	r2, r3
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dbce:	2300      	movs	r3, #0
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	370c      	adds	r7, #12
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr
 800dbdc:	1fe00fff 	.word	0x1fe00fff

0800dbe0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b094      	sub	sp, #80	; 0x50
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dbea:	2300      	movs	r3, #0
 800dbec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dbf0:	f107 0308 	add.w	r3, r7, #8
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fb64 	bl	800e2c4 <SD_SendSDStatus>
 800dbfc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d011      	beq.n	800dc28 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a4f      	ldr	r2, [pc, #316]	; (800dd48 <HAL_SD_GetCardStatus+0x168>)
 800dc0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc12:	431a      	orrs	r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dc20:	2301      	movs	r3, #1
 800dc22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dc26:	e070      	b.n	800dd0a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	099b      	lsrs	r3, r3, #6
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	f003 0303 	and.w	r3, r3, #3
 800dc32:	b2da      	uxtb	r2, r3
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	095b      	lsrs	r3, r3, #5
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	f003 0301 	and.w	r3, r3, #1
 800dc42:	b2da      	uxtb	r2, r3
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	0a1b      	lsrs	r3, r3, #8
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	0e1b      	lsrs	r3, r3, #24
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	061a      	lsls	r2, r3, #24
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	021b      	lsls	r3, r3, #8
 800dc6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc6e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	0a1b      	lsrs	r3, r3, #8
 800dc74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc78:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	0e1b      	lsrs	r3, r3, #24
 800dc7e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	b2da      	uxtb	r2, r3
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	0a1b      	lsrs	r3, r3, #8
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	0d1b      	lsrs	r3, r3, #20
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	f003 030f 	and.w	r3, r3, #15
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	0c1b      	lsrs	r3, r3, #16
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	0a9b      	lsrs	r3, r3, #10
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	0a1b      	lsrs	r3, r3, #8
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	f003 0303 	and.w	r3, r3, #3
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	091b      	lsrs	r3, r3, #4
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	f003 030f 	and.w	r3, r3, #15
 800dcec:	b2da      	uxtb	r2, r3
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	f003 030f 	and.w	r3, r3, #15
 800dcfa:	b2da      	uxtb	r2, r3
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	0e1b      	lsrs	r3, r3, #24
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd12:	4618      	mov	r0, r3
 800dd14:	f003 f9f8 	bl	8011108 <SDMMC_CmdBlockLength>
 800dd18:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00d      	beq.n	800dd3c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a08      	ldr	r2, [pc, #32]	; (800dd48 <HAL_SD_GetCardStatus+0x168>)
 800dd26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd2c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2201      	movs	r2, #1
 800dd32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dd36:	2301      	movs	r3, #1
 800dd38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800dd3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3750      	adds	r7, #80	; 0x50
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	1fe00fff 	.word	0x1fe00fff

0800dd4c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dda4:	b5b0      	push	{r4, r5, r7, lr}
 800dda6:	b08e      	sub	sp, #56	; 0x38
 800dda8:	af04      	add	r7, sp, #16
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2203      	movs	r2, #3
 800ddb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddc0:	2b03      	cmp	r3, #3
 800ddc2:	d02e      	beq.n	800de22 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddca:	d106      	bne.n	800ddda <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	639a      	str	r2, [r3, #56]	; 0x38
 800ddd8:	e029      	b.n	800de2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dde0:	d10a      	bne.n	800ddf8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 fb66 	bl	800e4b4 <SD_WideBus_Enable>
 800dde8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddee:	6a3b      	ldr	r3, [r7, #32]
 800ddf0:	431a      	orrs	r2, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	639a      	str	r2, [r3, #56]	; 0x38
 800ddf6:	e01a      	b.n	800de2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d10a      	bne.n	800de14 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 fba3 	bl	800e54a <SD_WideBus_Disable>
 800de04:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de0a:	6a3b      	ldr	r3, [r7, #32]
 800de0c:	431a      	orrs	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	639a      	str	r2, [r3, #56]	; 0x38
 800de12:	e00c      	b.n	800de2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	639a      	str	r2, [r3, #56]	; 0x38
 800de20:	e005      	b.n	800de2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de32:	2b00      	cmp	r3, #0
 800de34:	d007      	beq.n	800de46 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a2e      	ldr	r2, [pc, #184]	; (800def4 <HAL_SD_ConfigWideBusOperation+0x150>)
 800de3c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de44:	e034      	b.n	800deb0 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	691b      	ldr	r3, [r3, #16]
 800de5a:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	695b      	ldr	r3, [r3, #20]
 800de60:	2b03      	cmp	r3, #3
 800de62:	d903      	bls.n	800de6c <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	695b      	ldr	r3, [r3, #20]
 800de68:	61bb      	str	r3, [r7, #24]
 800de6a:	e012      	b.n	800de92 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de74:	d103      	bne.n	800de7e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	695b      	ldr	r3, [r3, #20]
 800de7a:	61bb      	str	r3, [r7, #24]
 800de7c:	e009      	b.n	800de92 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de86:	d102      	bne.n	800de8e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800de88:	2302      	movs	r3, #2
 800de8a:	61bb      	str	r3, [r7, #24]
 800de8c:	e001      	b.n	800de92 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800de8e:	2304      	movs	r3, #4
 800de90:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681d      	ldr	r5, [r3, #0]
 800de96:	466c      	mov	r4, sp
 800de98:	f107 0314 	add.w	r3, r7, #20
 800de9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dea0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dea4:	f107 0308 	add.w	r3, r7, #8
 800dea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800deaa:	4628      	mov	r0, r5
 800deac:	f003 f84e 	bl	8010f4c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800deb8:	4618      	mov	r0, r3
 800deba:	f003 f925 	bl	8011108 <SDMMC_CmdBlockLength>
 800debe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dec0:	6a3b      	ldr	r3, [r7, #32]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00c      	beq.n	800dee0 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a0a      	ldr	r2, [pc, #40]	; (800def4 <HAL_SD_ConfigWideBusOperation+0x150>)
 800decc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ded2:	6a3b      	ldr	r3, [r7, #32]
 800ded4:	431a      	orrs	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800deda:	2301      	movs	r3, #1
 800dedc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800dee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800deec:	4618      	mov	r0, r3
 800deee:	3728      	adds	r7, #40	; 0x28
 800def0:	46bd      	mov	sp, r7
 800def2:	bdb0      	pop	{r4, r5, r7, pc}
 800def4:	1fe00fff 	.word	0x1fe00fff

0800def8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800df04:	f107 030c 	add.w	r3, r7, #12
 800df08:	4619      	mov	r1, r3
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 faaa 	bl	800e464 <SD_SendStatus>
 800df10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d005      	beq.n	800df24 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	431a      	orrs	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	0a5b      	lsrs	r3, r3, #9
 800df28:	f003 030f 	and.w	r3, r3, #15
 800df2c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800df2e:	693b      	ldr	r3, [r7, #16]
}
 800df30:	4618      	mov	r0, r3
 800df32:	3718      	adds	r7, #24
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df38:	b590      	push	{r4, r7, lr}
 800df3a:	b091      	sub	sp, #68	; 0x44
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800df40:	2301      	movs	r3, #1
 800df42:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4618      	mov	r0, r3
 800df4a:	f003 f858 	bl	8010ffe <SDMMC_GetPowerState>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d102      	bne.n	800df5a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800df58:	e0a8      	b.n	800e0ac <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df5e:	2b03      	cmp	r3, #3
 800df60:	d02e      	beq.n	800dfc0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4618      	mov	r0, r3
 800df68:	f003 faa4 	bl	80114b4 <SDMMC_CmdSendCID>
 800df6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800df6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <SD_InitCard+0x40>
    {
      return errorstate;
 800df74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df76:	e099      	b.n	800e0ac <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2100      	movs	r1, #0
 800df7e:	4618      	mov	r0, r3
 800df80:	f003 f883 	bl	801108a <SDMMC_GetResponse>
 800df84:	4602      	mov	r2, r0
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2104      	movs	r1, #4
 800df90:	4618      	mov	r0, r3
 800df92:	f003 f87a 	bl	801108a <SDMMC_GetResponse>
 800df96:	4602      	mov	r2, r0
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2108      	movs	r1, #8
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f003 f871 	bl	801108a <SDMMC_GetResponse>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	210c      	movs	r1, #12
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f003 f868 	bl	801108a <SDMMC_GetResponse>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfc4:	2b03      	cmp	r3, #3
 800dfc6:	d00d      	beq.n	800dfe4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f107 020e 	add.w	r2, r7, #14
 800dfd0:	4611      	mov	r1, r2
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f003 faad 	bl	8011532 <SDMMC_CmdSetRelAdd>
 800dfd8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d001      	beq.n	800dfe4 <SD_InitCard+0xac>
    {
      return errorstate;
 800dfe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe2:	e063      	b.n	800e0ac <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfe8:	2b03      	cmp	r3, #3
 800dfea:	d036      	beq.n	800e05a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dfec:	89fb      	ldrh	r3, [r7, #14]
 800dfee:	461a      	mov	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dffc:	041b      	lsls	r3, r3, #16
 800dffe:	4619      	mov	r1, r3
 800e000:	4610      	mov	r0, r2
 800e002:	f003 fa76 	bl	80114f2 <SDMMC_CmdSendCSD>
 800e006:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d001      	beq.n	800e012 <SD_InitCard+0xda>
    {
      return errorstate;
 800e00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e010:	e04c      	b.n	800e0ac <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2100      	movs	r1, #0
 800e018:	4618      	mov	r0, r3
 800e01a:	f003 f836 	bl	801108a <SDMMC_GetResponse>
 800e01e:	4602      	mov	r2, r0
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2104      	movs	r1, #4
 800e02a:	4618      	mov	r0, r3
 800e02c:	f003 f82d 	bl	801108a <SDMMC_GetResponse>
 800e030:	4602      	mov	r2, r0
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2108      	movs	r1, #8
 800e03c:	4618      	mov	r0, r3
 800e03e:	f003 f824 	bl	801108a <SDMMC_GetResponse>
 800e042:	4602      	mov	r2, r0
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	210c      	movs	r1, #12
 800e04e:	4618      	mov	r0, r3
 800e050:	f003 f81b 	bl	801108a <SDMMC_GetResponse>
 800e054:	4602      	mov	r2, r0
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2104      	movs	r1, #4
 800e060:	4618      	mov	r0, r3
 800e062:	f003 f812 	bl	801108a <SDMMC_GetResponse>
 800e066:	4603      	mov	r3, r0
 800e068:	0d1a      	lsrs	r2, r3, #20
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e06e:	f107 0310 	add.w	r3, r7, #16
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7ff fc0f 	bl	800d898 <HAL_SD_GetCardCSD>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e080:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e084:	e012      	b.n	800e0ac <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6819      	ldr	r1, [r3, #0]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e08e:	041b      	lsls	r3, r3, #16
 800e090:	f04f 0400 	mov.w	r4, #0
 800e094:	461a      	mov	r2, r3
 800e096:	4623      	mov	r3, r4
 800e098:	4608      	mov	r0, r1
 800e09a:	f003 f921 	bl	80112e0 <SDMMC_CmdSelDesel>
 800e09e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d001      	beq.n	800e0aa <SD_InitCard+0x172>
  {
    return errorstate;
 800e0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a8:	e000      	b.n	800e0ac <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3744      	adds	r7, #68	; 0x44
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd90      	pop	{r4, r7, pc}

0800e0b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b088      	sub	sp, #32
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	61fb      	str	r3, [r7, #28]
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800e0c8:	f7f6 fa2c 	bl	8004524 <HAL_GetTick>
 800e0cc:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f003 f928 	bl	8011328 <SDMMC_CmdGoIdleState>
 800e0d8:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d001      	beq.n	800e0e4 <SD_PowerON+0x30>
  {
    return errorstate;
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	e0e9      	b.n	800e2b8 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f003 f93b 	bl	8011364 <SDMMC_CmdOperCond>
 800e0ee:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00d      	beq.n	800e112 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4618      	mov	r0, r3
 800e102:	f003 f911 	bl	8011328 <SDMMC_CmdGoIdleState>
 800e106:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d004      	beq.n	800e118 <SD_PowerON+0x64>
    {
      return errorstate;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	e0d2      	b.n	800e2b8 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d137      	bne.n	800e190 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2100      	movs	r1, #0
 800e126:	4618      	mov	r0, r3
 800e128:	f003 f93c 	bl	80113a4 <SDMMC_CmdAppCommand>
 800e12c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d02d      	beq.n	800e190 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e134:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e138:	e0be      	b.n	800e2b8 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2100      	movs	r1, #0
 800e140:	4618      	mov	r0, r3
 800e142:	f003 f92f 	bl	80113a4 <SDMMC_CmdAppCommand>
 800e146:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d001      	beq.n	800e152 <SD_PowerON+0x9e>
    {
      return errorstate;
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	e0b2      	b.n	800e2b8 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	495a      	ldr	r1, [pc, #360]	; (800e2c0 <SD_PowerON+0x20c>)
 800e158:	4618      	mov	r0, r3
 800e15a:	f003 f946 	bl	80113ea <SDMMC_CmdAppOperCommand>
 800e15e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d002      	beq.n	800e16c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e166:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e16a:	e0a5      	b.n	800e2b8 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	2100      	movs	r1, #0
 800e172:	4618      	mov	r0, r3
 800e174:	f002 ff89 	bl	801108a <SDMMC_GetResponse>
 800e178:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	0fdb      	lsrs	r3, r3, #31
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d101      	bne.n	800e186 <SD_PowerON+0xd2>
 800e182:	2301      	movs	r3, #1
 800e184:	e000      	b.n	800e188 <SD_PowerON+0xd4>
 800e186:	2300      	movs	r3, #0
 800e188:	61bb      	str	r3, [r7, #24]

    count++;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	3301      	adds	r3, #1
 800e18e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e196:	4293      	cmp	r3, r2
 800e198:	d802      	bhi.n	800e1a0 <SD_PowerON+0xec>
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d0cc      	beq.n	800e13a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d902      	bls.n	800e1b0 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e1aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e1ae:	e083      	b.n	800e2b8 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d07d      	beq.n	800e2b6 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2201      	movs	r2, #1
 800e1be:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	699b      	ldr	r3, [r3, #24]
 800e1c4:	2b02      	cmp	r3, #2
 800e1c6:	d176      	bne.n	800e2b6 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d071      	beq.n	800e2b6 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1d8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f042 0208 	orr.w	r2, r2, #8
 800e1e8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f003 fa06 	bl	8011600 <SDMMC_CmdVoltageSwitch>
 800e1f4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00c      	beq.n	800e216 <SD_PowerON+0x162>
        {
          return errorstate;
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	e05b      	b.n	800e2b8 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e200:	f7f6 f990 	bl	8004524 <HAL_GetTick>
 800e204:	4602      	mov	r2, r0
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e20e:	d102      	bne.n	800e216 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800e210:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e214:	e050      	b.n	800e2b8 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e21c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e220:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e224:	d1ec      	bne.n	800e200 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e22e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e23a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e23e:	d002      	beq.n	800e246 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800e240:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e244:	e038      	b.n	800e2b8 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800e246:	2001      	movs	r0, #1
 800e248:	f7ff fb1a 	bl	800d880 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f042 0204 	orr.w	r2, r2, #4
 800e25a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e25c:	e00a      	b.n	800e274 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e25e:	f7f6 f961 	bl	8004524 <HAL_GetTick>
 800e262:	4602      	mov	r2, r0
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	1ad3      	subs	r3, r2, r3
 800e268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e26c:	d102      	bne.n	800e274 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800e26e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e272:	e021      	b.n	800e2b8 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e27a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e27e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e282:	d1ec      	bne.n	800e25e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e28c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e29c:	d102      	bne.n	800e2a4 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e29e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e2a2:	e009      	b.n	800e2b8 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2213      	movs	r2, #19
 800e2aa:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3720      	adds	r7, #32
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	c1100000 	.word	0xc1100000

0800e2c4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b08c      	sub	sp, #48	; 0x30
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e2ce:	f7f6 f929 	bl	8004524 <HAL_GetTick>
 800e2d2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2100      	movs	r1, #0
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f002 fed3 	bl	801108a <SDMMC_GetResponse>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2ee:	d102      	bne.n	800e2f6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2f4:	e0b0      	b.n	800e458 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2140      	movs	r1, #64	; 0x40
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f002 ff03 	bl	8011108 <SDMMC_CmdBlockLength>
 800e302:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e304:	6a3b      	ldr	r3, [r7, #32]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d005      	beq.n	800e316 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	e0a0      	b.n	800e458 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e31e:	041b      	lsls	r3, r3, #16
 800e320:	4619      	mov	r1, r3
 800e322:	4610      	mov	r0, r2
 800e324:	f003 f83e 	bl	80113a4 <SDMMC_CmdAppCommand>
 800e328:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e32a:	6a3b      	ldr	r3, [r7, #32]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d005      	beq.n	800e33c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e338:	6a3b      	ldr	r3, [r7, #32]
 800e33a:	e08d      	b.n	800e458 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e33c:	f04f 33ff 	mov.w	r3, #4294967295
 800e340:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e342:	2340      	movs	r3, #64	; 0x40
 800e344:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e346:	2360      	movs	r3, #96	; 0x60
 800e348:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e34a:	2302      	movs	r3, #2
 800e34c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e34e:	2300      	movs	r3, #0
 800e350:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e352:	2301      	movs	r3, #1
 800e354:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f107 0208 	add.w	r2, r7, #8
 800e35e:	4611      	mov	r1, r2
 800e360:	4618      	mov	r0, r3
 800e362:	f002 fea5 	bl	80110b0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f003 f926 	bl	80115bc <SDMMC_CmdStatusRegister>
 800e370:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d02b      	beq.n	800e3d0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e380:	6a3b      	ldr	r3, [r7, #32]
 800e382:	e069      	b.n	800e458 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e38a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d013      	beq.n	800e3ba <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800e392:	2300      	movs	r3, #0
 800e394:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e396:	e00d      	b.n	800e3b4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f002 fdff 	bl	8010fa0 <SDMMC_ReadFIFO>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	601a      	str	r2, [r3, #0]
        pData++;
 800e3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800e3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b6:	2b07      	cmp	r3, #7
 800e3b8:	d9ee      	bls.n	800e398 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3ba:	f7f6 f8b3 	bl	8004524 <HAL_GetTick>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c8:	d102      	bne.n	800e3d0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e3ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3ce:	e043      	b.n	800e458 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d0d2      	beq.n	800e384 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e4:	f003 0308 	and.w	r3, r3, #8
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e3ec:	2308      	movs	r3, #8
 800e3ee:	e033      	b.n	800e458 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f6:	f003 0302 	and.w	r3, r3, #2
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e3fe:	2302      	movs	r3, #2
 800e400:	e02a      	b.n	800e458 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e408:	f003 0320 	and.w	r3, r3, #32
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d017      	beq.n	800e440 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e410:	2320      	movs	r3, #32
 800e412:	e021      	b.n	800e458 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4618      	mov	r0, r3
 800e41a:	f002 fdc1 	bl	8010fa0 <SDMMC_ReadFIFO>
 800e41e:	4602      	mov	r2, r0
 800e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e422:	601a      	str	r2, [r3, #0]
    pData++;
 800e424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e426:	3304      	adds	r3, #4
 800e428:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e42a:	f7f6 f87b 	bl	8004524 <HAL_GetTick>
 800e42e:	4602      	mov	r2, r0
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	1ad3      	subs	r3, r2, r3
 800e434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e438:	d102      	bne.n	800e440 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e43a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e43e:	e00b      	b.n	800e458 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1e2      	bne.n	800e414 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4a03      	ldr	r2, [pc, #12]	; (800e460 <SD_SendSDStatus+0x19c>)
 800e454:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3730      	adds	r7, #48	; 0x30
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	18000f3a 	.word	0x18000f3a

0800e464 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d102      	bne.n	800e47a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e478:	e018      	b.n	800e4ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e482:	041b      	lsls	r3, r3, #16
 800e484:	4619      	mov	r1, r3
 800e486:	4610      	mov	r0, r2
 800e488:	f003 f875 	bl	8011576 <SDMMC_CmdSendStatus>
 800e48c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d001      	beq.n	800e498 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	e009      	b.n	800e4ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2100      	movs	r1, #0
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f002 fdf3 	bl	801108a <SDMMC_GetResponse>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e4aa:	2300      	movs	r3, #0
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3710      	adds	r7, #16
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e4bc:	2300      	movs	r3, #0
 800e4be:	60fb      	str	r3, [r7, #12]
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f002 fddd 	bl	801108a <SDMMC_GetResponse>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4da:	d102      	bne.n	800e4e2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e4dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4e0:	e02f      	b.n	800e542 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e4e2:	f107 030c 	add.w	r3, r7, #12
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 f879 	bl	800e5e0 <SD_FindSCR>
 800e4ee:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d001      	beq.n	800e4fa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	e023      	b.n	800e542 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e500:	2b00      	cmp	r3, #0
 800e502:	d01c      	beq.n	800e53e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e50c:	041b      	lsls	r3, r3, #16
 800e50e:	4619      	mov	r1, r3
 800e510:	4610      	mov	r0, r2
 800e512:	f002 ff47 	bl	80113a4 <SDMMC_CmdAppCommand>
 800e516:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d001      	beq.n	800e522 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	e00f      	b.n	800e542 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2102      	movs	r1, #2
 800e528:	4618      	mov	r0, r3
 800e52a:	f002 ff7e 	bl	801142a <SDMMC_CmdBusWidth>
 800e52e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d001      	beq.n	800e53a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	e003      	b.n	800e542 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e53a:	2300      	movs	r3, #0
 800e53c:	e001      	b.n	800e542 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e53e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e542:	4618      	mov	r0, r3
 800e544:	3718      	adds	r7, #24
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b086      	sub	sp, #24
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e552:	2300      	movs	r3, #0
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	2300      	movs	r3, #0
 800e558:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2100      	movs	r1, #0
 800e560:	4618      	mov	r0, r3
 800e562:	f002 fd92 	bl	801108a <SDMMC_GetResponse>
 800e566:	4603      	mov	r3, r0
 800e568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e56c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e570:	d102      	bne.n	800e578 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e572:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e576:	e02f      	b.n	800e5d8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e578:	f107 030c 	add.w	r3, r7, #12
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 f82e 	bl	800e5e0 <SD_FindSCR>
 800e584:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	e023      	b.n	800e5d8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e596:	2b00      	cmp	r3, #0
 800e598:	d01c      	beq.n	800e5d4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5a2:	041b      	lsls	r3, r3, #16
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	4610      	mov	r0, r2
 800e5a8:	f002 fefc 	bl	80113a4 <SDMMC_CmdAppCommand>
 800e5ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d001      	beq.n	800e5b8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	e00f      	b.n	800e5d8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2100      	movs	r1, #0
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f002 ff33 	bl	801142a <SDMMC_CmdBusWidth>
 800e5c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	e003      	b.n	800e5d8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	e001      	b.n	800e5d8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3718      	adds	r7, #24
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b08e      	sub	sp, #56	; 0x38
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e5ea:	f7f5 ff9b 	bl	8004524 <HAL_GetTick>
 800e5ee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	60bb      	str	r3, [r7, #8]
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2108      	movs	r1, #8
 800e606:	4618      	mov	r0, r3
 800e608:	f002 fd7e 	bl	8011108 <SDMMC_CmdBlockLength>
 800e60c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e610:	2b00      	cmp	r3, #0
 800e612:	d001      	beq.n	800e618 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e616:	e0ad      	b.n	800e774 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e620:	041b      	lsls	r3, r3, #16
 800e622:	4619      	mov	r1, r3
 800e624:	4610      	mov	r0, r2
 800e626:	f002 febd 	bl	80113a4 <SDMMC_CmdAppCommand>
 800e62a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d001      	beq.n	800e636 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e634:	e09e      	b.n	800e774 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e636:	f04f 33ff 	mov.w	r3, #4294967295
 800e63a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e63c:	2308      	movs	r3, #8
 800e63e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e640:	2330      	movs	r3, #48	; 0x30
 800e642:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e644:	2302      	movs	r3, #2
 800e646:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e648:	2300      	movs	r3, #0
 800e64a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e64c:	2301      	movs	r3, #1
 800e64e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f107 0210 	add.w	r2, r7, #16
 800e658:	4611      	mov	r1, r2
 800e65a:	4618      	mov	r0, r3
 800e65c:	f002 fd28 	bl	80110b0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4618      	mov	r0, r3
 800e666:	f002 ff03 	bl	8011470 <SDMMC_CmdSendSCR>
 800e66a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d027      	beq.n	800e6c2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e674:	e07e      	b.n	800e774 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e67c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e680:	2b00      	cmp	r3, #0
 800e682:	d113      	bne.n	800e6ac <SD_FindSCR+0xcc>
 800e684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e686:	2b00      	cmp	r3, #0
 800e688:	d110      	bne.n	800e6ac <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4618      	mov	r0, r3
 800e690:	f002 fc86 	bl	8010fa0 <SDMMC_ReadFIFO>
 800e694:	4603      	mov	r3, r0
 800e696:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f002 fc7f 	bl	8010fa0 <SDMMC_ReadFIFO>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	60fb      	str	r3, [r7, #12]
      index++;
 800e6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e6ac:	f7f5 ff3a 	bl	8004524 <HAL_GetTick>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b4:	1ad3      	subs	r3, r2, r3
 800e6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ba:	d102      	bne.n	800e6c2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e6bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6c0:	e058      	b.n	800e774 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6c8:	f240 532a 	movw	r3, #1322	; 0x52a
 800e6cc:	4013      	ands	r3, r2
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d0d1      	beq.n	800e676 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d8:	f003 0308 	and.w	r3, r3, #8
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d005      	beq.n	800e6ec <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	2208      	movs	r2, #8
 800e6e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e6e8:	2308      	movs	r3, #8
 800e6ea:	e043      	b.n	800e774 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f2:	f003 0302 	and.w	r3, r3, #2
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d005      	beq.n	800e706 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2202      	movs	r2, #2
 800e700:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e702:	2302      	movs	r3, #2
 800e704:	e036      	b.n	800e774 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e70c:	f003 0320 	and.w	r3, r3, #32
 800e710:	2b00      	cmp	r3, #0
 800e712:	d005      	beq.n	800e720 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	2220      	movs	r2, #32
 800e71a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e71c:	2320      	movs	r3, #32
 800e71e:	e029      	b.n	800e774 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a15      	ldr	r2, [pc, #84]	; (800e77c <SD_FindSCR+0x19c>)
 800e726:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	061a      	lsls	r2, r3, #24
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	021b      	lsls	r3, r3, #8
 800e730:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e734:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	0a1b      	lsrs	r3, r3, #8
 800e73a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e73e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	0e1b      	lsrs	r3, r3, #24
 800e744:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e748:	601a      	str	r2, [r3, #0]
    scr++;
 800e74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74c:	3304      	adds	r3, #4
 800e74e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	061a      	lsls	r2, r3, #24
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	021b      	lsls	r3, r3, #8
 800e758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e75c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	0a1b      	lsrs	r3, r3, #8
 800e762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e766:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	0e1b      	lsrs	r3, r3, #24
 800e76c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e772:	2300      	movs	r3, #0
}
 800e774:	4618      	mov	r0, r3
 800e776:	3738      	adds	r7, #56	; 0x38
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	18000f3a 	.word	0x18000f3a

0800e780 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e78c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e792:	2b1f      	cmp	r3, #31
 800e794:	d936      	bls.n	800e804 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e796:	2300      	movs	r3, #0
 800e798:	617b      	str	r3, [r7, #20]
 800e79a:	e027      	b.n	800e7ec <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f002 fbfd 	bl	8010fa0 <SDMMC_ReadFIFO>
 800e7a6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	0a1b      	lsrs	r3, r3, #8
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	0c1b      	lsrs	r3, r3, #16
 800e7ca:	b2da      	uxtb	r2, r3
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	0e1b      	lsrs	r3, r3, #24
 800e7da:	b2da      	uxtb	r2, r3
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	617b      	str	r3, [r7, #20]
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	2b07      	cmp	r3, #7
 800e7f0:	d9d4      	bls.n	800e79c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7fc:	f1a3 0220 	sub.w	r2, r3, #32
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e804:	bf00      	nop
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6a1b      	ldr	r3, [r3, #32]
 800e818:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e81e:	2b1f      	cmp	r3, #31
 800e820:	d93a      	bls.n	800e898 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e822:	2300      	movs	r3, #0
 800e824:	617b      	str	r3, [r7, #20]
 800e826:	e02b      	b.n	800e880 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	3301      	adds	r3, #1
 800e832:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	021a      	lsls	r2, r3, #8
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	4313      	orrs	r3, r2
 800e83e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	3301      	adds	r3, #1
 800e844:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	041a      	lsls	r2, r3, #16
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	4313      	orrs	r3, r2
 800e850:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	3301      	adds	r3, #1
 800e856:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	061a      	lsls	r2, r3, #24
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	4313      	orrs	r3, r2
 800e862:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	3301      	adds	r3, #1
 800e868:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f107 020c 	add.w	r2, r7, #12
 800e872:	4611      	mov	r1, r2
 800e874:	4618      	mov	r0, r3
 800e876:	f002 fba0 	bl	8010fba <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	3301      	adds	r3, #1
 800e87e:	617b      	str	r3, [r7, #20]
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	2b07      	cmp	r3, #7
 800e884:	d9d0      	bls.n	800e828 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	693a      	ldr	r2, [r7, #16]
 800e88a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e890:	f1a3 0220 	sub.w	r2, r3, #32
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e898:	bf00      	nop
 800e89a:	3718      	adds	r7, #24
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e8a8:	bf00      	nop
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8bc:	bf00      	nop
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e8d0:	bf00      	nop
 800e8d2:	370c      	adds	r7, #12
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8e4:	bf00      	nop
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d101      	bne.n	800e906 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800e902:	2301      	movs	r3, #1
 800e904:	e0e2      	b.n	800eacc <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2200      	movs	r2, #0
 800e90a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a70      	ldr	r2, [pc, #448]	; (800ead4 <HAL_SPI_Init+0x1e4>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d00f      	beq.n	800e936 <HAL_SPI_Init+0x46>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a6f      	ldr	r2, [pc, #444]	; (800ead8 <HAL_SPI_Init+0x1e8>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d00a      	beq.n	800e936 <HAL_SPI_Init+0x46>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a6d      	ldr	r2, [pc, #436]	; (800eadc <HAL_SPI_Init+0x1ec>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d005      	beq.n	800e936 <HAL_SPI_Init+0x46>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	2b0f      	cmp	r3, #15
 800e930:	d901      	bls.n	800e936 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800e932:	2301      	movs	r3, #1
 800e934:	e0ca      	b.n	800eacc <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f001 f870 	bl	800fa1c <SPI_GetPacketSize>
 800e93c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4a64      	ldr	r2, [pc, #400]	; (800ead4 <HAL_SPI_Init+0x1e4>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d00c      	beq.n	800e962 <HAL_SPI_Init+0x72>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a62      	ldr	r2, [pc, #392]	; (800ead8 <HAL_SPI_Init+0x1e8>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d007      	beq.n	800e962 <HAL_SPI_Init+0x72>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a61      	ldr	r2, [pc, #388]	; (800eadc <HAL_SPI_Init+0x1ec>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d002      	beq.n	800e962 <HAL_SPI_Init+0x72>
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	2b08      	cmp	r3, #8
 800e960:	d811      	bhi.n	800e986 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e966:	4a5b      	ldr	r2, [pc, #364]	; (800ead4 <HAL_SPI_Init+0x1e4>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d009      	beq.n	800e980 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a59      	ldr	r2, [pc, #356]	; (800ead8 <HAL_SPI_Init+0x1e8>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d004      	beq.n	800e980 <HAL_SPI_Init+0x90>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4a58      	ldr	r2, [pc, #352]	; (800eadc <HAL_SPI_Init+0x1ec>)
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d104      	bne.n	800e98a <HAL_SPI_Init+0x9a>
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	2b10      	cmp	r3, #16
 800e984:	d901      	bls.n	800e98a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800e986:	2301      	movs	r3, #1
 800e988:	e0a0      	b.n	800eacc <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e990:	b2db      	uxtb	r3, r3
 800e992:	2b00      	cmp	r3, #0
 800e994:	d106      	bne.n	800e9a4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2200      	movs	r2, #0
 800e99a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7f5 fa92 	bl	8003ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2202      	movs	r2, #2
 800e9a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f022 0201 	bic.w	r2, r2, #1
 800e9ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	699b      	ldr	r3, [r3, #24]
 800e9c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e9c4:	d110      	bne.n	800e9e8 <HAL_SPI_Init+0xf8>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e9ce:	d10b      	bne.n	800e9e8 <HAL_SPI_Init+0xf8>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d107      	bne.n	800e9e8 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e9e6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	69da      	ldr	r2, [r3, #28]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f0:	431a      	orrs	r2, r3
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	431a      	orrs	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9fa:	ea42 0103 	orr.w	r1, r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	68da      	ldr	r2, [r3, #12]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	430a      	orrs	r2, r1
 800ea08:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea12:	431a      	orrs	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea18:	431a      	orrs	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	699b      	ldr	r3, [r3, #24]
 800ea1e:	431a      	orrs	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	691b      	ldr	r3, [r3, #16]
 800ea24:	431a      	orrs	r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	695b      	ldr	r3, [r3, #20]
 800ea2a:	431a      	orrs	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6a1b      	ldr	r3, [r3, #32]
 800ea30:	431a      	orrs	r2, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	431a      	orrs	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea3c:	431a      	orrs	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	431a      	orrs	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea48:	ea42 0103 	orr.w	r1, r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	430a      	orrs	r2, r1
 800ea56:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d113      	bne.n	800ea88 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea72:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ea86:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f022 0201 	bic.w	r2, r2, #1
 800ea96:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d00a      	beq.n	800eaba <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	430a      	orrs	r2, r1
 800eab8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	40013000 	.word	0x40013000
 800ead8:	40003800 	.word	0x40003800
 800eadc:	40003c00 	.word	0x40003c00

0800eae0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b08a      	sub	sp, #40	; 0x28
 800eae4:	af02      	add	r7, sp, #8
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	603b      	str	r3, [r7, #0]
 800eaec:	4613      	mov	r3, r2
 800eaee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	3320      	adds	r3, #32
 800eaf6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d101      	bne.n	800eb0a <HAL_SPI_Transmit+0x2a>
 800eb06:	2302      	movs	r3, #2
 800eb08:	e1d7      	b.n	800eeba <HAL_SPI_Transmit+0x3da>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb12:	f7f5 fd07 	bl	8004524 <HAL_GetTick>
 800eb16:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d007      	beq.n	800eb34 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800eb24:	2302      	movs	r3, #2
 800eb26:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb30:	7efb      	ldrb	r3, [r7, #27]
 800eb32:	e1c2      	b.n	800eeba <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d002      	beq.n	800eb40 <HAL_SPI_Transmit+0x60>
 800eb3a:	88fb      	ldrh	r3, [r7, #6]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d107      	bne.n	800eb50 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eb40:	2301      	movs	r3, #1
 800eb42:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2200      	movs	r2, #0
 800eb48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb4c:	7efb      	ldrb	r3, [r7, #27]
 800eb4e:	e1b4      	b.n	800eeba <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2203      	movs	r2, #3
 800eb54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	68ba      	ldr	r2, [r7, #8]
 800eb64:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	88fa      	ldrh	r2, [r7, #6]
 800eb6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	88fa      	ldrh	r2, [r7, #6]
 800eb72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2200      	movs	r2, #0
 800eb96:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	689b      	ldr	r3, [r3, #8]
 800eb9c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eba0:	d107      	bne.n	800ebb2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ebb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	685a      	ldr	r2, [r3, #4]
 800ebb8:	4b96      	ldr	r3, [pc, #600]	; (800ee14 <HAL_SPI_Transmit+0x334>)
 800ebba:	4013      	ands	r3, r2
 800ebbc:	88f9      	ldrh	r1, [r7, #6]
 800ebbe:	68fa      	ldr	r2, [r7, #12]
 800ebc0:	6812      	ldr	r2, [r2, #0]
 800ebc2:	430b      	orrs	r3, r1
 800ebc4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f042 0201 	orr.w	r2, r2, #1
 800ebd4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebde:	d107      	bne.n	800ebf0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ebee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	2b0f      	cmp	r3, #15
 800ebf6:	d947      	bls.n	800ec88 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ebf8:	e03f      	b.n	800ec7a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	695b      	ldr	r3, [r3, #20]
 800ec00:	f003 0302 	and.w	r3, r3, #2
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d114      	bne.n	800ec32 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	6812      	ldr	r2, [r2, #0]
 800ec12:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec18:	1d1a      	adds	r2, r3, #4
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	3b01      	subs	r3, #1
 800ec28:	b29a      	uxth	r2, r3
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec30:	e023      	b.n	800ec7a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec32:	f7f5 fc77 	bl	8004524 <HAL_GetTick>
 800ec36:	4602      	mov	r2, r0
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	1ad3      	subs	r3, r2, r3
 800ec3c:	683a      	ldr	r2, [r7, #0]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d803      	bhi.n	800ec4a <HAL_SPI_Transmit+0x16a>
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec48:	d102      	bne.n	800ec50 <HAL_SPI_Transmit+0x170>
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d114      	bne.n	800ec7a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f000 fe15 	bl	800f880 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2201      	movs	r2, #1
 800ec72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ec76:	2301      	movs	r3, #1
 800ec78:	e11f      	b.n	800eeba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1b9      	bne.n	800ebfa <HAL_SPI_Transmit+0x11a>
 800ec86:	e0f2      	b.n	800ee6e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	2b07      	cmp	r3, #7
 800ec8e:	f240 80e7 	bls.w	800ee60 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec92:	e05d      	b.n	800ed50 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	695b      	ldr	r3, [r3, #20]
 800ec9a:	f003 0302 	and.w	r3, r3, #2
 800ec9e:	2b02      	cmp	r3, #2
 800eca0:	d132      	bne.n	800ed08 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d918      	bls.n	800ece0 <HAL_SPI_Transmit+0x200>
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d014      	beq.n	800ece0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	6812      	ldr	r2, [r2, #0]
 800ecc0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecc6:	1d1a      	adds	r2, r3, #4
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	3b02      	subs	r3, #2
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ecde:	e037      	b.n	800ed50 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ece4:	881a      	ldrh	r2, [r3, #0]
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecee:	1c9a      	adds	r2, r3, #2
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	3b01      	subs	r3, #1
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed06:	e023      	b.n	800ed50 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed08:	f7f5 fc0c 	bl	8004524 <HAL_GetTick>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	1ad3      	subs	r3, r2, r3
 800ed12:	683a      	ldr	r2, [r7, #0]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d803      	bhi.n	800ed20 <HAL_SPI_Transmit+0x240>
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed1e:	d102      	bne.n	800ed26 <HAL_SPI_Transmit+0x246>
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d114      	bne.n	800ed50 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed26:	68f8      	ldr	r0, [r7, #12]
 800ed28:	f000 fdaa 	bl	800f880 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2201      	movs	r2, #1
 800ed48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e0b4      	b.n	800eeba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d19b      	bne.n	800ec94 <HAL_SPI_Transmit+0x1b4>
 800ed5c:	e087      	b.n	800ee6e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	695b      	ldr	r3, [r3, #20]
 800ed64:	f003 0302 	and.w	r3, r3, #2
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d155      	bne.n	800ee18 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	2b03      	cmp	r3, #3
 800ed76:	d918      	bls.n	800edaa <HAL_SPI_Transmit+0x2ca>
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed7c:	2b40      	cmp	r3, #64	; 0x40
 800ed7e:	d914      	bls.n	800edaa <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	6812      	ldr	r2, [r2, #0]
 800ed8a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed90:	1d1a      	adds	r2, r3, #4
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	3b04      	subs	r3, #4
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eda8:	e05a      	b.n	800ee60 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d917      	bls.n	800ede6 <HAL_SPI_Transmit+0x306>
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d013      	beq.n	800ede6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edc2:	881a      	ldrh	r2, [r3, #0]
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edcc:	1c9a      	adds	r2, r3, #2
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edd8:	b29b      	uxth	r3, r3
 800edda:	3b02      	subs	r3, #2
 800eddc:	b29a      	uxth	r2, r3
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ede4:	e03c      	b.n	800ee60 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	3320      	adds	r3, #32
 800edf0:	7812      	ldrb	r2, [r2, #0]
 800edf2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edf8:	1c5a      	adds	r2, r3, #1
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	3b01      	subs	r3, #1
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee10:	e026      	b.n	800ee60 <HAL_SPI_Transmit+0x380>
 800ee12:	bf00      	nop
 800ee14:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee18:	f7f5 fb84 	bl	8004524 <HAL_GetTick>
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	1ad3      	subs	r3, r2, r3
 800ee22:	683a      	ldr	r2, [r7, #0]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d803      	bhi.n	800ee30 <HAL_SPI_Transmit+0x350>
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee2e:	d102      	bne.n	800ee36 <HAL_SPI_Transmit+0x356>
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d114      	bne.n	800ee60 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f000 fd22 	bl	800f880 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2201      	movs	r2, #1
 800ee58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e02c      	b.n	800eeba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	f47f af78 	bne.w	800ed5e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2200      	movs	r2, #0
 800ee76:	2108      	movs	r1, #8
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f000 fda1 	bl	800f9c0 <SPI_WaitOnFlagUntilTimeout>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d007      	beq.n	800ee94 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee8a:	f043 0220 	orr.w	r2, r3, #32
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ee94:	68f8      	ldr	r0, [r7, #12]
 800ee96:	f000 fcf3 	bl	800f880 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2201      	movs	r2, #1
 800eea6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d001      	beq.n	800eeb8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	e000      	b.n	800eeba <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800eeb8:	7efb      	ldrb	r3, [r7, #27]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3720      	adds	r7, #32
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop

0800eec4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08a      	sub	sp, #40	; 0x28
 800eec8:	af02      	add	r7, sp, #8
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	603b      	str	r3, [r7, #0]
 800eed0:	4613      	mov	r3, r2
 800eed2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	3330      	adds	r3, #48	; 0x30
 800eede:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eee8:	d112      	bne.n	800ef10 <HAL_SPI_Receive+0x4c>
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d10e      	bne.n	800ef10 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2204      	movs	r2, #4
 800eef6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800eefa:	88fa      	ldrh	r2, [r7, #6]
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	9300      	str	r3, [sp, #0]
 800ef00:	4613      	mov	r3, r2
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	68b9      	ldr	r1, [r7, #8]
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	f000 f9ce 	bl	800f2a8 <HAL_SPI_TransmitReceive>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	e1c7      	b.n	800f2a0 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d101      	bne.n	800ef1e <HAL_SPI_Receive+0x5a>
 800ef1a:	2302      	movs	r3, #2
 800ef1c:	e1c0      	b.n	800f2a0 <HAL_SPI_Receive+0x3dc>
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2201      	movs	r2, #1
 800ef22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef26:	f7f5 fafd 	bl	8004524 <HAL_GetTick>
 800ef2a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d007      	beq.n	800ef48 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800ef38:	2302      	movs	r3, #2
 800ef3a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef44:	7ffb      	ldrb	r3, [r7, #31]
 800ef46:	e1ab      	b.n	800f2a0 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d002      	beq.n	800ef54 <HAL_SPI_Receive+0x90>
 800ef4e:	88fb      	ldrh	r3, [r7, #6]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d107      	bne.n	800ef64 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800ef54:	2301      	movs	r3, #1
 800ef56:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef60:	7ffb      	ldrb	r3, [r7, #31]
 800ef62:	e19d      	b.n	800f2a0 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2204      	movs	r2, #4
 800ef68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	68ba      	ldr	r2, [r7, #8]
 800ef78:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	88fa      	ldrh	r2, [r7, #6]
 800ef7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	88fa      	ldrh	r2, [r7, #6]
 800ef86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2200      	movs	r2, #0
 800efa4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2200      	movs	r2, #0
 800efaa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	689b      	ldr	r3, [r3, #8]
 800efb0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800efb4:	d107      	bne.n	800efc6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800efc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	685a      	ldr	r2, [r3, #4]
 800efcc:	4b94      	ldr	r3, [pc, #592]	; (800f220 <HAL_SPI_Receive+0x35c>)
 800efce:	4013      	ands	r3, r2
 800efd0:	88f9      	ldrh	r1, [r7, #6]
 800efd2:	68fa      	ldr	r2, [r7, #12]
 800efd4:	6812      	ldr	r2, [r2, #0]
 800efd6:	430b      	orrs	r3, r1
 800efd8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f042 0201 	orr.w	r2, r2, #1
 800efe8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eff2:	d107      	bne.n	800f004 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f002:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	2b0f      	cmp	r3, #15
 800f00a:	d948      	bls.n	800f09e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f00c:	e040      	b.n	800f090 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	695a      	ldr	r2, [r3, #20]
 800f014:	f248 0308 	movw	r3, #32776	; 0x8008
 800f018:	4013      	ands	r3, r2
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d014      	beq.n	800f048 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f026:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f028:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f02e:	1d1a      	adds	r2, r3, #4
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	3b01      	subs	r3, #1
 800f03e:	b29a      	uxth	r2, r3
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f046:	e023      	b.n	800f090 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f048:	f7f5 fa6c 	bl	8004524 <HAL_GetTick>
 800f04c:	4602      	mov	r2, r0
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	1ad3      	subs	r3, r2, r3
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	429a      	cmp	r2, r3
 800f056:	d803      	bhi.n	800f060 <HAL_SPI_Receive+0x19c>
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f05e:	d102      	bne.n	800f066 <HAL_SPI_Receive+0x1a2>
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d114      	bne.n	800f090 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f066:	68f8      	ldr	r0, [r7, #12]
 800f068:	f000 fc0a 	bl	800f880 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f07a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2201      	movs	r2, #1
 800f088:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f08c:	2301      	movs	r3, #1
 800f08e:	e107      	b.n	800f2a0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f096:	b29b      	uxth	r3, r3
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d1b8      	bne.n	800f00e <HAL_SPI_Receive+0x14a>
 800f09c:	e0ed      	b.n	800f27a <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	2b07      	cmp	r3, #7
 800f0a4:	f240 80e2 	bls.w	800f26c <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0a8:	e05b      	b.n	800f162 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	695b      	ldr	r3, [r3, #20]
 800f0b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d030      	beq.n	800f11a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	695b      	ldr	r3, [r3, #20]
 800f0be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d014      	beq.n	800f0f0 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f0d0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0d6:	1d1a      	adds	r2, r3, #4
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	3b02      	subs	r3, #2
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0ee:	e038      	b.n	800f162 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0f4:	69ba      	ldr	r2, [r7, #24]
 800f0f6:	8812      	ldrh	r2, [r2, #0]
 800f0f8:	b292      	uxth	r2, r2
 800f0fa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f100:	1c9a      	adds	r2, r3, #2
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	3b01      	subs	r3, #1
 800f110:	b29a      	uxth	r2, r3
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f118:	e023      	b.n	800f162 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f11a:	f7f5 fa03 	bl	8004524 <HAL_GetTick>
 800f11e:	4602      	mov	r2, r0
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	1ad3      	subs	r3, r2, r3
 800f124:	683a      	ldr	r2, [r7, #0]
 800f126:	429a      	cmp	r2, r3
 800f128:	d803      	bhi.n	800f132 <HAL_SPI_Receive+0x26e>
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f130:	d102      	bne.n	800f138 <HAL_SPI_Receive+0x274>
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d114      	bne.n	800f162 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f138:	68f8      	ldr	r0, [r7, #12]
 800f13a:	f000 fba1 	bl	800f880 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2200      	movs	r2, #0
 800f142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f14c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2201      	movs	r2, #1
 800f15a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f15e:	2301      	movs	r3, #1
 800f160:	e09e      	b.n	800f2a0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f168:	b29b      	uxth	r3, r3
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d19d      	bne.n	800f0aa <HAL_SPI_Receive+0x1e6>
 800f16e:	e084      	b.n	800f27a <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	695b      	ldr	r3, [r3, #20]
 800f176:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d052      	beq.n	800f224 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	695b      	ldr	r3, [r3, #20]
 800f184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d014      	beq.n	800f1b6 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f194:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f196:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f19c:	1d1a      	adds	r2, r3, #4
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	3b04      	subs	r3, #4
 800f1ac:	b29a      	uxth	r2, r3
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1b4:	e05a      	b.n	800f26c <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f1c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1c4:	d914      	bls.n	800f1f0 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1ca:	69ba      	ldr	r2, [r7, #24]
 800f1cc:	8812      	ldrh	r2, [r2, #0]
 800f1ce:	b292      	uxth	r2, r2
 800f1d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1d6:	1c9a      	adds	r2, r3, #2
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	3b02      	subs	r3, #2
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1ee:	e03d      	b.n	800f26c <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1fc:	7812      	ldrb	r2, [r2, #0]
 800f1fe:	b2d2      	uxtb	r2, r2
 800f200:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f206:	1c5a      	adds	r2, r3, #1
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f212:	b29b      	uxth	r3, r3
 800f214:	3b01      	subs	r3, #1
 800f216:	b29a      	uxth	r2, r3
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f21e:	e025      	b.n	800f26c <HAL_SPI_Receive+0x3a8>
 800f220:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f224:	f7f5 f97e 	bl	8004524 <HAL_GetTick>
 800f228:	4602      	mov	r2, r0
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	1ad3      	subs	r3, r2, r3
 800f22e:	683a      	ldr	r2, [r7, #0]
 800f230:	429a      	cmp	r2, r3
 800f232:	d803      	bhi.n	800f23c <HAL_SPI_Receive+0x378>
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f23a:	d102      	bne.n	800f242 <HAL_SPI_Receive+0x37e>
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d114      	bne.n	800f26c <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f000 fb1c 	bl	800f880 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2200      	movs	r2, #0
 800f24c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f256:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2201      	movs	r2, #1
 800f264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f268:	2301      	movs	r3, #1
 800f26a:	e019      	b.n	800f2a0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f272:	b29b      	uxth	r3, r3
 800f274:	2b00      	cmp	r3, #0
 800f276:	f47f af7b 	bne.w	800f170 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	f000 fb00 	bl	800f880 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2200      	movs	r2, #0
 800f284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2201      	movs	r2, #1
 800f28c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f296:	2b00      	cmp	r3, #0
 800f298:	d001      	beq.n	800f29e <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800f29a:	2301      	movs	r3, #1
 800f29c:	e000      	b.n	800f2a0 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800f29e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3720      	adds	r7, #32
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b08e      	sub	sp, #56	; 0x38
 800f2ac:	af02      	add	r7, sp, #8
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	3320      	adds	r3, #32
 800f2c2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	3330      	adds	r3, #48	; 0x30
 800f2ca:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d101      	bne.n	800f2da <HAL_SPI_TransmitReceive+0x32>
 800f2d6:	2302      	movs	r3, #2
 800f2d8:	e2ce      	b.n	800f878 <HAL_SPI_TransmitReceive+0x5d0>
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2201      	movs	r2, #1
 800f2de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f2e2:	f7f5 f91f 	bl	8004524 <HAL_GetTick>
 800f2e6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800f2e8:	887b      	ldrh	r3, [r7, #2]
 800f2ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800f2ec:	887b      	ldrh	r3, [r7, #2]
 800f2ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2f6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f2fe:	7efb      	ldrb	r3, [r7, #27]
 800f300:	2b01      	cmp	r3, #1
 800f302:	d014      	beq.n	800f32e <HAL_SPI_TransmitReceive+0x86>
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f30a:	d106      	bne.n	800f31a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	689b      	ldr	r3, [r3, #8]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d102      	bne.n	800f31a <HAL_SPI_TransmitReceive+0x72>
 800f314:	7efb      	ldrb	r3, [r7, #27]
 800f316:	2b04      	cmp	r3, #4
 800f318:	d009      	beq.n	800f32e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800f31a:	2302      	movs	r3, #2
 800f31c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2200      	movs	r2, #0
 800f324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f328:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f32c:	e2a4      	b.n	800f878 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d005      	beq.n	800f340 <HAL_SPI_TransmitReceive+0x98>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d002      	beq.n	800f340 <HAL_SPI_TransmitReceive+0x98>
 800f33a:	887b      	ldrh	r3, [r7, #2]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d109      	bne.n	800f354 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800f340:	2301      	movs	r3, #1
 800f342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2200      	movs	r2, #0
 800f34a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f34e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f352:	e291      	b.n	800f878 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	2b04      	cmp	r3, #4
 800f35e:	d003      	beq.n	800f368 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2205      	movs	r2, #5
 800f364:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2200      	movs	r2, #0
 800f36c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	887a      	ldrh	r2, [r7, #2]
 800f37a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	887a      	ldrh	r2, [r7, #2]
 800f382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	68ba      	ldr	r2, [r7, #8]
 800f38a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	887a      	ldrh	r2, [r7, #2]
 800f390:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	887a      	ldrh	r2, [r7, #2]
 800f398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	685a      	ldr	r2, [r3, #4]
 800f3ae:	4b9f      	ldr	r3, [pc, #636]	; (800f62c <HAL_SPI_TransmitReceive+0x384>)
 800f3b0:	4013      	ands	r3, r2
 800f3b2:	8879      	ldrh	r1, [r7, #2]
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	6812      	ldr	r2, [r2, #0]
 800f3b8:	430b      	orrs	r3, r1
 800f3ba:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f042 0201 	orr.w	r2, r2, #1
 800f3ca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f3d4:	d107      	bne.n	800f3e6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	2b0f      	cmp	r3, #15
 800f3ec:	d970      	bls.n	800f4d0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f3ee:	e068      	b.n	800f4c2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	695b      	ldr	r3, [r3, #20]
 800f3f6:	f003 0302 	and.w	r3, r3, #2
 800f3fa:	2b02      	cmp	r3, #2
 800f3fc:	d11a      	bne.n	800f434 <HAL_SPI_TransmitReceive+0x18c>
 800f3fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f400:	2b00      	cmp	r3, #0
 800f402:	d017      	beq.n	800f434 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	6812      	ldr	r2, [r2, #0]
 800f40e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f414:	1d1a      	adds	r2, r3, #4
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f420:	b29b      	uxth	r3, r3
 800f422:	3b01      	subs	r3, #1
 800f424:	b29a      	uxth	r2, r3
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f432:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	695a      	ldr	r2, [r3, #20]
 800f43a:	f248 0308 	movw	r3, #32776	; 0x8008
 800f43e:	4013      	ands	r3, r2
 800f440:	2b00      	cmp	r3, #0
 800f442:	d01a      	beq.n	800f47a <HAL_SPI_TransmitReceive+0x1d2>
 800f444:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f446:	2b00      	cmp	r3, #0
 800f448:	d017      	beq.n	800f47a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f452:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f454:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f45a:	1d1a      	adds	r2, r3, #4
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f466:	b29b      	uxth	r3, r3
 800f468:	3b01      	subs	r3, #1
 800f46a:	b29a      	uxth	r2, r3
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f478:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f47a:	f7f5 f853 	bl	8004524 <HAL_GetTick>
 800f47e:	4602      	mov	r2, r0
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f486:	429a      	cmp	r2, r3
 800f488:	d803      	bhi.n	800f492 <HAL_SPI_TransmitReceive+0x1ea>
 800f48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f490:	d102      	bne.n	800f498 <HAL_SPI_TransmitReceive+0x1f0>
 800f492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f494:	2b00      	cmp	r3, #0
 800f496:	d114      	bne.n	800f4c2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f000 f9f1 	bl	800f880 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	e1da      	b.n	800f878 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f4c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d193      	bne.n	800f3f0 <HAL_SPI_TransmitReceive+0x148>
 800f4c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d190      	bne.n	800f3f0 <HAL_SPI_TransmitReceive+0x148>
 800f4ce:	e1ac      	b.n	800f82a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	2b07      	cmp	r3, #7
 800f4d6:	f240 81a0 	bls.w	800f81a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f4da:	e0a9      	b.n	800f630 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	695b      	ldr	r3, [r3, #20]
 800f4e2:	f003 0302 	and.w	r3, r3, #2
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d139      	bne.n	800f55e <HAL_SPI_TransmitReceive+0x2b6>
 800f4ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d036      	beq.n	800f55e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f4f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d91c      	bls.n	800f530 <HAL_SPI_TransmitReceive+0x288>
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d018      	beq.n	800f530 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	6812      	ldr	r2, [r2, #0]
 800f508:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f50e:	1d1a      	adds	r2, r3, #4
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	3b02      	subs	r3, #2
 800f51e:	b29a      	uxth	r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f52c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f52e:	e016      	b.n	800f55e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f534:	881a      	ldrh	r2, [r3, #0]
 800f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f538:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f53e:	1c9a      	adds	r2, r3, #2
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	3b01      	subs	r3, #1
 800f54e:	b29a      	uxth	r2, r3
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f55c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	695b      	ldr	r3, [r3, #20]
 800f564:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d03a      	beq.n	800f5e2 <HAL_SPI_TransmitReceive+0x33a>
 800f56c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d037      	beq.n	800f5e2 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	695b      	ldr	r3, [r3, #20]
 800f578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d018      	beq.n	800f5b2 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f588:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f58a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f590:	1d1a      	adds	r2, r3, #4
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	3b02      	subs	r3, #2
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f5b0:	e017      	b.n	800f5e2 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5b6:	6a3a      	ldr	r2, [r7, #32]
 800f5b8:	8812      	ldrh	r2, [r2, #0]
 800f5ba:	b292      	uxth	r2, r2
 800f5bc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5c2:	1c9a      	adds	r2, r3, #2
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	3b01      	subs	r3, #1
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5e2:	f7f4 ff9f 	bl	8004524 <HAL_GetTick>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	1ad3      	subs	r3, r2, r3
 800f5ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d803      	bhi.n	800f5fa <HAL_SPI_TransmitReceive+0x352>
 800f5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f8:	d102      	bne.n	800f600 <HAL_SPI_TransmitReceive+0x358>
 800f5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d117      	bne.n	800f630 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f600:	68f8      	ldr	r0, [r7, #12]
 800f602:	f000 f93d 	bl	800f880 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2200      	movs	r2, #0
 800f60a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f614:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2201      	movs	r2, #1
 800f622:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f626:	2301      	movs	r3, #1
 800f628:	e126      	b.n	800f878 <HAL_SPI_TransmitReceive+0x5d0>
 800f62a:	bf00      	nop
 800f62c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f630:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f632:	2b00      	cmp	r3, #0
 800f634:	f47f af52 	bne.w	800f4dc <HAL_SPI_TransmitReceive+0x234>
 800f638:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f47f af4e 	bne.w	800f4dc <HAL_SPI_TransmitReceive+0x234>
 800f640:	e0f3      	b.n	800f82a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	695b      	ldr	r3, [r3, #20]
 800f648:	f003 0302 	and.w	r3, r3, #2
 800f64c:	2b02      	cmp	r3, #2
 800f64e:	d15a      	bne.n	800f706 <HAL_SPI_TransmitReceive+0x45e>
 800f650:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f652:	2b00      	cmp	r3, #0
 800f654:	d057      	beq.n	800f706 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f656:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f658:	2b03      	cmp	r3, #3
 800f65a:	d91c      	bls.n	800f696 <HAL_SPI_TransmitReceive+0x3ee>
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f660:	2b40      	cmp	r3, #64	; 0x40
 800f662:	d918      	bls.n	800f696 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	6812      	ldr	r2, [r2, #0]
 800f66e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f674:	1d1a      	adds	r2, r3, #4
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f680:	b29b      	uxth	r3, r3
 800f682:	3b04      	subs	r3, #4
 800f684:	b29a      	uxth	r2, r3
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f692:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f694:	e037      	b.n	800f706 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d91b      	bls.n	800f6d4 <HAL_SPI_TransmitReceive+0x42c>
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d017      	beq.n	800f6d4 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6a8:	881a      	ldrh	r2, [r3, #0]
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6b2:	1c9a      	adds	r2, r3, #2
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	3b02      	subs	r3, #2
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f6d2:	e018      	b.n	800f706 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	3320      	adds	r3, #32
 800f6de:	7812      	ldrb	r2, [r2, #0]
 800f6e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6e6:	1c5a      	adds	r2, r3, #1
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	b29a      	uxth	r2, r3
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f704:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	695b      	ldr	r3, [r3, #20]
 800f70c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f710:	2b00      	cmp	r3, #0
 800f712:	d05e      	beq.n	800f7d2 <HAL_SPI_TransmitReceive+0x52a>
 800f714:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f716:	2b00      	cmp	r3, #0
 800f718:	d05b      	beq.n	800f7d2 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	695b      	ldr	r3, [r3, #20]
 800f720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f724:	2b00      	cmp	r3, #0
 800f726:	d018      	beq.n	800f75a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f730:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f732:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f738:	1d1a      	adds	r2, r3, #4
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f744:	b29b      	uxth	r3, r3
 800f746:	3b04      	subs	r3, #4
 800f748:	b29a      	uxth	r2, r3
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f756:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f758:	e03b      	b.n	800f7d2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	695b      	ldr	r3, [r3, #20]
 800f760:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f768:	d918      	bls.n	800f79c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f76e:	6a3a      	ldr	r2, [r7, #32]
 800f770:	8812      	ldrh	r2, [r2, #0]
 800f772:	b292      	uxth	r2, r2
 800f774:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f77a:	1c9a      	adds	r2, r3, #2
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f786:	b29b      	uxth	r3, r3
 800f788:	3b02      	subs	r3, #2
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f798:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f79a:	e01a      	b.n	800f7d2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7a8:	7812      	ldrb	r2, [r2, #0]
 800f7aa:	b2d2      	uxtb	r2, r2
 800f7ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7b2:	1c5a      	adds	r2, r3, #1
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	b29a      	uxth	r2, r3
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7d2:	f7f4 fea7 	bl	8004524 <HAL_GetTick>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	1ad3      	subs	r3, r2, r3
 800f7dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d803      	bhi.n	800f7ea <HAL_SPI_TransmitReceive+0x542>
 800f7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e8:	d102      	bne.n	800f7f0 <HAL_SPI_TransmitReceive+0x548>
 800f7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d114      	bne.n	800f81a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f000 f845 	bl	800f880 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f804:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2201      	movs	r2, #1
 800f812:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f816:	2301      	movs	r3, #1
 800f818:	e02e      	b.n	800f878 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f81a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	f47f af10 	bne.w	800f642 <HAL_SPI_TransmitReceive+0x39a>
 800f822:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f824:	2b00      	cmp	r3, #0
 800f826:	f47f af0c 	bne.w	800f642 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	2200      	movs	r2, #0
 800f832:	2108      	movs	r1, #8
 800f834:	68f8      	ldr	r0, [r7, #12]
 800f836:	f000 f8c3 	bl	800f9c0 <SPI_WaitOnFlagUntilTimeout>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d007      	beq.n	800f850 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f846:	f043 0220 	orr.w	r2, r3, #32
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f850:	68f8      	ldr	r0, [r7, #12]
 800f852:	f000 f815 	bl	800f880 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	2200      	movs	r2, #0
 800f85a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2201      	movs	r2, #1
 800f862:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d001      	beq.n	800f874 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800f870:	2301      	movs	r3, #1
 800f872:	e001      	b.n	800f878 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800f874:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3730      	adds	r7, #48	; 0x30
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	695b      	ldr	r3, [r3, #20]
 800f88e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	699a      	ldr	r2, [r3, #24]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	f042 0208 	orr.w	r2, r2, #8
 800f89e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	699a      	ldr	r2, [r3, #24]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f042 0210 	orr.w	r2, r2, #16
 800f8ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f022 0201 	bic.w	r2, r2, #1
 800f8be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	6919      	ldr	r1, [r3, #16]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	4b3c      	ldr	r3, [pc, #240]	; (800f9bc <SPI_CloseTransfer+0x13c>)
 800f8cc:	400b      	ands	r3, r1
 800f8ce:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	689a      	ldr	r2, [r3, #8]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f8de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	2b04      	cmp	r3, #4
 800f8ea:	d014      	beq.n	800f916 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f003 0320 	and.w	r3, r3, #32
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00f      	beq.n	800f916 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	699a      	ldr	r2, [r3, #24]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f042 0220 	orr.w	r2, r2, #32
 800f914:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	2b03      	cmp	r3, #3
 800f920:	d014      	beq.n	800f94c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00f      	beq.n	800f94c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f932:	f043 0204 	orr.w	r2, r3, #4
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	699a      	ldr	r2, [r3, #24]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f94a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f952:	2b00      	cmp	r3, #0
 800f954:	d00f      	beq.n	800f976 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f95c:	f043 0201 	orr.w	r2, r3, #1
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	699a      	ldr	r2, [r3, #24]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f974:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d00f      	beq.n	800f9a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f986:	f043 0208 	orr.w	r2, r3, #8
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	699a      	ldr	r2, [r3, #24]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f99e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f9b0:	bf00      	nop
 800f9b2:	3714      	adds	r7, #20
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr
 800f9bc:	fffffc90 	.word	0xfffffc90

0800f9c0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	60b9      	str	r1, [r7, #8]
 800f9ca:	603b      	str	r3, [r7, #0]
 800f9cc:	4613      	mov	r3, r2
 800f9ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f9d0:	e010      	b.n	800f9f4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f9d2:	f7f4 fda7 	bl	8004524 <HAL_GetTick>
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	1ad3      	subs	r3, r2, r3
 800f9dc:	69ba      	ldr	r2, [r7, #24]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d803      	bhi.n	800f9ea <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9e8:	d102      	bne.n	800f9f0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d101      	bne.n	800f9f4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f9f0:	2303      	movs	r3, #3
 800f9f2:	e00f      	b.n	800fa14 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	695a      	ldr	r2, [r3, #20]
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	4013      	ands	r3, r2
 800f9fe:	68ba      	ldr	r2, [r7, #8]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	bf0c      	ite	eq
 800fa04:	2301      	moveq	r3, #1
 800fa06:	2300      	movne	r3, #0
 800fa08:	b2db      	uxtb	r3, r3
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	79fb      	ldrb	r3, [r7, #7]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d0df      	beq.n	800f9d2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800fa12:	2300      	movs	r3, #0
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b085      	sub	sp, #20
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa28:	095b      	lsrs	r3, r3, #5
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	3301      	adds	r3, #1
 800fa34:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	3307      	adds	r3, #7
 800fa3a:	08db      	lsrs	r3, r3, #3
 800fa3c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	fb02 f303 	mul.w	r3, r2, r3
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3714      	adds	r7, #20
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa50:	4770      	bx	lr

0800fa52 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b082      	sub	sp, #8
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d101      	bne.n	800fa64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fa60:	2301      	movs	r3, #1
 800fa62:	e042      	b.n	800faea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d106      	bne.n	800fa7c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2200      	movs	r2, #0
 800fa72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7f4 fa70 	bl	8003f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2224      	movs	r2, #36	; 0x24
 800fa80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f022 0201 	bic.w	r2, r2, #1
 800fa92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 f95f 	bl	800fd58 <UART_SetConfig>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d101      	bne.n	800faa4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800faa0:	2301      	movs	r3, #1
 800faa2:	e022      	b.n	800faea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d002      	beq.n	800fab2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 ff03 	bl	80108b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	685a      	ldr	r2, [r3, #4]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fac0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	689a      	ldr	r2, [r3, #8]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fad0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f042 0201 	orr.w	r2, r2, #1
 800fae0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 ff8a 	bl	80109fc <UART_CheckIdleState>
 800fae8:	4603      	mov	r3, r0
}
 800faea:	4618      	mov	r0, r3
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b08a      	sub	sp, #40	; 0x28
 800faf6:	af02      	add	r7, sp, #8
 800faf8:	60f8      	str	r0, [r7, #12]
 800fafa:	60b9      	str	r1, [r7, #8]
 800fafc:	603b      	str	r3, [r7, #0]
 800fafe:	4613      	mov	r3, r2
 800fb00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb08:	2b20      	cmp	r3, #32
 800fb0a:	f040 8083 	bne.w	800fc14 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d002      	beq.n	800fb1a <HAL_UART_Transmit+0x28>
 800fb14:	88fb      	ldrh	r3, [r7, #6]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d101      	bne.n	800fb1e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	e07b      	b.n	800fc16 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d101      	bne.n	800fb2c <HAL_UART_Transmit+0x3a>
 800fb28:	2302      	movs	r3, #2
 800fb2a:	e074      	b.n	800fc16 <HAL_UART_Transmit+0x124>
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2200      	movs	r2, #0
 800fb38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2221      	movs	r2, #33	; 0x21
 800fb40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800fb44:	f7f4 fcee 	bl	8004524 <HAL_GetTick>
 800fb48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	88fa      	ldrh	r2, [r7, #6]
 800fb4e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	88fa      	ldrh	r2, [r7, #6]
 800fb56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	689b      	ldr	r3, [r3, #8]
 800fb5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb62:	d108      	bne.n	800fb76 <HAL_UART_Transmit+0x84>
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	691b      	ldr	r3, [r3, #16]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d104      	bne.n	800fb76 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	61bb      	str	r3, [r7, #24]
 800fb74:	e003      	b.n	800fb7e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800fb86:	e02c      	b.n	800fbe2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	2180      	movs	r1, #128	; 0x80
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	f000 ff7a 	bl	8010a8c <UART_WaitOnFlagUntilTimeout>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d001      	beq.n	800fba2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800fb9e:	2303      	movs	r3, #3
 800fba0:	e039      	b.n	800fc16 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10b      	bne.n	800fbc0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	461a      	mov	r2, r3
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fbb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	3302      	adds	r3, #2
 800fbbc:	61bb      	str	r3, [r7, #24]
 800fbbe:	e007      	b.n	800fbd0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	781a      	ldrb	r2, [r3, #0]
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	3b01      	subs	r3, #1
 800fbda:	b29a      	uxth	r2, r3
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d1cc      	bne.n	800fb88 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	2140      	movs	r1, #64	; 0x40
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f000 ff47 	bl	8010a8c <UART_WaitOnFlagUntilTimeout>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d001      	beq.n	800fc08 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800fc04:	2303      	movs	r3, #3
 800fc06:	e006      	b.n	800fc16 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2220      	movs	r2, #32
 800fc0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800fc10:	2300      	movs	r3, #0
 800fc12:	e000      	b.n	800fc16 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800fc14:	2302      	movs	r3, #2
  }
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3720      	adds	r7, #32
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
	...

0800fc20 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	4613      	mov	r3, r2
 800fc2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc34:	2b20      	cmp	r3, #32
 800fc36:	d170      	bne.n	800fd1a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d002      	beq.n	800fc44 <HAL_UART_Receive_DMA+0x24>
 800fc3e:	88fb      	ldrh	r3, [r7, #6]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d101      	bne.n	800fc48 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fc44:	2301      	movs	r3, #1
 800fc46:	e069      	b.n	800fd1c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	d101      	bne.n	800fc56 <HAL_UART_Receive_DMA+0x36>
 800fc52:	2302      	movs	r3, #2
 800fc54:	e062      	b.n	800fd1c <HAL_UART_Receive_DMA+0xfc>
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	68ba      	ldr	r2, [r7, #8]
 800fc62:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	88fa      	ldrh	r2, [r7, #6]
 800fc68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2222      	movs	r2, #34	; 0x22
 800fc78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d02c      	beq.n	800fcde <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc88:	4a26      	ldr	r2, [pc, #152]	; (800fd24 <HAL_UART_Receive_DMA+0x104>)
 800fc8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc90:	4a25      	ldr	r2, [pc, #148]	; (800fd28 <HAL_UART_Receive_DMA+0x108>)
 800fc92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc98:	4a24      	ldr	r2, [pc, #144]	; (800fd2c <HAL_UART_Receive_DMA+0x10c>)
 800fc9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fca0:	2200      	movs	r2, #0
 800fca2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	3324      	adds	r3, #36	; 0x24
 800fcae:	4619      	mov	r1, r3
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	88fb      	ldrh	r3, [r7, #6]
 800fcb8:	f7f5 f8da 	bl	8004e70 <HAL_DMA_Start_IT>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00d      	beq.n	800fcde <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2210      	movs	r2, #16
 800fcc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2200      	movs	r2, #0
 800fcce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2220      	movs	r2, #32
 800fcd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800fcda:	2301      	movs	r3, #1
 800fcdc:	e01e      	b.n	800fd1c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2200      	movs	r2, #0
 800fce2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fcf4:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	689a      	ldr	r2, [r3, #8]
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f042 0201 	orr.w	r2, r2, #1
 800fd04:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	689a      	ldr	r2, [r3, #8]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd14:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800fd16:	2300      	movs	r3, #0
 800fd18:	e000      	b.n	800fd1c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800fd1a:	2302      	movs	r3, #2
  }
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3710      	adds	r7, #16
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	08010c11 	.word	0x08010c11
 800fd28:	08010c77 	.word	0x08010c77
 800fd2c:	08010c93 	.word	0x08010c93

0800fd30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b083      	sub	sp, #12
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fd38:	bf00      	nop
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fd4c:	bf00      	nop
 800fd4e:	370c      	adds	r7, #12
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fd58:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800fd5c:	b08e      	sub	sp, #56	; 0x38
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fd62:	2300      	movs	r3, #0
 800fd64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	689a      	ldr	r2, [r3, #8]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	691b      	ldr	r3, [r3, #16]
 800fd70:	431a      	orrs	r2, r3
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	695b      	ldr	r3, [r3, #20]
 800fd76:	431a      	orrs	r2, r3
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	69db      	ldr	r3, [r3, #28]
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd86:	4313      	orrs	r3, r2
 800fd88:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	4bc1      	ldr	r3, [pc, #772]	; (8010098 <UART_SetConfig+0x340>)
 800fd92:	4013      	ands	r3, r2
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	6812      	ldr	r2, [r2, #0]
 800fd98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd9a:	430b      	orrs	r3, r1
 800fd9c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	68da      	ldr	r2, [r3, #12]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	430a      	orrs	r2, r1
 800fdb2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	699b      	ldr	r3, [r3, #24]
 800fdb8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	4ab7      	ldr	r2, [pc, #732]	; (801009c <UART_SetConfig+0x344>)
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d004      	beq.n	800fdce <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6a1b      	ldr	r3, [r3, #32]
 800fdc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdca:	4313      	orrs	r3, r2
 800fdcc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	689a      	ldr	r2, [r3, #8]
 800fdd4:	4bb2      	ldr	r3, [pc, #712]	; (80100a0 <UART_SetConfig+0x348>)
 800fdd6:	4013      	ands	r3, r2
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	6812      	ldr	r2, [r2, #0]
 800fddc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fdde:	430b      	orrs	r3, r1
 800fde0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde8:	f023 010f 	bic.w	r1, r3, #15
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	430a      	orrs	r2, r1
 800fdf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4aa9      	ldr	r2, [pc, #676]	; (80100a4 <UART_SetConfig+0x34c>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d177      	bne.n	800fef2 <UART_SetConfig+0x19a>
 800fe02:	4ba9      	ldr	r3, [pc, #676]	; (80100a8 <UART_SetConfig+0x350>)
 800fe04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fe0a:	2b28      	cmp	r3, #40	; 0x28
 800fe0c:	d86c      	bhi.n	800fee8 <UART_SetConfig+0x190>
 800fe0e:	a201      	add	r2, pc, #4	; (adr r2, 800fe14 <UART_SetConfig+0xbc>)
 800fe10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe14:	0800feb9 	.word	0x0800feb9
 800fe18:	0800fee9 	.word	0x0800fee9
 800fe1c:	0800fee9 	.word	0x0800fee9
 800fe20:	0800fee9 	.word	0x0800fee9
 800fe24:	0800fee9 	.word	0x0800fee9
 800fe28:	0800fee9 	.word	0x0800fee9
 800fe2c:	0800fee9 	.word	0x0800fee9
 800fe30:	0800fee9 	.word	0x0800fee9
 800fe34:	0800fec1 	.word	0x0800fec1
 800fe38:	0800fee9 	.word	0x0800fee9
 800fe3c:	0800fee9 	.word	0x0800fee9
 800fe40:	0800fee9 	.word	0x0800fee9
 800fe44:	0800fee9 	.word	0x0800fee9
 800fe48:	0800fee9 	.word	0x0800fee9
 800fe4c:	0800fee9 	.word	0x0800fee9
 800fe50:	0800fee9 	.word	0x0800fee9
 800fe54:	0800fec9 	.word	0x0800fec9
 800fe58:	0800fee9 	.word	0x0800fee9
 800fe5c:	0800fee9 	.word	0x0800fee9
 800fe60:	0800fee9 	.word	0x0800fee9
 800fe64:	0800fee9 	.word	0x0800fee9
 800fe68:	0800fee9 	.word	0x0800fee9
 800fe6c:	0800fee9 	.word	0x0800fee9
 800fe70:	0800fee9 	.word	0x0800fee9
 800fe74:	0800fed1 	.word	0x0800fed1
 800fe78:	0800fee9 	.word	0x0800fee9
 800fe7c:	0800fee9 	.word	0x0800fee9
 800fe80:	0800fee9 	.word	0x0800fee9
 800fe84:	0800fee9 	.word	0x0800fee9
 800fe88:	0800fee9 	.word	0x0800fee9
 800fe8c:	0800fee9 	.word	0x0800fee9
 800fe90:	0800fee9 	.word	0x0800fee9
 800fe94:	0800fed9 	.word	0x0800fed9
 800fe98:	0800fee9 	.word	0x0800fee9
 800fe9c:	0800fee9 	.word	0x0800fee9
 800fea0:	0800fee9 	.word	0x0800fee9
 800fea4:	0800fee9 	.word	0x0800fee9
 800fea8:	0800fee9 	.word	0x0800fee9
 800feac:	0800fee9 	.word	0x0800fee9
 800feb0:	0800fee9 	.word	0x0800fee9
 800feb4:	0800fee1 	.word	0x0800fee1
 800feb8:	2301      	movs	r3, #1
 800feba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800febe:	e233      	b.n	8010328 <UART_SetConfig+0x5d0>
 800fec0:	2304      	movs	r3, #4
 800fec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fec6:	e22f      	b.n	8010328 <UART_SetConfig+0x5d0>
 800fec8:	2308      	movs	r3, #8
 800feca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fece:	e22b      	b.n	8010328 <UART_SetConfig+0x5d0>
 800fed0:	2310      	movs	r3, #16
 800fed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fed6:	e227      	b.n	8010328 <UART_SetConfig+0x5d0>
 800fed8:	2320      	movs	r3, #32
 800feda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fede:	e223      	b.n	8010328 <UART_SetConfig+0x5d0>
 800fee0:	2340      	movs	r3, #64	; 0x40
 800fee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fee6:	e21f      	b.n	8010328 <UART_SetConfig+0x5d0>
 800fee8:	2380      	movs	r3, #128	; 0x80
 800feea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feee:	bf00      	nop
 800fef0:	e21a      	b.n	8010328 <UART_SetConfig+0x5d0>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4a6d      	ldr	r2, [pc, #436]	; (80100ac <UART_SetConfig+0x354>)
 800fef8:	4293      	cmp	r3, r2
 800fefa:	d132      	bne.n	800ff62 <UART_SetConfig+0x20a>
 800fefc:	4b6a      	ldr	r3, [pc, #424]	; (80100a8 <UART_SetConfig+0x350>)
 800fefe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff00:	f003 0307 	and.w	r3, r3, #7
 800ff04:	2b05      	cmp	r3, #5
 800ff06:	d827      	bhi.n	800ff58 <UART_SetConfig+0x200>
 800ff08:	a201      	add	r2, pc, #4	; (adr r2, 800ff10 <UART_SetConfig+0x1b8>)
 800ff0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff0e:	bf00      	nop
 800ff10:	0800ff29 	.word	0x0800ff29
 800ff14:	0800ff31 	.word	0x0800ff31
 800ff18:	0800ff39 	.word	0x0800ff39
 800ff1c:	0800ff41 	.word	0x0800ff41
 800ff20:	0800ff49 	.word	0x0800ff49
 800ff24:	0800ff51 	.word	0x0800ff51
 800ff28:	2300      	movs	r3, #0
 800ff2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff2e:	e1fb      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ff30:	2304      	movs	r3, #4
 800ff32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff36:	e1f7      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ff38:	2308      	movs	r3, #8
 800ff3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff3e:	e1f3      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ff40:	2310      	movs	r3, #16
 800ff42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff46:	e1ef      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ff48:	2320      	movs	r3, #32
 800ff4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff4e:	e1eb      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ff50:	2340      	movs	r3, #64	; 0x40
 800ff52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff56:	e1e7      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ff58:	2380      	movs	r3, #128	; 0x80
 800ff5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff5e:	bf00      	nop
 800ff60:	e1e2      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	4a52      	ldr	r2, [pc, #328]	; (80100b0 <UART_SetConfig+0x358>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d132      	bne.n	800ffd2 <UART_SetConfig+0x27a>
 800ff6c:	4b4e      	ldr	r3, [pc, #312]	; (80100a8 <UART_SetConfig+0x350>)
 800ff6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff70:	f003 0307 	and.w	r3, r3, #7
 800ff74:	2b05      	cmp	r3, #5
 800ff76:	d827      	bhi.n	800ffc8 <UART_SetConfig+0x270>
 800ff78:	a201      	add	r2, pc, #4	; (adr r2, 800ff80 <UART_SetConfig+0x228>)
 800ff7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff7e:	bf00      	nop
 800ff80:	0800ff99 	.word	0x0800ff99
 800ff84:	0800ffa1 	.word	0x0800ffa1
 800ff88:	0800ffa9 	.word	0x0800ffa9
 800ff8c:	0800ffb1 	.word	0x0800ffb1
 800ff90:	0800ffb9 	.word	0x0800ffb9
 800ff94:	0800ffc1 	.word	0x0800ffc1
 800ff98:	2300      	movs	r3, #0
 800ff9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff9e:	e1c3      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ffa0:	2304      	movs	r3, #4
 800ffa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffa6:	e1bf      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ffa8:	2308      	movs	r3, #8
 800ffaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffae:	e1bb      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ffb0:	2310      	movs	r3, #16
 800ffb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffb6:	e1b7      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ffb8:	2320      	movs	r3, #32
 800ffba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffbe:	e1b3      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ffc0:	2340      	movs	r3, #64	; 0x40
 800ffc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffc6:	e1af      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ffc8:	2380      	movs	r3, #128	; 0x80
 800ffca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffce:	bf00      	nop
 800ffd0:	e1aa      	b.n	8010328 <UART_SetConfig+0x5d0>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4a37      	ldr	r2, [pc, #220]	; (80100b4 <UART_SetConfig+0x35c>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d132      	bne.n	8010042 <UART_SetConfig+0x2ea>
 800ffdc:	4b32      	ldr	r3, [pc, #200]	; (80100a8 <UART_SetConfig+0x350>)
 800ffde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffe0:	f003 0307 	and.w	r3, r3, #7
 800ffe4:	2b05      	cmp	r3, #5
 800ffe6:	d827      	bhi.n	8010038 <UART_SetConfig+0x2e0>
 800ffe8:	a201      	add	r2, pc, #4	; (adr r2, 800fff0 <UART_SetConfig+0x298>)
 800ffea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffee:	bf00      	nop
 800fff0:	08010009 	.word	0x08010009
 800fff4:	08010011 	.word	0x08010011
 800fff8:	08010019 	.word	0x08010019
 800fffc:	08010021 	.word	0x08010021
 8010000:	08010029 	.word	0x08010029
 8010004:	08010031 	.word	0x08010031
 8010008:	2300      	movs	r3, #0
 801000a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801000e:	e18b      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010010:	2304      	movs	r3, #4
 8010012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010016:	e187      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010018:	2308      	movs	r3, #8
 801001a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801001e:	e183      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010020:	2310      	movs	r3, #16
 8010022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010026:	e17f      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010028:	2320      	movs	r3, #32
 801002a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801002e:	e17b      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010030:	2340      	movs	r3, #64	; 0x40
 8010032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010036:	e177      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010038:	2380      	movs	r3, #128	; 0x80
 801003a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801003e:	bf00      	nop
 8010040:	e172      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a1c      	ldr	r2, [pc, #112]	; (80100b8 <UART_SetConfig+0x360>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d144      	bne.n	80100d6 <UART_SetConfig+0x37e>
 801004c:	4b16      	ldr	r3, [pc, #88]	; (80100a8 <UART_SetConfig+0x350>)
 801004e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010050:	f003 0307 	and.w	r3, r3, #7
 8010054:	2b05      	cmp	r3, #5
 8010056:	d839      	bhi.n	80100cc <UART_SetConfig+0x374>
 8010058:	a201      	add	r2, pc, #4	; (adr r2, 8010060 <UART_SetConfig+0x308>)
 801005a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801005e:	bf00      	nop
 8010060:	08010079 	.word	0x08010079
 8010064:	08010081 	.word	0x08010081
 8010068:	08010089 	.word	0x08010089
 801006c:	08010091 	.word	0x08010091
 8010070:	080100bd 	.word	0x080100bd
 8010074:	080100c5 	.word	0x080100c5
 8010078:	2300      	movs	r3, #0
 801007a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801007e:	e153      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010080:	2304      	movs	r3, #4
 8010082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010086:	e14f      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010088:	2308      	movs	r3, #8
 801008a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801008e:	e14b      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010090:	2310      	movs	r3, #16
 8010092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010096:	e147      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010098:	cfff69f3 	.word	0xcfff69f3
 801009c:	58000c00 	.word	0x58000c00
 80100a0:	11fff4ff 	.word	0x11fff4ff
 80100a4:	40011000 	.word	0x40011000
 80100a8:	58024400 	.word	0x58024400
 80100ac:	40004400 	.word	0x40004400
 80100b0:	40004800 	.word	0x40004800
 80100b4:	40004c00 	.word	0x40004c00
 80100b8:	40005000 	.word	0x40005000
 80100bc:	2320      	movs	r3, #32
 80100be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100c2:	e131      	b.n	8010328 <UART_SetConfig+0x5d0>
 80100c4:	2340      	movs	r3, #64	; 0x40
 80100c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ca:	e12d      	b.n	8010328 <UART_SetConfig+0x5d0>
 80100cc:	2380      	movs	r3, #128	; 0x80
 80100ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100d2:	bf00      	nop
 80100d4:	e128      	b.n	8010328 <UART_SetConfig+0x5d0>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4ab6      	ldr	r2, [pc, #728]	; (80103b4 <UART_SetConfig+0x65c>)
 80100dc:	4293      	cmp	r3, r2
 80100de:	d178      	bne.n	80101d2 <UART_SetConfig+0x47a>
 80100e0:	4bb5      	ldr	r3, [pc, #724]	; (80103b8 <UART_SetConfig+0x660>)
 80100e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80100e8:	2b28      	cmp	r3, #40	; 0x28
 80100ea:	d86d      	bhi.n	80101c8 <UART_SetConfig+0x470>
 80100ec:	a201      	add	r2, pc, #4	; (adr r2, 80100f4 <UART_SetConfig+0x39c>)
 80100ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f2:	bf00      	nop
 80100f4:	08010199 	.word	0x08010199
 80100f8:	080101c9 	.word	0x080101c9
 80100fc:	080101c9 	.word	0x080101c9
 8010100:	080101c9 	.word	0x080101c9
 8010104:	080101c9 	.word	0x080101c9
 8010108:	080101c9 	.word	0x080101c9
 801010c:	080101c9 	.word	0x080101c9
 8010110:	080101c9 	.word	0x080101c9
 8010114:	080101a1 	.word	0x080101a1
 8010118:	080101c9 	.word	0x080101c9
 801011c:	080101c9 	.word	0x080101c9
 8010120:	080101c9 	.word	0x080101c9
 8010124:	080101c9 	.word	0x080101c9
 8010128:	080101c9 	.word	0x080101c9
 801012c:	080101c9 	.word	0x080101c9
 8010130:	080101c9 	.word	0x080101c9
 8010134:	080101a9 	.word	0x080101a9
 8010138:	080101c9 	.word	0x080101c9
 801013c:	080101c9 	.word	0x080101c9
 8010140:	080101c9 	.word	0x080101c9
 8010144:	080101c9 	.word	0x080101c9
 8010148:	080101c9 	.word	0x080101c9
 801014c:	080101c9 	.word	0x080101c9
 8010150:	080101c9 	.word	0x080101c9
 8010154:	080101b1 	.word	0x080101b1
 8010158:	080101c9 	.word	0x080101c9
 801015c:	080101c9 	.word	0x080101c9
 8010160:	080101c9 	.word	0x080101c9
 8010164:	080101c9 	.word	0x080101c9
 8010168:	080101c9 	.word	0x080101c9
 801016c:	080101c9 	.word	0x080101c9
 8010170:	080101c9 	.word	0x080101c9
 8010174:	080101b9 	.word	0x080101b9
 8010178:	080101c9 	.word	0x080101c9
 801017c:	080101c9 	.word	0x080101c9
 8010180:	080101c9 	.word	0x080101c9
 8010184:	080101c9 	.word	0x080101c9
 8010188:	080101c9 	.word	0x080101c9
 801018c:	080101c9 	.word	0x080101c9
 8010190:	080101c9 	.word	0x080101c9
 8010194:	080101c1 	.word	0x080101c1
 8010198:	2301      	movs	r3, #1
 801019a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801019e:	e0c3      	b.n	8010328 <UART_SetConfig+0x5d0>
 80101a0:	2304      	movs	r3, #4
 80101a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101a6:	e0bf      	b.n	8010328 <UART_SetConfig+0x5d0>
 80101a8:	2308      	movs	r3, #8
 80101aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ae:	e0bb      	b.n	8010328 <UART_SetConfig+0x5d0>
 80101b0:	2310      	movs	r3, #16
 80101b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101b6:	e0b7      	b.n	8010328 <UART_SetConfig+0x5d0>
 80101b8:	2320      	movs	r3, #32
 80101ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101be:	e0b3      	b.n	8010328 <UART_SetConfig+0x5d0>
 80101c0:	2340      	movs	r3, #64	; 0x40
 80101c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101c6:	e0af      	b.n	8010328 <UART_SetConfig+0x5d0>
 80101c8:	2380      	movs	r3, #128	; 0x80
 80101ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ce:	bf00      	nop
 80101d0:	e0aa      	b.n	8010328 <UART_SetConfig+0x5d0>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4a79      	ldr	r2, [pc, #484]	; (80103bc <UART_SetConfig+0x664>)
 80101d8:	4293      	cmp	r3, r2
 80101da:	d132      	bne.n	8010242 <UART_SetConfig+0x4ea>
 80101dc:	4b76      	ldr	r3, [pc, #472]	; (80103b8 <UART_SetConfig+0x660>)
 80101de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101e0:	f003 0307 	and.w	r3, r3, #7
 80101e4:	2b05      	cmp	r3, #5
 80101e6:	d827      	bhi.n	8010238 <UART_SetConfig+0x4e0>
 80101e8:	a201      	add	r2, pc, #4	; (adr r2, 80101f0 <UART_SetConfig+0x498>)
 80101ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ee:	bf00      	nop
 80101f0:	08010209 	.word	0x08010209
 80101f4:	08010211 	.word	0x08010211
 80101f8:	08010219 	.word	0x08010219
 80101fc:	08010221 	.word	0x08010221
 8010200:	08010229 	.word	0x08010229
 8010204:	08010231 	.word	0x08010231
 8010208:	2300      	movs	r3, #0
 801020a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801020e:	e08b      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010210:	2304      	movs	r3, #4
 8010212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010216:	e087      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010218:	2308      	movs	r3, #8
 801021a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801021e:	e083      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010220:	2310      	movs	r3, #16
 8010222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010226:	e07f      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010228:	2320      	movs	r3, #32
 801022a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801022e:	e07b      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010230:	2340      	movs	r3, #64	; 0x40
 8010232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010236:	e077      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010238:	2380      	movs	r3, #128	; 0x80
 801023a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801023e:	bf00      	nop
 8010240:	e072      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4a5e      	ldr	r2, [pc, #376]	; (80103c0 <UART_SetConfig+0x668>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d132      	bne.n	80102b2 <UART_SetConfig+0x55a>
 801024c:	4b5a      	ldr	r3, [pc, #360]	; (80103b8 <UART_SetConfig+0x660>)
 801024e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010250:	f003 0307 	and.w	r3, r3, #7
 8010254:	2b05      	cmp	r3, #5
 8010256:	d827      	bhi.n	80102a8 <UART_SetConfig+0x550>
 8010258:	a201      	add	r2, pc, #4	; (adr r2, 8010260 <UART_SetConfig+0x508>)
 801025a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801025e:	bf00      	nop
 8010260:	08010279 	.word	0x08010279
 8010264:	08010281 	.word	0x08010281
 8010268:	08010289 	.word	0x08010289
 801026c:	08010291 	.word	0x08010291
 8010270:	08010299 	.word	0x08010299
 8010274:	080102a1 	.word	0x080102a1
 8010278:	2300      	movs	r3, #0
 801027a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801027e:	e053      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010280:	2304      	movs	r3, #4
 8010282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010286:	e04f      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010288:	2308      	movs	r3, #8
 801028a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801028e:	e04b      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010290:	2310      	movs	r3, #16
 8010292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010296:	e047      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010298:	2320      	movs	r3, #32
 801029a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801029e:	e043      	b.n	8010328 <UART_SetConfig+0x5d0>
 80102a0:	2340      	movs	r3, #64	; 0x40
 80102a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102a6:	e03f      	b.n	8010328 <UART_SetConfig+0x5d0>
 80102a8:	2380      	movs	r3, #128	; 0x80
 80102aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ae:	bf00      	nop
 80102b0:	e03a      	b.n	8010328 <UART_SetConfig+0x5d0>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	4a43      	ldr	r2, [pc, #268]	; (80103c4 <UART_SetConfig+0x66c>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d132      	bne.n	8010322 <UART_SetConfig+0x5ca>
 80102bc:	4b3e      	ldr	r3, [pc, #248]	; (80103b8 <UART_SetConfig+0x660>)
 80102be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102c0:	f003 0307 	and.w	r3, r3, #7
 80102c4:	2b05      	cmp	r3, #5
 80102c6:	d827      	bhi.n	8010318 <UART_SetConfig+0x5c0>
 80102c8:	a201      	add	r2, pc, #4	; (adr r2, 80102d0 <UART_SetConfig+0x578>)
 80102ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ce:	bf00      	nop
 80102d0:	080102e9 	.word	0x080102e9
 80102d4:	080102f1 	.word	0x080102f1
 80102d8:	080102f9 	.word	0x080102f9
 80102dc:	08010301 	.word	0x08010301
 80102e0:	08010309 	.word	0x08010309
 80102e4:	08010311 	.word	0x08010311
 80102e8:	2302      	movs	r3, #2
 80102ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ee:	e01b      	b.n	8010328 <UART_SetConfig+0x5d0>
 80102f0:	2304      	movs	r3, #4
 80102f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102f6:	e017      	b.n	8010328 <UART_SetConfig+0x5d0>
 80102f8:	2308      	movs	r3, #8
 80102fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102fe:	e013      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010300:	2310      	movs	r3, #16
 8010302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010306:	e00f      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010308:	2320      	movs	r3, #32
 801030a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801030e:	e00b      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010310:	2340      	movs	r3, #64	; 0x40
 8010312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010316:	e007      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010318:	2380      	movs	r3, #128	; 0x80
 801031a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801031e:	bf00      	nop
 8010320:	e002      	b.n	8010328 <UART_SetConfig+0x5d0>
 8010322:	2380      	movs	r3, #128	; 0x80
 8010324:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4a25      	ldr	r2, [pc, #148]	; (80103c4 <UART_SetConfig+0x66c>)
 801032e:	4293      	cmp	r3, r2
 8010330:	f040 80b8 	bne.w	80104a4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010334:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010338:	2b08      	cmp	r3, #8
 801033a:	d019      	beq.n	8010370 <UART_SetConfig+0x618>
 801033c:	2b08      	cmp	r3, #8
 801033e:	dc04      	bgt.n	801034a <UART_SetConfig+0x5f2>
 8010340:	2b02      	cmp	r3, #2
 8010342:	d009      	beq.n	8010358 <UART_SetConfig+0x600>
 8010344:	2b04      	cmp	r3, #4
 8010346:	d00b      	beq.n	8010360 <UART_SetConfig+0x608>
 8010348:	e042      	b.n	80103d0 <UART_SetConfig+0x678>
 801034a:	2b20      	cmp	r3, #32
 801034c:	d02b      	beq.n	80103a6 <UART_SetConfig+0x64e>
 801034e:	2b40      	cmp	r3, #64	; 0x40
 8010350:	d02c      	beq.n	80103ac <UART_SetConfig+0x654>
 8010352:	2b10      	cmp	r3, #16
 8010354:	d014      	beq.n	8010380 <UART_SetConfig+0x628>
 8010356:	e03b      	b.n	80103d0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010358:	f7fb fad2 	bl	800b900 <HAL_RCCEx_GetD3PCLK1Freq>
 801035c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801035e:	e03d      	b.n	80103dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010360:	f107 0314 	add.w	r3, r7, #20
 8010364:	4618      	mov	r0, r3
 8010366:	f7fb fae1 	bl	800b92c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801036e:	e035      	b.n	80103dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010370:	f107 0308 	add.w	r3, r7, #8
 8010374:	4618      	mov	r0, r3
 8010376:	f7fb fc25 	bl	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801037e:	e02d      	b.n	80103dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010380:	4b0d      	ldr	r3, [pc, #52]	; (80103b8 <UART_SetConfig+0x660>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f003 0320 	and.w	r3, r3, #32
 8010388:	2b00      	cmp	r3, #0
 801038a:	d009      	beq.n	80103a0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801038c:	4b0a      	ldr	r3, [pc, #40]	; (80103b8 <UART_SetConfig+0x660>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	08db      	lsrs	r3, r3, #3
 8010392:	f003 0303 	and.w	r3, r3, #3
 8010396:	4a0c      	ldr	r2, [pc, #48]	; (80103c8 <UART_SetConfig+0x670>)
 8010398:	fa22 f303 	lsr.w	r3, r2, r3
 801039c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801039e:	e01d      	b.n	80103dc <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80103a0:	4b09      	ldr	r3, [pc, #36]	; (80103c8 <UART_SetConfig+0x670>)
 80103a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80103a4:	e01a      	b.n	80103dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80103a6:	4b09      	ldr	r3, [pc, #36]	; (80103cc <UART_SetConfig+0x674>)
 80103a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80103aa:	e017      	b.n	80103dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80103ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80103b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80103b2:	e013      	b.n	80103dc <UART_SetConfig+0x684>
 80103b4:	40011400 	.word	0x40011400
 80103b8:	58024400 	.word	0x58024400
 80103bc:	40007800 	.word	0x40007800
 80103c0:	40007c00 	.word	0x40007c00
 80103c4:	58000c00 	.word	0x58000c00
 80103c8:	03d09000 	.word	0x03d09000
 80103cc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80103d0:	2300      	movs	r3, #0
 80103d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80103d4:	2301      	movs	r3, #1
 80103d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80103da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80103dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f000 824d 	beq.w	801087e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103e8:	4aad      	ldr	r2, [pc, #692]	; (80106a0 <UART_SetConfig+0x948>)
 80103ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103ee:	461a      	mov	r2, r3
 80103f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80103f6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	685a      	ldr	r2, [r3, #4]
 80103fc:	4613      	mov	r3, r2
 80103fe:	005b      	lsls	r3, r3, #1
 8010400:	4413      	add	r3, r2
 8010402:	6a3a      	ldr	r2, [r7, #32]
 8010404:	429a      	cmp	r2, r3
 8010406:	d305      	bcc.n	8010414 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801040e:	6a3a      	ldr	r2, [r7, #32]
 8010410:	429a      	cmp	r2, r3
 8010412:	d903      	bls.n	801041c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8010414:	2301      	movs	r3, #1
 8010416:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801041a:	e230      	b.n	801087e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041e:	4618      	mov	r0, r3
 8010420:	f04f 0100 	mov.w	r1, #0
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010428:	4a9d      	ldr	r2, [pc, #628]	; (80106a0 <UART_SetConfig+0x948>)
 801042a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801042e:	b29b      	uxth	r3, r3
 8010430:	f04f 0400 	mov.w	r4, #0
 8010434:	461a      	mov	r2, r3
 8010436:	4623      	mov	r3, r4
 8010438:	f7ef ffaa 	bl	8000390 <__aeabi_uldivmod>
 801043c:	4603      	mov	r3, r0
 801043e:	460c      	mov	r4, r1
 8010440:	4619      	mov	r1, r3
 8010442:	4622      	mov	r2, r4
 8010444:	f04f 0300 	mov.w	r3, #0
 8010448:	f04f 0400 	mov.w	r4, #0
 801044c:	0214      	lsls	r4, r2, #8
 801044e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8010452:	020b      	lsls	r3, r1, #8
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	6852      	ldr	r2, [r2, #4]
 8010458:	0852      	lsrs	r2, r2, #1
 801045a:	4611      	mov	r1, r2
 801045c:	f04f 0200 	mov.w	r2, #0
 8010460:	eb13 0b01 	adds.w	fp, r3, r1
 8010464:	eb44 0c02 	adc.w	ip, r4, r2
 8010468:	4658      	mov	r0, fp
 801046a:	4661      	mov	r1, ip
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	f04f 0400 	mov.w	r4, #0
 8010474:	461a      	mov	r2, r3
 8010476:	4623      	mov	r3, r4
 8010478:	f7ef ff8a 	bl	8000390 <__aeabi_uldivmod>
 801047c:	4603      	mov	r3, r0
 801047e:	460c      	mov	r4, r1
 8010480:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010488:	d308      	bcc.n	801049c <UART_SetConfig+0x744>
 801048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010490:	d204      	bcs.n	801049c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010498:	60da      	str	r2, [r3, #12]
 801049a:	e1f0      	b.n	801087e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 801049c:	2301      	movs	r3, #1
 801049e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80104a2:	e1ec      	b.n	801087e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	69db      	ldr	r3, [r3, #28]
 80104a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80104ac:	f040 8100 	bne.w	80106b0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80104b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80104b4:	2b40      	cmp	r3, #64	; 0x40
 80104b6:	f200 80b7 	bhi.w	8010628 <UART_SetConfig+0x8d0>
 80104ba:	a201      	add	r2, pc, #4	; (adr r2, 80104c0 <UART_SetConfig+0x768>)
 80104bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104c0:	080105c5 	.word	0x080105c5
 80104c4:	080105cd 	.word	0x080105cd
 80104c8:	08010629 	.word	0x08010629
 80104cc:	08010629 	.word	0x08010629
 80104d0:	080105d5 	.word	0x080105d5
 80104d4:	08010629 	.word	0x08010629
 80104d8:	08010629 	.word	0x08010629
 80104dc:	08010629 	.word	0x08010629
 80104e0:	080105e5 	.word	0x080105e5
 80104e4:	08010629 	.word	0x08010629
 80104e8:	08010629 	.word	0x08010629
 80104ec:	08010629 	.word	0x08010629
 80104f0:	08010629 	.word	0x08010629
 80104f4:	08010629 	.word	0x08010629
 80104f8:	08010629 	.word	0x08010629
 80104fc:	08010629 	.word	0x08010629
 8010500:	080105f5 	.word	0x080105f5
 8010504:	08010629 	.word	0x08010629
 8010508:	08010629 	.word	0x08010629
 801050c:	08010629 	.word	0x08010629
 8010510:	08010629 	.word	0x08010629
 8010514:	08010629 	.word	0x08010629
 8010518:	08010629 	.word	0x08010629
 801051c:	08010629 	.word	0x08010629
 8010520:	08010629 	.word	0x08010629
 8010524:	08010629 	.word	0x08010629
 8010528:	08010629 	.word	0x08010629
 801052c:	08010629 	.word	0x08010629
 8010530:	08010629 	.word	0x08010629
 8010534:	08010629 	.word	0x08010629
 8010538:	08010629 	.word	0x08010629
 801053c:	08010629 	.word	0x08010629
 8010540:	0801061b 	.word	0x0801061b
 8010544:	08010629 	.word	0x08010629
 8010548:	08010629 	.word	0x08010629
 801054c:	08010629 	.word	0x08010629
 8010550:	08010629 	.word	0x08010629
 8010554:	08010629 	.word	0x08010629
 8010558:	08010629 	.word	0x08010629
 801055c:	08010629 	.word	0x08010629
 8010560:	08010629 	.word	0x08010629
 8010564:	08010629 	.word	0x08010629
 8010568:	08010629 	.word	0x08010629
 801056c:	08010629 	.word	0x08010629
 8010570:	08010629 	.word	0x08010629
 8010574:	08010629 	.word	0x08010629
 8010578:	08010629 	.word	0x08010629
 801057c:	08010629 	.word	0x08010629
 8010580:	08010629 	.word	0x08010629
 8010584:	08010629 	.word	0x08010629
 8010588:	08010629 	.word	0x08010629
 801058c:	08010629 	.word	0x08010629
 8010590:	08010629 	.word	0x08010629
 8010594:	08010629 	.word	0x08010629
 8010598:	08010629 	.word	0x08010629
 801059c:	08010629 	.word	0x08010629
 80105a0:	08010629 	.word	0x08010629
 80105a4:	08010629 	.word	0x08010629
 80105a8:	08010629 	.word	0x08010629
 80105ac:	08010629 	.word	0x08010629
 80105b0:	08010629 	.word	0x08010629
 80105b4:	08010629 	.word	0x08010629
 80105b8:	08010629 	.word	0x08010629
 80105bc:	08010629 	.word	0x08010629
 80105c0:	08010621 	.word	0x08010621
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80105c4:	f7f9 ffee 	bl	800a5a4 <HAL_RCC_GetPCLK1Freq>
 80105c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80105ca:	e033      	b.n	8010634 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80105cc:	f7fa f800 	bl	800a5d0 <HAL_RCC_GetPCLK2Freq>
 80105d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80105d2:	e02f      	b.n	8010634 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80105d4:	f107 0314 	add.w	r3, r7, #20
 80105d8:	4618      	mov	r0, r3
 80105da:	f7fb f9a7 	bl	800b92c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80105de:	69bb      	ldr	r3, [r7, #24]
 80105e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80105e2:	e027      	b.n	8010634 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80105e4:	f107 0308 	add.w	r3, r7, #8
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fb faeb 	bl	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80105f2:	e01f      	b.n	8010634 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80105f4:	4b2b      	ldr	r3, [pc, #172]	; (80106a4 <UART_SetConfig+0x94c>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f003 0320 	and.w	r3, r3, #32
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d009      	beq.n	8010614 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010600:	4b28      	ldr	r3, [pc, #160]	; (80106a4 <UART_SetConfig+0x94c>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	08db      	lsrs	r3, r3, #3
 8010606:	f003 0303 	and.w	r3, r3, #3
 801060a:	4a27      	ldr	r2, [pc, #156]	; (80106a8 <UART_SetConfig+0x950>)
 801060c:	fa22 f303 	lsr.w	r3, r2, r3
 8010610:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010612:	e00f      	b.n	8010634 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8010614:	4b24      	ldr	r3, [pc, #144]	; (80106a8 <UART_SetConfig+0x950>)
 8010616:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010618:	e00c      	b.n	8010634 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801061a:	4b24      	ldr	r3, [pc, #144]	; (80106ac <UART_SetConfig+0x954>)
 801061c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801061e:	e009      	b.n	8010634 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010624:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010626:	e005      	b.n	8010634 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8010628:	2300      	movs	r3, #0
 801062a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801062c:	2301      	movs	r3, #1
 801062e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010632:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010636:	2b00      	cmp	r3, #0
 8010638:	f000 8121 	beq.w	801087e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010640:	4a17      	ldr	r2, [pc, #92]	; (80106a0 <UART_SetConfig+0x948>)
 8010642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010646:	461a      	mov	r2, r3
 8010648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064a:	fbb3 f3f2 	udiv	r3, r3, r2
 801064e:	005a      	lsls	r2, r3, #1
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	085b      	lsrs	r3, r3, #1
 8010656:	441a      	add	r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	685b      	ldr	r3, [r3, #4]
 801065c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010660:	b29b      	uxth	r3, r3
 8010662:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010666:	2b0f      	cmp	r3, #15
 8010668:	d916      	bls.n	8010698 <UART_SetConfig+0x940>
 801066a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010670:	d212      	bcs.n	8010698 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010674:	b29b      	uxth	r3, r3
 8010676:	f023 030f 	bic.w	r3, r3, #15
 801067a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067e:	085b      	lsrs	r3, r3, #1
 8010680:	b29b      	uxth	r3, r3
 8010682:	f003 0307 	and.w	r3, r3, #7
 8010686:	b29a      	uxth	r2, r3
 8010688:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801068a:	4313      	orrs	r3, r2
 801068c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010694:	60da      	str	r2, [r3, #12]
 8010696:	e0f2      	b.n	801087e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8010698:	2301      	movs	r3, #1
 801069a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801069e:	e0ee      	b.n	801087e <UART_SetConfig+0xb26>
 80106a0:	0801aeb8 	.word	0x0801aeb8
 80106a4:	58024400 	.word	0x58024400
 80106a8:	03d09000 	.word	0x03d09000
 80106ac:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80106b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80106b4:	2b40      	cmp	r3, #64	; 0x40
 80106b6:	f200 80b7 	bhi.w	8010828 <UART_SetConfig+0xad0>
 80106ba:	a201      	add	r2, pc, #4	; (adr r2, 80106c0 <UART_SetConfig+0x968>)
 80106bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106c0:	080107c5 	.word	0x080107c5
 80106c4:	080107cd 	.word	0x080107cd
 80106c8:	08010829 	.word	0x08010829
 80106cc:	08010829 	.word	0x08010829
 80106d0:	080107d5 	.word	0x080107d5
 80106d4:	08010829 	.word	0x08010829
 80106d8:	08010829 	.word	0x08010829
 80106dc:	08010829 	.word	0x08010829
 80106e0:	080107e5 	.word	0x080107e5
 80106e4:	08010829 	.word	0x08010829
 80106e8:	08010829 	.word	0x08010829
 80106ec:	08010829 	.word	0x08010829
 80106f0:	08010829 	.word	0x08010829
 80106f4:	08010829 	.word	0x08010829
 80106f8:	08010829 	.word	0x08010829
 80106fc:	08010829 	.word	0x08010829
 8010700:	080107f5 	.word	0x080107f5
 8010704:	08010829 	.word	0x08010829
 8010708:	08010829 	.word	0x08010829
 801070c:	08010829 	.word	0x08010829
 8010710:	08010829 	.word	0x08010829
 8010714:	08010829 	.word	0x08010829
 8010718:	08010829 	.word	0x08010829
 801071c:	08010829 	.word	0x08010829
 8010720:	08010829 	.word	0x08010829
 8010724:	08010829 	.word	0x08010829
 8010728:	08010829 	.word	0x08010829
 801072c:	08010829 	.word	0x08010829
 8010730:	08010829 	.word	0x08010829
 8010734:	08010829 	.word	0x08010829
 8010738:	08010829 	.word	0x08010829
 801073c:	08010829 	.word	0x08010829
 8010740:	0801081b 	.word	0x0801081b
 8010744:	08010829 	.word	0x08010829
 8010748:	08010829 	.word	0x08010829
 801074c:	08010829 	.word	0x08010829
 8010750:	08010829 	.word	0x08010829
 8010754:	08010829 	.word	0x08010829
 8010758:	08010829 	.word	0x08010829
 801075c:	08010829 	.word	0x08010829
 8010760:	08010829 	.word	0x08010829
 8010764:	08010829 	.word	0x08010829
 8010768:	08010829 	.word	0x08010829
 801076c:	08010829 	.word	0x08010829
 8010770:	08010829 	.word	0x08010829
 8010774:	08010829 	.word	0x08010829
 8010778:	08010829 	.word	0x08010829
 801077c:	08010829 	.word	0x08010829
 8010780:	08010829 	.word	0x08010829
 8010784:	08010829 	.word	0x08010829
 8010788:	08010829 	.word	0x08010829
 801078c:	08010829 	.word	0x08010829
 8010790:	08010829 	.word	0x08010829
 8010794:	08010829 	.word	0x08010829
 8010798:	08010829 	.word	0x08010829
 801079c:	08010829 	.word	0x08010829
 80107a0:	08010829 	.word	0x08010829
 80107a4:	08010829 	.word	0x08010829
 80107a8:	08010829 	.word	0x08010829
 80107ac:	08010829 	.word	0x08010829
 80107b0:	08010829 	.word	0x08010829
 80107b4:	08010829 	.word	0x08010829
 80107b8:	08010829 	.word	0x08010829
 80107bc:	08010829 	.word	0x08010829
 80107c0:	08010821 	.word	0x08010821
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80107c4:	f7f9 feee 	bl	800a5a4 <HAL_RCC_GetPCLK1Freq>
 80107c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80107ca:	e033      	b.n	8010834 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80107cc:	f7f9 ff00 	bl	800a5d0 <HAL_RCC_GetPCLK2Freq>
 80107d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80107d2:	e02f      	b.n	8010834 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107d4:	f107 0314 	add.w	r3, r7, #20
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fb f8a7 	bl	800b92c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80107e2:	e027      	b.n	8010834 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80107e4:	f107 0308 	add.w	r3, r7, #8
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7fb f9eb 	bl	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80107f2:	e01f      	b.n	8010834 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80107f4:	4b2c      	ldr	r3, [pc, #176]	; (80108a8 <UART_SetConfig+0xb50>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f003 0320 	and.w	r3, r3, #32
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d009      	beq.n	8010814 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010800:	4b29      	ldr	r3, [pc, #164]	; (80108a8 <UART_SetConfig+0xb50>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	08db      	lsrs	r3, r3, #3
 8010806:	f003 0303 	and.w	r3, r3, #3
 801080a:	4a28      	ldr	r2, [pc, #160]	; (80108ac <UART_SetConfig+0xb54>)
 801080c:	fa22 f303 	lsr.w	r3, r2, r3
 8010810:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010812:	e00f      	b.n	8010834 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8010814:	4b25      	ldr	r3, [pc, #148]	; (80108ac <UART_SetConfig+0xb54>)
 8010816:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010818:	e00c      	b.n	8010834 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801081a:	4b25      	ldr	r3, [pc, #148]	; (80108b0 <UART_SetConfig+0xb58>)
 801081c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801081e:	e009      	b.n	8010834 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010824:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010826:	e005      	b.n	8010834 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8010828:	2300      	movs	r3, #0
 801082a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801082c:	2301      	movs	r3, #1
 801082e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010832:	bf00      	nop
    }

    if (pclk != 0U)
 8010834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010836:	2b00      	cmp	r3, #0
 8010838:	d021      	beq.n	801087e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801083e:	4a1d      	ldr	r2, [pc, #116]	; (80108b4 <UART_SetConfig+0xb5c>)
 8010840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010844:	461a      	mov	r2, r3
 8010846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010848:	fbb3 f2f2 	udiv	r2, r3, r2
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	685b      	ldr	r3, [r3, #4]
 8010850:	085b      	lsrs	r3, r3, #1
 8010852:	441a      	add	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	fbb2 f3f3 	udiv	r3, r2, r3
 801085c:	b29b      	uxth	r3, r3
 801085e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010862:	2b0f      	cmp	r3, #15
 8010864:	d908      	bls.n	8010878 <UART_SetConfig+0xb20>
 8010866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801086c:	d204      	bcs.n	8010878 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010874:	60da      	str	r2, [r3, #12]
 8010876:	e002      	b.n	801087e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8010878:	2301      	movs	r3, #1
 801087a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2201      	movs	r2, #1
 8010882:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2201      	movs	r2, #1
 801088a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2200      	movs	r2, #0
 8010892:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2200      	movs	r2, #0
 8010898:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 801089a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3738      	adds	r7, #56	; 0x38
 80108a2:	46bd      	mov	sp, r7
 80108a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80108a8:	58024400 	.word	0x58024400
 80108ac:	03d09000 	.word	0x03d09000
 80108b0:	003d0900 	.word	0x003d0900
 80108b4:	0801aeb8 	.word	0x0801aeb8

080108b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b083      	sub	sp, #12
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108c4:	f003 0301 	and.w	r3, r3, #1
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d00a      	beq.n	80108e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	430a      	orrs	r2, r1
 80108e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108e6:	f003 0302 	and.w	r3, r3, #2
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00a      	beq.n	8010904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	430a      	orrs	r2, r1
 8010902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010908:	f003 0304 	and.w	r3, r3, #4
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00a      	beq.n	8010926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	430a      	orrs	r2, r1
 8010924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801092a:	f003 0308 	and.w	r3, r3, #8
 801092e:	2b00      	cmp	r3, #0
 8010930:	d00a      	beq.n	8010948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	430a      	orrs	r2, r1
 8010946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801094c:	f003 0310 	and.w	r3, r3, #16
 8010950:	2b00      	cmp	r3, #0
 8010952:	d00a      	beq.n	801096a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	689b      	ldr	r3, [r3, #8]
 801095a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	430a      	orrs	r2, r1
 8010968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801096e:	f003 0320 	and.w	r3, r3, #32
 8010972:	2b00      	cmp	r3, #0
 8010974:	d00a      	beq.n	801098c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	430a      	orrs	r2, r1
 801098a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010994:	2b00      	cmp	r3, #0
 8010996:	d01a      	beq.n	80109ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	430a      	orrs	r2, r1
 80109ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80109b6:	d10a      	bne.n	80109ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	430a      	orrs	r2, r1
 80109cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d00a      	beq.n	80109f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	430a      	orrs	r2, r1
 80109ee:	605a      	str	r2, [r3, #4]
  }
}
 80109f0:	bf00      	nop
 80109f2:	370c      	adds	r7, #12
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr

080109fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b086      	sub	sp, #24
 8010a00:	af02      	add	r7, sp, #8
 8010a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2200      	movs	r2, #0
 8010a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010a0c:	f7f3 fd8a 	bl	8004524 <HAL_GetTick>
 8010a10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f003 0308 	and.w	r3, r3, #8
 8010a1c:	2b08      	cmp	r3, #8
 8010a1e:	d10e      	bne.n	8010a3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f000 f82c 	bl	8010a8c <UART_WaitOnFlagUntilTimeout>
 8010a34:	4603      	mov	r3, r0
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d001      	beq.n	8010a3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a3a:	2303      	movs	r3, #3
 8010a3c:	e022      	b.n	8010a84 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f003 0304 	and.w	r3, r3, #4
 8010a48:	2b04      	cmp	r3, #4
 8010a4a:	d10e      	bne.n	8010a6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010a50:	9300      	str	r3, [sp, #0]
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	2200      	movs	r2, #0
 8010a56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 f816 	bl	8010a8c <UART_WaitOnFlagUntilTimeout>
 8010a60:	4603      	mov	r3, r0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d001      	beq.n	8010a6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a66:	2303      	movs	r3, #3
 8010a68:	e00c      	b.n	8010a84 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2220      	movs	r2, #32
 8010a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2220      	movs	r2, #32
 8010a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010a82:	2300      	movs	r3, #0
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3710      	adds	r7, #16
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	60f8      	str	r0, [r7, #12]
 8010a94:	60b9      	str	r1, [r7, #8]
 8010a96:	603b      	str	r3, [r7, #0]
 8010a98:	4613      	mov	r3, r2
 8010a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a9c:	e062      	b.n	8010b64 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a9e:	69bb      	ldr	r3, [r7, #24]
 8010aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aa4:	d05e      	beq.n	8010b64 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010aa6:	f7f3 fd3d 	bl	8004524 <HAL_GetTick>
 8010aaa:	4602      	mov	r2, r0
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	1ad3      	subs	r3, r2, r3
 8010ab0:	69ba      	ldr	r2, [r7, #24]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d302      	bcc.n	8010abc <UART_WaitOnFlagUntilTimeout+0x30>
 8010ab6:	69bb      	ldr	r3, [r7, #24]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d11d      	bne.n	8010af8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010aca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	689a      	ldr	r2, [r3, #8]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f022 0201 	bic.w	r2, r2, #1
 8010ada:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2220      	movs	r2, #32
 8010ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2220      	movs	r2, #32
 8010ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2200      	movs	r2, #0
 8010af0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8010af4:	2303      	movs	r3, #3
 8010af6:	e045      	b.n	8010b84 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f003 0304 	and.w	r3, r3, #4
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d02e      	beq.n	8010b64 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	69db      	ldr	r3, [r3, #28]
 8010b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b14:	d126      	bne.n	8010b64 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010b1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	681a      	ldr	r2, [r3, #0]
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b2e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	689a      	ldr	r2, [r3, #8]
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f022 0201 	bic.w	r2, r2, #1
 8010b3e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	2220      	movs	r2, #32
 8010b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2220      	movs	r2, #32
 8010b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	2220      	movs	r2, #32
 8010b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8010b60:	2303      	movs	r3, #3
 8010b62:	e00f      	b.n	8010b84 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	69da      	ldr	r2, [r3, #28]
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	4013      	ands	r3, r2
 8010b6e:	68ba      	ldr	r2, [r7, #8]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	bf0c      	ite	eq
 8010b74:	2301      	moveq	r3, #1
 8010b76:	2300      	movne	r3, #0
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	79fb      	ldrb	r3, [r7, #7]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d08d      	beq.n	8010a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b82:	2300      	movs	r3, #0
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3710      	adds	r7, #16
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010ba2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	689a      	ldr	r2, [r3, #8]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010bb2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2220      	movs	r2, #32
 8010bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8010bbc:	bf00      	nop
 8010bbe:	370c      	adds	r7, #12
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	681a      	ldr	r2, [r3, #0]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010bde:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	6899      	ldr	r1, [r3, #8]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681a      	ldr	r2, [r3, #0]
 8010bea:	4b08      	ldr	r3, [pc, #32]	; (8010c0c <UART_EndRxTransfer+0x44>)
 8010bec:	400b      	ands	r3, r1
 8010bee:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2220      	movs	r2, #32
 8010bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8010bfe:	bf00      	nop
 8010c00:	370c      	adds	r7, #12
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr
 8010c0a:	bf00      	nop
 8010c0c:	effffffe 	.word	0xeffffffe

08010c10 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c1c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	69db      	ldr	r3, [r3, #28]
 8010c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c26:	d01f      	beq.n	8010c68 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010c3e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	689a      	ldr	r2, [r3, #8]
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	f022 0201 	bic.w	r2, r2, #1
 8010c4e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	689a      	ldr	r2, [r3, #8]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c5e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2220      	movs	r2, #32
 8010c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	f7ff f861 	bl	800fd30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c6e:	bf00      	nop
 8010c70:	3710      	adds	r7, #16
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}

08010c76 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010c76:	b580      	push	{r7, lr}
 8010c78:	b084      	sub	sp, #16
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010c84:	68f8      	ldr	r0, [r7, #12]
 8010c86:	f7ef ff51 	bl	8000b2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c8a:	bf00      	nop
 8010c8c:	3710      	adds	r7, #16
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}

08010c92 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010c92:	b580      	push	{r7, lr}
 8010c94:	b086      	sub	sp, #24
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c9e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ca6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cba:	2b80      	cmp	r3, #128	; 0x80
 8010cbc:	d109      	bne.n	8010cd2 <UART_DMAError+0x40>
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	2b21      	cmp	r3, #33	; 0x21
 8010cc2:	d106      	bne.n	8010cd2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010ccc:	6978      	ldr	r0, [r7, #20]
 8010cce:	f7ff ff5d 	bl	8010b8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	689b      	ldr	r3, [r3, #8]
 8010cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cdc:	2b40      	cmp	r3, #64	; 0x40
 8010cde:	d109      	bne.n	8010cf4 <UART_DMAError+0x62>
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	2b22      	cmp	r3, #34	; 0x22
 8010ce4:	d106      	bne.n	8010cf4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010cee:	6978      	ldr	r0, [r7, #20]
 8010cf0:	f7ff ff6a 	bl	8010bc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010cfa:	f043 0210 	orr.w	r2, r3, #16
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d04:	6978      	ldr	r0, [r7, #20]
 8010d06:	f7ff f81d 	bl	800fd44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d0a:	bf00      	nop
 8010d0c:	3718      	adds	r7, #24
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}

08010d12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010d12:	b480      	push	{r7}
 8010d14:	b085      	sub	sp, #20
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d101      	bne.n	8010d28 <HAL_UARTEx_DisableFifoMode+0x16>
 8010d24:	2302      	movs	r3, #2
 8010d26:	e027      	b.n	8010d78 <HAL_UARTEx_DisableFifoMode+0x66>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2224      	movs	r2, #36	; 0x24
 8010d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	681a      	ldr	r2, [r3, #0]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f022 0201 	bic.w	r2, r2, #1
 8010d4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010d56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	68fa      	ldr	r2, [r7, #12]
 8010d64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2220      	movs	r2, #32
 8010d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2200      	movs	r2, #0
 8010d72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010d76:	2300      	movs	r3, #0
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3714      	adds	r7, #20
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	d101      	bne.n	8010d9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010d98:	2302      	movs	r3, #2
 8010d9a:	e02d      	b.n	8010df8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2201      	movs	r2, #1
 8010da0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2224      	movs	r2, #36	; 0x24
 8010da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f022 0201 	bic.w	r2, r2, #1
 8010dc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	689b      	ldr	r3, [r3, #8]
 8010dca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	683a      	ldr	r2, [r7, #0]
 8010dd4:	430a      	orrs	r2, r1
 8010dd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 f84f 	bl	8010e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	68fa      	ldr	r2, [r7, #12]
 8010de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2220      	movs	r2, #32
 8010dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2200      	movs	r2, #0
 8010df2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010df6:	2300      	movs	r3, #0
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3710      	adds	r7, #16
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b084      	sub	sp, #16
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	d101      	bne.n	8010e18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010e14:	2302      	movs	r3, #2
 8010e16:	e02d      	b.n	8010e74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2224      	movs	r2, #36	; 0x24
 8010e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	681a      	ldr	r2, [r3, #0]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f022 0201 	bic.w	r2, r2, #1
 8010e3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	689b      	ldr	r3, [r3, #8]
 8010e46:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	683a      	ldr	r2, [r7, #0]
 8010e50:	430a      	orrs	r2, r1
 8010e52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f000 f811 	bl	8010e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	68fa      	ldr	r2, [r7, #12]
 8010e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2220      	movs	r2, #32
 8010e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010e72:	2300      	movs	r3, #0
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3710      	adds	r7, #16
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b089      	sub	sp, #36	; 0x24
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010e84:	4a2f      	ldr	r2, [pc, #188]	; (8010f44 <UARTEx_SetNbDataToProcess+0xc8>)
 8010e86:	f107 0314 	add.w	r3, r7, #20
 8010e8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e8e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010e92:	4a2d      	ldr	r2, [pc, #180]	; (8010f48 <UARTEx_SetNbDataToProcess+0xcc>)
 8010e94:	f107 030c 	add.w	r3, r7, #12
 8010e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e9c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d108      	bne.n	8010eba <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2201      	movs	r2, #1
 8010eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010eb8:	e03d      	b.n	8010f36 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010eba:	2310      	movs	r3, #16
 8010ebc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010ebe:	2310      	movs	r3, #16
 8010ec0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	689b      	ldr	r3, [r3, #8]
 8010ec8:	0e5b      	lsrs	r3, r3, #25
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	f003 0307 	and.w	r3, r3, #7
 8010ed0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	689b      	ldr	r3, [r3, #8]
 8010ed8:	0f5b      	lsrs	r3, r3, #29
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	f003 0307 	and.w	r3, r3, #7
 8010ee0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8010ee2:	7fbb      	ldrb	r3, [r7, #30]
 8010ee4:	7f3a      	ldrb	r2, [r7, #28]
 8010ee6:	f107 0120 	add.w	r1, r7, #32
 8010eea:	440a      	add	r2, r1
 8010eec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010ef0:	fb02 f303 	mul.w	r3, r2, r3
 8010ef4:	7f3a      	ldrb	r2, [r7, #28]
 8010ef6:	f107 0120 	add.w	r1, r7, #32
 8010efa:	440a      	add	r2, r1
 8010efc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8010f0c:	7ffb      	ldrb	r3, [r7, #31]
 8010f0e:	7f7a      	ldrb	r2, [r7, #29]
 8010f10:	f107 0120 	add.w	r1, r7, #32
 8010f14:	440a      	add	r2, r1
 8010f16:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010f1a:	fb02 f303 	mul.w	r3, r2, r3
 8010f1e:	7f7a      	ldrb	r2, [r7, #29]
 8010f20:	f107 0120 	add.w	r1, r7, #32
 8010f24:	440a      	add	r2, r1
 8010f26:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f2e:	b29a      	uxth	r2, r3
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010f36:	bf00      	nop
 8010f38:	3724      	adds	r7, #36	; 0x24
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop
 8010f44:	0801adf8 	.word	0x0801adf8
 8010f48:	0801ae00 	.word	0x0801ae00

08010f4c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010f4c:	b084      	sub	sp, #16
 8010f4e:	b480      	push	{r7}
 8010f50:	b085      	sub	sp, #20
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
 8010f56:	f107 001c 	add.w	r0, r7, #28
 8010f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010f62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8010f64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010f66:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8010f6a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8010f6e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8010f72:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	4313      	orrs	r3, r2
 8010f78:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	685a      	ldr	r2, [r3, #4]
 8010f7e:	4b07      	ldr	r3, [pc, #28]	; (8010f9c <SDMMC_Init+0x50>)
 8010f80:	4013      	ands	r3, r2
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	431a      	orrs	r2, r3
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010f8a:	2300      	movs	r3, #0
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3714      	adds	r7, #20
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	b004      	add	sp, #16
 8010f98:	4770      	bx	lr
 8010f9a:	bf00      	nop
 8010f9c:	ffc02c00 	.word	0xffc02c00

08010fa0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	370c      	adds	r7, #12
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb8:	4770      	bx	lr

08010fba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010fba:	b480      	push	{r7}
 8010fbc:	b083      	sub	sp, #12
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
 8010fc2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010fce:	2300      	movs	r3, #0
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr

08010fdc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f043 0203 	orr.w	r2, r3, #3
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010ff0:	2300      	movs	r3, #0
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	370c      	adds	r7, #12
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr

08010ffe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010ffe:	b480      	push	{r7}
 8011000:	b083      	sub	sp, #12
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f003 0303 	and.w	r3, r3, #3
}
 801100e:	4618      	mov	r0, r3
 8011010:	370c      	adds	r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr
	...

0801101c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801101c:	b480      	push	{r7}
 801101e:	b085      	sub	sp, #20
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011026:	2300      	movs	r3, #0
 8011028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	681a      	ldr	r2, [r3, #0]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801103a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011040:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011046:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011048:	68fa      	ldr	r2, [r7, #12]
 801104a:	4313      	orrs	r3, r2
 801104c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	68da      	ldr	r2, [r3, #12]
 8011052:	4b06      	ldr	r3, [pc, #24]	; (801106c <SDMMC_SendCommand+0x50>)
 8011054:	4013      	ands	r3, r2
 8011056:	68fa      	ldr	r2, [r7, #12]
 8011058:	431a      	orrs	r2, r3
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801105e:	2300      	movs	r3, #0
}
 8011060:	4618      	mov	r0, r3
 8011062:	3714      	adds	r7, #20
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr
 801106c:	fffee0c0 	.word	0xfffee0c0

08011070 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	691b      	ldr	r3, [r3, #16]
 801107c:	b2db      	uxtb	r3, r3
}
 801107e:	4618      	mov	r0, r3
 8011080:	370c      	adds	r7, #12
 8011082:	46bd      	mov	sp, r7
 8011084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011088:	4770      	bx	lr

0801108a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801108a:	b480      	push	{r7}
 801108c:	b085      	sub	sp, #20
 801108e:	af00      	add	r7, sp, #0
 8011090:	6078      	str	r0, [r7, #4]
 8011092:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	3314      	adds	r3, #20
 8011098:	461a      	mov	r2, r3
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	4413      	add	r3, r2
 801109e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681b      	ldr	r3, [r3, #0]
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3714      	adds	r7, #20
 80110a8:	46bd      	mov	sp, r7
 80110aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ae:	4770      	bx	lr

080110b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80110b0:	b480      	push	{r7}
 80110b2:	b085      	sub	sp, #20
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80110ba:	2300      	movs	r3, #0
 80110bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	685a      	ldr	r2, [r3, #4]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80110d6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80110dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80110e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80110e4:	68fa      	ldr	r2, [r7, #12]
 80110e6:	4313      	orrs	r3, r2
 80110e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	431a      	orrs	r2, r3
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80110fa:	2300      	movs	r3, #0

}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3714      	adds	r7, #20
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr

08011108 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b088      	sub	sp, #32
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011116:	2310      	movs	r3, #16
 8011118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801111a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801111e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011120:	2300      	movs	r3, #0
 8011122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011128:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801112a:	f107 0308 	add.w	r3, r7, #8
 801112e:	4619      	mov	r1, r3
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f7ff ff73 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011136:	f241 3288 	movw	r2, #5000	; 0x1388
 801113a:	2110      	movs	r1, #16
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f000 faaf 	bl	80116a0 <SDMMC_GetCmdResp1>
 8011142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011144:	69fb      	ldr	r3, [r7, #28]
}
 8011146:	4618      	mov	r0, r3
 8011148:	3720      	adds	r7, #32
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801114e:	b580      	push	{r7, lr}
 8011150:	b088      	sub	sp, #32
 8011152:	af00      	add	r7, sp, #0
 8011154:	6078      	str	r0, [r7, #4]
 8011156:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801115c:	2311      	movs	r3, #17
 801115e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011166:	2300      	movs	r3, #0
 8011168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801116e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011170:	f107 0308 	add.w	r3, r7, #8
 8011174:	4619      	mov	r1, r3
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f7ff ff50 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801117c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011180:	2111      	movs	r1, #17
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f000 fa8c 	bl	80116a0 <SDMMC_GetCmdResp1>
 8011188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801118a:	69fb      	ldr	r3, [r7, #28]
}
 801118c:	4618      	mov	r0, r3
 801118e:	3720      	adds	r7, #32
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b088      	sub	sp, #32
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80111a2:	2312      	movs	r3, #18
 80111a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111ac:	2300      	movs	r3, #0
 80111ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111b6:	f107 0308 	add.w	r3, r7, #8
 80111ba:	4619      	mov	r1, r3
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f7ff ff2d 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80111c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80111c6:	2112      	movs	r1, #18
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f000 fa69 	bl	80116a0 <SDMMC_GetCmdResp1>
 80111ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111d0:	69fb      	ldr	r3, [r7, #28]
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3720      	adds	r7, #32
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}

080111da <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b088      	sub	sp, #32
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
 80111e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80111e8:	2318      	movs	r3, #24
 80111ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111f2:	2300      	movs	r3, #0
 80111f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111fc:	f107 0308 	add.w	r3, r7, #8
 8011200:	4619      	mov	r1, r3
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7ff ff0a 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011208:	f241 3288 	movw	r2, #5000	; 0x1388
 801120c:	2118      	movs	r1, #24
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f000 fa46 	bl	80116a0 <SDMMC_GetCmdResp1>
 8011214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011216:	69fb      	ldr	r3, [r7, #28]
}
 8011218:	4618      	mov	r0, r3
 801121a:	3720      	adds	r7, #32
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b088      	sub	sp, #32
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801122e:	2319      	movs	r3, #25
 8011230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011238:	2300      	movs	r3, #0
 801123a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801123c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011240:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011242:	f107 0308 	add.w	r3, r7, #8
 8011246:	4619      	mov	r1, r3
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7ff fee7 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801124e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011252:	2119      	movs	r1, #25
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f000 fa23 	bl	80116a0 <SDMMC_GetCmdResp1>
 801125a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801125c:	69fb      	ldr	r3, [r7, #28]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3720      	adds	r7, #32
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
	...

08011268 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b088      	sub	sp, #32
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011270:	2300      	movs	r3, #0
 8011272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011274:	230c      	movs	r3, #12
 8011276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011278:	f44f 7380 	mov.w	r3, #256	; 0x100
 801127c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801127e:	2300      	movs	r3, #0
 8011280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011286:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	68db      	ldr	r3, [r3, #12]
 8011298:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112a0:	f107 0308 	add.w	r3, r7, #8
 80112a4:	4619      	mov	r1, r3
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f7ff feb8 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80112ac:	4a0b      	ldr	r2, [pc, #44]	; (80112dc <SDMMC_CmdStopTransfer+0x74>)
 80112ae:	210c      	movs	r1, #12
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f000 f9f5 	bl	80116a0 <SDMMC_GetCmdResp1>
 80112b6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80112c4:	69fb      	ldr	r3, [r7, #28]
 80112c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80112ca:	d101      	bne.n	80112d0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80112cc:	2300      	movs	r3, #0
 80112ce:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80112d0:	69fb      	ldr	r3, [r7, #28]
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3720      	adds	r7, #32
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	05f5e100 	.word	0x05f5e100

080112e0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b08a      	sub	sp, #40	; 0x28
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	60f8      	str	r0, [r7, #12]
 80112e8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80112f0:	2307      	movs	r3, #7
 80112f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112f8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112fa:	2300      	movs	r3, #0
 80112fc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011302:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011304:	f107 0310 	add.w	r3, r7, #16
 8011308:	4619      	mov	r1, r3
 801130a:	68f8      	ldr	r0, [r7, #12]
 801130c:	f7ff fe86 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011310:	f241 3288 	movw	r2, #5000	; 0x1388
 8011314:	2107      	movs	r1, #7
 8011316:	68f8      	ldr	r0, [r7, #12]
 8011318:	f000 f9c2 	bl	80116a0 <SDMMC_GetCmdResp1>
 801131c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011320:	4618      	mov	r0, r3
 8011322:	3728      	adds	r7, #40	; 0x28
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}

08011328 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b088      	sub	sp, #32
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011330:	2300      	movs	r3, #0
 8011332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011334:	2300      	movs	r3, #0
 8011336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011338:	2300      	movs	r3, #0
 801133a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801133c:	2300      	movs	r3, #0
 801133e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011344:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011346:	f107 0308 	add.w	r3, r7, #8
 801134a:	4619      	mov	r1, r3
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7ff fe65 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f000 f976 	bl	8011644 <SDMMC_GetCmdError>
 8011358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801135a:	69fb      	ldr	r3, [r7, #28]
}
 801135c:	4618      	mov	r0, r3
 801135e:	3720      	adds	r7, #32
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b088      	sub	sp, #32
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801136c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011370:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011372:	2308      	movs	r3, #8
 8011374:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011376:	f44f 7380 	mov.w	r3, #256	; 0x100
 801137a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801137c:	2300      	movs	r3, #0
 801137e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011384:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011386:	f107 0308 	add.w	r3, r7, #8
 801138a:	4619      	mov	r1, r3
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7ff fe45 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f000 fb78 	bl	8011a88 <SDMMC_GetCmdResp7>
 8011398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801139a:	69fb      	ldr	r3, [r7, #28]
}
 801139c:	4618      	mov	r0, r3
 801139e:	3720      	adds	r7, #32
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}

080113a4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b088      	sub	sp, #32
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
 80113ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80113b2:	2337      	movs	r3, #55	; 0x37
 80113b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113bc:	2300      	movs	r3, #0
 80113be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113c6:	f107 0308 	add.w	r3, r7, #8
 80113ca:	4619      	mov	r1, r3
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f7ff fe25 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80113d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80113d6:	2137      	movs	r1, #55	; 0x37
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f000 f961 	bl	80116a0 <SDMMC_GetCmdResp1>
 80113de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113e0:	69fb      	ldr	r3, [r7, #28]
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	3720      	adds	r7, #32
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}

080113ea <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80113ea:	b580      	push	{r7, lr}
 80113ec:	b088      	sub	sp, #32
 80113ee:	af00      	add	r7, sp, #0
 80113f0:	6078      	str	r0, [r7, #4]
 80113f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80113f8:	2329      	movs	r3, #41	; 0x29
 80113fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011402:	2300      	movs	r3, #0
 8011404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801140a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801140c:	f107 0308 	add.w	r3, r7, #8
 8011410:	4619      	mov	r1, r3
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f7ff fe02 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 fa7d 	bl	8011918 <SDMMC_GetCmdResp3>
 801141e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011420:	69fb      	ldr	r3, [r7, #28]
}
 8011422:	4618      	mov	r0, r3
 8011424:	3720      	adds	r7, #32
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b088      	sub	sp, #32
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
 8011432:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011438:	2306      	movs	r3, #6
 801143a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801143c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011442:	2300      	movs	r3, #0
 8011444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801144a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801144c:	f107 0308 	add.w	r3, r7, #8
 8011450:	4619      	mov	r1, r3
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f7ff fde2 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011458:	f241 3288 	movw	r2, #5000	; 0x1388
 801145c:	2106      	movs	r1, #6
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f000 f91e 	bl	80116a0 <SDMMC_GetCmdResp1>
 8011464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011466:	69fb      	ldr	r3, [r7, #28]
}
 8011468:	4618      	mov	r0, r3
 801146a:	3720      	adds	r7, #32
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b088      	sub	sp, #32
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011478:	2300      	movs	r3, #0
 801147a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801147c:	2333      	movs	r3, #51	; 0x33
 801147e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011486:	2300      	movs	r3, #0
 8011488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801148a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801148e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011490:	f107 0308 	add.w	r3, r7, #8
 8011494:	4619      	mov	r1, r3
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f7ff fdc0 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80114a0:	2133      	movs	r1, #51	; 0x33
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f000 f8fc 	bl	80116a0 <SDMMC_GetCmdResp1>
 80114a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114aa:	69fb      	ldr	r3, [r7, #28]
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3720      	adds	r7, #32
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b088      	sub	sp, #32
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80114bc:	2300      	movs	r3, #0
 80114be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80114c0:	2302      	movs	r3, #2
 80114c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80114c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80114c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114ca:	2300      	movs	r3, #0
 80114cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114d4:	f107 0308 	add.w	r3, r7, #8
 80114d8:	4619      	mov	r1, r3
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f7ff fd9e 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f000 f9cf 	bl	8011884 <SDMMC_GetCmdResp2>
 80114e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114e8:	69fb      	ldr	r3, [r7, #28]
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3720      	adds	r7, #32
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}

080114f2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80114f2:	b580      	push	{r7, lr}
 80114f4:	b088      	sub	sp, #32
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
 80114fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011500:	2309      	movs	r3, #9
 8011502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011504:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801150a:	2300      	movs	r3, #0
 801150c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011514:	f107 0308 	add.w	r3, r7, #8
 8011518:	4619      	mov	r1, r3
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f7ff fd7e 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f000 f9af 	bl	8011884 <SDMMC_GetCmdResp2>
 8011526:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011528:	69fb      	ldr	r3, [r7, #28]
}
 801152a:	4618      	mov	r0, r3
 801152c:	3720      	adds	r7, #32
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}

08011532 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011532:	b580      	push	{r7, lr}
 8011534:	b088      	sub	sp, #32
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
 801153a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801153c:	2300      	movs	r3, #0
 801153e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011540:	2303      	movs	r3, #3
 8011542:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801154a:	2300      	movs	r3, #0
 801154c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011552:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011554:	f107 0308 	add.w	r3, r7, #8
 8011558:	4619      	mov	r1, r3
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f7ff fd5e 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011560:	683a      	ldr	r2, [r7, #0]
 8011562:	2103      	movs	r1, #3
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f000 fa17 	bl	8011998 <SDMMC_GetCmdResp6>
 801156a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801156c:	69fb      	ldr	r3, [r7, #28]
}
 801156e:	4618      	mov	r0, r3
 8011570:	3720      	adds	r7, #32
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}

08011576 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011576:	b580      	push	{r7, lr}
 8011578:	b088      	sub	sp, #32
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
 801157e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011584:	230d      	movs	r3, #13
 8011586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011588:	f44f 7380 	mov.w	r3, #256	; 0x100
 801158c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801158e:	2300      	movs	r3, #0
 8011590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011596:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011598:	f107 0308 	add.w	r3, r7, #8
 801159c:	4619      	mov	r1, r3
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f7ff fd3c 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80115a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80115a8:	210d      	movs	r1, #13
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f000 f878 	bl	80116a0 <SDMMC_GetCmdResp1>
 80115b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115b2:	69fb      	ldr	r3, [r7, #28]
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3720      	adds	r7, #32
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b088      	sub	sp, #32
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80115c4:	2300      	movs	r3, #0
 80115c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80115c8:	230d      	movs	r3, #13
 80115ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115d2:	2300      	movs	r3, #0
 80115d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115dc:	f107 0308 	add.w	r3, r7, #8
 80115e0:	4619      	mov	r1, r3
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f7ff fd1a 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80115e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80115ec:	210d      	movs	r1, #13
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f000 f856 	bl	80116a0 <SDMMC_GetCmdResp1>
 80115f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115f6:	69fb      	ldr	r3, [r7, #28]
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3720      	adds	r7, #32
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}

08011600 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b088      	sub	sp, #32
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8011608:	2300      	movs	r3, #0
 801160a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 801160c:	230b      	movs	r3, #11
 801160e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011616:	2300      	movs	r3, #0
 8011618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801161e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011620:	f107 0308 	add.w	r3, r7, #8
 8011624:	4619      	mov	r1, r3
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f7ff fcf8 	bl	801101c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 801162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011630:	210b      	movs	r1, #11
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f000 f834 	bl	80116a0 <SDMMC_GetCmdResp1>
 8011638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801163a:	69fb      	ldr	r3, [r7, #28]
}
 801163c:	4618      	mov	r0, r3
 801163e:	3720      	adds	r7, #32
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011644:	b480      	push	{r7}
 8011646:	b085      	sub	sp, #20
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801164c:	4b11      	ldr	r3, [pc, #68]	; (8011694 <SDMMC_GetCmdError+0x50>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	4a11      	ldr	r2, [pc, #68]	; (8011698 <SDMMC_GetCmdError+0x54>)
 8011652:	fba2 2303 	umull	r2, r3, r2, r3
 8011656:	0a5b      	lsrs	r3, r3, #9
 8011658:	f241 3288 	movw	r2, #5000	; 0x1388
 801165c:	fb02 f303 	mul.w	r3, r2, r3
 8011660:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	1e5a      	subs	r2, r3, #1
 8011666:	60fa      	str	r2, [r7, #12]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d102      	bne.n	8011672 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801166c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011670:	e009      	b.n	8011686 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801167a:	2b00      	cmp	r3, #0
 801167c:	d0f1      	beq.n	8011662 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4a06      	ldr	r2, [pc, #24]	; (801169c <SDMMC_GetCmdError+0x58>)
 8011682:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	3714      	adds	r7, #20
 801168a:	46bd      	mov	sp, r7
 801168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011690:	4770      	bx	lr
 8011692:	bf00      	nop
 8011694:	24000010 	.word	0x24000010
 8011698:	10624dd3 	.word	0x10624dd3
 801169c:	002000c5 	.word	0x002000c5

080116a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b088      	sub	sp, #32
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	60f8      	str	r0, [r7, #12]
 80116a8:	460b      	mov	r3, r1
 80116aa:	607a      	str	r2, [r7, #4]
 80116ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80116ae:	4b70      	ldr	r3, [pc, #448]	; (8011870 <SDMMC_GetCmdResp1+0x1d0>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	4a70      	ldr	r2, [pc, #448]	; (8011874 <SDMMC_GetCmdResp1+0x1d4>)
 80116b4:	fba2 2303 	umull	r2, r3, r2, r3
 80116b8:	0a5a      	lsrs	r2, r3, #9
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	fb02 f303 	mul.w	r3, r2, r3
 80116c0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	1e5a      	subs	r2, r3, #1
 80116c6:	61fa      	str	r2, [r7, #28]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d102      	bne.n	80116d2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80116cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80116d0:	e0c9      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116d6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80116d8:	69ba      	ldr	r2, [r7, #24]
 80116da:	4b67      	ldr	r3, [pc, #412]	; (8011878 <SDMMC_GetCmdResp1+0x1d8>)
 80116dc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d0ef      	beq.n	80116c2 <SDMMC_GetCmdResp1+0x22>
 80116e2:	69bb      	ldr	r3, [r7, #24]
 80116e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d1ea      	bne.n	80116c2 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116f0:	f003 0304 	and.w	r3, r3, #4
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d004      	beq.n	8011702 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2204      	movs	r2, #4
 80116fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80116fe:	2304      	movs	r3, #4
 8011700:	e0b1      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011706:	f003 0301 	and.w	r3, r3, #1
 801170a:	2b00      	cmp	r3, #0
 801170c:	d004      	beq.n	8011718 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	2201      	movs	r2, #1
 8011712:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011714:	2301      	movs	r3, #1
 8011716:	e0a6      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	4a58      	ldr	r2, [pc, #352]	; (801187c <SDMMC_GetCmdResp1+0x1dc>)
 801171c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801171e:	68f8      	ldr	r0, [r7, #12]
 8011720:	f7ff fca6 	bl	8011070 <SDMMC_GetCommandResponse>
 8011724:	4603      	mov	r3, r0
 8011726:	461a      	mov	r2, r3
 8011728:	7afb      	ldrb	r3, [r7, #11]
 801172a:	4293      	cmp	r3, r2
 801172c:	d001      	beq.n	8011732 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801172e:	2301      	movs	r3, #1
 8011730:	e099      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011732:	2100      	movs	r1, #0
 8011734:	68f8      	ldr	r0, [r7, #12]
 8011736:	f7ff fca8 	bl	801108a <SDMMC_GetResponse>
 801173a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801173c:	697a      	ldr	r2, [r7, #20]
 801173e:	4b50      	ldr	r3, [pc, #320]	; (8011880 <SDMMC_GetCmdResp1+0x1e0>)
 8011740:	4013      	ands	r3, r2
 8011742:	2b00      	cmp	r3, #0
 8011744:	d101      	bne.n	801174a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011746:	2300      	movs	r3, #0
 8011748:	e08d      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	2b00      	cmp	r3, #0
 801174e:	da02      	bge.n	8011756 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011754:	e087      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801175c:	2b00      	cmp	r3, #0
 801175e:	d001      	beq.n	8011764 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011760:	2340      	movs	r3, #64	; 0x40
 8011762:	e080      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801176a:	2b00      	cmp	r3, #0
 801176c:	d001      	beq.n	8011772 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801176e:	2380      	movs	r3, #128	; 0x80
 8011770:	e079      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011778:	2b00      	cmp	r3, #0
 801177a:	d002      	beq.n	8011782 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801177c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011780:	e071      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011788:	2b00      	cmp	r3, #0
 801178a:	d002      	beq.n	8011792 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801178c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011790:	e069      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011798:	2b00      	cmp	r3, #0
 801179a:	d002      	beq.n	80117a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801179c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117a0:	e061      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d002      	beq.n	80117b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80117ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80117b0:	e059      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d002      	beq.n	80117c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80117bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80117c0:	e051      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d002      	beq.n	80117d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80117cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80117d0:	e049      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d002      	beq.n	80117e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80117dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80117e0:	e041      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d002      	beq.n	80117f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80117ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117f0:	e039      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d002      	beq.n	8011802 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80117fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011800:	e031      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011808:	2b00      	cmp	r3, #0
 801180a:	d002      	beq.n	8011812 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801180c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011810:	e029      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011818:	2b00      	cmp	r3, #0
 801181a:	d002      	beq.n	8011822 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801181c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011820:	e021      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011828:	2b00      	cmp	r3, #0
 801182a:	d002      	beq.n	8011832 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801182c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011830:	e019      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011838:	2b00      	cmp	r3, #0
 801183a:	d002      	beq.n	8011842 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801183c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011840:	e011      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011848:	2b00      	cmp	r3, #0
 801184a:	d002      	beq.n	8011852 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801184c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011850:	e009      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	f003 0308 	and.w	r3, r3, #8
 8011858:	2b00      	cmp	r3, #0
 801185a:	d002      	beq.n	8011862 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801185c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011860:	e001      	b.n	8011866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011866:	4618      	mov	r0, r3
 8011868:	3720      	adds	r7, #32
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}
 801186e:	bf00      	nop
 8011870:	24000010 	.word	0x24000010
 8011874:	10624dd3 	.word	0x10624dd3
 8011878:	00200045 	.word	0x00200045
 801187c:	002000c5 	.word	0x002000c5
 8011880:	fdffe008 	.word	0xfdffe008

08011884 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011884:	b480      	push	{r7}
 8011886:	b085      	sub	sp, #20
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801188c:	4b1f      	ldr	r3, [pc, #124]	; (801190c <SDMMC_GetCmdResp2+0x88>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	4a1f      	ldr	r2, [pc, #124]	; (8011910 <SDMMC_GetCmdResp2+0x8c>)
 8011892:	fba2 2303 	umull	r2, r3, r2, r3
 8011896:	0a5b      	lsrs	r3, r3, #9
 8011898:	f241 3288 	movw	r2, #5000	; 0x1388
 801189c:	fb02 f303 	mul.w	r3, r2, r3
 80118a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	1e5a      	subs	r2, r3, #1
 80118a6:	60fa      	str	r2, [r7, #12]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d102      	bne.n	80118b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80118b0:	e026      	b.n	8011900 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d0ef      	beq.n	80118a2 <SDMMC_GetCmdResp2+0x1e>
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d1ea      	bne.n	80118a2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118d0:	f003 0304 	and.w	r3, r3, #4
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d004      	beq.n	80118e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2204      	movs	r2, #4
 80118dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80118de:	2304      	movs	r3, #4
 80118e0:	e00e      	b.n	8011900 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118e6:	f003 0301 	and.w	r3, r3, #1
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d004      	beq.n	80118f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2201      	movs	r2, #1
 80118f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80118f4:	2301      	movs	r3, #1
 80118f6:	e003      	b.n	8011900 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4a06      	ldr	r2, [pc, #24]	; (8011914 <SDMMC_GetCmdResp2+0x90>)
 80118fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80118fe:	2300      	movs	r3, #0
}
 8011900:	4618      	mov	r0, r3
 8011902:	3714      	adds	r7, #20
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr
 801190c:	24000010 	.word	0x24000010
 8011910:	10624dd3 	.word	0x10624dd3
 8011914:	002000c5 	.word	0x002000c5

08011918 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011918:	b480      	push	{r7}
 801191a:	b085      	sub	sp, #20
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011920:	4b1a      	ldr	r3, [pc, #104]	; (801198c <SDMMC_GetCmdResp3+0x74>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	4a1a      	ldr	r2, [pc, #104]	; (8011990 <SDMMC_GetCmdResp3+0x78>)
 8011926:	fba2 2303 	umull	r2, r3, r2, r3
 801192a:	0a5b      	lsrs	r3, r3, #9
 801192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011930:	fb02 f303 	mul.w	r3, r2, r3
 8011934:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	1e5a      	subs	r2, r3, #1
 801193a:	60fa      	str	r2, [r7, #12]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d102      	bne.n	8011946 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011944:	e01b      	b.n	801197e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801194a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011952:	2b00      	cmp	r3, #0
 8011954:	d0ef      	beq.n	8011936 <SDMMC_GetCmdResp3+0x1e>
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801195c:	2b00      	cmp	r3, #0
 801195e:	d1ea      	bne.n	8011936 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011964:	f003 0304 	and.w	r3, r3, #4
 8011968:	2b00      	cmp	r3, #0
 801196a:	d004      	beq.n	8011976 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2204      	movs	r2, #4
 8011970:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011972:	2304      	movs	r3, #4
 8011974:	e003      	b.n	801197e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	4a06      	ldr	r2, [pc, #24]	; (8011994 <SDMMC_GetCmdResp3+0x7c>)
 801197a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801197c:	2300      	movs	r3, #0
}
 801197e:	4618      	mov	r0, r3
 8011980:	3714      	adds	r7, #20
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr
 801198a:	bf00      	nop
 801198c:	24000010 	.word	0x24000010
 8011990:	10624dd3 	.word	0x10624dd3
 8011994:	002000c5 	.word	0x002000c5

08011998 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b088      	sub	sp, #32
 801199c:	af00      	add	r7, sp, #0
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	460b      	mov	r3, r1
 80119a2:	607a      	str	r2, [r7, #4]
 80119a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80119a6:	4b35      	ldr	r3, [pc, #212]	; (8011a7c <SDMMC_GetCmdResp6+0xe4>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a35      	ldr	r2, [pc, #212]	; (8011a80 <SDMMC_GetCmdResp6+0xe8>)
 80119ac:	fba2 2303 	umull	r2, r3, r2, r3
 80119b0:	0a5b      	lsrs	r3, r3, #9
 80119b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80119b6:	fb02 f303 	mul.w	r3, r2, r3
 80119ba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80119bc:	69fb      	ldr	r3, [r7, #28]
 80119be:	1e5a      	subs	r2, r3, #1
 80119c0:	61fa      	str	r2, [r7, #28]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d102      	bne.n	80119cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80119c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80119ca:	e052      	b.n	8011a72 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119d2:	69bb      	ldr	r3, [r7, #24]
 80119d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d0ef      	beq.n	80119bc <SDMMC_GetCmdResp6+0x24>
 80119dc:	69bb      	ldr	r3, [r7, #24]
 80119de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d1ea      	bne.n	80119bc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119ea:	f003 0304 	and.w	r3, r3, #4
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d004      	beq.n	80119fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2204      	movs	r2, #4
 80119f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80119f8:	2304      	movs	r3, #4
 80119fa:	e03a      	b.n	8011a72 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a00:	f003 0301 	and.w	r3, r3, #1
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d004      	beq.n	8011a12 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	e02f      	b.n	8011a72 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011a12:	68f8      	ldr	r0, [r7, #12]
 8011a14:	f7ff fb2c 	bl	8011070 <SDMMC_GetCommandResponse>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	7afb      	ldrb	r3, [r7, #11]
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	d001      	beq.n	8011a26 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a22:	2301      	movs	r3, #1
 8011a24:	e025      	b.n	8011a72 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	4a16      	ldr	r2, [pc, #88]	; (8011a84 <SDMMC_GetCmdResp6+0xec>)
 8011a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011a2c:	2100      	movs	r1, #0
 8011a2e:	68f8      	ldr	r0, [r7, #12]
 8011a30:	f7ff fb2b 	bl	801108a <SDMMC_GetResponse>
 8011a34:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d106      	bne.n	8011a4e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	0c1b      	lsrs	r3, r3, #16
 8011a44:	b29a      	uxth	r2, r3
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	e011      	b.n	8011a72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d002      	beq.n	8011a5e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011a5c:	e009      	b.n	8011a72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d002      	beq.n	8011a6e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a6c:	e001      	b.n	8011a72 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3720      	adds	r7, #32
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	24000010 	.word	0x24000010
 8011a80:	10624dd3 	.word	0x10624dd3
 8011a84:	002000c5 	.word	0x002000c5

08011a88 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b085      	sub	sp, #20
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a90:	4b22      	ldr	r3, [pc, #136]	; (8011b1c <SDMMC_GetCmdResp7+0x94>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	4a22      	ldr	r2, [pc, #136]	; (8011b20 <SDMMC_GetCmdResp7+0x98>)
 8011a96:	fba2 2303 	umull	r2, r3, r2, r3
 8011a9a:	0a5b      	lsrs	r3, r3, #9
 8011a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011aa0:	fb02 f303 	mul.w	r3, r2, r3
 8011aa4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	1e5a      	subs	r2, r3, #1
 8011aaa:	60fa      	str	r2, [r7, #12]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d102      	bne.n	8011ab6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011ab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ab4:	e02c      	b.n	8011b10 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d0ef      	beq.n	8011aa6 <SDMMC_GetCmdResp7+0x1e>
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d1ea      	bne.n	8011aa6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ad4:	f003 0304 	and.w	r3, r3, #4
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d004      	beq.n	8011ae6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2204      	movs	r2, #4
 8011ae0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011ae2:	2304      	movs	r3, #4
 8011ae4:	e014      	b.n	8011b10 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aea:	f003 0301 	and.w	r3, r3, #1
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d004      	beq.n	8011afc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2201      	movs	r2, #1
 8011af6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011af8:	2301      	movs	r3, #1
 8011afa:	e009      	b.n	8011b10 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d002      	beq.n	8011b0e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2240      	movs	r2, #64	; 0x40
 8011b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011b0e:	2300      	movs	r3, #0

}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3714      	adds	r7, #20
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr
 8011b1c:	24000010 	.word	0x24000010
 8011b20:	10624dd3 	.word	0x10624dd3

08011b24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011b24:	b084      	sub	sp, #16
 8011b26:	b580      	push	{r7, lr}
 8011b28:	b084      	sub	sp, #16
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
 8011b2e:	f107 001c 	add.w	r0, r7, #28
 8011b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b38:	2b01      	cmp	r3, #1
 8011b3a:	d120      	bne.n	8011b7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	68da      	ldr	r2, [r3, #12]
 8011b4c:	4b25      	ldr	r3, [pc, #148]	; (8011be4 <USB_CoreInit+0xc0>)
 8011b4e:	4013      	ands	r3, r2
 8011b50:	687a      	ldr	r2, [r7, #4]
 8011b52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b62:	2b01      	cmp	r3, #1
 8011b64:	d105      	bne.n	8011b72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	68db      	ldr	r3, [r3, #12]
 8011b6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f001 fabe 	bl	80130f4 <USB_CoreReset>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	73fb      	strb	r3, [r7, #15]
 8011b7c:	e01a      	b.n	8011bb4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f001 fab2 	bl	80130f4 <USB_CoreReset>
 8011b90:	4603      	mov	r3, r0
 8011b92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d106      	bne.n	8011ba8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8011ba6:	e005      	b.n	8011bb4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb6:	2b01      	cmp	r3, #1
 8011bb8:	d10b      	bne.n	8011bd2 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	689b      	ldr	r3, [r3, #8]
 8011bbe:	f043 0206 	orr.w	r2, r3, #6
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	f043 0220 	orr.w	r2, r3, #32
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3710      	adds	r7, #16
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011bde:	b004      	add	sp, #16
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop
 8011be4:	ffbdffbf 	.word	0xffbdffbf

08011be8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b087      	sub	sp, #28
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	60f8      	str	r0, [r7, #12]
 8011bf0:	60b9      	str	r1, [r7, #8]
 8011bf2:	4613      	mov	r3, r2
 8011bf4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011bf6:	79fb      	ldrb	r3, [r7, #7]
 8011bf8:	2b02      	cmp	r3, #2
 8011bfa:	d165      	bne.n	8011cc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	4a41      	ldr	r2, [pc, #260]	; (8011d04 <USB_SetTurnaroundTime+0x11c>)
 8011c00:	4293      	cmp	r3, r2
 8011c02:	d906      	bls.n	8011c12 <USB_SetTurnaroundTime+0x2a>
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	4a40      	ldr	r2, [pc, #256]	; (8011d08 <USB_SetTurnaroundTime+0x120>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d802      	bhi.n	8011c12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011c0c:	230f      	movs	r3, #15
 8011c0e:	617b      	str	r3, [r7, #20]
 8011c10:	e062      	b.n	8011cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	4a3c      	ldr	r2, [pc, #240]	; (8011d08 <USB_SetTurnaroundTime+0x120>)
 8011c16:	4293      	cmp	r3, r2
 8011c18:	d906      	bls.n	8011c28 <USB_SetTurnaroundTime+0x40>
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	4a3b      	ldr	r2, [pc, #236]	; (8011d0c <USB_SetTurnaroundTime+0x124>)
 8011c1e:	4293      	cmp	r3, r2
 8011c20:	d802      	bhi.n	8011c28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011c22:	230e      	movs	r3, #14
 8011c24:	617b      	str	r3, [r7, #20]
 8011c26:	e057      	b.n	8011cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	4a38      	ldr	r2, [pc, #224]	; (8011d0c <USB_SetTurnaroundTime+0x124>)
 8011c2c:	4293      	cmp	r3, r2
 8011c2e:	d906      	bls.n	8011c3e <USB_SetTurnaroundTime+0x56>
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	4a37      	ldr	r2, [pc, #220]	; (8011d10 <USB_SetTurnaroundTime+0x128>)
 8011c34:	4293      	cmp	r3, r2
 8011c36:	d802      	bhi.n	8011c3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011c38:	230d      	movs	r3, #13
 8011c3a:	617b      	str	r3, [r7, #20]
 8011c3c:	e04c      	b.n	8011cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	4a33      	ldr	r2, [pc, #204]	; (8011d10 <USB_SetTurnaroundTime+0x128>)
 8011c42:	4293      	cmp	r3, r2
 8011c44:	d906      	bls.n	8011c54 <USB_SetTurnaroundTime+0x6c>
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	4a32      	ldr	r2, [pc, #200]	; (8011d14 <USB_SetTurnaroundTime+0x12c>)
 8011c4a:	4293      	cmp	r3, r2
 8011c4c:	d802      	bhi.n	8011c54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011c4e:	230c      	movs	r3, #12
 8011c50:	617b      	str	r3, [r7, #20]
 8011c52:	e041      	b.n	8011cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	4a2f      	ldr	r2, [pc, #188]	; (8011d14 <USB_SetTurnaroundTime+0x12c>)
 8011c58:	4293      	cmp	r3, r2
 8011c5a:	d906      	bls.n	8011c6a <USB_SetTurnaroundTime+0x82>
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	4a2e      	ldr	r2, [pc, #184]	; (8011d18 <USB_SetTurnaroundTime+0x130>)
 8011c60:	4293      	cmp	r3, r2
 8011c62:	d802      	bhi.n	8011c6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011c64:	230b      	movs	r3, #11
 8011c66:	617b      	str	r3, [r7, #20]
 8011c68:	e036      	b.n	8011cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	4a2a      	ldr	r2, [pc, #168]	; (8011d18 <USB_SetTurnaroundTime+0x130>)
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d906      	bls.n	8011c80 <USB_SetTurnaroundTime+0x98>
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	4a29      	ldr	r2, [pc, #164]	; (8011d1c <USB_SetTurnaroundTime+0x134>)
 8011c76:	4293      	cmp	r3, r2
 8011c78:	d802      	bhi.n	8011c80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011c7a:	230a      	movs	r3, #10
 8011c7c:	617b      	str	r3, [r7, #20]
 8011c7e:	e02b      	b.n	8011cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011c80:	68bb      	ldr	r3, [r7, #8]
 8011c82:	4a26      	ldr	r2, [pc, #152]	; (8011d1c <USB_SetTurnaroundTime+0x134>)
 8011c84:	4293      	cmp	r3, r2
 8011c86:	d906      	bls.n	8011c96 <USB_SetTurnaroundTime+0xae>
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	4a25      	ldr	r2, [pc, #148]	; (8011d20 <USB_SetTurnaroundTime+0x138>)
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d802      	bhi.n	8011c96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011c90:	2309      	movs	r3, #9
 8011c92:	617b      	str	r3, [r7, #20]
 8011c94:	e020      	b.n	8011cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	4a21      	ldr	r2, [pc, #132]	; (8011d20 <USB_SetTurnaroundTime+0x138>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d906      	bls.n	8011cac <USB_SetTurnaroundTime+0xc4>
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	4a20      	ldr	r2, [pc, #128]	; (8011d24 <USB_SetTurnaroundTime+0x13c>)
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d802      	bhi.n	8011cac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011ca6:	2308      	movs	r3, #8
 8011ca8:	617b      	str	r3, [r7, #20]
 8011caa:	e015      	b.n	8011cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	4a1d      	ldr	r2, [pc, #116]	; (8011d24 <USB_SetTurnaroundTime+0x13c>)
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	d906      	bls.n	8011cc2 <USB_SetTurnaroundTime+0xda>
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	4a1c      	ldr	r2, [pc, #112]	; (8011d28 <USB_SetTurnaroundTime+0x140>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d802      	bhi.n	8011cc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011cbc:	2307      	movs	r3, #7
 8011cbe:	617b      	str	r3, [r7, #20]
 8011cc0:	e00a      	b.n	8011cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011cc2:	2306      	movs	r3, #6
 8011cc4:	617b      	str	r3, [r7, #20]
 8011cc6:	e007      	b.n	8011cd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011cc8:	79fb      	ldrb	r3, [r7, #7]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d102      	bne.n	8011cd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011cce:	2309      	movs	r3, #9
 8011cd0:	617b      	str	r3, [r7, #20]
 8011cd2:	e001      	b.n	8011cd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011cd4:	2309      	movs	r3, #9
 8011cd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	68da      	ldr	r2, [r3, #12]
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	029b      	lsls	r3, r3, #10
 8011cec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011cf0:	431a      	orrs	r2, r3
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011cf6:	2300      	movs	r3, #0
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	371c      	adds	r7, #28
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr
 8011d04:	00d8acbf 	.word	0x00d8acbf
 8011d08:	00e4e1bf 	.word	0x00e4e1bf
 8011d0c:	00f423ff 	.word	0x00f423ff
 8011d10:	0106737f 	.word	0x0106737f
 8011d14:	011a499f 	.word	0x011a499f
 8011d18:	01312cff 	.word	0x01312cff
 8011d1c:	014ca43f 	.word	0x014ca43f
 8011d20:	016e35ff 	.word	0x016e35ff
 8011d24:	01a6ab1f 	.word	0x01a6ab1f
 8011d28:	01e847ff 	.word	0x01e847ff

08011d2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b083      	sub	sp, #12
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	689b      	ldr	r3, [r3, #8]
 8011d38:	f043 0201 	orr.w	r2, r3, #1
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011d40:	2300      	movs	r3, #0
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	370c      	adds	r7, #12
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr

08011d4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011d4e:	b480      	push	{r7}
 8011d50:	b083      	sub	sp, #12
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	689b      	ldr	r3, [r3, #8]
 8011d5a:	f023 0201 	bic.w	r2, r3, #1
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011d62:	2300      	movs	r3, #0
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	370c      	adds	r7, #12
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr

08011d70 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b082      	sub	sp, #8
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	460b      	mov	r3, r1
 8011d7a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	68db      	ldr	r3, [r3, #12]
 8011d80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011d88:	78fb      	ldrb	r3, [r7, #3]
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d106      	bne.n	8011d9c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	68db      	ldr	r3, [r3, #12]
 8011d92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	60da      	str	r2, [r3, #12]
 8011d9a:	e00b      	b.n	8011db4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011d9c:	78fb      	ldrb	r3, [r7, #3]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d106      	bne.n	8011db0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	60da      	str	r2, [r3, #12]
 8011dae:	e001      	b.n	8011db4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011db0:	2301      	movs	r3, #1
 8011db2:	e003      	b.n	8011dbc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011db4:	2032      	movs	r0, #50	; 0x32
 8011db6:	f7f2 fbc1 	bl	800453c <HAL_Delay>

  return HAL_OK;
 8011dba:	2300      	movs	r3, #0
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3708      	adds	r7, #8
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}

08011dc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011dc4:	b084      	sub	sp, #16
 8011dc6:	b580      	push	{r7, lr}
 8011dc8:	b086      	sub	sp, #24
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	6078      	str	r0, [r7, #4]
 8011dce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011dde:	2300      	movs	r3, #0
 8011de0:	613b      	str	r3, [r7, #16]
 8011de2:	e009      	b.n	8011df8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011de4:	687a      	ldr	r2, [r7, #4]
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	3340      	adds	r3, #64	; 0x40
 8011dea:	009b      	lsls	r3, r3, #2
 8011dec:	4413      	add	r3, r2
 8011dee:	2200      	movs	r2, #0
 8011df0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	3301      	adds	r3, #1
 8011df6:	613b      	str	r3, [r7, #16]
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	2b0e      	cmp	r3, #14
 8011dfc:	d9f2      	bls.n	8011de4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d11c      	bne.n	8011e3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	68fa      	ldr	r2, [r7, #12]
 8011e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e12:	f043 0302 	orr.w	r3, r3, #2
 8011e16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	601a      	str	r2, [r3, #0]
 8011e3c:	e005      	b.n	8011e4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011e50:	461a      	mov	r2, r3
 8011e52:	2300      	movs	r3, #0
 8011e54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e64:	461a      	mov	r2, r3
 8011e66:	680b      	ldr	r3, [r1, #0]
 8011e68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d10c      	bne.n	8011e8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d104      	bne.n	8011e80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011e76:	2100      	movs	r1, #0
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f000 f949 	bl	8012110 <USB_SetDevSpeed>
 8011e7e:	e008      	b.n	8011e92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011e80:	2101      	movs	r1, #1
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f000 f944 	bl	8012110 <USB_SetDevSpeed>
 8011e88:	e003      	b.n	8011e92 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011e8a:	2103      	movs	r1, #3
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	f000 f93f 	bl	8012110 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011e92:	2110      	movs	r1, #16
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f000 f8f3 	bl	8012080 <USB_FlushTxFifo>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d001      	beq.n	8011ea4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f000 f911 	bl	80120cc <USB_FlushRxFifo>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d001      	beq.n	8011eb4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eba:	461a      	mov	r2, r3
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ec6:	461a      	mov	r2, r3
 8011ec8:	2300      	movs	r3, #0
 8011eca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ed2:	461a      	mov	r2, r3
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011ed8:	2300      	movs	r3, #0
 8011eda:	613b      	str	r3, [r7, #16]
 8011edc:	e043      	b.n	8011f66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	015a      	lsls	r2, r3, #5
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	4413      	add	r3, r2
 8011ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011ef4:	d118      	bne.n	8011f28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d10a      	bne.n	8011f12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	015a      	lsls	r2, r3, #5
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	4413      	add	r3, r2
 8011f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f08:	461a      	mov	r2, r3
 8011f0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011f0e:	6013      	str	r3, [r2, #0]
 8011f10:	e013      	b.n	8011f3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	015a      	lsls	r2, r3, #5
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	4413      	add	r3, r2
 8011f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f1e:	461a      	mov	r2, r3
 8011f20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011f24:	6013      	str	r3, [r2, #0]
 8011f26:	e008      	b.n	8011f3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	015a      	lsls	r2, r3, #5
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	4413      	add	r3, r2
 8011f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f34:	461a      	mov	r2, r3
 8011f36:	2300      	movs	r3, #0
 8011f38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	015a      	lsls	r2, r3, #5
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	4413      	add	r3, r2
 8011f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f46:	461a      	mov	r2, r3
 8011f48:	2300      	movs	r3, #0
 8011f4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	015a      	lsls	r2, r3, #5
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	4413      	add	r3, r2
 8011f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f58:	461a      	mov	r2, r3
 8011f5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011f5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	3301      	adds	r3, #1
 8011f64:	613b      	str	r3, [r7, #16]
 8011f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f68:	693a      	ldr	r2, [r7, #16]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d3b7      	bcc.n	8011ede <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f6e:	2300      	movs	r3, #0
 8011f70:	613b      	str	r3, [r7, #16]
 8011f72:	e043      	b.n	8011ffc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	015a      	lsls	r2, r3, #5
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	4413      	add	r3, r2
 8011f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f8a:	d118      	bne.n	8011fbe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d10a      	bne.n	8011fa8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	015a      	lsls	r2, r3, #5
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	4413      	add	r3, r2
 8011f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f9e:	461a      	mov	r2, r3
 8011fa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011fa4:	6013      	str	r3, [r2, #0]
 8011fa6:	e013      	b.n	8011fd0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011fa8:	693b      	ldr	r3, [r7, #16]
 8011faa:	015a      	lsls	r2, r3, #5
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	4413      	add	r3, r2
 8011fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fb4:	461a      	mov	r2, r3
 8011fb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011fba:	6013      	str	r3, [r2, #0]
 8011fbc:	e008      	b.n	8011fd0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011fbe:	693b      	ldr	r3, [r7, #16]
 8011fc0:	015a      	lsls	r2, r3, #5
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fca:	461a      	mov	r2, r3
 8011fcc:	2300      	movs	r3, #0
 8011fce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	015a      	lsls	r2, r3, #5
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	4413      	add	r3, r2
 8011fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fdc:	461a      	mov	r2, r3
 8011fde:	2300      	movs	r3, #0
 8011fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	015a      	lsls	r2, r3, #5
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	4413      	add	r3, r2
 8011fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fee:	461a      	mov	r2, r3
 8011ff0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011ff4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	613b      	str	r3, [r7, #16]
 8011ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffe:	693a      	ldr	r2, [r7, #16]
 8012000:	429a      	cmp	r2, r3
 8012002:	d3b7      	bcc.n	8011f74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801200a:	691b      	ldr	r3, [r3, #16]
 801200c:	68fa      	ldr	r2, [r7, #12]
 801200e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012016:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2200      	movs	r2, #0
 801201c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012024:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012028:	2b00      	cmp	r3, #0
 801202a:	d105      	bne.n	8012038 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	699b      	ldr	r3, [r3, #24]
 8012030:	f043 0210 	orr.w	r2, r3, #16
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	699a      	ldr	r2, [r3, #24]
 801203c:	4b0e      	ldr	r3, [pc, #56]	; (8012078 <USB_DevInit+0x2b4>)
 801203e:	4313      	orrs	r3, r2
 8012040:	687a      	ldr	r2, [r7, #4]
 8012042:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012046:	2b00      	cmp	r3, #0
 8012048:	d005      	beq.n	8012056 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	699b      	ldr	r3, [r3, #24]
 801204e:	f043 0208 	orr.w	r2, r3, #8
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012058:	2b01      	cmp	r3, #1
 801205a:	d105      	bne.n	8012068 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	699a      	ldr	r2, [r3, #24]
 8012060:	4b06      	ldr	r3, [pc, #24]	; (801207c <USB_DevInit+0x2b8>)
 8012062:	4313      	orrs	r3, r2
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012068:	7dfb      	ldrb	r3, [r7, #23]
}
 801206a:	4618      	mov	r0, r3
 801206c:	3718      	adds	r7, #24
 801206e:	46bd      	mov	sp, r7
 8012070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012074:	b004      	add	sp, #16
 8012076:	4770      	bx	lr
 8012078:	803c3800 	.word	0x803c3800
 801207c:	40000004 	.word	0x40000004

08012080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012080:	b480      	push	{r7}
 8012082:	b085      	sub	sp, #20
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801208a:	2300      	movs	r3, #0
 801208c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	019b      	lsls	r3, r3, #6
 8012092:	f043 0220 	orr.w	r2, r3, #32
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	3301      	adds	r3, #1
 801209e:	60fb      	str	r3, [r7, #12]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	4a09      	ldr	r2, [pc, #36]	; (80120c8 <USB_FlushTxFifo+0x48>)
 80120a4:	4293      	cmp	r3, r2
 80120a6:	d901      	bls.n	80120ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80120a8:	2303      	movs	r3, #3
 80120aa:	e006      	b.n	80120ba <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	691b      	ldr	r3, [r3, #16]
 80120b0:	f003 0320 	and.w	r3, r3, #32
 80120b4:	2b20      	cmp	r3, #32
 80120b6:	d0f0      	beq.n	801209a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80120b8:	2300      	movs	r3, #0
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3714      	adds	r7, #20
 80120be:	46bd      	mov	sp, r7
 80120c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c4:	4770      	bx	lr
 80120c6:	bf00      	nop
 80120c8:	00030d40 	.word	0x00030d40

080120cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80120cc:	b480      	push	{r7}
 80120ce:	b085      	sub	sp, #20
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80120d4:	2300      	movs	r3, #0
 80120d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2210      	movs	r2, #16
 80120dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	3301      	adds	r3, #1
 80120e2:	60fb      	str	r3, [r7, #12]
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	4a09      	ldr	r2, [pc, #36]	; (801210c <USB_FlushRxFifo+0x40>)
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d901      	bls.n	80120f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80120ec:	2303      	movs	r3, #3
 80120ee:	e006      	b.n	80120fe <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	691b      	ldr	r3, [r3, #16]
 80120f4:	f003 0310 	and.w	r3, r3, #16
 80120f8:	2b10      	cmp	r3, #16
 80120fa:	d0f0      	beq.n	80120de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80120fc:	2300      	movs	r3, #0
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3714      	adds	r7, #20
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr
 801210a:	bf00      	nop
 801210c:	00030d40 	.word	0x00030d40

08012110 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012110:	b480      	push	{r7}
 8012112:	b085      	sub	sp, #20
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	460b      	mov	r3, r1
 801211a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012126:	681a      	ldr	r2, [r3, #0]
 8012128:	78fb      	ldrb	r3, [r7, #3]
 801212a:	68f9      	ldr	r1, [r7, #12]
 801212c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012130:	4313      	orrs	r3, r2
 8012132:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012134:	2300      	movs	r3, #0
}
 8012136:	4618      	mov	r0, r3
 8012138:	3714      	adds	r7, #20
 801213a:	46bd      	mov	sp, r7
 801213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012140:	4770      	bx	lr

08012142 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012142:	b480      	push	{r7}
 8012144:	b087      	sub	sp, #28
 8012146:	af00      	add	r7, sp, #0
 8012148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012154:	689b      	ldr	r3, [r3, #8]
 8012156:	f003 0306 	and.w	r3, r3, #6
 801215a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d102      	bne.n	8012168 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012162:	2300      	movs	r3, #0
 8012164:	75fb      	strb	r3, [r7, #23]
 8012166:	e00a      	b.n	801217e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2b02      	cmp	r3, #2
 801216c:	d002      	beq.n	8012174 <USB_GetDevSpeed+0x32>
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	2b06      	cmp	r3, #6
 8012172:	d102      	bne.n	801217a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012174:	2302      	movs	r3, #2
 8012176:	75fb      	strb	r3, [r7, #23]
 8012178:	e001      	b.n	801217e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801217a:	230f      	movs	r3, #15
 801217c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801217e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012180:	4618      	mov	r0, r3
 8012182:	371c      	adds	r7, #28
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr

0801218c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801218c:	b480      	push	{r7}
 801218e:	b085      	sub	sp, #20
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	785b      	ldrb	r3, [r3, #1]
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d139      	bne.n	801221c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ae:	69da      	ldr	r2, [r3, #28]
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	f003 030f 	and.w	r3, r3, #15
 80121b8:	2101      	movs	r1, #1
 80121ba:	fa01 f303 	lsl.w	r3, r1, r3
 80121be:	b29b      	uxth	r3, r3
 80121c0:	68f9      	ldr	r1, [r7, #12]
 80121c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121c6:	4313      	orrs	r3, r2
 80121c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	015a      	lsls	r2, r3, #5
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	4413      	add	r3, r2
 80121d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d153      	bne.n	8012288 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	015a      	lsls	r2, r3, #5
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	4413      	add	r3, r2
 80121e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121ec:	681a      	ldr	r2, [r3, #0]
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	689b      	ldr	r3, [r3, #8]
 80121f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	78db      	ldrb	r3, [r3, #3]
 80121fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80121fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	059b      	lsls	r3, r3, #22
 8012202:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012204:	431a      	orrs	r2, r3
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	0159      	lsls	r1, r3, #5
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	440b      	add	r3, r1
 801220e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012212:	4619      	mov	r1, r3
 8012214:	4b20      	ldr	r3, [pc, #128]	; (8012298 <USB_ActivateEndpoint+0x10c>)
 8012216:	4313      	orrs	r3, r2
 8012218:	600b      	str	r3, [r1, #0]
 801221a:	e035      	b.n	8012288 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012222:	69da      	ldr	r2, [r3, #28]
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	781b      	ldrb	r3, [r3, #0]
 8012228:	f003 030f 	and.w	r3, r3, #15
 801222c:	2101      	movs	r1, #1
 801222e:	fa01 f303 	lsl.w	r3, r1, r3
 8012232:	041b      	lsls	r3, r3, #16
 8012234:	68f9      	ldr	r1, [r7, #12]
 8012236:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801223a:	4313      	orrs	r3, r2
 801223c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	015a      	lsls	r2, r3, #5
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	4413      	add	r3, r2
 8012246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012250:	2b00      	cmp	r3, #0
 8012252:	d119      	bne.n	8012288 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	015a      	lsls	r2, r3, #5
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	4413      	add	r3, r2
 801225c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	689b      	ldr	r3, [r3, #8]
 8012266:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	78db      	ldrb	r3, [r3, #3]
 801226e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012270:	430b      	orrs	r3, r1
 8012272:	431a      	orrs	r2, r3
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	0159      	lsls	r1, r3, #5
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	440b      	add	r3, r1
 801227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012280:	4619      	mov	r1, r3
 8012282:	4b05      	ldr	r3, [pc, #20]	; (8012298 <USB_ActivateEndpoint+0x10c>)
 8012284:	4313      	orrs	r3, r2
 8012286:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012288:	2300      	movs	r3, #0
}
 801228a:	4618      	mov	r0, r3
 801228c:	3714      	adds	r7, #20
 801228e:	46bd      	mov	sp, r7
 8012290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012294:	4770      	bx	lr
 8012296:	bf00      	nop
 8012298:	10008000 	.word	0x10008000

0801229c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801229c:	b480      	push	{r7}
 801229e:	b085      	sub	sp, #20
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	781b      	ldrb	r3, [r3, #0]
 80122ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	785b      	ldrb	r3, [r3, #1]
 80122b4:	2b01      	cmp	r3, #1
 80122b6:	d161      	bne.n	801237c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	015a      	lsls	r2, r3, #5
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	4413      	add	r3, r2
 80122c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80122ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80122ce:	d11f      	bne.n	8012310 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	015a      	lsls	r2, r3, #5
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	4413      	add	r3, r2
 80122d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	68ba      	ldr	r2, [r7, #8]
 80122e0:	0151      	lsls	r1, r2, #5
 80122e2:	68fa      	ldr	r2, [r7, #12]
 80122e4:	440a      	add	r2, r1
 80122e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80122ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80122ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	015a      	lsls	r2, r3, #5
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	4413      	add	r3, r2
 80122f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	68ba      	ldr	r2, [r7, #8]
 8012300:	0151      	lsls	r1, r2, #5
 8012302:	68fa      	ldr	r2, [r7, #12]
 8012304:	440a      	add	r2, r1
 8012306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801230a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801230e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	f003 030f 	and.w	r3, r3, #15
 8012320:	2101      	movs	r1, #1
 8012322:	fa01 f303 	lsl.w	r3, r1, r3
 8012326:	b29b      	uxth	r3, r3
 8012328:	43db      	mvns	r3, r3
 801232a:	68f9      	ldr	r1, [r7, #12]
 801232c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012330:	4013      	ands	r3, r2
 8012332:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801233a:	69da      	ldr	r2, [r3, #28]
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	f003 030f 	and.w	r3, r3, #15
 8012344:	2101      	movs	r1, #1
 8012346:	fa01 f303 	lsl.w	r3, r1, r3
 801234a:	b29b      	uxth	r3, r3
 801234c:	43db      	mvns	r3, r3
 801234e:	68f9      	ldr	r1, [r7, #12]
 8012350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012354:	4013      	ands	r3, r2
 8012356:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	015a      	lsls	r2, r3, #5
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	4413      	add	r3, r2
 8012360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	0159      	lsls	r1, r3, #5
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	440b      	add	r3, r1
 801236e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012372:	4619      	mov	r1, r3
 8012374:	4b35      	ldr	r3, [pc, #212]	; (801244c <USB_DeactivateEndpoint+0x1b0>)
 8012376:	4013      	ands	r3, r2
 8012378:	600b      	str	r3, [r1, #0]
 801237a:	e060      	b.n	801243e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	015a      	lsls	r2, r3, #5
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	4413      	add	r3, r2
 8012384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801238e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012392:	d11f      	bne.n	80123d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	015a      	lsls	r2, r3, #5
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	4413      	add	r3, r2
 801239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	68ba      	ldr	r2, [r7, #8]
 80123a4:	0151      	lsls	r1, r2, #5
 80123a6:	68fa      	ldr	r2, [r7, #12]
 80123a8:	440a      	add	r2, r1
 80123aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80123b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	015a      	lsls	r2, r3, #5
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	4413      	add	r3, r2
 80123bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	68ba      	ldr	r2, [r7, #8]
 80123c4:	0151      	lsls	r1, r2, #5
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	440a      	add	r2, r1
 80123ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80123d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	f003 030f 	and.w	r3, r3, #15
 80123e4:	2101      	movs	r1, #1
 80123e6:	fa01 f303 	lsl.w	r3, r1, r3
 80123ea:	041b      	lsls	r3, r3, #16
 80123ec:	43db      	mvns	r3, r3
 80123ee:	68f9      	ldr	r1, [r7, #12]
 80123f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123f4:	4013      	ands	r3, r2
 80123f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123fe:	69da      	ldr	r2, [r3, #28]
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	f003 030f 	and.w	r3, r3, #15
 8012408:	2101      	movs	r1, #1
 801240a:	fa01 f303 	lsl.w	r3, r1, r3
 801240e:	041b      	lsls	r3, r3, #16
 8012410:	43db      	mvns	r3, r3
 8012412:	68f9      	ldr	r1, [r7, #12]
 8012414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012418:	4013      	ands	r3, r2
 801241a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	015a      	lsls	r2, r3, #5
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	4413      	add	r3, r2
 8012424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012428:	681a      	ldr	r2, [r3, #0]
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	0159      	lsls	r1, r3, #5
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	440b      	add	r3, r1
 8012432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012436:	4619      	mov	r1, r3
 8012438:	4b05      	ldr	r3, [pc, #20]	; (8012450 <USB_DeactivateEndpoint+0x1b4>)
 801243a:	4013      	ands	r3, r2
 801243c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801243e:	2300      	movs	r3, #0
}
 8012440:	4618      	mov	r0, r3
 8012442:	3714      	adds	r7, #20
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr
 801244c:	ec337800 	.word	0xec337800
 8012450:	eff37800 	.word	0xeff37800

08012454 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b08a      	sub	sp, #40	; 0x28
 8012458:	af02      	add	r7, sp, #8
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	4613      	mov	r3, r2
 8012460:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	785b      	ldrb	r3, [r3, #1]
 8012470:	2b01      	cmp	r3, #1
 8012472:	f040 8163 	bne.w	801273c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	695b      	ldr	r3, [r3, #20]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d132      	bne.n	80124e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801247e:	69bb      	ldr	r3, [r7, #24]
 8012480:	015a      	lsls	r2, r3, #5
 8012482:	69fb      	ldr	r3, [r7, #28]
 8012484:	4413      	add	r3, r2
 8012486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801248a:	691a      	ldr	r2, [r3, #16]
 801248c:	69bb      	ldr	r3, [r7, #24]
 801248e:	0159      	lsls	r1, r3, #5
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	440b      	add	r3, r1
 8012494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012498:	4619      	mov	r1, r3
 801249a:	4ba5      	ldr	r3, [pc, #660]	; (8012730 <USB_EPStartXfer+0x2dc>)
 801249c:	4013      	ands	r3, r2
 801249e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80124a0:	69bb      	ldr	r3, [r7, #24]
 80124a2:	015a      	lsls	r2, r3, #5
 80124a4:	69fb      	ldr	r3, [r7, #28]
 80124a6:	4413      	add	r3, r2
 80124a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124ac:	691b      	ldr	r3, [r3, #16]
 80124ae:	69ba      	ldr	r2, [r7, #24]
 80124b0:	0151      	lsls	r1, r2, #5
 80124b2:	69fa      	ldr	r2, [r7, #28]
 80124b4:	440a      	add	r2, r1
 80124b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80124be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80124c0:	69bb      	ldr	r3, [r7, #24]
 80124c2:	015a      	lsls	r2, r3, #5
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	4413      	add	r3, r2
 80124c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124cc:	691a      	ldr	r2, [r3, #16]
 80124ce:	69bb      	ldr	r3, [r7, #24]
 80124d0:	0159      	lsls	r1, r3, #5
 80124d2:	69fb      	ldr	r3, [r7, #28]
 80124d4:	440b      	add	r3, r1
 80124d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124da:	4619      	mov	r1, r3
 80124dc:	4b95      	ldr	r3, [pc, #596]	; (8012734 <USB_EPStartXfer+0x2e0>)
 80124de:	4013      	ands	r3, r2
 80124e0:	610b      	str	r3, [r1, #16]
 80124e2:	e074      	b.n	80125ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	015a      	lsls	r2, r3, #5
 80124e8:	69fb      	ldr	r3, [r7, #28]
 80124ea:	4413      	add	r3, r2
 80124ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124f0:	691a      	ldr	r2, [r3, #16]
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	0159      	lsls	r1, r3, #5
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	440b      	add	r3, r1
 80124fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124fe:	4619      	mov	r1, r3
 8012500:	4b8c      	ldr	r3, [pc, #560]	; (8012734 <USB_EPStartXfer+0x2e0>)
 8012502:	4013      	ands	r3, r2
 8012504:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012506:	69bb      	ldr	r3, [r7, #24]
 8012508:	015a      	lsls	r2, r3, #5
 801250a:	69fb      	ldr	r3, [r7, #28]
 801250c:	4413      	add	r3, r2
 801250e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012512:	691a      	ldr	r2, [r3, #16]
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	0159      	lsls	r1, r3, #5
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	440b      	add	r3, r1
 801251c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012520:	4619      	mov	r1, r3
 8012522:	4b83      	ldr	r3, [pc, #524]	; (8012730 <USB_EPStartXfer+0x2dc>)
 8012524:	4013      	ands	r3, r2
 8012526:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012528:	69bb      	ldr	r3, [r7, #24]
 801252a:	015a      	lsls	r2, r3, #5
 801252c:	69fb      	ldr	r3, [r7, #28]
 801252e:	4413      	add	r3, r2
 8012530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012534:	691a      	ldr	r2, [r3, #16]
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	6959      	ldr	r1, [r3, #20]
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	689b      	ldr	r3, [r3, #8]
 801253e:	440b      	add	r3, r1
 8012540:	1e59      	subs	r1, r3, #1
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	689b      	ldr	r3, [r3, #8]
 8012546:	fbb1 f3f3 	udiv	r3, r1, r3
 801254a:	04d9      	lsls	r1, r3, #19
 801254c:	4b7a      	ldr	r3, [pc, #488]	; (8012738 <USB_EPStartXfer+0x2e4>)
 801254e:	400b      	ands	r3, r1
 8012550:	69b9      	ldr	r1, [r7, #24]
 8012552:	0148      	lsls	r0, r1, #5
 8012554:	69f9      	ldr	r1, [r7, #28]
 8012556:	4401      	add	r1, r0
 8012558:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801255c:	4313      	orrs	r3, r2
 801255e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012560:	69bb      	ldr	r3, [r7, #24]
 8012562:	015a      	lsls	r2, r3, #5
 8012564:	69fb      	ldr	r3, [r7, #28]
 8012566:	4413      	add	r3, r2
 8012568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801256c:	691a      	ldr	r2, [r3, #16]
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	695b      	ldr	r3, [r3, #20]
 8012572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012576:	69b9      	ldr	r1, [r7, #24]
 8012578:	0148      	lsls	r0, r1, #5
 801257a:	69f9      	ldr	r1, [r7, #28]
 801257c:	4401      	add	r1, r0
 801257e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012582:	4313      	orrs	r3, r2
 8012584:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	78db      	ldrb	r3, [r3, #3]
 801258a:	2b01      	cmp	r3, #1
 801258c:	d11f      	bne.n	80125ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801258e:	69bb      	ldr	r3, [r7, #24]
 8012590:	015a      	lsls	r2, r3, #5
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	4413      	add	r3, r2
 8012596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801259a:	691b      	ldr	r3, [r3, #16]
 801259c:	69ba      	ldr	r2, [r7, #24]
 801259e:	0151      	lsls	r1, r2, #5
 80125a0:	69fa      	ldr	r2, [r7, #28]
 80125a2:	440a      	add	r2, r1
 80125a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80125ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80125ae:	69bb      	ldr	r3, [r7, #24]
 80125b0:	015a      	lsls	r2, r3, #5
 80125b2:	69fb      	ldr	r3, [r7, #28]
 80125b4:	4413      	add	r3, r2
 80125b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125ba:	691b      	ldr	r3, [r3, #16]
 80125bc:	69ba      	ldr	r2, [r7, #24]
 80125be:	0151      	lsls	r1, r2, #5
 80125c0:	69fa      	ldr	r2, [r7, #28]
 80125c2:	440a      	add	r2, r1
 80125c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80125cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80125ce:	79fb      	ldrb	r3, [r7, #7]
 80125d0:	2b01      	cmp	r3, #1
 80125d2:	d14b      	bne.n	801266c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	691b      	ldr	r3, [r3, #16]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d009      	beq.n	80125f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	015a      	lsls	r2, r3, #5
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	4413      	add	r3, r2
 80125e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125e8:	461a      	mov	r2, r3
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	691b      	ldr	r3, [r3, #16]
 80125ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	78db      	ldrb	r3, [r3, #3]
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d128      	bne.n	801264a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80125f8:	69fb      	ldr	r3, [r7, #28]
 80125fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125fe:	689b      	ldr	r3, [r3, #8]
 8012600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012604:	2b00      	cmp	r3, #0
 8012606:	d110      	bne.n	801262a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012608:	69bb      	ldr	r3, [r7, #24]
 801260a:	015a      	lsls	r2, r3, #5
 801260c:	69fb      	ldr	r3, [r7, #28]
 801260e:	4413      	add	r3, r2
 8012610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	69ba      	ldr	r2, [r7, #24]
 8012618:	0151      	lsls	r1, r2, #5
 801261a:	69fa      	ldr	r2, [r7, #28]
 801261c:	440a      	add	r2, r1
 801261e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012622:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012626:	6013      	str	r3, [r2, #0]
 8012628:	e00f      	b.n	801264a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	015a      	lsls	r2, r3, #5
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	4413      	add	r3, r2
 8012632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	69ba      	ldr	r2, [r7, #24]
 801263a:	0151      	lsls	r1, r2, #5
 801263c:	69fa      	ldr	r2, [r7, #28]
 801263e:	440a      	add	r2, r1
 8012640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012648:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801264a:	69bb      	ldr	r3, [r7, #24]
 801264c:	015a      	lsls	r2, r3, #5
 801264e:	69fb      	ldr	r3, [r7, #28]
 8012650:	4413      	add	r3, r2
 8012652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	69ba      	ldr	r2, [r7, #24]
 801265a:	0151      	lsls	r1, r2, #5
 801265c:	69fa      	ldr	r2, [r7, #28]
 801265e:	440a      	add	r2, r1
 8012660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012664:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012668:	6013      	str	r3, [r2, #0]
 801266a:	e133      	b.n	80128d4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801266c:	69bb      	ldr	r3, [r7, #24]
 801266e:	015a      	lsls	r2, r3, #5
 8012670:	69fb      	ldr	r3, [r7, #28]
 8012672:	4413      	add	r3, r2
 8012674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	69ba      	ldr	r2, [r7, #24]
 801267c:	0151      	lsls	r1, r2, #5
 801267e:	69fa      	ldr	r2, [r7, #28]
 8012680:	440a      	add	r2, r1
 8012682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012686:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801268a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	78db      	ldrb	r3, [r3, #3]
 8012690:	2b01      	cmp	r3, #1
 8012692:	d015      	beq.n	80126c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	695b      	ldr	r3, [r3, #20]
 8012698:	2b00      	cmp	r3, #0
 801269a:	f000 811b 	beq.w	80128d4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	f003 030f 	and.w	r3, r3, #15
 80126ae:	2101      	movs	r1, #1
 80126b0:	fa01 f303 	lsl.w	r3, r1, r3
 80126b4:	69f9      	ldr	r1, [r7, #28]
 80126b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80126ba:	4313      	orrs	r3, r2
 80126bc:	634b      	str	r3, [r1, #52]	; 0x34
 80126be:	e109      	b.n	80128d4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80126c0:	69fb      	ldr	r3, [r7, #28]
 80126c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126c6:	689b      	ldr	r3, [r3, #8]
 80126c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d110      	bne.n	80126f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80126d0:	69bb      	ldr	r3, [r7, #24]
 80126d2:	015a      	lsls	r2, r3, #5
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	4413      	add	r3, r2
 80126d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	69ba      	ldr	r2, [r7, #24]
 80126e0:	0151      	lsls	r1, r2, #5
 80126e2:	69fa      	ldr	r2, [r7, #28]
 80126e4:	440a      	add	r2, r1
 80126e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80126ee:	6013      	str	r3, [r2, #0]
 80126f0:	e00f      	b.n	8012712 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80126f2:	69bb      	ldr	r3, [r7, #24]
 80126f4:	015a      	lsls	r2, r3, #5
 80126f6:	69fb      	ldr	r3, [r7, #28]
 80126f8:	4413      	add	r3, r2
 80126fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	69ba      	ldr	r2, [r7, #24]
 8012702:	0151      	lsls	r1, r2, #5
 8012704:	69fa      	ldr	r2, [r7, #28]
 8012706:	440a      	add	r2, r1
 8012708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012710:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	68d9      	ldr	r1, [r3, #12]
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	781a      	ldrb	r2, [r3, #0]
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	695b      	ldr	r3, [r3, #20]
 801271e:	b298      	uxth	r0, r3
 8012720:	79fb      	ldrb	r3, [r7, #7]
 8012722:	9300      	str	r3, [sp, #0]
 8012724:	4603      	mov	r3, r0
 8012726:	68f8      	ldr	r0, [r7, #12]
 8012728:	f000 fa38 	bl	8012b9c <USB_WritePacket>
 801272c:	e0d2      	b.n	80128d4 <USB_EPStartXfer+0x480>
 801272e:	bf00      	nop
 8012730:	e007ffff 	.word	0xe007ffff
 8012734:	fff80000 	.word	0xfff80000
 8012738:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801273c:	69bb      	ldr	r3, [r7, #24]
 801273e:	015a      	lsls	r2, r3, #5
 8012740:	69fb      	ldr	r3, [r7, #28]
 8012742:	4413      	add	r3, r2
 8012744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012748:	691a      	ldr	r2, [r3, #16]
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	0159      	lsls	r1, r3, #5
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	440b      	add	r3, r1
 8012752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012756:	4619      	mov	r1, r3
 8012758:	4b61      	ldr	r3, [pc, #388]	; (80128e0 <USB_EPStartXfer+0x48c>)
 801275a:	4013      	ands	r3, r2
 801275c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	015a      	lsls	r2, r3, #5
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	4413      	add	r3, r2
 8012766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801276a:	691a      	ldr	r2, [r3, #16]
 801276c:	69bb      	ldr	r3, [r7, #24]
 801276e:	0159      	lsls	r1, r3, #5
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	440b      	add	r3, r1
 8012774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012778:	4619      	mov	r1, r3
 801277a:	4b5a      	ldr	r3, [pc, #360]	; (80128e4 <USB_EPStartXfer+0x490>)
 801277c:	4013      	ands	r3, r2
 801277e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	695b      	ldr	r3, [r3, #20]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d123      	bne.n	80127d0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012788:	69bb      	ldr	r3, [r7, #24]
 801278a:	015a      	lsls	r2, r3, #5
 801278c:	69fb      	ldr	r3, [r7, #28]
 801278e:	4413      	add	r3, r2
 8012790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012794:	691a      	ldr	r2, [r3, #16]
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	689b      	ldr	r3, [r3, #8]
 801279a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801279e:	69b9      	ldr	r1, [r7, #24]
 80127a0:	0148      	lsls	r0, r1, #5
 80127a2:	69f9      	ldr	r1, [r7, #28]
 80127a4:	4401      	add	r1, r0
 80127a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80127aa:	4313      	orrs	r3, r2
 80127ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	015a      	lsls	r2, r3, #5
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	4413      	add	r3, r2
 80127b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127ba:	691b      	ldr	r3, [r3, #16]
 80127bc:	69ba      	ldr	r2, [r7, #24]
 80127be:	0151      	lsls	r1, r2, #5
 80127c0:	69fa      	ldr	r2, [r7, #28]
 80127c2:	440a      	add	r2, r1
 80127c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80127cc:	6113      	str	r3, [r2, #16]
 80127ce:	e033      	b.n	8012838 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	695a      	ldr	r2, [r3, #20]
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	689b      	ldr	r3, [r3, #8]
 80127d8:	4413      	add	r3, r2
 80127da:	1e5a      	subs	r2, r3, #1
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	689b      	ldr	r3, [r3, #8]
 80127e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80127e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80127e6:	69bb      	ldr	r3, [r7, #24]
 80127e8:	015a      	lsls	r2, r3, #5
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	4413      	add	r3, r2
 80127ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127f2:	691a      	ldr	r2, [r3, #16]
 80127f4:	8afb      	ldrh	r3, [r7, #22]
 80127f6:	04d9      	lsls	r1, r3, #19
 80127f8:	4b3b      	ldr	r3, [pc, #236]	; (80128e8 <USB_EPStartXfer+0x494>)
 80127fa:	400b      	ands	r3, r1
 80127fc:	69b9      	ldr	r1, [r7, #24]
 80127fe:	0148      	lsls	r0, r1, #5
 8012800:	69f9      	ldr	r1, [r7, #28]
 8012802:	4401      	add	r1, r0
 8012804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012808:	4313      	orrs	r3, r2
 801280a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	015a      	lsls	r2, r3, #5
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	4413      	add	r3, r2
 8012814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012818:	691a      	ldr	r2, [r3, #16]
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	689b      	ldr	r3, [r3, #8]
 801281e:	8af9      	ldrh	r1, [r7, #22]
 8012820:	fb01 f303 	mul.w	r3, r1, r3
 8012824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012828:	69b9      	ldr	r1, [r7, #24]
 801282a:	0148      	lsls	r0, r1, #5
 801282c:	69f9      	ldr	r1, [r7, #28]
 801282e:	4401      	add	r1, r0
 8012830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012834:	4313      	orrs	r3, r2
 8012836:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012838:	79fb      	ldrb	r3, [r7, #7]
 801283a:	2b01      	cmp	r3, #1
 801283c:	d10d      	bne.n	801285a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	68db      	ldr	r3, [r3, #12]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d009      	beq.n	801285a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	68d9      	ldr	r1, [r3, #12]
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	015a      	lsls	r2, r3, #5
 801284e:	69fb      	ldr	r3, [r7, #28]
 8012850:	4413      	add	r3, r2
 8012852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012856:	460a      	mov	r2, r1
 8012858:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	78db      	ldrb	r3, [r3, #3]
 801285e:	2b01      	cmp	r3, #1
 8012860:	d128      	bne.n	80128b4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012862:	69fb      	ldr	r3, [r7, #28]
 8012864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012868:	689b      	ldr	r3, [r3, #8]
 801286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801286e:	2b00      	cmp	r3, #0
 8012870:	d110      	bne.n	8012894 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	015a      	lsls	r2, r3, #5
 8012876:	69fb      	ldr	r3, [r7, #28]
 8012878:	4413      	add	r3, r2
 801287a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	69ba      	ldr	r2, [r7, #24]
 8012882:	0151      	lsls	r1, r2, #5
 8012884:	69fa      	ldr	r2, [r7, #28]
 8012886:	440a      	add	r2, r1
 8012888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801288c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012890:	6013      	str	r3, [r2, #0]
 8012892:	e00f      	b.n	80128b4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012894:	69bb      	ldr	r3, [r7, #24]
 8012896:	015a      	lsls	r2, r3, #5
 8012898:	69fb      	ldr	r3, [r7, #28]
 801289a:	4413      	add	r3, r2
 801289c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	69ba      	ldr	r2, [r7, #24]
 80128a4:	0151      	lsls	r1, r2, #5
 80128a6:	69fa      	ldr	r2, [r7, #28]
 80128a8:	440a      	add	r2, r1
 80128aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80128b4:	69bb      	ldr	r3, [r7, #24]
 80128b6:	015a      	lsls	r2, r3, #5
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	4413      	add	r3, r2
 80128bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	69ba      	ldr	r2, [r7, #24]
 80128c4:	0151      	lsls	r1, r2, #5
 80128c6:	69fa      	ldr	r2, [r7, #28]
 80128c8:	440a      	add	r2, r1
 80128ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80128d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80128d4:	2300      	movs	r3, #0
}
 80128d6:	4618      	mov	r0, r3
 80128d8:	3720      	adds	r7, #32
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	fff80000 	.word	0xfff80000
 80128e4:	e007ffff 	.word	0xe007ffff
 80128e8:	1ff80000 	.word	0x1ff80000

080128ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80128ec:	b480      	push	{r7}
 80128ee:	b087      	sub	sp, #28
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60f8      	str	r0, [r7, #12]
 80128f4:	60b9      	str	r1, [r7, #8]
 80128f6:	4613      	mov	r3, r2
 80128f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	785b      	ldrb	r3, [r3, #1]
 8012908:	2b01      	cmp	r3, #1
 801290a:	f040 80cd 	bne.w	8012aa8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	695b      	ldr	r3, [r3, #20]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d132      	bne.n	801297c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	015a      	lsls	r2, r3, #5
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	4413      	add	r3, r2
 801291e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012922:	691a      	ldr	r2, [r3, #16]
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	0159      	lsls	r1, r3, #5
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	440b      	add	r3, r1
 801292c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012930:	4619      	mov	r1, r3
 8012932:	4b98      	ldr	r3, [pc, #608]	; (8012b94 <USB_EP0StartXfer+0x2a8>)
 8012934:	4013      	ands	r3, r2
 8012936:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	015a      	lsls	r2, r3, #5
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	4413      	add	r3, r2
 8012940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012944:	691b      	ldr	r3, [r3, #16]
 8012946:	693a      	ldr	r2, [r7, #16]
 8012948:	0151      	lsls	r1, r2, #5
 801294a:	697a      	ldr	r2, [r7, #20]
 801294c:	440a      	add	r2, r1
 801294e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012956:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	015a      	lsls	r2, r3, #5
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	4413      	add	r3, r2
 8012960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012964:	691a      	ldr	r2, [r3, #16]
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	0159      	lsls	r1, r3, #5
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	440b      	add	r3, r1
 801296e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012972:	4619      	mov	r1, r3
 8012974:	4b88      	ldr	r3, [pc, #544]	; (8012b98 <USB_EP0StartXfer+0x2ac>)
 8012976:	4013      	ands	r3, r2
 8012978:	610b      	str	r3, [r1, #16]
 801297a:	e04e      	b.n	8012a1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	015a      	lsls	r2, r3, #5
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	4413      	add	r3, r2
 8012984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012988:	691a      	ldr	r2, [r3, #16]
 801298a:	693b      	ldr	r3, [r7, #16]
 801298c:	0159      	lsls	r1, r3, #5
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	440b      	add	r3, r1
 8012992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012996:	4619      	mov	r1, r3
 8012998:	4b7f      	ldr	r3, [pc, #508]	; (8012b98 <USB_EP0StartXfer+0x2ac>)
 801299a:	4013      	ands	r3, r2
 801299c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	015a      	lsls	r2, r3, #5
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	4413      	add	r3, r2
 80129a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129aa:	691a      	ldr	r2, [r3, #16]
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	0159      	lsls	r1, r3, #5
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	440b      	add	r3, r1
 80129b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129b8:	4619      	mov	r1, r3
 80129ba:	4b76      	ldr	r3, [pc, #472]	; (8012b94 <USB_EP0StartXfer+0x2a8>)
 80129bc:	4013      	ands	r3, r2
 80129be:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	695a      	ldr	r2, [r3, #20]
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	689b      	ldr	r3, [r3, #8]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d903      	bls.n	80129d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	689a      	ldr	r2, [r3, #8]
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	015a      	lsls	r2, r3, #5
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	4413      	add	r3, r2
 80129dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129e0:	691b      	ldr	r3, [r3, #16]
 80129e2:	693a      	ldr	r2, [r7, #16]
 80129e4:	0151      	lsls	r1, r2, #5
 80129e6:	697a      	ldr	r2, [r7, #20]
 80129e8:	440a      	add	r2, r1
 80129ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80129f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	015a      	lsls	r2, r3, #5
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	4413      	add	r3, r2
 80129fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a00:	691a      	ldr	r2, [r3, #16]
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	695b      	ldr	r3, [r3, #20]
 8012a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a0a:	6939      	ldr	r1, [r7, #16]
 8012a0c:	0148      	lsls	r0, r1, #5
 8012a0e:	6979      	ldr	r1, [r7, #20]
 8012a10:	4401      	add	r1, r0
 8012a12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012a16:	4313      	orrs	r3, r2
 8012a18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012a1a:	79fb      	ldrb	r3, [r7, #7]
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d11e      	bne.n	8012a5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	691b      	ldr	r3, [r3, #16]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d009      	beq.n	8012a3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	015a      	lsls	r2, r3, #5
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	4413      	add	r3, r2
 8012a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a34:	461a      	mov	r2, r3
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	691b      	ldr	r3, [r3, #16]
 8012a3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	015a      	lsls	r2, r3, #5
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	4413      	add	r3, r2
 8012a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	693a      	ldr	r2, [r7, #16]
 8012a4c:	0151      	lsls	r1, r2, #5
 8012a4e:	697a      	ldr	r2, [r7, #20]
 8012a50:	440a      	add	r2, r1
 8012a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a5a:	6013      	str	r3, [r2, #0]
 8012a5c:	e092      	b.n	8012b84 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	015a      	lsls	r2, r3, #5
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	4413      	add	r3, r2
 8012a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	693a      	ldr	r2, [r7, #16]
 8012a6e:	0151      	lsls	r1, r2, #5
 8012a70:	697a      	ldr	r2, [r7, #20]
 8012a72:	440a      	add	r2, r1
 8012a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	695b      	ldr	r3, [r3, #20]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d07e      	beq.n	8012b84 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	f003 030f 	and.w	r3, r3, #15
 8012a96:	2101      	movs	r1, #1
 8012a98:	fa01 f303 	lsl.w	r3, r1, r3
 8012a9c:	6979      	ldr	r1, [r7, #20]
 8012a9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012aa2:	4313      	orrs	r3, r2
 8012aa4:	634b      	str	r3, [r1, #52]	; 0x34
 8012aa6:	e06d      	b.n	8012b84 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	015a      	lsls	r2, r3, #5
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	4413      	add	r3, r2
 8012ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ab4:	691a      	ldr	r2, [r3, #16]
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	0159      	lsls	r1, r3, #5
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	440b      	add	r3, r1
 8012abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	4b34      	ldr	r3, [pc, #208]	; (8012b98 <USB_EP0StartXfer+0x2ac>)
 8012ac6:	4013      	ands	r3, r2
 8012ac8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	015a      	lsls	r2, r3, #5
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	4413      	add	r3, r2
 8012ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ad6:	691a      	ldr	r2, [r3, #16]
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	0159      	lsls	r1, r3, #5
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	440b      	add	r3, r1
 8012ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	4b2b      	ldr	r3, [pc, #172]	; (8012b94 <USB_EP0StartXfer+0x2a8>)
 8012ae8:	4013      	ands	r3, r2
 8012aea:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	695b      	ldr	r3, [r3, #20]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d003      	beq.n	8012afc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	689a      	ldr	r2, [r3, #8]
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012afc:	693b      	ldr	r3, [r7, #16]
 8012afe:	015a      	lsls	r2, r3, #5
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	4413      	add	r3, r2
 8012b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b08:	691b      	ldr	r3, [r3, #16]
 8012b0a:	693a      	ldr	r2, [r7, #16]
 8012b0c:	0151      	lsls	r1, r2, #5
 8012b0e:	697a      	ldr	r2, [r7, #20]
 8012b10:	440a      	add	r2, r1
 8012b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012b1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	015a      	lsls	r2, r3, #5
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	4413      	add	r3, r2
 8012b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b28:	691a      	ldr	r2, [r3, #16]
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	689b      	ldr	r3, [r3, #8]
 8012b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b32:	6939      	ldr	r1, [r7, #16]
 8012b34:	0148      	lsls	r0, r1, #5
 8012b36:	6979      	ldr	r1, [r7, #20]
 8012b38:	4401      	add	r1, r0
 8012b3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012b3e:	4313      	orrs	r3, r2
 8012b40:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012b42:	79fb      	ldrb	r3, [r7, #7]
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d10d      	bne.n	8012b64 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	68db      	ldr	r3, [r3, #12]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d009      	beq.n	8012b64 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	68d9      	ldr	r1, [r3, #12]
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	015a      	lsls	r2, r3, #5
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b60:	460a      	mov	r2, r1
 8012b62:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	015a      	lsls	r2, r3, #5
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	693a      	ldr	r2, [r7, #16]
 8012b74:	0151      	lsls	r1, r2, #5
 8012b76:	697a      	ldr	r2, [r7, #20]
 8012b78:	440a      	add	r2, r1
 8012b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012b82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012b84:	2300      	movs	r3, #0
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	371c      	adds	r7, #28
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b90:	4770      	bx	lr
 8012b92:	bf00      	nop
 8012b94:	e007ffff 	.word	0xe007ffff
 8012b98:	fff80000 	.word	0xfff80000

08012b9c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b089      	sub	sp, #36	; 0x24
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	60f8      	str	r0, [r7, #12]
 8012ba4:	60b9      	str	r1, [r7, #8]
 8012ba6:	4611      	mov	r1, r2
 8012ba8:	461a      	mov	r2, r3
 8012baa:	460b      	mov	r3, r1
 8012bac:	71fb      	strb	r3, [r7, #7]
 8012bae:	4613      	mov	r3, r2
 8012bb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d11a      	bne.n	8012bf8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012bc2:	88bb      	ldrh	r3, [r7, #4]
 8012bc4:	3303      	adds	r3, #3
 8012bc6:	089b      	lsrs	r3, r3, #2
 8012bc8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012bca:	2300      	movs	r3, #0
 8012bcc:	61bb      	str	r3, [r7, #24]
 8012bce:	e00f      	b.n	8012bf0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012bd0:	79fb      	ldrb	r3, [r7, #7]
 8012bd2:	031a      	lsls	r2, r3, #12
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012bdc:	461a      	mov	r2, r3
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012be4:	69fb      	ldr	r3, [r7, #28]
 8012be6:	3304      	adds	r3, #4
 8012be8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012bea:	69bb      	ldr	r3, [r7, #24]
 8012bec:	3301      	adds	r3, #1
 8012bee:	61bb      	str	r3, [r7, #24]
 8012bf0:	69ba      	ldr	r2, [r7, #24]
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d3eb      	bcc.n	8012bd0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012bf8:	2300      	movs	r3, #0
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3724      	adds	r7, #36	; 0x24
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c04:	4770      	bx	lr

08012c06 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012c06:	b480      	push	{r7}
 8012c08:	b089      	sub	sp, #36	; 0x24
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	60f8      	str	r0, [r7, #12]
 8012c0e:	60b9      	str	r1, [r7, #8]
 8012c10:	4613      	mov	r3, r2
 8012c12:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012c18:	68bb      	ldr	r3, [r7, #8]
 8012c1a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012c1c:	88fb      	ldrh	r3, [r7, #6]
 8012c1e:	3303      	adds	r3, #3
 8012c20:	089b      	lsrs	r3, r3, #2
 8012c22:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012c24:	2300      	movs	r3, #0
 8012c26:	61bb      	str	r3, [r7, #24]
 8012c28:	e00b      	b.n	8012c42 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	69fb      	ldr	r3, [r7, #28]
 8012c34:	601a      	str	r2, [r3, #0]
    pDest++;
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	3304      	adds	r3, #4
 8012c3a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012c3c:	69bb      	ldr	r3, [r7, #24]
 8012c3e:	3301      	adds	r3, #1
 8012c40:	61bb      	str	r3, [r7, #24]
 8012c42:	69ba      	ldr	r2, [r7, #24]
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d3ef      	bcc.n	8012c2a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012c4a:	69fb      	ldr	r3, [r7, #28]
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3724      	adds	r7, #36	; 0x24
 8012c50:	46bd      	mov	sp, r7
 8012c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c56:	4770      	bx	lr

08012c58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b085      	sub	sp, #20
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
 8012c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	781b      	ldrb	r3, [r3, #0]
 8012c6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	785b      	ldrb	r3, [r3, #1]
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	d12c      	bne.n	8012cce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	015a      	lsls	r2, r3, #5
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	4413      	add	r3, r2
 8012c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	db12      	blt.n	8012cac <USB_EPSetStall+0x54>
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00f      	beq.n	8012cac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	015a      	lsls	r2, r3, #5
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	4413      	add	r3, r2
 8012c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	68ba      	ldr	r2, [r7, #8]
 8012c9c:	0151      	lsls	r1, r2, #5
 8012c9e:	68fa      	ldr	r2, [r7, #12]
 8012ca0:	440a      	add	r2, r1
 8012ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ca6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012caa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	015a      	lsls	r2, r3, #5
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	4413      	add	r3, r2
 8012cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	68ba      	ldr	r2, [r7, #8]
 8012cbc:	0151      	lsls	r1, r2, #5
 8012cbe:	68fa      	ldr	r2, [r7, #12]
 8012cc0:	440a      	add	r2, r1
 8012cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012cca:	6013      	str	r3, [r2, #0]
 8012ccc:	e02b      	b.n	8012d26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	015a      	lsls	r2, r3, #5
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	db12      	blt.n	8012d06 <USB_EPSetStall+0xae>
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d00f      	beq.n	8012d06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	015a      	lsls	r2, r3, #5
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	4413      	add	r3, r2
 8012cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	68ba      	ldr	r2, [r7, #8]
 8012cf6:	0151      	lsls	r1, r2, #5
 8012cf8:	68fa      	ldr	r2, [r7, #12]
 8012cfa:	440a      	add	r2, r1
 8012cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012d04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	015a      	lsls	r2, r3, #5
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	4413      	add	r3, r2
 8012d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	68ba      	ldr	r2, [r7, #8]
 8012d16:	0151      	lsls	r1, r2, #5
 8012d18:	68fa      	ldr	r2, [r7, #12]
 8012d1a:	440a      	add	r2, r1
 8012d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012d24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012d26:	2300      	movs	r3, #0
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3714      	adds	r7, #20
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d32:	4770      	bx	lr

08012d34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d34:	b480      	push	{r7}
 8012d36:	b085      	sub	sp, #20
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	785b      	ldrb	r3, [r3, #1]
 8012d4c:	2b01      	cmp	r3, #1
 8012d4e:	d128      	bne.n	8012da2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	015a      	lsls	r2, r3, #5
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	4413      	add	r3, r2
 8012d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	68ba      	ldr	r2, [r7, #8]
 8012d60:	0151      	lsls	r1, r2, #5
 8012d62:	68fa      	ldr	r2, [r7, #12]
 8012d64:	440a      	add	r2, r1
 8012d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012d6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	78db      	ldrb	r3, [r3, #3]
 8012d74:	2b03      	cmp	r3, #3
 8012d76:	d003      	beq.n	8012d80 <USB_EPClearStall+0x4c>
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	78db      	ldrb	r3, [r3, #3]
 8012d7c:	2b02      	cmp	r3, #2
 8012d7e:	d138      	bne.n	8012df2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	015a      	lsls	r2, r3, #5
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	4413      	add	r3, r2
 8012d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	68ba      	ldr	r2, [r7, #8]
 8012d90:	0151      	lsls	r1, r2, #5
 8012d92:	68fa      	ldr	r2, [r7, #12]
 8012d94:	440a      	add	r2, r1
 8012d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012d9e:	6013      	str	r3, [r2, #0]
 8012da0:	e027      	b.n	8012df2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	015a      	lsls	r2, r3, #5
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	4413      	add	r3, r2
 8012daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	68ba      	ldr	r2, [r7, #8]
 8012db2:	0151      	lsls	r1, r2, #5
 8012db4:	68fa      	ldr	r2, [r7, #12]
 8012db6:	440a      	add	r2, r1
 8012db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012dbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012dc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	78db      	ldrb	r3, [r3, #3]
 8012dc6:	2b03      	cmp	r3, #3
 8012dc8:	d003      	beq.n	8012dd2 <USB_EPClearStall+0x9e>
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	78db      	ldrb	r3, [r3, #3]
 8012dce:	2b02      	cmp	r3, #2
 8012dd0:	d10f      	bne.n	8012df2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	015a      	lsls	r2, r3, #5
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	4413      	add	r3, r2
 8012dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	68ba      	ldr	r2, [r7, #8]
 8012de2:	0151      	lsls	r1, r2, #5
 8012de4:	68fa      	ldr	r2, [r7, #12]
 8012de6:	440a      	add	r2, r1
 8012de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012df0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012df2:	2300      	movs	r3, #0
}
 8012df4:	4618      	mov	r0, r3
 8012df6:	3714      	adds	r7, #20
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfe:	4770      	bx	lr

08012e00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012e00:	b480      	push	{r7}
 8012e02:	b085      	sub	sp, #20
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	460b      	mov	r3, r1
 8012e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	68fa      	ldr	r2, [r7, #12]
 8012e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012e22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e2a:	681a      	ldr	r2, [r3, #0]
 8012e2c:	78fb      	ldrb	r3, [r7, #3]
 8012e2e:	011b      	lsls	r3, r3, #4
 8012e30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012e34:	68f9      	ldr	r1, [r7, #12]
 8012e36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e3a:	4313      	orrs	r3, r2
 8012e3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012e3e:	2300      	movs	r3, #0
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3714      	adds	r7, #20
 8012e44:	46bd      	mov	sp, r7
 8012e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4a:	4770      	bx	lr

08012e4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b084      	sub	sp, #16
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e5e:	685b      	ldr	r3, [r3, #4]
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e66:	f023 0302 	bic.w	r3, r3, #2
 8012e6a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012e6c:	2003      	movs	r0, #3
 8012e6e:	f7f1 fb65 	bl	800453c <HAL_Delay>

  return HAL_OK;
 8012e72:	2300      	movs	r3, #0
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3710      	adds	r7, #16
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b084      	sub	sp, #16
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	68fa      	ldr	r2, [r7, #12]
 8012e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e96:	f043 0302 	orr.w	r3, r3, #2
 8012e9a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012e9c:	2003      	movs	r0, #3
 8012e9e:	f7f1 fb4d 	bl	800453c <HAL_Delay>

  return HAL_OK;
 8012ea2:	2300      	movs	r3, #0
}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3710      	adds	r7, #16
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}

08012eac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b085      	sub	sp, #20
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	695b      	ldr	r3, [r3, #20]
 8012eb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	699b      	ldr	r3, [r3, #24]
 8012ebe:	68fa      	ldr	r2, [r7, #12]
 8012ec0:	4013      	ands	r3, r2
 8012ec2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3714      	adds	r7, #20
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed0:	4770      	bx	lr

08012ed2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012ed2:	b480      	push	{r7}
 8012ed4:	b085      	sub	sp, #20
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ee4:	699b      	ldr	r3, [r3, #24]
 8012ee6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eee:	69db      	ldr	r3, [r3, #28]
 8012ef0:	68ba      	ldr	r2, [r7, #8]
 8012ef2:	4013      	ands	r3, r2
 8012ef4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	0c1b      	lsrs	r3, r3, #16
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3714      	adds	r7, #20
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr

08012f06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f06:	b480      	push	{r7}
 8012f08:	b085      	sub	sp, #20
 8012f0a:	af00      	add	r7, sp, #0
 8012f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f18:	699b      	ldr	r3, [r3, #24]
 8012f1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f22:	69db      	ldr	r3, [r3, #28]
 8012f24:	68ba      	ldr	r2, [r7, #8]
 8012f26:	4013      	ands	r3, r2
 8012f28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	b29b      	uxth	r3, r3
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3714      	adds	r7, #20
 8012f32:	46bd      	mov	sp, r7
 8012f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f38:	4770      	bx	lr

08012f3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012f3a:	b480      	push	{r7}
 8012f3c:	b085      	sub	sp, #20
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	6078      	str	r0, [r7, #4]
 8012f42:	460b      	mov	r3, r1
 8012f44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012f4a:	78fb      	ldrb	r3, [r7, #3]
 8012f4c:	015a      	lsls	r2, r3, #5
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	4413      	add	r3, r2
 8012f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f56:	689b      	ldr	r3, [r3, #8]
 8012f58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f60:	695b      	ldr	r3, [r3, #20]
 8012f62:	68ba      	ldr	r2, [r7, #8]
 8012f64:	4013      	ands	r3, r2
 8012f66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012f68:	68bb      	ldr	r3, [r7, #8]
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3714      	adds	r7, #20
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f74:	4770      	bx	lr

08012f76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012f76:	b480      	push	{r7}
 8012f78:	b087      	sub	sp, #28
 8012f7a:	af00      	add	r7, sp, #0
 8012f7c:	6078      	str	r0, [r7, #4]
 8012f7e:	460b      	mov	r3, r1
 8012f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f8c:	691b      	ldr	r3, [r3, #16]
 8012f8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012f90:	697b      	ldr	r3, [r7, #20]
 8012f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012f9a:	78fb      	ldrb	r3, [r7, #3]
 8012f9c:	f003 030f 	and.w	r3, r3, #15
 8012fa0:	68fa      	ldr	r2, [r7, #12]
 8012fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8012fa6:	01db      	lsls	r3, r3, #7
 8012fa8:	b2db      	uxtb	r3, r3
 8012faa:	693a      	ldr	r2, [r7, #16]
 8012fac:	4313      	orrs	r3, r2
 8012fae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012fb0:	78fb      	ldrb	r3, [r7, #3]
 8012fb2:	015a      	lsls	r2, r3, #5
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fbc:	689b      	ldr	r3, [r3, #8]
 8012fbe:	693a      	ldr	r2, [r7, #16]
 8012fc0:	4013      	ands	r3, r2
 8012fc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012fc4:	68bb      	ldr	r3, [r7, #8]
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	371c      	adds	r7, #28
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd0:	4770      	bx	lr

08012fd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012fd2:	b480      	push	{r7}
 8012fd4:	b083      	sub	sp, #12
 8012fd6:	af00      	add	r7, sp, #0
 8012fd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	695b      	ldr	r3, [r3, #20]
 8012fde:	f003 0301 	and.w	r3, r3, #1
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	370c      	adds	r7, #12
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fec:	4770      	bx	lr
	...

08012ff0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	b085      	sub	sp, #20
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801300a:	4619      	mov	r1, r3
 801300c:	4b09      	ldr	r3, [pc, #36]	; (8013034 <USB_ActivateSetup+0x44>)
 801300e:	4013      	ands	r3, r2
 8013010:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	68fa      	ldr	r2, [r7, #12]
 801301c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013024:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013026:	2300      	movs	r3, #0
}
 8013028:	4618      	mov	r0, r3
 801302a:	3714      	adds	r7, #20
 801302c:	46bd      	mov	sp, r7
 801302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013032:	4770      	bx	lr
 8013034:	fffff800 	.word	0xfffff800

08013038 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013038:	b480      	push	{r7}
 801303a:	b087      	sub	sp, #28
 801303c:	af00      	add	r7, sp, #0
 801303e:	60f8      	str	r0, [r7, #12]
 8013040:	460b      	mov	r3, r1
 8013042:	607a      	str	r2, [r7, #4]
 8013044:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	333c      	adds	r3, #60	; 0x3c
 801304e:	3304      	adds	r3, #4
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	4a26      	ldr	r2, [pc, #152]	; (80130f0 <USB_EP0_OutStart+0xb8>)
 8013058:	4293      	cmp	r3, r2
 801305a:	d90a      	bls.n	8013072 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801306c:	d101      	bne.n	8013072 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801306e:	2300      	movs	r3, #0
 8013070:	e037      	b.n	80130e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013078:	461a      	mov	r2, r3
 801307a:	2300      	movs	r3, #0
 801307c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013084:	691b      	ldr	r3, [r3, #16]
 8013086:	697a      	ldr	r2, [r7, #20]
 8013088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801308c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013090:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013098:	691b      	ldr	r3, [r3, #16]
 801309a:	697a      	ldr	r2, [r7, #20]
 801309c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130a0:	f043 0318 	orr.w	r3, r3, #24
 80130a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130ac:	691b      	ldr	r3, [r3, #16]
 80130ae:	697a      	ldr	r2, [r7, #20]
 80130b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80130b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80130ba:	7afb      	ldrb	r3, [r7, #11]
 80130bc:	2b01      	cmp	r3, #1
 80130be:	d10f      	bne.n	80130e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130c6:	461a      	mov	r2, r3
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	697a      	ldr	r2, [r7, #20]
 80130d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80130de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80130e0:	2300      	movs	r3, #0
}
 80130e2:	4618      	mov	r0, r3
 80130e4:	371c      	adds	r7, #28
 80130e6:	46bd      	mov	sp, r7
 80130e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ec:	4770      	bx	lr
 80130ee:	bf00      	nop
 80130f0:	4f54300a 	.word	0x4f54300a

080130f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80130f4:	b480      	push	{r7}
 80130f6:	b085      	sub	sp, #20
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80130fc:	2300      	movs	r3, #0
 80130fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	3301      	adds	r3, #1
 8013104:	60fb      	str	r3, [r7, #12]
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	4a13      	ldr	r2, [pc, #76]	; (8013158 <USB_CoreReset+0x64>)
 801310a:	4293      	cmp	r3, r2
 801310c:	d901      	bls.n	8013112 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801310e:	2303      	movs	r3, #3
 8013110:	e01b      	b.n	801314a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	691b      	ldr	r3, [r3, #16]
 8013116:	2b00      	cmp	r3, #0
 8013118:	daf2      	bge.n	8013100 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801311a:	2300      	movs	r3, #0
 801311c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	691b      	ldr	r3, [r3, #16]
 8013122:	f043 0201 	orr.w	r2, r3, #1
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	3301      	adds	r3, #1
 801312e:	60fb      	str	r3, [r7, #12]
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	4a09      	ldr	r2, [pc, #36]	; (8013158 <USB_CoreReset+0x64>)
 8013134:	4293      	cmp	r3, r2
 8013136:	d901      	bls.n	801313c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013138:	2303      	movs	r3, #3
 801313a:	e006      	b.n	801314a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	691b      	ldr	r3, [r3, #16]
 8013140:	f003 0301 	and.w	r3, r3, #1
 8013144:	2b01      	cmp	r3, #1
 8013146:	d0f0      	beq.n	801312a <USB_CoreReset+0x36>

  return HAL_OK;
 8013148:	2300      	movs	r3, #0
}
 801314a:	4618      	mov	r0, r3
 801314c:	3714      	adds	r7, #20
 801314e:	46bd      	mov	sp, r7
 8013150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013154:	4770      	bx	lr
 8013156:	bf00      	nop
 8013158:	00030d40 	.word	0x00030d40

0801315c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013160:	4904      	ldr	r1, [pc, #16]	; (8013174 <MX_FATFS_Init+0x18>)
 8013162:	4805      	ldr	r0, [pc, #20]	; (8013178 <MX_FATFS_Init+0x1c>)
 8013164:	f005 fbec 	bl	8018940 <FATFS_LinkDriver>
 8013168:	4603      	mov	r3, r0
 801316a:	461a      	mov	r2, r3
 801316c:	4b03      	ldr	r3, [pc, #12]	; (801317c <MX_FATFS_Init+0x20>)
 801316e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013170:	bf00      	nop
 8013172:	bd80      	pop	{r7, pc}
 8013174:	24001750 	.word	0x24001750
 8013178:	0801aed0 	.word	0x0801aed0
 801317c:	2400174c 	.word	0x2400174c

08013180 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013180:	b480      	push	{r7}
 8013182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013184:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8013186:	4618      	mov	r0, r3
 8013188:	46bd      	mov	sp, r7
 801318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318e:	4770      	bx	lr

08013190 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013196:	2300      	movs	r3, #0
 8013198:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801319a:	f000 f885 	bl	80132a8 <BSP_SD_IsDetected>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	d001      	beq.n	80131a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80131a4:	2302      	movs	r3, #2
 80131a6:	e012      	b.n	80131ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80131a8:	480b      	ldr	r0, [pc, #44]	; (80131d8 <BSP_SD_Init+0x48>)
 80131aa:	f7f9 fc1d 	bl	800c9e8 <HAL_SD_Init>
 80131ae:	4603      	mov	r3, r0
 80131b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80131b2:	79fb      	ldrb	r3, [r7, #7]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d109      	bne.n	80131cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80131b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80131bc:	4806      	ldr	r0, [pc, #24]	; (80131d8 <BSP_SD_Init+0x48>)
 80131be:	f7fa fdf1 	bl	800dda4 <HAL_SD_ConfigWideBusOperation>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d001      	beq.n	80131cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80131c8:	2301      	movs	r3, #1
 80131ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80131cc:	79fb      	ldrb	r3, [r7, #7]
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	3708      	adds	r7, #8
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	24001450 	.word	0x24001450

080131dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b086      	sub	sp, #24
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	60f8      	str	r0, [r7, #12]
 80131e4:	60b9      	str	r1, [r7, #8]
 80131e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80131e8:	2300      	movs	r3, #0
 80131ea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	68ba      	ldr	r2, [r7, #8]
 80131f0:	68f9      	ldr	r1, [r7, #12]
 80131f2:	4806      	ldr	r0, [pc, #24]	; (801320c <BSP_SD_ReadBlocks_DMA+0x30>)
 80131f4:	f7fa f834 	bl	800d260 <HAL_SD_ReadBlocks_DMA>
 80131f8:	4603      	mov	r3, r0
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d001      	beq.n	8013202 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80131fe:	2301      	movs	r3, #1
 8013200:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013202:	7dfb      	ldrb	r3, [r7, #23]
}
 8013204:	4618      	mov	r0, r3
 8013206:	3718      	adds	r7, #24
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}
 801320c:	24001450 	.word	0x24001450

08013210 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b086      	sub	sp, #24
 8013214:	af00      	add	r7, sp, #0
 8013216:	60f8      	str	r0, [r7, #12]
 8013218:	60b9      	str	r1, [r7, #8]
 801321a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801321c:	2300      	movs	r3, #0
 801321e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	68ba      	ldr	r2, [r7, #8]
 8013224:	68f9      	ldr	r1, [r7, #12]
 8013226:	4806      	ldr	r0, [pc, #24]	; (8013240 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013228:	f7fa f8c2 	bl	800d3b0 <HAL_SD_WriteBlocks_DMA>
 801322c:	4603      	mov	r3, r0
 801322e:	2b00      	cmp	r3, #0
 8013230:	d001      	beq.n	8013236 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013232:	2301      	movs	r3, #1
 8013234:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013236:	7dfb      	ldrb	r3, [r7, #23]
}
 8013238:	4618      	mov	r0, r3
 801323a:	3718      	adds	r7, #24
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}
 8013240:	24001450 	.word	0x24001450

08013244 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013248:	4805      	ldr	r0, [pc, #20]	; (8013260 <BSP_SD_GetCardState+0x1c>)
 801324a:	f7fa fe55 	bl	800def8 <HAL_SD_GetCardState>
 801324e:	4603      	mov	r3, r0
 8013250:	2b04      	cmp	r3, #4
 8013252:	bf14      	ite	ne
 8013254:	2301      	movne	r3, #1
 8013256:	2300      	moveq	r3, #0
 8013258:	b2db      	uxtb	r3, r3
}
 801325a:	4618      	mov	r0, r3
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	24001450 	.word	0x24001450

08013264 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b082      	sub	sp, #8
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801326c:	6879      	ldr	r1, [r7, #4]
 801326e:	4803      	ldr	r0, [pc, #12]	; (801327c <BSP_SD_GetCardInfo+0x18>)
 8013270:	f7fa fd6c 	bl	800dd4c <HAL_SD_GetCardInfo>
}
 8013274:	bf00      	nop
 8013276:	3708      	adds	r7, #8
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}
 801327c:	24001450 	.word	0x24001450

08013280 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013288:	f000 f9a0 	bl	80135cc <BSP_SD_WriteCpltCallback>
}
 801328c:	bf00      	nop
 801328e:	3708      	adds	r7, #8
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}

08013294 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b082      	sub	sp, #8
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801329c:	f000 f9a2 	bl	80135e4 <BSP_SD_ReadCpltCallback>
}
 80132a0:	bf00      	nop
 80132a2:	3708      	adds	r7, #8
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80132ae:	2301      	movs	r3, #1
 80132b0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80132b2:	f000 f80b 	bl	80132cc <BSP_PlatformIsDetected>
 80132b6:	4603      	mov	r3, r0
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d101      	bne.n	80132c0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80132bc:	2300      	movs	r3, #0
 80132be:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80132c0:	79fb      	ldrb	r3, [r7, #7]
 80132c2:	b2db      	uxtb	r3, r3
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3708      	adds	r7, #8
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}

080132cc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b082      	sub	sp, #8
 80132d0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80132d2:	2301      	movs	r3, #1
 80132d4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80132d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80132da:	4806      	ldr	r0, [pc, #24]	; (80132f4 <BSP_PlatformIsDetected+0x28>)
 80132dc:	f7f4 fe30 	bl	8007f40 <HAL_GPIO_ReadPin>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d001      	beq.n	80132ea <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80132e6:	2300      	movs	r3, #0
 80132e8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80132ea:	79fb      	ldrb	r3, [r7, #7]
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3708      	adds	r7, #8
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	58020000 	.word	0x58020000

080132f8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b084      	sub	sp, #16
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013300:	f7f1 f910 	bl	8004524 <HAL_GetTick>
 8013304:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013306:	e006      	b.n	8013316 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013308:	f7ff ff9c 	bl	8013244 <BSP_SD_GetCardState>
 801330c:	4603      	mov	r3, r0
 801330e:	2b00      	cmp	r3, #0
 8013310:	d101      	bne.n	8013316 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013312:	2300      	movs	r3, #0
 8013314:	e009      	b.n	801332a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013316:	f7f1 f905 	bl	8004524 <HAL_GetTick>
 801331a:	4602      	mov	r2, r0
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	1ad3      	subs	r3, r2, r3
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	429a      	cmp	r2, r3
 8013324:	d8f0      	bhi.n	8013308 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013326:	f04f 33ff 	mov.w	r3, #4294967295
}
 801332a:	4618      	mov	r0, r3
 801332c:	3710      	adds	r7, #16
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
	...

08013334 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	4603      	mov	r3, r0
 801333c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801333e:	4b0b      	ldr	r3, [pc, #44]	; (801336c <SD_CheckStatus+0x38>)
 8013340:	2201      	movs	r2, #1
 8013342:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013344:	f7ff ff7e 	bl	8013244 <BSP_SD_GetCardState>
 8013348:	4603      	mov	r3, r0
 801334a:	2b00      	cmp	r3, #0
 801334c:	d107      	bne.n	801335e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801334e:	4b07      	ldr	r3, [pc, #28]	; (801336c <SD_CheckStatus+0x38>)
 8013350:	781b      	ldrb	r3, [r3, #0]
 8013352:	b2db      	uxtb	r3, r3
 8013354:	f023 0301 	bic.w	r3, r3, #1
 8013358:	b2da      	uxtb	r2, r3
 801335a:	4b04      	ldr	r3, [pc, #16]	; (801336c <SD_CheckStatus+0x38>)
 801335c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801335e:	4b03      	ldr	r3, [pc, #12]	; (801336c <SD_CheckStatus+0x38>)
 8013360:	781b      	ldrb	r3, [r3, #0]
 8013362:	b2db      	uxtb	r3, r3
}
 8013364:	4618      	mov	r0, r3
 8013366:	3708      	adds	r7, #8
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}
 801336c:	2400001d 	.word	0x2400001d

08013370 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b082      	sub	sp, #8
 8013374:	af00      	add	r7, sp, #0
 8013376:	4603      	mov	r3, r0
 8013378:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801337a:	f7ff ff09 	bl	8013190 <BSP_SD_Init>
 801337e:	4603      	mov	r3, r0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d107      	bne.n	8013394 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013384:	79fb      	ldrb	r3, [r7, #7]
 8013386:	4618      	mov	r0, r3
 8013388:	f7ff ffd4 	bl	8013334 <SD_CheckStatus>
 801338c:	4603      	mov	r3, r0
 801338e:	461a      	mov	r2, r3
 8013390:	4b04      	ldr	r3, [pc, #16]	; (80133a4 <SD_initialize+0x34>)
 8013392:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013394:	4b03      	ldr	r3, [pc, #12]	; (80133a4 <SD_initialize+0x34>)
 8013396:	781b      	ldrb	r3, [r3, #0]
 8013398:	b2db      	uxtb	r3, r3
}
 801339a:	4618      	mov	r0, r3
 801339c:	3708      	adds	r7, #8
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	2400001d 	.word	0x2400001d

080133a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	4603      	mov	r3, r0
 80133b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80133b2:	79fb      	ldrb	r3, [r7, #7]
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7ff ffbd 	bl	8013334 <SD_CheckStatus>
 80133ba:	4603      	mov	r3, r0
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3708      	adds	r7, #8
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b086      	sub	sp, #24
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	60b9      	str	r1, [r7, #8]
 80133cc:	607a      	str	r2, [r7, #4]
 80133ce:	603b      	str	r3, [r7, #0]
 80133d0:	4603      	mov	r3, r0
 80133d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80133d4:	2301      	movs	r3, #1
 80133d6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80133d8:	f247 5030 	movw	r0, #30000	; 0x7530
 80133dc:	f7ff ff8c 	bl	80132f8 <SD_CheckStatusWithTimeout>
 80133e0:	4603      	mov	r3, r0
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	da01      	bge.n	80133ea <SD_read+0x26>
  {
    return res;
 80133e6:	7dfb      	ldrb	r3, [r7, #23]
 80133e8:	e03b      	b.n	8013462 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80133ea:	683a      	ldr	r2, [r7, #0]
 80133ec:	6879      	ldr	r1, [r7, #4]
 80133ee:	68b8      	ldr	r0, [r7, #8]
 80133f0:	f7ff fef4 	bl	80131dc <BSP_SD_ReadBlocks_DMA>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d132      	bne.n	8013460 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80133fa:	4b1c      	ldr	r3, [pc, #112]	; (801346c <SD_read+0xa8>)
 80133fc:	2200      	movs	r2, #0
 80133fe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013400:	f7f1 f890 	bl	8004524 <HAL_GetTick>
 8013404:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013406:	bf00      	nop
 8013408:	4b18      	ldr	r3, [pc, #96]	; (801346c <SD_read+0xa8>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d108      	bne.n	8013422 <SD_read+0x5e>
 8013410:	f7f1 f888 	bl	8004524 <HAL_GetTick>
 8013414:	4602      	mov	r2, r0
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	1ad3      	subs	r3, r2, r3
 801341a:	f247 522f 	movw	r2, #29999	; 0x752f
 801341e:	4293      	cmp	r3, r2
 8013420:	d9f2      	bls.n	8013408 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8013422:	4b12      	ldr	r3, [pc, #72]	; (801346c <SD_read+0xa8>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d102      	bne.n	8013430 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801342a:	2301      	movs	r3, #1
 801342c:	75fb      	strb	r3, [r7, #23]
 801342e:	e017      	b.n	8013460 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013430:	4b0e      	ldr	r3, [pc, #56]	; (801346c <SD_read+0xa8>)
 8013432:	2200      	movs	r2, #0
 8013434:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013436:	f7f1 f875 	bl	8004524 <HAL_GetTick>
 801343a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801343c:	e007      	b.n	801344e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801343e:	f7ff ff01 	bl	8013244 <BSP_SD_GetCardState>
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	d102      	bne.n	801344e <SD_read+0x8a>
          {
            res = RES_OK;
 8013448:	2300      	movs	r3, #0
 801344a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801344c:	e008      	b.n	8013460 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801344e:	f7f1 f869 	bl	8004524 <HAL_GetTick>
 8013452:	4602      	mov	r2, r0
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	1ad3      	subs	r3, r2, r3
 8013458:	f247 522f 	movw	r2, #29999	; 0x752f
 801345c:	4293      	cmp	r3, r2
 801345e:	d9ee      	bls.n	801343e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013460:	7dfb      	ldrb	r3, [r7, #23]
}
 8013462:	4618      	mov	r0, r3
 8013464:	3718      	adds	r7, #24
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
 801346a:	bf00      	nop
 801346c:	24000b54 	.word	0x24000b54

08013470 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b086      	sub	sp, #24
 8013474:	af00      	add	r7, sp, #0
 8013476:	60b9      	str	r1, [r7, #8]
 8013478:	607a      	str	r2, [r7, #4]
 801347a:	603b      	str	r3, [r7, #0]
 801347c:	4603      	mov	r3, r0
 801347e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013480:	2301      	movs	r3, #1
 8013482:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8013484:	4b24      	ldr	r3, [pc, #144]	; (8013518 <SD_write+0xa8>)
 8013486:	2200      	movs	r2, #0
 8013488:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801348a:	f247 5030 	movw	r0, #30000	; 0x7530
 801348e:	f7ff ff33 	bl	80132f8 <SD_CheckStatusWithTimeout>
 8013492:	4603      	mov	r3, r0
 8013494:	2b00      	cmp	r3, #0
 8013496:	da01      	bge.n	801349c <SD_write+0x2c>
  {
    return res;
 8013498:	7dfb      	ldrb	r3, [r7, #23]
 801349a:	e038      	b.n	801350e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801349c:	683a      	ldr	r2, [r7, #0]
 801349e:	6879      	ldr	r1, [r7, #4]
 80134a0:	68b8      	ldr	r0, [r7, #8]
 80134a2:	f7ff feb5 	bl	8013210 <BSP_SD_WriteBlocks_DMA>
 80134a6:	4603      	mov	r3, r0
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d12f      	bne.n	801350c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80134ac:	f7f1 f83a 	bl	8004524 <HAL_GetTick>
 80134b0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80134b2:	bf00      	nop
 80134b4:	4b18      	ldr	r3, [pc, #96]	; (8013518 <SD_write+0xa8>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d108      	bne.n	80134ce <SD_write+0x5e>
 80134bc:	f7f1 f832 	bl	8004524 <HAL_GetTick>
 80134c0:	4602      	mov	r2, r0
 80134c2:	693b      	ldr	r3, [r7, #16]
 80134c4:	1ad3      	subs	r3, r2, r3
 80134c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80134ca:	4293      	cmp	r3, r2
 80134cc:	d9f2      	bls.n	80134b4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80134ce:	4b12      	ldr	r3, [pc, #72]	; (8013518 <SD_write+0xa8>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d102      	bne.n	80134dc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80134d6:	2301      	movs	r3, #1
 80134d8:	75fb      	strb	r3, [r7, #23]
 80134da:	e017      	b.n	801350c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80134dc:	4b0e      	ldr	r3, [pc, #56]	; (8013518 <SD_write+0xa8>)
 80134de:	2200      	movs	r2, #0
 80134e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80134e2:	f7f1 f81f 	bl	8004524 <HAL_GetTick>
 80134e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80134e8:	e007      	b.n	80134fa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80134ea:	f7ff feab 	bl	8013244 <BSP_SD_GetCardState>
 80134ee:	4603      	mov	r3, r0
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d102      	bne.n	80134fa <SD_write+0x8a>
          {
            res = RES_OK;
 80134f4:	2300      	movs	r3, #0
 80134f6:	75fb      	strb	r3, [r7, #23]
            break;
 80134f8:	e008      	b.n	801350c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80134fa:	f7f1 f813 	bl	8004524 <HAL_GetTick>
 80134fe:	4602      	mov	r2, r0
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	1ad3      	subs	r3, r2, r3
 8013504:	f247 522f 	movw	r2, #29999	; 0x752f
 8013508:	4293      	cmp	r3, r2
 801350a:	d9ee      	bls.n	80134ea <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801350c:	7dfb      	ldrb	r3, [r7, #23]
}
 801350e:	4618      	mov	r0, r3
 8013510:	3718      	adds	r7, #24
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}
 8013516:	bf00      	nop
 8013518:	24000b50 	.word	0x24000b50

0801351c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b08c      	sub	sp, #48	; 0x30
 8013520:	af00      	add	r7, sp, #0
 8013522:	4603      	mov	r3, r0
 8013524:	603a      	str	r2, [r7, #0]
 8013526:	71fb      	strb	r3, [r7, #7]
 8013528:	460b      	mov	r3, r1
 801352a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801352c:	2301      	movs	r3, #1
 801352e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013532:	4b25      	ldr	r3, [pc, #148]	; (80135c8 <SD_ioctl+0xac>)
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	b2db      	uxtb	r3, r3
 8013538:	f003 0301 	and.w	r3, r3, #1
 801353c:	2b00      	cmp	r3, #0
 801353e:	d001      	beq.n	8013544 <SD_ioctl+0x28>
 8013540:	2303      	movs	r3, #3
 8013542:	e03c      	b.n	80135be <SD_ioctl+0xa2>

  switch (cmd)
 8013544:	79bb      	ldrb	r3, [r7, #6]
 8013546:	2b03      	cmp	r3, #3
 8013548:	d834      	bhi.n	80135b4 <SD_ioctl+0x98>
 801354a:	a201      	add	r2, pc, #4	; (adr r2, 8013550 <SD_ioctl+0x34>)
 801354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013550:	08013561 	.word	0x08013561
 8013554:	08013569 	.word	0x08013569
 8013558:	08013581 	.word	0x08013581
 801355c:	0801359b 	.word	0x0801359b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013560:	2300      	movs	r3, #0
 8013562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013566:	e028      	b.n	80135ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013568:	f107 0308 	add.w	r3, r7, #8
 801356c:	4618      	mov	r0, r3
 801356e:	f7ff fe79 	bl	8013264 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013572:	6a3a      	ldr	r2, [r7, #32]
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013578:	2300      	movs	r3, #0
 801357a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801357e:	e01c      	b.n	80135ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013580:	f107 0308 	add.w	r3, r7, #8
 8013584:	4618      	mov	r0, r3
 8013586:	f7ff fe6d 	bl	8013264 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801358c:	b29a      	uxth	r2, r3
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013592:	2300      	movs	r3, #0
 8013594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013598:	e00f      	b.n	80135ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801359a:	f107 0308 	add.w	r3, r7, #8
 801359e:	4618      	mov	r0, r3
 80135a0:	f7ff fe60 	bl	8013264 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80135a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a6:	0a5a      	lsrs	r2, r3, #9
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80135ac:	2300      	movs	r3, #0
 80135ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80135b2:	e002      	b.n	80135ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80135b4:	2304      	movs	r3, #4
 80135b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80135ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80135be:	4618      	mov	r0, r3
 80135c0:	3730      	adds	r7, #48	; 0x30
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd80      	pop	{r7, pc}
 80135c6:	bf00      	nop
 80135c8:	2400001d 	.word	0x2400001d

080135cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80135cc:	b480      	push	{r7}
 80135ce:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80135d0:	4b03      	ldr	r3, [pc, #12]	; (80135e0 <BSP_SD_WriteCpltCallback+0x14>)
 80135d2:	2201      	movs	r2, #1
 80135d4:	601a      	str	r2, [r3, #0]
}
 80135d6:	bf00      	nop
 80135d8:	46bd      	mov	sp, r7
 80135da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135de:	4770      	bx	lr
 80135e0:	24000b50 	.word	0x24000b50

080135e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80135e4:	b480      	push	{r7}
 80135e6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80135e8:	4b03      	ldr	r3, [pc, #12]	; (80135f8 <BSP_SD_ReadCpltCallback+0x14>)
 80135ea:	2201      	movs	r2, #1
 80135ec:	601a      	str	r2, [r3, #0]
}
 80135ee:	bf00      	nop
 80135f0:	46bd      	mov	sp, r7
 80135f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f6:	4770      	bx	lr
 80135f8:	24000b54 	.word	0x24000b54

080135fc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b084      	sub	sp, #16
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	460b      	mov	r3, r1
 8013606:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8013608:	f248 0074 	movw	r0, #32884	; 0x8074
 801360c:	f005 fed0 	bl	80193b0 <malloc>
 8013610:	4603      	mov	r3, r0
 8013612:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d105      	bne.n	8013626 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2200      	movs	r2, #0
 801361e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013622:	2302      	movs	r3, #2
 8013624:	e034      	b.n	8013690 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	68fa      	ldr	r2, [r7, #12]
 801362a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	7c1b      	ldrb	r3, [r3, #16]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d115      	bne.n	8013662 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013636:	f44f 7300 	mov.w	r3, #512	; 0x200
 801363a:	2202      	movs	r2, #2
 801363c:	2101      	movs	r1, #1
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f005 fd1d 	bl	801907e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2201      	movs	r2, #1
 8013648:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801364c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013650:	2202      	movs	r2, #2
 8013652:	2181      	movs	r1, #129	; 0x81
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f005 fd12 	bl	801907e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	2201      	movs	r2, #1
 801365e:	871a      	strh	r2, [r3, #56]	; 0x38
 8013660:	e012      	b.n	8013688 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013662:	2340      	movs	r3, #64	; 0x40
 8013664:	2202      	movs	r2, #2
 8013666:	2101      	movs	r1, #1
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f005 fd08 	bl	801907e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2201      	movs	r2, #1
 8013672:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013676:	2340      	movs	r3, #64	; 0x40
 8013678:	2202      	movs	r2, #2
 801367a:	2181      	movs	r1, #129	; 0x81
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f005 fcfe 	bl	801907e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2201      	movs	r2, #1
 8013686:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f000 f98e 	bl	80139aa <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801368e:	2300      	movs	r3, #0
}
 8013690:	4618      	mov	r0, r3
 8013692:	3710      	adds	r7, #16
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}

08013698 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	460b      	mov	r3, r1
 80136a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80136a4:	2101      	movs	r1, #1
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f005 fd0f 	bl	80190ca <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2200      	movs	r2, #0
 80136b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80136b4:	2181      	movs	r1, #129	; 0x81
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f005 fd07 	bl	80190ca <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2200      	movs	r2, #0
 80136c0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f000 f9cf 	bl	8013a66 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d009      	beq.n	80136e6 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136d8:	4618      	mov	r0, r3
 80136da:	f005 fe71 	bl	80193c0 <free>
    pdev->pClassData = NULL;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	2200      	movs	r2, #0
 80136e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80136e6:	2300      	movs	r3, #0
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3708      	adds	r7, #8
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}

080136f0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b086      	sub	sp, #24
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
 80136f8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013700:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013702:	2300      	movs	r3, #0
 8013704:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8013706:	2300      	movs	r3, #0
 8013708:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013712:	2b00      	cmp	r3, #0
 8013714:	d04d      	beq.n	80137b2 <USBD_MSC_Setup+0xc2>
 8013716:	2b20      	cmp	r3, #32
 8013718:	f040 80c6 	bne.w	80138a8 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	785b      	ldrb	r3, [r3, #1]
 8013720:	2bfe      	cmp	r3, #254	; 0xfe
 8013722:	d002      	beq.n	801372a <USBD_MSC_Setup+0x3a>
 8013724:	2bff      	cmp	r3, #255	; 0xff
 8013726:	d024      	beq.n	8013772 <USBD_MSC_Setup+0x82>
 8013728:	e03b      	b.n	80137a2 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	885b      	ldrh	r3, [r3, #2]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d118      	bne.n	8013764 <USBD_MSC_Setup+0x74>
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	88db      	ldrh	r3, [r3, #6]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d114      	bne.n	8013764 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	781b      	ldrb	r3, [r3, #0]
 801373e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013740:	2b00      	cmp	r3, #0
 8013742:	da0f      	bge.n	8013764 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801374a:	699b      	ldr	r3, [r3, #24]
 801374c:	4798      	blx	r3
 801374e:	4603      	mov	r3, r0
 8013750:	461a      	mov	r2, r3
 8013752:	693b      	ldr	r3, [r7, #16]
 8013754:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	2201      	movs	r2, #1
 801375a:	4619      	mov	r1, r3
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f002 fdaa 	bl	80162b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013762:	e025      	b.n	80137b0 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8013764:	6839      	ldr	r1, [r7, #0]
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f002 fd34 	bl	80161d4 <USBD_CtlError>
        ret = USBD_FAIL;
 801376c:	2303      	movs	r3, #3
 801376e:	75fb      	strb	r3, [r7, #23]
      break;
 8013770:	e01e      	b.n	80137b0 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	885b      	ldrh	r3, [r3, #2]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d10c      	bne.n	8013794 <USBD_MSC_Setup+0xa4>
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	88db      	ldrh	r3, [r3, #6]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d108      	bne.n	8013794 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	781b      	ldrb	r3, [r3, #0]
 8013786:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013788:	2b00      	cmp	r3, #0
 801378a:	db03      	blt.n	8013794 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f000 f947 	bl	8013a20 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013792:	e00d      	b.n	80137b0 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8013794:	6839      	ldr	r1, [r7, #0]
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f002 fd1c 	bl	80161d4 <USBD_CtlError>
        ret = USBD_FAIL;
 801379c:	2303      	movs	r3, #3
 801379e:	75fb      	strb	r3, [r7, #23]
      break;
 80137a0:	e006      	b.n	80137b0 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 80137a2:	6839      	ldr	r1, [r7, #0]
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f002 fd15 	bl	80161d4 <USBD_CtlError>
      ret = USBD_FAIL;
 80137aa:	2303      	movs	r3, #3
 80137ac:	75fb      	strb	r3, [r7, #23]
      break;
 80137ae:	bf00      	nop
    }
    break;
 80137b0:	e081      	b.n	80138b6 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	785b      	ldrb	r3, [r3, #1]
 80137b6:	2b0b      	cmp	r3, #11
 80137b8:	d86d      	bhi.n	8013896 <USBD_MSC_Setup+0x1a6>
 80137ba:	a201      	add	r2, pc, #4	; (adr r2, 80137c0 <USBD_MSC_Setup+0xd0>)
 80137bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137c0:	080137f1 	.word	0x080137f1
 80137c4:	08013867 	.word	0x08013867
 80137c8:	08013897 	.word	0x08013897
 80137cc:	08013897 	.word	0x08013897
 80137d0:	08013897 	.word	0x08013897
 80137d4:	08013897 	.word	0x08013897
 80137d8:	08013897 	.word	0x08013897
 80137dc:	08013897 	.word	0x08013897
 80137e0:	08013897 	.word	0x08013897
 80137e4:	08013897 	.word	0x08013897
 80137e8:	08013819 	.word	0x08013819
 80137ec:	08013841 	.word	0x08013841
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137f6:	2b03      	cmp	r3, #3
 80137f8:	d107      	bne.n	801380a <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80137fa:	f107 030e 	add.w	r3, r7, #14
 80137fe:	2202      	movs	r2, #2
 8013800:	4619      	mov	r1, r3
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f002 fd57 	bl	80162b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013808:	e04d      	b.n	80138a6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801380a:	6839      	ldr	r1, [r7, #0]
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f002 fce1 	bl	80161d4 <USBD_CtlError>
        ret = USBD_FAIL;
 8013812:	2303      	movs	r3, #3
 8013814:	75fb      	strb	r3, [r7, #23]
      break;
 8013816:	e046      	b.n	80138a6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801381e:	2b03      	cmp	r3, #3
 8013820:	d107      	bne.n	8013832 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	3304      	adds	r3, #4
 8013826:	2201      	movs	r2, #1
 8013828:	4619      	mov	r1, r3
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f002 fd43 	bl	80162b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013830:	e039      	b.n	80138a6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8013832:	6839      	ldr	r1, [r7, #0]
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f002 fccd 	bl	80161d4 <USBD_CtlError>
        ret = USBD_FAIL;
 801383a:	2303      	movs	r3, #3
 801383c:	75fb      	strb	r3, [r7, #23]
      break;
 801383e:	e032      	b.n	80138a6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013846:	2b03      	cmp	r3, #3
 8013848:	d106      	bne.n	8013858 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	885b      	ldrh	r3, [r3, #2]
 801384e:	b2db      	uxtb	r3, r3
 8013850:	461a      	mov	r2, r3
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013856:	e026      	b.n	80138a6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8013858:	6839      	ldr	r1, [r7, #0]
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f002 fcba 	bl	80161d4 <USBD_CtlError>
        ret = USBD_FAIL;
 8013860:	2303      	movs	r3, #3
 8013862:	75fb      	strb	r3, [r7, #23]
      break;
 8013864:	e01f      	b.n	80138a6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801386c:	2b03      	cmp	r3, #3
 801386e:	d119      	bne.n	80138a4 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	885b      	ldrh	r3, [r3, #2]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d115      	bne.n	80138a4 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	889b      	ldrh	r3, [r3, #4]
 801387c:	b2db      	uxtb	r3, r3
 801387e:	4619      	mov	r1, r3
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f005 fc41 	bl	8019108 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	889b      	ldrh	r3, [r3, #4]
 801388a:	b2db      	uxtb	r3, r3
 801388c:	4619      	mov	r1, r3
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f000 fa90 	bl	8013db4 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8013894:	e006      	b.n	80138a4 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8013896:	6839      	ldr	r1, [r7, #0]
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f002 fc9b 	bl	80161d4 <USBD_CtlError>
      ret = USBD_FAIL;
 801389e:	2303      	movs	r3, #3
 80138a0:	75fb      	strb	r3, [r7, #23]
      break;
 80138a2:	e000      	b.n	80138a6 <USBD_MSC_Setup+0x1b6>
      break;
 80138a4:	bf00      	nop
    }
    break;
 80138a6:	e006      	b.n	80138b6 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 80138a8:	6839      	ldr	r1, [r7, #0]
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f002 fc92 	bl	80161d4 <USBD_CtlError>
    ret = USBD_FAIL;
 80138b0:	2303      	movs	r3, #3
 80138b2:	75fb      	strb	r3, [r7, #23]
    break;
 80138b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80138b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3718      	adds	r7, #24
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b082      	sub	sp, #8
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	460b      	mov	r3, r1
 80138ca:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80138cc:	78fb      	ldrb	r3, [r7, #3]
 80138ce:	4619      	mov	r1, r3
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f000 f8d9 	bl	8013a88 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80138d6:	2300      	movs	r3, #0
}
 80138d8:	4618      	mov	r0, r3
 80138da:	3708      	adds	r7, #8
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}

080138e0 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
 80138e8:	460b      	mov	r3, r1
 80138ea:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80138ec:	78fb      	ldrb	r3, [r7, #3]
 80138ee:	4619      	mov	r1, r3
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f000 f8fd 	bl	8013af0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80138f6:	2300      	movs	r3, #0
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3708      	adds	r7, #8
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013900:	b480      	push	{r7}
 8013902:	b083      	sub	sp, #12
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2220      	movs	r2, #32
 801390c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801390e:	4b03      	ldr	r3, [pc, #12]	; (801391c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8013910:	4618      	mov	r0, r3
 8013912:	370c      	adds	r7, #12
 8013914:	46bd      	mov	sp, r7
 8013916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391a:	4770      	bx	lr
 801391c:	24000058 	.word	0x24000058

08013920 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8013920:	b480      	push	{r7}
 8013922:	b083      	sub	sp, #12
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2220      	movs	r2, #32
 801392c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801392e:	4b03      	ldr	r3, [pc, #12]	; (801393c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8013930:	4618      	mov	r0, r3
 8013932:	370c      	adds	r7, #12
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr
 801393c:	24000078 	.word	0x24000078

08013940 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013940:	b480      	push	{r7}
 8013942:	b083      	sub	sp, #12
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2220      	movs	r2, #32
 801394c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801394e:	4b03      	ldr	r3, [pc, #12]	; (801395c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013950:	4618      	mov	r0, r3
 8013952:	370c      	adds	r7, #12
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr
 801395c:	24000098 	.word	0x24000098

08013960 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013960:	b480      	push	{r7}
 8013962:	b083      	sub	sp, #12
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	220a      	movs	r2, #10
 801396c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801396e:	4b03      	ldr	r3, [pc, #12]	; (801397c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013970:	4618      	mov	r0, r3
 8013972:	370c      	adds	r7, #12
 8013974:	46bd      	mov	sp, r7
 8013976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397a:	4770      	bx	lr
 801397c:	240000b8 	.word	0x240000b8

08013980 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8013980:	b480      	push	{r7}
 8013982:	b083      	sub	sp, #12
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d101      	bne.n	8013994 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013990:	2303      	movs	r3, #3
 8013992:	e004      	b.n	801399e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	683a      	ldr	r2, [r7, #0]
 8013998:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801399c:	2300      	movs	r3, #0
}
 801399e:	4618      	mov	r0, r3
 80139a0:	370c      	adds	r7, #12
 80139a2:	46bd      	mov	sp, r7
 80139a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a8:	4770      	bx	lr

080139aa <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80139aa:	b580      	push	{r7, lr}
 80139ac:	b084      	sub	sp, #16
 80139ae:	af00      	add	r7, sp, #0
 80139b0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139b8:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	2200      	movs	r2, #0
 80139be:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	2200      	movs	r2, #0
 80139c4:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80139c6:	68fa      	ldr	r2, [r7, #12]
 80139c8:	f248 0361 	movw	r3, #32865	; 0x8061
 80139cc:	4413      	add	r3, r2
 80139ce:	2200      	movs	r2, #0
 80139d0:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 80139d2:	68fa      	ldr	r2, [r7, #12]
 80139d4:	f248 0360 	movw	r3, #32864	; 0x8060
 80139d8:	4413      	add	r3, r2
 80139da:	2200      	movs	r2, #0
 80139dc:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80139de:	68fa      	ldr	r2, [r7, #12]
 80139e0:	f248 0362 	movw	r3, #32866	; 0x8062
 80139e4:	4413      	add	r3, r2
 80139e6:	2200      	movs	r2, #0
 80139e8:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	2000      	movs	r0, #0
 80139f4:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80139f6:	2101      	movs	r1, #1
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f005 fb85 	bl	8019108 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80139fe:	2181      	movs	r1, #129	; 0x81
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f005 fb81 	bl	8019108 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	f248 0210 	movw	r2, #32784	; 0x8010
 8013a0c:	441a      	add	r2, r3
 8013a0e:	231f      	movs	r3, #31
 8013a10:	2101      	movs	r1, #1
 8013a12:	6878      	ldr	r0, [r7, #4]
 8013a14:	f005 fc41 	bl	801929a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013a18:	bf00      	nop
 8013a1a:	3710      	adds	r7, #16
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd80      	pop	{r7, pc}

08013a20 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b084      	sub	sp, #16
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a2e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2200      	movs	r2, #0
 8013a34:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	2201      	movs	r2, #1
 8013a3a:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8013a3c:	2181      	movs	r1, #129	; 0x81
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	f005 fba0 	bl	8019184 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8013a44:	2101      	movs	r1, #1
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f005 fb9c 	bl	8019184 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	f248 0210 	movw	r2, #32784	; 0x8010
 8013a52:	441a      	add	r2, r3
 8013a54:	231f      	movs	r3, #31
 8013a56:	2101      	movs	r1, #1
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f005 fc1e 	bl	801929a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013a5e:	bf00      	nop
 8013a60:	3710      	adds	r7, #16
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}

08013a66 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8013a66:	b480      	push	{r7}
 8013a68:	b085      	sub	sp, #20
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a74:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	721a      	strb	r2, [r3, #8]
}
 8013a7c:	bf00      	nop
 8013a7e:	3714      	adds	r7, #20
 8013a80:	46bd      	mov	sp, r7
 8013a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a86:	4770      	bx	lr

08013a88 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b084      	sub	sp, #16
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	460b      	mov	r3, r1
 8013a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a9a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	7a1b      	ldrb	r3, [r3, #8]
 8013aa0:	2b02      	cmp	r3, #2
 8013aa2:	d004      	beq.n	8013aae <MSC_BOT_DataIn+0x26>
 8013aa4:	2b02      	cmp	r3, #2
 8013aa6:	db1c      	blt.n	8013ae2 <MSC_BOT_DataIn+0x5a>
 8013aa8:	2b04      	cmp	r3, #4
 8013aaa:	dc1a      	bgt.n	8013ae2 <MSC_BOT_DataIn+0x5a>
 8013aac:	e014      	b.n	8013ad8 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013aae:	68fa      	ldr	r2, [r7, #12]
 8013ab0:	f248 031d 	movw	r3, #32797	; 0x801d
 8013ab4:	4413      	add	r3, r2
 8013ab6:	7819      	ldrb	r1, [r3, #0]
 8013ab8:	68fa      	ldr	r2, [r7, #12]
 8013aba:	f248 031f 	movw	r3, #32799	; 0x801f
 8013abe:	4413      	add	r3, r2
 8013ac0:	461a      	mov	r2, r3
 8013ac2:	6878      	ldr	r0, [r7, #4]
 8013ac4:	f000 f99e 	bl	8013e04 <SCSI_ProcessCmd>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	da0b      	bge.n	8013ae6 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013ace:	2101      	movs	r1, #1
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f000 f90b 	bl	8013cec <MSC_BOT_SendCSW>
    }
    break;
 8013ad6:	e006      	b.n	8013ae6 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013ad8:	2100      	movs	r1, #0
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f000 f906 	bl	8013cec <MSC_BOT_SendCSW>
    break;
 8013ae0:	e002      	b.n	8013ae8 <MSC_BOT_DataIn+0x60>

  default:
    break;
 8013ae2:	bf00      	nop
 8013ae4:	e000      	b.n	8013ae8 <MSC_BOT_DataIn+0x60>
    break;
 8013ae6:	bf00      	nop
  }
}
 8013ae8:	bf00      	nop
 8013aea:	3710      	adds	r7, #16
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}

08013af0 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b084      	sub	sp, #16
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	460b      	mov	r3, r1
 8013afa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b02:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	7a1b      	ldrb	r3, [r3, #8]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d002      	beq.n	8013b12 <MSC_BOT_DataOut+0x22>
 8013b0c:	2b01      	cmp	r3, #1
 8013b0e:	d004      	beq.n	8013b1a <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013b10:	e018      	b.n	8013b44 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8013b12:	6878      	ldr	r0, [r7, #4]
 8013b14:	f000 f81a 	bl	8013b4c <MSC_BOT_CBW_Decode>
      break;
 8013b18:	e014      	b.n	8013b44 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013b1a:	68fa      	ldr	r2, [r7, #12]
 8013b1c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b20:	4413      	add	r3, r2
 8013b22:	7819      	ldrb	r1, [r3, #0]
 8013b24:	68fa      	ldr	r2, [r7, #12]
 8013b26:	f248 031f 	movw	r3, #32799	; 0x801f
 8013b2a:	4413      	add	r3, r2
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	f000 f968 	bl	8013e04 <SCSI_ProcessCmd>
 8013b34:	4603      	mov	r3, r0
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	da03      	bge.n	8013b42 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013b3a:	2101      	movs	r1, #1
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f000 f8d5 	bl	8013cec <MSC_BOT_SendCSW>
      break;
 8013b42:	bf00      	nop
  }
}
 8013b44:	bf00      	nop
 8013b46:	3710      	adds	r7, #16
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}

08013b4c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b084      	sub	sp, #16
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b5a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8013b5c:	68fa      	ldr	r2, [r7, #12]
 8013b5e:	f248 0314 	movw	r3, #32788	; 0x8014
 8013b62:	4413      	add	r3, r2
 8013b64:	681a      	ldr	r2, [r3, #0]
 8013b66:	68f9      	ldr	r1, [r7, #12]
 8013b68:	f248 0334 	movw	r3, #32820	; 0x8034
 8013b6c:	440b      	add	r3, r1
 8013b6e:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8013b70:	68fa      	ldr	r2, [r7, #12]
 8013b72:	f248 0318 	movw	r3, #32792	; 0x8018
 8013b76:	4413      	add	r3, r2
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	68f9      	ldr	r1, [r7, #12]
 8013b7c:	f248 0338 	movw	r3, #32824	; 0x8038
 8013b80:	440b      	add	r3, r1
 8013b82:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013b84:	2101      	movs	r1, #1
 8013b86:	6878      	ldr	r0, [r7, #4]
 8013b88:	f005 fba8 	bl	80192dc <USBD_LL_GetRxDataSize>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	2b1f      	cmp	r3, #31
 8013b90:	d11c      	bne.n	8013bcc <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013b92:	68fa      	ldr	r2, [r7, #12]
 8013b94:	f248 0310 	movw	r3, #32784	; 0x8010
 8013b98:	4413      	add	r3, r2
 8013b9a:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013b9c:	4a38      	ldr	r2, [pc, #224]	; (8013c80 <MSC_BOT_CBW_Decode+0x134>)
 8013b9e:	4293      	cmp	r3, r2
 8013ba0:	d114      	bne.n	8013bcc <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013ba2:	68fa      	ldr	r2, [r7, #12]
 8013ba4:	f248 031d 	movw	r3, #32797	; 0x801d
 8013ba8:	4413      	add	r3, r2
 8013baa:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013bac:	2b01      	cmp	r3, #1
 8013bae:	d80d      	bhi.n	8013bcc <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013bb0:	68fa      	ldr	r2, [r7, #12]
 8013bb2:	f248 031e 	movw	r3, #32798	; 0x801e
 8013bb6:	4413      	add	r3, r2
 8013bb8:	781b      	ldrb	r3, [r3, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d006      	beq.n	8013bcc <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8013bbe:	68fa      	ldr	r2, [r7, #12]
 8013bc0:	f248 031e 	movw	r3, #32798	; 0x801e
 8013bc4:	4413      	add	r3, r2
 8013bc6:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013bc8:	2b10      	cmp	r3, #16
 8013bca:	d910      	bls.n	8013bee <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013bcc:	68fa      	ldr	r2, [r7, #12]
 8013bce:	f248 031d 	movw	r3, #32797	; 0x801d
 8013bd2:	4413      	add	r3, r2
 8013bd4:	7819      	ldrb	r1, [r3, #0]
 8013bd6:	2320      	movs	r3, #32
 8013bd8:	2205      	movs	r2, #5
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f000 fd36 	bl	801464c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	2202      	movs	r2, #2
 8013be4:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f000 f8b2 	bl	8013d50 <MSC_BOT_Abort>
 8013bec:	e044      	b.n	8013c78 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013bee:	68fa      	ldr	r2, [r7, #12]
 8013bf0:	f248 031d 	movw	r3, #32797	; 0x801d
 8013bf4:	4413      	add	r3, r2
 8013bf6:	7819      	ldrb	r1, [r3, #0]
 8013bf8:	68fa      	ldr	r2, [r7, #12]
 8013bfa:	f248 031f 	movw	r3, #32799	; 0x801f
 8013bfe:	4413      	add	r3, r2
 8013c00:	461a      	mov	r2, r3
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f000 f8fe 	bl	8013e04 <SCSI_ProcessCmd>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	da0c      	bge.n	8013c28 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	7a1b      	ldrb	r3, [r3, #8]
 8013c12:	2b05      	cmp	r3, #5
 8013c14:	d104      	bne.n	8013c20 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013c16:	2101      	movs	r1, #1
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f000 f867 	bl	8013cec <MSC_BOT_SendCSW>
 8013c1e:	e02b      	b.n	8013c78 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f000 f895 	bl	8013d50 <MSC_BOT_Abort>
 8013c26:	e027      	b.n	8013c78 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	7a1b      	ldrb	r3, [r3, #8]
 8013c2c:	2b02      	cmp	r3, #2
 8013c2e:	d022      	beq.n	8013c76 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013c34:	2b01      	cmp	r3, #1
 8013c36:	d01e      	beq.n	8013c76 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013c3c:	2b03      	cmp	r3, #3
 8013c3e:	d01a      	beq.n	8013c76 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	68db      	ldr	r3, [r3, #12]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d009      	beq.n	8013c5c <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f103 0110 	add.w	r1, r3, #16
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	68db      	ldr	r3, [r3, #12]
 8013c52:	461a      	mov	r2, r3
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f000 f815 	bl	8013c84 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013c5a:	e00d      	b.n	8013c78 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	68db      	ldr	r3, [r3, #12]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d104      	bne.n	8013c6e <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013c64:	2100      	movs	r1, #0
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f000 f840 	bl	8013cec <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013c6c:	e004      	b.n	8013c78 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f000 f86e 	bl	8013d50 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013c74:	e000      	b.n	8013c78 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8013c76:	bf00      	nop
    }
  }
}
 8013c78:	3710      	adds	r7, #16
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}
 8013c7e:	bf00      	nop
 8013c80:	43425355 	.word	0x43425355

08013c84 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b086      	sub	sp, #24
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	60f8      	str	r0, [r7, #12]
 8013c8c:	60b9      	str	r1, [r7, #8]
 8013c8e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c96:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8013c98:	697a      	ldr	r2, [r7, #20]
 8013c9a:	f248 0318 	movw	r3, #32792	; 0x8018
 8013c9e:	4413      	add	r3, r2
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	687a      	ldr	r2, [r7, #4]
 8013ca4:	4293      	cmp	r3, r2
 8013ca6:	bf28      	it	cs
 8013ca8:	4613      	movcs	r3, r2
 8013caa:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013cac:	697a      	ldr	r2, [r7, #20]
 8013cae:	f248 0338 	movw	r3, #32824	; 0x8038
 8013cb2:	4413      	add	r3, r2
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	1ad2      	subs	r2, r2, r3
 8013cba:	6979      	ldr	r1, [r7, #20]
 8013cbc:	f248 0338 	movw	r3, #32824	; 0x8038
 8013cc0:	440b      	add	r3, r1
 8013cc2:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013cc4:	697a      	ldr	r2, [r7, #20]
 8013cc6:	f248 033c 	movw	r3, #32828	; 0x803c
 8013cca:	4413      	add	r3, r2
 8013ccc:	2200      	movs	r2, #0
 8013cce:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	2204      	movs	r2, #4
 8013cd4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8013cd6:	693b      	ldr	r3, [r7, #16]
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	2181      	movs	r1, #129	; 0x81
 8013cdc:	68f8      	ldr	r0, [r7, #12]
 8013cde:	f005 fabb 	bl	8019258 <USBD_LL_Transmit>
}
 8013ce2:	bf00      	nop
 8013ce4:	3718      	adds	r7, #24
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
	...

08013cec <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	460b      	mov	r3, r1
 8013cf6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013cfe:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013d00:	68fa      	ldr	r2, [r7, #12]
 8013d02:	f248 0330 	movw	r3, #32816	; 0x8030
 8013d06:	4413      	add	r3, r2
 8013d08:	4a10      	ldr	r2, [pc, #64]	; (8013d4c <MSC_BOT_SendCSW+0x60>)
 8013d0a:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8013d0c:	68fa      	ldr	r2, [r7, #12]
 8013d0e:	f248 033c 	movw	r3, #32828	; 0x803c
 8013d12:	4413      	add	r3, r2
 8013d14:	78fa      	ldrb	r2, [r7, #3]
 8013d16:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	f248 0230 	movw	r2, #32816	; 0x8030
 8013d24:	441a      	add	r2, r3
 8013d26:	230d      	movs	r3, #13
 8013d28:	2181      	movs	r1, #129	; 0x81
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f005 fa94 	bl	8019258 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	f248 0210 	movw	r2, #32784	; 0x8010
 8013d36:	441a      	add	r2, r3
 8013d38:	231f      	movs	r3, #31
 8013d3a:	2101      	movs	r1, #1
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f005 faac 	bl	801929a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013d42:	bf00      	nop
 8013d44:	3710      	adds	r7, #16
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	53425355 	.word	0x53425355

08013d50 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b084      	sub	sp, #16
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d5e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013d60:	68fa      	ldr	r2, [r7, #12]
 8013d62:	f248 031c 	movw	r3, #32796	; 0x801c
 8013d66:	4413      	add	r3, r2
 8013d68:	781b      	ldrb	r3, [r3, #0]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d10e      	bne.n	8013d8c <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8013d6e:	68fa      	ldr	r2, [r7, #12]
 8013d70:	f248 0318 	movw	r3, #32792	; 0x8018
 8013d74:	4413      	add	r3, r2
 8013d76:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d007      	beq.n	8013d8c <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d103      	bne.n	8013d8c <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013d84:	2101      	movs	r1, #1
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f005 f9dd 	bl	8019146 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013d8c:	2181      	movs	r1, #129	; 0x81
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f005 f9d9 	bl	8019146 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	7a5b      	ldrb	r3, [r3, #9]
 8013d98:	2b02      	cmp	r3, #2
 8013d9a:	d107      	bne.n	8013dac <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013d9c:	2181      	movs	r1, #129	; 0x81
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f005 f9d1 	bl	8019146 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013da4:	2101      	movs	r1, #1
 8013da6:	6878      	ldr	r0, [r7, #4]
 8013da8:	f005 f9cd 	bl	8019146 <USBD_LL_StallEP>
  }
}
 8013dac:	bf00      	nop
 8013dae:	3710      	adds	r7, #16
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}

08013db4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b084      	sub	sp, #16
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
 8013dbc:	460b      	mov	r3, r1
 8013dbe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013dc6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	7a5b      	ldrb	r3, [r3, #9]
 8013dcc:	2b02      	cmp	r3, #2
 8013dce:	d108      	bne.n	8013de2 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013dd0:	2181      	movs	r1, #129	; 0x81
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f005 f9b7 	bl	8019146 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013dd8:	2101      	movs	r1, #1
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f005 f9b3 	bl	8019146 <USBD_LL_StallEP>
 8013de0:	e00d      	b.n	8013dfe <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	da08      	bge.n	8013dfc <MSC_BOT_CplClrFeature+0x48>
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	7a5b      	ldrb	r3, [r3, #9]
 8013dee:	2b01      	cmp	r3, #1
 8013df0:	d004      	beq.n	8013dfc <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013df2:	2101      	movs	r1, #1
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f7ff ff79 	bl	8013cec <MSC_BOT_SendCSW>
 8013dfa:	e000      	b.n	8013dfe <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8013dfc:	bf00      	nop
  }
}
 8013dfe:	3710      	adds	r7, #16
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}

08013e04 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b086      	sub	sp, #24
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	60f8      	str	r0, [r7, #12]
 8013e0c:	460b      	mov	r3, r1
 8013e0e:	607a      	str	r2, [r7, #4]
 8013e10:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e18:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	2b25      	cmp	r3, #37	; 0x25
 8013e20:	d06e      	beq.n	8013f00 <SCSI_ProcessCmd+0xfc>
 8013e22:	2b25      	cmp	r3, #37	; 0x25
 8013e24:	dc11      	bgt.n	8013e4a <SCSI_ProcessCmd+0x46>
 8013e26:	2b1a      	cmp	r3, #26
 8013e28:	d04f      	beq.n	8013eca <SCSI_ProcessCmd+0xc6>
 8013e2a:	2b1a      	cmp	r3, #26
 8013e2c:	dc06      	bgt.n	8013e3c <SCSI_ProcessCmd+0x38>
 8013e2e:	2b03      	cmp	r3, #3
 8013e30:	d027      	beq.n	8013e82 <SCSI_ProcessCmd+0x7e>
 8013e32:	2b12      	cmp	r3, #18
 8013e34:	d02e      	beq.n	8013e94 <SCSI_ProcessCmd+0x90>
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d01a      	beq.n	8013e70 <SCSI_ProcessCmd+0x6c>
 8013e3a:	e0a0      	b.n	8013f7e <SCSI_ProcessCmd+0x17a>
 8013e3c:	2b1e      	cmp	r3, #30
 8013e3e:	d03b      	beq.n	8013eb8 <SCSI_ProcessCmd+0xb4>
 8013e40:	2b23      	cmp	r3, #35	; 0x23
 8013e42:	d054      	beq.n	8013eee <SCSI_ProcessCmd+0xea>
 8013e44:	2b1b      	cmp	r3, #27
 8013e46:	d02e      	beq.n	8013ea6 <SCSI_ProcessCmd+0xa2>
 8013e48:	e099      	b.n	8013f7e <SCSI_ProcessCmd+0x17a>
 8013e4a:	2b5a      	cmp	r3, #90	; 0x5a
 8013e4c:	d046      	beq.n	8013edc <SCSI_ProcessCmd+0xd8>
 8013e4e:	2b5a      	cmp	r3, #90	; 0x5a
 8013e50:	dc07      	bgt.n	8013e62 <SCSI_ProcessCmd+0x5e>
 8013e52:	2b2a      	cmp	r3, #42	; 0x2a
 8013e54:	d078      	beq.n	8013f48 <SCSI_ProcessCmd+0x144>
 8013e56:	2b2f      	cmp	r3, #47	; 0x2f
 8013e58:	f000 8088 	beq.w	8013f6c <SCSI_ProcessCmd+0x168>
 8013e5c:	2b28      	cmp	r3, #40	; 0x28
 8013e5e:	d061      	beq.n	8013f24 <SCSI_ProcessCmd+0x120>
 8013e60:	e08d      	b.n	8013f7e <SCSI_ProcessCmd+0x17a>
 8013e62:	2ba8      	cmp	r3, #168	; 0xa8
 8013e64:	d067      	beq.n	8013f36 <SCSI_ProcessCmd+0x132>
 8013e66:	2baa      	cmp	r3, #170	; 0xaa
 8013e68:	d077      	beq.n	8013f5a <SCSI_ProcessCmd+0x156>
 8013e6a:	2b9e      	cmp	r3, #158	; 0x9e
 8013e6c:	d051      	beq.n	8013f12 <SCSI_ProcessCmd+0x10e>
 8013e6e:	e086      	b.n	8013f7e <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8013e70:	7afb      	ldrb	r3, [r7, #11]
 8013e72:	687a      	ldr	r2, [r7, #4]
 8013e74:	4619      	mov	r1, r3
 8013e76:	68f8      	ldr	r0, [r7, #12]
 8013e78:	f000 f893 	bl	8013fa2 <SCSI_TestUnitReady>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	75fb      	strb	r3, [r7, #23]
    break;
 8013e80:	e089      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8013e82:	7afb      	ldrb	r3, [r7, #11]
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	4619      	mov	r1, r3
 8013e88:	68f8      	ldr	r0, [r7, #12]
 8013e8a:	f000 fb47 	bl	801451c <SCSI_RequestSense>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	75fb      	strb	r3, [r7, #23]
    break;
 8013e92:	e080      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8013e94:	7afb      	ldrb	r3, [r7, #11]
 8013e96:	687a      	ldr	r2, [r7, #4]
 8013e98:	4619      	mov	r1, r3
 8013e9a:	68f8      	ldr	r0, [r7, #12]
 8013e9c:	f000 f8d2 	bl	8014044 <SCSI_Inquiry>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	75fb      	strb	r3, [r7, #23]
    break;
 8013ea4:	e077      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8013ea6:	7afb      	ldrb	r3, [r7, #11]
 8013ea8:	687a      	ldr	r2, [r7, #4]
 8013eaa:	4619      	mov	r1, r3
 8013eac:	68f8      	ldr	r0, [r7, #12]
 8013eae:	f000 fc27 	bl	8014700 <SCSI_StartStopUnit>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	75fb      	strb	r3, [r7, #23]
    break;
 8013eb6:	e06e      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8013eb8:	7afb      	ldrb	r3, [r7, #11]
 8013eba:	687a      	ldr	r2, [r7, #4]
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	68f8      	ldr	r0, [r7, #12]
 8013ec0:	f000 fc71 	bl	80147a6 <SCSI_AllowPreventRemovable>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	75fb      	strb	r3, [r7, #23]
    break;
 8013ec8:	e065      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8013eca:	7afb      	ldrb	r3, [r7, #11]
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	4619      	mov	r1, r3
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f000 fad7 	bl	8014484 <SCSI_ModeSense6>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	75fb      	strb	r3, [r7, #23]
    break;
 8013eda:	e05c      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8013edc:	7afb      	ldrb	r3, [r7, #11]
 8013ede:	687a      	ldr	r2, [r7, #4]
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	68f8      	ldr	r0, [r7, #12]
 8013ee4:	f000 faf4 	bl	80144d0 <SCSI_ModeSense10>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	75fb      	strb	r3, [r7, #23]
    break;
 8013eec:	e053      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8013eee:	7afb      	ldrb	r3, [r7, #11]
 8013ef0:	687a      	ldr	r2, [r7, #4]
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	68f8      	ldr	r0, [r7, #12]
 8013ef6:	f000 fa56 	bl	80143a6 <SCSI_ReadFormatCapacity>
 8013efa:	4603      	mov	r3, r0
 8013efc:	75fb      	strb	r3, [r7, #23]
    break;
 8013efe:	e04a      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8013f00:	7afb      	ldrb	r3, [r7, #11]
 8013f02:	687a      	ldr	r2, [r7, #4]
 8013f04:	4619      	mov	r1, r3
 8013f06:	68f8      	ldr	r0, [r7, #12]
 8013f08:	f000 f910 	bl	801412c <SCSI_ReadCapacity10>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	75fb      	strb	r3, [r7, #23]
    break;
 8013f10:	e041      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8013f12:	7afb      	ldrb	r3, [r7, #11]
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	4619      	mov	r1, r3
 8013f18:	68f8      	ldr	r0, [r7, #12]
 8013f1a:	f000 f98b 	bl	8014234 <SCSI_ReadCapacity16>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	75fb      	strb	r3, [r7, #23]
    break;
 8013f22:	e038      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8013f24:	7afb      	ldrb	r3, [r7, #11]
 8013f26:	687a      	ldr	r2, [r7, #4]
 8013f28:	4619      	mov	r1, r3
 8013f2a:	68f8      	ldr	r0, [r7, #12]
 8013f2c:	f000 fc62 	bl	80147f4 <SCSI_Read10>
 8013f30:	4603      	mov	r3, r0
 8013f32:	75fb      	strb	r3, [r7, #23]
    break;
 8013f34:	e02f      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8013f36:	7afb      	ldrb	r3, [r7, #11]
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	68f8      	ldr	r0, [r7, #12]
 8013f3e:	f000 fd0b 	bl	8014958 <SCSI_Read12>
 8013f42:	4603      	mov	r3, r0
 8013f44:	75fb      	strb	r3, [r7, #23]
    break;
 8013f46:	e026      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8013f48:	7afb      	ldrb	r3, [r7, #11]
 8013f4a:	687a      	ldr	r2, [r7, #4]
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	68f8      	ldr	r0, [r7, #12]
 8013f50:	f000 fdbe 	bl	8014ad0 <SCSI_Write10>
 8013f54:	4603      	mov	r3, r0
 8013f56:	75fb      	strb	r3, [r7, #23]
    break;
 8013f58:	e01d      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8013f5a:	7afb      	ldrb	r3, [r7, #11]
 8013f5c:	687a      	ldr	r2, [r7, #4]
 8013f5e:	4619      	mov	r1, r3
 8013f60:	68f8      	ldr	r0, [r7, #12]
 8013f62:	f000 fe8d 	bl	8014c80 <SCSI_Write12>
 8013f66:	4603      	mov	r3, r0
 8013f68:	75fb      	strb	r3, [r7, #23]
    break;
 8013f6a:	e014      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8013f6c:	7afb      	ldrb	r3, [r7, #11]
 8013f6e:	687a      	ldr	r2, [r7, #4]
 8013f70:	4619      	mov	r1, r3
 8013f72:	68f8      	ldr	r0, [r7, #12]
 8013f74:	f000 ff6c 	bl	8014e50 <SCSI_Verify10>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	75fb      	strb	r3, [r7, #23]
    break;
 8013f7c:	e00b      	b.n	8013f96 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8013f7e:	7af9      	ldrb	r1, [r7, #11]
 8013f80:	2320      	movs	r3, #32
 8013f82:	2205      	movs	r2, #5
 8013f84:	68f8      	ldr	r0, [r7, #12]
 8013f86:	f000 fb61 	bl	801464c <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	2202      	movs	r2, #2
 8013f8e:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8013f90:	23ff      	movs	r3, #255	; 0xff
 8013f92:	75fb      	strb	r3, [r7, #23]
    break;
 8013f94:	bf00      	nop
  }

  return ret;
 8013f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3718      	adds	r7, #24
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}

08013fa2 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013fa2:	b580      	push	{r7, lr}
 8013fa4:	b086      	sub	sp, #24
 8013fa6:	af00      	add	r7, sp, #0
 8013fa8:	60f8      	str	r0, [r7, #12]
 8013faa:	460b      	mov	r3, r1
 8013fac:	607a      	str	r2, [r7, #4]
 8013fae:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013fb6:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8013fb8:	697a      	ldr	r2, [r7, #20]
 8013fba:	f248 0318 	movw	r3, #32792	; 0x8018
 8013fbe:	4413      	add	r3, r2
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d00c      	beq.n	8013fe0 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013fc6:	697a      	ldr	r2, [r7, #20]
 8013fc8:	f248 031d 	movw	r3, #32797	; 0x801d
 8013fcc:	4413      	add	r3, r2
 8013fce:	7819      	ldrb	r1, [r3, #0]
 8013fd0:	2320      	movs	r3, #32
 8013fd2:	2205      	movs	r2, #5
 8013fd4:	68f8      	ldr	r0, [r7, #12]
 8013fd6:	f000 fb39 	bl	801464c <SCSI_SenseCode>

    return -1;
 8013fda:	f04f 33ff 	mov.w	r3, #4294967295
 8013fde:	e02c      	b.n	801403a <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013fe0:	697a      	ldr	r2, [r7, #20]
 8013fe2:	f248 0362 	movw	r3, #32866	; 0x8062
 8013fe6:	4413      	add	r3, r2
 8013fe8:	781b      	ldrb	r3, [r3, #0]
 8013fea:	2b02      	cmp	r3, #2
 8013fec:	d10b      	bne.n	8014006 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013fee:	7af9      	ldrb	r1, [r7, #11]
 8013ff0:	233a      	movs	r3, #58	; 0x3a
 8013ff2:	2202      	movs	r2, #2
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	f000 fb29 	bl	801464c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	2205      	movs	r2, #5
 8013ffe:	721a      	strb	r2, [r3, #8]
    return -1;
 8014000:	f04f 33ff 	mov.w	r3, #4294967295
 8014004:	e019      	b.n	801403a <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801400c:	689b      	ldr	r3, [r3, #8]
 801400e:	7afa      	ldrb	r2, [r7, #11]
 8014010:	4610      	mov	r0, r2
 8014012:	4798      	blx	r3
 8014014:	4603      	mov	r3, r0
 8014016:	2b00      	cmp	r3, #0
 8014018:	d00b      	beq.n	8014032 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801401a:	7af9      	ldrb	r1, [r7, #11]
 801401c:	233a      	movs	r3, #58	; 0x3a
 801401e:	2202      	movs	r2, #2
 8014020:	68f8      	ldr	r0, [r7, #12]
 8014022:	f000 fb13 	bl	801464c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	2205      	movs	r2, #5
 801402a:	721a      	strb	r2, [r3, #8]

    return -1;
 801402c:	f04f 33ff 	mov.w	r3, #4294967295
 8014030:	e003      	b.n	801403a <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	2200      	movs	r2, #0
 8014036:	60da      	str	r2, [r3, #12]

  return 0;
 8014038:	2300      	movs	r3, #0
}
 801403a:	4618      	mov	r0, r3
 801403c:	3718      	adds	r7, #24
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}
	...

08014044 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b088      	sub	sp, #32
 8014048:	af00      	add	r7, sp, #0
 801404a:	60f8      	str	r0, [r7, #12]
 801404c:	460b      	mov	r3, r1
 801404e:	607a      	str	r2, [r7, #4]
 8014050:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014058:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 801405a:	69ba      	ldr	r2, [r7, #24]
 801405c:	f248 0318 	movw	r3, #32792	; 0x8018
 8014060:	4413      	add	r3, r2
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d10c      	bne.n	8014082 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014068:	69ba      	ldr	r2, [r7, #24]
 801406a:	f248 031d 	movw	r3, #32797	; 0x801d
 801406e:	4413      	add	r3, r2
 8014070:	7819      	ldrb	r1, [r3, #0]
 8014072:	2320      	movs	r3, #32
 8014074:	2205      	movs	r2, #5
 8014076:	68f8      	ldr	r0, [r7, #12]
 8014078:	f000 fae8 	bl	801464c <SCSI_SenseCode>
    return -1;
 801407c:	f04f 33ff 	mov.w	r3, #4294967295
 8014080:	e04c      	b.n	801411c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	3301      	adds	r3, #1
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	f003 0301 	and.w	r3, r3, #1
 801408c:	2b00      	cmp	r3, #0
 801408e:	d022      	beq.n	80140d6 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	3302      	adds	r3, #2
 8014094:	781b      	ldrb	r3, [r3, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d105      	bne.n	80140a6 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801409a:	2206      	movs	r2, #6
 801409c:	4921      	ldr	r1, [pc, #132]	; (8014124 <SCSI_Inquiry+0xe0>)
 801409e:	69b8      	ldr	r0, [r7, #24]
 80140a0:	f001 f862 	bl	8015168 <SCSI_UpdateBotData>
 80140a4:	e039      	b.n	801411a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	3302      	adds	r3, #2
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	2b80      	cmp	r3, #128	; 0x80
 80140ae:	d105      	bne.n	80140bc <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80140b0:	2208      	movs	r2, #8
 80140b2:	491d      	ldr	r1, [pc, #116]	; (8014128 <SCSI_Inquiry+0xe4>)
 80140b4:	69b8      	ldr	r0, [r7, #24]
 80140b6:	f001 f857 	bl	8015168 <SCSI_UpdateBotData>
 80140ba:	e02e      	b.n	801411a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80140bc:	69ba      	ldr	r2, [r7, #24]
 80140be:	f248 031d 	movw	r3, #32797	; 0x801d
 80140c2:	4413      	add	r3, r2
 80140c4:	7819      	ldrb	r1, [r3, #0]
 80140c6:	2324      	movs	r3, #36	; 0x24
 80140c8:	2205      	movs	r2, #5
 80140ca:	68f8      	ldr	r0, [r7, #12]
 80140cc:	f000 fabe 	bl	801464c <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80140d0:	f04f 33ff 	mov.w	r3, #4294967295
 80140d4:	e022      	b.n	801411c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140dc:	69d9      	ldr	r1, [r3, #28]
 80140de:	7afa      	ldrb	r2, [r7, #11]
 80140e0:	4613      	mov	r3, r2
 80140e2:	00db      	lsls	r3, r3, #3
 80140e4:	4413      	add	r3, r2
 80140e6:	009b      	lsls	r3, r3, #2
 80140e8:	440b      	add	r3, r1
 80140ea:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80140ec:	697b      	ldr	r3, [r7, #20]
 80140ee:	3304      	adds	r3, #4
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	3305      	adds	r3, #5
 80140f6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	3304      	adds	r3, #4
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	b29b      	uxth	r3, r3
 8014100:	8bfa      	ldrh	r2, [r7, #30]
 8014102:	429a      	cmp	r2, r3
 8014104:	d303      	bcc.n	801410e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	3304      	adds	r3, #4
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801410e:	8bfb      	ldrh	r3, [r7, #30]
 8014110:	461a      	mov	r2, r3
 8014112:	6979      	ldr	r1, [r7, #20]
 8014114:	69b8      	ldr	r0, [r7, #24]
 8014116:	f001 f827 	bl	8015168 <SCSI_UpdateBotData>
  }

  return 0;
 801411a:	2300      	movs	r3, #0
}
 801411c:	4618      	mov	r0, r3
 801411e:	3720      	adds	r7, #32
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}
 8014124:	240000c4 	.word	0x240000c4
 8014128:	240000cc 	.word	0x240000cc

0801412c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801412c:	b590      	push	{r4, r7, lr}
 801412e:	b087      	sub	sp, #28
 8014130:	af00      	add	r7, sp, #0
 8014132:	60f8      	str	r0, [r7, #12]
 8014134:	460b      	mov	r3, r1
 8014136:	607a      	str	r2, [r7, #4]
 8014138:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014140:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014148:	685c      	ldr	r4, [r3, #4]
 801414a:	697a      	ldr	r2, [r7, #20]
 801414c:	f248 0368 	movw	r3, #32872	; 0x8068
 8014150:	4413      	add	r3, r2
 8014152:	6979      	ldr	r1, [r7, #20]
 8014154:	f248 0264 	movw	r2, #32868	; 0x8064
 8014158:	440a      	add	r2, r1
 801415a:	7af8      	ldrb	r0, [r7, #11]
 801415c:	4619      	mov	r1, r3
 801415e:	47a0      	blx	r4
 8014160:	4603      	mov	r3, r0
 8014162:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014164:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d106      	bne.n	801417a <SCSI_ReadCapacity10+0x4e>
 801416c:	697a      	ldr	r2, [r7, #20]
 801416e:	f248 0362 	movw	r3, #32866	; 0x8062
 8014172:	4413      	add	r3, r2
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	2b02      	cmp	r3, #2
 8014178:	d108      	bne.n	801418c <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801417a:	7af9      	ldrb	r1, [r7, #11]
 801417c:	233a      	movs	r3, #58	; 0x3a
 801417e:	2202      	movs	r2, #2
 8014180:	68f8      	ldr	r0, [r7, #12]
 8014182:	f000 fa63 	bl	801464c <SCSI_SenseCode>
    return -1;
 8014186:	f04f 33ff 	mov.w	r3, #4294967295
 801418a:	e04f      	b.n	801422c <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801418c:	697a      	ldr	r2, [r7, #20]
 801418e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014192:	4413      	add	r3, r2
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	3b01      	subs	r3, #1
 8014198:	0e1b      	lsrs	r3, r3, #24
 801419a:	b2da      	uxtb	r2, r3
 801419c:	697b      	ldr	r3, [r7, #20]
 801419e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80141a0:	697a      	ldr	r2, [r7, #20]
 80141a2:	f248 0368 	movw	r3, #32872	; 0x8068
 80141a6:	4413      	add	r3, r2
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	3b01      	subs	r3, #1
 80141ac:	0c1b      	lsrs	r3, r3, #16
 80141ae:	b2da      	uxtb	r2, r3
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80141b4:	697a      	ldr	r2, [r7, #20]
 80141b6:	f248 0368 	movw	r3, #32872	; 0x8068
 80141ba:	4413      	add	r3, r2
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	3b01      	subs	r3, #1
 80141c0:	0a1b      	lsrs	r3, r3, #8
 80141c2:	b2da      	uxtb	r2, r3
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80141c8:	697a      	ldr	r2, [r7, #20]
 80141ca:	f248 0368 	movw	r3, #32872	; 0x8068
 80141ce:	4413      	add	r3, r2
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	b2db      	uxtb	r3, r3
 80141d4:	3b01      	subs	r3, #1
 80141d6:	b2da      	uxtb	r2, r3
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80141dc:	697a      	ldr	r2, [r7, #20]
 80141de:	f248 0364 	movw	r3, #32868	; 0x8064
 80141e2:	4413      	add	r3, r2
 80141e4:	881b      	ldrh	r3, [r3, #0]
 80141e6:	161b      	asrs	r3, r3, #24
 80141e8:	b2da      	uxtb	r2, r3
 80141ea:	697b      	ldr	r3, [r7, #20]
 80141ec:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80141ee:	697a      	ldr	r2, [r7, #20]
 80141f0:	f248 0364 	movw	r3, #32868	; 0x8064
 80141f4:	4413      	add	r3, r2
 80141f6:	881b      	ldrh	r3, [r3, #0]
 80141f8:	141b      	asrs	r3, r3, #16
 80141fa:	b2da      	uxtb	r2, r3
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014200:	697a      	ldr	r2, [r7, #20]
 8014202:	f248 0364 	movw	r3, #32868	; 0x8064
 8014206:	4413      	add	r3, r2
 8014208:	881b      	ldrh	r3, [r3, #0]
 801420a:	0a1b      	lsrs	r3, r3, #8
 801420c:	b29b      	uxth	r3, r3
 801420e:	b2da      	uxtb	r2, r3
 8014210:	697b      	ldr	r3, [r7, #20]
 8014212:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014214:	697a      	ldr	r2, [r7, #20]
 8014216:	f248 0364 	movw	r3, #32868	; 0x8064
 801421a:	4413      	add	r3, r2
 801421c:	881b      	ldrh	r3, [r3, #0]
 801421e:	b2da      	uxtb	r2, r3
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	2208      	movs	r2, #8
 8014228:	60da      	str	r2, [r3, #12]

  return 0;
 801422a:	2300      	movs	r3, #0

}
 801422c:	4618      	mov	r0, r3
 801422e:	371c      	adds	r7, #28
 8014230:	46bd      	mov	sp, r7
 8014232:	bd90      	pop	{r4, r7, pc}

08014234 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014234:	b590      	push	{r4, r7, lr}
 8014236:	b089      	sub	sp, #36	; 0x24
 8014238:	af00      	add	r7, sp, #0
 801423a:	60f8      	str	r0, [r7, #12]
 801423c:	460b      	mov	r3, r1
 801423e:	607a      	str	r2, [r7, #4]
 8014240:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014248:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014250:	685c      	ldr	r4, [r3, #4]
 8014252:	69ba      	ldr	r2, [r7, #24]
 8014254:	f248 0368 	movw	r3, #32872	; 0x8068
 8014258:	4413      	add	r3, r2
 801425a:	69b9      	ldr	r1, [r7, #24]
 801425c:	f248 0264 	movw	r2, #32868	; 0x8064
 8014260:	440a      	add	r2, r1
 8014262:	7af8      	ldrb	r0, [r7, #11]
 8014264:	4619      	mov	r1, r3
 8014266:	47a0      	blx	r4
 8014268:	4603      	mov	r3, r0
 801426a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801426c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d106      	bne.n	8014282 <SCSI_ReadCapacity16+0x4e>
 8014274:	69ba      	ldr	r2, [r7, #24]
 8014276:	f248 0362 	movw	r3, #32866	; 0x8062
 801427a:	4413      	add	r3, r2
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	2b02      	cmp	r3, #2
 8014280:	d108      	bne.n	8014294 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014282:	7af9      	ldrb	r1, [r7, #11]
 8014284:	233a      	movs	r3, #58	; 0x3a
 8014286:	2202      	movs	r2, #2
 8014288:	68f8      	ldr	r0, [r7, #12]
 801428a:	f000 f9df 	bl	801464c <SCSI_SenseCode>
    return -1;
 801428e:	f04f 33ff 	mov.w	r3, #4294967295
 8014292:	e084      	b.n	801439e <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	330a      	adds	r3, #10
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	330b      	adds	r3, #11
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80142a4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	330c      	adds	r3, #12
 80142aa:	781b      	ldrb	r3, [r3, #0]
 80142ac:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80142ae:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80142b0:	687a      	ldr	r2, [r7, #4]
 80142b2:	320d      	adds	r2, #13
 80142b4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80142b6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80142b8:	69bb      	ldr	r3, [r7, #24]
 80142ba:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80142bc:	2300      	movs	r3, #0
 80142be:	77fb      	strb	r3, [r7, #31]
 80142c0:	e007      	b.n	80142d2 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 80142c2:	7ffb      	ldrb	r3, [r7, #31]
 80142c4:	69ba      	ldr	r2, [r7, #24]
 80142c6:	4413      	add	r3, r2
 80142c8:	2200      	movs	r2, #0
 80142ca:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80142cc:	7ffb      	ldrb	r3, [r7, #31]
 80142ce:	3301      	adds	r3, #1
 80142d0:	77fb      	strb	r3, [r7, #31]
 80142d2:	7ffa      	ldrb	r2, [r7, #31]
 80142d4:	69bb      	ldr	r3, [r7, #24]
 80142d6:	68db      	ldr	r3, [r3, #12]
 80142d8:	429a      	cmp	r2, r3
 80142da:	d3f2      	bcc.n	80142c2 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80142dc:	69ba      	ldr	r2, [r7, #24]
 80142de:	f248 0368 	movw	r3, #32872	; 0x8068
 80142e2:	4413      	add	r3, r2
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	3b01      	subs	r3, #1
 80142e8:	0e1b      	lsrs	r3, r3, #24
 80142ea:	b2da      	uxtb	r2, r3
 80142ec:	69bb      	ldr	r3, [r7, #24]
 80142ee:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80142f0:	69ba      	ldr	r2, [r7, #24]
 80142f2:	f248 0368 	movw	r3, #32872	; 0x8068
 80142f6:	4413      	add	r3, r2
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	3b01      	subs	r3, #1
 80142fc:	0c1b      	lsrs	r3, r3, #16
 80142fe:	b2da      	uxtb	r2, r3
 8014300:	69bb      	ldr	r3, [r7, #24]
 8014302:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014304:	69ba      	ldr	r2, [r7, #24]
 8014306:	f248 0368 	movw	r3, #32872	; 0x8068
 801430a:	4413      	add	r3, r2
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	3b01      	subs	r3, #1
 8014310:	0a1b      	lsrs	r3, r3, #8
 8014312:	b2da      	uxtb	r2, r3
 8014314:	69bb      	ldr	r3, [r7, #24]
 8014316:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014318:	69ba      	ldr	r2, [r7, #24]
 801431a:	f248 0368 	movw	r3, #32872	; 0x8068
 801431e:	4413      	add	r3, r2
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	b2db      	uxtb	r3, r3
 8014324:	3b01      	subs	r3, #1
 8014326:	b2da      	uxtb	r2, r3
 8014328:	69bb      	ldr	r3, [r7, #24]
 801432a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801432c:	69ba      	ldr	r2, [r7, #24]
 801432e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014332:	4413      	add	r3, r2
 8014334:	881b      	ldrh	r3, [r3, #0]
 8014336:	161b      	asrs	r3, r3, #24
 8014338:	b2da      	uxtb	r2, r3
 801433a:	69bb      	ldr	r3, [r7, #24]
 801433c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801433e:	69ba      	ldr	r2, [r7, #24]
 8014340:	f248 0364 	movw	r3, #32868	; 0x8064
 8014344:	4413      	add	r3, r2
 8014346:	881b      	ldrh	r3, [r3, #0]
 8014348:	141b      	asrs	r3, r3, #16
 801434a:	b2da      	uxtb	r2, r3
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014350:	69ba      	ldr	r2, [r7, #24]
 8014352:	f248 0364 	movw	r3, #32868	; 0x8064
 8014356:	4413      	add	r3, r2
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	0a1b      	lsrs	r3, r3, #8
 801435c:	b29b      	uxth	r3, r3
 801435e:	b2da      	uxtb	r2, r3
 8014360:	69bb      	ldr	r3, [r7, #24]
 8014362:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8014364:	69ba      	ldr	r2, [r7, #24]
 8014366:	f248 0364 	movw	r3, #32868	; 0x8064
 801436a:	4413      	add	r3, r2
 801436c:	881b      	ldrh	r3, [r3, #0]
 801436e:	b2da      	uxtb	r2, r3
 8014370:	69bb      	ldr	r3, [r7, #24]
 8014372:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	330a      	adds	r3, #10
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	330b      	adds	r3, #11
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014384:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	330c      	adds	r3, #12
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801438e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014390:	687a      	ldr	r2, [r7, #4]
 8014392:	320d      	adds	r2, #13
 8014394:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014396:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014398:	69bb      	ldr	r3, [r7, #24]
 801439a:	60da      	str	r2, [r3, #12]

  return 0;
 801439c:	2300      	movs	r3, #0
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3724      	adds	r7, #36	; 0x24
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd90      	pop	{r4, r7, pc}

080143a6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b088      	sub	sp, #32
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	60f8      	str	r0, [r7, #12]
 80143ae:	460b      	mov	r3, r1
 80143b0:	607a      	str	r2, [r7, #4]
 80143b2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80143ba:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	f107 0214 	add.w	r2, r7, #20
 80143c8:	f107 0110 	add.w	r1, r7, #16
 80143cc:	7af8      	ldrb	r0, [r7, #11]
 80143ce:	4798      	blx	r3
 80143d0:	4603      	mov	r3, r0
 80143d2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80143d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d106      	bne.n	80143ea <SCSI_ReadFormatCapacity+0x44>
 80143dc:	69ba      	ldr	r2, [r7, #24]
 80143de:	f248 0362 	movw	r3, #32866	; 0x8062
 80143e2:	4413      	add	r3, r2
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	2b02      	cmp	r3, #2
 80143e8:	d108      	bne.n	80143fc <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80143ea:	7af9      	ldrb	r1, [r7, #11]
 80143ec:	233a      	movs	r3, #58	; 0x3a
 80143ee:	2202      	movs	r2, #2
 80143f0:	68f8      	ldr	r0, [r7, #12]
 80143f2:	f000 f92b 	bl	801464c <SCSI_SenseCode>
    return -1;
 80143f6:	f04f 33ff 	mov.w	r3, #4294967295
 80143fa:	e03e      	b.n	801447a <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 80143fc:	2300      	movs	r3, #0
 80143fe:	83fb      	strh	r3, [r7, #30]
 8014400:	e007      	b.n	8014412 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8014402:	8bfb      	ldrh	r3, [r7, #30]
 8014404:	69ba      	ldr	r2, [r7, #24]
 8014406:	4413      	add	r3, r2
 8014408:	2200      	movs	r2, #0
 801440a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801440c:	8bfb      	ldrh	r3, [r7, #30]
 801440e:	3301      	adds	r3, #1
 8014410:	83fb      	strh	r3, [r7, #30]
 8014412:	8bfb      	ldrh	r3, [r7, #30]
 8014414:	2b0b      	cmp	r3, #11
 8014416:	d9f4      	bls.n	8014402 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8014418:	69bb      	ldr	r3, [r7, #24]
 801441a:	2208      	movs	r2, #8
 801441c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	3b01      	subs	r3, #1
 8014422:	0e1b      	lsrs	r3, r3, #24
 8014424:	b2da      	uxtb	r2, r3
 8014426:	69bb      	ldr	r3, [r7, #24]
 8014428:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	3b01      	subs	r3, #1
 801442e:	0c1b      	lsrs	r3, r3, #16
 8014430:	b2da      	uxtb	r2, r3
 8014432:	69bb      	ldr	r3, [r7, #24]
 8014434:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	3b01      	subs	r3, #1
 801443a:	0a1b      	lsrs	r3, r3, #8
 801443c:	b2da      	uxtb	r2, r3
 801443e:	69bb      	ldr	r3, [r7, #24]
 8014440:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	b2db      	uxtb	r3, r3
 8014446:	3b01      	subs	r3, #1
 8014448:	b2da      	uxtb	r2, r3
 801444a:	69bb      	ldr	r3, [r7, #24]
 801444c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801444e:	69bb      	ldr	r3, [r7, #24]
 8014450:	2202      	movs	r2, #2
 8014452:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8014454:	8abb      	ldrh	r3, [r7, #20]
 8014456:	141b      	asrs	r3, r3, #16
 8014458:	b2da      	uxtb	r2, r3
 801445a:	69bb      	ldr	r3, [r7, #24]
 801445c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801445e:	8abb      	ldrh	r3, [r7, #20]
 8014460:	0a1b      	lsrs	r3, r3, #8
 8014462:	b29b      	uxth	r3, r3
 8014464:	b2da      	uxtb	r2, r3
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801446a:	8abb      	ldrh	r3, [r7, #20]
 801446c:	b2da      	uxtb	r2, r3
 801446e:	69bb      	ldr	r3, [r7, #24]
 8014470:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8014472:	69bb      	ldr	r3, [r7, #24]
 8014474:	220c      	movs	r2, #12
 8014476:	60da      	str	r2, [r3, #12]

  return 0;
 8014478:	2300      	movs	r3, #0
}
 801447a:	4618      	mov	r0, r3
 801447c:	3720      	adds	r7, #32
 801447e:	46bd      	mov	sp, r7
 8014480:	bd80      	pop	{r7, pc}
	...

08014484 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b086      	sub	sp, #24
 8014488:	af00      	add	r7, sp, #0
 801448a:	60f8      	str	r0, [r7, #12]
 801448c:	460b      	mov	r3, r1
 801448e:	607a      	str	r2, [r7, #4]
 8014490:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014498:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801449a:	2317      	movs	r3, #23
 801449c:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	3304      	adds	r3, #4
 80144a2:	781b      	ldrb	r3, [r3, #0]
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	8afa      	ldrh	r2, [r7, #22]
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d303      	bcc.n	80144b4 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	3304      	adds	r3, #4
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80144b4:	8afb      	ldrh	r3, [r7, #22]
 80144b6:	461a      	mov	r2, r3
 80144b8:	4904      	ldr	r1, [pc, #16]	; (80144cc <SCSI_ModeSense6+0x48>)
 80144ba:	6938      	ldr	r0, [r7, #16]
 80144bc:	f000 fe54 	bl	8015168 <SCSI_UpdateBotData>

  return 0;
 80144c0:	2300      	movs	r3, #0
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3718      	adds	r7, #24
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}
 80144ca:	bf00      	nop
 80144cc:	240000d4 	.word	0x240000d4

080144d0 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b086      	sub	sp, #24
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	60f8      	str	r0, [r7, #12]
 80144d8:	460b      	mov	r3, r1
 80144da:	607a      	str	r2, [r7, #4]
 80144dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80144e4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80144e6:	231b      	movs	r3, #27
 80144e8:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	3308      	adds	r3, #8
 80144ee:	781b      	ldrb	r3, [r3, #0]
 80144f0:	b29b      	uxth	r3, r3
 80144f2:	8afa      	ldrh	r2, [r7, #22]
 80144f4:	429a      	cmp	r2, r3
 80144f6:	d303      	bcc.n	8014500 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	3308      	adds	r3, #8
 80144fc:	781b      	ldrb	r3, [r3, #0]
 80144fe:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8014500:	8afb      	ldrh	r3, [r7, #22]
 8014502:	461a      	mov	r2, r3
 8014504:	4904      	ldr	r1, [pc, #16]	; (8014518 <SCSI_ModeSense10+0x48>)
 8014506:	6938      	ldr	r0, [r7, #16]
 8014508:	f000 fe2e 	bl	8015168 <SCSI_UpdateBotData>

  return 0;
 801450c:	2300      	movs	r3, #0
}
 801450e:	4618      	mov	r0, r3
 8014510:	3718      	adds	r7, #24
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
 8014516:	bf00      	nop
 8014518:	240000ec 	.word	0x240000ec

0801451c <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b086      	sub	sp, #24
 8014520:	af00      	add	r7, sp, #0
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	460b      	mov	r3, r1
 8014526:	607a      	str	r2, [r7, #4]
 8014528:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014530:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8014532:	693a      	ldr	r2, [r7, #16]
 8014534:	f248 0318 	movw	r3, #32792	; 0x8018
 8014538:	4413      	add	r3, r2
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d10c      	bne.n	801455a <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014540:	693a      	ldr	r2, [r7, #16]
 8014542:	f248 031d 	movw	r3, #32797	; 0x801d
 8014546:	4413      	add	r3, r2
 8014548:	7819      	ldrb	r1, [r3, #0]
 801454a:	2320      	movs	r3, #32
 801454c:	2205      	movs	r2, #5
 801454e:	68f8      	ldr	r0, [r7, #12]
 8014550:	f000 f87c 	bl	801464c <SCSI_SenseCode>
    return -1;
 8014554:	f04f 33ff 	mov.w	r3, #4294967295
 8014558:	e074      	b.n	8014644 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801455a:	2300      	movs	r3, #0
 801455c:	75fb      	strb	r3, [r7, #23]
 801455e:	e007      	b.n	8014570 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8014560:	7dfb      	ldrb	r3, [r7, #23]
 8014562:	693a      	ldr	r2, [r7, #16]
 8014564:	4413      	add	r3, r2
 8014566:	2200      	movs	r2, #0
 8014568:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801456a:	7dfb      	ldrb	r3, [r7, #23]
 801456c:	3301      	adds	r3, #1
 801456e:	75fb      	strb	r3, [r7, #23]
 8014570:	7dfb      	ldrb	r3, [r7, #23]
 8014572:	2b11      	cmp	r3, #17
 8014574:	d9f4      	bls.n	8014560 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 8014576:	693b      	ldr	r3, [r7, #16]
 8014578:	2270      	movs	r2, #112	; 0x70
 801457a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	220c      	movs	r2, #12
 8014580:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014582:	693a      	ldr	r2, [r7, #16]
 8014584:	f248 0360 	movw	r3, #32864	; 0x8060
 8014588:	4413      	add	r3, r2
 801458a:	781a      	ldrb	r2, [r3, #0]
 801458c:	6939      	ldr	r1, [r7, #16]
 801458e:	f248 0361 	movw	r3, #32865	; 0x8061
 8014592:	440b      	add	r3, r1
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	429a      	cmp	r2, r3
 8014598:	d045      	beq.n	8014626 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801459a:	693a      	ldr	r2, [r7, #16]
 801459c:	f248 0360 	movw	r3, #32864	; 0x8060
 80145a0:	4413      	add	r3, r2
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	4619      	mov	r1, r3
 80145a6:	693a      	ldr	r2, [r7, #16]
 80145a8:	f241 0308 	movw	r3, #4104	; 0x1008
 80145ac:	440b      	add	r3, r1
 80145ae:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80145b2:	693b      	ldr	r3, [r7, #16]
 80145b4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80145b6:	693a      	ldr	r2, [r7, #16]
 80145b8:	f248 0360 	movw	r3, #32864	; 0x8060
 80145bc:	4413      	add	r3, r2
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	4619      	mov	r1, r3
 80145c2:	693a      	ldr	r2, [r7, #16]
 80145c4:	f241 0308 	movw	r3, #4104	; 0x1008
 80145c8:	440b      	add	r3, r1
 80145ca:	00db      	lsls	r3, r3, #3
 80145cc:	4413      	add	r3, r2
 80145ce:	791a      	ldrb	r2, [r3, #4]
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80145d4:	693a      	ldr	r2, [r7, #16]
 80145d6:	f248 0360 	movw	r3, #32864	; 0x8060
 80145da:	4413      	add	r3, r2
 80145dc:	781b      	ldrb	r3, [r3, #0]
 80145de:	4619      	mov	r1, r3
 80145e0:	693a      	ldr	r2, [r7, #16]
 80145e2:	f241 0308 	movw	r3, #4104	; 0x1008
 80145e6:	440b      	add	r3, r1
 80145e8:	00db      	lsls	r3, r3, #3
 80145ea:	4413      	add	r3, r2
 80145ec:	795a      	ldrb	r2, [r3, #5]
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80145f2:	693a      	ldr	r2, [r7, #16]
 80145f4:	f248 0360 	movw	r3, #32864	; 0x8060
 80145f8:	4413      	add	r3, r2
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	3301      	adds	r3, #1
 80145fe:	b2d9      	uxtb	r1, r3
 8014600:	693a      	ldr	r2, [r7, #16]
 8014602:	f248 0360 	movw	r3, #32864	; 0x8060
 8014606:	4413      	add	r3, r2
 8014608:	460a      	mov	r2, r1
 801460a:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801460c:	693a      	ldr	r2, [r7, #16]
 801460e:	f248 0360 	movw	r3, #32864	; 0x8060
 8014612:	4413      	add	r3, r2
 8014614:	781b      	ldrb	r3, [r3, #0]
 8014616:	2b04      	cmp	r3, #4
 8014618:	d105      	bne.n	8014626 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 801461a:	693a      	ldr	r2, [r7, #16]
 801461c:	f248 0360 	movw	r3, #32864	; 0x8060
 8014620:	4413      	add	r3, r2
 8014622:	2200      	movs	r2, #0
 8014624:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8014626:	693b      	ldr	r3, [r7, #16]
 8014628:	2212      	movs	r2, #18
 801462a:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	3304      	adds	r3, #4
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	2b12      	cmp	r3, #18
 8014634:	d805      	bhi.n	8014642 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	3304      	adds	r3, #4
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	461a      	mov	r2, r3
 801463e:	693b      	ldr	r3, [r7, #16]
 8014640:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8014642:	2300      	movs	r3, #0
}
 8014644:	4618      	mov	r0, r3
 8014646:	3718      	adds	r7, #24
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}

0801464c <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801464c:	b480      	push	{r7}
 801464e:	b085      	sub	sp, #20
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
 8014654:	4608      	mov	r0, r1
 8014656:	4611      	mov	r1, r2
 8014658:	461a      	mov	r2, r3
 801465a:	4603      	mov	r3, r0
 801465c:	70fb      	strb	r3, [r7, #3]
 801465e:	460b      	mov	r3, r1
 8014660:	70bb      	strb	r3, [r7, #2]
 8014662:	4613      	mov	r3, r2
 8014664:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801466c:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801466e:	68fa      	ldr	r2, [r7, #12]
 8014670:	f248 0361 	movw	r3, #32865	; 0x8061
 8014674:	4413      	add	r3, r2
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	4619      	mov	r1, r3
 801467a:	68fa      	ldr	r2, [r7, #12]
 801467c:	f241 0308 	movw	r3, #4104	; 0x1008
 8014680:	440b      	add	r3, r1
 8014682:	78b9      	ldrb	r1, [r7, #2]
 8014684:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	f248 0361 	movw	r3, #32865	; 0x8061
 801468e:	4413      	add	r3, r2
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	4619      	mov	r1, r3
 8014694:	68fa      	ldr	r2, [r7, #12]
 8014696:	f241 0308 	movw	r3, #4104	; 0x1008
 801469a:	440b      	add	r3, r1
 801469c:	00db      	lsls	r3, r3, #3
 801469e:	4413      	add	r3, r2
 80146a0:	787a      	ldrb	r2, [r7, #1]
 80146a2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80146a4:	68fa      	ldr	r2, [r7, #12]
 80146a6:	f248 0361 	movw	r3, #32865	; 0x8061
 80146aa:	4413      	add	r3, r2
 80146ac:	781b      	ldrb	r3, [r3, #0]
 80146ae:	4619      	mov	r1, r3
 80146b0:	68fa      	ldr	r2, [r7, #12]
 80146b2:	f241 0308 	movw	r3, #4104	; 0x1008
 80146b6:	440b      	add	r3, r1
 80146b8:	00db      	lsls	r3, r3, #3
 80146ba:	4413      	add	r3, r2
 80146bc:	2200      	movs	r2, #0
 80146be:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80146c0:	68fa      	ldr	r2, [r7, #12]
 80146c2:	f248 0361 	movw	r3, #32865	; 0x8061
 80146c6:	4413      	add	r3, r2
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	3301      	adds	r3, #1
 80146cc:	b2d9      	uxtb	r1, r3
 80146ce:	68fa      	ldr	r2, [r7, #12]
 80146d0:	f248 0361 	movw	r3, #32865	; 0x8061
 80146d4:	4413      	add	r3, r2
 80146d6:	460a      	mov	r2, r1
 80146d8:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80146da:	68fa      	ldr	r2, [r7, #12]
 80146dc:	f248 0361 	movw	r3, #32865	; 0x8061
 80146e0:	4413      	add	r3, r2
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	2b04      	cmp	r3, #4
 80146e6:	d105      	bne.n	80146f4 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 80146e8:	68fa      	ldr	r2, [r7, #12]
 80146ea:	f248 0361 	movw	r3, #32865	; 0x8061
 80146ee:	4413      	add	r3, r2
 80146f0:	2200      	movs	r2, #0
 80146f2:	701a      	strb	r2, [r3, #0]
  }
}
 80146f4:	bf00      	nop
 80146f6:	3714      	adds	r7, #20
 80146f8:	46bd      	mov	sp, r7
 80146fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fe:	4770      	bx	lr

08014700 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b086      	sub	sp, #24
 8014704:	af00      	add	r7, sp, #0
 8014706:	60f8      	str	r0, [r7, #12]
 8014708:	460b      	mov	r3, r1
 801470a:	607a      	str	r2, [r7, #4]
 801470c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014714:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8014716:	697a      	ldr	r2, [r7, #20]
 8014718:	f248 0362 	movw	r3, #32866	; 0x8062
 801471c:	4413      	add	r3, r2
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	2b01      	cmp	r3, #1
 8014722:	d10f      	bne.n	8014744 <SCSI_StartStopUnit+0x44>
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	3304      	adds	r3, #4
 8014728:	781b      	ldrb	r3, [r3, #0]
 801472a:	f003 0303 	and.w	r3, r3, #3
 801472e:	2b02      	cmp	r3, #2
 8014730:	d108      	bne.n	8014744 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014732:	7af9      	ldrb	r1, [r7, #11]
 8014734:	2324      	movs	r3, #36	; 0x24
 8014736:	2205      	movs	r2, #5
 8014738:	68f8      	ldr	r0, [r7, #12]
 801473a:	f7ff ff87 	bl	801464c <SCSI_SenseCode>

    return -1;
 801473e:	f04f 33ff 	mov.w	r3, #4294967295
 8014742:	e02c      	b.n	801479e <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	3304      	adds	r3, #4
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	f003 0303 	and.w	r3, r3, #3
 801474e:	2b01      	cmp	r3, #1
 8014750:	d106      	bne.n	8014760 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014752:	697a      	ldr	r2, [r7, #20]
 8014754:	f248 0362 	movw	r3, #32866	; 0x8062
 8014758:	4413      	add	r3, r2
 801475a:	2200      	movs	r2, #0
 801475c:	701a      	strb	r2, [r3, #0]
 801475e:	e01a      	b.n	8014796 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	3304      	adds	r3, #4
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	f003 0303 	and.w	r3, r3, #3
 801476a:	2b02      	cmp	r3, #2
 801476c:	d106      	bne.n	801477c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801476e:	697a      	ldr	r2, [r7, #20]
 8014770:	f248 0362 	movw	r3, #32866	; 0x8062
 8014774:	4413      	add	r3, r2
 8014776:	2202      	movs	r2, #2
 8014778:	701a      	strb	r2, [r3, #0]
 801477a:	e00c      	b.n	8014796 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	3304      	adds	r3, #4
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	f003 0303 	and.w	r3, r3, #3
 8014786:	2b03      	cmp	r3, #3
 8014788:	d105      	bne.n	8014796 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801478a:	697a      	ldr	r2, [r7, #20]
 801478c:	f248 0362 	movw	r3, #32866	; 0x8062
 8014790:	4413      	add	r3, r2
 8014792:	2200      	movs	r2, #0
 8014794:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	2200      	movs	r2, #0
 801479a:	60da      	str	r2, [r3, #12]

  return 0;
 801479c:	2300      	movs	r3, #0
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3718      	adds	r7, #24
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80147a6:	b480      	push	{r7}
 80147a8:	b087      	sub	sp, #28
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	60f8      	str	r0, [r7, #12]
 80147ae:	460b      	mov	r3, r1
 80147b0:	607a      	str	r2, [r7, #4]
 80147b2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80147ba:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	3304      	adds	r3, #4
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d106      	bne.n	80147d4 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80147c6:	697a      	ldr	r2, [r7, #20]
 80147c8:	f248 0362 	movw	r3, #32866	; 0x8062
 80147cc:	4413      	add	r3, r2
 80147ce:	2200      	movs	r2, #0
 80147d0:	701a      	strb	r2, [r3, #0]
 80147d2:	e005      	b.n	80147e0 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80147d4:	697a      	ldr	r2, [r7, #20]
 80147d6:	f248 0362 	movw	r3, #32866	; 0x8062
 80147da:	4413      	add	r3, r2
 80147dc:	2201      	movs	r2, #1
 80147de:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	2200      	movs	r2, #0
 80147e4:	60da      	str	r2, [r3, #12]

  return 0;
 80147e6:	2300      	movs	r3, #0
}
 80147e8:	4618      	mov	r0, r3
 80147ea:	371c      	adds	r7, #28
 80147ec:	46bd      	mov	sp, r7
 80147ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f2:	4770      	bx	lr

080147f4 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b086      	sub	sp, #24
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	460b      	mov	r3, r1
 80147fe:	607a      	str	r2, [r7, #4]
 8014800:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014808:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	7a1b      	ldrb	r3, [r3, #8]
 801480e:	2b00      	cmp	r3, #0
 8014810:	f040 8094 	bne.w	801493c <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014814:	697a      	ldr	r2, [r7, #20]
 8014816:	f248 031c 	movw	r3, #32796	; 0x801c
 801481a:	4413      	add	r3, r2
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	b25b      	sxtb	r3, r3
 8014820:	2b00      	cmp	r3, #0
 8014822:	db0c      	blt.n	801483e <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014824:	697a      	ldr	r2, [r7, #20]
 8014826:	f248 031d 	movw	r3, #32797	; 0x801d
 801482a:	4413      	add	r3, r2
 801482c:	7819      	ldrb	r1, [r3, #0]
 801482e:	2320      	movs	r3, #32
 8014830:	2205      	movs	r2, #5
 8014832:	68f8      	ldr	r0, [r7, #12]
 8014834:	f7ff ff0a 	bl	801464c <SCSI_SenseCode>
      return -1;
 8014838:	f04f 33ff 	mov.w	r3, #4294967295
 801483c:	e088      	b.n	8014950 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801483e:	697a      	ldr	r2, [r7, #20]
 8014840:	f248 0362 	movw	r3, #32866	; 0x8062
 8014844:	4413      	add	r3, r2
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	2b02      	cmp	r3, #2
 801484a:	d108      	bne.n	801485e <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801484c:	7af9      	ldrb	r1, [r7, #11]
 801484e:	233a      	movs	r3, #58	; 0x3a
 8014850:	2202      	movs	r2, #2
 8014852:	68f8      	ldr	r0, [r7, #12]
 8014854:	f7ff fefa 	bl	801464c <SCSI_SenseCode>

      return -1;
 8014858:	f04f 33ff 	mov.w	r3, #4294967295
 801485c:	e078      	b.n	8014950 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014864:	689b      	ldr	r3, [r3, #8]
 8014866:	7afa      	ldrb	r2, [r7, #11]
 8014868:	4610      	mov	r0, r2
 801486a:	4798      	blx	r3
 801486c:	4603      	mov	r3, r0
 801486e:	2b00      	cmp	r3, #0
 8014870:	d008      	beq.n	8014884 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014872:	7af9      	ldrb	r1, [r7, #11]
 8014874:	233a      	movs	r3, #58	; 0x3a
 8014876:	2202      	movs	r2, #2
 8014878:	68f8      	ldr	r0, [r7, #12]
 801487a:	f7ff fee7 	bl	801464c <SCSI_SenseCode>
      return -1;
 801487e:	f04f 33ff 	mov.w	r3, #4294967295
 8014882:	e065      	b.n	8014950 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	3302      	adds	r3, #2
 8014888:	781b      	ldrb	r3, [r3, #0]
 801488a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	3303      	adds	r3, #3
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014894:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	3304      	adds	r3, #4
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801489e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80148a0:	687a      	ldr	r2, [r7, #4]
 80148a2:	3205      	adds	r2, #5
 80148a4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80148a6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80148a8:	6979      	ldr	r1, [r7, #20]
 80148aa:	f248 036c 	movw	r3, #32876	; 0x806c
 80148ae:	440b      	add	r3, r1
 80148b0:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	3307      	adds	r3, #7
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	021b      	lsls	r3, r3, #8
 80148ba:	687a      	ldr	r2, [r7, #4]
 80148bc:	3208      	adds	r2, #8
 80148be:	7812      	ldrb	r2, [r2, #0]
 80148c0:	431a      	orrs	r2, r3
 80148c2:	6979      	ldr	r1, [r7, #20]
 80148c4:	f248 0370 	movw	r3, #32880	; 0x8070
 80148c8:	440b      	add	r3, r1
 80148ca:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80148cc:	697a      	ldr	r2, [r7, #20]
 80148ce:	f248 036c 	movw	r3, #32876	; 0x806c
 80148d2:	4413      	add	r3, r2
 80148d4:	6818      	ldr	r0, [r3, #0]
 80148d6:	697a      	ldr	r2, [r7, #20]
 80148d8:	f248 0370 	movw	r3, #32880	; 0x8070
 80148dc:	4413      	add	r3, r2
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	7af9      	ldrb	r1, [r7, #11]
 80148e2:	4602      	mov	r2, r0
 80148e4:	68f8      	ldr	r0, [r7, #12]
 80148e6:	f000 faeb 	bl	8014ec0 <SCSI_CheckAddressRange>
 80148ea:	4603      	mov	r3, r0
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	da02      	bge.n	80148f6 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80148f0:	f04f 33ff 	mov.w	r3, #4294967295
 80148f4:	e02c      	b.n	8014950 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80148f6:	697a      	ldr	r2, [r7, #20]
 80148f8:	f248 0318 	movw	r3, #32792	; 0x8018
 80148fc:	4413      	add	r3, r2
 80148fe:	681a      	ldr	r2, [r3, #0]
 8014900:	6979      	ldr	r1, [r7, #20]
 8014902:	f248 0370 	movw	r3, #32880	; 0x8070
 8014906:	440b      	add	r3, r1
 8014908:	6819      	ldr	r1, [r3, #0]
 801490a:	6978      	ldr	r0, [r7, #20]
 801490c:	f248 0364 	movw	r3, #32868	; 0x8064
 8014910:	4403      	add	r3, r0
 8014912:	881b      	ldrh	r3, [r3, #0]
 8014914:	fb03 f301 	mul.w	r3, r3, r1
 8014918:	429a      	cmp	r2, r3
 801491a:	d00c      	beq.n	8014936 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801491c:	697a      	ldr	r2, [r7, #20]
 801491e:	f248 031d 	movw	r3, #32797	; 0x801d
 8014922:	4413      	add	r3, r2
 8014924:	7819      	ldrb	r1, [r3, #0]
 8014926:	2320      	movs	r3, #32
 8014928:	2205      	movs	r2, #5
 801492a:	68f8      	ldr	r0, [r7, #12]
 801492c:	f7ff fe8e 	bl	801464c <SCSI_SenseCode>
      return -1;
 8014930:	f04f 33ff 	mov.w	r3, #4294967295
 8014934:	e00c      	b.n	8014950 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	2202      	movs	r2, #2
 801493a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014942:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014944:	7afb      	ldrb	r3, [r7, #11]
 8014946:	4619      	mov	r1, r3
 8014948:	68f8      	ldr	r0, [r7, #12]
 801494a:	f000 fadd 	bl	8014f08 <SCSI_ProcessRead>
 801494e:	4603      	mov	r3, r0
}
 8014950:	4618      	mov	r0, r3
 8014952:	3718      	adds	r7, #24
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b086      	sub	sp, #24
 801495c:	af00      	add	r7, sp, #0
 801495e:	60f8      	str	r0, [r7, #12]
 8014960:	460b      	mov	r3, r1
 8014962:	607a      	str	r2, [r7, #4]
 8014964:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801496c:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	7a1b      	ldrb	r3, [r3, #8]
 8014972:	2b00      	cmp	r3, #0
 8014974:	f040 809e 	bne.w	8014ab4 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014978:	697a      	ldr	r2, [r7, #20]
 801497a:	f248 031c 	movw	r3, #32796	; 0x801c
 801497e:	4413      	add	r3, r2
 8014980:	781b      	ldrb	r3, [r3, #0]
 8014982:	b25b      	sxtb	r3, r3
 8014984:	2b00      	cmp	r3, #0
 8014986:	db0c      	blt.n	80149a2 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014988:	697a      	ldr	r2, [r7, #20]
 801498a:	f248 031d 	movw	r3, #32797	; 0x801d
 801498e:	4413      	add	r3, r2
 8014990:	7819      	ldrb	r1, [r3, #0]
 8014992:	2320      	movs	r3, #32
 8014994:	2205      	movs	r2, #5
 8014996:	68f8      	ldr	r0, [r7, #12]
 8014998:	f7ff fe58 	bl	801464c <SCSI_SenseCode>
      return -1;
 801499c:	f04f 33ff 	mov.w	r3, #4294967295
 80149a0:	e092      	b.n	8014ac8 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80149a2:	697a      	ldr	r2, [r7, #20]
 80149a4:	f248 0362 	movw	r3, #32866	; 0x8062
 80149a8:	4413      	add	r3, r2
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	2b02      	cmp	r3, #2
 80149ae:	d108      	bne.n	80149c2 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149b0:	7af9      	ldrb	r1, [r7, #11]
 80149b2:	233a      	movs	r3, #58	; 0x3a
 80149b4:	2202      	movs	r2, #2
 80149b6:	68f8      	ldr	r0, [r7, #12]
 80149b8:	f7ff fe48 	bl	801464c <SCSI_SenseCode>
      return -1;
 80149bc:	f04f 33ff 	mov.w	r3, #4294967295
 80149c0:	e082      	b.n	8014ac8 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80149c8:	689b      	ldr	r3, [r3, #8]
 80149ca:	7afa      	ldrb	r2, [r7, #11]
 80149cc:	4610      	mov	r0, r2
 80149ce:	4798      	blx	r3
 80149d0:	4603      	mov	r3, r0
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d008      	beq.n	80149e8 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149d6:	7af9      	ldrb	r1, [r7, #11]
 80149d8:	233a      	movs	r3, #58	; 0x3a
 80149da:	2202      	movs	r2, #2
 80149dc:	68f8      	ldr	r0, [r7, #12]
 80149de:	f7ff fe35 	bl	801464c <SCSI_SenseCode>
      return -1;
 80149e2:	f04f 33ff 	mov.w	r3, #4294967295
 80149e6:	e06f      	b.n	8014ac8 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	3302      	adds	r3, #2
 80149ec:	781b      	ldrb	r3, [r3, #0]
 80149ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	3303      	adds	r3, #3
 80149f4:	781b      	ldrb	r3, [r3, #0]
 80149f6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80149f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	3304      	adds	r3, #4
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014a02:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	3205      	adds	r2, #5
 8014a08:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014a0a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a0c:	6979      	ldr	r1, [r7, #20]
 8014a0e:	f248 036c 	movw	r3, #32876	; 0x806c
 8014a12:	440b      	add	r3, r1
 8014a14:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	3306      	adds	r3, #6
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	3307      	adds	r3, #7
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014a26:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	3308      	adds	r3, #8
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014a30:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014a32:	687a      	ldr	r2, [r7, #4]
 8014a34:	3209      	adds	r2, #9
 8014a36:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014a38:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014a3a:	6979      	ldr	r1, [r7, #20]
 8014a3c:	f248 0370 	movw	r3, #32880	; 0x8070
 8014a40:	440b      	add	r3, r1
 8014a42:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014a44:	697a      	ldr	r2, [r7, #20]
 8014a46:	f248 036c 	movw	r3, #32876	; 0x806c
 8014a4a:	4413      	add	r3, r2
 8014a4c:	6818      	ldr	r0, [r3, #0]
 8014a4e:	697a      	ldr	r2, [r7, #20]
 8014a50:	f248 0370 	movw	r3, #32880	; 0x8070
 8014a54:	4413      	add	r3, r2
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	7af9      	ldrb	r1, [r7, #11]
 8014a5a:	4602      	mov	r2, r0
 8014a5c:	68f8      	ldr	r0, [r7, #12]
 8014a5e:	f000 fa2f 	bl	8014ec0 <SCSI_CheckAddressRange>
 8014a62:	4603      	mov	r3, r0
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	da02      	bge.n	8014a6e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014a68:	f04f 33ff 	mov.w	r3, #4294967295
 8014a6c:	e02c      	b.n	8014ac8 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014a6e:	697a      	ldr	r2, [r7, #20]
 8014a70:	f248 0318 	movw	r3, #32792	; 0x8018
 8014a74:	4413      	add	r3, r2
 8014a76:	681a      	ldr	r2, [r3, #0]
 8014a78:	6979      	ldr	r1, [r7, #20]
 8014a7a:	f248 0370 	movw	r3, #32880	; 0x8070
 8014a7e:	440b      	add	r3, r1
 8014a80:	6819      	ldr	r1, [r3, #0]
 8014a82:	6978      	ldr	r0, [r7, #20]
 8014a84:	f248 0364 	movw	r3, #32868	; 0x8064
 8014a88:	4403      	add	r3, r0
 8014a8a:	881b      	ldrh	r3, [r3, #0]
 8014a8c:	fb03 f301 	mul.w	r3, r3, r1
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d00c      	beq.n	8014aae <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014a94:	697a      	ldr	r2, [r7, #20]
 8014a96:	f248 031d 	movw	r3, #32797	; 0x801d
 8014a9a:	4413      	add	r3, r2
 8014a9c:	7819      	ldrb	r1, [r3, #0]
 8014a9e:	2320      	movs	r3, #32
 8014aa0:	2205      	movs	r2, #5
 8014aa2:	68f8      	ldr	r0, [r7, #12]
 8014aa4:	f7ff fdd2 	bl	801464c <SCSI_SenseCode>
      return -1;
 8014aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8014aac:	e00c      	b.n	8014ac8 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	2202      	movs	r2, #2
 8014ab2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014ab4:	697b      	ldr	r3, [r7, #20]
 8014ab6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014aba:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014abc:	7afb      	ldrb	r3, [r7, #11]
 8014abe:	4619      	mov	r1, r3
 8014ac0:	68f8      	ldr	r0, [r7, #12]
 8014ac2:	f000 fa21 	bl	8014f08 <SCSI_ProcessRead>
 8014ac6:	4603      	mov	r3, r0
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3718      	adds	r7, #24
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}

08014ad0 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b086      	sub	sp, #24
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	460b      	mov	r3, r1
 8014ada:	607a      	str	r2, [r7, #4]
 8014adc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ae4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014ae6:	697b      	ldr	r3, [r7, #20]
 8014ae8:	7a1b      	ldrb	r3, [r3, #8]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	f040 80be 	bne.w	8014c6c <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014af0:	697a      	ldr	r2, [r7, #20]
 8014af2:	f248 0318 	movw	r3, #32792	; 0x8018
 8014af6:	4413      	add	r3, r2
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d10c      	bne.n	8014b18 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014afe:	697a      	ldr	r2, [r7, #20]
 8014b00:	f248 031d 	movw	r3, #32797	; 0x801d
 8014b04:	4413      	add	r3, r2
 8014b06:	7819      	ldrb	r1, [r3, #0]
 8014b08:	2320      	movs	r3, #32
 8014b0a:	2205      	movs	r2, #5
 8014b0c:	68f8      	ldr	r0, [r7, #12]
 8014b0e:	f7ff fd9d 	bl	801464c <SCSI_SenseCode>
      return -1;
 8014b12:	f04f 33ff 	mov.w	r3, #4294967295
 8014b16:	e0af      	b.n	8014c78 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014b18:	697a      	ldr	r2, [r7, #20]
 8014b1a:	f248 031c 	movw	r3, #32796	; 0x801c
 8014b1e:	4413      	add	r3, r2
 8014b20:	781b      	ldrb	r3, [r3, #0]
 8014b22:	b25b      	sxtb	r3, r3
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	da0c      	bge.n	8014b42 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b28:	697a      	ldr	r2, [r7, #20]
 8014b2a:	f248 031d 	movw	r3, #32797	; 0x801d
 8014b2e:	4413      	add	r3, r2
 8014b30:	7819      	ldrb	r1, [r3, #0]
 8014b32:	2320      	movs	r3, #32
 8014b34:	2205      	movs	r2, #5
 8014b36:	68f8      	ldr	r0, [r7, #12]
 8014b38:	f7ff fd88 	bl	801464c <SCSI_SenseCode>
      return -1;
 8014b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b40:	e09a      	b.n	8014c78 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b48:	689b      	ldr	r3, [r3, #8]
 8014b4a:	7afa      	ldrb	r2, [r7, #11]
 8014b4c:	4610      	mov	r0, r2
 8014b4e:	4798      	blx	r3
 8014b50:	4603      	mov	r3, r0
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d008      	beq.n	8014b68 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b56:	7af9      	ldrb	r1, [r7, #11]
 8014b58:	233a      	movs	r3, #58	; 0x3a
 8014b5a:	2202      	movs	r2, #2
 8014b5c:	68f8      	ldr	r0, [r7, #12]
 8014b5e:	f7ff fd75 	bl	801464c <SCSI_SenseCode>
      return -1;
 8014b62:	f04f 33ff 	mov.w	r3, #4294967295
 8014b66:	e087      	b.n	8014c78 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b6e:	68db      	ldr	r3, [r3, #12]
 8014b70:	7afa      	ldrb	r2, [r7, #11]
 8014b72:	4610      	mov	r0, r2
 8014b74:	4798      	blx	r3
 8014b76:	4603      	mov	r3, r0
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d008      	beq.n	8014b8e <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014b7c:	7af9      	ldrb	r1, [r7, #11]
 8014b7e:	2327      	movs	r3, #39	; 0x27
 8014b80:	2202      	movs	r2, #2
 8014b82:	68f8      	ldr	r0, [r7, #12]
 8014b84:	f7ff fd62 	bl	801464c <SCSI_SenseCode>
      return -1;
 8014b88:	f04f 33ff 	mov.w	r3, #4294967295
 8014b8c:	e074      	b.n	8014c78 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	3302      	adds	r3, #2
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	3303      	adds	r3, #3
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b9e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	3304      	adds	r3, #4
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014ba8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014baa:	687a      	ldr	r2, [r7, #4]
 8014bac:	3205      	adds	r2, #5
 8014bae:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014bb0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014bb2:	6979      	ldr	r1, [r7, #20]
 8014bb4:	f248 036c 	movw	r3, #32876	; 0x806c
 8014bb8:	440b      	add	r3, r1
 8014bba:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	3307      	adds	r3, #7
 8014bc0:	781b      	ldrb	r3, [r3, #0]
 8014bc2:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014bc4:	687a      	ldr	r2, [r7, #4]
 8014bc6:	3208      	adds	r2, #8
 8014bc8:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014bca:	431a      	orrs	r2, r3
 8014bcc:	6979      	ldr	r1, [r7, #20]
 8014bce:	f248 0370 	movw	r3, #32880	; 0x8070
 8014bd2:	440b      	add	r3, r1
 8014bd4:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014bd6:	697a      	ldr	r2, [r7, #20]
 8014bd8:	f248 036c 	movw	r3, #32876	; 0x806c
 8014bdc:	4413      	add	r3, r2
 8014bde:	6818      	ldr	r0, [r3, #0]
 8014be0:	697a      	ldr	r2, [r7, #20]
 8014be2:	f248 0370 	movw	r3, #32880	; 0x8070
 8014be6:	4413      	add	r3, r2
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	7af9      	ldrb	r1, [r7, #11]
 8014bec:	4602      	mov	r2, r0
 8014bee:	68f8      	ldr	r0, [r7, #12]
 8014bf0:	f000 f966 	bl	8014ec0 <SCSI_CheckAddressRange>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	da02      	bge.n	8014c00 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8014bfe:	e03b      	b.n	8014c78 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014c00:	697a      	ldr	r2, [r7, #20]
 8014c02:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c06:	4413      	add	r3, r2
 8014c08:	681a      	ldr	r2, [r3, #0]
 8014c0a:	6979      	ldr	r1, [r7, #20]
 8014c0c:	f248 0364 	movw	r3, #32868	; 0x8064
 8014c10:	440b      	add	r3, r1
 8014c12:	881b      	ldrh	r3, [r3, #0]
 8014c14:	fb03 f302 	mul.w	r3, r3, r2
 8014c18:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014c1a:	697a      	ldr	r2, [r7, #20]
 8014c1c:	f248 0318 	movw	r3, #32792	; 0x8018
 8014c20:	4413      	add	r3, r2
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	693a      	ldr	r2, [r7, #16]
 8014c26:	429a      	cmp	r2, r3
 8014c28:	d00c      	beq.n	8014c44 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c2a:	697a      	ldr	r2, [r7, #20]
 8014c2c:	f248 031d 	movw	r3, #32797	; 0x801d
 8014c30:	4413      	add	r3, r2
 8014c32:	7819      	ldrb	r1, [r3, #0]
 8014c34:	2320      	movs	r3, #32
 8014c36:	2205      	movs	r2, #5
 8014c38:	68f8      	ldr	r0, [r7, #12]
 8014c3a:	f7ff fd07 	bl	801464c <SCSI_SenseCode>
      return -1;
 8014c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c42:	e019      	b.n	8014c78 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c4a:	bf28      	it	cs
 8014c4c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014c50:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014c52:	697b      	ldr	r3, [r7, #20]
 8014c54:	2201      	movs	r2, #1
 8014c56:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014c58:	697b      	ldr	r3, [r7, #20]
 8014c5a:	f103 0210 	add.w	r2, r3, #16
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	2101      	movs	r1, #1
 8014c62:	68f8      	ldr	r0, [r7, #12]
 8014c64:	f004 fb19 	bl	801929a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014c68:	2300      	movs	r3, #0
 8014c6a:	e005      	b.n	8014c78 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8014c6c:	7afb      	ldrb	r3, [r7, #11]
 8014c6e:	4619      	mov	r1, r3
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f000 f9d7 	bl	8015024 <SCSI_ProcessWrite>
 8014c76:	4603      	mov	r3, r0
}
 8014c78:	4618      	mov	r0, r3
 8014c7a:	3718      	adds	r7, #24
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}

08014c80 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b086      	sub	sp, #24
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	60f8      	str	r0, [r7, #12]
 8014c88:	460b      	mov	r3, r1
 8014c8a:	607a      	str	r2, [r7, #4]
 8014c8c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c94:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	7a1b      	ldrb	r3, [r3, #8]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	f040 80ce 	bne.w	8014e3c <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014ca0:	697a      	ldr	r2, [r7, #20]
 8014ca2:	f248 0318 	movw	r3, #32792	; 0x8018
 8014ca6:	4413      	add	r3, r2
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d10c      	bne.n	8014cc8 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014cae:	697a      	ldr	r2, [r7, #20]
 8014cb0:	f248 031d 	movw	r3, #32797	; 0x801d
 8014cb4:	4413      	add	r3, r2
 8014cb6:	7819      	ldrb	r1, [r3, #0]
 8014cb8:	2320      	movs	r3, #32
 8014cba:	2205      	movs	r2, #5
 8014cbc:	68f8      	ldr	r0, [r7, #12]
 8014cbe:	f7ff fcc5 	bl	801464c <SCSI_SenseCode>
      return -1;
 8014cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8014cc6:	e0bf      	b.n	8014e48 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014cc8:	697a      	ldr	r2, [r7, #20]
 8014cca:	f248 031c 	movw	r3, #32796	; 0x801c
 8014cce:	4413      	add	r3, r2
 8014cd0:	781b      	ldrb	r3, [r3, #0]
 8014cd2:	b25b      	sxtb	r3, r3
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	da0c      	bge.n	8014cf2 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014cd8:	697a      	ldr	r2, [r7, #20]
 8014cda:	f248 031d 	movw	r3, #32797	; 0x801d
 8014cde:	4413      	add	r3, r2
 8014ce0:	7819      	ldrb	r1, [r3, #0]
 8014ce2:	2320      	movs	r3, #32
 8014ce4:	2205      	movs	r2, #5
 8014ce6:	68f8      	ldr	r0, [r7, #12]
 8014ce8:	f7ff fcb0 	bl	801464c <SCSI_SenseCode>
      return -1;
 8014cec:	f04f 33ff 	mov.w	r3, #4294967295
 8014cf0:	e0aa      	b.n	8014e48 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014cf8:	689b      	ldr	r3, [r3, #8]
 8014cfa:	7afa      	ldrb	r2, [r7, #11]
 8014cfc:	4610      	mov	r0, r2
 8014cfe:	4798      	blx	r3
 8014d00:	4603      	mov	r3, r0
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d00b      	beq.n	8014d1e <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014d06:	7af9      	ldrb	r1, [r7, #11]
 8014d08:	233a      	movs	r3, #58	; 0x3a
 8014d0a:	2202      	movs	r2, #2
 8014d0c:	68f8      	ldr	r0, [r7, #12]
 8014d0e:	f7ff fc9d 	bl	801464c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	2205      	movs	r2, #5
 8014d16:	721a      	strb	r2, [r3, #8]
      return -1;
 8014d18:	f04f 33ff 	mov.w	r3, #4294967295
 8014d1c:	e094      	b.n	8014e48 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d24:	68db      	ldr	r3, [r3, #12]
 8014d26:	7afa      	ldrb	r2, [r7, #11]
 8014d28:	4610      	mov	r0, r2
 8014d2a:	4798      	blx	r3
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d00b      	beq.n	8014d4a <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014d32:	7af9      	ldrb	r1, [r7, #11]
 8014d34:	2327      	movs	r3, #39	; 0x27
 8014d36:	2202      	movs	r2, #2
 8014d38:	68f8      	ldr	r0, [r7, #12]
 8014d3a:	f7ff fc87 	bl	801464c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	2205      	movs	r2, #5
 8014d42:	721a      	strb	r2, [r3, #8]
      return -1;
 8014d44:	f04f 33ff 	mov.w	r3, #4294967295
 8014d48:	e07e      	b.n	8014e48 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	3302      	adds	r3, #2
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	3303      	adds	r3, #3
 8014d56:	781b      	ldrb	r3, [r3, #0]
 8014d58:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d5a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	3304      	adds	r3, #4
 8014d60:	781b      	ldrb	r3, [r3, #0]
 8014d62:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014d64:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	3205      	adds	r2, #5
 8014d6a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014d6c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d6e:	6979      	ldr	r1, [r7, #20]
 8014d70:	f248 036c 	movw	r3, #32876	; 0x806c
 8014d74:	440b      	add	r3, r1
 8014d76:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	3306      	adds	r3, #6
 8014d7c:	781b      	ldrb	r3, [r3, #0]
 8014d7e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	3307      	adds	r3, #7
 8014d84:	781b      	ldrb	r3, [r3, #0]
 8014d86:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014d88:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	3308      	adds	r3, #8
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014d92:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014d94:	687a      	ldr	r2, [r7, #4]
 8014d96:	3209      	adds	r2, #9
 8014d98:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014d9a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014d9c:	6979      	ldr	r1, [r7, #20]
 8014d9e:	f248 0370 	movw	r3, #32880	; 0x8070
 8014da2:	440b      	add	r3, r1
 8014da4:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014da6:	697a      	ldr	r2, [r7, #20]
 8014da8:	f248 036c 	movw	r3, #32876	; 0x806c
 8014dac:	4413      	add	r3, r2
 8014dae:	6818      	ldr	r0, [r3, #0]
 8014db0:	697a      	ldr	r2, [r7, #20]
 8014db2:	f248 0370 	movw	r3, #32880	; 0x8070
 8014db6:	4413      	add	r3, r2
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	7af9      	ldrb	r1, [r7, #11]
 8014dbc:	4602      	mov	r2, r0
 8014dbe:	68f8      	ldr	r0, [r7, #12]
 8014dc0:	f000 f87e 	bl	8014ec0 <SCSI_CheckAddressRange>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	da02      	bge.n	8014dd0 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014dca:	f04f 33ff 	mov.w	r3, #4294967295
 8014dce:	e03b      	b.n	8014e48 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014dd0:	697a      	ldr	r2, [r7, #20]
 8014dd2:	f248 0370 	movw	r3, #32880	; 0x8070
 8014dd6:	4413      	add	r3, r2
 8014dd8:	681a      	ldr	r2, [r3, #0]
 8014dda:	6979      	ldr	r1, [r7, #20]
 8014ddc:	f248 0364 	movw	r3, #32868	; 0x8064
 8014de0:	440b      	add	r3, r1
 8014de2:	881b      	ldrh	r3, [r3, #0]
 8014de4:	fb03 f302 	mul.w	r3, r3, r2
 8014de8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014dea:	697a      	ldr	r2, [r7, #20]
 8014dec:	f248 0318 	movw	r3, #32792	; 0x8018
 8014df0:	4413      	add	r3, r2
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	693a      	ldr	r2, [r7, #16]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d00c      	beq.n	8014e14 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014dfa:	697a      	ldr	r2, [r7, #20]
 8014dfc:	f248 031d 	movw	r3, #32797	; 0x801d
 8014e00:	4413      	add	r3, r2
 8014e02:	7819      	ldrb	r1, [r3, #0]
 8014e04:	2320      	movs	r3, #32
 8014e06:	2205      	movs	r2, #5
 8014e08:	68f8      	ldr	r0, [r7, #12]
 8014e0a:	f7ff fc1f 	bl	801464c <SCSI_SenseCode>
      return -1;
 8014e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e12:	e019      	b.n	8014e48 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014e14:	693b      	ldr	r3, [r7, #16]
 8014e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014e1a:	bf28      	it	cs
 8014e1c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014e20:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014e22:	697b      	ldr	r3, [r7, #20]
 8014e24:	2201      	movs	r2, #1
 8014e26:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	f103 0210 	add.w	r2, r3, #16
 8014e2e:	693b      	ldr	r3, [r7, #16]
 8014e30:	2101      	movs	r1, #1
 8014e32:	68f8      	ldr	r0, [r7, #12]
 8014e34:	f004 fa31 	bl	801929a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	e005      	b.n	8014e48 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8014e3c:	7afb      	ldrb	r3, [r7, #11]
 8014e3e:	4619      	mov	r1, r3
 8014e40:	68f8      	ldr	r0, [r7, #12]
 8014e42:	f000 f8ef 	bl	8015024 <SCSI_ProcessWrite>
 8014e46:	4603      	mov	r3, r0
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3718      	adds	r7, #24
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}

08014e50 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b086      	sub	sp, #24
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	60f8      	str	r0, [r7, #12]
 8014e58:	460b      	mov	r3, r1
 8014e5a:	607a      	str	r2, [r7, #4]
 8014e5c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e64:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	3301      	adds	r3, #1
 8014e6a:	781b      	ldrb	r3, [r3, #0]
 8014e6c:	f003 0302 	and.w	r3, r3, #2
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d008      	beq.n	8014e86 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014e74:	7af9      	ldrb	r1, [r7, #11]
 8014e76:	2324      	movs	r3, #36	; 0x24
 8014e78:	2205      	movs	r2, #5
 8014e7a:	68f8      	ldr	r0, [r7, #12]
 8014e7c:	f7ff fbe6 	bl	801464c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8014e80:	f04f 33ff 	mov.w	r3, #4294967295
 8014e84:	e018      	b.n	8014eb8 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8014e86:	697a      	ldr	r2, [r7, #20]
 8014e88:	f248 036c 	movw	r3, #32876	; 0x806c
 8014e8c:	4413      	add	r3, r2
 8014e8e:	6818      	ldr	r0, [r3, #0]
 8014e90:	697a      	ldr	r2, [r7, #20]
 8014e92:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e96:	4413      	add	r3, r2
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	7af9      	ldrb	r1, [r7, #11]
 8014e9c:	4602      	mov	r2, r0
 8014e9e:	68f8      	ldr	r0, [r7, #12]
 8014ea0:	f000 f80e 	bl	8014ec0 <SCSI_CheckAddressRange>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	da02      	bge.n	8014eb0 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8014eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8014eae:	e003      	b.n	8014eb8 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	60da      	str	r2, [r3, #12]

  return 0;
 8014eb6:	2300      	movs	r3, #0
}
 8014eb8:	4618      	mov	r0, r3
 8014eba:	3718      	adds	r7, #24
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bd80      	pop	{r7, pc}

08014ec0 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b086      	sub	sp, #24
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	60f8      	str	r0, [r7, #12]
 8014ec8:	607a      	str	r2, [r7, #4]
 8014eca:	603b      	str	r3, [r7, #0]
 8014ecc:	460b      	mov	r3, r1
 8014ece:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ed6:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8014ed8:	687a      	ldr	r2, [r7, #4]
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	441a      	add	r2, r3
 8014ede:	6979      	ldr	r1, [r7, #20]
 8014ee0:	f248 0368 	movw	r3, #32872	; 0x8068
 8014ee4:	440b      	add	r3, r1
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d908      	bls.n	8014efe <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8014eec:	7af9      	ldrb	r1, [r7, #11]
 8014eee:	2321      	movs	r3, #33	; 0x21
 8014ef0:	2205      	movs	r2, #5
 8014ef2:	68f8      	ldr	r0, [r7, #12]
 8014ef4:	f7ff fbaa 	bl	801464c <SCSI_SenseCode>
    return -1;
 8014ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8014efc:	e000      	b.n	8014f00 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8014efe:	2300      	movs	r3, #0
}
 8014f00:	4618      	mov	r0, r3
 8014f02:	3718      	adds	r7, #24
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}

08014f08 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8014f08:	b5b0      	push	{r4, r5, r7, lr}
 8014f0a:	b084      	sub	sp, #16
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	460b      	mov	r3, r1
 8014f12:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f1a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014f1c:	68fa      	ldr	r2, [r7, #12]
 8014f1e:	f248 0370 	movw	r3, #32880	; 0x8070
 8014f22:	4413      	add	r3, r2
 8014f24:	681a      	ldr	r2, [r3, #0]
 8014f26:	68f9      	ldr	r1, [r7, #12]
 8014f28:	f248 0364 	movw	r3, #32868	; 0x8064
 8014f2c:	440b      	add	r3, r1
 8014f2e:	881b      	ldrh	r3, [r3, #0]
 8014f30:	fb03 f302 	mul.w	r3, r3, r2
 8014f34:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8014f36:	68bb      	ldr	r3, [r7, #8]
 8014f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014f3c:	bf28      	it	cs
 8014f3e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014f42:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014f4a:	691c      	ldr	r4, [r3, #16]
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	f103 0110 	add.w	r1, r3, #16
 8014f52:	68fa      	ldr	r2, [r7, #12]
 8014f54:	f248 036c 	movw	r3, #32876	; 0x806c
 8014f58:	4413      	add	r3, r2
 8014f5a:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014f62:	4413      	add	r3, r2
 8014f64:	881b      	ldrh	r3, [r3, #0]
 8014f66:	461a      	mov	r2, r3
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8014f6e:	b29b      	uxth	r3, r3
 8014f70:	78f8      	ldrb	r0, [r7, #3]
 8014f72:	462a      	mov	r2, r5
 8014f74:	47a0      	blx	r4
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	da08      	bge.n	8014f8e <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8014f7c:	78f9      	ldrb	r1, [r7, #3]
 8014f7e:	2311      	movs	r3, #17
 8014f80:	2204      	movs	r2, #4
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f7ff fb62 	bl	801464c <SCSI_SenseCode>
    return -1;
 8014f88:	f04f 33ff 	mov.w	r3, #4294967295
 8014f8c:	e046      	b.n	801501c <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	f103 0210 	add.w	r2, r3, #16
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	2181      	movs	r1, #129	; 0x81
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f004 f95d 	bl	8019258 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8014f9e:	68fa      	ldr	r2, [r7, #12]
 8014fa0:	f248 036c 	movw	r3, #32876	; 0x806c
 8014fa4:	4413      	add	r3, r2
 8014fa6:	681a      	ldr	r2, [r3, #0]
 8014fa8:	68f9      	ldr	r1, [r7, #12]
 8014faa:	f248 0364 	movw	r3, #32868	; 0x8064
 8014fae:	440b      	add	r3, r1
 8014fb0:	881b      	ldrh	r3, [r3, #0]
 8014fb2:	4619      	mov	r1, r3
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8014fba:	441a      	add	r2, r3
 8014fbc:	68f9      	ldr	r1, [r7, #12]
 8014fbe:	f248 036c 	movw	r3, #32876	; 0x806c
 8014fc2:	440b      	add	r3, r1
 8014fc4:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8014fc6:	68fa      	ldr	r2, [r7, #12]
 8014fc8:	f248 0370 	movw	r3, #32880	; 0x8070
 8014fcc:	4413      	add	r3, r2
 8014fce:	681a      	ldr	r2, [r3, #0]
 8014fd0:	68f9      	ldr	r1, [r7, #12]
 8014fd2:	f248 0364 	movw	r3, #32868	; 0x8064
 8014fd6:	440b      	add	r3, r1
 8014fd8:	881b      	ldrh	r3, [r3, #0]
 8014fda:	4619      	mov	r1, r3
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8014fe2:	1ad2      	subs	r2, r2, r3
 8014fe4:	68f9      	ldr	r1, [r7, #12]
 8014fe6:	f248 0370 	movw	r3, #32880	; 0x8070
 8014fea:	440b      	add	r3, r1
 8014fec:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8014fee:	68fa      	ldr	r2, [r7, #12]
 8014ff0:	f248 0338 	movw	r3, #32824	; 0x8038
 8014ff4:	4413      	add	r3, r2
 8014ff6:	681a      	ldr	r2, [r3, #0]
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	1ad2      	subs	r2, r2, r3
 8014ffc:	68f9      	ldr	r1, [r7, #12]
 8014ffe:	f248 0338 	movw	r3, #32824	; 0x8038
 8015002:	440b      	add	r3, r1
 8015004:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8015006:	68fa      	ldr	r2, [r7, #12]
 8015008:	f248 0370 	movw	r3, #32880	; 0x8070
 801500c:	4413      	add	r3, r2
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d102      	bne.n	801501a <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2203      	movs	r2, #3
 8015018:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801501a:	2300      	movs	r3, #0
}
 801501c:	4618      	mov	r0, r3
 801501e:	3710      	adds	r7, #16
 8015020:	46bd      	mov	sp, r7
 8015022:	bdb0      	pop	{r4, r5, r7, pc}

08015024 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015024:	b5b0      	push	{r4, r5, r7, lr}
 8015026:	b084      	sub	sp, #16
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
 801502c:	460b      	mov	r3, r1
 801502e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015036:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015038:	68fa      	ldr	r2, [r7, #12]
 801503a:	f248 0370 	movw	r3, #32880	; 0x8070
 801503e:	4413      	add	r3, r2
 8015040:	681a      	ldr	r2, [r3, #0]
 8015042:	68f9      	ldr	r1, [r7, #12]
 8015044:	f248 0364 	movw	r3, #32868	; 0x8064
 8015048:	440b      	add	r3, r1
 801504a:	881b      	ldrh	r3, [r3, #0]
 801504c:	fb03 f302 	mul.w	r3, r3, r2
 8015050:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015058:	bf28      	it	cs
 801505a:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801505e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015066:	695c      	ldr	r4, [r3, #20]
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	f103 0110 	add.w	r1, r3, #16
 801506e:	68fa      	ldr	r2, [r7, #12]
 8015070:	f248 036c 	movw	r3, #32876	; 0x806c
 8015074:	4413      	add	r3, r2
 8015076:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8015078:	68fa      	ldr	r2, [r7, #12]
 801507a:	f248 0364 	movw	r3, #32868	; 0x8064
 801507e:	4413      	add	r3, r2
 8015080:	881b      	ldrh	r3, [r3, #0]
 8015082:	461a      	mov	r2, r3
 8015084:	68bb      	ldr	r3, [r7, #8]
 8015086:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801508a:	b29b      	uxth	r3, r3
 801508c:	78f8      	ldrb	r0, [r7, #3]
 801508e:	462a      	mov	r2, r5
 8015090:	47a0      	blx	r4
 8015092:	4603      	mov	r3, r0
 8015094:	2b00      	cmp	r3, #0
 8015096:	da08      	bge.n	80150aa <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8015098:	78f9      	ldrb	r1, [r7, #3]
 801509a:	2303      	movs	r3, #3
 801509c:	2204      	movs	r2, #4
 801509e:	6878      	ldr	r0, [r7, #4]
 80150a0:	f7ff fad4 	bl	801464c <SCSI_SenseCode>
    return -1;
 80150a4:	f04f 33ff 	mov.w	r3, #4294967295
 80150a8:	e05a      	b.n	8015160 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80150aa:	68fa      	ldr	r2, [r7, #12]
 80150ac:	f248 036c 	movw	r3, #32876	; 0x806c
 80150b0:	4413      	add	r3, r2
 80150b2:	681a      	ldr	r2, [r3, #0]
 80150b4:	68f9      	ldr	r1, [r7, #12]
 80150b6:	f248 0364 	movw	r3, #32868	; 0x8064
 80150ba:	440b      	add	r3, r1
 80150bc:	881b      	ldrh	r3, [r3, #0]
 80150be:	4619      	mov	r1, r3
 80150c0:	68bb      	ldr	r3, [r7, #8]
 80150c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80150c6:	441a      	add	r2, r3
 80150c8:	68f9      	ldr	r1, [r7, #12]
 80150ca:	f248 036c 	movw	r3, #32876	; 0x806c
 80150ce:	440b      	add	r3, r1
 80150d0:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80150d2:	68fa      	ldr	r2, [r7, #12]
 80150d4:	f248 0370 	movw	r3, #32880	; 0x8070
 80150d8:	4413      	add	r3, r2
 80150da:	681a      	ldr	r2, [r3, #0]
 80150dc:	68f9      	ldr	r1, [r7, #12]
 80150de:	f248 0364 	movw	r3, #32868	; 0x8064
 80150e2:	440b      	add	r3, r1
 80150e4:	881b      	ldrh	r3, [r3, #0]
 80150e6:	4619      	mov	r1, r3
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80150ee:	1ad2      	subs	r2, r2, r3
 80150f0:	68f9      	ldr	r1, [r7, #12]
 80150f2:	f248 0370 	movw	r3, #32880	; 0x8070
 80150f6:	440b      	add	r3, r1
 80150f8:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80150fa:	68fa      	ldr	r2, [r7, #12]
 80150fc:	f248 0338 	movw	r3, #32824	; 0x8038
 8015100:	4413      	add	r3, r2
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	1ad2      	subs	r2, r2, r3
 8015108:	68f9      	ldr	r1, [r7, #12]
 801510a:	f248 0338 	movw	r3, #32824	; 0x8038
 801510e:	440b      	add	r3, r1
 8015110:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8015112:	68fa      	ldr	r2, [r7, #12]
 8015114:	f248 0370 	movw	r3, #32880	; 0x8070
 8015118:	4413      	add	r3, r2
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d104      	bne.n	801512a <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8015120:	2100      	movs	r1, #0
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f7fe fde2 	bl	8013cec <MSC_BOT_SendCSW>
 8015128:	e019      	b.n	801515e <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801512a:	68fa      	ldr	r2, [r7, #12]
 801512c:	f248 0370 	movw	r3, #32880	; 0x8070
 8015130:	4413      	add	r3, r2
 8015132:	681a      	ldr	r2, [r3, #0]
 8015134:	68f9      	ldr	r1, [r7, #12]
 8015136:	f248 0364 	movw	r3, #32868	; 0x8064
 801513a:	440b      	add	r3, r1
 801513c:	881b      	ldrh	r3, [r3, #0]
 801513e:	fb03 f302 	mul.w	r3, r3, r2
 8015142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015146:	bf28      	it	cs
 8015148:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801514c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	f103 0210 	add.w	r2, r3, #16
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	2101      	movs	r1, #1
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f004 f89e 	bl	801929a <USBD_LL_PrepareReceive>
  }

  return 0;
 801515e:	2300      	movs	r3, #0
}
 8015160:	4618      	mov	r0, r3
 8015162:	3710      	adds	r7, #16
 8015164:	46bd      	mov	sp, r7
 8015166:	bdb0      	pop	{r4, r5, r7, pc}

08015168 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8015168:	b480      	push	{r7}
 801516a:	b087      	sub	sp, #28
 801516c:	af00      	add	r7, sp, #0
 801516e:	60f8      	str	r0, [r7, #12]
 8015170:	60b9      	str	r1, [r7, #8]
 8015172:	4613      	mov	r3, r2
 8015174:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8015176:	88fb      	ldrh	r3, [r7, #6]
 8015178:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 801517a:	8afa      	ldrh	r2, [r7, #22]
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8015180:	e00b      	b.n	801519a <SCSI_UpdateBotData+0x32>
  {
    len--;
 8015182:	8afb      	ldrh	r3, [r7, #22]
 8015184:	3b01      	subs	r3, #1
 8015186:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8015188:	8afb      	ldrh	r3, [r7, #22]
 801518a:	68ba      	ldr	r2, [r7, #8]
 801518c:	441a      	add	r2, r3
 801518e:	8afb      	ldrh	r3, [r7, #22]
 8015190:	7811      	ldrb	r1, [r2, #0]
 8015192:	68fa      	ldr	r2, [r7, #12]
 8015194:	4413      	add	r3, r2
 8015196:	460a      	mov	r2, r1
 8015198:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801519a:	8afb      	ldrh	r3, [r7, #22]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d1f0      	bne.n	8015182 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 80151a0:	2300      	movs	r3, #0
}
 80151a2:	4618      	mov	r0, r3
 80151a4:	371c      	adds	r7, #28
 80151a6:	46bd      	mov	sp, r7
 80151a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ac:	4770      	bx	lr

080151ae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80151ae:	b580      	push	{r7, lr}
 80151b0:	b086      	sub	sp, #24
 80151b2:	af00      	add	r7, sp, #0
 80151b4:	60f8      	str	r0, [r7, #12]
 80151b6:	60b9      	str	r1, [r7, #8]
 80151b8:	4613      	mov	r3, r2
 80151ba:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d101      	bne.n	80151c6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80151c2:	2303      	movs	r3, #3
 80151c4:	e025      	b.n	8015212 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d003      	beq.n	80151d8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	2200      	movs	r2, #0
 80151d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d003      	beq.n	80151ea <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	2200      	movs	r2, #0
 80151e6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d003      	beq.n	80151f8 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	68ba      	ldr	r2, [r7, #8]
 80151f4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	2201      	movs	r2, #1
 80151fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	79fa      	ldrb	r2, [r7, #7]
 8015204:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015206:	68f8      	ldr	r0, [r7, #12]
 8015208:	f003 fece 	bl	8018fa8 <USBD_LL_Init>
 801520c:	4603      	mov	r3, r0
 801520e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015210:	7dfb      	ldrb	r3, [r7, #23]
}
 8015212:	4618      	mov	r0, r3
 8015214:	3718      	adds	r7, #24
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}

0801521a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801521a:	b580      	push	{r7, lr}
 801521c:	b084      	sub	sp, #16
 801521e:	af00      	add	r7, sp, #0
 8015220:	6078      	str	r0, [r7, #4]
 8015222:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015224:	2300      	movs	r3, #0
 8015226:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d101      	bne.n	8015232 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801522e:	2303      	movs	r3, #3
 8015230:	e010      	b.n	8015254 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	683a      	ldr	r2, [r7, #0]
 8015236:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015242:	f107 020e 	add.w	r2, r7, #14
 8015246:	4610      	mov	r0, r2
 8015248:	4798      	blx	r3
 801524a:	4602      	mov	r2, r0
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8015252:	2300      	movs	r3, #0
}
 8015254:	4618      	mov	r0, r3
 8015256:	3710      	adds	r7, #16
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}

0801525c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b082      	sub	sp, #8
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f003 feef 	bl	8019048 <USBD_LL_Start>
 801526a:	4603      	mov	r3, r0
}
 801526c:	4618      	mov	r0, r3
 801526e:	3708      	adds	r7, #8
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015274:	b480      	push	{r7}
 8015276:	b083      	sub	sp, #12
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801527c:	2300      	movs	r3, #0
}
 801527e:	4618      	mov	r0, r3
 8015280:	370c      	adds	r7, #12
 8015282:	46bd      	mov	sp, r7
 8015284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015288:	4770      	bx	lr

0801528a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801528a:	b580      	push	{r7, lr}
 801528c:	b084      	sub	sp, #16
 801528e:	af00      	add	r7, sp, #0
 8015290:	6078      	str	r0, [r7, #4]
 8015292:	460b      	mov	r3, r1
 8015294:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015296:	2303      	movs	r3, #3
 8015298:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d009      	beq.n	80152b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	78fa      	ldrb	r2, [r7, #3]
 80152ae:	4611      	mov	r1, r2
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	4798      	blx	r3
 80152b4:	4603      	mov	r3, r0
 80152b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80152b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80152ba:	4618      	mov	r0, r3
 80152bc:	3710      	adds	r7, #16
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}

080152c2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80152c2:	b580      	push	{r7, lr}
 80152c4:	b082      	sub	sp, #8
 80152c6:	af00      	add	r7, sp, #0
 80152c8:	6078      	str	r0, [r7, #4]
 80152ca:	460b      	mov	r3, r1
 80152cc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d007      	beq.n	80152e8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152de:	685b      	ldr	r3, [r3, #4]
 80152e0:	78fa      	ldrb	r2, [r7, #3]
 80152e2:	4611      	mov	r1, r2
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	4798      	blx	r3
  }

  return USBD_OK;
 80152e8:	2300      	movs	r3, #0
}
 80152ea:	4618      	mov	r0, r3
 80152ec:	3708      	adds	r7, #8
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}

080152f2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b084      	sub	sp, #16
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
 80152fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015302:	6839      	ldr	r1, [r7, #0]
 8015304:	4618      	mov	r0, r3
 8015306:	f000 ff2b 	bl	8016160 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	2201      	movs	r2, #1
 801530e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015318:	461a      	mov	r2, r3
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015326:	f003 031f 	and.w	r3, r3, #31
 801532a:	2b01      	cmp	r3, #1
 801532c:	d00e      	beq.n	801534c <USBD_LL_SetupStage+0x5a>
 801532e:	2b01      	cmp	r3, #1
 8015330:	d302      	bcc.n	8015338 <USBD_LL_SetupStage+0x46>
 8015332:	2b02      	cmp	r3, #2
 8015334:	d014      	beq.n	8015360 <USBD_LL_SetupStage+0x6e>
 8015336:	e01d      	b.n	8015374 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801533e:	4619      	mov	r1, r3
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f000 fa17 	bl	8015774 <USBD_StdDevReq>
 8015346:	4603      	mov	r3, r0
 8015348:	73fb      	strb	r3, [r7, #15]
      break;
 801534a:	e020      	b.n	801538e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015352:	4619      	mov	r1, r3
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f000 fa7b 	bl	8015850 <USBD_StdItfReq>
 801535a:	4603      	mov	r3, r0
 801535c:	73fb      	strb	r3, [r7, #15]
      break;
 801535e:	e016      	b.n	801538e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015366:	4619      	mov	r1, r3
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f000 fab7 	bl	80158dc <USBD_StdEPReq>
 801536e:	4603      	mov	r3, r0
 8015370:	73fb      	strb	r3, [r7, #15]
      break;
 8015372:	e00c      	b.n	801538e <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801537a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801537e:	b2db      	uxtb	r3, r3
 8015380:	4619      	mov	r1, r3
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f003 fedf 	bl	8019146 <USBD_LL_StallEP>
 8015388:	4603      	mov	r3, r0
 801538a:	73fb      	strb	r3, [r7, #15]
      break;
 801538c:	bf00      	nop
  }

  return ret;
 801538e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015390:	4618      	mov	r0, r3
 8015392:	3710      	adds	r7, #16
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}

08015398 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b086      	sub	sp, #24
 801539c:	af00      	add	r7, sp, #0
 801539e:	60f8      	str	r0, [r7, #12]
 80153a0:	460b      	mov	r3, r1
 80153a2:	607a      	str	r2, [r7, #4]
 80153a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80153a6:	7afb      	ldrb	r3, [r7, #11]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d137      	bne.n	801541c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80153b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80153ba:	2b03      	cmp	r3, #3
 80153bc:	d14a      	bne.n	8015454 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	689a      	ldr	r2, [r3, #8]
 80153c2:	693b      	ldr	r3, [r7, #16]
 80153c4:	68db      	ldr	r3, [r3, #12]
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d913      	bls.n	80153f2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	689a      	ldr	r2, [r3, #8]
 80153ce:	693b      	ldr	r3, [r7, #16]
 80153d0:	68db      	ldr	r3, [r3, #12]
 80153d2:	1ad2      	subs	r2, r2, r3
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	68da      	ldr	r2, [r3, #12]
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	689b      	ldr	r3, [r3, #8]
 80153e0:	4293      	cmp	r3, r2
 80153e2:	bf28      	it	cs
 80153e4:	4613      	movcs	r3, r2
 80153e6:	461a      	mov	r2, r3
 80153e8:	6879      	ldr	r1, [r7, #4]
 80153ea:	68f8      	ldr	r0, [r7, #12]
 80153ec:	f000 ff8f 	bl	801630e <USBD_CtlContinueRx>
 80153f0:	e030      	b.n	8015454 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153f8:	691b      	ldr	r3, [r3, #16]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d00a      	beq.n	8015414 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015404:	2b03      	cmp	r3, #3
 8015406:	d105      	bne.n	8015414 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801540e:	691b      	ldr	r3, [r3, #16]
 8015410:	68f8      	ldr	r0, [r7, #12]
 8015412:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8015414:	68f8      	ldr	r0, [r7, #12]
 8015416:	f000 ff8b 	bl	8016330 <USBD_CtlSendStatus>
 801541a:	e01b      	b.n	8015454 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015422:	699b      	ldr	r3, [r3, #24]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d013      	beq.n	8015450 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801542e:	2b03      	cmp	r3, #3
 8015430:	d10e      	bne.n	8015450 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015438:	699b      	ldr	r3, [r3, #24]
 801543a:	7afa      	ldrb	r2, [r7, #11]
 801543c:	4611      	mov	r1, r2
 801543e:	68f8      	ldr	r0, [r7, #12]
 8015440:	4798      	blx	r3
 8015442:	4603      	mov	r3, r0
 8015444:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015446:	7dfb      	ldrb	r3, [r7, #23]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d003      	beq.n	8015454 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 801544c:	7dfb      	ldrb	r3, [r7, #23]
 801544e:	e002      	b.n	8015456 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015450:	2303      	movs	r3, #3
 8015452:	e000      	b.n	8015456 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8015454:	2300      	movs	r3, #0
}
 8015456:	4618      	mov	r0, r3
 8015458:	3718      	adds	r7, #24
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}

0801545e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801545e:	b580      	push	{r7, lr}
 8015460:	b086      	sub	sp, #24
 8015462:	af00      	add	r7, sp, #0
 8015464:	60f8      	str	r0, [r7, #12]
 8015466:	460b      	mov	r3, r1
 8015468:	607a      	str	r2, [r7, #4]
 801546a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801546c:	7afb      	ldrb	r3, [r7, #11]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d16a      	bne.n	8015548 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	3314      	adds	r3, #20
 8015476:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801547e:	2b02      	cmp	r3, #2
 8015480:	d155      	bne.n	801552e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8015482:	693b      	ldr	r3, [r7, #16]
 8015484:	689a      	ldr	r2, [r3, #8]
 8015486:	693b      	ldr	r3, [r7, #16]
 8015488:	68db      	ldr	r3, [r3, #12]
 801548a:	429a      	cmp	r2, r3
 801548c:	d914      	bls.n	80154b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	689a      	ldr	r2, [r3, #8]
 8015492:	693b      	ldr	r3, [r7, #16]
 8015494:	68db      	ldr	r3, [r3, #12]
 8015496:	1ad2      	subs	r2, r2, r3
 8015498:	693b      	ldr	r3, [r7, #16]
 801549a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801549c:	693b      	ldr	r3, [r7, #16]
 801549e:	689b      	ldr	r3, [r3, #8]
 80154a0:	461a      	mov	r2, r3
 80154a2:	6879      	ldr	r1, [r7, #4]
 80154a4:	68f8      	ldr	r0, [r7, #12]
 80154a6:	f000 ff21 	bl	80162ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80154aa:	2300      	movs	r3, #0
 80154ac:	2200      	movs	r2, #0
 80154ae:	2100      	movs	r1, #0
 80154b0:	68f8      	ldr	r0, [r7, #12]
 80154b2:	f003 fef2 	bl	801929a <USBD_LL_PrepareReceive>
 80154b6:	e03a      	b.n	801552e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	68da      	ldr	r2, [r3, #12]
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	689b      	ldr	r3, [r3, #8]
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d11c      	bne.n	80154fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	685a      	ldr	r2, [r3, #4]
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d316      	bcc.n	80154fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80154d0:	693b      	ldr	r3, [r7, #16]
 80154d2:	685a      	ldr	r2, [r3, #4]
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80154da:	429a      	cmp	r2, r3
 80154dc:	d20f      	bcs.n	80154fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80154de:	2200      	movs	r2, #0
 80154e0:	2100      	movs	r1, #0
 80154e2:	68f8      	ldr	r0, [r7, #12]
 80154e4:	f000 ff02 	bl	80162ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	2200      	movs	r2, #0
 80154ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80154f0:	2300      	movs	r3, #0
 80154f2:	2200      	movs	r2, #0
 80154f4:	2100      	movs	r1, #0
 80154f6:	68f8      	ldr	r0, [r7, #12]
 80154f8:	f003 fecf 	bl	801929a <USBD_LL_PrepareReceive>
 80154fc:	e017      	b.n	801552e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015504:	68db      	ldr	r3, [r3, #12]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d00a      	beq.n	8015520 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015510:	2b03      	cmp	r3, #3
 8015512:	d105      	bne.n	8015520 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	68f8      	ldr	r0, [r7, #12]
 801551e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015520:	2180      	movs	r1, #128	; 0x80
 8015522:	68f8      	ldr	r0, [r7, #12]
 8015524:	f003 fe0f 	bl	8019146 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015528:	68f8      	ldr	r0, [r7, #12]
 801552a:	f000 ff14 	bl	8016356 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015534:	2b01      	cmp	r3, #1
 8015536:	d123      	bne.n	8015580 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015538:	68f8      	ldr	r0, [r7, #12]
 801553a:	f7ff fe9b 	bl	8015274 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	2200      	movs	r2, #0
 8015542:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015546:	e01b      	b.n	8015580 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801554e:	695b      	ldr	r3, [r3, #20]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d013      	beq.n	801557c <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801555a:	2b03      	cmp	r3, #3
 801555c:	d10e      	bne.n	801557c <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015564:	695b      	ldr	r3, [r3, #20]
 8015566:	7afa      	ldrb	r2, [r7, #11]
 8015568:	4611      	mov	r1, r2
 801556a:	68f8      	ldr	r0, [r7, #12]
 801556c:	4798      	blx	r3
 801556e:	4603      	mov	r3, r0
 8015570:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015572:	7dfb      	ldrb	r3, [r7, #23]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d003      	beq.n	8015580 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8015578:	7dfb      	ldrb	r3, [r7, #23]
 801557a:	e002      	b.n	8015582 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801557c:	2303      	movs	r3, #3
 801557e:	e000      	b.n	8015582 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8015580:	2300      	movs	r3, #0
}
 8015582:	4618      	mov	r0, r3
 8015584:	3718      	adds	r7, #24
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}

0801558a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801558a:	b580      	push	{r7, lr}
 801558c:	b082      	sub	sp, #8
 801558e:	af00      	add	r7, sp, #0
 8015590:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2201      	movs	r2, #1
 8015596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2200      	movs	r2, #0
 801559e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2200      	movs	r2, #0
 80155a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2200      	movs	r2, #0
 80155ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d009      	beq.n	80155ce <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155c0:	685b      	ldr	r3, [r3, #4]
 80155c2:	687a      	ldr	r2, [r7, #4]
 80155c4:	6852      	ldr	r2, [r2, #4]
 80155c6:	b2d2      	uxtb	r2, r2
 80155c8:	4611      	mov	r1, r2
 80155ca:	6878      	ldr	r0, [r7, #4]
 80155cc:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80155ce:	2340      	movs	r3, #64	; 0x40
 80155d0:	2200      	movs	r2, #0
 80155d2:	2100      	movs	r1, #0
 80155d4:	6878      	ldr	r0, [r7, #4]
 80155d6:	f003 fd52 	bl	801907e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	2201      	movs	r2, #1
 80155de:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2240      	movs	r2, #64	; 0x40
 80155e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80155ea:	2340      	movs	r3, #64	; 0x40
 80155ec:	2200      	movs	r2, #0
 80155ee:	2180      	movs	r1, #128	; 0x80
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f003 fd44 	bl	801907e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	2201      	movs	r2, #1
 80155fa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	2240      	movs	r2, #64	; 0x40
 8015600:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8015602:	2300      	movs	r3, #0
}
 8015604:	4618      	mov	r0, r3
 8015606:	3708      	adds	r7, #8
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}

0801560c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801560c:	b480      	push	{r7}
 801560e:	b083      	sub	sp, #12
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
 8015614:	460b      	mov	r3, r1
 8015616:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	78fa      	ldrb	r2, [r7, #3]
 801561c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801561e:	2300      	movs	r3, #0
}
 8015620:	4618      	mov	r0, r3
 8015622:	370c      	adds	r7, #12
 8015624:	46bd      	mov	sp, r7
 8015626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562a:	4770      	bx	lr

0801562c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801562c:	b480      	push	{r7}
 801562e:	b083      	sub	sp, #12
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2204      	movs	r2, #4
 8015644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015648:	2300      	movs	r3, #0
}
 801564a:	4618      	mov	r0, r3
 801564c:	370c      	adds	r7, #12
 801564e:	46bd      	mov	sp, r7
 8015650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015654:	4770      	bx	lr

08015656 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015656:	b480      	push	{r7}
 8015658:	b083      	sub	sp, #12
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015664:	2b04      	cmp	r3, #4
 8015666:	d105      	bne.n	8015674 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015674:	2300      	movs	r3, #0
}
 8015676:	4618      	mov	r0, r3
 8015678:	370c      	adds	r7, #12
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr

08015682 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015682:	b580      	push	{r7, lr}
 8015684:	b082      	sub	sp, #8
 8015686:	af00      	add	r7, sp, #0
 8015688:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015690:	2b03      	cmp	r3, #3
 8015692:	d10b      	bne.n	80156ac <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801569a:	69db      	ldr	r3, [r3, #28]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d005      	beq.n	80156ac <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156a6:	69db      	ldr	r3, [r3, #28]
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80156ac:	2300      	movs	r3, #0
}
 80156ae:	4618      	mov	r0, r3
 80156b0:	3708      	adds	r7, #8
 80156b2:	46bd      	mov	sp, r7
 80156b4:	bd80      	pop	{r7, pc}

080156b6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80156b6:	b480      	push	{r7}
 80156b8:	b083      	sub	sp, #12
 80156ba:	af00      	add	r7, sp, #0
 80156bc:	6078      	str	r0, [r7, #4]
 80156be:	460b      	mov	r3, r1
 80156c0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80156c2:	2300      	movs	r3, #0
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	370c      	adds	r7, #12
 80156c8:	46bd      	mov	sp, r7
 80156ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ce:	4770      	bx	lr

080156d0 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80156d0:	b480      	push	{r7}
 80156d2:	b083      	sub	sp, #12
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
 80156d8:	460b      	mov	r3, r1
 80156da:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80156dc:	2300      	movs	r3, #0
}
 80156de:	4618      	mov	r0, r3
 80156e0:	370c      	adds	r7, #12
 80156e2:	46bd      	mov	sp, r7
 80156e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e8:	4770      	bx	lr

080156ea <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80156ea:	b480      	push	{r7}
 80156ec:	b083      	sub	sp, #12
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80156f2:	2300      	movs	r3, #0
}
 80156f4:	4618      	mov	r0, r3
 80156f6:	370c      	adds	r7, #12
 80156f8:	46bd      	mov	sp, r7
 80156fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fe:	4770      	bx	lr

08015700 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b082      	sub	sp, #8
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2201      	movs	r2, #1
 801570c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015716:	2b00      	cmp	r3, #0
 8015718:	d009      	beq.n	801572e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	687a      	ldr	r2, [r7, #4]
 8015724:	6852      	ldr	r2, [r2, #4]
 8015726:	b2d2      	uxtb	r2, r2
 8015728:	4611      	mov	r1, r2
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	4798      	blx	r3
  }

  return USBD_OK;
 801572e:	2300      	movs	r3, #0
}
 8015730:	4618      	mov	r0, r3
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}

08015738 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015738:	b480      	push	{r7}
 801573a:	b087      	sub	sp, #28
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	781b      	ldrb	r3, [r3, #0]
 8015748:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	3301      	adds	r3, #1
 801574e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	781b      	ldrb	r3, [r3, #0]
 8015754:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015756:	8a3b      	ldrh	r3, [r7, #16]
 8015758:	021b      	lsls	r3, r3, #8
 801575a:	b21a      	sxth	r2, r3
 801575c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015760:	4313      	orrs	r3, r2
 8015762:	b21b      	sxth	r3, r3
 8015764:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015766:	89fb      	ldrh	r3, [r7, #14]
}
 8015768:	4618      	mov	r0, r3
 801576a:	371c      	adds	r7, #28
 801576c:	46bd      	mov	sp, r7
 801576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015772:	4770      	bx	lr

08015774 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b084      	sub	sp, #16
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801577e:	2300      	movs	r3, #0
 8015780:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801578a:	2b20      	cmp	r3, #32
 801578c:	d004      	beq.n	8015798 <USBD_StdDevReq+0x24>
 801578e:	2b40      	cmp	r3, #64	; 0x40
 8015790:	d002      	beq.n	8015798 <USBD_StdDevReq+0x24>
 8015792:	2b00      	cmp	r3, #0
 8015794:	d00a      	beq.n	80157ac <USBD_StdDevReq+0x38>
 8015796:	e050      	b.n	801583a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801579e:	689b      	ldr	r3, [r3, #8]
 80157a0:	6839      	ldr	r1, [r7, #0]
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	4798      	blx	r3
 80157a6:	4603      	mov	r3, r0
 80157a8:	73fb      	strb	r3, [r7, #15]
    break;
 80157aa:	e04b      	b.n	8015844 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	785b      	ldrb	r3, [r3, #1]
 80157b0:	2b09      	cmp	r3, #9
 80157b2:	d83c      	bhi.n	801582e <USBD_StdDevReq+0xba>
 80157b4:	a201      	add	r2, pc, #4	; (adr r2, 80157bc <USBD_StdDevReq+0x48>)
 80157b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157ba:	bf00      	nop
 80157bc:	08015811 	.word	0x08015811
 80157c0:	08015825 	.word	0x08015825
 80157c4:	0801582f 	.word	0x0801582f
 80157c8:	0801581b 	.word	0x0801581b
 80157cc:	0801582f 	.word	0x0801582f
 80157d0:	080157ef 	.word	0x080157ef
 80157d4:	080157e5 	.word	0x080157e5
 80157d8:	0801582f 	.word	0x0801582f
 80157dc:	08015807 	.word	0x08015807
 80157e0:	080157f9 	.word	0x080157f9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80157e4:	6839      	ldr	r1, [r7, #0]
 80157e6:	6878      	ldr	r0, [r7, #4]
 80157e8:	f000 f9ce 	bl	8015b88 <USBD_GetDescriptor>
      break;
 80157ec:	e024      	b.n	8015838 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80157ee:	6839      	ldr	r1, [r7, #0]
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f000 fb33 	bl	8015e5c <USBD_SetAddress>
      break;
 80157f6:	e01f      	b.n	8015838 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80157f8:	6839      	ldr	r1, [r7, #0]
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	f000 fb70 	bl	8015ee0 <USBD_SetConfig>
 8015800:	4603      	mov	r3, r0
 8015802:	73fb      	strb	r3, [r7, #15]
      break;
 8015804:	e018      	b.n	8015838 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8015806:	6839      	ldr	r1, [r7, #0]
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	f000 fc0d 	bl	8016028 <USBD_GetConfig>
      break;
 801580e:	e013      	b.n	8015838 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8015810:	6839      	ldr	r1, [r7, #0]
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f000 fc3c 	bl	8016090 <USBD_GetStatus>
      break;
 8015818:	e00e      	b.n	8015838 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801581a:	6839      	ldr	r1, [r7, #0]
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f000 fc6a 	bl	80160f6 <USBD_SetFeature>
      break;
 8015822:	e009      	b.n	8015838 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8015824:	6839      	ldr	r1, [r7, #0]
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f000 fc79 	bl	801611e <USBD_ClrFeature>
      break;
 801582c:	e004      	b.n	8015838 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 801582e:	6839      	ldr	r1, [r7, #0]
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f000 fccf 	bl	80161d4 <USBD_CtlError>
      break;
 8015836:	bf00      	nop
    }
    break;
 8015838:	e004      	b.n	8015844 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 801583a:	6839      	ldr	r1, [r7, #0]
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f000 fcc9 	bl	80161d4 <USBD_CtlError>
    break;
 8015842:	bf00      	nop
  }

  return ret;
 8015844:	7bfb      	ldrb	r3, [r7, #15]
}
 8015846:	4618      	mov	r0, r3
 8015848:	3710      	adds	r7, #16
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}
 801584e:	bf00      	nop

08015850 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b084      	sub	sp, #16
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
 8015858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801585a:	2300      	movs	r3, #0
 801585c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801585e:	683b      	ldr	r3, [r7, #0]
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015866:	2b20      	cmp	r3, #32
 8015868:	d003      	beq.n	8015872 <USBD_StdItfReq+0x22>
 801586a:	2b40      	cmp	r3, #64	; 0x40
 801586c:	d001      	beq.n	8015872 <USBD_StdItfReq+0x22>
 801586e:	2b00      	cmp	r3, #0
 8015870:	d12a      	bne.n	80158c8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015878:	3b01      	subs	r3, #1
 801587a:	2b02      	cmp	r3, #2
 801587c:	d81d      	bhi.n	80158ba <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	889b      	ldrh	r3, [r3, #4]
 8015882:	b2db      	uxtb	r3, r3
 8015884:	2b01      	cmp	r3, #1
 8015886:	d813      	bhi.n	80158b0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801588e:	689b      	ldr	r3, [r3, #8]
 8015890:	6839      	ldr	r1, [r7, #0]
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	4798      	blx	r3
 8015896:	4603      	mov	r3, r0
 8015898:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	88db      	ldrh	r3, [r3, #6]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d110      	bne.n	80158c4 <USBD_StdItfReq+0x74>
 80158a2:	7bfb      	ldrb	r3, [r7, #15]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d10d      	bne.n	80158c4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f000 fd41 	bl	8016330 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80158ae:	e009      	b.n	80158c4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80158b0:	6839      	ldr	r1, [r7, #0]
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	f000 fc8e 	bl	80161d4 <USBD_CtlError>
      break;
 80158b8:	e004      	b.n	80158c4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80158ba:	6839      	ldr	r1, [r7, #0]
 80158bc:	6878      	ldr	r0, [r7, #4]
 80158be:	f000 fc89 	bl	80161d4 <USBD_CtlError>
      break;
 80158c2:	e000      	b.n	80158c6 <USBD_StdItfReq+0x76>
      break;
 80158c4:	bf00      	nop
    }
    break;
 80158c6:	e004      	b.n	80158d2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80158c8:	6839      	ldr	r1, [r7, #0]
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f000 fc82 	bl	80161d4 <USBD_CtlError>
    break;
 80158d0:	bf00      	nop
  }

  return ret;
 80158d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80158d4:	4618      	mov	r0, r3
 80158d6:	3710      	adds	r7, #16
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}

080158dc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
 80158e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80158e6:	2300      	movs	r3, #0
 80158e8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80158ea:	683b      	ldr	r3, [r7, #0]
 80158ec:	889b      	ldrh	r3, [r3, #4]
 80158ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	781b      	ldrb	r3, [r3, #0]
 80158f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158f8:	2b20      	cmp	r3, #32
 80158fa:	d004      	beq.n	8015906 <USBD_StdEPReq+0x2a>
 80158fc:	2b40      	cmp	r3, #64	; 0x40
 80158fe:	d002      	beq.n	8015906 <USBD_StdEPReq+0x2a>
 8015900:	2b00      	cmp	r3, #0
 8015902:	d00a      	beq.n	801591a <USBD_StdEPReq+0x3e>
 8015904:	e135      	b.n	8015b72 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801590c:	689b      	ldr	r3, [r3, #8]
 801590e:	6839      	ldr	r1, [r7, #0]
 8015910:	6878      	ldr	r0, [r7, #4]
 8015912:	4798      	blx	r3
 8015914:	4603      	mov	r3, r0
 8015916:	73fb      	strb	r3, [r7, #15]
    break;
 8015918:	e130      	b.n	8015b7c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801591a:	683b      	ldr	r3, [r7, #0]
 801591c:	785b      	ldrb	r3, [r3, #1]
 801591e:	2b01      	cmp	r3, #1
 8015920:	d03e      	beq.n	80159a0 <USBD_StdEPReq+0xc4>
 8015922:	2b03      	cmp	r3, #3
 8015924:	d002      	beq.n	801592c <USBD_StdEPReq+0x50>
 8015926:	2b00      	cmp	r3, #0
 8015928:	d077      	beq.n	8015a1a <USBD_StdEPReq+0x13e>
 801592a:	e11c      	b.n	8015b66 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015932:	2b02      	cmp	r3, #2
 8015934:	d002      	beq.n	801593c <USBD_StdEPReq+0x60>
 8015936:	2b03      	cmp	r3, #3
 8015938:	d015      	beq.n	8015966 <USBD_StdEPReq+0x8a>
 801593a:	e02b      	b.n	8015994 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801593c:	7bbb      	ldrb	r3, [r7, #14]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d00c      	beq.n	801595c <USBD_StdEPReq+0x80>
 8015942:	7bbb      	ldrb	r3, [r7, #14]
 8015944:	2b80      	cmp	r3, #128	; 0x80
 8015946:	d009      	beq.n	801595c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015948:	7bbb      	ldrb	r3, [r7, #14]
 801594a:	4619      	mov	r1, r3
 801594c:	6878      	ldr	r0, [r7, #4]
 801594e:	f003 fbfa 	bl	8019146 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015952:	2180      	movs	r1, #128	; 0x80
 8015954:	6878      	ldr	r0, [r7, #4]
 8015956:	f003 fbf6 	bl	8019146 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801595a:	e020      	b.n	801599e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 801595c:	6839      	ldr	r1, [r7, #0]
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f000 fc38 	bl	80161d4 <USBD_CtlError>
        break;
 8015964:	e01b      	b.n	801599e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015966:	683b      	ldr	r3, [r7, #0]
 8015968:	885b      	ldrh	r3, [r3, #2]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d10e      	bne.n	801598c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801596e:	7bbb      	ldrb	r3, [r7, #14]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d00b      	beq.n	801598c <USBD_StdEPReq+0xb0>
 8015974:	7bbb      	ldrb	r3, [r7, #14]
 8015976:	2b80      	cmp	r3, #128	; 0x80
 8015978:	d008      	beq.n	801598c <USBD_StdEPReq+0xb0>
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	88db      	ldrh	r3, [r3, #6]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d104      	bne.n	801598c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8015982:	7bbb      	ldrb	r3, [r7, #14]
 8015984:	4619      	mov	r1, r3
 8015986:	6878      	ldr	r0, [r7, #4]
 8015988:	f003 fbdd 	bl	8019146 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 801598c:	6878      	ldr	r0, [r7, #4]
 801598e:	f000 fccf 	bl	8016330 <USBD_CtlSendStatus>

        break;
 8015992:	e004      	b.n	801599e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8015994:	6839      	ldr	r1, [r7, #0]
 8015996:	6878      	ldr	r0, [r7, #4]
 8015998:	f000 fc1c 	bl	80161d4 <USBD_CtlError>
        break;
 801599c:	bf00      	nop
      }
      break;
 801599e:	e0e7      	b.n	8015b70 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159a6:	2b02      	cmp	r3, #2
 80159a8:	d002      	beq.n	80159b0 <USBD_StdEPReq+0xd4>
 80159aa:	2b03      	cmp	r3, #3
 80159ac:	d015      	beq.n	80159da <USBD_StdEPReq+0xfe>
 80159ae:	e02d      	b.n	8015a0c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159b0:	7bbb      	ldrb	r3, [r7, #14]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d00c      	beq.n	80159d0 <USBD_StdEPReq+0xf4>
 80159b6:	7bbb      	ldrb	r3, [r7, #14]
 80159b8:	2b80      	cmp	r3, #128	; 0x80
 80159ba:	d009      	beq.n	80159d0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80159bc:	7bbb      	ldrb	r3, [r7, #14]
 80159be:	4619      	mov	r1, r3
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f003 fbc0 	bl	8019146 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80159c6:	2180      	movs	r1, #128	; 0x80
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f003 fbbc 	bl	8019146 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80159ce:	e023      	b.n	8015a18 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80159d0:	6839      	ldr	r1, [r7, #0]
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f000 fbfe 	bl	80161d4 <USBD_CtlError>
        break;
 80159d8:	e01e      	b.n	8015a18 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	885b      	ldrh	r3, [r3, #2]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d119      	bne.n	8015a16 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80159e2:	7bbb      	ldrb	r3, [r7, #14]
 80159e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d004      	beq.n	80159f6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80159ec:	7bbb      	ldrb	r3, [r7, #14]
 80159ee:	4619      	mov	r1, r3
 80159f0:	6878      	ldr	r0, [r7, #4]
 80159f2:	f003 fbc7 	bl	8019184 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80159f6:	6878      	ldr	r0, [r7, #4]
 80159f8:	f000 fc9a 	bl	8016330 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a02:	689b      	ldr	r3, [r3, #8]
 8015a04:	6839      	ldr	r1, [r7, #0]
 8015a06:	6878      	ldr	r0, [r7, #4]
 8015a08:	4798      	blx	r3
        }
        break;
 8015a0a:	e004      	b.n	8015a16 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8015a0c:	6839      	ldr	r1, [r7, #0]
 8015a0e:	6878      	ldr	r0, [r7, #4]
 8015a10:	f000 fbe0 	bl	80161d4 <USBD_CtlError>
        break;
 8015a14:	e000      	b.n	8015a18 <USBD_StdEPReq+0x13c>
        break;
 8015a16:	bf00      	nop
      }
      break;
 8015a18:	e0aa      	b.n	8015b70 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a20:	2b02      	cmp	r3, #2
 8015a22:	d002      	beq.n	8015a2a <USBD_StdEPReq+0x14e>
 8015a24:	2b03      	cmp	r3, #3
 8015a26:	d032      	beq.n	8015a8e <USBD_StdEPReq+0x1b2>
 8015a28:	e097      	b.n	8015b5a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a2a:	7bbb      	ldrb	r3, [r7, #14]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d007      	beq.n	8015a40 <USBD_StdEPReq+0x164>
 8015a30:	7bbb      	ldrb	r3, [r7, #14]
 8015a32:	2b80      	cmp	r3, #128	; 0x80
 8015a34:	d004      	beq.n	8015a40 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8015a36:	6839      	ldr	r1, [r7, #0]
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	f000 fbcb 	bl	80161d4 <USBD_CtlError>
          break;
 8015a3e:	e091      	b.n	8015b64 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	da0b      	bge.n	8015a60 <USBD_StdEPReq+0x184>
 8015a48:	7bbb      	ldrb	r3, [r7, #14]
 8015a4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a4e:	4613      	mov	r3, r2
 8015a50:	009b      	lsls	r3, r3, #2
 8015a52:	4413      	add	r3, r2
 8015a54:	009b      	lsls	r3, r3, #2
 8015a56:	3310      	adds	r3, #16
 8015a58:	687a      	ldr	r2, [r7, #4]
 8015a5a:	4413      	add	r3, r2
 8015a5c:	3304      	adds	r3, #4
 8015a5e:	e00b      	b.n	8015a78 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015a60:	7bbb      	ldrb	r3, [r7, #14]
 8015a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a66:	4613      	mov	r3, r2
 8015a68:	009b      	lsls	r3, r3, #2
 8015a6a:	4413      	add	r3, r2
 8015a6c:	009b      	lsls	r3, r3, #2
 8015a6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	4413      	add	r3, r2
 8015a76:	3304      	adds	r3, #4
 8015a78:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8015a7a:	68bb      	ldr	r3, [r7, #8]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	2202      	movs	r2, #2
 8015a84:	4619      	mov	r1, r3
 8015a86:	6878      	ldr	r0, [r7, #4]
 8015a88:	f000 fc15 	bl	80162b6 <USBD_CtlSendData>
        break;
 8015a8c:	e06a      	b.n	8015b64 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8015a8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	da11      	bge.n	8015aba <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015a96:	7bbb      	ldrb	r3, [r7, #14]
 8015a98:	f003 020f 	and.w	r2, r3, #15
 8015a9c:	6879      	ldr	r1, [r7, #4]
 8015a9e:	4613      	mov	r3, r2
 8015aa0:	009b      	lsls	r3, r3, #2
 8015aa2:	4413      	add	r3, r2
 8015aa4:	009b      	lsls	r3, r3, #2
 8015aa6:	440b      	add	r3, r1
 8015aa8:	3324      	adds	r3, #36	; 0x24
 8015aaa:	881b      	ldrh	r3, [r3, #0]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d117      	bne.n	8015ae0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015ab0:	6839      	ldr	r1, [r7, #0]
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f000 fb8e 	bl	80161d4 <USBD_CtlError>
            break;
 8015ab8:	e054      	b.n	8015b64 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015aba:	7bbb      	ldrb	r3, [r7, #14]
 8015abc:	f003 020f 	and.w	r2, r3, #15
 8015ac0:	6879      	ldr	r1, [r7, #4]
 8015ac2:	4613      	mov	r3, r2
 8015ac4:	009b      	lsls	r3, r3, #2
 8015ac6:	4413      	add	r3, r2
 8015ac8:	009b      	lsls	r3, r3, #2
 8015aca:	440b      	add	r3, r1
 8015acc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015ad0:	881b      	ldrh	r3, [r3, #0]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d104      	bne.n	8015ae0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015ad6:	6839      	ldr	r1, [r7, #0]
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f000 fb7b 	bl	80161d4 <USBD_CtlError>
            break;
 8015ade:	e041      	b.n	8015b64 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	da0b      	bge.n	8015b00 <USBD_StdEPReq+0x224>
 8015ae8:	7bbb      	ldrb	r3, [r7, #14]
 8015aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015aee:	4613      	mov	r3, r2
 8015af0:	009b      	lsls	r3, r3, #2
 8015af2:	4413      	add	r3, r2
 8015af4:	009b      	lsls	r3, r3, #2
 8015af6:	3310      	adds	r3, #16
 8015af8:	687a      	ldr	r2, [r7, #4]
 8015afa:	4413      	add	r3, r2
 8015afc:	3304      	adds	r3, #4
 8015afe:	e00b      	b.n	8015b18 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015b00:	7bbb      	ldrb	r3, [r7, #14]
 8015b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b06:	4613      	mov	r3, r2
 8015b08:	009b      	lsls	r3, r3, #2
 8015b0a:	4413      	add	r3, r2
 8015b0c:	009b      	lsls	r3, r3, #2
 8015b0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015b12:	687a      	ldr	r2, [r7, #4]
 8015b14:	4413      	add	r3, r2
 8015b16:	3304      	adds	r3, #4
 8015b18:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015b1a:	7bbb      	ldrb	r3, [r7, #14]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d002      	beq.n	8015b26 <USBD_StdEPReq+0x24a>
 8015b20:	7bbb      	ldrb	r3, [r7, #14]
 8015b22:	2b80      	cmp	r3, #128	; 0x80
 8015b24:	d103      	bne.n	8015b2e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	2200      	movs	r2, #0
 8015b2a:	601a      	str	r2, [r3, #0]
 8015b2c:	e00e      	b.n	8015b4c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015b2e:	7bbb      	ldrb	r3, [r7, #14]
 8015b30:	4619      	mov	r1, r3
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f003 fb45 	bl	80191c2 <USBD_LL_IsStallEP>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d003      	beq.n	8015b46 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	2201      	movs	r2, #1
 8015b42:	601a      	str	r2, [r3, #0]
 8015b44:	e002      	b.n	8015b4c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	2200      	movs	r2, #0
 8015b4a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b4c:	68bb      	ldr	r3, [r7, #8]
 8015b4e:	2202      	movs	r2, #2
 8015b50:	4619      	mov	r1, r3
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f000 fbaf 	bl	80162b6 <USBD_CtlSendData>
          break;
 8015b58:	e004      	b.n	8015b64 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8015b5a:	6839      	ldr	r1, [r7, #0]
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f000 fb39 	bl	80161d4 <USBD_CtlError>
        break;
 8015b62:	bf00      	nop
      }
      break;
 8015b64:	e004      	b.n	8015b70 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8015b66:	6839      	ldr	r1, [r7, #0]
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f000 fb33 	bl	80161d4 <USBD_CtlError>
      break;
 8015b6e:	bf00      	nop
    }
    break;
 8015b70:	e004      	b.n	8015b7c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8015b72:	6839      	ldr	r1, [r7, #0]
 8015b74:	6878      	ldr	r0, [r7, #4]
 8015b76:	f000 fb2d 	bl	80161d4 <USBD_CtlError>
    break;
 8015b7a:	bf00      	nop
  }

  return ret;
 8015b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3710      	adds	r7, #16
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
	...

08015b88 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b084      	sub	sp, #16
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015b92:	2300      	movs	r3, #0
 8015b94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015b96:	2300      	movs	r3, #0
 8015b98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	885b      	ldrh	r3, [r3, #2]
 8015ba2:	0a1b      	lsrs	r3, r3, #8
 8015ba4:	b29b      	uxth	r3, r3
 8015ba6:	3b01      	subs	r3, #1
 8015ba8:	2b06      	cmp	r3, #6
 8015baa:	f200 8128 	bhi.w	8015dfe <USBD_GetDescriptor+0x276>
 8015bae:	a201      	add	r2, pc, #4	; (adr r2, 8015bb4 <USBD_GetDescriptor+0x2c>)
 8015bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bb4:	08015bd1 	.word	0x08015bd1
 8015bb8:	08015be9 	.word	0x08015be9
 8015bbc:	08015c29 	.word	0x08015c29
 8015bc0:	08015dff 	.word	0x08015dff
 8015bc4:	08015dff 	.word	0x08015dff
 8015bc8:	08015d9f 	.word	0x08015d9f
 8015bcc:	08015dcb 	.word	0x08015dcb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	687a      	ldr	r2, [r7, #4]
 8015bda:	7c12      	ldrb	r2, [r2, #16]
 8015bdc:	f107 0108 	add.w	r1, r7, #8
 8015be0:	4610      	mov	r0, r2
 8015be2:	4798      	blx	r3
 8015be4:	60f8      	str	r0, [r7, #12]
    break;
 8015be6:	e112      	b.n	8015e0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	7c1b      	ldrb	r3, [r3, #16]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d10d      	bne.n	8015c0c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bf8:	f107 0208 	add.w	r2, r7, #8
 8015bfc:	4610      	mov	r0, r2
 8015bfe:	4798      	blx	r3
 8015c00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	3301      	adds	r3, #1
 8015c06:	2202      	movs	r2, #2
 8015c08:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8015c0a:	e100      	b.n	8015e0e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c14:	f107 0208 	add.w	r2, r7, #8
 8015c18:	4610      	mov	r0, r2
 8015c1a:	4798      	blx	r3
 8015c1c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	3301      	adds	r3, #1
 8015c22:	2202      	movs	r2, #2
 8015c24:	701a      	strb	r2, [r3, #0]
    break;
 8015c26:	e0f2      	b.n	8015e0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	885b      	ldrh	r3, [r3, #2]
 8015c2c:	b2db      	uxtb	r3, r3
 8015c2e:	2b05      	cmp	r3, #5
 8015c30:	f200 80ac 	bhi.w	8015d8c <USBD_GetDescriptor+0x204>
 8015c34:	a201      	add	r2, pc, #4	; (adr r2, 8015c3c <USBD_GetDescriptor+0xb4>)
 8015c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c3a:	bf00      	nop
 8015c3c:	08015c55 	.word	0x08015c55
 8015c40:	08015c89 	.word	0x08015c89
 8015c44:	08015cbd 	.word	0x08015cbd
 8015c48:	08015cf1 	.word	0x08015cf1
 8015c4c:	08015d25 	.word	0x08015d25
 8015c50:	08015d59 	.word	0x08015d59
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d00b      	beq.n	8015c78 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	7c12      	ldrb	r2, [r2, #16]
 8015c6c:	f107 0108 	add.w	r1, r7, #8
 8015c70:	4610      	mov	r0, r2
 8015c72:	4798      	blx	r3
 8015c74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015c76:	e091      	b.n	8015d9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015c78:	6839      	ldr	r1, [r7, #0]
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f000 faaa 	bl	80161d4 <USBD_CtlError>
        err++;
 8015c80:	7afb      	ldrb	r3, [r7, #11]
 8015c82:	3301      	adds	r3, #1
 8015c84:	72fb      	strb	r3, [r7, #11]
      break;
 8015c86:	e089      	b.n	8015d9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c8e:	689b      	ldr	r3, [r3, #8]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d00b      	beq.n	8015cac <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c9a:	689b      	ldr	r3, [r3, #8]
 8015c9c:	687a      	ldr	r2, [r7, #4]
 8015c9e:	7c12      	ldrb	r2, [r2, #16]
 8015ca0:	f107 0108 	add.w	r1, r7, #8
 8015ca4:	4610      	mov	r0, r2
 8015ca6:	4798      	blx	r3
 8015ca8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015caa:	e077      	b.n	8015d9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015cac:	6839      	ldr	r1, [r7, #0]
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f000 fa90 	bl	80161d4 <USBD_CtlError>
        err++;
 8015cb4:	7afb      	ldrb	r3, [r7, #11]
 8015cb6:	3301      	adds	r3, #1
 8015cb8:	72fb      	strb	r3, [r7, #11]
      break;
 8015cba:	e06f      	b.n	8015d9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cc2:	68db      	ldr	r3, [r3, #12]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d00b      	beq.n	8015ce0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cce:	68db      	ldr	r3, [r3, #12]
 8015cd0:	687a      	ldr	r2, [r7, #4]
 8015cd2:	7c12      	ldrb	r2, [r2, #16]
 8015cd4:	f107 0108 	add.w	r1, r7, #8
 8015cd8:	4610      	mov	r0, r2
 8015cda:	4798      	blx	r3
 8015cdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015cde:	e05d      	b.n	8015d9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015ce0:	6839      	ldr	r1, [r7, #0]
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	f000 fa76 	bl	80161d4 <USBD_CtlError>
        err++;
 8015ce8:	7afb      	ldrb	r3, [r7, #11]
 8015cea:	3301      	adds	r3, #1
 8015cec:	72fb      	strb	r3, [r7, #11]
      break;
 8015cee:	e055      	b.n	8015d9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cf6:	691b      	ldr	r3, [r3, #16]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d00b      	beq.n	8015d14 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d02:	691b      	ldr	r3, [r3, #16]
 8015d04:	687a      	ldr	r2, [r7, #4]
 8015d06:	7c12      	ldrb	r2, [r2, #16]
 8015d08:	f107 0108 	add.w	r1, r7, #8
 8015d0c:	4610      	mov	r0, r2
 8015d0e:	4798      	blx	r3
 8015d10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d12:	e043      	b.n	8015d9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d14:	6839      	ldr	r1, [r7, #0]
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f000 fa5c 	bl	80161d4 <USBD_CtlError>
        err++;
 8015d1c:	7afb      	ldrb	r3, [r7, #11]
 8015d1e:	3301      	adds	r3, #1
 8015d20:	72fb      	strb	r3, [r7, #11]
      break;
 8015d22:	e03b      	b.n	8015d9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d2a:	695b      	ldr	r3, [r3, #20]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d00b      	beq.n	8015d48 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d36:	695b      	ldr	r3, [r3, #20]
 8015d38:	687a      	ldr	r2, [r7, #4]
 8015d3a:	7c12      	ldrb	r2, [r2, #16]
 8015d3c:	f107 0108 	add.w	r1, r7, #8
 8015d40:	4610      	mov	r0, r2
 8015d42:	4798      	blx	r3
 8015d44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d46:	e029      	b.n	8015d9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d48:	6839      	ldr	r1, [r7, #0]
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f000 fa42 	bl	80161d4 <USBD_CtlError>
        err++;
 8015d50:	7afb      	ldrb	r3, [r7, #11]
 8015d52:	3301      	adds	r3, #1
 8015d54:	72fb      	strb	r3, [r7, #11]
      break;
 8015d56:	e021      	b.n	8015d9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d5e:	699b      	ldr	r3, [r3, #24]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d00b      	beq.n	8015d7c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d6a:	699b      	ldr	r3, [r3, #24]
 8015d6c:	687a      	ldr	r2, [r7, #4]
 8015d6e:	7c12      	ldrb	r2, [r2, #16]
 8015d70:	f107 0108 	add.w	r1, r7, #8
 8015d74:	4610      	mov	r0, r2
 8015d76:	4798      	blx	r3
 8015d78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d7a:	e00f      	b.n	8015d9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d7c:	6839      	ldr	r1, [r7, #0]
 8015d7e:	6878      	ldr	r0, [r7, #4]
 8015d80:	f000 fa28 	bl	80161d4 <USBD_CtlError>
        err++;
 8015d84:	7afb      	ldrb	r3, [r7, #11]
 8015d86:	3301      	adds	r3, #1
 8015d88:	72fb      	strb	r3, [r7, #11]
      break;
 8015d8a:	e007      	b.n	8015d9c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8015d8c:	6839      	ldr	r1, [r7, #0]
 8015d8e:	6878      	ldr	r0, [r7, #4]
 8015d90:	f000 fa20 	bl	80161d4 <USBD_CtlError>
      err++;
 8015d94:	7afb      	ldrb	r3, [r7, #11]
 8015d96:	3301      	adds	r3, #1
 8015d98:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8015d9a:	bf00      	nop
    }
    break;
 8015d9c:	e037      	b.n	8015e0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	7c1b      	ldrb	r3, [r3, #16]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d109      	bne.n	8015dba <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dae:	f107 0208 	add.w	r2, r7, #8
 8015db2:	4610      	mov	r0, r2
 8015db4:	4798      	blx	r3
 8015db6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015db8:	e029      	b.n	8015e0e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015dba:	6839      	ldr	r1, [r7, #0]
 8015dbc:	6878      	ldr	r0, [r7, #4]
 8015dbe:	f000 fa09 	bl	80161d4 <USBD_CtlError>
      err++;
 8015dc2:	7afb      	ldrb	r3, [r7, #11]
 8015dc4:	3301      	adds	r3, #1
 8015dc6:	72fb      	strb	r3, [r7, #11]
    break;
 8015dc8:	e021      	b.n	8015e0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	7c1b      	ldrb	r3, [r3, #16]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d10d      	bne.n	8015dee <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dda:	f107 0208 	add.w	r2, r7, #8
 8015dde:	4610      	mov	r0, r2
 8015de0:	4798      	blx	r3
 8015de2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	3301      	adds	r3, #1
 8015de8:	2207      	movs	r2, #7
 8015dea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015dec:	e00f      	b.n	8015e0e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015dee:	6839      	ldr	r1, [r7, #0]
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f000 f9ef 	bl	80161d4 <USBD_CtlError>
      err++;
 8015df6:	7afb      	ldrb	r3, [r7, #11]
 8015df8:	3301      	adds	r3, #1
 8015dfa:	72fb      	strb	r3, [r7, #11]
    break;
 8015dfc:	e007      	b.n	8015e0e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8015dfe:	6839      	ldr	r1, [r7, #0]
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f000 f9e7 	bl	80161d4 <USBD_CtlError>
    err++;
 8015e06:	7afb      	ldrb	r3, [r7, #11]
 8015e08:	3301      	adds	r3, #1
 8015e0a:	72fb      	strb	r3, [r7, #11]
    break;
 8015e0c:	bf00      	nop
  }

  if (err != 0U)
 8015e0e:	7afb      	ldrb	r3, [r7, #11]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d11e      	bne.n	8015e52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	88db      	ldrh	r3, [r3, #6]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d016      	beq.n	8015e4a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8015e1c:	893b      	ldrh	r3, [r7, #8]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d00e      	beq.n	8015e40 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8015e22:	683b      	ldr	r3, [r7, #0]
 8015e24:	88da      	ldrh	r2, [r3, #6]
 8015e26:	893b      	ldrh	r3, [r7, #8]
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	bf28      	it	cs
 8015e2c:	4613      	movcs	r3, r2
 8015e2e:	b29b      	uxth	r3, r3
 8015e30:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8015e32:	893b      	ldrh	r3, [r7, #8]
 8015e34:	461a      	mov	r2, r3
 8015e36:	68f9      	ldr	r1, [r7, #12]
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f000 fa3c 	bl	80162b6 <USBD_CtlSendData>
 8015e3e:	e009      	b.n	8015e54 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8015e40:	6839      	ldr	r1, [r7, #0]
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f000 f9c6 	bl	80161d4 <USBD_CtlError>
 8015e48:	e004      	b.n	8015e54 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f000 fa70 	bl	8016330 <USBD_CtlSendStatus>
 8015e50:	e000      	b.n	8015e54 <USBD_GetDescriptor+0x2cc>
    return;
 8015e52:	bf00      	nop
    }
  }
}
 8015e54:	3710      	adds	r7, #16
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bd80      	pop	{r7, pc}
 8015e5a:	bf00      	nop

08015e5c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b084      	sub	sp, #16
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
 8015e64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	889b      	ldrh	r3, [r3, #4]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d130      	bne.n	8015ed0 <USBD_SetAddress+0x74>
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	88db      	ldrh	r3, [r3, #6]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d12c      	bne.n	8015ed0 <USBD_SetAddress+0x74>
 8015e76:	683b      	ldr	r3, [r7, #0]
 8015e78:	885b      	ldrh	r3, [r3, #2]
 8015e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8015e7c:	d828      	bhi.n	8015ed0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	885b      	ldrh	r3, [r3, #2]
 8015e82:	b2db      	uxtb	r3, r3
 8015e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e90:	2b03      	cmp	r3, #3
 8015e92:	d104      	bne.n	8015e9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8015e94:	6839      	ldr	r1, [r7, #0]
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f000 f99c 	bl	80161d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e9c:	e01c      	b.n	8015ed8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	7bfa      	ldrb	r2, [r7, #15]
 8015ea2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015ea6:	7bfb      	ldrb	r3, [r7, #15]
 8015ea8:	4619      	mov	r1, r3
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f003 f9b5 	bl	801921a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f000 fa3d 	bl	8016330 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015eb6:	7bfb      	ldrb	r3, [r7, #15]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d004      	beq.n	8015ec6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2202      	movs	r2, #2
 8015ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ec4:	e008      	b.n	8015ed8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2201      	movs	r2, #1
 8015eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ece:	e003      	b.n	8015ed8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015ed0:	6839      	ldr	r1, [r7, #0]
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f000 f97e 	bl	80161d4 <USBD_CtlError>
  }
}
 8015ed8:	bf00      	nop
 8015eda:	3710      	adds	r7, #16
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bd80      	pop	{r7, pc}

08015ee0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b084      	sub	sp, #16
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
 8015ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015eea:	2300      	movs	r3, #0
 8015eec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	885b      	ldrh	r3, [r3, #2]
 8015ef2:	b2da      	uxtb	r2, r3
 8015ef4:	4b4b      	ldr	r3, [pc, #300]	; (8016024 <USBD_SetConfig+0x144>)
 8015ef6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015ef8:	4b4a      	ldr	r3, [pc, #296]	; (8016024 <USBD_SetConfig+0x144>)
 8015efa:	781b      	ldrb	r3, [r3, #0]
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	d905      	bls.n	8015f0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015f00:	6839      	ldr	r1, [r7, #0]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f000 f966 	bl	80161d4 <USBD_CtlError>
    return USBD_FAIL;
 8015f08:	2303      	movs	r3, #3
 8015f0a:	e087      	b.n	801601c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f12:	2b02      	cmp	r3, #2
 8015f14:	d002      	beq.n	8015f1c <USBD_SetConfig+0x3c>
 8015f16:	2b03      	cmp	r3, #3
 8015f18:	d025      	beq.n	8015f66 <USBD_SetConfig+0x86>
 8015f1a:	e071      	b.n	8016000 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8015f1c:	4b41      	ldr	r3, [pc, #260]	; (8016024 <USBD_SetConfig+0x144>)
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d01c      	beq.n	8015f5e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8015f24:	4b3f      	ldr	r3, [pc, #252]	; (8016024 <USBD_SetConfig+0x144>)
 8015f26:	781b      	ldrb	r3, [r3, #0]
 8015f28:	461a      	mov	r2, r3
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f2e:	4b3d      	ldr	r3, [pc, #244]	; (8016024 <USBD_SetConfig+0x144>)
 8015f30:	781b      	ldrb	r3, [r3, #0]
 8015f32:	4619      	mov	r1, r3
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f7ff f9a8 	bl	801528a <USBD_SetClassConfig>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8015f3e:	7bfb      	ldrb	r3, [r7, #15]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d004      	beq.n	8015f4e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8015f44:	6839      	ldr	r1, [r7, #0]
 8015f46:	6878      	ldr	r0, [r7, #4]
 8015f48:	f000 f944 	bl	80161d4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8015f4c:	e065      	b.n	801601a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f000 f9ee 	bl	8016330 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2203      	movs	r2, #3
 8015f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8015f5c:	e05d      	b.n	801601a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8015f5e:	6878      	ldr	r0, [r7, #4]
 8015f60:	f000 f9e6 	bl	8016330 <USBD_CtlSendStatus>
    break;
 8015f64:	e059      	b.n	801601a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8015f66:	4b2f      	ldr	r3, [pc, #188]	; (8016024 <USBD_SetConfig+0x144>)
 8015f68:	781b      	ldrb	r3, [r3, #0]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d112      	bne.n	8015f94 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	2202      	movs	r2, #2
 8015f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8015f76:	4b2b      	ldr	r3, [pc, #172]	; (8016024 <USBD_SetConfig+0x144>)
 8015f78:	781b      	ldrb	r3, [r3, #0]
 8015f7a:	461a      	mov	r2, r3
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015f80:	4b28      	ldr	r3, [pc, #160]	; (8016024 <USBD_SetConfig+0x144>)
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	4619      	mov	r1, r3
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f7ff f99b 	bl	80152c2 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f000 f9cf 	bl	8016330 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8015f92:	e042      	b.n	801601a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8015f94:	4b23      	ldr	r3, [pc, #140]	; (8016024 <USBD_SetConfig+0x144>)
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	461a      	mov	r2, r3
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	685b      	ldr	r3, [r3, #4]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d02a      	beq.n	8015ff8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	685b      	ldr	r3, [r3, #4]
 8015fa6:	b2db      	uxtb	r3, r3
 8015fa8:	4619      	mov	r1, r3
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7ff f989 	bl	80152c2 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8015fb0:	4b1c      	ldr	r3, [pc, #112]	; (8016024 <USBD_SetConfig+0x144>)
 8015fb2:	781b      	ldrb	r3, [r3, #0]
 8015fb4:	461a      	mov	r2, r3
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015fba:	4b1a      	ldr	r3, [pc, #104]	; (8016024 <USBD_SetConfig+0x144>)
 8015fbc:	781b      	ldrb	r3, [r3, #0]
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f7ff f962 	bl	801528a <USBD_SetClassConfig>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8015fca:	7bfb      	ldrb	r3, [r7, #15]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d00f      	beq.n	8015ff0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8015fd0:	6839      	ldr	r1, [r7, #0]
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f000 f8fe 	bl	80161d4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	685b      	ldr	r3, [r3, #4]
 8015fdc:	b2db      	uxtb	r3, r3
 8015fde:	4619      	mov	r1, r3
 8015fe0:	6878      	ldr	r0, [r7, #4]
 8015fe2:	f7ff f96e 	bl	80152c2 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2202      	movs	r2, #2
 8015fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8015fee:	e014      	b.n	801601a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f000 f99d 	bl	8016330 <USBD_CtlSendStatus>
    break;
 8015ff6:	e010      	b.n	801601a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 f999 	bl	8016330 <USBD_CtlSendStatus>
    break;
 8015ffe:	e00c      	b.n	801601a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8016000:	6839      	ldr	r1, [r7, #0]
 8016002:	6878      	ldr	r0, [r7, #4]
 8016004:	f000 f8e6 	bl	80161d4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016008:	4b06      	ldr	r3, [pc, #24]	; (8016024 <USBD_SetConfig+0x144>)
 801600a:	781b      	ldrb	r3, [r3, #0]
 801600c:	4619      	mov	r1, r3
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f7ff f957 	bl	80152c2 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8016014:	2303      	movs	r3, #3
 8016016:	73fb      	strb	r3, [r7, #15]
    break;
 8016018:	bf00      	nop
  }

  return ret;
 801601a:	7bfb      	ldrb	r3, [r7, #15]
}
 801601c:	4618      	mov	r0, r3
 801601e:	3710      	adds	r7, #16
 8016020:	46bd      	mov	sp, r7
 8016022:	bd80      	pop	{r7, pc}
 8016024:	24000b58 	.word	0x24000b58

08016028 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b082      	sub	sp, #8
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
 8016030:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016032:	683b      	ldr	r3, [r7, #0]
 8016034:	88db      	ldrh	r3, [r3, #6]
 8016036:	2b01      	cmp	r3, #1
 8016038:	d004      	beq.n	8016044 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801603a:	6839      	ldr	r1, [r7, #0]
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f000 f8c9 	bl	80161d4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8016042:	e021      	b.n	8016088 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801604a:	2b01      	cmp	r3, #1
 801604c:	db17      	blt.n	801607e <USBD_GetConfig+0x56>
 801604e:	2b02      	cmp	r3, #2
 8016050:	dd02      	ble.n	8016058 <USBD_GetConfig+0x30>
 8016052:	2b03      	cmp	r3, #3
 8016054:	d00b      	beq.n	801606e <USBD_GetConfig+0x46>
 8016056:	e012      	b.n	801607e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	2200      	movs	r2, #0
 801605c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	3308      	adds	r3, #8
 8016062:	2201      	movs	r2, #1
 8016064:	4619      	mov	r1, r3
 8016066:	6878      	ldr	r0, [r7, #4]
 8016068:	f000 f925 	bl	80162b6 <USBD_CtlSendData>
      break;
 801606c:	e00c      	b.n	8016088 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	3304      	adds	r3, #4
 8016072:	2201      	movs	r2, #1
 8016074:	4619      	mov	r1, r3
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f000 f91d 	bl	80162b6 <USBD_CtlSendData>
      break;
 801607c:	e004      	b.n	8016088 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801607e:	6839      	ldr	r1, [r7, #0]
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f000 f8a7 	bl	80161d4 <USBD_CtlError>
      break;
 8016086:	bf00      	nop
}
 8016088:	bf00      	nop
 801608a:	3708      	adds	r7, #8
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}

08016090 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160a0:	3b01      	subs	r3, #1
 80160a2:	2b02      	cmp	r3, #2
 80160a4:	d81e      	bhi.n	80160e4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	88db      	ldrh	r3, [r3, #6]
 80160aa:	2b02      	cmp	r3, #2
 80160ac:	d004      	beq.n	80160b8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80160ae:	6839      	ldr	r1, [r7, #0]
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f000 f88f 	bl	80161d4 <USBD_CtlError>
      break;
 80160b6:	e01a      	b.n	80160ee <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	2201      	movs	r2, #1
 80160bc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d005      	beq.n	80160d4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	68db      	ldr	r3, [r3, #12]
 80160cc:	f043 0202 	orr.w	r2, r3, #2
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	330c      	adds	r3, #12
 80160d8:	2202      	movs	r2, #2
 80160da:	4619      	mov	r1, r3
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 f8ea 	bl	80162b6 <USBD_CtlSendData>
    break;
 80160e2:	e004      	b.n	80160ee <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80160e4:	6839      	ldr	r1, [r7, #0]
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f000 f874 	bl	80161d4 <USBD_CtlError>
    break;
 80160ec:	bf00      	nop
  }
}
 80160ee:	bf00      	nop
 80160f0:	3708      	adds	r7, #8
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}

080160f6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160f6:	b580      	push	{r7, lr}
 80160f8:	b082      	sub	sp, #8
 80160fa:	af00      	add	r7, sp, #0
 80160fc:	6078      	str	r0, [r7, #4]
 80160fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	885b      	ldrh	r3, [r3, #2]
 8016104:	2b01      	cmp	r3, #1
 8016106:	d106      	bne.n	8016116 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2201      	movs	r2, #1
 801610c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f000 f90d 	bl	8016330 <USBD_CtlSendStatus>
  }
}
 8016116:	bf00      	nop
 8016118:	3708      	adds	r7, #8
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}

0801611e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801611e:	b580      	push	{r7, lr}
 8016120:	b082      	sub	sp, #8
 8016122:	af00      	add	r7, sp, #0
 8016124:	6078      	str	r0, [r7, #4]
 8016126:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801612e:	3b01      	subs	r3, #1
 8016130:	2b02      	cmp	r3, #2
 8016132:	d80b      	bhi.n	801614c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016134:	683b      	ldr	r3, [r7, #0]
 8016136:	885b      	ldrh	r3, [r3, #2]
 8016138:	2b01      	cmp	r3, #1
 801613a:	d10c      	bne.n	8016156 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2200      	movs	r2, #0
 8016140:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f000 f8f3 	bl	8016330 <USBD_CtlSendStatus>
      }
      break;
 801614a:	e004      	b.n	8016156 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801614c:	6839      	ldr	r1, [r7, #0]
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f000 f840 	bl	80161d4 <USBD_CtlError>
      break;
 8016154:	e000      	b.n	8016158 <USBD_ClrFeature+0x3a>
      break;
 8016156:	bf00      	nop
  }
}
 8016158:	bf00      	nop
 801615a:	3708      	adds	r7, #8
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}

08016160 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b084      	sub	sp, #16
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
 8016168:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	781a      	ldrb	r2, [r3, #0]
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	3301      	adds	r3, #1
 801617a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	781a      	ldrb	r2, [r3, #0]
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	3301      	adds	r3, #1
 8016188:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801618a:	68f8      	ldr	r0, [r7, #12]
 801618c:	f7ff fad4 	bl	8015738 <SWAPBYTE>
 8016190:	4603      	mov	r3, r0
 8016192:	461a      	mov	r2, r3
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	3301      	adds	r3, #1
 801619c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	3301      	adds	r3, #1
 80161a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80161a4:	68f8      	ldr	r0, [r7, #12]
 80161a6:	f7ff fac7 	bl	8015738 <SWAPBYTE>
 80161aa:	4603      	mov	r3, r0
 80161ac:	461a      	mov	r2, r3
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	3301      	adds	r3, #1
 80161b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	3301      	adds	r3, #1
 80161bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80161be:	68f8      	ldr	r0, [r7, #12]
 80161c0:	f7ff faba 	bl	8015738 <SWAPBYTE>
 80161c4:	4603      	mov	r3, r0
 80161c6:	461a      	mov	r2, r3
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	80da      	strh	r2, [r3, #6]
}
 80161cc:	bf00      	nop
 80161ce:	3710      	adds	r7, #16
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}

080161d4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b082      	sub	sp, #8
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80161de:	2180      	movs	r1, #128	; 0x80
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f002 ffb0 	bl	8019146 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80161e6:	2100      	movs	r1, #0
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f002 ffac 	bl	8019146 <USBD_LL_StallEP>
}
 80161ee:	bf00      	nop
 80161f0:	3708      	adds	r7, #8
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}

080161f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80161f6:	b580      	push	{r7, lr}
 80161f8:	b086      	sub	sp, #24
 80161fa:	af00      	add	r7, sp, #0
 80161fc:	60f8      	str	r0, [r7, #12]
 80161fe:	60b9      	str	r1, [r7, #8]
 8016200:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016202:	2300      	movs	r3, #0
 8016204:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d036      	beq.n	801627a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016210:	6938      	ldr	r0, [r7, #16]
 8016212:	f000 f836 	bl	8016282 <USBD_GetLen>
 8016216:	4603      	mov	r3, r0
 8016218:	3301      	adds	r3, #1
 801621a:	b29b      	uxth	r3, r3
 801621c:	005b      	lsls	r3, r3, #1
 801621e:	b29a      	uxth	r2, r3
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016224:	7dfb      	ldrb	r3, [r7, #23]
 8016226:	68ba      	ldr	r2, [r7, #8]
 8016228:	4413      	add	r3, r2
 801622a:	687a      	ldr	r2, [r7, #4]
 801622c:	7812      	ldrb	r2, [r2, #0]
 801622e:	701a      	strb	r2, [r3, #0]
  idx++;
 8016230:	7dfb      	ldrb	r3, [r7, #23]
 8016232:	3301      	adds	r3, #1
 8016234:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016236:	7dfb      	ldrb	r3, [r7, #23]
 8016238:	68ba      	ldr	r2, [r7, #8]
 801623a:	4413      	add	r3, r2
 801623c:	2203      	movs	r2, #3
 801623e:	701a      	strb	r2, [r3, #0]
  idx++;
 8016240:	7dfb      	ldrb	r3, [r7, #23]
 8016242:	3301      	adds	r3, #1
 8016244:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016246:	e013      	b.n	8016270 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016248:	7dfb      	ldrb	r3, [r7, #23]
 801624a:	68ba      	ldr	r2, [r7, #8]
 801624c:	4413      	add	r3, r2
 801624e:	693a      	ldr	r2, [r7, #16]
 8016250:	7812      	ldrb	r2, [r2, #0]
 8016252:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	3301      	adds	r3, #1
 8016258:	613b      	str	r3, [r7, #16]
    idx++;
 801625a:	7dfb      	ldrb	r3, [r7, #23]
 801625c:	3301      	adds	r3, #1
 801625e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016260:	7dfb      	ldrb	r3, [r7, #23]
 8016262:	68ba      	ldr	r2, [r7, #8]
 8016264:	4413      	add	r3, r2
 8016266:	2200      	movs	r2, #0
 8016268:	701a      	strb	r2, [r3, #0]
    idx++;
 801626a:	7dfb      	ldrb	r3, [r7, #23]
 801626c:	3301      	adds	r3, #1
 801626e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016270:	693b      	ldr	r3, [r7, #16]
 8016272:	781b      	ldrb	r3, [r3, #0]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d1e7      	bne.n	8016248 <USBD_GetString+0x52>
 8016278:	e000      	b.n	801627c <USBD_GetString+0x86>
    return;
 801627a:	bf00      	nop
  }
}
 801627c:	3718      	adds	r7, #24
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016282:	b480      	push	{r7}
 8016284:	b085      	sub	sp, #20
 8016286:	af00      	add	r7, sp, #0
 8016288:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801628a:	2300      	movs	r3, #0
 801628c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016292:	e005      	b.n	80162a0 <USBD_GetLen+0x1e>
  {
    len++;
 8016294:	7bfb      	ldrb	r3, [r7, #15]
 8016296:	3301      	adds	r3, #1
 8016298:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	3301      	adds	r3, #1
 801629e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	781b      	ldrb	r3, [r3, #0]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d1f5      	bne.n	8016294 <USBD_GetLen+0x12>
  }

  return len;
 80162a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80162aa:	4618      	mov	r0, r3
 80162ac:	3714      	adds	r7, #20
 80162ae:	46bd      	mov	sp, r7
 80162b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b4:	4770      	bx	lr

080162b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80162b6:	b580      	push	{r7, lr}
 80162b8:	b084      	sub	sp, #16
 80162ba:	af00      	add	r7, sp, #0
 80162bc:	60f8      	str	r0, [r7, #12]
 80162be:	60b9      	str	r1, [r7, #8]
 80162c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	2202      	movs	r2, #2
 80162c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	687a      	ldr	r2, [r7, #4]
 80162ce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	687a      	ldr	r2, [r7, #4]
 80162d4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	68ba      	ldr	r2, [r7, #8]
 80162da:	2100      	movs	r1, #0
 80162dc:	68f8      	ldr	r0, [r7, #12]
 80162de:	f002 ffbb 	bl	8019258 <USBD_LL_Transmit>

  return USBD_OK;
 80162e2:	2300      	movs	r3, #0
}
 80162e4:	4618      	mov	r0, r3
 80162e6:	3710      	adds	r7, #16
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}

080162ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b084      	sub	sp, #16
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	60f8      	str	r0, [r7, #12]
 80162f4:	60b9      	str	r1, [r7, #8]
 80162f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	68ba      	ldr	r2, [r7, #8]
 80162fc:	2100      	movs	r1, #0
 80162fe:	68f8      	ldr	r0, [r7, #12]
 8016300:	f002 ffaa 	bl	8019258 <USBD_LL_Transmit>

  return USBD_OK;
 8016304:	2300      	movs	r3, #0
}
 8016306:	4618      	mov	r0, r3
 8016308:	3710      	adds	r7, #16
 801630a:	46bd      	mov	sp, r7
 801630c:	bd80      	pop	{r7, pc}

0801630e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801630e:	b580      	push	{r7, lr}
 8016310:	b084      	sub	sp, #16
 8016312:	af00      	add	r7, sp, #0
 8016314:	60f8      	str	r0, [r7, #12]
 8016316:	60b9      	str	r1, [r7, #8]
 8016318:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	68ba      	ldr	r2, [r7, #8]
 801631e:	2100      	movs	r1, #0
 8016320:	68f8      	ldr	r0, [r7, #12]
 8016322:	f002 ffba 	bl	801929a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016326:	2300      	movs	r3, #0
}
 8016328:	4618      	mov	r0, r3
 801632a:	3710      	adds	r7, #16
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	2204      	movs	r2, #4
 801633c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016340:	2300      	movs	r3, #0
 8016342:	2200      	movs	r2, #0
 8016344:	2100      	movs	r1, #0
 8016346:	6878      	ldr	r0, [r7, #4]
 8016348:	f002 ff86 	bl	8019258 <USBD_LL_Transmit>

  return USBD_OK;
 801634c:	2300      	movs	r3, #0
}
 801634e:	4618      	mov	r0, r3
 8016350:	3708      	adds	r7, #8
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}

08016356 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016356:	b580      	push	{r7, lr}
 8016358:	b082      	sub	sp, #8
 801635a:	af00      	add	r7, sp, #0
 801635c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	2205      	movs	r2, #5
 8016362:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016366:	2300      	movs	r3, #0
 8016368:	2200      	movs	r2, #0
 801636a:	2100      	movs	r1, #0
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	f002 ff94 	bl	801929a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016372:	2300      	movs	r3, #0
}
 8016374:	4618      	mov	r0, r3
 8016376:	3708      	adds	r7, #8
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}

0801637c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b084      	sub	sp, #16
 8016380:	af00      	add	r7, sp, #0
 8016382:	4603      	mov	r3, r0
 8016384:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016386:	79fb      	ldrb	r3, [r7, #7]
 8016388:	4a08      	ldr	r2, [pc, #32]	; (80163ac <disk_status+0x30>)
 801638a:	009b      	lsls	r3, r3, #2
 801638c:	4413      	add	r3, r2
 801638e:	685b      	ldr	r3, [r3, #4]
 8016390:	685b      	ldr	r3, [r3, #4]
 8016392:	79fa      	ldrb	r2, [r7, #7]
 8016394:	4905      	ldr	r1, [pc, #20]	; (80163ac <disk_status+0x30>)
 8016396:	440a      	add	r2, r1
 8016398:	7a12      	ldrb	r2, [r2, #8]
 801639a:	4610      	mov	r0, r2
 801639c:	4798      	blx	r3
 801639e:	4603      	mov	r3, r0
 80163a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80163a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	3710      	adds	r7, #16
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}
 80163ac:	24000b84 	.word	0x24000b84

080163b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b084      	sub	sp, #16
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	4603      	mov	r3, r0
 80163b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80163ba:	2300      	movs	r3, #0
 80163bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80163be:	79fb      	ldrb	r3, [r7, #7]
 80163c0:	4a0d      	ldr	r2, [pc, #52]	; (80163f8 <disk_initialize+0x48>)
 80163c2:	5cd3      	ldrb	r3, [r2, r3]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d111      	bne.n	80163ec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80163c8:	79fb      	ldrb	r3, [r7, #7]
 80163ca:	4a0b      	ldr	r2, [pc, #44]	; (80163f8 <disk_initialize+0x48>)
 80163cc:	2101      	movs	r1, #1
 80163ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80163d0:	79fb      	ldrb	r3, [r7, #7]
 80163d2:	4a09      	ldr	r2, [pc, #36]	; (80163f8 <disk_initialize+0x48>)
 80163d4:	009b      	lsls	r3, r3, #2
 80163d6:	4413      	add	r3, r2
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	79fa      	ldrb	r2, [r7, #7]
 80163de:	4906      	ldr	r1, [pc, #24]	; (80163f8 <disk_initialize+0x48>)
 80163e0:	440a      	add	r2, r1
 80163e2:	7a12      	ldrb	r2, [r2, #8]
 80163e4:	4610      	mov	r0, r2
 80163e6:	4798      	blx	r3
 80163e8:	4603      	mov	r3, r0
 80163ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80163ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80163ee:	4618      	mov	r0, r3
 80163f0:	3710      	adds	r7, #16
 80163f2:	46bd      	mov	sp, r7
 80163f4:	bd80      	pop	{r7, pc}
 80163f6:	bf00      	nop
 80163f8:	24000b84 	.word	0x24000b84

080163fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80163fc:	b590      	push	{r4, r7, lr}
 80163fe:	b087      	sub	sp, #28
 8016400:	af00      	add	r7, sp, #0
 8016402:	60b9      	str	r1, [r7, #8]
 8016404:	607a      	str	r2, [r7, #4]
 8016406:	603b      	str	r3, [r7, #0]
 8016408:	4603      	mov	r3, r0
 801640a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801640c:	7bfb      	ldrb	r3, [r7, #15]
 801640e:	4a0a      	ldr	r2, [pc, #40]	; (8016438 <disk_read+0x3c>)
 8016410:	009b      	lsls	r3, r3, #2
 8016412:	4413      	add	r3, r2
 8016414:	685b      	ldr	r3, [r3, #4]
 8016416:	689c      	ldr	r4, [r3, #8]
 8016418:	7bfb      	ldrb	r3, [r7, #15]
 801641a:	4a07      	ldr	r2, [pc, #28]	; (8016438 <disk_read+0x3c>)
 801641c:	4413      	add	r3, r2
 801641e:	7a18      	ldrb	r0, [r3, #8]
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	687a      	ldr	r2, [r7, #4]
 8016424:	68b9      	ldr	r1, [r7, #8]
 8016426:	47a0      	blx	r4
 8016428:	4603      	mov	r3, r0
 801642a:	75fb      	strb	r3, [r7, #23]
  return res;
 801642c:	7dfb      	ldrb	r3, [r7, #23]
}
 801642e:	4618      	mov	r0, r3
 8016430:	371c      	adds	r7, #28
 8016432:	46bd      	mov	sp, r7
 8016434:	bd90      	pop	{r4, r7, pc}
 8016436:	bf00      	nop
 8016438:	24000b84 	.word	0x24000b84

0801643c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801643c:	b590      	push	{r4, r7, lr}
 801643e:	b087      	sub	sp, #28
 8016440:	af00      	add	r7, sp, #0
 8016442:	60b9      	str	r1, [r7, #8]
 8016444:	607a      	str	r2, [r7, #4]
 8016446:	603b      	str	r3, [r7, #0]
 8016448:	4603      	mov	r3, r0
 801644a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801644c:	7bfb      	ldrb	r3, [r7, #15]
 801644e:	4a0a      	ldr	r2, [pc, #40]	; (8016478 <disk_write+0x3c>)
 8016450:	009b      	lsls	r3, r3, #2
 8016452:	4413      	add	r3, r2
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	68dc      	ldr	r4, [r3, #12]
 8016458:	7bfb      	ldrb	r3, [r7, #15]
 801645a:	4a07      	ldr	r2, [pc, #28]	; (8016478 <disk_write+0x3c>)
 801645c:	4413      	add	r3, r2
 801645e:	7a18      	ldrb	r0, [r3, #8]
 8016460:	683b      	ldr	r3, [r7, #0]
 8016462:	687a      	ldr	r2, [r7, #4]
 8016464:	68b9      	ldr	r1, [r7, #8]
 8016466:	47a0      	blx	r4
 8016468:	4603      	mov	r3, r0
 801646a:	75fb      	strb	r3, [r7, #23]
  return res;
 801646c:	7dfb      	ldrb	r3, [r7, #23]
}
 801646e:	4618      	mov	r0, r3
 8016470:	371c      	adds	r7, #28
 8016472:	46bd      	mov	sp, r7
 8016474:	bd90      	pop	{r4, r7, pc}
 8016476:	bf00      	nop
 8016478:	24000b84 	.word	0x24000b84

0801647c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b084      	sub	sp, #16
 8016480:	af00      	add	r7, sp, #0
 8016482:	4603      	mov	r3, r0
 8016484:	603a      	str	r2, [r7, #0]
 8016486:	71fb      	strb	r3, [r7, #7]
 8016488:	460b      	mov	r3, r1
 801648a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801648c:	79fb      	ldrb	r3, [r7, #7]
 801648e:	4a09      	ldr	r2, [pc, #36]	; (80164b4 <disk_ioctl+0x38>)
 8016490:	009b      	lsls	r3, r3, #2
 8016492:	4413      	add	r3, r2
 8016494:	685b      	ldr	r3, [r3, #4]
 8016496:	691b      	ldr	r3, [r3, #16]
 8016498:	79fa      	ldrb	r2, [r7, #7]
 801649a:	4906      	ldr	r1, [pc, #24]	; (80164b4 <disk_ioctl+0x38>)
 801649c:	440a      	add	r2, r1
 801649e:	7a10      	ldrb	r0, [r2, #8]
 80164a0:	79b9      	ldrb	r1, [r7, #6]
 80164a2:	683a      	ldr	r2, [r7, #0]
 80164a4:	4798      	blx	r3
 80164a6:	4603      	mov	r3, r0
 80164a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80164aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	3710      	adds	r7, #16
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}
 80164b4:	24000b84 	.word	0x24000b84

080164b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80164b8:	b480      	push	{r7}
 80164ba:	b085      	sub	sp, #20
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	3301      	adds	r3, #1
 80164c4:	781b      	ldrb	r3, [r3, #0]
 80164c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80164c8:	89fb      	ldrh	r3, [r7, #14]
 80164ca:	021b      	lsls	r3, r3, #8
 80164cc:	b21a      	sxth	r2, r3
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	781b      	ldrb	r3, [r3, #0]
 80164d2:	b21b      	sxth	r3, r3
 80164d4:	4313      	orrs	r3, r2
 80164d6:	b21b      	sxth	r3, r3
 80164d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80164da:	89fb      	ldrh	r3, [r7, #14]
}
 80164dc:	4618      	mov	r0, r3
 80164de:	3714      	adds	r7, #20
 80164e0:	46bd      	mov	sp, r7
 80164e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e6:	4770      	bx	lr

080164e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80164e8:	b480      	push	{r7}
 80164ea:	b085      	sub	sp, #20
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	3303      	adds	r3, #3
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	021b      	lsls	r3, r3, #8
 80164fc:	687a      	ldr	r2, [r7, #4]
 80164fe:	3202      	adds	r2, #2
 8016500:	7812      	ldrb	r2, [r2, #0]
 8016502:	4313      	orrs	r3, r2
 8016504:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	021b      	lsls	r3, r3, #8
 801650a:	687a      	ldr	r2, [r7, #4]
 801650c:	3201      	adds	r2, #1
 801650e:	7812      	ldrb	r2, [r2, #0]
 8016510:	4313      	orrs	r3, r2
 8016512:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	021b      	lsls	r3, r3, #8
 8016518:	687a      	ldr	r2, [r7, #4]
 801651a:	7812      	ldrb	r2, [r2, #0]
 801651c:	4313      	orrs	r3, r2
 801651e:	60fb      	str	r3, [r7, #12]
	return rv;
 8016520:	68fb      	ldr	r3, [r7, #12]
}
 8016522:	4618      	mov	r0, r3
 8016524:	3714      	adds	r7, #20
 8016526:	46bd      	mov	sp, r7
 8016528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652c:	4770      	bx	lr

0801652e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801652e:	b480      	push	{r7}
 8016530:	b083      	sub	sp, #12
 8016532:	af00      	add	r7, sp, #0
 8016534:	6078      	str	r0, [r7, #4]
 8016536:	460b      	mov	r3, r1
 8016538:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	1c5a      	adds	r2, r3, #1
 801653e:	607a      	str	r2, [r7, #4]
 8016540:	887a      	ldrh	r2, [r7, #2]
 8016542:	b2d2      	uxtb	r2, r2
 8016544:	701a      	strb	r2, [r3, #0]
 8016546:	887b      	ldrh	r3, [r7, #2]
 8016548:	0a1b      	lsrs	r3, r3, #8
 801654a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	1c5a      	adds	r2, r3, #1
 8016550:	607a      	str	r2, [r7, #4]
 8016552:	887a      	ldrh	r2, [r7, #2]
 8016554:	b2d2      	uxtb	r2, r2
 8016556:	701a      	strb	r2, [r3, #0]
}
 8016558:	bf00      	nop
 801655a:	370c      	adds	r7, #12
 801655c:	46bd      	mov	sp, r7
 801655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016562:	4770      	bx	lr

08016564 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016564:	b480      	push	{r7}
 8016566:	b083      	sub	sp, #12
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
 801656c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	1c5a      	adds	r2, r3, #1
 8016572:	607a      	str	r2, [r7, #4]
 8016574:	683a      	ldr	r2, [r7, #0]
 8016576:	b2d2      	uxtb	r2, r2
 8016578:	701a      	strb	r2, [r3, #0]
 801657a:	683b      	ldr	r3, [r7, #0]
 801657c:	0a1b      	lsrs	r3, r3, #8
 801657e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	1c5a      	adds	r2, r3, #1
 8016584:	607a      	str	r2, [r7, #4]
 8016586:	683a      	ldr	r2, [r7, #0]
 8016588:	b2d2      	uxtb	r2, r2
 801658a:	701a      	strb	r2, [r3, #0]
 801658c:	683b      	ldr	r3, [r7, #0]
 801658e:	0a1b      	lsrs	r3, r3, #8
 8016590:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	1c5a      	adds	r2, r3, #1
 8016596:	607a      	str	r2, [r7, #4]
 8016598:	683a      	ldr	r2, [r7, #0]
 801659a:	b2d2      	uxtb	r2, r2
 801659c:	701a      	strb	r2, [r3, #0]
 801659e:	683b      	ldr	r3, [r7, #0]
 80165a0:	0a1b      	lsrs	r3, r3, #8
 80165a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	1c5a      	adds	r2, r3, #1
 80165a8:	607a      	str	r2, [r7, #4]
 80165aa:	683a      	ldr	r2, [r7, #0]
 80165ac:	b2d2      	uxtb	r2, r2
 80165ae:	701a      	strb	r2, [r3, #0]
}
 80165b0:	bf00      	nop
 80165b2:	370c      	adds	r7, #12
 80165b4:	46bd      	mov	sp, r7
 80165b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ba:	4770      	bx	lr

080165bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80165bc:	b480      	push	{r7}
 80165be:	b087      	sub	sp, #28
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	60f8      	str	r0, [r7, #12]
 80165c4:	60b9      	str	r1, [r7, #8]
 80165c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80165cc:	68bb      	ldr	r3, [r7, #8]
 80165ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d00d      	beq.n	80165f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80165d6:	693a      	ldr	r2, [r7, #16]
 80165d8:	1c53      	adds	r3, r2, #1
 80165da:	613b      	str	r3, [r7, #16]
 80165dc:	697b      	ldr	r3, [r7, #20]
 80165de:	1c59      	adds	r1, r3, #1
 80165e0:	6179      	str	r1, [r7, #20]
 80165e2:	7812      	ldrb	r2, [r2, #0]
 80165e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	3b01      	subs	r3, #1
 80165ea:	607b      	str	r3, [r7, #4]
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d1f1      	bne.n	80165d6 <mem_cpy+0x1a>
	}
}
 80165f2:	bf00      	nop
 80165f4:	371c      	adds	r7, #28
 80165f6:	46bd      	mov	sp, r7
 80165f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fc:	4770      	bx	lr

080165fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80165fe:	b480      	push	{r7}
 8016600:	b087      	sub	sp, #28
 8016602:	af00      	add	r7, sp, #0
 8016604:	60f8      	str	r0, [r7, #12]
 8016606:	60b9      	str	r1, [r7, #8]
 8016608:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801660e:	697b      	ldr	r3, [r7, #20]
 8016610:	1c5a      	adds	r2, r3, #1
 8016612:	617a      	str	r2, [r7, #20]
 8016614:	68ba      	ldr	r2, [r7, #8]
 8016616:	b2d2      	uxtb	r2, r2
 8016618:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	3b01      	subs	r3, #1
 801661e:	607b      	str	r3, [r7, #4]
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d1f3      	bne.n	801660e <mem_set+0x10>
}
 8016626:	bf00      	nop
 8016628:	371c      	adds	r7, #28
 801662a:	46bd      	mov	sp, r7
 801662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016630:	4770      	bx	lr

08016632 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016632:	b480      	push	{r7}
 8016634:	b089      	sub	sp, #36	; 0x24
 8016636:	af00      	add	r7, sp, #0
 8016638:	60f8      	str	r0, [r7, #12]
 801663a:	60b9      	str	r1, [r7, #8]
 801663c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	61fb      	str	r3, [r7, #28]
 8016642:	68bb      	ldr	r3, [r7, #8]
 8016644:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016646:	2300      	movs	r3, #0
 8016648:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801664a:	69fb      	ldr	r3, [r7, #28]
 801664c:	1c5a      	adds	r2, r3, #1
 801664e:	61fa      	str	r2, [r7, #28]
 8016650:	781b      	ldrb	r3, [r3, #0]
 8016652:	4619      	mov	r1, r3
 8016654:	69bb      	ldr	r3, [r7, #24]
 8016656:	1c5a      	adds	r2, r3, #1
 8016658:	61ba      	str	r2, [r7, #24]
 801665a:	781b      	ldrb	r3, [r3, #0]
 801665c:	1acb      	subs	r3, r1, r3
 801665e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	3b01      	subs	r3, #1
 8016664:	607b      	str	r3, [r7, #4]
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d002      	beq.n	8016672 <mem_cmp+0x40>
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d0eb      	beq.n	801664a <mem_cmp+0x18>

	return r;
 8016672:	697b      	ldr	r3, [r7, #20]
}
 8016674:	4618      	mov	r0, r3
 8016676:	3724      	adds	r7, #36	; 0x24
 8016678:	46bd      	mov	sp, r7
 801667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667e:	4770      	bx	lr

08016680 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016680:	b480      	push	{r7}
 8016682:	b083      	sub	sp, #12
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
 8016688:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801668a:	e002      	b.n	8016692 <chk_chr+0x12>
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	3301      	adds	r3, #1
 8016690:	607b      	str	r3, [r7, #4]
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	781b      	ldrb	r3, [r3, #0]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d005      	beq.n	80166a6 <chk_chr+0x26>
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	781b      	ldrb	r3, [r3, #0]
 801669e:	461a      	mov	r2, r3
 80166a0:	683b      	ldr	r3, [r7, #0]
 80166a2:	4293      	cmp	r3, r2
 80166a4:	d1f2      	bne.n	801668c <chk_chr+0xc>
	return *str;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	781b      	ldrb	r3, [r3, #0]
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	370c      	adds	r7, #12
 80166ae:	46bd      	mov	sp, r7
 80166b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b4:	4770      	bx	lr
	...

080166b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80166b8:	b480      	push	{r7}
 80166ba:	b085      	sub	sp, #20
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
 80166c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80166c2:	2300      	movs	r3, #0
 80166c4:	60bb      	str	r3, [r7, #8]
 80166c6:	68bb      	ldr	r3, [r7, #8]
 80166c8:	60fb      	str	r3, [r7, #12]
 80166ca:	e029      	b.n	8016720 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80166cc:	4a27      	ldr	r2, [pc, #156]	; (801676c <chk_lock+0xb4>)
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	011b      	lsls	r3, r3, #4
 80166d2:	4413      	add	r3, r2
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d01d      	beq.n	8016716 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80166da:	4a24      	ldr	r2, [pc, #144]	; (801676c <chk_lock+0xb4>)
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	011b      	lsls	r3, r3, #4
 80166e0:	4413      	add	r3, r2
 80166e2:	681a      	ldr	r2, [r3, #0]
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d116      	bne.n	801671a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80166ec:	4a1f      	ldr	r2, [pc, #124]	; (801676c <chk_lock+0xb4>)
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	011b      	lsls	r3, r3, #4
 80166f2:	4413      	add	r3, r2
 80166f4:	3304      	adds	r3, #4
 80166f6:	681a      	ldr	r2, [r3, #0]
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80166fc:	429a      	cmp	r2, r3
 80166fe:	d10c      	bne.n	801671a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016700:	4a1a      	ldr	r2, [pc, #104]	; (801676c <chk_lock+0xb4>)
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	011b      	lsls	r3, r3, #4
 8016706:	4413      	add	r3, r2
 8016708:	3308      	adds	r3, #8
 801670a:	681a      	ldr	r2, [r3, #0]
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016710:	429a      	cmp	r2, r3
 8016712:	d102      	bne.n	801671a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016714:	e007      	b.n	8016726 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016716:	2301      	movs	r3, #1
 8016718:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	3301      	adds	r3, #1
 801671e:	60fb      	str	r3, [r7, #12]
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2b01      	cmp	r3, #1
 8016724:	d9d2      	bls.n	80166cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	2b02      	cmp	r3, #2
 801672a:	d109      	bne.n	8016740 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801672c:	68bb      	ldr	r3, [r7, #8]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d102      	bne.n	8016738 <chk_lock+0x80>
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	2b02      	cmp	r3, #2
 8016736:	d101      	bne.n	801673c <chk_lock+0x84>
 8016738:	2300      	movs	r3, #0
 801673a:	e010      	b.n	801675e <chk_lock+0xa6>
 801673c:	2312      	movs	r3, #18
 801673e:	e00e      	b.n	801675e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d108      	bne.n	8016758 <chk_lock+0xa0>
 8016746:	4a09      	ldr	r2, [pc, #36]	; (801676c <chk_lock+0xb4>)
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	011b      	lsls	r3, r3, #4
 801674c:	4413      	add	r3, r2
 801674e:	330c      	adds	r3, #12
 8016750:	881b      	ldrh	r3, [r3, #0]
 8016752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016756:	d101      	bne.n	801675c <chk_lock+0xa4>
 8016758:	2310      	movs	r3, #16
 801675a:	e000      	b.n	801675e <chk_lock+0xa6>
 801675c:	2300      	movs	r3, #0
}
 801675e:	4618      	mov	r0, r3
 8016760:	3714      	adds	r7, #20
 8016762:	46bd      	mov	sp, r7
 8016764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016768:	4770      	bx	lr
 801676a:	bf00      	nop
 801676c:	24000b64 	.word	0x24000b64

08016770 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016770:	b480      	push	{r7}
 8016772:	b083      	sub	sp, #12
 8016774:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016776:	2300      	movs	r3, #0
 8016778:	607b      	str	r3, [r7, #4]
 801677a:	e002      	b.n	8016782 <enq_lock+0x12>
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	3301      	adds	r3, #1
 8016780:	607b      	str	r3, [r7, #4]
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	2b01      	cmp	r3, #1
 8016786:	d806      	bhi.n	8016796 <enq_lock+0x26>
 8016788:	4a09      	ldr	r2, [pc, #36]	; (80167b0 <enq_lock+0x40>)
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	011b      	lsls	r3, r3, #4
 801678e:	4413      	add	r3, r2
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d1f2      	bne.n	801677c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	2b02      	cmp	r3, #2
 801679a:	bf14      	ite	ne
 801679c:	2301      	movne	r3, #1
 801679e:	2300      	moveq	r3, #0
 80167a0:	b2db      	uxtb	r3, r3
}
 80167a2:	4618      	mov	r0, r3
 80167a4:	370c      	adds	r7, #12
 80167a6:	46bd      	mov	sp, r7
 80167a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ac:	4770      	bx	lr
 80167ae:	bf00      	nop
 80167b0:	24000b64 	.word	0x24000b64

080167b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80167b4:	b480      	push	{r7}
 80167b6:	b085      	sub	sp, #20
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
 80167bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80167be:	2300      	movs	r3, #0
 80167c0:	60fb      	str	r3, [r7, #12]
 80167c2:	e01f      	b.n	8016804 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80167c4:	4a41      	ldr	r2, [pc, #260]	; (80168cc <inc_lock+0x118>)
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	011b      	lsls	r3, r3, #4
 80167ca:	4413      	add	r3, r2
 80167cc:	681a      	ldr	r2, [r3, #0]
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	429a      	cmp	r2, r3
 80167d4:	d113      	bne.n	80167fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80167d6:	4a3d      	ldr	r2, [pc, #244]	; (80168cc <inc_lock+0x118>)
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	011b      	lsls	r3, r3, #4
 80167dc:	4413      	add	r3, r2
 80167de:	3304      	adds	r3, #4
 80167e0:	681a      	ldr	r2, [r3, #0]
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80167e6:	429a      	cmp	r2, r3
 80167e8:	d109      	bne.n	80167fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80167ea:	4a38      	ldr	r2, [pc, #224]	; (80168cc <inc_lock+0x118>)
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	011b      	lsls	r3, r3, #4
 80167f0:	4413      	add	r3, r2
 80167f2:	3308      	adds	r3, #8
 80167f4:	681a      	ldr	r2, [r3, #0]
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80167fa:	429a      	cmp	r2, r3
 80167fc:	d006      	beq.n	801680c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	3301      	adds	r3, #1
 8016802:	60fb      	str	r3, [r7, #12]
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	2b01      	cmp	r3, #1
 8016808:	d9dc      	bls.n	80167c4 <inc_lock+0x10>
 801680a:	e000      	b.n	801680e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801680c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	2b02      	cmp	r3, #2
 8016812:	d132      	bne.n	801687a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016814:	2300      	movs	r3, #0
 8016816:	60fb      	str	r3, [r7, #12]
 8016818:	e002      	b.n	8016820 <inc_lock+0x6c>
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	3301      	adds	r3, #1
 801681e:	60fb      	str	r3, [r7, #12]
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	2b01      	cmp	r3, #1
 8016824:	d806      	bhi.n	8016834 <inc_lock+0x80>
 8016826:	4a29      	ldr	r2, [pc, #164]	; (80168cc <inc_lock+0x118>)
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	011b      	lsls	r3, r3, #4
 801682c:	4413      	add	r3, r2
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d1f2      	bne.n	801681a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	2b02      	cmp	r3, #2
 8016838:	d101      	bne.n	801683e <inc_lock+0x8a>
 801683a:	2300      	movs	r3, #0
 801683c:	e040      	b.n	80168c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681a      	ldr	r2, [r3, #0]
 8016842:	4922      	ldr	r1, [pc, #136]	; (80168cc <inc_lock+0x118>)
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	011b      	lsls	r3, r3, #4
 8016848:	440b      	add	r3, r1
 801684a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	689a      	ldr	r2, [r3, #8]
 8016850:	491e      	ldr	r1, [pc, #120]	; (80168cc <inc_lock+0x118>)
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	011b      	lsls	r3, r3, #4
 8016856:	440b      	add	r3, r1
 8016858:	3304      	adds	r3, #4
 801685a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	695a      	ldr	r2, [r3, #20]
 8016860:	491a      	ldr	r1, [pc, #104]	; (80168cc <inc_lock+0x118>)
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	011b      	lsls	r3, r3, #4
 8016866:	440b      	add	r3, r1
 8016868:	3308      	adds	r3, #8
 801686a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801686c:	4a17      	ldr	r2, [pc, #92]	; (80168cc <inc_lock+0x118>)
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	011b      	lsls	r3, r3, #4
 8016872:	4413      	add	r3, r2
 8016874:	330c      	adds	r3, #12
 8016876:	2200      	movs	r2, #0
 8016878:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d009      	beq.n	8016894 <inc_lock+0xe0>
 8016880:	4a12      	ldr	r2, [pc, #72]	; (80168cc <inc_lock+0x118>)
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	011b      	lsls	r3, r3, #4
 8016886:	4413      	add	r3, r2
 8016888:	330c      	adds	r3, #12
 801688a:	881b      	ldrh	r3, [r3, #0]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d001      	beq.n	8016894 <inc_lock+0xe0>
 8016890:	2300      	movs	r3, #0
 8016892:	e015      	b.n	80168c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d108      	bne.n	80168ac <inc_lock+0xf8>
 801689a:	4a0c      	ldr	r2, [pc, #48]	; (80168cc <inc_lock+0x118>)
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	011b      	lsls	r3, r3, #4
 80168a0:	4413      	add	r3, r2
 80168a2:	330c      	adds	r3, #12
 80168a4:	881b      	ldrh	r3, [r3, #0]
 80168a6:	3301      	adds	r3, #1
 80168a8:	b29a      	uxth	r2, r3
 80168aa:	e001      	b.n	80168b0 <inc_lock+0xfc>
 80168ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80168b0:	4906      	ldr	r1, [pc, #24]	; (80168cc <inc_lock+0x118>)
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	011b      	lsls	r3, r3, #4
 80168b6:	440b      	add	r3, r1
 80168b8:	330c      	adds	r3, #12
 80168ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	3301      	adds	r3, #1
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3714      	adds	r7, #20
 80168c4:	46bd      	mov	sp, r7
 80168c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ca:	4770      	bx	lr
 80168cc:	24000b64 	.word	0x24000b64

080168d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80168d0:	b480      	push	{r7}
 80168d2:	b085      	sub	sp, #20
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	3b01      	subs	r3, #1
 80168dc:	607b      	str	r3, [r7, #4]
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	2b01      	cmp	r3, #1
 80168e2:	d825      	bhi.n	8016930 <dec_lock+0x60>
		n = Files[i].ctr;
 80168e4:	4a17      	ldr	r2, [pc, #92]	; (8016944 <dec_lock+0x74>)
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	011b      	lsls	r3, r3, #4
 80168ea:	4413      	add	r3, r2
 80168ec:	330c      	adds	r3, #12
 80168ee:	881b      	ldrh	r3, [r3, #0]
 80168f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80168f2:	89fb      	ldrh	r3, [r7, #14]
 80168f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168f8:	d101      	bne.n	80168fe <dec_lock+0x2e>
 80168fa:	2300      	movs	r3, #0
 80168fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80168fe:	89fb      	ldrh	r3, [r7, #14]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d002      	beq.n	801690a <dec_lock+0x3a>
 8016904:	89fb      	ldrh	r3, [r7, #14]
 8016906:	3b01      	subs	r3, #1
 8016908:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801690a:	4a0e      	ldr	r2, [pc, #56]	; (8016944 <dec_lock+0x74>)
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	011b      	lsls	r3, r3, #4
 8016910:	4413      	add	r3, r2
 8016912:	330c      	adds	r3, #12
 8016914:	89fa      	ldrh	r2, [r7, #14]
 8016916:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016918:	89fb      	ldrh	r3, [r7, #14]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d105      	bne.n	801692a <dec_lock+0x5a>
 801691e:	4a09      	ldr	r2, [pc, #36]	; (8016944 <dec_lock+0x74>)
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	011b      	lsls	r3, r3, #4
 8016924:	4413      	add	r3, r2
 8016926:	2200      	movs	r2, #0
 8016928:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801692a:	2300      	movs	r3, #0
 801692c:	737b      	strb	r3, [r7, #13]
 801692e:	e001      	b.n	8016934 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016930:	2302      	movs	r3, #2
 8016932:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8016934:	7b7b      	ldrb	r3, [r7, #13]
}
 8016936:	4618      	mov	r0, r3
 8016938:	3714      	adds	r7, #20
 801693a:	46bd      	mov	sp, r7
 801693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016940:	4770      	bx	lr
 8016942:	bf00      	nop
 8016944:	24000b64 	.word	0x24000b64

08016948 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016948:	b480      	push	{r7}
 801694a:	b085      	sub	sp, #20
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016950:	2300      	movs	r3, #0
 8016952:	60fb      	str	r3, [r7, #12]
 8016954:	e010      	b.n	8016978 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016956:	4a0d      	ldr	r2, [pc, #52]	; (801698c <clear_lock+0x44>)
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	011b      	lsls	r3, r3, #4
 801695c:	4413      	add	r3, r2
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	687a      	ldr	r2, [r7, #4]
 8016962:	429a      	cmp	r2, r3
 8016964:	d105      	bne.n	8016972 <clear_lock+0x2a>
 8016966:	4a09      	ldr	r2, [pc, #36]	; (801698c <clear_lock+0x44>)
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	011b      	lsls	r3, r3, #4
 801696c:	4413      	add	r3, r2
 801696e:	2200      	movs	r2, #0
 8016970:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	3301      	adds	r3, #1
 8016976:	60fb      	str	r3, [r7, #12]
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	2b01      	cmp	r3, #1
 801697c:	d9eb      	bls.n	8016956 <clear_lock+0xe>
	}
}
 801697e:	bf00      	nop
 8016980:	3714      	adds	r7, #20
 8016982:	46bd      	mov	sp, r7
 8016984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016988:	4770      	bx	lr
 801698a:	bf00      	nop
 801698c:	24000b64 	.word	0x24000b64

08016990 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016990:	b580      	push	{r7, lr}
 8016992:	b086      	sub	sp, #24
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016998:	2300      	movs	r3, #0
 801699a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	78db      	ldrb	r3, [r3, #3]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d034      	beq.n	8016a0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	7858      	ldrb	r0, [r3, #1]
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80169b4:	2301      	movs	r3, #1
 80169b6:	697a      	ldr	r2, [r7, #20]
 80169b8:	f7ff fd40 	bl	801643c <disk_write>
 80169bc:	4603      	mov	r3, r0
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d002      	beq.n	80169c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80169c2:	2301      	movs	r3, #1
 80169c4:	73fb      	strb	r3, [r7, #15]
 80169c6:	e022      	b.n	8016a0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2200      	movs	r2, #0
 80169cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6a1b      	ldr	r3, [r3, #32]
 80169d2:	697a      	ldr	r2, [r7, #20]
 80169d4:	1ad2      	subs	r2, r2, r3
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	699b      	ldr	r3, [r3, #24]
 80169da:	429a      	cmp	r2, r3
 80169dc:	d217      	bcs.n	8016a0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	789b      	ldrb	r3, [r3, #2]
 80169e2:	613b      	str	r3, [r7, #16]
 80169e4:	e010      	b.n	8016a08 <sync_window+0x78>
					wsect += fs->fsize;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	699b      	ldr	r3, [r3, #24]
 80169ea:	697a      	ldr	r2, [r7, #20]
 80169ec:	4413      	add	r3, r2
 80169ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	7858      	ldrb	r0, [r3, #1]
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80169fa:	2301      	movs	r3, #1
 80169fc:	697a      	ldr	r2, [r7, #20]
 80169fe:	f7ff fd1d 	bl	801643c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016a02:	693b      	ldr	r3, [r7, #16]
 8016a04:	3b01      	subs	r3, #1
 8016a06:	613b      	str	r3, [r7, #16]
 8016a08:	693b      	ldr	r3, [r7, #16]
 8016a0a:	2b01      	cmp	r3, #1
 8016a0c:	d8eb      	bhi.n	80169e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a10:	4618      	mov	r0, r3
 8016a12:	3718      	adds	r7, #24
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bd80      	pop	{r7, pc}

08016a18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b084      	sub	sp, #16
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016a22:	2300      	movs	r3, #0
 8016a24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a2a:	683a      	ldr	r2, [r7, #0]
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d01b      	beq.n	8016a68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	f7ff ffad 	bl	8016990 <sync_window>
 8016a36:	4603      	mov	r3, r0
 8016a38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016a3a:	7bfb      	ldrb	r3, [r7, #15]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d113      	bne.n	8016a68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	7858      	ldrb	r0, [r3, #1]
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	683a      	ldr	r2, [r7, #0]
 8016a4e:	f7ff fcd5 	bl	80163fc <disk_read>
 8016a52:	4603      	mov	r3, r0
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d004      	beq.n	8016a62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016a58:	f04f 33ff 	mov.w	r3, #4294967295
 8016a5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016a5e:	2301      	movs	r3, #1
 8016a60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	683a      	ldr	r2, [r7, #0]
 8016a66:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8016a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	3710      	adds	r7, #16
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}
	...

08016a74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b084      	sub	sp, #16
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016a7c:	6878      	ldr	r0, [r7, #4]
 8016a7e:	f7ff ff87 	bl	8016990 <sync_window>
 8016a82:	4603      	mov	r3, r0
 8016a84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016a86:	7bfb      	ldrb	r3, [r7, #15]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d158      	bne.n	8016b3e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	781b      	ldrb	r3, [r3, #0]
 8016a90:	2b03      	cmp	r3, #3
 8016a92:	d148      	bne.n	8016b26 <sync_fs+0xb2>
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	791b      	ldrb	r3, [r3, #4]
 8016a98:	2b01      	cmp	r3, #1
 8016a9a:	d144      	bne.n	8016b26 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	3330      	adds	r3, #48	; 0x30
 8016aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016aa4:	2100      	movs	r1, #0
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	f7ff fda9 	bl	80165fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	3330      	adds	r3, #48	; 0x30
 8016ab0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016ab4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f7ff fd38 	bl	801652e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	3330      	adds	r3, #48	; 0x30
 8016ac2:	4921      	ldr	r1, [pc, #132]	; (8016b48 <sync_fs+0xd4>)
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	f7ff fd4d 	bl	8016564 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	3330      	adds	r3, #48	; 0x30
 8016ace:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016ad2:	491e      	ldr	r1, [pc, #120]	; (8016b4c <sync_fs+0xd8>)
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f7ff fd45 	bl	8016564 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	3330      	adds	r3, #48	; 0x30
 8016ade:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	691b      	ldr	r3, [r3, #16]
 8016ae6:	4619      	mov	r1, r3
 8016ae8:	4610      	mov	r0, r2
 8016aea:	f7ff fd3b 	bl	8016564 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	3330      	adds	r3, #48	; 0x30
 8016af2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	68db      	ldr	r3, [r3, #12]
 8016afa:	4619      	mov	r1, r3
 8016afc:	4610      	mov	r0, r2
 8016afe:	f7ff fd31 	bl	8016564 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	69db      	ldr	r3, [r3, #28]
 8016b06:	1c5a      	adds	r2, r3, #1
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	7858      	ldrb	r0, [r3, #1]
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	f7ff fc8e 	bl	801643c <disk_write>
			fs->fsi_flag = 0;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	2200      	movs	r2, #0
 8016b24:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	785b      	ldrb	r3, [r3, #1]
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	2100      	movs	r1, #0
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7ff fca4 	bl	801647c <disk_ioctl>
 8016b34:	4603      	mov	r3, r0
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d001      	beq.n	8016b3e <sync_fs+0xca>
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	3710      	adds	r7, #16
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}
 8016b48:	41615252 	.word	0x41615252
 8016b4c:	61417272 	.word	0x61417272

08016b50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016b50:	b480      	push	{r7}
 8016b52:	b083      	sub	sp, #12
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
 8016b58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016b5a:	683b      	ldr	r3, [r7, #0]
 8016b5c:	3b02      	subs	r3, #2
 8016b5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	695b      	ldr	r3, [r3, #20]
 8016b64:	3b02      	subs	r3, #2
 8016b66:	683a      	ldr	r2, [r7, #0]
 8016b68:	429a      	cmp	r2, r3
 8016b6a:	d301      	bcc.n	8016b70 <clust2sect+0x20>
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	e008      	b.n	8016b82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	895b      	ldrh	r3, [r3, #10]
 8016b74:	461a      	mov	r2, r3
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	fb03 f202 	mul.w	r2, r3, r2
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b80:	4413      	add	r3, r2
}
 8016b82:	4618      	mov	r0, r3
 8016b84:	370c      	adds	r7, #12
 8016b86:	46bd      	mov	sp, r7
 8016b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8c:	4770      	bx	lr

08016b8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016b8e:	b580      	push	{r7, lr}
 8016b90:	b086      	sub	sp, #24
 8016b92:	af00      	add	r7, sp, #0
 8016b94:	6078      	str	r0, [r7, #4]
 8016b96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016b9e:	683b      	ldr	r3, [r7, #0]
 8016ba0:	2b01      	cmp	r3, #1
 8016ba2:	d904      	bls.n	8016bae <get_fat+0x20>
 8016ba4:	693b      	ldr	r3, [r7, #16]
 8016ba6:	695b      	ldr	r3, [r3, #20]
 8016ba8:	683a      	ldr	r2, [r7, #0]
 8016baa:	429a      	cmp	r2, r3
 8016bac:	d302      	bcc.n	8016bb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8016bae:	2301      	movs	r3, #1
 8016bb0:	617b      	str	r3, [r7, #20]
 8016bb2:	e08c      	b.n	8016cce <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8016bb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016bba:	693b      	ldr	r3, [r7, #16]
 8016bbc:	781b      	ldrb	r3, [r3, #0]
 8016bbe:	2b02      	cmp	r3, #2
 8016bc0:	d045      	beq.n	8016c4e <get_fat+0xc0>
 8016bc2:	2b03      	cmp	r3, #3
 8016bc4:	d05d      	beq.n	8016c82 <get_fat+0xf4>
 8016bc6:	2b01      	cmp	r3, #1
 8016bc8:	d177      	bne.n	8016cba <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016bca:	683b      	ldr	r3, [r7, #0]
 8016bcc:	60fb      	str	r3, [r7, #12]
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	085b      	lsrs	r3, r3, #1
 8016bd2:	68fa      	ldr	r2, [r7, #12]
 8016bd4:	4413      	add	r3, r2
 8016bd6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016bd8:	693b      	ldr	r3, [r7, #16]
 8016bda:	6a1a      	ldr	r2, [r3, #32]
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	0a5b      	lsrs	r3, r3, #9
 8016be0:	4413      	add	r3, r2
 8016be2:	4619      	mov	r1, r3
 8016be4:	6938      	ldr	r0, [r7, #16]
 8016be6:	f7ff ff17 	bl	8016a18 <move_window>
 8016bea:	4603      	mov	r3, r0
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d167      	bne.n	8016cc0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	1c5a      	adds	r2, r3, #1
 8016bf4:	60fa      	str	r2, [r7, #12]
 8016bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016bfa:	693a      	ldr	r2, [r7, #16]
 8016bfc:	4413      	add	r3, r2
 8016bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c02:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	6a1a      	ldr	r2, [r3, #32]
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	0a5b      	lsrs	r3, r3, #9
 8016c0c:	4413      	add	r3, r2
 8016c0e:	4619      	mov	r1, r3
 8016c10:	6938      	ldr	r0, [r7, #16]
 8016c12:	f7ff ff01 	bl	8016a18 <move_window>
 8016c16:	4603      	mov	r3, r0
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d153      	bne.n	8016cc4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c22:	693a      	ldr	r2, [r7, #16]
 8016c24:	4413      	add	r3, r2
 8016c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c2a:	021b      	lsls	r3, r3, #8
 8016c2c:	461a      	mov	r2, r3
 8016c2e:	68bb      	ldr	r3, [r7, #8]
 8016c30:	4313      	orrs	r3, r2
 8016c32:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	f003 0301 	and.w	r3, r3, #1
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d002      	beq.n	8016c44 <get_fat+0xb6>
 8016c3e:	68bb      	ldr	r3, [r7, #8]
 8016c40:	091b      	lsrs	r3, r3, #4
 8016c42:	e002      	b.n	8016c4a <get_fat+0xbc>
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016c4a:	617b      	str	r3, [r7, #20]
			break;
 8016c4c:	e03f      	b.n	8016cce <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016c4e:	693b      	ldr	r3, [r7, #16]
 8016c50:	6a1a      	ldr	r2, [r3, #32]
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	0a1b      	lsrs	r3, r3, #8
 8016c56:	4413      	add	r3, r2
 8016c58:	4619      	mov	r1, r3
 8016c5a:	6938      	ldr	r0, [r7, #16]
 8016c5c:	f7ff fedc 	bl	8016a18 <move_window>
 8016c60:	4603      	mov	r3, r0
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d130      	bne.n	8016cc8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016c66:	693b      	ldr	r3, [r7, #16]
 8016c68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	005b      	lsls	r3, r3, #1
 8016c70:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016c74:	4413      	add	r3, r2
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7ff fc1e 	bl	80164b8 <ld_word>
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	617b      	str	r3, [r7, #20]
			break;
 8016c80:	e025      	b.n	8016cce <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016c82:	693b      	ldr	r3, [r7, #16]
 8016c84:	6a1a      	ldr	r2, [r3, #32]
 8016c86:	683b      	ldr	r3, [r7, #0]
 8016c88:	09db      	lsrs	r3, r3, #7
 8016c8a:	4413      	add	r3, r2
 8016c8c:	4619      	mov	r1, r3
 8016c8e:	6938      	ldr	r0, [r7, #16]
 8016c90:	f7ff fec2 	bl	8016a18 <move_window>
 8016c94:	4603      	mov	r3, r0
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d118      	bne.n	8016ccc <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	009b      	lsls	r3, r3, #2
 8016ca4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016ca8:	4413      	add	r3, r2
 8016caa:	4618      	mov	r0, r3
 8016cac:	f7ff fc1c 	bl	80164e8 <ld_dword>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016cb6:	617b      	str	r3, [r7, #20]
			break;
 8016cb8:	e009      	b.n	8016cce <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016cba:	2301      	movs	r3, #1
 8016cbc:	617b      	str	r3, [r7, #20]
 8016cbe:	e006      	b.n	8016cce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016cc0:	bf00      	nop
 8016cc2:	e004      	b.n	8016cce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016cc4:	bf00      	nop
 8016cc6:	e002      	b.n	8016cce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016cc8:	bf00      	nop
 8016cca:	e000      	b.n	8016cce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016ccc:	bf00      	nop
		}
	}

	return val;
 8016cce:	697b      	ldr	r3, [r7, #20]
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3718      	adds	r7, #24
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}

08016cd8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016cd8:	b590      	push	{r4, r7, lr}
 8016cda:	b089      	sub	sp, #36	; 0x24
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016ce4:	2302      	movs	r3, #2
 8016ce6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	2b01      	cmp	r3, #1
 8016cec:	f240 80d6 	bls.w	8016e9c <put_fat+0x1c4>
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	695b      	ldr	r3, [r3, #20]
 8016cf4:	68ba      	ldr	r2, [r7, #8]
 8016cf6:	429a      	cmp	r2, r3
 8016cf8:	f080 80d0 	bcs.w	8016e9c <put_fat+0x1c4>
		switch (fs->fs_type) {
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	2b02      	cmp	r3, #2
 8016d02:	d073      	beq.n	8016dec <put_fat+0x114>
 8016d04:	2b03      	cmp	r3, #3
 8016d06:	f000 8091 	beq.w	8016e2c <put_fat+0x154>
 8016d0a:	2b01      	cmp	r3, #1
 8016d0c:	f040 80c6 	bne.w	8016e9c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	61bb      	str	r3, [r7, #24]
 8016d14:	69bb      	ldr	r3, [r7, #24]
 8016d16:	085b      	lsrs	r3, r3, #1
 8016d18:	69ba      	ldr	r2, [r7, #24]
 8016d1a:	4413      	add	r3, r2
 8016d1c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	6a1a      	ldr	r2, [r3, #32]
 8016d22:	69bb      	ldr	r3, [r7, #24]
 8016d24:	0a5b      	lsrs	r3, r3, #9
 8016d26:	4413      	add	r3, r2
 8016d28:	4619      	mov	r1, r3
 8016d2a:	68f8      	ldr	r0, [r7, #12]
 8016d2c:	f7ff fe74 	bl	8016a18 <move_window>
 8016d30:	4603      	mov	r3, r0
 8016d32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016d34:	7ffb      	ldrb	r3, [r7, #31]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	f040 80a9 	bne.w	8016e8e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016d42:	69bb      	ldr	r3, [r7, #24]
 8016d44:	1c59      	adds	r1, r3, #1
 8016d46:	61b9      	str	r1, [r7, #24]
 8016d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d4c:	4413      	add	r3, r2
 8016d4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016d50:	68bb      	ldr	r3, [r7, #8]
 8016d52:	f003 0301 	and.w	r3, r3, #1
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d00d      	beq.n	8016d76 <put_fat+0x9e>
 8016d5a:	697b      	ldr	r3, [r7, #20]
 8016d5c:	781b      	ldrb	r3, [r3, #0]
 8016d5e:	b25b      	sxtb	r3, r3
 8016d60:	f003 030f 	and.w	r3, r3, #15
 8016d64:	b25a      	sxtb	r2, r3
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	b2db      	uxtb	r3, r3
 8016d6a:	011b      	lsls	r3, r3, #4
 8016d6c:	b25b      	sxtb	r3, r3
 8016d6e:	4313      	orrs	r3, r2
 8016d70:	b25b      	sxtb	r3, r3
 8016d72:	b2db      	uxtb	r3, r3
 8016d74:	e001      	b.n	8016d7a <put_fat+0xa2>
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	b2db      	uxtb	r3, r3
 8016d7a:	697a      	ldr	r2, [r7, #20]
 8016d7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	2201      	movs	r2, #1
 8016d82:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	6a1a      	ldr	r2, [r3, #32]
 8016d88:	69bb      	ldr	r3, [r7, #24]
 8016d8a:	0a5b      	lsrs	r3, r3, #9
 8016d8c:	4413      	add	r3, r2
 8016d8e:	4619      	mov	r1, r3
 8016d90:	68f8      	ldr	r0, [r7, #12]
 8016d92:	f7ff fe41 	bl	8016a18 <move_window>
 8016d96:	4603      	mov	r3, r0
 8016d98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016d9a:	7ffb      	ldrb	r3, [r7, #31]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d178      	bne.n	8016e92 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016da6:	69bb      	ldr	r3, [r7, #24]
 8016da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016dac:	4413      	add	r3, r2
 8016dae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	f003 0301 	and.w	r3, r3, #1
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d003      	beq.n	8016dc2 <put_fat+0xea>
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	091b      	lsrs	r3, r3, #4
 8016dbe:	b2db      	uxtb	r3, r3
 8016dc0:	e00e      	b.n	8016de0 <put_fat+0x108>
 8016dc2:	697b      	ldr	r3, [r7, #20]
 8016dc4:	781b      	ldrb	r3, [r3, #0]
 8016dc6:	b25b      	sxtb	r3, r3
 8016dc8:	f023 030f 	bic.w	r3, r3, #15
 8016dcc:	b25a      	sxtb	r2, r3
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	0a1b      	lsrs	r3, r3, #8
 8016dd2:	b25b      	sxtb	r3, r3
 8016dd4:	f003 030f 	and.w	r3, r3, #15
 8016dd8:	b25b      	sxtb	r3, r3
 8016dda:	4313      	orrs	r3, r2
 8016ddc:	b25b      	sxtb	r3, r3
 8016dde:	b2db      	uxtb	r3, r3
 8016de0:	697a      	ldr	r2, [r7, #20]
 8016de2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	2201      	movs	r2, #1
 8016de8:	70da      	strb	r2, [r3, #3]
			break;
 8016dea:	e057      	b.n	8016e9c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	6a1a      	ldr	r2, [r3, #32]
 8016df0:	68bb      	ldr	r3, [r7, #8]
 8016df2:	0a1b      	lsrs	r3, r3, #8
 8016df4:	4413      	add	r3, r2
 8016df6:	4619      	mov	r1, r3
 8016df8:	68f8      	ldr	r0, [r7, #12]
 8016dfa:	f7ff fe0d 	bl	8016a18 <move_window>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016e02:	7ffb      	ldrb	r3, [r7, #31]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d146      	bne.n	8016e96 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	005b      	lsls	r3, r3, #1
 8016e12:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016e16:	4413      	add	r3, r2
 8016e18:	687a      	ldr	r2, [r7, #4]
 8016e1a:	b292      	uxth	r2, r2
 8016e1c:	4611      	mov	r1, r2
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7ff fb85 	bl	801652e <st_word>
			fs->wflag = 1;
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	2201      	movs	r2, #1
 8016e28:	70da      	strb	r2, [r3, #3]
			break;
 8016e2a:	e037      	b.n	8016e9c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	6a1a      	ldr	r2, [r3, #32]
 8016e30:	68bb      	ldr	r3, [r7, #8]
 8016e32:	09db      	lsrs	r3, r3, #7
 8016e34:	4413      	add	r3, r2
 8016e36:	4619      	mov	r1, r3
 8016e38:	68f8      	ldr	r0, [r7, #12]
 8016e3a:	f7ff fded 	bl	8016a18 <move_window>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016e42:	7ffb      	ldrb	r3, [r7, #31]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d128      	bne.n	8016e9a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e54:	68bb      	ldr	r3, [r7, #8]
 8016e56:	009b      	lsls	r3, r3, #2
 8016e58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016e5c:	4413      	add	r3, r2
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7ff fb42 	bl	80164e8 <ld_dword>
 8016e64:	4603      	mov	r3, r0
 8016e66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016e6a:	4323      	orrs	r3, r4
 8016e6c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	009b      	lsls	r3, r3, #2
 8016e78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016e7c:	4413      	add	r3, r2
 8016e7e:	6879      	ldr	r1, [r7, #4]
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7ff fb6f 	bl	8016564 <st_dword>
			fs->wflag = 1;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	2201      	movs	r2, #1
 8016e8a:	70da      	strb	r2, [r3, #3]
			break;
 8016e8c:	e006      	b.n	8016e9c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016e8e:	bf00      	nop
 8016e90:	e004      	b.n	8016e9c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016e92:	bf00      	nop
 8016e94:	e002      	b.n	8016e9c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016e96:	bf00      	nop
 8016e98:	e000      	b.n	8016e9c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016e9a:	bf00      	nop
		}
	}
	return res;
 8016e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	3724      	adds	r7, #36	; 0x24
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bd90      	pop	{r4, r7, pc}

08016ea6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016ea6:	b580      	push	{r7, lr}
 8016ea8:	b088      	sub	sp, #32
 8016eaa:	af00      	add	r7, sp, #0
 8016eac:	60f8      	str	r0, [r7, #12]
 8016eae:	60b9      	str	r1, [r7, #8]
 8016eb0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	2b01      	cmp	r3, #1
 8016ec0:	d904      	bls.n	8016ecc <remove_chain+0x26>
 8016ec2:	69bb      	ldr	r3, [r7, #24]
 8016ec4:	695b      	ldr	r3, [r3, #20]
 8016ec6:	68ba      	ldr	r2, [r7, #8]
 8016ec8:	429a      	cmp	r2, r3
 8016eca:	d301      	bcc.n	8016ed0 <remove_chain+0x2a>
 8016ecc:	2302      	movs	r3, #2
 8016ece:	e04b      	b.n	8016f68 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d00c      	beq.n	8016ef0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8016eda:	6879      	ldr	r1, [r7, #4]
 8016edc:	69b8      	ldr	r0, [r7, #24]
 8016ede:	f7ff fefb 	bl	8016cd8 <put_fat>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8016ee6:	7ffb      	ldrb	r3, [r7, #31]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d001      	beq.n	8016ef0 <remove_chain+0x4a>
 8016eec:	7ffb      	ldrb	r3, [r7, #31]
 8016eee:	e03b      	b.n	8016f68 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016ef0:	68b9      	ldr	r1, [r7, #8]
 8016ef2:	68f8      	ldr	r0, [r7, #12]
 8016ef4:	f7ff fe4b 	bl	8016b8e <get_fat>
 8016ef8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8016efa:	697b      	ldr	r3, [r7, #20]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d031      	beq.n	8016f64 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016f00:	697b      	ldr	r3, [r7, #20]
 8016f02:	2b01      	cmp	r3, #1
 8016f04:	d101      	bne.n	8016f0a <remove_chain+0x64>
 8016f06:	2302      	movs	r3, #2
 8016f08:	e02e      	b.n	8016f68 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016f0a:	697b      	ldr	r3, [r7, #20]
 8016f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f10:	d101      	bne.n	8016f16 <remove_chain+0x70>
 8016f12:	2301      	movs	r3, #1
 8016f14:	e028      	b.n	8016f68 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016f16:	2200      	movs	r2, #0
 8016f18:	68b9      	ldr	r1, [r7, #8]
 8016f1a:	69b8      	ldr	r0, [r7, #24]
 8016f1c:	f7ff fedc 	bl	8016cd8 <put_fat>
 8016f20:	4603      	mov	r3, r0
 8016f22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8016f24:	7ffb      	ldrb	r3, [r7, #31]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d001      	beq.n	8016f2e <remove_chain+0x88>
 8016f2a:	7ffb      	ldrb	r3, [r7, #31]
 8016f2c:	e01c      	b.n	8016f68 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016f2e:	69bb      	ldr	r3, [r7, #24]
 8016f30:	691a      	ldr	r2, [r3, #16]
 8016f32:	69bb      	ldr	r3, [r7, #24]
 8016f34:	695b      	ldr	r3, [r3, #20]
 8016f36:	3b02      	subs	r3, #2
 8016f38:	429a      	cmp	r2, r3
 8016f3a:	d20b      	bcs.n	8016f54 <remove_chain+0xae>
			fs->free_clst++;
 8016f3c:	69bb      	ldr	r3, [r7, #24]
 8016f3e:	691b      	ldr	r3, [r3, #16]
 8016f40:	1c5a      	adds	r2, r3, #1
 8016f42:	69bb      	ldr	r3, [r7, #24]
 8016f44:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8016f46:	69bb      	ldr	r3, [r7, #24]
 8016f48:	791b      	ldrb	r3, [r3, #4]
 8016f4a:	f043 0301 	orr.w	r3, r3, #1
 8016f4e:	b2da      	uxtb	r2, r3
 8016f50:	69bb      	ldr	r3, [r7, #24]
 8016f52:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8016f54:	697b      	ldr	r3, [r7, #20]
 8016f56:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016f58:	69bb      	ldr	r3, [r7, #24]
 8016f5a:	695b      	ldr	r3, [r3, #20]
 8016f5c:	68ba      	ldr	r2, [r7, #8]
 8016f5e:	429a      	cmp	r2, r3
 8016f60:	d3c6      	bcc.n	8016ef0 <remove_chain+0x4a>
 8016f62:	e000      	b.n	8016f66 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016f64:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8016f66:	2300      	movs	r3, #0
}
 8016f68:	4618      	mov	r0, r3
 8016f6a:	3720      	adds	r7, #32
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	bd80      	pop	{r7, pc}

08016f70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b088      	sub	sp, #32
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
 8016f78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016f80:	683b      	ldr	r3, [r7, #0]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d10d      	bne.n	8016fa2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8016f86:	693b      	ldr	r3, [r7, #16]
 8016f88:	68db      	ldr	r3, [r3, #12]
 8016f8a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016f8c:	69bb      	ldr	r3, [r7, #24]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d004      	beq.n	8016f9c <create_chain+0x2c>
 8016f92:	693b      	ldr	r3, [r7, #16]
 8016f94:	695b      	ldr	r3, [r3, #20]
 8016f96:	69ba      	ldr	r2, [r7, #24]
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d31b      	bcc.n	8016fd4 <create_chain+0x64>
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	61bb      	str	r3, [r7, #24]
 8016fa0:	e018      	b.n	8016fd4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016fa2:	6839      	ldr	r1, [r7, #0]
 8016fa4:	6878      	ldr	r0, [r7, #4]
 8016fa6:	f7ff fdf2 	bl	8016b8e <get_fat>
 8016faa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	2b01      	cmp	r3, #1
 8016fb0:	d801      	bhi.n	8016fb6 <create_chain+0x46>
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	e070      	b.n	8017098 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fbc:	d101      	bne.n	8016fc2 <create_chain+0x52>
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	e06a      	b.n	8017098 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016fc2:	693b      	ldr	r3, [r7, #16]
 8016fc4:	695b      	ldr	r3, [r3, #20]
 8016fc6:	68fa      	ldr	r2, [r7, #12]
 8016fc8:	429a      	cmp	r2, r3
 8016fca:	d201      	bcs.n	8016fd0 <create_chain+0x60>
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	e063      	b.n	8017098 <create_chain+0x128>
		scl = clst;
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8016fd4:	69bb      	ldr	r3, [r7, #24]
 8016fd6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8016fd8:	69fb      	ldr	r3, [r7, #28]
 8016fda:	3301      	adds	r3, #1
 8016fdc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	695b      	ldr	r3, [r3, #20]
 8016fe2:	69fa      	ldr	r2, [r7, #28]
 8016fe4:	429a      	cmp	r2, r3
 8016fe6:	d307      	bcc.n	8016ff8 <create_chain+0x88>
				ncl = 2;
 8016fe8:	2302      	movs	r3, #2
 8016fea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8016fec:	69fa      	ldr	r2, [r7, #28]
 8016fee:	69bb      	ldr	r3, [r7, #24]
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d901      	bls.n	8016ff8 <create_chain+0x88>
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	e04f      	b.n	8017098 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8016ff8:	69f9      	ldr	r1, [r7, #28]
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f7ff fdc7 	bl	8016b8e <get_fat>
 8017000:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d00e      	beq.n	8017026 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	2b01      	cmp	r3, #1
 801700c:	d003      	beq.n	8017016 <create_chain+0xa6>
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017014:	d101      	bne.n	801701a <create_chain+0xaa>
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	e03e      	b.n	8017098 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801701a:	69fa      	ldr	r2, [r7, #28]
 801701c:	69bb      	ldr	r3, [r7, #24]
 801701e:	429a      	cmp	r2, r3
 8017020:	d1da      	bne.n	8016fd8 <create_chain+0x68>
 8017022:	2300      	movs	r3, #0
 8017024:	e038      	b.n	8017098 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8017026:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8017028:	f04f 32ff 	mov.w	r2, #4294967295
 801702c:	69f9      	ldr	r1, [r7, #28]
 801702e:	6938      	ldr	r0, [r7, #16]
 8017030:	f7ff fe52 	bl	8016cd8 <put_fat>
 8017034:	4603      	mov	r3, r0
 8017036:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8017038:	7dfb      	ldrb	r3, [r7, #23]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d109      	bne.n	8017052 <create_chain+0xe2>
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d006      	beq.n	8017052 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017044:	69fa      	ldr	r2, [r7, #28]
 8017046:	6839      	ldr	r1, [r7, #0]
 8017048:	6938      	ldr	r0, [r7, #16]
 801704a:	f7ff fe45 	bl	8016cd8 <put_fat>
 801704e:	4603      	mov	r3, r0
 8017050:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017052:	7dfb      	ldrb	r3, [r7, #23]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d116      	bne.n	8017086 <create_chain+0x116>
		fs->last_clst = ncl;
 8017058:	693b      	ldr	r3, [r7, #16]
 801705a:	69fa      	ldr	r2, [r7, #28]
 801705c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801705e:	693b      	ldr	r3, [r7, #16]
 8017060:	691a      	ldr	r2, [r3, #16]
 8017062:	693b      	ldr	r3, [r7, #16]
 8017064:	695b      	ldr	r3, [r3, #20]
 8017066:	3b02      	subs	r3, #2
 8017068:	429a      	cmp	r2, r3
 801706a:	d804      	bhi.n	8017076 <create_chain+0x106>
 801706c:	693b      	ldr	r3, [r7, #16]
 801706e:	691b      	ldr	r3, [r3, #16]
 8017070:	1e5a      	subs	r2, r3, #1
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8017076:	693b      	ldr	r3, [r7, #16]
 8017078:	791b      	ldrb	r3, [r3, #4]
 801707a:	f043 0301 	orr.w	r3, r3, #1
 801707e:	b2da      	uxtb	r2, r3
 8017080:	693b      	ldr	r3, [r7, #16]
 8017082:	711a      	strb	r2, [r3, #4]
 8017084:	e007      	b.n	8017096 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8017086:	7dfb      	ldrb	r3, [r7, #23]
 8017088:	2b01      	cmp	r3, #1
 801708a:	d102      	bne.n	8017092 <create_chain+0x122>
 801708c:	f04f 33ff 	mov.w	r3, #4294967295
 8017090:	e000      	b.n	8017094 <create_chain+0x124>
 8017092:	2301      	movs	r3, #1
 8017094:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017096:	69fb      	ldr	r3, [r7, #28]
}
 8017098:	4618      	mov	r0, r3
 801709a:	3720      	adds	r7, #32
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}

080170a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80170a0:	b480      	push	{r7}
 80170a2:	b087      	sub	sp, #28
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
 80170a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170b4:	3304      	adds	r3, #4
 80170b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	0a5b      	lsrs	r3, r3, #9
 80170bc:	68fa      	ldr	r2, [r7, #12]
 80170be:	8952      	ldrh	r2, [r2, #10]
 80170c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80170c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80170c6:	693b      	ldr	r3, [r7, #16]
 80170c8:	1d1a      	adds	r2, r3, #4
 80170ca:	613a      	str	r2, [r7, #16]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80170d0:	68bb      	ldr	r3, [r7, #8]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d101      	bne.n	80170da <clmt_clust+0x3a>
 80170d6:	2300      	movs	r3, #0
 80170d8:	e010      	b.n	80170fc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80170da:	697a      	ldr	r2, [r7, #20]
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	429a      	cmp	r2, r3
 80170e0:	d307      	bcc.n	80170f2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80170e2:	697a      	ldr	r2, [r7, #20]
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	1ad3      	subs	r3, r2, r3
 80170e8:	617b      	str	r3, [r7, #20]
 80170ea:	693b      	ldr	r3, [r7, #16]
 80170ec:	3304      	adds	r3, #4
 80170ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80170f0:	e7e9      	b.n	80170c6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80170f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80170f4:	693b      	ldr	r3, [r7, #16]
 80170f6:	681a      	ldr	r2, [r3, #0]
 80170f8:	697b      	ldr	r3, [r7, #20]
 80170fa:	4413      	add	r3, r2
}
 80170fc:	4618      	mov	r0, r3
 80170fe:	371c      	adds	r7, #28
 8017100:	46bd      	mov	sp, r7
 8017102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017106:	4770      	bx	lr

08017108 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b086      	sub	sp, #24
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
 8017110:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017118:	683b      	ldr	r3, [r7, #0]
 801711a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801711e:	d204      	bcs.n	801712a <dir_sdi+0x22>
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	f003 031f 	and.w	r3, r3, #31
 8017126:	2b00      	cmp	r3, #0
 8017128:	d001      	beq.n	801712e <dir_sdi+0x26>
		return FR_INT_ERR;
 801712a:	2302      	movs	r3, #2
 801712c:	e063      	b.n	80171f6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	683a      	ldr	r2, [r7, #0]
 8017132:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	689b      	ldr	r3, [r3, #8]
 8017138:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d106      	bne.n	801714e <dir_sdi+0x46>
 8017140:	693b      	ldr	r3, [r7, #16]
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	2b02      	cmp	r3, #2
 8017146:	d902      	bls.n	801714e <dir_sdi+0x46>
		clst = fs->dirbase;
 8017148:	693b      	ldr	r3, [r7, #16]
 801714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801714c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801714e:	697b      	ldr	r3, [r7, #20]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d10c      	bne.n	801716e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	095b      	lsrs	r3, r3, #5
 8017158:	693a      	ldr	r2, [r7, #16]
 801715a:	8912      	ldrh	r2, [r2, #8]
 801715c:	4293      	cmp	r3, r2
 801715e:	d301      	bcc.n	8017164 <dir_sdi+0x5c>
 8017160:	2302      	movs	r3, #2
 8017162:	e048      	b.n	80171f6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8017164:	693b      	ldr	r3, [r7, #16]
 8017166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	61da      	str	r2, [r3, #28]
 801716c:	e029      	b.n	80171c2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801716e:	693b      	ldr	r3, [r7, #16]
 8017170:	895b      	ldrh	r3, [r3, #10]
 8017172:	025b      	lsls	r3, r3, #9
 8017174:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017176:	e019      	b.n	80171ac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	6979      	ldr	r1, [r7, #20]
 801717c:	4618      	mov	r0, r3
 801717e:	f7ff fd06 	bl	8016b8e <get_fat>
 8017182:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017184:	697b      	ldr	r3, [r7, #20]
 8017186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801718a:	d101      	bne.n	8017190 <dir_sdi+0x88>
 801718c:	2301      	movs	r3, #1
 801718e:	e032      	b.n	80171f6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017190:	697b      	ldr	r3, [r7, #20]
 8017192:	2b01      	cmp	r3, #1
 8017194:	d904      	bls.n	80171a0 <dir_sdi+0x98>
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	695b      	ldr	r3, [r3, #20]
 801719a:	697a      	ldr	r2, [r7, #20]
 801719c:	429a      	cmp	r2, r3
 801719e:	d301      	bcc.n	80171a4 <dir_sdi+0x9c>
 80171a0:	2302      	movs	r3, #2
 80171a2:	e028      	b.n	80171f6 <dir_sdi+0xee>
			ofs -= csz;
 80171a4:	683a      	ldr	r2, [r7, #0]
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	1ad3      	subs	r3, r2, r3
 80171aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80171ac:	683a      	ldr	r2, [r7, #0]
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	429a      	cmp	r2, r3
 80171b2:	d2e1      	bcs.n	8017178 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80171b4:	6979      	ldr	r1, [r7, #20]
 80171b6:	6938      	ldr	r0, [r7, #16]
 80171b8:	f7ff fcca 	bl	8016b50 <clust2sect>
 80171bc:	4602      	mov	r2, r0
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	697a      	ldr	r2, [r7, #20]
 80171c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	69db      	ldr	r3, [r3, #28]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d101      	bne.n	80171d4 <dir_sdi+0xcc>
 80171d0:	2302      	movs	r3, #2
 80171d2:	e010      	b.n	80171f6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	69da      	ldr	r2, [r3, #28]
 80171d8:	683b      	ldr	r3, [r7, #0]
 80171da:	0a5b      	lsrs	r3, r3, #9
 80171dc:	441a      	add	r2, r3
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80171ee:	441a      	add	r2, r3
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80171f4:	2300      	movs	r3, #0
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	3718      	adds	r7, #24
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}

080171fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80171fe:	b580      	push	{r7, lr}
 8017200:	b086      	sub	sp, #24
 8017202:	af00      	add	r7, sp, #0
 8017204:	6078      	str	r0, [r7, #4]
 8017206:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	695b      	ldr	r3, [r3, #20]
 8017212:	3320      	adds	r3, #32
 8017214:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	69db      	ldr	r3, [r3, #28]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d003      	beq.n	8017226 <dir_next+0x28>
 801721e:	68bb      	ldr	r3, [r7, #8]
 8017220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017224:	d301      	bcc.n	801722a <dir_next+0x2c>
 8017226:	2304      	movs	r3, #4
 8017228:	e0aa      	b.n	8017380 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801722a:	68bb      	ldr	r3, [r7, #8]
 801722c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017230:	2b00      	cmp	r3, #0
 8017232:	f040 8098 	bne.w	8017366 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	69db      	ldr	r3, [r3, #28]
 801723a:	1c5a      	adds	r2, r3, #1
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	699b      	ldr	r3, [r3, #24]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d10b      	bne.n	8017260 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017248:	68bb      	ldr	r3, [r7, #8]
 801724a:	095b      	lsrs	r3, r3, #5
 801724c:	68fa      	ldr	r2, [r7, #12]
 801724e:	8912      	ldrh	r2, [r2, #8]
 8017250:	4293      	cmp	r3, r2
 8017252:	f0c0 8088 	bcc.w	8017366 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	2200      	movs	r2, #0
 801725a:	61da      	str	r2, [r3, #28]
 801725c:	2304      	movs	r3, #4
 801725e:	e08f      	b.n	8017380 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017260:	68bb      	ldr	r3, [r7, #8]
 8017262:	0a5b      	lsrs	r3, r3, #9
 8017264:	68fa      	ldr	r2, [r7, #12]
 8017266:	8952      	ldrh	r2, [r2, #10]
 8017268:	3a01      	subs	r2, #1
 801726a:	4013      	ands	r3, r2
 801726c:	2b00      	cmp	r3, #0
 801726e:	d17a      	bne.n	8017366 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017270:	687a      	ldr	r2, [r7, #4]
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	699b      	ldr	r3, [r3, #24]
 8017276:	4619      	mov	r1, r3
 8017278:	4610      	mov	r0, r2
 801727a:	f7ff fc88 	bl	8016b8e <get_fat>
 801727e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	2b01      	cmp	r3, #1
 8017284:	d801      	bhi.n	801728a <dir_next+0x8c>
 8017286:	2302      	movs	r3, #2
 8017288:	e07a      	b.n	8017380 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801728a:	697b      	ldr	r3, [r7, #20]
 801728c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017290:	d101      	bne.n	8017296 <dir_next+0x98>
 8017292:	2301      	movs	r3, #1
 8017294:	e074      	b.n	8017380 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	695b      	ldr	r3, [r3, #20]
 801729a:	697a      	ldr	r2, [r7, #20]
 801729c:	429a      	cmp	r2, r3
 801729e:	d358      	bcc.n	8017352 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d104      	bne.n	80172b0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	2200      	movs	r2, #0
 80172aa:	61da      	str	r2, [r3, #28]
 80172ac:	2304      	movs	r3, #4
 80172ae:	e067      	b.n	8017380 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80172b0:	687a      	ldr	r2, [r7, #4]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	699b      	ldr	r3, [r3, #24]
 80172b6:	4619      	mov	r1, r3
 80172b8:	4610      	mov	r0, r2
 80172ba:	f7ff fe59 	bl	8016f70 <create_chain>
 80172be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80172c0:	697b      	ldr	r3, [r7, #20]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d101      	bne.n	80172ca <dir_next+0xcc>
 80172c6:	2307      	movs	r3, #7
 80172c8:	e05a      	b.n	8017380 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80172ca:	697b      	ldr	r3, [r7, #20]
 80172cc:	2b01      	cmp	r3, #1
 80172ce:	d101      	bne.n	80172d4 <dir_next+0xd6>
 80172d0:	2302      	movs	r3, #2
 80172d2:	e055      	b.n	8017380 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80172d4:	697b      	ldr	r3, [r7, #20]
 80172d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172da:	d101      	bne.n	80172e0 <dir_next+0xe2>
 80172dc:	2301      	movs	r3, #1
 80172de:	e04f      	b.n	8017380 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80172e0:	68f8      	ldr	r0, [r7, #12]
 80172e2:	f7ff fb55 	bl	8016990 <sync_window>
 80172e6:	4603      	mov	r3, r0
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d001      	beq.n	80172f0 <dir_next+0xf2>
 80172ec:	2301      	movs	r3, #1
 80172ee:	e047      	b.n	8017380 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	3330      	adds	r3, #48	; 0x30
 80172f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80172f8:	2100      	movs	r1, #0
 80172fa:	4618      	mov	r0, r3
 80172fc:	f7ff f97f 	bl	80165fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017300:	2300      	movs	r3, #0
 8017302:	613b      	str	r3, [r7, #16]
 8017304:	6979      	ldr	r1, [r7, #20]
 8017306:	68f8      	ldr	r0, [r7, #12]
 8017308:	f7ff fc22 	bl	8016b50 <clust2sect>
 801730c:	4602      	mov	r2, r0
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	62da      	str	r2, [r3, #44]	; 0x2c
 8017312:	e012      	b.n	801733a <dir_next+0x13c>
						fs->wflag = 1;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	2201      	movs	r2, #1
 8017318:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801731a:	68f8      	ldr	r0, [r7, #12]
 801731c:	f7ff fb38 	bl	8016990 <sync_window>
 8017320:	4603      	mov	r3, r0
 8017322:	2b00      	cmp	r3, #0
 8017324:	d001      	beq.n	801732a <dir_next+0x12c>
 8017326:	2301      	movs	r3, #1
 8017328:	e02a      	b.n	8017380 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801732a:	693b      	ldr	r3, [r7, #16]
 801732c:	3301      	adds	r3, #1
 801732e:	613b      	str	r3, [r7, #16]
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017334:	1c5a      	adds	r2, r3, #1
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	62da      	str	r2, [r3, #44]	; 0x2c
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	895b      	ldrh	r3, [r3, #10]
 801733e:	461a      	mov	r2, r3
 8017340:	693b      	ldr	r3, [r7, #16]
 8017342:	4293      	cmp	r3, r2
 8017344:	d3e6      	bcc.n	8017314 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801734a:	693b      	ldr	r3, [r7, #16]
 801734c:	1ad2      	subs	r2, r2, r3
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	697a      	ldr	r2, [r7, #20]
 8017356:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017358:	6979      	ldr	r1, [r7, #20]
 801735a:	68f8      	ldr	r0, [r7, #12]
 801735c:	f7ff fbf8 	bl	8016b50 <clust2sect>
 8017360:	4602      	mov	r2, r0
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	68ba      	ldr	r2, [r7, #8]
 801736a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017372:	68bb      	ldr	r3, [r7, #8]
 8017374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017378:	441a      	add	r2, r3
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801737e:	2300      	movs	r3, #0
}
 8017380:	4618      	mov	r0, r3
 8017382:	3718      	adds	r7, #24
 8017384:	46bd      	mov	sp, r7
 8017386:	bd80      	pop	{r7, pc}

08017388 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b086      	sub	sp, #24
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
 8017390:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017398:	2100      	movs	r1, #0
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f7ff feb4 	bl	8017108 <dir_sdi>
 80173a0:	4603      	mov	r3, r0
 80173a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80173a4:	7dfb      	ldrb	r3, [r7, #23]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d12b      	bne.n	8017402 <dir_alloc+0x7a>
		n = 0;
 80173aa:	2300      	movs	r3, #0
 80173ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	69db      	ldr	r3, [r3, #28]
 80173b2:	4619      	mov	r1, r3
 80173b4:	68f8      	ldr	r0, [r7, #12]
 80173b6:	f7ff fb2f 	bl	8016a18 <move_window>
 80173ba:	4603      	mov	r3, r0
 80173bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80173be:	7dfb      	ldrb	r3, [r7, #23]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d11d      	bne.n	8017400 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	6a1b      	ldr	r3, [r3, #32]
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	2be5      	cmp	r3, #229	; 0xe5
 80173cc:	d004      	beq.n	80173d8 <dir_alloc+0x50>
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	6a1b      	ldr	r3, [r3, #32]
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d107      	bne.n	80173e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80173d8:	693b      	ldr	r3, [r7, #16]
 80173da:	3301      	adds	r3, #1
 80173dc:	613b      	str	r3, [r7, #16]
 80173de:	693a      	ldr	r2, [r7, #16]
 80173e0:	683b      	ldr	r3, [r7, #0]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d102      	bne.n	80173ec <dir_alloc+0x64>
 80173e6:	e00c      	b.n	8017402 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80173e8:	2300      	movs	r3, #0
 80173ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80173ec:	2101      	movs	r1, #1
 80173ee:	6878      	ldr	r0, [r7, #4]
 80173f0:	f7ff ff05 	bl	80171fe <dir_next>
 80173f4:	4603      	mov	r3, r0
 80173f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80173f8:	7dfb      	ldrb	r3, [r7, #23]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d0d7      	beq.n	80173ae <dir_alloc+0x26>
 80173fe:	e000      	b.n	8017402 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017400:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017402:	7dfb      	ldrb	r3, [r7, #23]
 8017404:	2b04      	cmp	r3, #4
 8017406:	d101      	bne.n	801740c <dir_alloc+0x84>
 8017408:	2307      	movs	r3, #7
 801740a:	75fb      	strb	r3, [r7, #23]
	return res;
 801740c:	7dfb      	ldrb	r3, [r7, #23]
}
 801740e:	4618      	mov	r0, r3
 8017410:	3718      	adds	r7, #24
 8017412:	46bd      	mov	sp, r7
 8017414:	bd80      	pop	{r7, pc}

08017416 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017416:	b580      	push	{r7, lr}
 8017418:	b084      	sub	sp, #16
 801741a:	af00      	add	r7, sp, #0
 801741c:	6078      	str	r0, [r7, #4]
 801741e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	331a      	adds	r3, #26
 8017424:	4618      	mov	r0, r3
 8017426:	f7ff f847 	bl	80164b8 <ld_word>
 801742a:	4603      	mov	r3, r0
 801742c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	781b      	ldrb	r3, [r3, #0]
 8017432:	2b03      	cmp	r3, #3
 8017434:	d109      	bne.n	801744a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	3314      	adds	r3, #20
 801743a:	4618      	mov	r0, r3
 801743c:	f7ff f83c 	bl	80164b8 <ld_word>
 8017440:	4603      	mov	r3, r0
 8017442:	041b      	lsls	r3, r3, #16
 8017444:	68fa      	ldr	r2, [r7, #12]
 8017446:	4313      	orrs	r3, r2
 8017448:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801744a:	68fb      	ldr	r3, [r7, #12]
}
 801744c:	4618      	mov	r0, r3
 801744e:	3710      	adds	r7, #16
 8017450:	46bd      	mov	sp, r7
 8017452:	bd80      	pop	{r7, pc}

08017454 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b084      	sub	sp, #16
 8017458:	af00      	add	r7, sp, #0
 801745a:	60f8      	str	r0, [r7, #12]
 801745c:	60b9      	str	r1, [r7, #8]
 801745e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017460:	68bb      	ldr	r3, [r7, #8]
 8017462:	331a      	adds	r3, #26
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	b292      	uxth	r2, r2
 8017468:	4611      	mov	r1, r2
 801746a:	4618      	mov	r0, r3
 801746c:	f7ff f85f 	bl	801652e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	781b      	ldrb	r3, [r3, #0]
 8017474:	2b03      	cmp	r3, #3
 8017476:	d109      	bne.n	801748c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017478:	68bb      	ldr	r3, [r7, #8]
 801747a:	f103 0214 	add.w	r2, r3, #20
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	0c1b      	lsrs	r3, r3, #16
 8017482:	b29b      	uxth	r3, r3
 8017484:	4619      	mov	r1, r3
 8017486:	4610      	mov	r0, r2
 8017488:	f7ff f851 	bl	801652e <st_word>
	}
}
 801748c:	bf00      	nop
 801748e:	3710      	adds	r7, #16
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}

08017494 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b086      	sub	sp, #24
 8017498:	af00      	add	r7, sp, #0
 801749a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80174a2:	2100      	movs	r1, #0
 80174a4:	6878      	ldr	r0, [r7, #4]
 80174a6:	f7ff fe2f 	bl	8017108 <dir_sdi>
 80174aa:	4603      	mov	r3, r0
 80174ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80174ae:	7dfb      	ldrb	r3, [r7, #23]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d001      	beq.n	80174b8 <dir_find+0x24>
 80174b4:	7dfb      	ldrb	r3, [r7, #23]
 80174b6:	e03e      	b.n	8017536 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	69db      	ldr	r3, [r3, #28]
 80174bc:	4619      	mov	r1, r3
 80174be:	6938      	ldr	r0, [r7, #16]
 80174c0:	f7ff faaa 	bl	8016a18 <move_window>
 80174c4:	4603      	mov	r3, r0
 80174c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80174c8:	7dfb      	ldrb	r3, [r7, #23]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d12f      	bne.n	801752e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	6a1b      	ldr	r3, [r3, #32]
 80174d2:	781b      	ldrb	r3, [r3, #0]
 80174d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80174d6:	7bfb      	ldrb	r3, [r7, #15]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d102      	bne.n	80174e2 <dir_find+0x4e>
 80174dc:	2304      	movs	r3, #4
 80174de:	75fb      	strb	r3, [r7, #23]
 80174e0:	e028      	b.n	8017534 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	6a1b      	ldr	r3, [r3, #32]
 80174e6:	330b      	adds	r3, #11
 80174e8:	781b      	ldrb	r3, [r3, #0]
 80174ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80174ee:	b2da      	uxtb	r2, r3
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	6a1b      	ldr	r3, [r3, #32]
 80174f8:	330b      	adds	r3, #11
 80174fa:	781b      	ldrb	r3, [r3, #0]
 80174fc:	f003 0308 	and.w	r3, r3, #8
 8017500:	2b00      	cmp	r3, #0
 8017502:	d10a      	bne.n	801751a <dir_find+0x86>
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	6a18      	ldr	r0, [r3, #32]
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	3324      	adds	r3, #36	; 0x24
 801750c:	220b      	movs	r2, #11
 801750e:	4619      	mov	r1, r3
 8017510:	f7ff f88f 	bl	8016632 <mem_cmp>
 8017514:	4603      	mov	r3, r0
 8017516:	2b00      	cmp	r3, #0
 8017518:	d00b      	beq.n	8017532 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801751a:	2100      	movs	r1, #0
 801751c:	6878      	ldr	r0, [r7, #4]
 801751e:	f7ff fe6e 	bl	80171fe <dir_next>
 8017522:	4603      	mov	r3, r0
 8017524:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017526:	7dfb      	ldrb	r3, [r7, #23]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d0c5      	beq.n	80174b8 <dir_find+0x24>
 801752c:	e002      	b.n	8017534 <dir_find+0xa0>
		if (res != FR_OK) break;
 801752e:	bf00      	nop
 8017530:	e000      	b.n	8017534 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017532:	bf00      	nop

	return res;
 8017534:	7dfb      	ldrb	r3, [r7, #23]
}
 8017536:	4618      	mov	r0, r3
 8017538:	3718      	adds	r7, #24
 801753a:	46bd      	mov	sp, r7
 801753c:	bd80      	pop	{r7, pc}

0801753e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801753e:	b580      	push	{r7, lr}
 8017540:	b084      	sub	sp, #16
 8017542:	af00      	add	r7, sp, #0
 8017544:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801754c:	2101      	movs	r1, #1
 801754e:	6878      	ldr	r0, [r7, #4]
 8017550:	f7ff ff1a 	bl	8017388 <dir_alloc>
 8017554:	4603      	mov	r3, r0
 8017556:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017558:	7bfb      	ldrb	r3, [r7, #15]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d11c      	bne.n	8017598 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	69db      	ldr	r3, [r3, #28]
 8017562:	4619      	mov	r1, r3
 8017564:	68b8      	ldr	r0, [r7, #8]
 8017566:	f7ff fa57 	bl	8016a18 <move_window>
 801756a:	4603      	mov	r3, r0
 801756c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801756e:	7bfb      	ldrb	r3, [r7, #15]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d111      	bne.n	8017598 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	6a1b      	ldr	r3, [r3, #32]
 8017578:	2220      	movs	r2, #32
 801757a:	2100      	movs	r1, #0
 801757c:	4618      	mov	r0, r3
 801757e:	f7ff f83e 	bl	80165fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	6a18      	ldr	r0, [r3, #32]
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	3324      	adds	r3, #36	; 0x24
 801758a:	220b      	movs	r2, #11
 801758c:	4619      	mov	r1, r3
 801758e:	f7ff f815 	bl	80165bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8017592:	68bb      	ldr	r3, [r7, #8]
 8017594:	2201      	movs	r2, #1
 8017596:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017598:	7bfb      	ldrb	r3, [r7, #15]
}
 801759a:	4618      	mov	r0, r3
 801759c:	3710      	adds	r7, #16
 801759e:	46bd      	mov	sp, r7
 80175a0:	bd80      	pop	{r7, pc}
	...

080175a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b088      	sub	sp, #32
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
 80175ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80175ae:	683b      	ldr	r3, [r7, #0]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	60fb      	str	r3, [r7, #12]
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	3324      	adds	r3, #36	; 0x24
 80175b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80175ba:	220b      	movs	r2, #11
 80175bc:	2120      	movs	r1, #32
 80175be:	68b8      	ldr	r0, [r7, #8]
 80175c0:	f7ff f81d 	bl	80165fe <mem_set>
	si = i = 0; ni = 8;
 80175c4:	2300      	movs	r3, #0
 80175c6:	613b      	str	r3, [r7, #16]
 80175c8:	693b      	ldr	r3, [r7, #16]
 80175ca:	617b      	str	r3, [r7, #20]
 80175cc:	2308      	movs	r3, #8
 80175ce:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80175d0:	697b      	ldr	r3, [r7, #20]
 80175d2:	1c5a      	adds	r2, r3, #1
 80175d4:	617a      	str	r2, [r7, #20]
 80175d6:	68fa      	ldr	r2, [r7, #12]
 80175d8:	4413      	add	r3, r2
 80175da:	781b      	ldrb	r3, [r3, #0]
 80175dc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80175de:	7ffb      	ldrb	r3, [r7, #31]
 80175e0:	2b20      	cmp	r3, #32
 80175e2:	d94e      	bls.n	8017682 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80175e4:	7ffb      	ldrb	r3, [r7, #31]
 80175e6:	2b2f      	cmp	r3, #47	; 0x2f
 80175e8:	d006      	beq.n	80175f8 <create_name+0x54>
 80175ea:	7ffb      	ldrb	r3, [r7, #31]
 80175ec:	2b5c      	cmp	r3, #92	; 0x5c
 80175ee:	d110      	bne.n	8017612 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80175f0:	e002      	b.n	80175f8 <create_name+0x54>
 80175f2:	697b      	ldr	r3, [r7, #20]
 80175f4:	3301      	adds	r3, #1
 80175f6:	617b      	str	r3, [r7, #20]
 80175f8:	68fa      	ldr	r2, [r7, #12]
 80175fa:	697b      	ldr	r3, [r7, #20]
 80175fc:	4413      	add	r3, r2
 80175fe:	781b      	ldrb	r3, [r3, #0]
 8017600:	2b2f      	cmp	r3, #47	; 0x2f
 8017602:	d0f6      	beq.n	80175f2 <create_name+0x4e>
 8017604:	68fa      	ldr	r2, [r7, #12]
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	4413      	add	r3, r2
 801760a:	781b      	ldrb	r3, [r3, #0]
 801760c:	2b5c      	cmp	r3, #92	; 0x5c
 801760e:	d0f0      	beq.n	80175f2 <create_name+0x4e>
			break;
 8017610:	e038      	b.n	8017684 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8017612:	7ffb      	ldrb	r3, [r7, #31]
 8017614:	2b2e      	cmp	r3, #46	; 0x2e
 8017616:	d003      	beq.n	8017620 <create_name+0x7c>
 8017618:	693a      	ldr	r2, [r7, #16]
 801761a:	69bb      	ldr	r3, [r7, #24]
 801761c:	429a      	cmp	r2, r3
 801761e:	d30c      	bcc.n	801763a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8017620:	69bb      	ldr	r3, [r7, #24]
 8017622:	2b0b      	cmp	r3, #11
 8017624:	d002      	beq.n	801762c <create_name+0x88>
 8017626:	7ffb      	ldrb	r3, [r7, #31]
 8017628:	2b2e      	cmp	r3, #46	; 0x2e
 801762a:	d001      	beq.n	8017630 <create_name+0x8c>
 801762c:	2306      	movs	r3, #6
 801762e:	e044      	b.n	80176ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8017630:	2308      	movs	r3, #8
 8017632:	613b      	str	r3, [r7, #16]
 8017634:	230b      	movs	r3, #11
 8017636:	61bb      	str	r3, [r7, #24]
			continue;
 8017638:	e022      	b.n	8017680 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801763a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801763e:	2b00      	cmp	r3, #0
 8017640:	da04      	bge.n	801764c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8017642:	7ffb      	ldrb	r3, [r7, #31]
 8017644:	3b80      	subs	r3, #128	; 0x80
 8017646:	4a1f      	ldr	r2, [pc, #124]	; (80176c4 <create_name+0x120>)
 8017648:	5cd3      	ldrb	r3, [r2, r3]
 801764a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801764c:	7ffb      	ldrb	r3, [r7, #31]
 801764e:	4619      	mov	r1, r3
 8017650:	481d      	ldr	r0, [pc, #116]	; (80176c8 <create_name+0x124>)
 8017652:	f7ff f815 	bl	8016680 <chk_chr>
 8017656:	4603      	mov	r3, r0
 8017658:	2b00      	cmp	r3, #0
 801765a:	d001      	beq.n	8017660 <create_name+0xbc>
 801765c:	2306      	movs	r3, #6
 801765e:	e02c      	b.n	80176ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017660:	7ffb      	ldrb	r3, [r7, #31]
 8017662:	2b60      	cmp	r3, #96	; 0x60
 8017664:	d905      	bls.n	8017672 <create_name+0xce>
 8017666:	7ffb      	ldrb	r3, [r7, #31]
 8017668:	2b7a      	cmp	r3, #122	; 0x7a
 801766a:	d802      	bhi.n	8017672 <create_name+0xce>
 801766c:	7ffb      	ldrb	r3, [r7, #31]
 801766e:	3b20      	subs	r3, #32
 8017670:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8017672:	693b      	ldr	r3, [r7, #16]
 8017674:	1c5a      	adds	r2, r3, #1
 8017676:	613a      	str	r2, [r7, #16]
 8017678:	68ba      	ldr	r2, [r7, #8]
 801767a:	4413      	add	r3, r2
 801767c:	7ffa      	ldrb	r2, [r7, #31]
 801767e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017680:	e7a6      	b.n	80175d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017682:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017684:	68fa      	ldr	r2, [r7, #12]
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	441a      	add	r2, r3
 801768a:	683b      	ldr	r3, [r7, #0]
 801768c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801768e:	693b      	ldr	r3, [r7, #16]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d101      	bne.n	8017698 <create_name+0xf4>
 8017694:	2306      	movs	r3, #6
 8017696:	e010      	b.n	80176ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017698:	68bb      	ldr	r3, [r7, #8]
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	2be5      	cmp	r3, #229	; 0xe5
 801769e:	d102      	bne.n	80176a6 <create_name+0x102>
 80176a0:	68bb      	ldr	r3, [r7, #8]
 80176a2:	2205      	movs	r2, #5
 80176a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80176a6:	7ffb      	ldrb	r3, [r7, #31]
 80176a8:	2b20      	cmp	r3, #32
 80176aa:	d801      	bhi.n	80176b0 <create_name+0x10c>
 80176ac:	2204      	movs	r2, #4
 80176ae:	e000      	b.n	80176b2 <create_name+0x10e>
 80176b0:	2200      	movs	r2, #0
 80176b2:	68bb      	ldr	r3, [r7, #8]
 80176b4:	330b      	adds	r3, #11
 80176b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80176b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80176ba:	4618      	mov	r0, r3
 80176bc:	3720      	adds	r7, #32
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}
 80176c2:	bf00      	nop
 80176c4:	0801aee4 	.word	0x0801aee4
 80176c8:	0801ae08 	.word	0x0801ae08

080176cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b086      	sub	sp, #24
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
 80176d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80176da:	693b      	ldr	r3, [r7, #16]
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80176e0:	e002      	b.n	80176e8 <follow_path+0x1c>
 80176e2:	683b      	ldr	r3, [r7, #0]
 80176e4:	3301      	adds	r3, #1
 80176e6:	603b      	str	r3, [r7, #0]
 80176e8:	683b      	ldr	r3, [r7, #0]
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	2b2f      	cmp	r3, #47	; 0x2f
 80176ee:	d0f8      	beq.n	80176e2 <follow_path+0x16>
 80176f0:	683b      	ldr	r3, [r7, #0]
 80176f2:	781b      	ldrb	r3, [r3, #0]
 80176f4:	2b5c      	cmp	r3, #92	; 0x5c
 80176f6:	d0f4      	beq.n	80176e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80176f8:	693b      	ldr	r3, [r7, #16]
 80176fa:	2200      	movs	r2, #0
 80176fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80176fe:	683b      	ldr	r3, [r7, #0]
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	2b1f      	cmp	r3, #31
 8017704:	d80a      	bhi.n	801771c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2280      	movs	r2, #128	; 0x80
 801770a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801770e:	2100      	movs	r1, #0
 8017710:	6878      	ldr	r0, [r7, #4]
 8017712:	f7ff fcf9 	bl	8017108 <dir_sdi>
 8017716:	4603      	mov	r3, r0
 8017718:	75fb      	strb	r3, [r7, #23]
 801771a:	e043      	b.n	80177a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801771c:	463b      	mov	r3, r7
 801771e:	4619      	mov	r1, r3
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	f7ff ff3f 	bl	80175a4 <create_name>
 8017726:	4603      	mov	r3, r0
 8017728:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801772a:	7dfb      	ldrb	r3, [r7, #23]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d134      	bne.n	801779a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017730:	6878      	ldr	r0, [r7, #4]
 8017732:	f7ff feaf 	bl	8017494 <dir_find>
 8017736:	4603      	mov	r3, r0
 8017738:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017740:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017742:	7dfb      	ldrb	r3, [r7, #23]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d00a      	beq.n	801775e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017748:	7dfb      	ldrb	r3, [r7, #23]
 801774a:	2b04      	cmp	r3, #4
 801774c:	d127      	bne.n	801779e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801774e:	7afb      	ldrb	r3, [r7, #11]
 8017750:	f003 0304 	and.w	r3, r3, #4
 8017754:	2b00      	cmp	r3, #0
 8017756:	d122      	bne.n	801779e <follow_path+0xd2>
 8017758:	2305      	movs	r3, #5
 801775a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801775c:	e01f      	b.n	801779e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801775e:	7afb      	ldrb	r3, [r7, #11]
 8017760:	f003 0304 	and.w	r3, r3, #4
 8017764:	2b00      	cmp	r3, #0
 8017766:	d11c      	bne.n	80177a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017768:	693b      	ldr	r3, [r7, #16]
 801776a:	799b      	ldrb	r3, [r3, #6]
 801776c:	f003 0310 	and.w	r3, r3, #16
 8017770:	2b00      	cmp	r3, #0
 8017772:	d102      	bne.n	801777a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017774:	2305      	movs	r3, #5
 8017776:	75fb      	strb	r3, [r7, #23]
 8017778:	e014      	b.n	80177a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	695b      	ldr	r3, [r3, #20]
 8017784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017788:	4413      	add	r3, r2
 801778a:	4619      	mov	r1, r3
 801778c:	68f8      	ldr	r0, [r7, #12]
 801778e:	f7ff fe42 	bl	8017416 <ld_clust>
 8017792:	4602      	mov	r2, r0
 8017794:	693b      	ldr	r3, [r7, #16]
 8017796:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017798:	e7c0      	b.n	801771c <follow_path+0x50>
			if (res != FR_OK) break;
 801779a:	bf00      	nop
 801779c:	e002      	b.n	80177a4 <follow_path+0xd8>
				break;
 801779e:	bf00      	nop
 80177a0:	e000      	b.n	80177a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80177a2:	bf00      	nop
			}
		}
	}

	return res;
 80177a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80177a6:	4618      	mov	r0, r3
 80177a8:	3718      	adds	r7, #24
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd80      	pop	{r7, pc}

080177ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80177ae:	b480      	push	{r7}
 80177b0:	b087      	sub	sp, #28
 80177b2:	af00      	add	r7, sp, #0
 80177b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80177b6:	f04f 33ff 	mov.w	r3, #4294967295
 80177ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d031      	beq.n	8017828 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	617b      	str	r3, [r7, #20]
 80177ca:	e002      	b.n	80177d2 <get_ldnumber+0x24>
 80177cc:	697b      	ldr	r3, [r7, #20]
 80177ce:	3301      	adds	r3, #1
 80177d0:	617b      	str	r3, [r7, #20]
 80177d2:	697b      	ldr	r3, [r7, #20]
 80177d4:	781b      	ldrb	r3, [r3, #0]
 80177d6:	2b20      	cmp	r3, #32
 80177d8:	d903      	bls.n	80177e2 <get_ldnumber+0x34>
 80177da:	697b      	ldr	r3, [r7, #20]
 80177dc:	781b      	ldrb	r3, [r3, #0]
 80177de:	2b3a      	cmp	r3, #58	; 0x3a
 80177e0:	d1f4      	bne.n	80177cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80177e2:	697b      	ldr	r3, [r7, #20]
 80177e4:	781b      	ldrb	r3, [r3, #0]
 80177e6:	2b3a      	cmp	r3, #58	; 0x3a
 80177e8:	d11c      	bne.n	8017824 <get_ldnumber+0x76>
			tp = *path;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	1c5a      	adds	r2, r3, #1
 80177f4:	60fa      	str	r2, [r7, #12]
 80177f6:	781b      	ldrb	r3, [r3, #0]
 80177f8:	3b30      	subs	r3, #48	; 0x30
 80177fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80177fc:	68bb      	ldr	r3, [r7, #8]
 80177fe:	2b09      	cmp	r3, #9
 8017800:	d80e      	bhi.n	8017820 <get_ldnumber+0x72>
 8017802:	68fa      	ldr	r2, [r7, #12]
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	429a      	cmp	r2, r3
 8017808:	d10a      	bne.n	8017820 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801780a:	68bb      	ldr	r3, [r7, #8]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d107      	bne.n	8017820 <get_ldnumber+0x72>
					vol = (int)i;
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8017814:	697b      	ldr	r3, [r7, #20]
 8017816:	3301      	adds	r3, #1
 8017818:	617b      	str	r3, [r7, #20]
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	697a      	ldr	r2, [r7, #20]
 801781e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8017820:	693b      	ldr	r3, [r7, #16]
 8017822:	e002      	b.n	801782a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8017824:	2300      	movs	r3, #0
 8017826:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8017828:	693b      	ldr	r3, [r7, #16]
}
 801782a:	4618      	mov	r0, r3
 801782c:	371c      	adds	r7, #28
 801782e:	46bd      	mov	sp, r7
 8017830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017834:	4770      	bx	lr
	...

08017838 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b082      	sub	sp, #8
 801783c:	af00      	add	r7, sp, #0
 801783e:	6078      	str	r0, [r7, #4]
 8017840:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	2200      	movs	r2, #0
 8017846:	70da      	strb	r2, [r3, #3]
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	f04f 32ff 	mov.w	r2, #4294967295
 801784e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017850:	6839      	ldr	r1, [r7, #0]
 8017852:	6878      	ldr	r0, [r7, #4]
 8017854:	f7ff f8e0 	bl	8016a18 <move_window>
 8017858:	4603      	mov	r3, r0
 801785a:	2b00      	cmp	r3, #0
 801785c:	d001      	beq.n	8017862 <check_fs+0x2a>
 801785e:	2304      	movs	r3, #4
 8017860:	e038      	b.n	80178d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	3330      	adds	r3, #48	; 0x30
 8017866:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801786a:	4618      	mov	r0, r3
 801786c:	f7fe fe24 	bl	80164b8 <ld_word>
 8017870:	4603      	mov	r3, r0
 8017872:	461a      	mov	r2, r3
 8017874:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017878:	429a      	cmp	r2, r3
 801787a:	d001      	beq.n	8017880 <check_fs+0x48>
 801787c:	2303      	movs	r3, #3
 801787e:	e029      	b.n	80178d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017886:	2be9      	cmp	r3, #233	; 0xe9
 8017888:	d009      	beq.n	801789e <check_fs+0x66>
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017890:	2beb      	cmp	r3, #235	; 0xeb
 8017892:	d11e      	bne.n	80178d2 <check_fs+0x9a>
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801789a:	2b90      	cmp	r3, #144	; 0x90
 801789c:	d119      	bne.n	80178d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	3330      	adds	r3, #48	; 0x30
 80178a2:	3336      	adds	r3, #54	; 0x36
 80178a4:	4618      	mov	r0, r3
 80178a6:	f7fe fe1f 	bl	80164e8 <ld_dword>
 80178aa:	4603      	mov	r3, r0
 80178ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80178b0:	4a0a      	ldr	r2, [pc, #40]	; (80178dc <check_fs+0xa4>)
 80178b2:	4293      	cmp	r3, r2
 80178b4:	d101      	bne.n	80178ba <check_fs+0x82>
 80178b6:	2300      	movs	r3, #0
 80178b8:	e00c      	b.n	80178d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	3330      	adds	r3, #48	; 0x30
 80178be:	3352      	adds	r3, #82	; 0x52
 80178c0:	4618      	mov	r0, r3
 80178c2:	f7fe fe11 	bl	80164e8 <ld_dword>
 80178c6:	4602      	mov	r2, r0
 80178c8:	4b05      	ldr	r3, [pc, #20]	; (80178e0 <check_fs+0xa8>)
 80178ca:	429a      	cmp	r2, r3
 80178cc:	d101      	bne.n	80178d2 <check_fs+0x9a>
 80178ce:	2300      	movs	r3, #0
 80178d0:	e000      	b.n	80178d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80178d2:	2302      	movs	r3, #2
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	3708      	adds	r7, #8
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}
 80178dc:	00544146 	.word	0x00544146
 80178e0:	33544146 	.word	0x33544146

080178e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b096      	sub	sp, #88	; 0x58
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	60f8      	str	r0, [r7, #12]
 80178ec:	60b9      	str	r1, [r7, #8]
 80178ee:	4613      	mov	r3, r2
 80178f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80178f2:	68bb      	ldr	r3, [r7, #8]
 80178f4:	2200      	movs	r2, #0
 80178f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80178f8:	68f8      	ldr	r0, [r7, #12]
 80178fa:	f7ff ff58 	bl	80177ae <get_ldnumber>
 80178fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017902:	2b00      	cmp	r3, #0
 8017904:	da01      	bge.n	801790a <find_volume+0x26>
 8017906:	230b      	movs	r3, #11
 8017908:	e22e      	b.n	8017d68 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801790a:	4aa8      	ldr	r2, [pc, #672]	; (8017bac <find_volume+0x2c8>)
 801790c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801790e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017912:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017916:	2b00      	cmp	r3, #0
 8017918:	d101      	bne.n	801791e <find_volume+0x3a>
 801791a:	230c      	movs	r3, #12
 801791c:	e224      	b.n	8017d68 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801791e:	68bb      	ldr	r3, [r7, #8]
 8017920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017922:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017924:	79fb      	ldrb	r3, [r7, #7]
 8017926:	f023 0301 	bic.w	r3, r3, #1
 801792a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801792e:	781b      	ldrb	r3, [r3, #0]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d01a      	beq.n	801796a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8017934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017936:	785b      	ldrb	r3, [r3, #1]
 8017938:	4618      	mov	r0, r3
 801793a:	f7fe fd1f 	bl	801637c <disk_status>
 801793e:	4603      	mov	r3, r0
 8017940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017948:	f003 0301 	and.w	r3, r3, #1
 801794c:	2b00      	cmp	r3, #0
 801794e:	d10c      	bne.n	801796a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017950:	79fb      	ldrb	r3, [r7, #7]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d007      	beq.n	8017966 <find_volume+0x82>
 8017956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801795a:	f003 0304 	and.w	r3, r3, #4
 801795e:	2b00      	cmp	r3, #0
 8017960:	d001      	beq.n	8017966 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8017962:	230a      	movs	r3, #10
 8017964:	e200      	b.n	8017d68 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8017966:	2300      	movs	r3, #0
 8017968:	e1fe      	b.n	8017d68 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801796c:	2200      	movs	r2, #0
 801796e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017972:	b2da      	uxtb	r2, r3
 8017974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017976:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801797a:	785b      	ldrb	r3, [r3, #1]
 801797c:	4618      	mov	r0, r3
 801797e:	f7fe fd17 	bl	80163b0 <disk_initialize>
 8017982:	4603      	mov	r3, r0
 8017984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801798c:	f003 0301 	and.w	r3, r3, #1
 8017990:	2b00      	cmp	r3, #0
 8017992:	d001      	beq.n	8017998 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017994:	2303      	movs	r3, #3
 8017996:	e1e7      	b.n	8017d68 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017998:	79fb      	ldrb	r3, [r7, #7]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d007      	beq.n	80179ae <find_volume+0xca>
 801799e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80179a2:	f003 0304 	and.w	r3, r3, #4
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d001      	beq.n	80179ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80179aa:	230a      	movs	r3, #10
 80179ac:	e1dc      	b.n	8017d68 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80179ae:	2300      	movs	r3, #0
 80179b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80179b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80179b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80179b6:	f7ff ff3f 	bl	8017838 <check_fs>
 80179ba:	4603      	mov	r3, r0
 80179bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80179c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80179c4:	2b02      	cmp	r3, #2
 80179c6:	d14b      	bne.n	8017a60 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80179c8:	2300      	movs	r3, #0
 80179ca:	643b      	str	r3, [r7, #64]	; 0x40
 80179cc:	e01f      	b.n	8017a0e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80179ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80179d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179d6:	011b      	lsls	r3, r3, #4
 80179d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80179dc:	4413      	add	r3, r2
 80179de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80179e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e2:	3304      	adds	r3, #4
 80179e4:	781b      	ldrb	r3, [r3, #0]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d006      	beq.n	80179f8 <find_volume+0x114>
 80179ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ec:	3308      	adds	r3, #8
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7fe fd7a 	bl	80164e8 <ld_dword>
 80179f4:	4602      	mov	r2, r0
 80179f6:	e000      	b.n	80179fa <find_volume+0x116>
 80179f8:	2200      	movs	r2, #0
 80179fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179fc:	009b      	lsls	r3, r3, #2
 80179fe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017a02:	440b      	add	r3, r1
 8017a04:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a0a:	3301      	adds	r3, #1
 8017a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8017a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a10:	2b03      	cmp	r3, #3
 8017a12:	d9dc      	bls.n	80179ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017a14:	2300      	movs	r3, #0
 8017a16:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d002      	beq.n	8017a24 <find_volume+0x140>
 8017a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a20:	3b01      	subs	r3, #1
 8017a22:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a26:	009b      	lsls	r3, r3, #2
 8017a28:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8017a2c:	4413      	add	r3, r2
 8017a2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8017a32:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d005      	beq.n	8017a46 <find_volume+0x162>
 8017a3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017a3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017a3e:	f7ff fefb 	bl	8017838 <check_fs>
 8017a42:	4603      	mov	r3, r0
 8017a44:	e000      	b.n	8017a48 <find_volume+0x164>
 8017a46:	2303      	movs	r3, #3
 8017a48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a50:	2b01      	cmp	r3, #1
 8017a52:	d905      	bls.n	8017a60 <find_volume+0x17c>
 8017a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a56:	3301      	adds	r3, #1
 8017a58:	643b      	str	r3, [r7, #64]	; 0x40
 8017a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a5c:	2b03      	cmp	r3, #3
 8017a5e:	d9e1      	bls.n	8017a24 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a64:	2b04      	cmp	r3, #4
 8017a66:	d101      	bne.n	8017a6c <find_volume+0x188>
 8017a68:	2301      	movs	r3, #1
 8017a6a:	e17d      	b.n	8017d68 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a70:	2b01      	cmp	r3, #1
 8017a72:	d901      	bls.n	8017a78 <find_volume+0x194>
 8017a74:	230d      	movs	r3, #13
 8017a76:	e177      	b.n	8017d68 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a7a:	3330      	adds	r3, #48	; 0x30
 8017a7c:	330b      	adds	r3, #11
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f7fe fd1a 	bl	80164b8 <ld_word>
 8017a84:	4603      	mov	r3, r0
 8017a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a8a:	d001      	beq.n	8017a90 <find_volume+0x1ac>
 8017a8c:	230d      	movs	r3, #13
 8017a8e:	e16b      	b.n	8017d68 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a92:	3330      	adds	r3, #48	; 0x30
 8017a94:	3316      	adds	r3, #22
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7fe fd0e 	bl	80164b8 <ld_word>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d106      	bne.n	8017ab4 <find_volume+0x1d0>
 8017aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aa8:	3330      	adds	r3, #48	; 0x30
 8017aaa:	3324      	adds	r3, #36	; 0x24
 8017aac:	4618      	mov	r0, r3
 8017aae:	f7fe fd1b 	bl	80164e8 <ld_dword>
 8017ab2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017ab8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017abc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8017ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ac2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ac6:	789b      	ldrb	r3, [r3, #2]
 8017ac8:	2b01      	cmp	r3, #1
 8017aca:	d005      	beq.n	8017ad8 <find_volume+0x1f4>
 8017acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ace:	789b      	ldrb	r3, [r3, #2]
 8017ad0:	2b02      	cmp	r3, #2
 8017ad2:	d001      	beq.n	8017ad8 <find_volume+0x1f4>
 8017ad4:	230d      	movs	r3, #13
 8017ad6:	e147      	b.n	8017d68 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ada:	789b      	ldrb	r3, [r3, #2]
 8017adc:	461a      	mov	r2, r3
 8017ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ae0:	fb02 f303 	mul.w	r3, r2, r3
 8017ae4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017aec:	b29a      	uxth	r2, r3
 8017aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017af0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017af4:	895b      	ldrh	r3, [r3, #10]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d008      	beq.n	8017b0c <find_volume+0x228>
 8017afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017afc:	895b      	ldrh	r3, [r3, #10]
 8017afe:	461a      	mov	r2, r3
 8017b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b02:	895b      	ldrh	r3, [r3, #10]
 8017b04:	3b01      	subs	r3, #1
 8017b06:	4013      	ands	r3, r2
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d001      	beq.n	8017b10 <find_volume+0x22c>
 8017b0c:	230d      	movs	r3, #13
 8017b0e:	e12b      	b.n	8017d68 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b12:	3330      	adds	r3, #48	; 0x30
 8017b14:	3311      	adds	r3, #17
 8017b16:	4618      	mov	r0, r3
 8017b18:	f7fe fcce 	bl	80164b8 <ld_word>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	461a      	mov	r2, r3
 8017b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b26:	891b      	ldrh	r3, [r3, #8]
 8017b28:	f003 030f 	and.w	r3, r3, #15
 8017b2c:	b29b      	uxth	r3, r3
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d001      	beq.n	8017b36 <find_volume+0x252>
 8017b32:	230d      	movs	r3, #13
 8017b34:	e118      	b.n	8017d68 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b38:	3330      	adds	r3, #48	; 0x30
 8017b3a:	3313      	adds	r3, #19
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f7fe fcbb 	bl	80164b8 <ld_word>
 8017b42:	4603      	mov	r3, r0
 8017b44:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d106      	bne.n	8017b5a <find_volume+0x276>
 8017b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b4e:	3330      	adds	r3, #48	; 0x30
 8017b50:	3320      	adds	r3, #32
 8017b52:	4618      	mov	r0, r3
 8017b54:	f7fe fcc8 	bl	80164e8 <ld_dword>
 8017b58:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b5c:	3330      	adds	r3, #48	; 0x30
 8017b5e:	330e      	adds	r3, #14
 8017b60:	4618      	mov	r0, r3
 8017b62:	f7fe fca9 	bl	80164b8 <ld_word>
 8017b66:	4603      	mov	r3, r0
 8017b68:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017b6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d101      	bne.n	8017b74 <find_volume+0x290>
 8017b70:	230d      	movs	r3, #13
 8017b72:	e0f9      	b.n	8017d68 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017b74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b78:	4413      	add	r3, r2
 8017b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b7c:	8912      	ldrh	r2, [r2, #8]
 8017b7e:	0912      	lsrs	r2, r2, #4
 8017b80:	b292      	uxth	r2, r2
 8017b82:	4413      	add	r3, r2
 8017b84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b8a:	429a      	cmp	r2, r3
 8017b8c:	d201      	bcs.n	8017b92 <find_volume+0x2ae>
 8017b8e:	230d      	movs	r3, #13
 8017b90:	e0ea      	b.n	8017d68 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b96:	1ad3      	subs	r3, r2, r3
 8017b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b9a:	8952      	ldrh	r2, [r2, #10]
 8017b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017ba0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d103      	bne.n	8017bb0 <find_volume+0x2cc>
 8017ba8:	230d      	movs	r3, #13
 8017baa:	e0dd      	b.n	8017d68 <find_volume+0x484>
 8017bac:	24000b5c 	.word	0x24000b5c
		fmt = FS_FAT32;
 8017bb0:	2303      	movs	r3, #3
 8017bb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017bbc:	4293      	cmp	r3, r2
 8017bbe:	d802      	bhi.n	8017bc6 <find_volume+0x2e2>
 8017bc0:	2302      	movs	r3, #2
 8017bc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bc8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017bcc:	4293      	cmp	r3, r2
 8017bce:	d802      	bhi.n	8017bd6 <find_volume+0x2f2>
 8017bd0:	2301      	movs	r3, #1
 8017bd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bd8:	1c9a      	adds	r2, r3, #2
 8017bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bdc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8017bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017be0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017be2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017be4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017be8:	441a      	add	r2, r3
 8017bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bec:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8017bee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bf2:	441a      	add	r2, r3
 8017bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bf6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8017bf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017bfc:	2b03      	cmp	r3, #3
 8017bfe:	d11e      	bne.n	8017c3e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c02:	3330      	adds	r3, #48	; 0x30
 8017c04:	332a      	adds	r3, #42	; 0x2a
 8017c06:	4618      	mov	r0, r3
 8017c08:	f7fe fc56 	bl	80164b8 <ld_word>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d001      	beq.n	8017c16 <find_volume+0x332>
 8017c12:	230d      	movs	r3, #13
 8017c14:	e0a8      	b.n	8017d68 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c18:	891b      	ldrh	r3, [r3, #8]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d001      	beq.n	8017c22 <find_volume+0x33e>
 8017c1e:	230d      	movs	r3, #13
 8017c20:	e0a2      	b.n	8017d68 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c24:	3330      	adds	r3, #48	; 0x30
 8017c26:	332c      	adds	r3, #44	; 0x2c
 8017c28:	4618      	mov	r0, r3
 8017c2a:	f7fe fc5d 	bl	80164e8 <ld_dword>
 8017c2e:	4602      	mov	r2, r0
 8017c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c32:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c36:	695b      	ldr	r3, [r3, #20]
 8017c38:	009b      	lsls	r3, r3, #2
 8017c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8017c3c:	e01f      	b.n	8017c7e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c40:	891b      	ldrh	r3, [r3, #8]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d101      	bne.n	8017c4a <find_volume+0x366>
 8017c46:	230d      	movs	r3, #13
 8017c48:	e08e      	b.n	8017d68 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c4c:	6a1a      	ldr	r2, [r3, #32]
 8017c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c50:	441a      	add	r2, r3
 8017c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c54:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017c56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c5a:	2b02      	cmp	r3, #2
 8017c5c:	d103      	bne.n	8017c66 <find_volume+0x382>
 8017c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c60:	695b      	ldr	r3, [r3, #20]
 8017c62:	005b      	lsls	r3, r3, #1
 8017c64:	e00a      	b.n	8017c7c <find_volume+0x398>
 8017c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c68:	695a      	ldr	r2, [r3, #20]
 8017c6a:	4613      	mov	r3, r2
 8017c6c:	005b      	lsls	r3, r3, #1
 8017c6e:	4413      	add	r3, r2
 8017c70:	085a      	lsrs	r2, r3, #1
 8017c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c74:	695b      	ldr	r3, [r3, #20]
 8017c76:	f003 0301 	and.w	r3, r3, #1
 8017c7a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017c7c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c80:	699a      	ldr	r2, [r3, #24]
 8017c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c84:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017c88:	0a5b      	lsrs	r3, r3, #9
 8017c8a:	429a      	cmp	r2, r3
 8017c8c:	d201      	bcs.n	8017c92 <find_volume+0x3ae>
 8017c8e:	230d      	movs	r3, #13
 8017c90:	e06a      	b.n	8017d68 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c94:	f04f 32ff 	mov.w	r2, #4294967295
 8017c98:	611a      	str	r2, [r3, #16]
 8017c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c9c:	691a      	ldr	r2, [r3, #16]
 8017c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8017ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca4:	2280      	movs	r2, #128	; 0x80
 8017ca6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017ca8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017cac:	2b03      	cmp	r3, #3
 8017cae:	d149      	bne.n	8017d44 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb2:	3330      	adds	r3, #48	; 0x30
 8017cb4:	3330      	adds	r3, #48	; 0x30
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f7fe fbfe 	bl	80164b8 <ld_word>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	2b01      	cmp	r3, #1
 8017cc0:	d140      	bne.n	8017d44 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cc4:	3301      	adds	r3, #1
 8017cc6:	4619      	mov	r1, r3
 8017cc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017cca:	f7fe fea5 	bl	8016a18 <move_window>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d137      	bne.n	8017d44 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8017cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cdc:	3330      	adds	r3, #48	; 0x30
 8017cde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	f7fe fbe8 	bl	80164b8 <ld_word>
 8017ce8:	4603      	mov	r3, r0
 8017cea:	461a      	mov	r2, r3
 8017cec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017cf0:	429a      	cmp	r2, r3
 8017cf2:	d127      	bne.n	8017d44 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf6:	3330      	adds	r3, #48	; 0x30
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	f7fe fbf5 	bl	80164e8 <ld_dword>
 8017cfe:	4602      	mov	r2, r0
 8017d00:	4b1b      	ldr	r3, [pc, #108]	; (8017d70 <find_volume+0x48c>)
 8017d02:	429a      	cmp	r2, r3
 8017d04:	d11e      	bne.n	8017d44 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d08:	3330      	adds	r3, #48	; 0x30
 8017d0a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f7fe fbea 	bl	80164e8 <ld_dword>
 8017d14:	4602      	mov	r2, r0
 8017d16:	4b17      	ldr	r3, [pc, #92]	; (8017d74 <find_volume+0x490>)
 8017d18:	429a      	cmp	r2, r3
 8017d1a:	d113      	bne.n	8017d44 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d1e:	3330      	adds	r3, #48	; 0x30
 8017d20:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017d24:	4618      	mov	r0, r3
 8017d26:	f7fe fbdf 	bl	80164e8 <ld_dword>
 8017d2a:	4602      	mov	r2, r0
 8017d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d2e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8017d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d32:	3330      	adds	r3, #48	; 0x30
 8017d34:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017d38:	4618      	mov	r0, r3
 8017d3a:	f7fe fbd5 	bl	80164e8 <ld_dword>
 8017d3e:	4602      	mov	r2, r0
 8017d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d42:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d46:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017d4a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017d4c:	4b0a      	ldr	r3, [pc, #40]	; (8017d78 <find_volume+0x494>)
 8017d4e:	881b      	ldrh	r3, [r3, #0]
 8017d50:	3301      	adds	r3, #1
 8017d52:	b29a      	uxth	r2, r3
 8017d54:	4b08      	ldr	r3, [pc, #32]	; (8017d78 <find_volume+0x494>)
 8017d56:	801a      	strh	r2, [r3, #0]
 8017d58:	4b07      	ldr	r3, [pc, #28]	; (8017d78 <find_volume+0x494>)
 8017d5a:	881a      	ldrh	r2, [r3, #0]
 8017d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d5e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017d60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017d62:	f7fe fdf1 	bl	8016948 <clear_lock>
#endif
	return FR_OK;
 8017d66:	2300      	movs	r3, #0
}
 8017d68:	4618      	mov	r0, r3
 8017d6a:	3758      	adds	r7, #88	; 0x58
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}
 8017d70:	41615252 	.word	0x41615252
 8017d74:	61417272 	.word	0x61417272
 8017d78:	24000b60 	.word	0x24000b60

08017d7c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b084      	sub	sp, #16
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	6078      	str	r0, [r7, #4]
 8017d84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017d86:	2309      	movs	r3, #9
 8017d88:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d01c      	beq.n	8017dca <validate+0x4e>
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d018      	beq.n	8017dca <validate+0x4e>
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	781b      	ldrb	r3, [r3, #0]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d013      	beq.n	8017dca <validate+0x4e>
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	889a      	ldrh	r2, [r3, #4]
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	88db      	ldrh	r3, [r3, #6]
 8017dac:	429a      	cmp	r2, r3
 8017dae:	d10c      	bne.n	8017dca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	785b      	ldrb	r3, [r3, #1]
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7fe fae0 	bl	801637c <disk_status>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	f003 0301 	and.w	r3, r3, #1
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d101      	bne.n	8017dca <validate+0x4e>
			res = FR_OK;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017dca:	7bfb      	ldrb	r3, [r7, #15]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d102      	bne.n	8017dd6 <validate+0x5a>
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	e000      	b.n	8017dd8 <validate+0x5c>
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	683a      	ldr	r2, [r7, #0]
 8017dda:	6013      	str	r3, [r2, #0]
	return res;
 8017ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8017dde:	4618      	mov	r0, r3
 8017de0:	3710      	adds	r7, #16
 8017de2:	46bd      	mov	sp, r7
 8017de4:	bd80      	pop	{r7, pc}
	...

08017de8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b088      	sub	sp, #32
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	60f8      	str	r0, [r7, #12]
 8017df0:	60b9      	str	r1, [r7, #8]
 8017df2:	4613      	mov	r3, r2
 8017df4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017df6:	68bb      	ldr	r3, [r7, #8]
 8017df8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017dfa:	f107 0310 	add.w	r3, r7, #16
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f7ff fcd5 	bl	80177ae <get_ldnumber>
 8017e04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017e06:	69fb      	ldr	r3, [r7, #28]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	da01      	bge.n	8017e10 <f_mount+0x28>
 8017e0c:	230b      	movs	r3, #11
 8017e0e:	e02b      	b.n	8017e68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017e10:	4a17      	ldr	r2, [pc, #92]	; (8017e70 <f_mount+0x88>)
 8017e12:	69fb      	ldr	r3, [r7, #28]
 8017e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8017e1a:	69bb      	ldr	r3, [r7, #24]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d005      	beq.n	8017e2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017e20:	69b8      	ldr	r0, [r7, #24]
 8017e22:	f7fe fd91 	bl	8016948 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017e26:	69bb      	ldr	r3, [r7, #24]
 8017e28:	2200      	movs	r2, #0
 8017e2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d002      	beq.n	8017e38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	2200      	movs	r2, #0
 8017e36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017e38:	68fa      	ldr	r2, [r7, #12]
 8017e3a:	490d      	ldr	r1, [pc, #52]	; (8017e70 <f_mount+0x88>)
 8017e3c:	69fb      	ldr	r3, [r7, #28]
 8017e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d002      	beq.n	8017e4e <f_mount+0x66>
 8017e48:	79fb      	ldrb	r3, [r7, #7]
 8017e4a:	2b01      	cmp	r3, #1
 8017e4c:	d001      	beq.n	8017e52 <f_mount+0x6a>
 8017e4e:	2300      	movs	r3, #0
 8017e50:	e00a      	b.n	8017e68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017e52:	f107 010c 	add.w	r1, r7, #12
 8017e56:	f107 0308 	add.w	r3, r7, #8
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	f7ff fd41 	bl	80178e4 <find_volume>
 8017e62:	4603      	mov	r3, r0
 8017e64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e68:	4618      	mov	r0, r3
 8017e6a:	3720      	adds	r7, #32
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	bd80      	pop	{r7, pc}
 8017e70:	24000b5c 	.word	0x24000b5c

08017e74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b098      	sub	sp, #96	; 0x60
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	60f8      	str	r0, [r7, #12]
 8017e7c:	60b9      	str	r1, [r7, #8]
 8017e7e:	4613      	mov	r3, r2
 8017e80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d101      	bne.n	8017e8c <f_open+0x18>
 8017e88:	2309      	movs	r3, #9
 8017e8a:	e1ad      	b.n	80181e8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017e8c:	79fb      	ldrb	r3, [r7, #7]
 8017e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017e92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017e94:	79fa      	ldrb	r2, [r7, #7]
 8017e96:	f107 0110 	add.w	r1, r7, #16
 8017e9a:	f107 0308 	add.w	r3, r7, #8
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7ff fd20 	bl	80178e4 <find_volume>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8017eaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	f040 8191 	bne.w	80181d6 <f_open+0x362>
		dj.obj.fs = fs;
 8017eb4:	693b      	ldr	r3, [r7, #16]
 8017eb6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017eb8:	68ba      	ldr	r2, [r7, #8]
 8017eba:	f107 0314 	add.w	r3, r7, #20
 8017ebe:	4611      	mov	r1, r2
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7ff fc03 	bl	80176cc <follow_path>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d11a      	bne.n	8017f0a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017ed4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017ed8:	b25b      	sxtb	r3, r3
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	da03      	bge.n	8017ee6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8017ede:	2306      	movs	r3, #6
 8017ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017ee4:	e011      	b.n	8017f0a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017ee6:	79fb      	ldrb	r3, [r7, #7]
 8017ee8:	f023 0301 	bic.w	r3, r3, #1
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	bf14      	ite	ne
 8017ef0:	2301      	movne	r3, #1
 8017ef2:	2300      	moveq	r3, #0
 8017ef4:	b2db      	uxtb	r3, r3
 8017ef6:	461a      	mov	r2, r3
 8017ef8:	f107 0314 	add.w	r3, r7, #20
 8017efc:	4611      	mov	r1, r2
 8017efe:	4618      	mov	r0, r3
 8017f00:	f7fe fbda 	bl	80166b8 <chk_lock>
 8017f04:	4603      	mov	r3, r0
 8017f06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017f0a:	79fb      	ldrb	r3, [r7, #7]
 8017f0c:	f003 031c 	and.w	r3, r3, #28
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d07f      	beq.n	8018014 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8017f14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d017      	beq.n	8017f4c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f20:	2b04      	cmp	r3, #4
 8017f22:	d10e      	bne.n	8017f42 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017f24:	f7fe fc24 	bl	8016770 <enq_lock>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d006      	beq.n	8017f3c <f_open+0xc8>
 8017f2e:	f107 0314 	add.w	r3, r7, #20
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7ff fb03 	bl	801753e <dir_register>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	e000      	b.n	8017f3e <f_open+0xca>
 8017f3c:	2312      	movs	r3, #18
 8017f3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017f42:	79fb      	ldrb	r3, [r7, #7]
 8017f44:	f043 0308 	orr.w	r3, r3, #8
 8017f48:	71fb      	strb	r3, [r7, #7]
 8017f4a:	e010      	b.n	8017f6e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017f4c:	7ebb      	ldrb	r3, [r7, #26]
 8017f4e:	f003 0311 	and.w	r3, r3, #17
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d003      	beq.n	8017f5e <f_open+0xea>
					res = FR_DENIED;
 8017f56:	2307      	movs	r3, #7
 8017f58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017f5c:	e007      	b.n	8017f6e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017f5e:	79fb      	ldrb	r3, [r7, #7]
 8017f60:	f003 0304 	and.w	r3, r3, #4
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d002      	beq.n	8017f6e <f_open+0xfa>
 8017f68:	2308      	movs	r3, #8
 8017f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d168      	bne.n	8018048 <f_open+0x1d4>
 8017f76:	79fb      	ldrb	r3, [r7, #7]
 8017f78:	f003 0308 	and.w	r3, r3, #8
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d063      	beq.n	8018048 <f_open+0x1d4>
				dw = GET_FATTIME();
 8017f80:	f7fb f8fe 	bl	8013180 <get_fattime>
 8017f84:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8017f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f88:	330e      	adds	r3, #14
 8017f8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f7fe fae9 	bl	8016564 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f94:	3316      	adds	r3, #22
 8017f96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f7fe fae3 	bl	8016564 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fa0:	330b      	adds	r3, #11
 8017fa2:	2220      	movs	r2, #32
 8017fa4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017fa6:	693b      	ldr	r3, [r7, #16]
 8017fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017faa:	4611      	mov	r1, r2
 8017fac:	4618      	mov	r0, r3
 8017fae:	f7ff fa32 	bl	8017416 <ld_clust>
 8017fb2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017fb4:	693b      	ldr	r3, [r7, #16]
 8017fb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017fb8:	2200      	movs	r2, #0
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f7ff fa4a 	bl	8017454 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8017fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fc2:	331c      	adds	r3, #28
 8017fc4:	2100      	movs	r1, #0
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	f7fe facc 	bl	8016564 <st_dword>
					fs->wflag = 1;
 8017fcc:	693b      	ldr	r3, [r7, #16]
 8017fce:	2201      	movs	r2, #1
 8017fd0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8017fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d037      	beq.n	8018048 <f_open+0x1d4>
						dw = fs->winsect;
 8017fd8:	693b      	ldr	r3, [r7, #16]
 8017fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fdc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8017fde:	f107 0314 	add.w	r3, r7, #20
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f7fe ff5d 	bl	8016ea6 <remove_chain>
 8017fec:	4603      	mov	r3, r0
 8017fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8017ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d126      	bne.n	8018048 <f_open+0x1d4>
							res = move_window(fs, dw);
 8017ffa:	693b      	ldr	r3, [r7, #16]
 8017ffc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017ffe:	4618      	mov	r0, r3
 8018000:	f7fe fd0a 	bl	8016a18 <move_window>
 8018004:	4603      	mov	r3, r0
 8018006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801800a:	693b      	ldr	r3, [r7, #16]
 801800c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801800e:	3a01      	subs	r2, #1
 8018010:	60da      	str	r2, [r3, #12]
 8018012:	e019      	b.n	8018048 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018014:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018018:	2b00      	cmp	r3, #0
 801801a:	d115      	bne.n	8018048 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801801c:	7ebb      	ldrb	r3, [r7, #26]
 801801e:	f003 0310 	and.w	r3, r3, #16
 8018022:	2b00      	cmp	r3, #0
 8018024:	d003      	beq.n	801802e <f_open+0x1ba>
					res = FR_NO_FILE;
 8018026:	2304      	movs	r3, #4
 8018028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801802c:	e00c      	b.n	8018048 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801802e:	79fb      	ldrb	r3, [r7, #7]
 8018030:	f003 0302 	and.w	r3, r3, #2
 8018034:	2b00      	cmp	r3, #0
 8018036:	d007      	beq.n	8018048 <f_open+0x1d4>
 8018038:	7ebb      	ldrb	r3, [r7, #26]
 801803a:	f003 0301 	and.w	r3, r3, #1
 801803e:	2b00      	cmp	r3, #0
 8018040:	d002      	beq.n	8018048 <f_open+0x1d4>
						res = FR_DENIED;
 8018042:	2307      	movs	r3, #7
 8018044:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8018048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801804c:	2b00      	cmp	r3, #0
 801804e:	d128      	bne.n	80180a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018050:	79fb      	ldrb	r3, [r7, #7]
 8018052:	f003 0308 	and.w	r3, r3, #8
 8018056:	2b00      	cmp	r3, #0
 8018058:	d003      	beq.n	8018062 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801805a:	79fb      	ldrb	r3, [r7, #7]
 801805c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018060:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018062:	693b      	ldr	r3, [r7, #16]
 8018064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801806a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018070:	79fb      	ldrb	r3, [r7, #7]
 8018072:	f023 0301 	bic.w	r3, r3, #1
 8018076:	2b00      	cmp	r3, #0
 8018078:	bf14      	ite	ne
 801807a:	2301      	movne	r3, #1
 801807c:	2300      	moveq	r3, #0
 801807e:	b2db      	uxtb	r3, r3
 8018080:	461a      	mov	r2, r3
 8018082:	f107 0314 	add.w	r3, r7, #20
 8018086:	4611      	mov	r1, r2
 8018088:	4618      	mov	r0, r3
 801808a:	f7fe fb93 	bl	80167b4 <inc_lock>
 801808e:	4602      	mov	r2, r0
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	691b      	ldr	r3, [r3, #16]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d102      	bne.n	80180a2 <f_open+0x22e>
 801809c:	2302      	movs	r3, #2
 801809e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80180a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	f040 8095 	bne.w	80181d6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80180ac:	693b      	ldr	r3, [r7, #16]
 80180ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80180b0:	4611      	mov	r1, r2
 80180b2:	4618      	mov	r0, r3
 80180b4:	f7ff f9af 	bl	8017416 <ld_clust>
 80180b8:	4602      	mov	r2, r0
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80180be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180c0:	331c      	adds	r3, #28
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7fe fa10 	bl	80164e8 <ld_dword>
 80180c8:	4602      	mov	r2, r0
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	2200      	movs	r2, #0
 80180d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80180d4:	693a      	ldr	r2, [r7, #16]
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80180da:	693b      	ldr	r3, [r7, #16]
 80180dc:	88da      	ldrh	r2, [r3, #6]
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	79fa      	ldrb	r2, [r7, #7]
 80180e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	2200      	movs	r2, #0
 80180ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	2200      	movs	r2, #0
 80180f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	2200      	movs	r2, #0
 80180f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	3330      	adds	r3, #48	; 0x30
 80180fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018102:	2100      	movs	r1, #0
 8018104:	4618      	mov	r0, r3
 8018106:	f7fe fa7a 	bl	80165fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801810a:	79fb      	ldrb	r3, [r7, #7]
 801810c:	f003 0320 	and.w	r3, r3, #32
 8018110:	2b00      	cmp	r3, #0
 8018112:	d060      	beq.n	80181d6 <f_open+0x362>
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	68db      	ldr	r3, [r3, #12]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d05c      	beq.n	80181d6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	68da      	ldr	r2, [r3, #12]
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018124:	693b      	ldr	r3, [r7, #16]
 8018126:	895b      	ldrh	r3, [r3, #10]
 8018128:	025b      	lsls	r3, r3, #9
 801812a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	689b      	ldr	r3, [r3, #8]
 8018130:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	68db      	ldr	r3, [r3, #12]
 8018136:	657b      	str	r3, [r7, #84]	; 0x54
 8018138:	e016      	b.n	8018168 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801813e:	4618      	mov	r0, r3
 8018140:	f7fe fd25 	bl	8016b8e <get_fat>
 8018144:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8018146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018148:	2b01      	cmp	r3, #1
 801814a:	d802      	bhi.n	8018152 <f_open+0x2de>
 801814c:	2302      	movs	r3, #2
 801814e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018158:	d102      	bne.n	8018160 <f_open+0x2ec>
 801815a:	2301      	movs	r3, #1
 801815c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018160:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018164:	1ad3      	subs	r3, r2, r3
 8018166:	657b      	str	r3, [r7, #84]	; 0x54
 8018168:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801816c:	2b00      	cmp	r3, #0
 801816e:	d103      	bne.n	8018178 <f_open+0x304>
 8018170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018174:	429a      	cmp	r2, r3
 8018176:	d8e0      	bhi.n	801813a <f_open+0x2c6>
				}
				fp->clust = clst;
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801817c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801817e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018182:	2b00      	cmp	r3, #0
 8018184:	d127      	bne.n	80181d6 <f_open+0x362>
 8018186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801818c:	2b00      	cmp	r3, #0
 801818e:	d022      	beq.n	80181d6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018190:	693b      	ldr	r3, [r7, #16]
 8018192:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018194:	4618      	mov	r0, r3
 8018196:	f7fe fcdb 	bl	8016b50 <clust2sect>
 801819a:	6478      	str	r0, [r7, #68]	; 0x44
 801819c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d103      	bne.n	80181aa <f_open+0x336>
						res = FR_INT_ERR;
 80181a2:	2302      	movs	r3, #2
 80181a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80181a8:	e015      	b.n	80181d6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80181aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181ac:	0a5a      	lsrs	r2, r3, #9
 80181ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181b0:	441a      	add	r2, r3
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80181b6:	693b      	ldr	r3, [r7, #16]
 80181b8:	7858      	ldrb	r0, [r3, #1]
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	6a1a      	ldr	r2, [r3, #32]
 80181c4:	2301      	movs	r3, #1
 80181c6:	f7fe f919 	bl	80163fc <disk_read>
 80181ca:	4603      	mov	r3, r0
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d002      	beq.n	80181d6 <f_open+0x362>
 80181d0:	2301      	movs	r3, #1
 80181d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80181d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d002      	beq.n	80181e4 <f_open+0x370>
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	2200      	movs	r2, #0
 80181e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80181e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80181e8:	4618      	mov	r0, r3
 80181ea:	3760      	adds	r7, #96	; 0x60
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b08e      	sub	sp, #56	; 0x38
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	60f8      	str	r0, [r7, #12]
 80181f8:	60b9      	str	r1, [r7, #8]
 80181fa:	607a      	str	r2, [r7, #4]
 80181fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80181fe:	68bb      	ldr	r3, [r7, #8]
 8018200:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8018202:	683b      	ldr	r3, [r7, #0]
 8018204:	2200      	movs	r2, #0
 8018206:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	f107 0214 	add.w	r2, r7, #20
 801820e:	4611      	mov	r1, r2
 8018210:	4618      	mov	r0, r3
 8018212:	f7ff fdb3 	bl	8017d7c <validate>
 8018216:	4603      	mov	r3, r0
 8018218:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801821c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018220:	2b00      	cmp	r3, #0
 8018222:	d107      	bne.n	8018234 <f_read+0x44>
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	7d5b      	ldrb	r3, [r3, #21]
 8018228:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801822c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018230:	2b00      	cmp	r3, #0
 8018232:	d002      	beq.n	801823a <f_read+0x4a>
 8018234:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018238:	e115      	b.n	8018466 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	7d1b      	ldrb	r3, [r3, #20]
 801823e:	f003 0301 	and.w	r3, r3, #1
 8018242:	2b00      	cmp	r3, #0
 8018244:	d101      	bne.n	801824a <f_read+0x5a>
 8018246:	2307      	movs	r3, #7
 8018248:	e10d      	b.n	8018466 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	68da      	ldr	r2, [r3, #12]
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	699b      	ldr	r3, [r3, #24]
 8018252:	1ad3      	subs	r3, r2, r3
 8018254:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8018256:	687a      	ldr	r2, [r7, #4]
 8018258:	6a3b      	ldr	r3, [r7, #32]
 801825a:	429a      	cmp	r2, r3
 801825c:	f240 80fe 	bls.w	801845c <f_read+0x26c>
 8018260:	6a3b      	ldr	r3, [r7, #32]
 8018262:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8018264:	e0fa      	b.n	801845c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	699b      	ldr	r3, [r3, #24]
 801826a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801826e:	2b00      	cmp	r3, #0
 8018270:	f040 80c6 	bne.w	8018400 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	699b      	ldr	r3, [r3, #24]
 8018278:	0a5b      	lsrs	r3, r3, #9
 801827a:	697a      	ldr	r2, [r7, #20]
 801827c:	8952      	ldrh	r2, [r2, #10]
 801827e:	3a01      	subs	r2, #1
 8018280:	4013      	ands	r3, r2
 8018282:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8018284:	69fb      	ldr	r3, [r7, #28]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d12f      	bne.n	80182ea <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	699b      	ldr	r3, [r3, #24]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d103      	bne.n	801829a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	689b      	ldr	r3, [r3, #8]
 8018296:	633b      	str	r3, [r7, #48]	; 0x30
 8018298:	e013      	b.n	80182c2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d007      	beq.n	80182b2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	699b      	ldr	r3, [r3, #24]
 80182a6:	4619      	mov	r1, r3
 80182a8:	68f8      	ldr	r0, [r7, #12]
 80182aa:	f7fe fef9 	bl	80170a0 <clmt_clust>
 80182ae:	6338      	str	r0, [r7, #48]	; 0x30
 80182b0:	e007      	b.n	80182c2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80182b2:	68fa      	ldr	r2, [r7, #12]
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	69db      	ldr	r3, [r3, #28]
 80182b8:	4619      	mov	r1, r3
 80182ba:	4610      	mov	r0, r2
 80182bc:	f7fe fc67 	bl	8016b8e <get_fat>
 80182c0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80182c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182c4:	2b01      	cmp	r3, #1
 80182c6:	d804      	bhi.n	80182d2 <f_read+0xe2>
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	2202      	movs	r2, #2
 80182cc:	755a      	strb	r2, [r3, #21]
 80182ce:	2302      	movs	r3, #2
 80182d0:	e0c9      	b.n	8018466 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80182d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182d8:	d104      	bne.n	80182e4 <f_read+0xf4>
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	2201      	movs	r2, #1
 80182de:	755a      	strb	r2, [r3, #21]
 80182e0:	2301      	movs	r3, #1
 80182e2:	e0c0      	b.n	8018466 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182e8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80182ea:	697a      	ldr	r2, [r7, #20]
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	69db      	ldr	r3, [r3, #28]
 80182f0:	4619      	mov	r1, r3
 80182f2:	4610      	mov	r0, r2
 80182f4:	f7fe fc2c 	bl	8016b50 <clust2sect>
 80182f8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80182fa:	69bb      	ldr	r3, [r7, #24]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d104      	bne.n	801830a <f_read+0x11a>
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	2202      	movs	r2, #2
 8018304:	755a      	strb	r2, [r3, #21]
 8018306:	2302      	movs	r3, #2
 8018308:	e0ad      	b.n	8018466 <f_read+0x276>
			sect += csect;
 801830a:	69ba      	ldr	r2, [r7, #24]
 801830c:	69fb      	ldr	r3, [r7, #28]
 801830e:	4413      	add	r3, r2
 8018310:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	0a5b      	lsrs	r3, r3, #9
 8018316:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8018318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801831a:	2b00      	cmp	r3, #0
 801831c:	d039      	beq.n	8018392 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801831e:	69fa      	ldr	r2, [r7, #28]
 8018320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018322:	4413      	add	r3, r2
 8018324:	697a      	ldr	r2, [r7, #20]
 8018326:	8952      	ldrh	r2, [r2, #10]
 8018328:	4293      	cmp	r3, r2
 801832a:	d905      	bls.n	8018338 <f_read+0x148>
					cc = fs->csize - csect;
 801832c:	697b      	ldr	r3, [r7, #20]
 801832e:	895b      	ldrh	r3, [r3, #10]
 8018330:	461a      	mov	r2, r3
 8018332:	69fb      	ldr	r3, [r7, #28]
 8018334:	1ad3      	subs	r3, r2, r3
 8018336:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018338:	697b      	ldr	r3, [r7, #20]
 801833a:	7858      	ldrb	r0, [r3, #1]
 801833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801833e:	69ba      	ldr	r2, [r7, #24]
 8018340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018342:	f7fe f85b 	bl	80163fc <disk_read>
 8018346:	4603      	mov	r3, r0
 8018348:	2b00      	cmp	r3, #0
 801834a:	d004      	beq.n	8018356 <f_read+0x166>
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	2201      	movs	r2, #1
 8018350:	755a      	strb	r2, [r3, #21]
 8018352:	2301      	movs	r3, #1
 8018354:	e087      	b.n	8018466 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	7d1b      	ldrb	r3, [r3, #20]
 801835a:	b25b      	sxtb	r3, r3
 801835c:	2b00      	cmp	r3, #0
 801835e:	da14      	bge.n	801838a <f_read+0x19a>
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	6a1a      	ldr	r2, [r3, #32]
 8018364:	69bb      	ldr	r3, [r7, #24]
 8018366:	1ad3      	subs	r3, r2, r3
 8018368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801836a:	429a      	cmp	r2, r3
 801836c:	d90d      	bls.n	801838a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	6a1a      	ldr	r2, [r3, #32]
 8018372:	69bb      	ldr	r3, [r7, #24]
 8018374:	1ad3      	subs	r3, r2, r3
 8018376:	025b      	lsls	r3, r3, #9
 8018378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801837a:	18d0      	adds	r0, r2, r3
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	3330      	adds	r3, #48	; 0x30
 8018380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018384:	4619      	mov	r1, r3
 8018386:	f7fe f919 	bl	80165bc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801838c:	025b      	lsls	r3, r3, #9
 801838e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8018390:	e050      	b.n	8018434 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	6a1b      	ldr	r3, [r3, #32]
 8018396:	69ba      	ldr	r2, [r7, #24]
 8018398:	429a      	cmp	r2, r3
 801839a:	d02e      	beq.n	80183fa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	7d1b      	ldrb	r3, [r3, #20]
 80183a0:	b25b      	sxtb	r3, r3
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	da18      	bge.n	80183d8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80183a6:	697b      	ldr	r3, [r7, #20]
 80183a8:	7858      	ldrb	r0, [r3, #1]
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	6a1a      	ldr	r2, [r3, #32]
 80183b4:	2301      	movs	r3, #1
 80183b6:	f7fe f841 	bl	801643c <disk_write>
 80183ba:	4603      	mov	r3, r0
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d004      	beq.n	80183ca <f_read+0x1da>
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	2201      	movs	r2, #1
 80183c4:	755a      	strb	r2, [r3, #21]
 80183c6:	2301      	movs	r3, #1
 80183c8:	e04d      	b.n	8018466 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	7d1b      	ldrb	r3, [r3, #20]
 80183ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80183d2:	b2da      	uxtb	r2, r3
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80183d8:	697b      	ldr	r3, [r7, #20]
 80183da:	7858      	ldrb	r0, [r3, #1]
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80183e2:	2301      	movs	r3, #1
 80183e4:	69ba      	ldr	r2, [r7, #24]
 80183e6:	f7fe f809 	bl	80163fc <disk_read>
 80183ea:	4603      	mov	r3, r0
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d004      	beq.n	80183fa <f_read+0x20a>
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	2201      	movs	r2, #1
 80183f4:	755a      	strb	r2, [r3, #21]
 80183f6:	2301      	movs	r3, #1
 80183f8:	e035      	b.n	8018466 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	69ba      	ldr	r2, [r7, #24]
 80183fe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	699b      	ldr	r3, [r3, #24]
 8018404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018408:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801840c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801840e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	429a      	cmp	r2, r3
 8018414:	d901      	bls.n	801841a <f_read+0x22a>
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	699b      	ldr	r3, [r3, #24]
 8018424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018428:	4413      	add	r3, r2
 801842a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801842c:	4619      	mov	r1, r3
 801842e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018430:	f7fe f8c4 	bl	80165bc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8018434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018438:	4413      	add	r3, r2
 801843a:	627b      	str	r3, [r7, #36]	; 0x24
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	699a      	ldr	r2, [r3, #24]
 8018440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018442:	441a      	add	r2, r3
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	619a      	str	r2, [r3, #24]
 8018448:	683b      	ldr	r3, [r7, #0]
 801844a:	681a      	ldr	r2, [r3, #0]
 801844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801844e:	441a      	add	r2, r3
 8018450:	683b      	ldr	r3, [r7, #0]
 8018452:	601a      	str	r2, [r3, #0]
 8018454:	687a      	ldr	r2, [r7, #4]
 8018456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018458:	1ad3      	subs	r3, r2, r3
 801845a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	2b00      	cmp	r3, #0
 8018460:	f47f af01 	bne.w	8018266 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8018464:	2300      	movs	r3, #0
}
 8018466:	4618      	mov	r0, r3
 8018468:	3738      	adds	r7, #56	; 0x38
 801846a:	46bd      	mov	sp, r7
 801846c:	bd80      	pop	{r7, pc}

0801846e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801846e:	b580      	push	{r7, lr}
 8018470:	b08c      	sub	sp, #48	; 0x30
 8018472:	af00      	add	r7, sp, #0
 8018474:	60f8      	str	r0, [r7, #12]
 8018476:	60b9      	str	r1, [r7, #8]
 8018478:	607a      	str	r2, [r7, #4]
 801847a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801847c:	68bb      	ldr	r3, [r7, #8]
 801847e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018480:	683b      	ldr	r3, [r7, #0]
 8018482:	2200      	movs	r2, #0
 8018484:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	f107 0210 	add.w	r2, r7, #16
 801848c:	4611      	mov	r1, r2
 801848e:	4618      	mov	r0, r3
 8018490:	f7ff fc74 	bl	8017d7c <validate>
 8018494:	4603      	mov	r3, r0
 8018496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801849a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d107      	bne.n	80184b2 <f_write+0x44>
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	7d5b      	ldrb	r3, [r3, #21]
 80184a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80184aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d002      	beq.n	80184b8 <f_write+0x4a>
 80184b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80184b6:	e14b      	b.n	8018750 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	7d1b      	ldrb	r3, [r3, #20]
 80184bc:	f003 0302 	and.w	r3, r3, #2
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d101      	bne.n	80184c8 <f_write+0x5a>
 80184c4:	2307      	movs	r3, #7
 80184c6:	e143      	b.n	8018750 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	699a      	ldr	r2, [r3, #24]
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	441a      	add	r2, r3
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	699b      	ldr	r3, [r3, #24]
 80184d4:	429a      	cmp	r2, r3
 80184d6:	f080 812d 	bcs.w	8018734 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	699b      	ldr	r3, [r3, #24]
 80184de:	43db      	mvns	r3, r3
 80184e0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80184e2:	e127      	b.n	8018734 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	699b      	ldr	r3, [r3, #24]
 80184e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	f040 80e3 	bne.w	80186b8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	699b      	ldr	r3, [r3, #24]
 80184f6:	0a5b      	lsrs	r3, r3, #9
 80184f8:	693a      	ldr	r2, [r7, #16]
 80184fa:	8952      	ldrh	r2, [r2, #10]
 80184fc:	3a01      	subs	r2, #1
 80184fe:	4013      	ands	r3, r2
 8018500:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018502:	69bb      	ldr	r3, [r7, #24]
 8018504:	2b00      	cmp	r3, #0
 8018506:	d143      	bne.n	8018590 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	699b      	ldr	r3, [r3, #24]
 801850c:	2b00      	cmp	r3, #0
 801850e:	d10c      	bne.n	801852a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	689b      	ldr	r3, [r3, #8]
 8018514:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018518:	2b00      	cmp	r3, #0
 801851a:	d11a      	bne.n	8018552 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	2100      	movs	r1, #0
 8018520:	4618      	mov	r0, r3
 8018522:	f7fe fd25 	bl	8016f70 <create_chain>
 8018526:	62b8      	str	r0, [r7, #40]	; 0x28
 8018528:	e013      	b.n	8018552 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801852e:	2b00      	cmp	r3, #0
 8018530:	d007      	beq.n	8018542 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	699b      	ldr	r3, [r3, #24]
 8018536:	4619      	mov	r1, r3
 8018538:	68f8      	ldr	r0, [r7, #12]
 801853a:	f7fe fdb1 	bl	80170a0 <clmt_clust>
 801853e:	62b8      	str	r0, [r7, #40]	; 0x28
 8018540:	e007      	b.n	8018552 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018542:	68fa      	ldr	r2, [r7, #12]
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	69db      	ldr	r3, [r3, #28]
 8018548:	4619      	mov	r1, r3
 801854a:	4610      	mov	r0, r2
 801854c:	f7fe fd10 	bl	8016f70 <create_chain>
 8018550:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018554:	2b00      	cmp	r3, #0
 8018556:	f000 80f2 	beq.w	801873e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801855c:	2b01      	cmp	r3, #1
 801855e:	d104      	bne.n	801856a <f_write+0xfc>
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	2202      	movs	r2, #2
 8018564:	755a      	strb	r2, [r3, #21]
 8018566:	2302      	movs	r3, #2
 8018568:	e0f2      	b.n	8018750 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801856c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018570:	d104      	bne.n	801857c <f_write+0x10e>
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	2201      	movs	r2, #1
 8018576:	755a      	strb	r2, [r3, #21]
 8018578:	2301      	movs	r3, #1
 801857a:	e0e9      	b.n	8018750 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018580:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	689b      	ldr	r3, [r3, #8]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d102      	bne.n	8018590 <f_write+0x122>
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801858e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	7d1b      	ldrb	r3, [r3, #20]
 8018594:	b25b      	sxtb	r3, r3
 8018596:	2b00      	cmp	r3, #0
 8018598:	da18      	bge.n	80185cc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801859a:	693b      	ldr	r3, [r7, #16]
 801859c:	7858      	ldrb	r0, [r3, #1]
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	6a1a      	ldr	r2, [r3, #32]
 80185a8:	2301      	movs	r3, #1
 80185aa:	f7fd ff47 	bl	801643c <disk_write>
 80185ae:	4603      	mov	r3, r0
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d004      	beq.n	80185be <f_write+0x150>
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	2201      	movs	r2, #1
 80185b8:	755a      	strb	r2, [r3, #21]
 80185ba:	2301      	movs	r3, #1
 80185bc:	e0c8      	b.n	8018750 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	7d1b      	ldrb	r3, [r3, #20]
 80185c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80185c6:	b2da      	uxtb	r2, r3
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80185cc:	693a      	ldr	r2, [r7, #16]
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	69db      	ldr	r3, [r3, #28]
 80185d2:	4619      	mov	r1, r3
 80185d4:	4610      	mov	r0, r2
 80185d6:	f7fe fabb 	bl	8016b50 <clust2sect>
 80185da:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80185dc:	697b      	ldr	r3, [r7, #20]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d104      	bne.n	80185ec <f_write+0x17e>
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	2202      	movs	r2, #2
 80185e6:	755a      	strb	r2, [r3, #21]
 80185e8:	2302      	movs	r3, #2
 80185ea:	e0b1      	b.n	8018750 <f_write+0x2e2>
			sect += csect;
 80185ec:	697a      	ldr	r2, [r7, #20]
 80185ee:	69bb      	ldr	r3, [r7, #24]
 80185f0:	4413      	add	r3, r2
 80185f2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	0a5b      	lsrs	r3, r3, #9
 80185f8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80185fa:	6a3b      	ldr	r3, [r7, #32]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d03c      	beq.n	801867a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018600:	69ba      	ldr	r2, [r7, #24]
 8018602:	6a3b      	ldr	r3, [r7, #32]
 8018604:	4413      	add	r3, r2
 8018606:	693a      	ldr	r2, [r7, #16]
 8018608:	8952      	ldrh	r2, [r2, #10]
 801860a:	4293      	cmp	r3, r2
 801860c:	d905      	bls.n	801861a <f_write+0x1ac>
					cc = fs->csize - csect;
 801860e:	693b      	ldr	r3, [r7, #16]
 8018610:	895b      	ldrh	r3, [r3, #10]
 8018612:	461a      	mov	r2, r3
 8018614:	69bb      	ldr	r3, [r7, #24]
 8018616:	1ad3      	subs	r3, r2, r3
 8018618:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801861a:	693b      	ldr	r3, [r7, #16]
 801861c:	7858      	ldrb	r0, [r3, #1]
 801861e:	6a3b      	ldr	r3, [r7, #32]
 8018620:	697a      	ldr	r2, [r7, #20]
 8018622:	69f9      	ldr	r1, [r7, #28]
 8018624:	f7fd ff0a 	bl	801643c <disk_write>
 8018628:	4603      	mov	r3, r0
 801862a:	2b00      	cmp	r3, #0
 801862c:	d004      	beq.n	8018638 <f_write+0x1ca>
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	2201      	movs	r2, #1
 8018632:	755a      	strb	r2, [r3, #21]
 8018634:	2301      	movs	r3, #1
 8018636:	e08b      	b.n	8018750 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	6a1a      	ldr	r2, [r3, #32]
 801863c:	697b      	ldr	r3, [r7, #20]
 801863e:	1ad3      	subs	r3, r2, r3
 8018640:	6a3a      	ldr	r2, [r7, #32]
 8018642:	429a      	cmp	r2, r3
 8018644:	d915      	bls.n	8018672 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	6a1a      	ldr	r2, [r3, #32]
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	1ad3      	subs	r3, r2, r3
 8018654:	025b      	lsls	r3, r3, #9
 8018656:	69fa      	ldr	r2, [r7, #28]
 8018658:	4413      	add	r3, r2
 801865a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801865e:	4619      	mov	r1, r3
 8018660:	f7fd ffac 	bl	80165bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	7d1b      	ldrb	r3, [r3, #20]
 8018668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801866c:	b2da      	uxtb	r2, r3
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018672:	6a3b      	ldr	r3, [r7, #32]
 8018674:	025b      	lsls	r3, r3, #9
 8018676:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018678:	e03f      	b.n	80186fa <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	6a1b      	ldr	r3, [r3, #32]
 801867e:	697a      	ldr	r2, [r7, #20]
 8018680:	429a      	cmp	r2, r3
 8018682:	d016      	beq.n	80186b2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	699a      	ldr	r2, [r3, #24]
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801868c:	429a      	cmp	r2, r3
 801868e:	d210      	bcs.n	80186b2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018690:	693b      	ldr	r3, [r7, #16]
 8018692:	7858      	ldrb	r0, [r3, #1]
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801869a:	2301      	movs	r3, #1
 801869c:	697a      	ldr	r2, [r7, #20]
 801869e:	f7fd fead 	bl	80163fc <disk_read>
 80186a2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d004      	beq.n	80186b2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	2201      	movs	r2, #1
 80186ac:	755a      	strb	r2, [r3, #21]
 80186ae:	2301      	movs	r3, #1
 80186b0:	e04e      	b.n	8018750 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	697a      	ldr	r2, [r7, #20]
 80186b6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	699b      	ldr	r3, [r3, #24]
 80186bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80186c0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80186c4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80186c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	429a      	cmp	r2, r3
 80186cc:	d901      	bls.n	80186d2 <f_write+0x264>
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	699b      	ldr	r3, [r3, #24]
 80186dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80186e0:	4413      	add	r3, r2
 80186e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186e4:	69f9      	ldr	r1, [r7, #28]
 80186e6:	4618      	mov	r0, r3
 80186e8:	f7fd ff68 	bl	80165bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	7d1b      	ldrb	r3, [r3, #20]
 80186f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80186f4:	b2da      	uxtb	r2, r3
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80186fa:	69fa      	ldr	r2, [r7, #28]
 80186fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186fe:	4413      	add	r3, r2
 8018700:	61fb      	str	r3, [r7, #28]
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	699a      	ldr	r2, [r3, #24]
 8018706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018708:	441a      	add	r2, r3
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	619a      	str	r2, [r3, #24]
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	68da      	ldr	r2, [r3, #12]
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	699b      	ldr	r3, [r3, #24]
 8018716:	429a      	cmp	r2, r3
 8018718:	bf38      	it	cc
 801871a:	461a      	movcc	r2, r3
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	60da      	str	r2, [r3, #12]
 8018720:	683b      	ldr	r3, [r7, #0]
 8018722:	681a      	ldr	r2, [r3, #0]
 8018724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018726:	441a      	add	r2, r3
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	601a      	str	r2, [r3, #0]
 801872c:	687a      	ldr	r2, [r7, #4]
 801872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018730:	1ad3      	subs	r3, r2, r3
 8018732:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	2b00      	cmp	r3, #0
 8018738:	f47f aed4 	bne.w	80184e4 <f_write+0x76>
 801873c:	e000      	b.n	8018740 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801873e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	7d1b      	ldrb	r3, [r3, #20]
 8018744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018748:	b2da      	uxtb	r2, r3
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801874e:	2300      	movs	r3, #0
}
 8018750:	4618      	mov	r0, r3
 8018752:	3730      	adds	r7, #48	; 0x30
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}

08018758 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b086      	sub	sp, #24
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	f107 0208 	add.w	r2, r7, #8
 8018766:	4611      	mov	r1, r2
 8018768:	4618      	mov	r0, r3
 801876a:	f7ff fb07 	bl	8017d7c <validate>
 801876e:	4603      	mov	r3, r0
 8018770:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018772:	7dfb      	ldrb	r3, [r7, #23]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d168      	bne.n	801884a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	7d1b      	ldrb	r3, [r3, #20]
 801877c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018780:	2b00      	cmp	r3, #0
 8018782:	d062      	beq.n	801884a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	7d1b      	ldrb	r3, [r3, #20]
 8018788:	b25b      	sxtb	r3, r3
 801878a:	2b00      	cmp	r3, #0
 801878c:	da15      	bge.n	80187ba <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801878e:	68bb      	ldr	r3, [r7, #8]
 8018790:	7858      	ldrb	r0, [r3, #1]
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	6a1a      	ldr	r2, [r3, #32]
 801879c:	2301      	movs	r3, #1
 801879e:	f7fd fe4d 	bl	801643c <disk_write>
 80187a2:	4603      	mov	r3, r0
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d001      	beq.n	80187ac <f_sync+0x54>
 80187a8:	2301      	movs	r3, #1
 80187aa:	e04f      	b.n	801884c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	7d1b      	ldrb	r3, [r3, #20]
 80187b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80187b4:	b2da      	uxtb	r2, r3
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80187ba:	f7fa fce1 	bl	8013180 <get_fattime>
 80187be:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80187c0:	68ba      	ldr	r2, [r7, #8]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187c6:	4619      	mov	r1, r3
 80187c8:	4610      	mov	r0, r2
 80187ca:	f7fe f925 	bl	8016a18 <move_window>
 80187ce:	4603      	mov	r3, r0
 80187d0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80187d2:	7dfb      	ldrb	r3, [r7, #23]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d138      	bne.n	801884a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187dc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	330b      	adds	r3, #11
 80187e2:	781a      	ldrb	r2, [r3, #0]
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	330b      	adds	r3, #11
 80187e8:	f042 0220 	orr.w	r2, r2, #32
 80187ec:	b2d2      	uxtb	r2, r2
 80187ee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	6818      	ldr	r0, [r3, #0]
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	689b      	ldr	r3, [r3, #8]
 80187f8:	461a      	mov	r2, r3
 80187fa:	68f9      	ldr	r1, [r7, #12]
 80187fc:	f7fe fe2a 	bl	8017454 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	f103 021c 	add.w	r2, r3, #28
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	68db      	ldr	r3, [r3, #12]
 801880a:	4619      	mov	r1, r3
 801880c:	4610      	mov	r0, r2
 801880e:	f7fd fea9 	bl	8016564 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	3316      	adds	r3, #22
 8018816:	6939      	ldr	r1, [r7, #16]
 8018818:	4618      	mov	r0, r3
 801881a:	f7fd fea3 	bl	8016564 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	3312      	adds	r3, #18
 8018822:	2100      	movs	r1, #0
 8018824:	4618      	mov	r0, r3
 8018826:	f7fd fe82 	bl	801652e <st_word>
					fs->wflag = 1;
 801882a:	68bb      	ldr	r3, [r7, #8]
 801882c:	2201      	movs	r2, #1
 801882e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	4618      	mov	r0, r3
 8018834:	f7fe f91e 	bl	8016a74 <sync_fs>
 8018838:	4603      	mov	r3, r0
 801883a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	7d1b      	ldrb	r3, [r3, #20]
 8018840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018844:	b2da      	uxtb	r2, r3
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801884a:	7dfb      	ldrb	r3, [r7, #23]
}
 801884c:	4618      	mov	r0, r3
 801884e:	3718      	adds	r7, #24
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}

08018854 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b084      	sub	sp, #16
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801885c:	6878      	ldr	r0, [r7, #4]
 801885e:	f7ff ff7b 	bl	8018758 <f_sync>
 8018862:	4603      	mov	r3, r0
 8018864:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8018866:	7bfb      	ldrb	r3, [r7, #15]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d118      	bne.n	801889e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	f107 0208 	add.w	r2, r7, #8
 8018872:	4611      	mov	r1, r2
 8018874:	4618      	mov	r0, r3
 8018876:	f7ff fa81 	bl	8017d7c <validate>
 801887a:	4603      	mov	r3, r0
 801887c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801887e:	7bfb      	ldrb	r3, [r7, #15]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d10c      	bne.n	801889e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	691b      	ldr	r3, [r3, #16]
 8018888:	4618      	mov	r0, r3
 801888a:	f7fe f821 	bl	80168d0 <dec_lock>
 801888e:	4603      	mov	r3, r0
 8018890:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8018892:	7bfb      	ldrb	r3, [r7, #15]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d102      	bne.n	801889e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	2200      	movs	r2, #0
 801889c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801889e:	7bfb      	ldrb	r3, [r7, #15]
}
 80188a0:	4618      	mov	r0, r3
 80188a2:	3710      	adds	r7, #16
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}

080188a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80188a8:	b480      	push	{r7}
 80188aa:	b087      	sub	sp, #28
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	60f8      	str	r0, [r7, #12]
 80188b0:	60b9      	str	r1, [r7, #8]
 80188b2:	4613      	mov	r3, r2
 80188b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80188b6:	2301      	movs	r3, #1
 80188b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80188ba:	2300      	movs	r3, #0
 80188bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80188be:	4b1f      	ldr	r3, [pc, #124]	; (801893c <FATFS_LinkDriverEx+0x94>)
 80188c0:	7a5b      	ldrb	r3, [r3, #9]
 80188c2:	b2db      	uxtb	r3, r3
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d131      	bne.n	801892c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80188c8:	4b1c      	ldr	r3, [pc, #112]	; (801893c <FATFS_LinkDriverEx+0x94>)
 80188ca:	7a5b      	ldrb	r3, [r3, #9]
 80188cc:	b2db      	uxtb	r3, r3
 80188ce:	461a      	mov	r2, r3
 80188d0:	4b1a      	ldr	r3, [pc, #104]	; (801893c <FATFS_LinkDriverEx+0x94>)
 80188d2:	2100      	movs	r1, #0
 80188d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80188d6:	4b19      	ldr	r3, [pc, #100]	; (801893c <FATFS_LinkDriverEx+0x94>)
 80188d8:	7a5b      	ldrb	r3, [r3, #9]
 80188da:	b2db      	uxtb	r3, r3
 80188dc:	4a17      	ldr	r2, [pc, #92]	; (801893c <FATFS_LinkDriverEx+0x94>)
 80188de:	009b      	lsls	r3, r3, #2
 80188e0:	4413      	add	r3, r2
 80188e2:	68fa      	ldr	r2, [r7, #12]
 80188e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80188e6:	4b15      	ldr	r3, [pc, #84]	; (801893c <FATFS_LinkDriverEx+0x94>)
 80188e8:	7a5b      	ldrb	r3, [r3, #9]
 80188ea:	b2db      	uxtb	r3, r3
 80188ec:	461a      	mov	r2, r3
 80188ee:	4b13      	ldr	r3, [pc, #76]	; (801893c <FATFS_LinkDriverEx+0x94>)
 80188f0:	4413      	add	r3, r2
 80188f2:	79fa      	ldrb	r2, [r7, #7]
 80188f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80188f6:	4b11      	ldr	r3, [pc, #68]	; (801893c <FATFS_LinkDriverEx+0x94>)
 80188f8:	7a5b      	ldrb	r3, [r3, #9]
 80188fa:	b2db      	uxtb	r3, r3
 80188fc:	1c5a      	adds	r2, r3, #1
 80188fe:	b2d1      	uxtb	r1, r2
 8018900:	4a0e      	ldr	r2, [pc, #56]	; (801893c <FATFS_LinkDriverEx+0x94>)
 8018902:	7251      	strb	r1, [r2, #9]
 8018904:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018906:	7dbb      	ldrb	r3, [r7, #22]
 8018908:	3330      	adds	r3, #48	; 0x30
 801890a:	b2da      	uxtb	r2, r3
 801890c:	68bb      	ldr	r3, [r7, #8]
 801890e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018910:	68bb      	ldr	r3, [r7, #8]
 8018912:	3301      	adds	r3, #1
 8018914:	223a      	movs	r2, #58	; 0x3a
 8018916:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018918:	68bb      	ldr	r3, [r7, #8]
 801891a:	3302      	adds	r3, #2
 801891c:	222f      	movs	r2, #47	; 0x2f
 801891e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018920:	68bb      	ldr	r3, [r7, #8]
 8018922:	3303      	adds	r3, #3
 8018924:	2200      	movs	r2, #0
 8018926:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018928:	2300      	movs	r3, #0
 801892a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801892c:	7dfb      	ldrb	r3, [r7, #23]
}
 801892e:	4618      	mov	r0, r3
 8018930:	371c      	adds	r7, #28
 8018932:	46bd      	mov	sp, r7
 8018934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018938:	4770      	bx	lr
 801893a:	bf00      	nop
 801893c:	24000b84 	.word	0x24000b84

08018940 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b082      	sub	sp, #8
 8018944:	af00      	add	r7, sp, #0
 8018946:	6078      	str	r0, [r7, #4]
 8018948:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801894a:	2200      	movs	r2, #0
 801894c:	6839      	ldr	r1, [r7, #0]
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f7ff ffaa 	bl	80188a8 <FATFS_LinkDriverEx>
 8018954:	4603      	mov	r3, r0
}
 8018956:	4618      	mov	r0, r3
 8018958:	3708      	adds	r7, #8
 801895a:	46bd      	mov	sp, r7
 801895c:	bd80      	pop	{r7, pc}
	...

08018960 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018960:	b580      	push	{r7, lr}
 8018962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018964:	2200      	movs	r2, #0
 8018966:	4913      	ldr	r1, [pc, #76]	; (80189b4 <MX_USB_DEVICE_Init+0x54>)
 8018968:	4813      	ldr	r0, [pc, #76]	; (80189b8 <MX_USB_DEVICE_Init+0x58>)
 801896a:	f7fc fc20 	bl	80151ae <USBD_Init>
 801896e:	4603      	mov	r3, r0
 8018970:	2b00      	cmp	r3, #0
 8018972:	d001      	beq.n	8018978 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018974:	f7eb f8ee 	bl	8003b54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8018978:	4910      	ldr	r1, [pc, #64]	; (80189bc <MX_USB_DEVICE_Init+0x5c>)
 801897a:	480f      	ldr	r0, [pc, #60]	; (80189b8 <MX_USB_DEVICE_Init+0x58>)
 801897c:	f7fc fc4d 	bl	801521a <USBD_RegisterClass>
 8018980:	4603      	mov	r3, r0
 8018982:	2b00      	cmp	r3, #0
 8018984:	d001      	beq.n	801898a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018986:	f7eb f8e5 	bl	8003b54 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801898a:	490d      	ldr	r1, [pc, #52]	; (80189c0 <MX_USB_DEVICE_Init+0x60>)
 801898c:	480a      	ldr	r0, [pc, #40]	; (80189b8 <MX_USB_DEVICE_Init+0x58>)
 801898e:	f7fa fff7 	bl	8013980 <USBD_MSC_RegisterStorage>
 8018992:	4603      	mov	r3, r0
 8018994:	2b00      	cmp	r3, #0
 8018996:	d001      	beq.n	801899c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018998:	f7eb f8dc 	bl	8003b54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801899c:	4806      	ldr	r0, [pc, #24]	; (80189b8 <MX_USB_DEVICE_Init+0x58>)
 801899e:	f7fc fc5d 	bl	801525c <USBD_Start>
 80189a2:	4603      	mov	r3, r0
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d001      	beq.n	80189ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80189a8:	f7eb f8d4 	bl	8003b54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80189ac:	f7f0 fe2e 	bl	800960c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80189b0:	bf00      	nop
 80189b2:	bd80      	pop	{r7, pc}
 80189b4:	24000108 	.word	0x24000108
 80189b8:	24001bb4 	.word	0x24001bb4
 80189bc:	24000020 	.word	0x24000020
 80189c0:	24000158 	.word	0x24000158

080189c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189c4:	b480      	push	{r7}
 80189c6:	b083      	sub	sp, #12
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	4603      	mov	r3, r0
 80189cc:	6039      	str	r1, [r7, #0]
 80189ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80189d0:	683b      	ldr	r3, [r7, #0]
 80189d2:	2212      	movs	r2, #18
 80189d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80189d6:	4b03      	ldr	r3, [pc, #12]	; (80189e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80189d8:	4618      	mov	r0, r3
 80189da:	370c      	adds	r7, #12
 80189dc:	46bd      	mov	sp, r7
 80189de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e2:	4770      	bx	lr
 80189e4:	24000124 	.word	0x24000124

080189e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189e8:	b480      	push	{r7}
 80189ea:	b083      	sub	sp, #12
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	4603      	mov	r3, r0
 80189f0:	6039      	str	r1, [r7, #0]
 80189f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80189f4:	683b      	ldr	r3, [r7, #0]
 80189f6:	2204      	movs	r2, #4
 80189f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80189fa:	4b03      	ldr	r3, [pc, #12]	; (8018a08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80189fc:	4618      	mov	r0, r3
 80189fe:	370c      	adds	r7, #12
 8018a00:	46bd      	mov	sp, r7
 8018a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a06:	4770      	bx	lr
 8018a08:	24000138 	.word	0x24000138

08018a0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b082      	sub	sp, #8
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	4603      	mov	r3, r0
 8018a14:	6039      	str	r1, [r7, #0]
 8018a16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018a18:	79fb      	ldrb	r3, [r7, #7]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d105      	bne.n	8018a2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018a1e:	683a      	ldr	r2, [r7, #0]
 8018a20:	4907      	ldr	r1, [pc, #28]	; (8018a40 <USBD_FS_ProductStrDescriptor+0x34>)
 8018a22:	4808      	ldr	r0, [pc, #32]	; (8018a44 <USBD_FS_ProductStrDescriptor+0x38>)
 8018a24:	f7fd fbe7 	bl	80161f6 <USBD_GetString>
 8018a28:	e004      	b.n	8018a34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018a2a:	683a      	ldr	r2, [r7, #0]
 8018a2c:	4904      	ldr	r1, [pc, #16]	; (8018a40 <USBD_FS_ProductStrDescriptor+0x34>)
 8018a2e:	4805      	ldr	r0, [pc, #20]	; (8018a44 <USBD_FS_ProductStrDescriptor+0x38>)
 8018a30:	f7fd fbe1 	bl	80161f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a34:	4b02      	ldr	r3, [pc, #8]	; (8018a40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018a36:	4618      	mov	r0, r3
 8018a38:	3708      	adds	r7, #8
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	bd80      	pop	{r7, pc}
 8018a3e:	bf00      	nop
 8018a40:	24001e84 	.word	0x24001e84
 8018a44:	0801ae4c 	.word	0x0801ae4c

08018a48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b082      	sub	sp, #8
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	4603      	mov	r3, r0
 8018a50:	6039      	str	r1, [r7, #0]
 8018a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018a54:	683a      	ldr	r2, [r7, #0]
 8018a56:	4904      	ldr	r1, [pc, #16]	; (8018a68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018a58:	4804      	ldr	r0, [pc, #16]	; (8018a6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018a5a:	f7fd fbcc 	bl	80161f6 <USBD_GetString>
  return USBD_StrDesc;
 8018a5e:	4b02      	ldr	r3, [pc, #8]	; (8018a68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018a60:	4618      	mov	r0, r3
 8018a62:	3708      	adds	r7, #8
 8018a64:	46bd      	mov	sp, r7
 8018a66:	bd80      	pop	{r7, pc}
 8018a68:	24001e84 	.word	0x24001e84
 8018a6c:	0801ae60 	.word	0x0801ae60

08018a70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b082      	sub	sp, #8
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	4603      	mov	r3, r0
 8018a78:	6039      	str	r1, [r7, #0]
 8018a7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018a7c:	683b      	ldr	r3, [r7, #0]
 8018a7e:	221a      	movs	r2, #26
 8018a80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018a82:	f000 f843 	bl	8018b0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018a86:	4b02      	ldr	r3, [pc, #8]	; (8018a90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018a88:	4618      	mov	r0, r3
 8018a8a:	3708      	adds	r7, #8
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	bd80      	pop	{r7, pc}
 8018a90:	2400013c 	.word	0x2400013c

08018a94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b082      	sub	sp, #8
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	6039      	str	r1, [r7, #0]
 8018a9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018aa0:	79fb      	ldrb	r3, [r7, #7]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d105      	bne.n	8018ab2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018aa6:	683a      	ldr	r2, [r7, #0]
 8018aa8:	4907      	ldr	r1, [pc, #28]	; (8018ac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018aaa:	4808      	ldr	r0, [pc, #32]	; (8018acc <USBD_FS_ConfigStrDescriptor+0x38>)
 8018aac:	f7fd fba3 	bl	80161f6 <USBD_GetString>
 8018ab0:	e004      	b.n	8018abc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018ab2:	683a      	ldr	r2, [r7, #0]
 8018ab4:	4904      	ldr	r1, [pc, #16]	; (8018ac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018ab6:	4805      	ldr	r0, [pc, #20]	; (8018acc <USBD_FS_ConfigStrDescriptor+0x38>)
 8018ab8:	f7fd fb9d 	bl	80161f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018abc:	4b02      	ldr	r3, [pc, #8]	; (8018ac8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018abe:	4618      	mov	r0, r3
 8018ac0:	3708      	adds	r7, #8
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	bd80      	pop	{r7, pc}
 8018ac6:	bf00      	nop
 8018ac8:	24001e84 	.word	0x24001e84
 8018acc:	0801ae74 	.word	0x0801ae74

08018ad0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b082      	sub	sp, #8
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	6039      	str	r1, [r7, #0]
 8018ada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018adc:	79fb      	ldrb	r3, [r7, #7]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d105      	bne.n	8018aee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018ae2:	683a      	ldr	r2, [r7, #0]
 8018ae4:	4907      	ldr	r1, [pc, #28]	; (8018b04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018ae6:	4808      	ldr	r0, [pc, #32]	; (8018b08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018ae8:	f7fd fb85 	bl	80161f6 <USBD_GetString>
 8018aec:	e004      	b.n	8018af8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018aee:	683a      	ldr	r2, [r7, #0]
 8018af0:	4904      	ldr	r1, [pc, #16]	; (8018b04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018af2:	4805      	ldr	r0, [pc, #20]	; (8018b08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018af4:	f7fd fb7f 	bl	80161f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018af8:	4b02      	ldr	r3, [pc, #8]	; (8018b04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018afa:	4618      	mov	r0, r3
 8018afc:	3708      	adds	r7, #8
 8018afe:	46bd      	mov	sp, r7
 8018b00:	bd80      	pop	{r7, pc}
 8018b02:	bf00      	nop
 8018b04:	24001e84 	.word	0x24001e84
 8018b08:	0801ae80 	.word	0x0801ae80

08018b0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	b084      	sub	sp, #16
 8018b10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018b12:	4b0f      	ldr	r3, [pc, #60]	; (8018b50 <Get_SerialNum+0x44>)
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018b18:	4b0e      	ldr	r3, [pc, #56]	; (8018b54 <Get_SerialNum+0x48>)
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018b1e:	4b0e      	ldr	r3, [pc, #56]	; (8018b58 <Get_SerialNum+0x4c>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018b24:	68fa      	ldr	r2, [r7, #12]
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	4413      	add	r3, r2
 8018b2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d009      	beq.n	8018b46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018b32:	2208      	movs	r2, #8
 8018b34:	4909      	ldr	r1, [pc, #36]	; (8018b5c <Get_SerialNum+0x50>)
 8018b36:	68f8      	ldr	r0, [r7, #12]
 8018b38:	f000 f814 	bl	8018b64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018b3c:	2204      	movs	r2, #4
 8018b3e:	4908      	ldr	r1, [pc, #32]	; (8018b60 <Get_SerialNum+0x54>)
 8018b40:	68b8      	ldr	r0, [r7, #8]
 8018b42:	f000 f80f 	bl	8018b64 <IntToUnicode>
  }
}
 8018b46:	bf00      	nop
 8018b48:	3710      	adds	r7, #16
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	bd80      	pop	{r7, pc}
 8018b4e:	bf00      	nop
 8018b50:	1ff1e800 	.word	0x1ff1e800
 8018b54:	1ff1e804 	.word	0x1ff1e804
 8018b58:	1ff1e808 	.word	0x1ff1e808
 8018b5c:	2400013e 	.word	0x2400013e
 8018b60:	2400014e 	.word	0x2400014e

08018b64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018b64:	b480      	push	{r7}
 8018b66:	b087      	sub	sp, #28
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	60f8      	str	r0, [r7, #12]
 8018b6c:	60b9      	str	r1, [r7, #8]
 8018b6e:	4613      	mov	r3, r2
 8018b70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018b72:	2300      	movs	r3, #0
 8018b74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018b76:	2300      	movs	r3, #0
 8018b78:	75fb      	strb	r3, [r7, #23]
 8018b7a:	e027      	b.n	8018bcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	0f1b      	lsrs	r3, r3, #28
 8018b80:	2b09      	cmp	r3, #9
 8018b82:	d80b      	bhi.n	8018b9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	0f1b      	lsrs	r3, r3, #28
 8018b88:	b2da      	uxtb	r2, r3
 8018b8a:	7dfb      	ldrb	r3, [r7, #23]
 8018b8c:	005b      	lsls	r3, r3, #1
 8018b8e:	4619      	mov	r1, r3
 8018b90:	68bb      	ldr	r3, [r7, #8]
 8018b92:	440b      	add	r3, r1
 8018b94:	3230      	adds	r2, #48	; 0x30
 8018b96:	b2d2      	uxtb	r2, r2
 8018b98:	701a      	strb	r2, [r3, #0]
 8018b9a:	e00a      	b.n	8018bb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	0f1b      	lsrs	r3, r3, #28
 8018ba0:	b2da      	uxtb	r2, r3
 8018ba2:	7dfb      	ldrb	r3, [r7, #23]
 8018ba4:	005b      	lsls	r3, r3, #1
 8018ba6:	4619      	mov	r1, r3
 8018ba8:	68bb      	ldr	r3, [r7, #8]
 8018baa:	440b      	add	r3, r1
 8018bac:	3237      	adds	r2, #55	; 0x37
 8018bae:	b2d2      	uxtb	r2, r2
 8018bb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	011b      	lsls	r3, r3, #4
 8018bb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018bb8:	7dfb      	ldrb	r3, [r7, #23]
 8018bba:	005b      	lsls	r3, r3, #1
 8018bbc:	3301      	adds	r3, #1
 8018bbe:	68ba      	ldr	r2, [r7, #8]
 8018bc0:	4413      	add	r3, r2
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018bc6:	7dfb      	ldrb	r3, [r7, #23]
 8018bc8:	3301      	adds	r3, #1
 8018bca:	75fb      	strb	r3, [r7, #23]
 8018bcc:	7dfa      	ldrb	r2, [r7, #23]
 8018bce:	79fb      	ldrb	r3, [r7, #7]
 8018bd0:	429a      	cmp	r2, r3
 8018bd2:	d3d3      	bcc.n	8018b7c <IntToUnicode+0x18>
  }
}
 8018bd4:	bf00      	nop
 8018bd6:	371c      	adds	r7, #28
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bde:	4770      	bx	lr

08018be0 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8018be0:	b480      	push	{r7}
 8018be2:	b083      	sub	sp, #12
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	4603      	mov	r3, r0
 8018be8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8018bea:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018bec:	4618      	mov	r0, r3
 8018bee:	370c      	adds	r7, #12
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf6:	4770      	bx	lr

08018bf8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b08e      	sub	sp, #56	; 0x38
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	4603      	mov	r3, r0
 8018c00:	60b9      	str	r1, [r7, #8]
 8018c02:	607a      	str	r2, [r7, #4]
 8018c04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8018c06:	23ff      	movs	r3, #255	; 0xff
 8018c08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8018c0c:	f107 0310 	add.w	r3, r7, #16
 8018c10:	4619      	mov	r1, r3
 8018c12:	480a      	ldr	r0, [pc, #40]	; (8018c3c <STORAGE_GetCapacity_FS+0x44>)
 8018c14:	f7f5 f89a 	bl	800dd4c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8018c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c1a:	1e5a      	subs	r2, r3, #1
 8018c1c:	68bb      	ldr	r3, [r7, #8]
 8018c1e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8018c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c22:	b29a      	uxth	r2, r3
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8018c2e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8018c32:	4618      	mov	r0, r3
 8018c34:	3738      	adds	r7, #56	; 0x38
 8018c36:	46bd      	mov	sp, r7
 8018c38:	bd80      	pop	{r7, pc}
 8018c3a:	bf00      	nop
 8018c3c:	24001450 	.word	0x24001450

08018c40 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8018c40:	b480      	push	{r7}
 8018c42:	b083      	sub	sp, #12
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	4603      	mov	r3, r0
 8018c48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018c4a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	370c      	adds	r7, #12
 8018c50:	46bd      	mov	sp, r7
 8018c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c56:	4770      	bx	lr

08018c58 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018c58:	b480      	push	{r7}
 8018c5a:	b083      	sub	sp, #12
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	4603      	mov	r3, r0
 8018c60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8018c62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018c64:	4618      	mov	r0, r3
 8018c66:	370c      	adds	r7, #12
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6e:	4770      	bx	lr

08018c70 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b088      	sub	sp, #32
 8018c74:	af02      	add	r7, sp, #8
 8018c76:	60b9      	str	r1, [r7, #8]
 8018c78:	607a      	str	r2, [r7, #4]
 8018c7a:	461a      	mov	r2, r3
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	73fb      	strb	r3, [r7, #15]
 8018c80:	4613      	mov	r3, r2
 8018c82:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8018c84:	23ff      	movs	r3, #255	; 0xff
 8018c86:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018c88:	89ba      	ldrh	r2, [r7, #12]
 8018c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8018c8e:	9300      	str	r3, [sp, #0]
 8018c90:	4613      	mov	r3, r2
 8018c92:	687a      	ldr	r2, [r7, #4]
 8018c94:	68b9      	ldr	r1, [r7, #8]
 8018c96:	4809      	ldr	r0, [pc, #36]	; (8018cbc <STORAGE_Read_FS+0x4c>)
 8018c98:	f7f3 ffca 	bl	800cc30 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018c9c:	bf00      	nop
 8018c9e:	4807      	ldr	r0, [pc, #28]	; (8018cbc <STORAGE_Read_FS+0x4c>)
 8018ca0:	f7f5 f92a 	bl	800def8 <HAL_SD_GetCardState>
 8018ca4:	4603      	mov	r3, r0
 8018ca6:	2b04      	cmp	r3, #4
 8018ca8:	d1f9      	bne.n	8018c9e <STORAGE_Read_FS+0x2e>
	ret = 0;
 8018caa:	2300      	movs	r3, #0
 8018cac:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	3718      	adds	r7, #24
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
 8018cba:	bf00      	nop
 8018cbc:	24001450 	.word	0x24001450

08018cc0 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b088      	sub	sp, #32
 8018cc4:	af02      	add	r7, sp, #8
 8018cc6:	60b9      	str	r1, [r7, #8]
 8018cc8:	607a      	str	r2, [r7, #4]
 8018cca:	461a      	mov	r2, r3
 8018ccc:	4603      	mov	r3, r0
 8018cce:	73fb      	strb	r3, [r7, #15]
 8018cd0:	4613      	mov	r3, r2
 8018cd2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8018cd4:	23ff      	movs	r3, #255	; 0xff
 8018cd6:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018cd8:	89ba      	ldrh	r2, [r7, #12]
 8018cda:	f04f 33ff 	mov.w	r3, #4294967295
 8018cde:	9300      	str	r3, [sp, #0]
 8018ce0:	4613      	mov	r3, r2
 8018ce2:	687a      	ldr	r2, [r7, #4]
 8018ce4:	68b9      	ldr	r1, [r7, #8]
 8018ce6:	4809      	ldr	r0, [pc, #36]	; (8018d0c <STORAGE_Write_FS+0x4c>)
 8018ce8:	f7f4 f92c 	bl	800cf44 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018cec:	bf00      	nop
 8018cee:	4807      	ldr	r0, [pc, #28]	; (8018d0c <STORAGE_Write_FS+0x4c>)
 8018cf0:	f7f5 f902 	bl	800def8 <HAL_SD_GetCardState>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	2b04      	cmp	r3, #4
 8018cf8:	d1f9      	bne.n	8018cee <STORAGE_Write_FS+0x2e>
	ret = 0;
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8018d02:	4618      	mov	r0, r3
 8018d04:	3718      	adds	r7, #24
 8018d06:	46bd      	mov	sp, r7
 8018d08:	bd80      	pop	{r7, pc}
 8018d0a:	bf00      	nop
 8018d0c:	24001450 	.word	0x24001450

08018d10 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018d10:	b480      	push	{r7}
 8018d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018d14:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018d16:	4618      	mov	r0, r3
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1e:	4770      	bx	lr

08018d20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b08a      	sub	sp, #40	; 0x28
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018d28:	f107 0314 	add.w	r3, r7, #20
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	601a      	str	r2, [r3, #0]
 8018d30:	605a      	str	r2, [r3, #4]
 8018d32:	609a      	str	r2, [r3, #8]
 8018d34:	60da      	str	r2, [r3, #12]
 8018d36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	4a1e      	ldr	r2, [pc, #120]	; (8018db8 <HAL_PCD_MspInit+0x98>)
 8018d3e:	4293      	cmp	r3, r2
 8018d40:	d136      	bne.n	8018db0 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018d42:	4b1e      	ldr	r3, [pc, #120]	; (8018dbc <HAL_PCD_MspInit+0x9c>)
 8018d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018d48:	4a1c      	ldr	r2, [pc, #112]	; (8018dbc <HAL_PCD_MspInit+0x9c>)
 8018d4a:	f043 0301 	orr.w	r3, r3, #1
 8018d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018d52:	4b1a      	ldr	r3, [pc, #104]	; (8018dbc <HAL_PCD_MspInit+0x9c>)
 8018d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018d58:	f003 0301 	and.w	r3, r3, #1
 8018d5c:	613b      	str	r3, [r7, #16]
 8018d5e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018d60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018d66:	2302      	movs	r3, #2
 8018d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018d6e:	2300      	movs	r3, #0
 8018d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018d72:	230a      	movs	r3, #10
 8018d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018d76:	f107 0314 	add.w	r3, r7, #20
 8018d7a:	4619      	mov	r1, r3
 8018d7c:	4810      	ldr	r0, [pc, #64]	; (8018dc0 <HAL_PCD_MspInit+0xa0>)
 8018d7e:	f7ee ff2f 	bl	8007be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018d82:	4b0e      	ldr	r3, [pc, #56]	; (8018dbc <HAL_PCD_MspInit+0x9c>)
 8018d84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018d88:	4a0c      	ldr	r2, [pc, #48]	; (8018dbc <HAL_PCD_MspInit+0x9c>)
 8018d8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018d8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8018d92:	4b0a      	ldr	r3, [pc, #40]	; (8018dbc <HAL_PCD_MspInit+0x9c>)
 8018d94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018d9c:	60fb      	str	r3, [r7, #12]
 8018d9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018da0:	2200      	movs	r2, #0
 8018da2:	2100      	movs	r1, #0
 8018da4:	2065      	movs	r0, #101	; 0x65
 8018da6:	f7eb fcd2 	bl	800474e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018daa:	2065      	movs	r0, #101	; 0x65
 8018dac:	f7eb fce9 	bl	8004782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018db0:	bf00      	nop
 8018db2:	3728      	adds	r7, #40	; 0x28
 8018db4:	46bd      	mov	sp, r7
 8018db6:	bd80      	pop	{r7, pc}
 8018db8:	40080000 	.word	0x40080000
 8018dbc:	58024400 	.word	0x58024400
 8018dc0:	58020000 	.word	0x58020000

08018dc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b082      	sub	sp, #8
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018dd8:	4619      	mov	r1, r3
 8018dda:	4610      	mov	r0, r2
 8018ddc:	f7fc fa89 	bl	80152f2 <USBD_LL_SetupStage>
}
 8018de0:	bf00      	nop
 8018de2:	3708      	adds	r7, #8
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bd80      	pop	{r7, pc}

08018de8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b082      	sub	sp, #8
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
 8018df0:	460b      	mov	r3, r1
 8018df2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018dfa:	78fa      	ldrb	r2, [r7, #3]
 8018dfc:	6879      	ldr	r1, [r7, #4]
 8018dfe:	4613      	mov	r3, r2
 8018e00:	00db      	lsls	r3, r3, #3
 8018e02:	1a9b      	subs	r3, r3, r2
 8018e04:	009b      	lsls	r3, r3, #2
 8018e06:	440b      	add	r3, r1
 8018e08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018e0c:	681a      	ldr	r2, [r3, #0]
 8018e0e:	78fb      	ldrb	r3, [r7, #3]
 8018e10:	4619      	mov	r1, r3
 8018e12:	f7fc fac1 	bl	8015398 <USBD_LL_DataOutStage>
}
 8018e16:	bf00      	nop
 8018e18:	3708      	adds	r7, #8
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	bd80      	pop	{r7, pc}

08018e1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e1e:	b580      	push	{r7, lr}
 8018e20:	b082      	sub	sp, #8
 8018e22:	af00      	add	r7, sp, #0
 8018e24:	6078      	str	r0, [r7, #4]
 8018e26:	460b      	mov	r3, r1
 8018e28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018e30:	78fa      	ldrb	r2, [r7, #3]
 8018e32:	6879      	ldr	r1, [r7, #4]
 8018e34:	4613      	mov	r3, r2
 8018e36:	00db      	lsls	r3, r3, #3
 8018e38:	1a9b      	subs	r3, r3, r2
 8018e3a:	009b      	lsls	r3, r3, #2
 8018e3c:	440b      	add	r3, r1
 8018e3e:	3348      	adds	r3, #72	; 0x48
 8018e40:	681a      	ldr	r2, [r3, #0]
 8018e42:	78fb      	ldrb	r3, [r7, #3]
 8018e44:	4619      	mov	r1, r3
 8018e46:	f7fc fb0a 	bl	801545e <USBD_LL_DataInStage>
}
 8018e4a:	bf00      	nop
 8018e4c:	3708      	adds	r7, #8
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	bd80      	pop	{r7, pc}

08018e52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e52:	b580      	push	{r7, lr}
 8018e54:	b082      	sub	sp, #8
 8018e56:	af00      	add	r7, sp, #0
 8018e58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7fc fc0e 	bl	8015682 <USBD_LL_SOF>
}
 8018e66:	bf00      	nop
 8018e68:	3708      	adds	r7, #8
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd80      	pop	{r7, pc}

08018e6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e6e:	b580      	push	{r7, lr}
 8018e70:	b084      	sub	sp, #16
 8018e72:	af00      	add	r7, sp, #0
 8018e74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018e76:	2301      	movs	r3, #1
 8018e78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	68db      	ldr	r3, [r3, #12]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d102      	bne.n	8018e88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018e82:	2300      	movs	r3, #0
 8018e84:	73fb      	strb	r3, [r7, #15]
 8018e86:	e008      	b.n	8018e9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	68db      	ldr	r3, [r3, #12]
 8018e8c:	2b02      	cmp	r3, #2
 8018e8e:	d102      	bne.n	8018e96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018e90:	2301      	movs	r3, #1
 8018e92:	73fb      	strb	r3, [r7, #15]
 8018e94:	e001      	b.n	8018e9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018e96:	f7ea fe5d 	bl	8003b54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018ea0:	7bfa      	ldrb	r2, [r7, #15]
 8018ea2:	4611      	mov	r1, r2
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	f7fc fbb1 	bl	801560c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	f7fc fb6a 	bl	801558a <USBD_LL_Reset>
}
 8018eb6:	bf00      	nop
 8018eb8:	3710      	adds	r7, #16
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	bd80      	pop	{r7, pc}
	...

08018ec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b082      	sub	sp, #8
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f7fc fbac 	bl	801562c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	687a      	ldr	r2, [r7, #4]
 8018ee0:	6812      	ldr	r2, [r2, #0]
 8018ee2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018ee6:	f043 0301 	orr.w	r3, r3, #1
 8018eea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	6a1b      	ldr	r3, [r3, #32]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d005      	beq.n	8018f00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018ef4:	4b04      	ldr	r3, [pc, #16]	; (8018f08 <HAL_PCD_SuspendCallback+0x48>)
 8018ef6:	691b      	ldr	r3, [r3, #16]
 8018ef8:	4a03      	ldr	r2, [pc, #12]	; (8018f08 <HAL_PCD_SuspendCallback+0x48>)
 8018efa:	f043 0306 	orr.w	r3, r3, #6
 8018efe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018f00:	bf00      	nop
 8018f02:	3708      	adds	r7, #8
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}
 8018f08:	e000ed00 	.word	0xe000ed00

08018f0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	b082      	sub	sp, #8
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	f7fc fb9b 	bl	8015656 <USBD_LL_Resume>
}
 8018f20:	bf00      	nop
 8018f22:	3708      	adds	r7, #8
 8018f24:	46bd      	mov	sp, r7
 8018f26:	bd80      	pop	{r7, pc}

08018f28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b082      	sub	sp, #8
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	6078      	str	r0, [r7, #4]
 8018f30:	460b      	mov	r3, r1
 8018f32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f3a:	78fa      	ldrb	r2, [r7, #3]
 8018f3c:	4611      	mov	r1, r2
 8018f3e:	4618      	mov	r0, r3
 8018f40:	f7fc fbc6 	bl	80156d0 <USBD_LL_IsoOUTIncomplete>
}
 8018f44:	bf00      	nop
 8018f46:	3708      	adds	r7, #8
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd80      	pop	{r7, pc}

08018f4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f4c:	b580      	push	{r7, lr}
 8018f4e:	b082      	sub	sp, #8
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	6078      	str	r0, [r7, #4]
 8018f54:	460b      	mov	r3, r1
 8018f56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f5e:	78fa      	ldrb	r2, [r7, #3]
 8018f60:	4611      	mov	r1, r2
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7fc fba7 	bl	80156b6 <USBD_LL_IsoINIncomplete>
}
 8018f68:	bf00      	nop
 8018f6a:	3708      	adds	r7, #8
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	bd80      	pop	{r7, pc}

08018f70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b082      	sub	sp, #8
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f7e:	4618      	mov	r0, r3
 8018f80:	f7fc fbb3 	bl	80156ea <USBD_LL_DevConnected>
}
 8018f84:	bf00      	nop
 8018f86:	3708      	adds	r7, #8
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}

08018f8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b082      	sub	sp, #8
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	f7fc fbb0 	bl	8015700 <USBD_LL_DevDisconnected>
}
 8018fa0:	bf00      	nop
 8018fa2:	3708      	adds	r7, #8
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b082      	sub	sp, #8
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	781b      	ldrb	r3, [r3, #0]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d13e      	bne.n	8019036 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018fb8:	4a21      	ldr	r2, [pc, #132]	; (8019040 <USBD_LL_Init+0x98>)
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	4a1f      	ldr	r2, [pc, #124]	; (8019040 <USBD_LL_Init+0x98>)
 8018fc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018fc8:	4b1d      	ldr	r3, [pc, #116]	; (8019040 <USBD_LL_Init+0x98>)
 8018fca:	4a1e      	ldr	r2, [pc, #120]	; (8019044 <USBD_LL_Init+0x9c>)
 8018fcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8018fce:	4b1c      	ldr	r3, [pc, #112]	; (8019040 <USBD_LL_Init+0x98>)
 8018fd0:	2209      	movs	r2, #9
 8018fd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018fd4:	4b1a      	ldr	r3, [pc, #104]	; (8019040 <USBD_LL_Init+0x98>)
 8018fd6:	2202      	movs	r2, #2
 8018fd8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018fda:	4b19      	ldr	r3, [pc, #100]	; (8019040 <USBD_LL_Init+0x98>)
 8018fdc:	2200      	movs	r2, #0
 8018fde:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018fe0:	4b17      	ldr	r3, [pc, #92]	; (8019040 <USBD_LL_Init+0x98>)
 8018fe2:	2202      	movs	r2, #2
 8018fe4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018fe6:	4b16      	ldr	r3, [pc, #88]	; (8019040 <USBD_LL_Init+0x98>)
 8018fe8:	2200      	movs	r2, #0
 8018fea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018fec:	4b14      	ldr	r3, [pc, #80]	; (8019040 <USBD_LL_Init+0x98>)
 8018fee:	2200      	movs	r2, #0
 8018ff0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018ff2:	4b13      	ldr	r3, [pc, #76]	; (8019040 <USBD_LL_Init+0x98>)
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8018ff8:	4b11      	ldr	r3, [pc, #68]	; (8019040 <USBD_LL_Init+0x98>)
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018ffe:	4b10      	ldr	r3, [pc, #64]	; (8019040 <USBD_LL_Init+0x98>)
 8019000:	2200      	movs	r2, #0
 8019002:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019004:	4b0e      	ldr	r3, [pc, #56]	; (8019040 <USBD_LL_Init+0x98>)
 8019006:	2200      	movs	r2, #0
 8019008:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801900a:	480d      	ldr	r0, [pc, #52]	; (8019040 <USBD_LL_Init+0x98>)
 801900c:	f7ef f822 	bl	8008054 <HAL_PCD_Init>
 8019010:	4603      	mov	r3, r0
 8019012:	2b00      	cmp	r3, #0
 8019014:	d001      	beq.n	801901a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8019016:	f7ea fd9d 	bl	8003b54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801901a:	2180      	movs	r1, #128	; 0x80
 801901c:	4808      	ldr	r0, [pc, #32]	; (8019040 <USBD_LL_Init+0x98>)
 801901e:	f7f0 f9e0 	bl	80093e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019022:	2240      	movs	r2, #64	; 0x40
 8019024:	2100      	movs	r1, #0
 8019026:	4806      	ldr	r0, [pc, #24]	; (8019040 <USBD_LL_Init+0x98>)
 8019028:	f7f0 f994 	bl	8009354 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801902c:	2280      	movs	r2, #128	; 0x80
 801902e:	2101      	movs	r1, #1
 8019030:	4803      	ldr	r0, [pc, #12]	; (8019040 <USBD_LL_Init+0x98>)
 8019032:	f7f0 f98f 	bl	8009354 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019036:	2300      	movs	r3, #0
}
 8019038:	4618      	mov	r0, r3
 801903a:	3708      	adds	r7, #8
 801903c:	46bd      	mov	sp, r7
 801903e:	bd80      	pop	{r7, pc}
 8019040:	24002084 	.word	0x24002084
 8019044:	40080000 	.word	0x40080000

08019048 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b084      	sub	sp, #16
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019050:	2300      	movs	r3, #0
 8019052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019054:	2300      	movs	r3, #0
 8019056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801905e:	4618      	mov	r0, r3
 8019060:	f7ef f91c 	bl	800829c <HAL_PCD_Start>
 8019064:	4603      	mov	r3, r0
 8019066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019068:	7bfb      	ldrb	r3, [r7, #15]
 801906a:	4618      	mov	r0, r3
 801906c:	f000 f94a 	bl	8019304 <USBD_Get_USB_Status>
 8019070:	4603      	mov	r3, r0
 8019072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019074:	7bbb      	ldrb	r3, [r7, #14]
}
 8019076:	4618      	mov	r0, r3
 8019078:	3710      	adds	r7, #16
 801907a:	46bd      	mov	sp, r7
 801907c:	bd80      	pop	{r7, pc}

0801907e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801907e:	b580      	push	{r7, lr}
 8019080:	b084      	sub	sp, #16
 8019082:	af00      	add	r7, sp, #0
 8019084:	6078      	str	r0, [r7, #4]
 8019086:	4608      	mov	r0, r1
 8019088:	4611      	mov	r1, r2
 801908a:	461a      	mov	r2, r3
 801908c:	4603      	mov	r3, r0
 801908e:	70fb      	strb	r3, [r7, #3]
 8019090:	460b      	mov	r3, r1
 8019092:	70bb      	strb	r3, [r7, #2]
 8019094:	4613      	mov	r3, r2
 8019096:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019098:	2300      	movs	r3, #0
 801909a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801909c:	2300      	movs	r3, #0
 801909e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80190a6:	78bb      	ldrb	r3, [r7, #2]
 80190a8:	883a      	ldrh	r2, [r7, #0]
 80190aa:	78f9      	ldrb	r1, [r7, #3]
 80190ac:	f7ef fd2d 	bl	8008b0a <HAL_PCD_EP_Open>
 80190b0:	4603      	mov	r3, r0
 80190b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190b4:	7bfb      	ldrb	r3, [r7, #15]
 80190b6:	4618      	mov	r0, r3
 80190b8:	f000 f924 	bl	8019304 <USBD_Get_USB_Status>
 80190bc:	4603      	mov	r3, r0
 80190be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80190c2:	4618      	mov	r0, r3
 80190c4:	3710      	adds	r7, #16
 80190c6:	46bd      	mov	sp, r7
 80190c8:	bd80      	pop	{r7, pc}

080190ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80190ca:	b580      	push	{r7, lr}
 80190cc:	b084      	sub	sp, #16
 80190ce:	af00      	add	r7, sp, #0
 80190d0:	6078      	str	r0, [r7, #4]
 80190d2:	460b      	mov	r3, r1
 80190d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190d6:	2300      	movs	r3, #0
 80190d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190da:	2300      	movs	r3, #0
 80190dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190e4:	78fa      	ldrb	r2, [r7, #3]
 80190e6:	4611      	mov	r1, r2
 80190e8:	4618      	mov	r0, r3
 80190ea:	f7ef fd76 	bl	8008bda <HAL_PCD_EP_Close>
 80190ee:	4603      	mov	r3, r0
 80190f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190f2:	7bfb      	ldrb	r3, [r7, #15]
 80190f4:	4618      	mov	r0, r3
 80190f6:	f000 f905 	bl	8019304 <USBD_Get_USB_Status>
 80190fa:	4603      	mov	r3, r0
 80190fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8019100:	4618      	mov	r0, r3
 8019102:	3710      	adds	r7, #16
 8019104:	46bd      	mov	sp, r7
 8019106:	bd80      	pop	{r7, pc}

08019108 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b084      	sub	sp, #16
 801910c:	af00      	add	r7, sp, #0
 801910e:	6078      	str	r0, [r7, #4]
 8019110:	460b      	mov	r3, r1
 8019112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019114:	2300      	movs	r3, #0
 8019116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019118:	2300      	movs	r3, #0
 801911a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019122:	78fa      	ldrb	r2, [r7, #3]
 8019124:	4611      	mov	r1, r2
 8019126:	4618      	mov	r0, r3
 8019128:	f7ef ff08 	bl	8008f3c <HAL_PCD_EP_Flush>
 801912c:	4603      	mov	r3, r0
 801912e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019130:	7bfb      	ldrb	r3, [r7, #15]
 8019132:	4618      	mov	r0, r3
 8019134:	f000 f8e6 	bl	8019304 <USBD_Get_USB_Status>
 8019138:	4603      	mov	r3, r0
 801913a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801913c:	7bbb      	ldrb	r3, [r7, #14]
}
 801913e:	4618      	mov	r0, r3
 8019140:	3710      	adds	r7, #16
 8019142:	46bd      	mov	sp, r7
 8019144:	bd80      	pop	{r7, pc}

08019146 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019146:	b580      	push	{r7, lr}
 8019148:	b084      	sub	sp, #16
 801914a:	af00      	add	r7, sp, #0
 801914c:	6078      	str	r0, [r7, #4]
 801914e:	460b      	mov	r3, r1
 8019150:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019152:	2300      	movs	r3, #0
 8019154:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019156:	2300      	movs	r3, #0
 8019158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019160:	78fa      	ldrb	r2, [r7, #3]
 8019162:	4611      	mov	r1, r2
 8019164:	4618      	mov	r0, r3
 8019166:	f7ef fe2f 	bl	8008dc8 <HAL_PCD_EP_SetStall>
 801916a:	4603      	mov	r3, r0
 801916c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801916e:	7bfb      	ldrb	r3, [r7, #15]
 8019170:	4618      	mov	r0, r3
 8019172:	f000 f8c7 	bl	8019304 <USBD_Get_USB_Status>
 8019176:	4603      	mov	r3, r0
 8019178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801917a:	7bbb      	ldrb	r3, [r7, #14]
}
 801917c:	4618      	mov	r0, r3
 801917e:	3710      	adds	r7, #16
 8019180:	46bd      	mov	sp, r7
 8019182:	bd80      	pop	{r7, pc}

08019184 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b084      	sub	sp, #16
 8019188:	af00      	add	r7, sp, #0
 801918a:	6078      	str	r0, [r7, #4]
 801918c:	460b      	mov	r3, r1
 801918e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019190:	2300      	movs	r3, #0
 8019192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019194:	2300      	movs	r3, #0
 8019196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801919e:	78fa      	ldrb	r2, [r7, #3]
 80191a0:	4611      	mov	r1, r2
 80191a2:	4618      	mov	r0, r3
 80191a4:	f7ef fe74 	bl	8008e90 <HAL_PCD_EP_ClrStall>
 80191a8:	4603      	mov	r3, r0
 80191aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191ac:	7bfb      	ldrb	r3, [r7, #15]
 80191ae:	4618      	mov	r0, r3
 80191b0:	f000 f8a8 	bl	8019304 <USBD_Get_USB_Status>
 80191b4:	4603      	mov	r3, r0
 80191b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80191ba:	4618      	mov	r0, r3
 80191bc:	3710      	adds	r7, #16
 80191be:	46bd      	mov	sp, r7
 80191c0:	bd80      	pop	{r7, pc}

080191c2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191c2:	b480      	push	{r7}
 80191c4:	b085      	sub	sp, #20
 80191c6:	af00      	add	r7, sp, #0
 80191c8:	6078      	str	r0, [r7, #4]
 80191ca:	460b      	mov	r3, r1
 80191cc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191d4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80191d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	da0b      	bge.n	80191f6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80191de:	78fb      	ldrb	r3, [r7, #3]
 80191e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80191e4:	68f9      	ldr	r1, [r7, #12]
 80191e6:	4613      	mov	r3, r2
 80191e8:	00db      	lsls	r3, r3, #3
 80191ea:	1a9b      	subs	r3, r3, r2
 80191ec:	009b      	lsls	r3, r3, #2
 80191ee:	440b      	add	r3, r1
 80191f0:	333e      	adds	r3, #62	; 0x3e
 80191f2:	781b      	ldrb	r3, [r3, #0]
 80191f4:	e00b      	b.n	801920e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80191f6:	78fb      	ldrb	r3, [r7, #3]
 80191f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80191fc:	68f9      	ldr	r1, [r7, #12]
 80191fe:	4613      	mov	r3, r2
 8019200:	00db      	lsls	r3, r3, #3
 8019202:	1a9b      	subs	r3, r3, r2
 8019204:	009b      	lsls	r3, r3, #2
 8019206:	440b      	add	r3, r1
 8019208:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801920c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801920e:	4618      	mov	r0, r3
 8019210:	3714      	adds	r7, #20
 8019212:	46bd      	mov	sp, r7
 8019214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019218:	4770      	bx	lr

0801921a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801921a:	b580      	push	{r7, lr}
 801921c:	b084      	sub	sp, #16
 801921e:	af00      	add	r7, sp, #0
 8019220:	6078      	str	r0, [r7, #4]
 8019222:	460b      	mov	r3, r1
 8019224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019226:	2300      	movs	r3, #0
 8019228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801922a:	2300      	movs	r3, #0
 801922c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019234:	78fa      	ldrb	r2, [r7, #3]
 8019236:	4611      	mov	r1, r2
 8019238:	4618      	mov	r0, r3
 801923a:	f7ef fc41 	bl	8008ac0 <HAL_PCD_SetAddress>
 801923e:	4603      	mov	r3, r0
 8019240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019242:	7bfb      	ldrb	r3, [r7, #15]
 8019244:	4618      	mov	r0, r3
 8019246:	f000 f85d 	bl	8019304 <USBD_Get_USB_Status>
 801924a:	4603      	mov	r3, r0
 801924c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801924e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019250:	4618      	mov	r0, r3
 8019252:	3710      	adds	r7, #16
 8019254:	46bd      	mov	sp, r7
 8019256:	bd80      	pop	{r7, pc}

08019258 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b086      	sub	sp, #24
 801925c:	af00      	add	r7, sp, #0
 801925e:	60f8      	str	r0, [r7, #12]
 8019260:	607a      	str	r2, [r7, #4]
 8019262:	603b      	str	r3, [r7, #0]
 8019264:	460b      	mov	r3, r1
 8019266:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019268:	2300      	movs	r3, #0
 801926a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801926c:	2300      	movs	r3, #0
 801926e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019276:	7af9      	ldrb	r1, [r7, #11]
 8019278:	683b      	ldr	r3, [r7, #0]
 801927a:	687a      	ldr	r2, [r7, #4]
 801927c:	f7ef fd5a 	bl	8008d34 <HAL_PCD_EP_Transmit>
 8019280:	4603      	mov	r3, r0
 8019282:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019284:	7dfb      	ldrb	r3, [r7, #23]
 8019286:	4618      	mov	r0, r3
 8019288:	f000 f83c 	bl	8019304 <USBD_Get_USB_Status>
 801928c:	4603      	mov	r3, r0
 801928e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019290:	7dbb      	ldrb	r3, [r7, #22]
}
 8019292:	4618      	mov	r0, r3
 8019294:	3718      	adds	r7, #24
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}

0801929a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801929a:	b580      	push	{r7, lr}
 801929c:	b086      	sub	sp, #24
 801929e:	af00      	add	r7, sp, #0
 80192a0:	60f8      	str	r0, [r7, #12]
 80192a2:	607a      	str	r2, [r7, #4]
 80192a4:	603b      	str	r3, [r7, #0]
 80192a6:	460b      	mov	r3, r1
 80192a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192aa:	2300      	movs	r3, #0
 80192ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192ae:	2300      	movs	r3, #0
 80192b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80192b8:	7af9      	ldrb	r1, [r7, #11]
 80192ba:	683b      	ldr	r3, [r7, #0]
 80192bc:	687a      	ldr	r2, [r7, #4]
 80192be:	f7ef fcd6 	bl	8008c6e <HAL_PCD_EP_Receive>
 80192c2:	4603      	mov	r3, r0
 80192c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192c6:	7dfb      	ldrb	r3, [r7, #23]
 80192c8:	4618      	mov	r0, r3
 80192ca:	f000 f81b 	bl	8019304 <USBD_Get_USB_Status>
 80192ce:	4603      	mov	r3, r0
 80192d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80192d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80192d4:	4618      	mov	r0, r3
 80192d6:	3718      	adds	r7, #24
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}

080192dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b082      	sub	sp, #8
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	6078      	str	r0, [r7, #4]
 80192e4:	460b      	mov	r3, r1
 80192e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192ee:	78fa      	ldrb	r2, [r7, #3]
 80192f0:	4611      	mov	r1, r2
 80192f2:	4618      	mov	r0, r3
 80192f4:	f7ef fd06 	bl	8008d04 <HAL_PCD_EP_GetRxCount>
 80192f8:	4603      	mov	r3, r0
}
 80192fa:	4618      	mov	r0, r3
 80192fc:	3708      	adds	r7, #8
 80192fe:	46bd      	mov	sp, r7
 8019300:	bd80      	pop	{r7, pc}
	...

08019304 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019304:	b480      	push	{r7}
 8019306:	b085      	sub	sp, #20
 8019308:	af00      	add	r7, sp, #0
 801930a:	4603      	mov	r3, r0
 801930c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801930e:	2300      	movs	r3, #0
 8019310:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019312:	79fb      	ldrb	r3, [r7, #7]
 8019314:	2b03      	cmp	r3, #3
 8019316:	d817      	bhi.n	8019348 <USBD_Get_USB_Status+0x44>
 8019318:	a201      	add	r2, pc, #4	; (adr r2, 8019320 <USBD_Get_USB_Status+0x1c>)
 801931a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801931e:	bf00      	nop
 8019320:	08019331 	.word	0x08019331
 8019324:	08019337 	.word	0x08019337
 8019328:	0801933d 	.word	0x0801933d
 801932c:	08019343 	.word	0x08019343
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019330:	2300      	movs	r3, #0
 8019332:	73fb      	strb	r3, [r7, #15]
    break;
 8019334:	e00b      	b.n	801934e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019336:	2303      	movs	r3, #3
 8019338:	73fb      	strb	r3, [r7, #15]
    break;
 801933a:	e008      	b.n	801934e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801933c:	2301      	movs	r3, #1
 801933e:	73fb      	strb	r3, [r7, #15]
    break;
 8019340:	e005      	b.n	801934e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019342:	2303      	movs	r3, #3
 8019344:	73fb      	strb	r3, [r7, #15]
    break;
 8019346:	e002      	b.n	801934e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019348:	2303      	movs	r3, #3
 801934a:	73fb      	strb	r3, [r7, #15]
    break;
 801934c:	bf00      	nop
  }
  return usb_status;
 801934e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019350:	4618      	mov	r0, r3
 8019352:	3714      	adds	r7, #20
 8019354:	46bd      	mov	sp, r7
 8019356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801935a:	4770      	bx	lr

0801935c <__errno>:
 801935c:	4b01      	ldr	r3, [pc, #4]	; (8019364 <__errno+0x8>)
 801935e:	6818      	ldr	r0, [r3, #0]
 8019360:	4770      	bx	lr
 8019362:	bf00      	nop
 8019364:	24000178 	.word	0x24000178

08019368 <__libc_init_array>:
 8019368:	b570      	push	{r4, r5, r6, lr}
 801936a:	4e0d      	ldr	r6, [pc, #52]	; (80193a0 <__libc_init_array+0x38>)
 801936c:	4c0d      	ldr	r4, [pc, #52]	; (80193a4 <__libc_init_array+0x3c>)
 801936e:	1ba4      	subs	r4, r4, r6
 8019370:	10a4      	asrs	r4, r4, #2
 8019372:	2500      	movs	r5, #0
 8019374:	42a5      	cmp	r5, r4
 8019376:	d109      	bne.n	801938c <__libc_init_array+0x24>
 8019378:	4e0b      	ldr	r6, [pc, #44]	; (80193a8 <__libc_init_array+0x40>)
 801937a:	4c0c      	ldr	r4, [pc, #48]	; (80193ac <__libc_init_array+0x44>)
 801937c:	f001 f97a 	bl	801a674 <_init>
 8019380:	1ba4      	subs	r4, r4, r6
 8019382:	10a4      	asrs	r4, r4, #2
 8019384:	2500      	movs	r5, #0
 8019386:	42a5      	cmp	r5, r4
 8019388:	d105      	bne.n	8019396 <__libc_init_array+0x2e>
 801938a:	bd70      	pop	{r4, r5, r6, pc}
 801938c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019390:	4798      	blx	r3
 8019392:	3501      	adds	r5, #1
 8019394:	e7ee      	b.n	8019374 <__libc_init_array+0xc>
 8019396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801939a:	4798      	blx	r3
 801939c:	3501      	adds	r5, #1
 801939e:	e7f2      	b.n	8019386 <__libc_init_array+0x1e>
 80193a0:	0801b028 	.word	0x0801b028
 80193a4:	0801b028 	.word	0x0801b028
 80193a8:	0801b028 	.word	0x0801b028
 80193ac:	0801b02c 	.word	0x0801b02c

080193b0 <malloc>:
 80193b0:	4b02      	ldr	r3, [pc, #8]	; (80193bc <malloc+0xc>)
 80193b2:	4601      	mov	r1, r0
 80193b4:	6818      	ldr	r0, [r3, #0]
 80193b6:	f000 b86d 	b.w	8019494 <_malloc_r>
 80193ba:	bf00      	nop
 80193bc:	24000178 	.word	0x24000178

080193c0 <free>:
 80193c0:	4b02      	ldr	r3, [pc, #8]	; (80193cc <free+0xc>)
 80193c2:	4601      	mov	r1, r0
 80193c4:	6818      	ldr	r0, [r3, #0]
 80193c6:	f000 b817 	b.w	80193f8 <_free_r>
 80193ca:	bf00      	nop
 80193cc:	24000178 	.word	0x24000178

080193d0 <memcpy>:
 80193d0:	b510      	push	{r4, lr}
 80193d2:	1e43      	subs	r3, r0, #1
 80193d4:	440a      	add	r2, r1
 80193d6:	4291      	cmp	r1, r2
 80193d8:	d100      	bne.n	80193dc <memcpy+0xc>
 80193da:	bd10      	pop	{r4, pc}
 80193dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80193e4:	e7f7      	b.n	80193d6 <memcpy+0x6>

080193e6 <memset>:
 80193e6:	4402      	add	r2, r0
 80193e8:	4603      	mov	r3, r0
 80193ea:	4293      	cmp	r3, r2
 80193ec:	d100      	bne.n	80193f0 <memset+0xa>
 80193ee:	4770      	bx	lr
 80193f0:	f803 1b01 	strb.w	r1, [r3], #1
 80193f4:	e7f9      	b.n	80193ea <memset+0x4>
	...

080193f8 <_free_r>:
 80193f8:	b538      	push	{r3, r4, r5, lr}
 80193fa:	4605      	mov	r5, r0
 80193fc:	2900      	cmp	r1, #0
 80193fe:	d045      	beq.n	801948c <_free_r+0x94>
 8019400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019404:	1f0c      	subs	r4, r1, #4
 8019406:	2b00      	cmp	r3, #0
 8019408:	bfb8      	it	lt
 801940a:	18e4      	addlt	r4, r4, r3
 801940c:	f000 fc22 	bl	8019c54 <__malloc_lock>
 8019410:	4a1f      	ldr	r2, [pc, #124]	; (8019490 <_free_r+0x98>)
 8019412:	6813      	ldr	r3, [r2, #0]
 8019414:	4610      	mov	r0, r2
 8019416:	b933      	cbnz	r3, 8019426 <_free_r+0x2e>
 8019418:	6063      	str	r3, [r4, #4]
 801941a:	6014      	str	r4, [r2, #0]
 801941c:	4628      	mov	r0, r5
 801941e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019422:	f000 bc18 	b.w	8019c56 <__malloc_unlock>
 8019426:	42a3      	cmp	r3, r4
 8019428:	d90c      	bls.n	8019444 <_free_r+0x4c>
 801942a:	6821      	ldr	r1, [r4, #0]
 801942c:	1862      	adds	r2, r4, r1
 801942e:	4293      	cmp	r3, r2
 8019430:	bf04      	itt	eq
 8019432:	681a      	ldreq	r2, [r3, #0]
 8019434:	685b      	ldreq	r3, [r3, #4]
 8019436:	6063      	str	r3, [r4, #4]
 8019438:	bf04      	itt	eq
 801943a:	1852      	addeq	r2, r2, r1
 801943c:	6022      	streq	r2, [r4, #0]
 801943e:	6004      	str	r4, [r0, #0]
 8019440:	e7ec      	b.n	801941c <_free_r+0x24>
 8019442:	4613      	mov	r3, r2
 8019444:	685a      	ldr	r2, [r3, #4]
 8019446:	b10a      	cbz	r2, 801944c <_free_r+0x54>
 8019448:	42a2      	cmp	r2, r4
 801944a:	d9fa      	bls.n	8019442 <_free_r+0x4a>
 801944c:	6819      	ldr	r1, [r3, #0]
 801944e:	1858      	adds	r0, r3, r1
 8019450:	42a0      	cmp	r0, r4
 8019452:	d10b      	bne.n	801946c <_free_r+0x74>
 8019454:	6820      	ldr	r0, [r4, #0]
 8019456:	4401      	add	r1, r0
 8019458:	1858      	adds	r0, r3, r1
 801945a:	4282      	cmp	r2, r0
 801945c:	6019      	str	r1, [r3, #0]
 801945e:	d1dd      	bne.n	801941c <_free_r+0x24>
 8019460:	6810      	ldr	r0, [r2, #0]
 8019462:	6852      	ldr	r2, [r2, #4]
 8019464:	605a      	str	r2, [r3, #4]
 8019466:	4401      	add	r1, r0
 8019468:	6019      	str	r1, [r3, #0]
 801946a:	e7d7      	b.n	801941c <_free_r+0x24>
 801946c:	d902      	bls.n	8019474 <_free_r+0x7c>
 801946e:	230c      	movs	r3, #12
 8019470:	602b      	str	r3, [r5, #0]
 8019472:	e7d3      	b.n	801941c <_free_r+0x24>
 8019474:	6820      	ldr	r0, [r4, #0]
 8019476:	1821      	adds	r1, r4, r0
 8019478:	428a      	cmp	r2, r1
 801947a:	bf04      	itt	eq
 801947c:	6811      	ldreq	r1, [r2, #0]
 801947e:	6852      	ldreq	r2, [r2, #4]
 8019480:	6062      	str	r2, [r4, #4]
 8019482:	bf04      	itt	eq
 8019484:	1809      	addeq	r1, r1, r0
 8019486:	6021      	streq	r1, [r4, #0]
 8019488:	605c      	str	r4, [r3, #4]
 801948a:	e7c7      	b.n	801941c <_free_r+0x24>
 801948c:	bd38      	pop	{r3, r4, r5, pc}
 801948e:	bf00      	nop
 8019490:	24000b90 	.word	0x24000b90

08019494 <_malloc_r>:
 8019494:	b570      	push	{r4, r5, r6, lr}
 8019496:	1ccd      	adds	r5, r1, #3
 8019498:	f025 0503 	bic.w	r5, r5, #3
 801949c:	3508      	adds	r5, #8
 801949e:	2d0c      	cmp	r5, #12
 80194a0:	bf38      	it	cc
 80194a2:	250c      	movcc	r5, #12
 80194a4:	2d00      	cmp	r5, #0
 80194a6:	4606      	mov	r6, r0
 80194a8:	db01      	blt.n	80194ae <_malloc_r+0x1a>
 80194aa:	42a9      	cmp	r1, r5
 80194ac:	d903      	bls.n	80194b6 <_malloc_r+0x22>
 80194ae:	230c      	movs	r3, #12
 80194b0:	6033      	str	r3, [r6, #0]
 80194b2:	2000      	movs	r0, #0
 80194b4:	bd70      	pop	{r4, r5, r6, pc}
 80194b6:	f000 fbcd 	bl	8019c54 <__malloc_lock>
 80194ba:	4a21      	ldr	r2, [pc, #132]	; (8019540 <_malloc_r+0xac>)
 80194bc:	6814      	ldr	r4, [r2, #0]
 80194be:	4621      	mov	r1, r4
 80194c0:	b991      	cbnz	r1, 80194e8 <_malloc_r+0x54>
 80194c2:	4c20      	ldr	r4, [pc, #128]	; (8019544 <_malloc_r+0xb0>)
 80194c4:	6823      	ldr	r3, [r4, #0]
 80194c6:	b91b      	cbnz	r3, 80194d0 <_malloc_r+0x3c>
 80194c8:	4630      	mov	r0, r6
 80194ca:	f000 f8b9 	bl	8019640 <_sbrk_r>
 80194ce:	6020      	str	r0, [r4, #0]
 80194d0:	4629      	mov	r1, r5
 80194d2:	4630      	mov	r0, r6
 80194d4:	f000 f8b4 	bl	8019640 <_sbrk_r>
 80194d8:	1c43      	adds	r3, r0, #1
 80194da:	d124      	bne.n	8019526 <_malloc_r+0x92>
 80194dc:	230c      	movs	r3, #12
 80194de:	6033      	str	r3, [r6, #0]
 80194e0:	4630      	mov	r0, r6
 80194e2:	f000 fbb8 	bl	8019c56 <__malloc_unlock>
 80194e6:	e7e4      	b.n	80194b2 <_malloc_r+0x1e>
 80194e8:	680b      	ldr	r3, [r1, #0]
 80194ea:	1b5b      	subs	r3, r3, r5
 80194ec:	d418      	bmi.n	8019520 <_malloc_r+0x8c>
 80194ee:	2b0b      	cmp	r3, #11
 80194f0:	d90f      	bls.n	8019512 <_malloc_r+0x7e>
 80194f2:	600b      	str	r3, [r1, #0]
 80194f4:	50cd      	str	r5, [r1, r3]
 80194f6:	18cc      	adds	r4, r1, r3
 80194f8:	4630      	mov	r0, r6
 80194fa:	f000 fbac 	bl	8019c56 <__malloc_unlock>
 80194fe:	f104 000b 	add.w	r0, r4, #11
 8019502:	1d23      	adds	r3, r4, #4
 8019504:	f020 0007 	bic.w	r0, r0, #7
 8019508:	1ac3      	subs	r3, r0, r3
 801950a:	d0d3      	beq.n	80194b4 <_malloc_r+0x20>
 801950c:	425a      	negs	r2, r3
 801950e:	50e2      	str	r2, [r4, r3]
 8019510:	e7d0      	b.n	80194b4 <_malloc_r+0x20>
 8019512:	428c      	cmp	r4, r1
 8019514:	684b      	ldr	r3, [r1, #4]
 8019516:	bf16      	itet	ne
 8019518:	6063      	strne	r3, [r4, #4]
 801951a:	6013      	streq	r3, [r2, #0]
 801951c:	460c      	movne	r4, r1
 801951e:	e7eb      	b.n	80194f8 <_malloc_r+0x64>
 8019520:	460c      	mov	r4, r1
 8019522:	6849      	ldr	r1, [r1, #4]
 8019524:	e7cc      	b.n	80194c0 <_malloc_r+0x2c>
 8019526:	1cc4      	adds	r4, r0, #3
 8019528:	f024 0403 	bic.w	r4, r4, #3
 801952c:	42a0      	cmp	r0, r4
 801952e:	d005      	beq.n	801953c <_malloc_r+0xa8>
 8019530:	1a21      	subs	r1, r4, r0
 8019532:	4630      	mov	r0, r6
 8019534:	f000 f884 	bl	8019640 <_sbrk_r>
 8019538:	3001      	adds	r0, #1
 801953a:	d0cf      	beq.n	80194dc <_malloc_r+0x48>
 801953c:	6025      	str	r5, [r4, #0]
 801953e:	e7db      	b.n	80194f8 <_malloc_r+0x64>
 8019540:	24000b90 	.word	0x24000b90
 8019544:	24000b94 	.word	0x24000b94

08019548 <iprintf>:
 8019548:	b40f      	push	{r0, r1, r2, r3}
 801954a:	4b0a      	ldr	r3, [pc, #40]	; (8019574 <iprintf+0x2c>)
 801954c:	b513      	push	{r0, r1, r4, lr}
 801954e:	681c      	ldr	r4, [r3, #0]
 8019550:	b124      	cbz	r4, 801955c <iprintf+0x14>
 8019552:	69a3      	ldr	r3, [r4, #24]
 8019554:	b913      	cbnz	r3, 801955c <iprintf+0x14>
 8019556:	4620      	mov	r0, r4
 8019558:	f000 fa8e 	bl	8019a78 <__sinit>
 801955c:	ab05      	add	r3, sp, #20
 801955e:	9a04      	ldr	r2, [sp, #16]
 8019560:	68a1      	ldr	r1, [r4, #8]
 8019562:	9301      	str	r3, [sp, #4]
 8019564:	4620      	mov	r0, r4
 8019566:	f000 fcf3 	bl	8019f50 <_vfiprintf_r>
 801956a:	b002      	add	sp, #8
 801956c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019570:	b004      	add	sp, #16
 8019572:	4770      	bx	lr
 8019574:	24000178 	.word	0x24000178

08019578 <_puts_r>:
 8019578:	b570      	push	{r4, r5, r6, lr}
 801957a:	460e      	mov	r6, r1
 801957c:	4605      	mov	r5, r0
 801957e:	b118      	cbz	r0, 8019588 <_puts_r+0x10>
 8019580:	6983      	ldr	r3, [r0, #24]
 8019582:	b90b      	cbnz	r3, 8019588 <_puts_r+0x10>
 8019584:	f000 fa78 	bl	8019a78 <__sinit>
 8019588:	69ab      	ldr	r3, [r5, #24]
 801958a:	68ac      	ldr	r4, [r5, #8]
 801958c:	b913      	cbnz	r3, 8019594 <_puts_r+0x1c>
 801958e:	4628      	mov	r0, r5
 8019590:	f000 fa72 	bl	8019a78 <__sinit>
 8019594:	4b23      	ldr	r3, [pc, #140]	; (8019624 <_puts_r+0xac>)
 8019596:	429c      	cmp	r4, r3
 8019598:	d117      	bne.n	80195ca <_puts_r+0x52>
 801959a:	686c      	ldr	r4, [r5, #4]
 801959c:	89a3      	ldrh	r3, [r4, #12]
 801959e:	071b      	lsls	r3, r3, #28
 80195a0:	d51d      	bpl.n	80195de <_puts_r+0x66>
 80195a2:	6923      	ldr	r3, [r4, #16]
 80195a4:	b1db      	cbz	r3, 80195de <_puts_r+0x66>
 80195a6:	3e01      	subs	r6, #1
 80195a8:	68a3      	ldr	r3, [r4, #8]
 80195aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80195ae:	3b01      	subs	r3, #1
 80195b0:	60a3      	str	r3, [r4, #8]
 80195b2:	b9e9      	cbnz	r1, 80195f0 <_puts_r+0x78>
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	da2e      	bge.n	8019616 <_puts_r+0x9e>
 80195b8:	4622      	mov	r2, r4
 80195ba:	210a      	movs	r1, #10
 80195bc:	4628      	mov	r0, r5
 80195be:	f000 f8ab 	bl	8019718 <__swbuf_r>
 80195c2:	3001      	adds	r0, #1
 80195c4:	d011      	beq.n	80195ea <_puts_r+0x72>
 80195c6:	200a      	movs	r0, #10
 80195c8:	e011      	b.n	80195ee <_puts_r+0x76>
 80195ca:	4b17      	ldr	r3, [pc, #92]	; (8019628 <_puts_r+0xb0>)
 80195cc:	429c      	cmp	r4, r3
 80195ce:	d101      	bne.n	80195d4 <_puts_r+0x5c>
 80195d0:	68ac      	ldr	r4, [r5, #8]
 80195d2:	e7e3      	b.n	801959c <_puts_r+0x24>
 80195d4:	4b15      	ldr	r3, [pc, #84]	; (801962c <_puts_r+0xb4>)
 80195d6:	429c      	cmp	r4, r3
 80195d8:	bf08      	it	eq
 80195da:	68ec      	ldreq	r4, [r5, #12]
 80195dc:	e7de      	b.n	801959c <_puts_r+0x24>
 80195de:	4621      	mov	r1, r4
 80195e0:	4628      	mov	r0, r5
 80195e2:	f000 f8eb 	bl	80197bc <__swsetup_r>
 80195e6:	2800      	cmp	r0, #0
 80195e8:	d0dd      	beq.n	80195a6 <_puts_r+0x2e>
 80195ea:	f04f 30ff 	mov.w	r0, #4294967295
 80195ee:	bd70      	pop	{r4, r5, r6, pc}
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	da04      	bge.n	80195fe <_puts_r+0x86>
 80195f4:	69a2      	ldr	r2, [r4, #24]
 80195f6:	429a      	cmp	r2, r3
 80195f8:	dc06      	bgt.n	8019608 <_puts_r+0x90>
 80195fa:	290a      	cmp	r1, #10
 80195fc:	d004      	beq.n	8019608 <_puts_r+0x90>
 80195fe:	6823      	ldr	r3, [r4, #0]
 8019600:	1c5a      	adds	r2, r3, #1
 8019602:	6022      	str	r2, [r4, #0]
 8019604:	7019      	strb	r1, [r3, #0]
 8019606:	e7cf      	b.n	80195a8 <_puts_r+0x30>
 8019608:	4622      	mov	r2, r4
 801960a:	4628      	mov	r0, r5
 801960c:	f000 f884 	bl	8019718 <__swbuf_r>
 8019610:	3001      	adds	r0, #1
 8019612:	d1c9      	bne.n	80195a8 <_puts_r+0x30>
 8019614:	e7e9      	b.n	80195ea <_puts_r+0x72>
 8019616:	6823      	ldr	r3, [r4, #0]
 8019618:	200a      	movs	r0, #10
 801961a:	1c5a      	adds	r2, r3, #1
 801961c:	6022      	str	r2, [r4, #0]
 801961e:	7018      	strb	r0, [r3, #0]
 8019620:	e7e5      	b.n	80195ee <_puts_r+0x76>
 8019622:	bf00      	nop
 8019624:	0801afac 	.word	0x0801afac
 8019628:	0801afcc 	.word	0x0801afcc
 801962c:	0801af8c 	.word	0x0801af8c

08019630 <puts>:
 8019630:	4b02      	ldr	r3, [pc, #8]	; (801963c <puts+0xc>)
 8019632:	4601      	mov	r1, r0
 8019634:	6818      	ldr	r0, [r3, #0]
 8019636:	f7ff bf9f 	b.w	8019578 <_puts_r>
 801963a:	bf00      	nop
 801963c:	24000178 	.word	0x24000178

08019640 <_sbrk_r>:
 8019640:	b538      	push	{r3, r4, r5, lr}
 8019642:	4c06      	ldr	r4, [pc, #24]	; (801965c <_sbrk_r+0x1c>)
 8019644:	2300      	movs	r3, #0
 8019646:	4605      	mov	r5, r0
 8019648:	4608      	mov	r0, r1
 801964a:	6023      	str	r3, [r4, #0]
 801964c:	f7ea fdf8 	bl	8004240 <_sbrk>
 8019650:	1c43      	adds	r3, r0, #1
 8019652:	d102      	bne.n	801965a <_sbrk_r+0x1a>
 8019654:	6823      	ldr	r3, [r4, #0]
 8019656:	b103      	cbz	r3, 801965a <_sbrk_r+0x1a>
 8019658:	602b      	str	r3, [r5, #0]
 801965a:	bd38      	pop	{r3, r4, r5, pc}
 801965c:	2400248c 	.word	0x2400248c

08019660 <sniprintf>:
 8019660:	b40c      	push	{r2, r3}
 8019662:	b530      	push	{r4, r5, lr}
 8019664:	4b17      	ldr	r3, [pc, #92]	; (80196c4 <sniprintf+0x64>)
 8019666:	1e0c      	subs	r4, r1, #0
 8019668:	b09d      	sub	sp, #116	; 0x74
 801966a:	681d      	ldr	r5, [r3, #0]
 801966c:	da08      	bge.n	8019680 <sniprintf+0x20>
 801966e:	238b      	movs	r3, #139	; 0x8b
 8019670:	602b      	str	r3, [r5, #0]
 8019672:	f04f 30ff 	mov.w	r0, #4294967295
 8019676:	b01d      	add	sp, #116	; 0x74
 8019678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801967c:	b002      	add	sp, #8
 801967e:	4770      	bx	lr
 8019680:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019684:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019688:	bf14      	ite	ne
 801968a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801968e:	4623      	moveq	r3, r4
 8019690:	9304      	str	r3, [sp, #16]
 8019692:	9307      	str	r3, [sp, #28]
 8019694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019698:	9002      	str	r0, [sp, #8]
 801969a:	9006      	str	r0, [sp, #24]
 801969c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80196a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80196a2:	ab21      	add	r3, sp, #132	; 0x84
 80196a4:	a902      	add	r1, sp, #8
 80196a6:	4628      	mov	r0, r5
 80196a8:	9301      	str	r3, [sp, #4]
 80196aa:	f000 fb2f 	bl	8019d0c <_svfiprintf_r>
 80196ae:	1c43      	adds	r3, r0, #1
 80196b0:	bfbc      	itt	lt
 80196b2:	238b      	movlt	r3, #139	; 0x8b
 80196b4:	602b      	strlt	r3, [r5, #0]
 80196b6:	2c00      	cmp	r4, #0
 80196b8:	d0dd      	beq.n	8019676 <sniprintf+0x16>
 80196ba:	9b02      	ldr	r3, [sp, #8]
 80196bc:	2200      	movs	r2, #0
 80196be:	701a      	strb	r2, [r3, #0]
 80196c0:	e7d9      	b.n	8019676 <sniprintf+0x16>
 80196c2:	bf00      	nop
 80196c4:	24000178 	.word	0x24000178

080196c8 <siprintf>:
 80196c8:	b40e      	push	{r1, r2, r3}
 80196ca:	b500      	push	{lr}
 80196cc:	b09c      	sub	sp, #112	; 0x70
 80196ce:	ab1d      	add	r3, sp, #116	; 0x74
 80196d0:	9002      	str	r0, [sp, #8]
 80196d2:	9006      	str	r0, [sp, #24]
 80196d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80196d8:	4809      	ldr	r0, [pc, #36]	; (8019700 <siprintf+0x38>)
 80196da:	9107      	str	r1, [sp, #28]
 80196dc:	9104      	str	r1, [sp, #16]
 80196de:	4909      	ldr	r1, [pc, #36]	; (8019704 <siprintf+0x3c>)
 80196e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80196e4:	9105      	str	r1, [sp, #20]
 80196e6:	6800      	ldr	r0, [r0, #0]
 80196e8:	9301      	str	r3, [sp, #4]
 80196ea:	a902      	add	r1, sp, #8
 80196ec:	f000 fb0e 	bl	8019d0c <_svfiprintf_r>
 80196f0:	9b02      	ldr	r3, [sp, #8]
 80196f2:	2200      	movs	r2, #0
 80196f4:	701a      	strb	r2, [r3, #0]
 80196f6:	b01c      	add	sp, #112	; 0x70
 80196f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80196fc:	b003      	add	sp, #12
 80196fe:	4770      	bx	lr
 8019700:	24000178 	.word	0x24000178
 8019704:	ffff0208 	.word	0xffff0208

08019708 <strcpy>:
 8019708:	4603      	mov	r3, r0
 801970a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801970e:	f803 2b01 	strb.w	r2, [r3], #1
 8019712:	2a00      	cmp	r2, #0
 8019714:	d1f9      	bne.n	801970a <strcpy+0x2>
 8019716:	4770      	bx	lr

08019718 <__swbuf_r>:
 8019718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801971a:	460e      	mov	r6, r1
 801971c:	4614      	mov	r4, r2
 801971e:	4605      	mov	r5, r0
 8019720:	b118      	cbz	r0, 801972a <__swbuf_r+0x12>
 8019722:	6983      	ldr	r3, [r0, #24]
 8019724:	b90b      	cbnz	r3, 801972a <__swbuf_r+0x12>
 8019726:	f000 f9a7 	bl	8019a78 <__sinit>
 801972a:	4b21      	ldr	r3, [pc, #132]	; (80197b0 <__swbuf_r+0x98>)
 801972c:	429c      	cmp	r4, r3
 801972e:	d12a      	bne.n	8019786 <__swbuf_r+0x6e>
 8019730:	686c      	ldr	r4, [r5, #4]
 8019732:	69a3      	ldr	r3, [r4, #24]
 8019734:	60a3      	str	r3, [r4, #8]
 8019736:	89a3      	ldrh	r3, [r4, #12]
 8019738:	071a      	lsls	r2, r3, #28
 801973a:	d52e      	bpl.n	801979a <__swbuf_r+0x82>
 801973c:	6923      	ldr	r3, [r4, #16]
 801973e:	b363      	cbz	r3, 801979a <__swbuf_r+0x82>
 8019740:	6923      	ldr	r3, [r4, #16]
 8019742:	6820      	ldr	r0, [r4, #0]
 8019744:	1ac0      	subs	r0, r0, r3
 8019746:	6963      	ldr	r3, [r4, #20]
 8019748:	b2f6      	uxtb	r6, r6
 801974a:	4283      	cmp	r3, r0
 801974c:	4637      	mov	r7, r6
 801974e:	dc04      	bgt.n	801975a <__swbuf_r+0x42>
 8019750:	4621      	mov	r1, r4
 8019752:	4628      	mov	r0, r5
 8019754:	f000 f926 	bl	80199a4 <_fflush_r>
 8019758:	bb28      	cbnz	r0, 80197a6 <__swbuf_r+0x8e>
 801975a:	68a3      	ldr	r3, [r4, #8]
 801975c:	3b01      	subs	r3, #1
 801975e:	60a3      	str	r3, [r4, #8]
 8019760:	6823      	ldr	r3, [r4, #0]
 8019762:	1c5a      	adds	r2, r3, #1
 8019764:	6022      	str	r2, [r4, #0]
 8019766:	701e      	strb	r6, [r3, #0]
 8019768:	6963      	ldr	r3, [r4, #20]
 801976a:	3001      	adds	r0, #1
 801976c:	4283      	cmp	r3, r0
 801976e:	d004      	beq.n	801977a <__swbuf_r+0x62>
 8019770:	89a3      	ldrh	r3, [r4, #12]
 8019772:	07db      	lsls	r3, r3, #31
 8019774:	d519      	bpl.n	80197aa <__swbuf_r+0x92>
 8019776:	2e0a      	cmp	r6, #10
 8019778:	d117      	bne.n	80197aa <__swbuf_r+0x92>
 801977a:	4621      	mov	r1, r4
 801977c:	4628      	mov	r0, r5
 801977e:	f000 f911 	bl	80199a4 <_fflush_r>
 8019782:	b190      	cbz	r0, 80197aa <__swbuf_r+0x92>
 8019784:	e00f      	b.n	80197a6 <__swbuf_r+0x8e>
 8019786:	4b0b      	ldr	r3, [pc, #44]	; (80197b4 <__swbuf_r+0x9c>)
 8019788:	429c      	cmp	r4, r3
 801978a:	d101      	bne.n	8019790 <__swbuf_r+0x78>
 801978c:	68ac      	ldr	r4, [r5, #8]
 801978e:	e7d0      	b.n	8019732 <__swbuf_r+0x1a>
 8019790:	4b09      	ldr	r3, [pc, #36]	; (80197b8 <__swbuf_r+0xa0>)
 8019792:	429c      	cmp	r4, r3
 8019794:	bf08      	it	eq
 8019796:	68ec      	ldreq	r4, [r5, #12]
 8019798:	e7cb      	b.n	8019732 <__swbuf_r+0x1a>
 801979a:	4621      	mov	r1, r4
 801979c:	4628      	mov	r0, r5
 801979e:	f000 f80d 	bl	80197bc <__swsetup_r>
 80197a2:	2800      	cmp	r0, #0
 80197a4:	d0cc      	beq.n	8019740 <__swbuf_r+0x28>
 80197a6:	f04f 37ff 	mov.w	r7, #4294967295
 80197aa:	4638      	mov	r0, r7
 80197ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197ae:	bf00      	nop
 80197b0:	0801afac 	.word	0x0801afac
 80197b4:	0801afcc 	.word	0x0801afcc
 80197b8:	0801af8c 	.word	0x0801af8c

080197bc <__swsetup_r>:
 80197bc:	4b32      	ldr	r3, [pc, #200]	; (8019888 <__swsetup_r+0xcc>)
 80197be:	b570      	push	{r4, r5, r6, lr}
 80197c0:	681d      	ldr	r5, [r3, #0]
 80197c2:	4606      	mov	r6, r0
 80197c4:	460c      	mov	r4, r1
 80197c6:	b125      	cbz	r5, 80197d2 <__swsetup_r+0x16>
 80197c8:	69ab      	ldr	r3, [r5, #24]
 80197ca:	b913      	cbnz	r3, 80197d2 <__swsetup_r+0x16>
 80197cc:	4628      	mov	r0, r5
 80197ce:	f000 f953 	bl	8019a78 <__sinit>
 80197d2:	4b2e      	ldr	r3, [pc, #184]	; (801988c <__swsetup_r+0xd0>)
 80197d4:	429c      	cmp	r4, r3
 80197d6:	d10f      	bne.n	80197f8 <__swsetup_r+0x3c>
 80197d8:	686c      	ldr	r4, [r5, #4]
 80197da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197de:	b29a      	uxth	r2, r3
 80197e0:	0715      	lsls	r5, r2, #28
 80197e2:	d42c      	bmi.n	801983e <__swsetup_r+0x82>
 80197e4:	06d0      	lsls	r0, r2, #27
 80197e6:	d411      	bmi.n	801980c <__swsetup_r+0x50>
 80197e8:	2209      	movs	r2, #9
 80197ea:	6032      	str	r2, [r6, #0]
 80197ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197f0:	81a3      	strh	r3, [r4, #12]
 80197f2:	f04f 30ff 	mov.w	r0, #4294967295
 80197f6:	e03e      	b.n	8019876 <__swsetup_r+0xba>
 80197f8:	4b25      	ldr	r3, [pc, #148]	; (8019890 <__swsetup_r+0xd4>)
 80197fa:	429c      	cmp	r4, r3
 80197fc:	d101      	bne.n	8019802 <__swsetup_r+0x46>
 80197fe:	68ac      	ldr	r4, [r5, #8]
 8019800:	e7eb      	b.n	80197da <__swsetup_r+0x1e>
 8019802:	4b24      	ldr	r3, [pc, #144]	; (8019894 <__swsetup_r+0xd8>)
 8019804:	429c      	cmp	r4, r3
 8019806:	bf08      	it	eq
 8019808:	68ec      	ldreq	r4, [r5, #12]
 801980a:	e7e6      	b.n	80197da <__swsetup_r+0x1e>
 801980c:	0751      	lsls	r1, r2, #29
 801980e:	d512      	bpl.n	8019836 <__swsetup_r+0x7a>
 8019810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019812:	b141      	cbz	r1, 8019826 <__swsetup_r+0x6a>
 8019814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019818:	4299      	cmp	r1, r3
 801981a:	d002      	beq.n	8019822 <__swsetup_r+0x66>
 801981c:	4630      	mov	r0, r6
 801981e:	f7ff fdeb 	bl	80193f8 <_free_r>
 8019822:	2300      	movs	r3, #0
 8019824:	6363      	str	r3, [r4, #52]	; 0x34
 8019826:	89a3      	ldrh	r3, [r4, #12]
 8019828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801982c:	81a3      	strh	r3, [r4, #12]
 801982e:	2300      	movs	r3, #0
 8019830:	6063      	str	r3, [r4, #4]
 8019832:	6923      	ldr	r3, [r4, #16]
 8019834:	6023      	str	r3, [r4, #0]
 8019836:	89a3      	ldrh	r3, [r4, #12]
 8019838:	f043 0308 	orr.w	r3, r3, #8
 801983c:	81a3      	strh	r3, [r4, #12]
 801983e:	6923      	ldr	r3, [r4, #16]
 8019840:	b94b      	cbnz	r3, 8019856 <__swsetup_r+0x9a>
 8019842:	89a3      	ldrh	r3, [r4, #12]
 8019844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801984c:	d003      	beq.n	8019856 <__swsetup_r+0x9a>
 801984e:	4621      	mov	r1, r4
 8019850:	4630      	mov	r0, r6
 8019852:	f000 f9bf 	bl	8019bd4 <__smakebuf_r>
 8019856:	89a2      	ldrh	r2, [r4, #12]
 8019858:	f012 0301 	ands.w	r3, r2, #1
 801985c:	d00c      	beq.n	8019878 <__swsetup_r+0xbc>
 801985e:	2300      	movs	r3, #0
 8019860:	60a3      	str	r3, [r4, #8]
 8019862:	6963      	ldr	r3, [r4, #20]
 8019864:	425b      	negs	r3, r3
 8019866:	61a3      	str	r3, [r4, #24]
 8019868:	6923      	ldr	r3, [r4, #16]
 801986a:	b953      	cbnz	r3, 8019882 <__swsetup_r+0xc6>
 801986c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019870:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8019874:	d1ba      	bne.n	80197ec <__swsetup_r+0x30>
 8019876:	bd70      	pop	{r4, r5, r6, pc}
 8019878:	0792      	lsls	r2, r2, #30
 801987a:	bf58      	it	pl
 801987c:	6963      	ldrpl	r3, [r4, #20]
 801987e:	60a3      	str	r3, [r4, #8]
 8019880:	e7f2      	b.n	8019868 <__swsetup_r+0xac>
 8019882:	2000      	movs	r0, #0
 8019884:	e7f7      	b.n	8019876 <__swsetup_r+0xba>
 8019886:	bf00      	nop
 8019888:	24000178 	.word	0x24000178
 801988c:	0801afac 	.word	0x0801afac
 8019890:	0801afcc 	.word	0x0801afcc
 8019894:	0801af8c 	.word	0x0801af8c

08019898 <__sflush_r>:
 8019898:	898a      	ldrh	r2, [r1, #12]
 801989a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801989e:	4605      	mov	r5, r0
 80198a0:	0710      	lsls	r0, r2, #28
 80198a2:	460c      	mov	r4, r1
 80198a4:	d458      	bmi.n	8019958 <__sflush_r+0xc0>
 80198a6:	684b      	ldr	r3, [r1, #4]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	dc05      	bgt.n	80198b8 <__sflush_r+0x20>
 80198ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	dc02      	bgt.n	80198b8 <__sflush_r+0x20>
 80198b2:	2000      	movs	r0, #0
 80198b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80198ba:	2e00      	cmp	r6, #0
 80198bc:	d0f9      	beq.n	80198b2 <__sflush_r+0x1a>
 80198be:	2300      	movs	r3, #0
 80198c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80198c4:	682f      	ldr	r7, [r5, #0]
 80198c6:	6a21      	ldr	r1, [r4, #32]
 80198c8:	602b      	str	r3, [r5, #0]
 80198ca:	d032      	beq.n	8019932 <__sflush_r+0x9a>
 80198cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80198ce:	89a3      	ldrh	r3, [r4, #12]
 80198d0:	075a      	lsls	r2, r3, #29
 80198d2:	d505      	bpl.n	80198e0 <__sflush_r+0x48>
 80198d4:	6863      	ldr	r3, [r4, #4]
 80198d6:	1ac0      	subs	r0, r0, r3
 80198d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80198da:	b10b      	cbz	r3, 80198e0 <__sflush_r+0x48>
 80198dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80198de:	1ac0      	subs	r0, r0, r3
 80198e0:	2300      	movs	r3, #0
 80198e2:	4602      	mov	r2, r0
 80198e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80198e6:	6a21      	ldr	r1, [r4, #32]
 80198e8:	4628      	mov	r0, r5
 80198ea:	47b0      	blx	r6
 80198ec:	1c43      	adds	r3, r0, #1
 80198ee:	89a3      	ldrh	r3, [r4, #12]
 80198f0:	d106      	bne.n	8019900 <__sflush_r+0x68>
 80198f2:	6829      	ldr	r1, [r5, #0]
 80198f4:	291d      	cmp	r1, #29
 80198f6:	d848      	bhi.n	801998a <__sflush_r+0xf2>
 80198f8:	4a29      	ldr	r2, [pc, #164]	; (80199a0 <__sflush_r+0x108>)
 80198fa:	40ca      	lsrs	r2, r1
 80198fc:	07d6      	lsls	r6, r2, #31
 80198fe:	d544      	bpl.n	801998a <__sflush_r+0xf2>
 8019900:	2200      	movs	r2, #0
 8019902:	6062      	str	r2, [r4, #4]
 8019904:	04d9      	lsls	r1, r3, #19
 8019906:	6922      	ldr	r2, [r4, #16]
 8019908:	6022      	str	r2, [r4, #0]
 801990a:	d504      	bpl.n	8019916 <__sflush_r+0x7e>
 801990c:	1c42      	adds	r2, r0, #1
 801990e:	d101      	bne.n	8019914 <__sflush_r+0x7c>
 8019910:	682b      	ldr	r3, [r5, #0]
 8019912:	b903      	cbnz	r3, 8019916 <__sflush_r+0x7e>
 8019914:	6560      	str	r0, [r4, #84]	; 0x54
 8019916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019918:	602f      	str	r7, [r5, #0]
 801991a:	2900      	cmp	r1, #0
 801991c:	d0c9      	beq.n	80198b2 <__sflush_r+0x1a>
 801991e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019922:	4299      	cmp	r1, r3
 8019924:	d002      	beq.n	801992c <__sflush_r+0x94>
 8019926:	4628      	mov	r0, r5
 8019928:	f7ff fd66 	bl	80193f8 <_free_r>
 801992c:	2000      	movs	r0, #0
 801992e:	6360      	str	r0, [r4, #52]	; 0x34
 8019930:	e7c0      	b.n	80198b4 <__sflush_r+0x1c>
 8019932:	2301      	movs	r3, #1
 8019934:	4628      	mov	r0, r5
 8019936:	47b0      	blx	r6
 8019938:	1c41      	adds	r1, r0, #1
 801993a:	d1c8      	bne.n	80198ce <__sflush_r+0x36>
 801993c:	682b      	ldr	r3, [r5, #0]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d0c5      	beq.n	80198ce <__sflush_r+0x36>
 8019942:	2b1d      	cmp	r3, #29
 8019944:	d001      	beq.n	801994a <__sflush_r+0xb2>
 8019946:	2b16      	cmp	r3, #22
 8019948:	d101      	bne.n	801994e <__sflush_r+0xb6>
 801994a:	602f      	str	r7, [r5, #0]
 801994c:	e7b1      	b.n	80198b2 <__sflush_r+0x1a>
 801994e:	89a3      	ldrh	r3, [r4, #12]
 8019950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019954:	81a3      	strh	r3, [r4, #12]
 8019956:	e7ad      	b.n	80198b4 <__sflush_r+0x1c>
 8019958:	690f      	ldr	r7, [r1, #16]
 801995a:	2f00      	cmp	r7, #0
 801995c:	d0a9      	beq.n	80198b2 <__sflush_r+0x1a>
 801995e:	0793      	lsls	r3, r2, #30
 8019960:	680e      	ldr	r6, [r1, #0]
 8019962:	bf08      	it	eq
 8019964:	694b      	ldreq	r3, [r1, #20]
 8019966:	600f      	str	r7, [r1, #0]
 8019968:	bf18      	it	ne
 801996a:	2300      	movne	r3, #0
 801996c:	eba6 0807 	sub.w	r8, r6, r7
 8019970:	608b      	str	r3, [r1, #8]
 8019972:	f1b8 0f00 	cmp.w	r8, #0
 8019976:	dd9c      	ble.n	80198b2 <__sflush_r+0x1a>
 8019978:	4643      	mov	r3, r8
 801997a:	463a      	mov	r2, r7
 801997c:	6a21      	ldr	r1, [r4, #32]
 801997e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019980:	4628      	mov	r0, r5
 8019982:	47b0      	blx	r6
 8019984:	2800      	cmp	r0, #0
 8019986:	dc06      	bgt.n	8019996 <__sflush_r+0xfe>
 8019988:	89a3      	ldrh	r3, [r4, #12]
 801998a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801998e:	81a3      	strh	r3, [r4, #12]
 8019990:	f04f 30ff 	mov.w	r0, #4294967295
 8019994:	e78e      	b.n	80198b4 <__sflush_r+0x1c>
 8019996:	4407      	add	r7, r0
 8019998:	eba8 0800 	sub.w	r8, r8, r0
 801999c:	e7e9      	b.n	8019972 <__sflush_r+0xda>
 801999e:	bf00      	nop
 80199a0:	20400001 	.word	0x20400001

080199a4 <_fflush_r>:
 80199a4:	b538      	push	{r3, r4, r5, lr}
 80199a6:	690b      	ldr	r3, [r1, #16]
 80199a8:	4605      	mov	r5, r0
 80199aa:	460c      	mov	r4, r1
 80199ac:	b1db      	cbz	r3, 80199e6 <_fflush_r+0x42>
 80199ae:	b118      	cbz	r0, 80199b8 <_fflush_r+0x14>
 80199b0:	6983      	ldr	r3, [r0, #24]
 80199b2:	b90b      	cbnz	r3, 80199b8 <_fflush_r+0x14>
 80199b4:	f000 f860 	bl	8019a78 <__sinit>
 80199b8:	4b0c      	ldr	r3, [pc, #48]	; (80199ec <_fflush_r+0x48>)
 80199ba:	429c      	cmp	r4, r3
 80199bc:	d109      	bne.n	80199d2 <_fflush_r+0x2e>
 80199be:	686c      	ldr	r4, [r5, #4]
 80199c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199c4:	b17b      	cbz	r3, 80199e6 <_fflush_r+0x42>
 80199c6:	4621      	mov	r1, r4
 80199c8:	4628      	mov	r0, r5
 80199ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80199ce:	f7ff bf63 	b.w	8019898 <__sflush_r>
 80199d2:	4b07      	ldr	r3, [pc, #28]	; (80199f0 <_fflush_r+0x4c>)
 80199d4:	429c      	cmp	r4, r3
 80199d6:	d101      	bne.n	80199dc <_fflush_r+0x38>
 80199d8:	68ac      	ldr	r4, [r5, #8]
 80199da:	e7f1      	b.n	80199c0 <_fflush_r+0x1c>
 80199dc:	4b05      	ldr	r3, [pc, #20]	; (80199f4 <_fflush_r+0x50>)
 80199de:	429c      	cmp	r4, r3
 80199e0:	bf08      	it	eq
 80199e2:	68ec      	ldreq	r4, [r5, #12]
 80199e4:	e7ec      	b.n	80199c0 <_fflush_r+0x1c>
 80199e6:	2000      	movs	r0, #0
 80199e8:	bd38      	pop	{r3, r4, r5, pc}
 80199ea:	bf00      	nop
 80199ec:	0801afac 	.word	0x0801afac
 80199f0:	0801afcc 	.word	0x0801afcc
 80199f4:	0801af8c 	.word	0x0801af8c

080199f8 <std>:
 80199f8:	2300      	movs	r3, #0
 80199fa:	b510      	push	{r4, lr}
 80199fc:	4604      	mov	r4, r0
 80199fe:	e9c0 3300 	strd	r3, r3, [r0]
 8019a02:	6083      	str	r3, [r0, #8]
 8019a04:	8181      	strh	r1, [r0, #12]
 8019a06:	6643      	str	r3, [r0, #100]	; 0x64
 8019a08:	81c2      	strh	r2, [r0, #14]
 8019a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019a0e:	6183      	str	r3, [r0, #24]
 8019a10:	4619      	mov	r1, r3
 8019a12:	2208      	movs	r2, #8
 8019a14:	305c      	adds	r0, #92	; 0x5c
 8019a16:	f7ff fce6 	bl	80193e6 <memset>
 8019a1a:	4b05      	ldr	r3, [pc, #20]	; (8019a30 <std+0x38>)
 8019a1c:	6263      	str	r3, [r4, #36]	; 0x24
 8019a1e:	4b05      	ldr	r3, [pc, #20]	; (8019a34 <std+0x3c>)
 8019a20:	62a3      	str	r3, [r4, #40]	; 0x28
 8019a22:	4b05      	ldr	r3, [pc, #20]	; (8019a38 <std+0x40>)
 8019a24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019a26:	4b05      	ldr	r3, [pc, #20]	; (8019a3c <std+0x44>)
 8019a28:	6224      	str	r4, [r4, #32]
 8019a2a:	6323      	str	r3, [r4, #48]	; 0x30
 8019a2c:	bd10      	pop	{r4, pc}
 8019a2e:	bf00      	nop
 8019a30:	0801a48d 	.word	0x0801a48d
 8019a34:	0801a4af 	.word	0x0801a4af
 8019a38:	0801a4e7 	.word	0x0801a4e7
 8019a3c:	0801a50b 	.word	0x0801a50b

08019a40 <_cleanup_r>:
 8019a40:	4901      	ldr	r1, [pc, #4]	; (8019a48 <_cleanup_r+0x8>)
 8019a42:	f000 b885 	b.w	8019b50 <_fwalk_reent>
 8019a46:	bf00      	nop
 8019a48:	080199a5 	.word	0x080199a5

08019a4c <__sfmoreglue>:
 8019a4c:	b570      	push	{r4, r5, r6, lr}
 8019a4e:	1e4a      	subs	r2, r1, #1
 8019a50:	2568      	movs	r5, #104	; 0x68
 8019a52:	4355      	muls	r5, r2
 8019a54:	460e      	mov	r6, r1
 8019a56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019a5a:	f7ff fd1b 	bl	8019494 <_malloc_r>
 8019a5e:	4604      	mov	r4, r0
 8019a60:	b140      	cbz	r0, 8019a74 <__sfmoreglue+0x28>
 8019a62:	2100      	movs	r1, #0
 8019a64:	e9c0 1600 	strd	r1, r6, [r0]
 8019a68:	300c      	adds	r0, #12
 8019a6a:	60a0      	str	r0, [r4, #8]
 8019a6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019a70:	f7ff fcb9 	bl	80193e6 <memset>
 8019a74:	4620      	mov	r0, r4
 8019a76:	bd70      	pop	{r4, r5, r6, pc}

08019a78 <__sinit>:
 8019a78:	6983      	ldr	r3, [r0, #24]
 8019a7a:	b510      	push	{r4, lr}
 8019a7c:	4604      	mov	r4, r0
 8019a7e:	bb33      	cbnz	r3, 8019ace <__sinit+0x56>
 8019a80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019a84:	6503      	str	r3, [r0, #80]	; 0x50
 8019a86:	4b12      	ldr	r3, [pc, #72]	; (8019ad0 <__sinit+0x58>)
 8019a88:	4a12      	ldr	r2, [pc, #72]	; (8019ad4 <__sinit+0x5c>)
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	6282      	str	r2, [r0, #40]	; 0x28
 8019a8e:	4298      	cmp	r0, r3
 8019a90:	bf04      	itt	eq
 8019a92:	2301      	moveq	r3, #1
 8019a94:	6183      	streq	r3, [r0, #24]
 8019a96:	f000 f81f 	bl	8019ad8 <__sfp>
 8019a9a:	6060      	str	r0, [r4, #4]
 8019a9c:	4620      	mov	r0, r4
 8019a9e:	f000 f81b 	bl	8019ad8 <__sfp>
 8019aa2:	60a0      	str	r0, [r4, #8]
 8019aa4:	4620      	mov	r0, r4
 8019aa6:	f000 f817 	bl	8019ad8 <__sfp>
 8019aaa:	2200      	movs	r2, #0
 8019aac:	60e0      	str	r0, [r4, #12]
 8019aae:	2104      	movs	r1, #4
 8019ab0:	6860      	ldr	r0, [r4, #4]
 8019ab2:	f7ff ffa1 	bl	80199f8 <std>
 8019ab6:	2201      	movs	r2, #1
 8019ab8:	2109      	movs	r1, #9
 8019aba:	68a0      	ldr	r0, [r4, #8]
 8019abc:	f7ff ff9c 	bl	80199f8 <std>
 8019ac0:	2202      	movs	r2, #2
 8019ac2:	2112      	movs	r1, #18
 8019ac4:	68e0      	ldr	r0, [r4, #12]
 8019ac6:	f7ff ff97 	bl	80199f8 <std>
 8019aca:	2301      	movs	r3, #1
 8019acc:	61a3      	str	r3, [r4, #24]
 8019ace:	bd10      	pop	{r4, pc}
 8019ad0:	0801af88 	.word	0x0801af88
 8019ad4:	08019a41 	.word	0x08019a41

08019ad8 <__sfp>:
 8019ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ada:	4b1b      	ldr	r3, [pc, #108]	; (8019b48 <__sfp+0x70>)
 8019adc:	681e      	ldr	r6, [r3, #0]
 8019ade:	69b3      	ldr	r3, [r6, #24]
 8019ae0:	4607      	mov	r7, r0
 8019ae2:	b913      	cbnz	r3, 8019aea <__sfp+0x12>
 8019ae4:	4630      	mov	r0, r6
 8019ae6:	f7ff ffc7 	bl	8019a78 <__sinit>
 8019aea:	3648      	adds	r6, #72	; 0x48
 8019aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019af0:	3b01      	subs	r3, #1
 8019af2:	d503      	bpl.n	8019afc <__sfp+0x24>
 8019af4:	6833      	ldr	r3, [r6, #0]
 8019af6:	b133      	cbz	r3, 8019b06 <__sfp+0x2e>
 8019af8:	6836      	ldr	r6, [r6, #0]
 8019afa:	e7f7      	b.n	8019aec <__sfp+0x14>
 8019afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019b00:	b16d      	cbz	r5, 8019b1e <__sfp+0x46>
 8019b02:	3468      	adds	r4, #104	; 0x68
 8019b04:	e7f4      	b.n	8019af0 <__sfp+0x18>
 8019b06:	2104      	movs	r1, #4
 8019b08:	4638      	mov	r0, r7
 8019b0a:	f7ff ff9f 	bl	8019a4c <__sfmoreglue>
 8019b0e:	6030      	str	r0, [r6, #0]
 8019b10:	2800      	cmp	r0, #0
 8019b12:	d1f1      	bne.n	8019af8 <__sfp+0x20>
 8019b14:	230c      	movs	r3, #12
 8019b16:	603b      	str	r3, [r7, #0]
 8019b18:	4604      	mov	r4, r0
 8019b1a:	4620      	mov	r0, r4
 8019b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b1e:	4b0b      	ldr	r3, [pc, #44]	; (8019b4c <__sfp+0x74>)
 8019b20:	6665      	str	r5, [r4, #100]	; 0x64
 8019b22:	e9c4 5500 	strd	r5, r5, [r4]
 8019b26:	60a5      	str	r5, [r4, #8]
 8019b28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019b2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019b30:	2208      	movs	r2, #8
 8019b32:	4629      	mov	r1, r5
 8019b34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019b38:	f7ff fc55 	bl	80193e6 <memset>
 8019b3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019b40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019b44:	e7e9      	b.n	8019b1a <__sfp+0x42>
 8019b46:	bf00      	nop
 8019b48:	0801af88 	.word	0x0801af88
 8019b4c:	ffff0001 	.word	0xffff0001

08019b50 <_fwalk_reent>:
 8019b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b54:	4680      	mov	r8, r0
 8019b56:	4689      	mov	r9, r1
 8019b58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019b5c:	2600      	movs	r6, #0
 8019b5e:	b914      	cbnz	r4, 8019b66 <_fwalk_reent+0x16>
 8019b60:	4630      	mov	r0, r6
 8019b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019b6a:	3f01      	subs	r7, #1
 8019b6c:	d501      	bpl.n	8019b72 <_fwalk_reent+0x22>
 8019b6e:	6824      	ldr	r4, [r4, #0]
 8019b70:	e7f5      	b.n	8019b5e <_fwalk_reent+0xe>
 8019b72:	89ab      	ldrh	r3, [r5, #12]
 8019b74:	2b01      	cmp	r3, #1
 8019b76:	d907      	bls.n	8019b88 <_fwalk_reent+0x38>
 8019b78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019b7c:	3301      	adds	r3, #1
 8019b7e:	d003      	beq.n	8019b88 <_fwalk_reent+0x38>
 8019b80:	4629      	mov	r1, r5
 8019b82:	4640      	mov	r0, r8
 8019b84:	47c8      	blx	r9
 8019b86:	4306      	orrs	r6, r0
 8019b88:	3568      	adds	r5, #104	; 0x68
 8019b8a:	e7ee      	b.n	8019b6a <_fwalk_reent+0x1a>

08019b8c <__swhatbuf_r>:
 8019b8c:	b570      	push	{r4, r5, r6, lr}
 8019b8e:	460e      	mov	r6, r1
 8019b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b94:	2900      	cmp	r1, #0
 8019b96:	b096      	sub	sp, #88	; 0x58
 8019b98:	4614      	mov	r4, r2
 8019b9a:	461d      	mov	r5, r3
 8019b9c:	da07      	bge.n	8019bae <__swhatbuf_r+0x22>
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	602b      	str	r3, [r5, #0]
 8019ba2:	89b3      	ldrh	r3, [r6, #12]
 8019ba4:	061a      	lsls	r2, r3, #24
 8019ba6:	d410      	bmi.n	8019bca <__swhatbuf_r+0x3e>
 8019ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019bac:	e00e      	b.n	8019bcc <__swhatbuf_r+0x40>
 8019bae:	466a      	mov	r2, sp
 8019bb0:	f000 fcd2 	bl	801a558 <_fstat_r>
 8019bb4:	2800      	cmp	r0, #0
 8019bb6:	dbf2      	blt.n	8019b9e <__swhatbuf_r+0x12>
 8019bb8:	9a01      	ldr	r2, [sp, #4]
 8019bba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019bbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019bc2:	425a      	negs	r2, r3
 8019bc4:	415a      	adcs	r2, r3
 8019bc6:	602a      	str	r2, [r5, #0]
 8019bc8:	e7ee      	b.n	8019ba8 <__swhatbuf_r+0x1c>
 8019bca:	2340      	movs	r3, #64	; 0x40
 8019bcc:	2000      	movs	r0, #0
 8019bce:	6023      	str	r3, [r4, #0]
 8019bd0:	b016      	add	sp, #88	; 0x58
 8019bd2:	bd70      	pop	{r4, r5, r6, pc}

08019bd4 <__smakebuf_r>:
 8019bd4:	898b      	ldrh	r3, [r1, #12]
 8019bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019bd8:	079d      	lsls	r5, r3, #30
 8019bda:	4606      	mov	r6, r0
 8019bdc:	460c      	mov	r4, r1
 8019bde:	d507      	bpl.n	8019bf0 <__smakebuf_r+0x1c>
 8019be0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019be4:	6023      	str	r3, [r4, #0]
 8019be6:	6123      	str	r3, [r4, #16]
 8019be8:	2301      	movs	r3, #1
 8019bea:	6163      	str	r3, [r4, #20]
 8019bec:	b002      	add	sp, #8
 8019bee:	bd70      	pop	{r4, r5, r6, pc}
 8019bf0:	ab01      	add	r3, sp, #4
 8019bf2:	466a      	mov	r2, sp
 8019bf4:	f7ff ffca 	bl	8019b8c <__swhatbuf_r>
 8019bf8:	9900      	ldr	r1, [sp, #0]
 8019bfa:	4605      	mov	r5, r0
 8019bfc:	4630      	mov	r0, r6
 8019bfe:	f7ff fc49 	bl	8019494 <_malloc_r>
 8019c02:	b948      	cbnz	r0, 8019c18 <__smakebuf_r+0x44>
 8019c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c08:	059a      	lsls	r2, r3, #22
 8019c0a:	d4ef      	bmi.n	8019bec <__smakebuf_r+0x18>
 8019c0c:	f023 0303 	bic.w	r3, r3, #3
 8019c10:	f043 0302 	orr.w	r3, r3, #2
 8019c14:	81a3      	strh	r3, [r4, #12]
 8019c16:	e7e3      	b.n	8019be0 <__smakebuf_r+0xc>
 8019c18:	4b0d      	ldr	r3, [pc, #52]	; (8019c50 <__smakebuf_r+0x7c>)
 8019c1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8019c1c:	89a3      	ldrh	r3, [r4, #12]
 8019c1e:	6020      	str	r0, [r4, #0]
 8019c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c24:	81a3      	strh	r3, [r4, #12]
 8019c26:	9b00      	ldr	r3, [sp, #0]
 8019c28:	6163      	str	r3, [r4, #20]
 8019c2a:	9b01      	ldr	r3, [sp, #4]
 8019c2c:	6120      	str	r0, [r4, #16]
 8019c2e:	b15b      	cbz	r3, 8019c48 <__smakebuf_r+0x74>
 8019c30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c34:	4630      	mov	r0, r6
 8019c36:	f000 fca1 	bl	801a57c <_isatty_r>
 8019c3a:	b128      	cbz	r0, 8019c48 <__smakebuf_r+0x74>
 8019c3c:	89a3      	ldrh	r3, [r4, #12]
 8019c3e:	f023 0303 	bic.w	r3, r3, #3
 8019c42:	f043 0301 	orr.w	r3, r3, #1
 8019c46:	81a3      	strh	r3, [r4, #12]
 8019c48:	89a3      	ldrh	r3, [r4, #12]
 8019c4a:	431d      	orrs	r5, r3
 8019c4c:	81a5      	strh	r5, [r4, #12]
 8019c4e:	e7cd      	b.n	8019bec <__smakebuf_r+0x18>
 8019c50:	08019a41 	.word	0x08019a41

08019c54 <__malloc_lock>:
 8019c54:	4770      	bx	lr

08019c56 <__malloc_unlock>:
 8019c56:	4770      	bx	lr

08019c58 <__ssputs_r>:
 8019c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c5c:	688e      	ldr	r6, [r1, #8]
 8019c5e:	429e      	cmp	r6, r3
 8019c60:	4682      	mov	sl, r0
 8019c62:	460c      	mov	r4, r1
 8019c64:	4690      	mov	r8, r2
 8019c66:	4699      	mov	r9, r3
 8019c68:	d837      	bhi.n	8019cda <__ssputs_r+0x82>
 8019c6a:	898a      	ldrh	r2, [r1, #12]
 8019c6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019c70:	d031      	beq.n	8019cd6 <__ssputs_r+0x7e>
 8019c72:	6825      	ldr	r5, [r4, #0]
 8019c74:	6909      	ldr	r1, [r1, #16]
 8019c76:	1a6f      	subs	r7, r5, r1
 8019c78:	6965      	ldr	r5, [r4, #20]
 8019c7a:	2302      	movs	r3, #2
 8019c7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019c80:	fb95 f5f3 	sdiv	r5, r5, r3
 8019c84:	f109 0301 	add.w	r3, r9, #1
 8019c88:	443b      	add	r3, r7
 8019c8a:	429d      	cmp	r5, r3
 8019c8c:	bf38      	it	cc
 8019c8e:	461d      	movcc	r5, r3
 8019c90:	0553      	lsls	r3, r2, #21
 8019c92:	d530      	bpl.n	8019cf6 <__ssputs_r+0x9e>
 8019c94:	4629      	mov	r1, r5
 8019c96:	f7ff fbfd 	bl	8019494 <_malloc_r>
 8019c9a:	4606      	mov	r6, r0
 8019c9c:	b950      	cbnz	r0, 8019cb4 <__ssputs_r+0x5c>
 8019c9e:	230c      	movs	r3, #12
 8019ca0:	f8ca 3000 	str.w	r3, [sl]
 8019ca4:	89a3      	ldrh	r3, [r4, #12]
 8019ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019caa:	81a3      	strh	r3, [r4, #12]
 8019cac:	f04f 30ff 	mov.w	r0, #4294967295
 8019cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cb4:	463a      	mov	r2, r7
 8019cb6:	6921      	ldr	r1, [r4, #16]
 8019cb8:	f7ff fb8a 	bl	80193d0 <memcpy>
 8019cbc:	89a3      	ldrh	r3, [r4, #12]
 8019cbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019cc6:	81a3      	strh	r3, [r4, #12]
 8019cc8:	6126      	str	r6, [r4, #16]
 8019cca:	6165      	str	r5, [r4, #20]
 8019ccc:	443e      	add	r6, r7
 8019cce:	1bed      	subs	r5, r5, r7
 8019cd0:	6026      	str	r6, [r4, #0]
 8019cd2:	60a5      	str	r5, [r4, #8]
 8019cd4:	464e      	mov	r6, r9
 8019cd6:	454e      	cmp	r6, r9
 8019cd8:	d900      	bls.n	8019cdc <__ssputs_r+0x84>
 8019cda:	464e      	mov	r6, r9
 8019cdc:	4632      	mov	r2, r6
 8019cde:	4641      	mov	r1, r8
 8019ce0:	6820      	ldr	r0, [r4, #0]
 8019ce2:	f000 fc6d 	bl	801a5c0 <memmove>
 8019ce6:	68a3      	ldr	r3, [r4, #8]
 8019ce8:	1b9b      	subs	r3, r3, r6
 8019cea:	60a3      	str	r3, [r4, #8]
 8019cec:	6823      	ldr	r3, [r4, #0]
 8019cee:	441e      	add	r6, r3
 8019cf0:	6026      	str	r6, [r4, #0]
 8019cf2:	2000      	movs	r0, #0
 8019cf4:	e7dc      	b.n	8019cb0 <__ssputs_r+0x58>
 8019cf6:	462a      	mov	r2, r5
 8019cf8:	f000 fc7b 	bl	801a5f2 <_realloc_r>
 8019cfc:	4606      	mov	r6, r0
 8019cfe:	2800      	cmp	r0, #0
 8019d00:	d1e2      	bne.n	8019cc8 <__ssputs_r+0x70>
 8019d02:	6921      	ldr	r1, [r4, #16]
 8019d04:	4650      	mov	r0, sl
 8019d06:	f7ff fb77 	bl	80193f8 <_free_r>
 8019d0a:	e7c8      	b.n	8019c9e <__ssputs_r+0x46>

08019d0c <_svfiprintf_r>:
 8019d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d10:	461d      	mov	r5, r3
 8019d12:	898b      	ldrh	r3, [r1, #12]
 8019d14:	061f      	lsls	r7, r3, #24
 8019d16:	b09d      	sub	sp, #116	; 0x74
 8019d18:	4680      	mov	r8, r0
 8019d1a:	460c      	mov	r4, r1
 8019d1c:	4616      	mov	r6, r2
 8019d1e:	d50f      	bpl.n	8019d40 <_svfiprintf_r+0x34>
 8019d20:	690b      	ldr	r3, [r1, #16]
 8019d22:	b96b      	cbnz	r3, 8019d40 <_svfiprintf_r+0x34>
 8019d24:	2140      	movs	r1, #64	; 0x40
 8019d26:	f7ff fbb5 	bl	8019494 <_malloc_r>
 8019d2a:	6020      	str	r0, [r4, #0]
 8019d2c:	6120      	str	r0, [r4, #16]
 8019d2e:	b928      	cbnz	r0, 8019d3c <_svfiprintf_r+0x30>
 8019d30:	230c      	movs	r3, #12
 8019d32:	f8c8 3000 	str.w	r3, [r8]
 8019d36:	f04f 30ff 	mov.w	r0, #4294967295
 8019d3a:	e0c8      	b.n	8019ece <_svfiprintf_r+0x1c2>
 8019d3c:	2340      	movs	r3, #64	; 0x40
 8019d3e:	6163      	str	r3, [r4, #20]
 8019d40:	2300      	movs	r3, #0
 8019d42:	9309      	str	r3, [sp, #36]	; 0x24
 8019d44:	2320      	movs	r3, #32
 8019d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d4a:	2330      	movs	r3, #48	; 0x30
 8019d4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d50:	9503      	str	r5, [sp, #12]
 8019d52:	f04f 0b01 	mov.w	fp, #1
 8019d56:	4637      	mov	r7, r6
 8019d58:	463d      	mov	r5, r7
 8019d5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019d5e:	b10b      	cbz	r3, 8019d64 <_svfiprintf_r+0x58>
 8019d60:	2b25      	cmp	r3, #37	; 0x25
 8019d62:	d13e      	bne.n	8019de2 <_svfiprintf_r+0xd6>
 8019d64:	ebb7 0a06 	subs.w	sl, r7, r6
 8019d68:	d00b      	beq.n	8019d82 <_svfiprintf_r+0x76>
 8019d6a:	4653      	mov	r3, sl
 8019d6c:	4632      	mov	r2, r6
 8019d6e:	4621      	mov	r1, r4
 8019d70:	4640      	mov	r0, r8
 8019d72:	f7ff ff71 	bl	8019c58 <__ssputs_r>
 8019d76:	3001      	adds	r0, #1
 8019d78:	f000 80a4 	beq.w	8019ec4 <_svfiprintf_r+0x1b8>
 8019d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d7e:	4453      	add	r3, sl
 8019d80:	9309      	str	r3, [sp, #36]	; 0x24
 8019d82:	783b      	ldrb	r3, [r7, #0]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	f000 809d 	beq.w	8019ec4 <_svfiprintf_r+0x1b8>
 8019d8a:	2300      	movs	r3, #0
 8019d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8019d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d94:	9304      	str	r3, [sp, #16]
 8019d96:	9307      	str	r3, [sp, #28]
 8019d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8019d9e:	462f      	mov	r7, r5
 8019da0:	2205      	movs	r2, #5
 8019da2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019da6:	4850      	ldr	r0, [pc, #320]	; (8019ee8 <_svfiprintf_r+0x1dc>)
 8019da8:	f7e6 faa2 	bl	80002f0 <memchr>
 8019dac:	9b04      	ldr	r3, [sp, #16]
 8019dae:	b9d0      	cbnz	r0, 8019de6 <_svfiprintf_r+0xda>
 8019db0:	06d9      	lsls	r1, r3, #27
 8019db2:	bf44      	itt	mi
 8019db4:	2220      	movmi	r2, #32
 8019db6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019dba:	071a      	lsls	r2, r3, #28
 8019dbc:	bf44      	itt	mi
 8019dbe:	222b      	movmi	r2, #43	; 0x2b
 8019dc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019dc4:	782a      	ldrb	r2, [r5, #0]
 8019dc6:	2a2a      	cmp	r2, #42	; 0x2a
 8019dc8:	d015      	beq.n	8019df6 <_svfiprintf_r+0xea>
 8019dca:	9a07      	ldr	r2, [sp, #28]
 8019dcc:	462f      	mov	r7, r5
 8019dce:	2000      	movs	r0, #0
 8019dd0:	250a      	movs	r5, #10
 8019dd2:	4639      	mov	r1, r7
 8019dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019dd8:	3b30      	subs	r3, #48	; 0x30
 8019dda:	2b09      	cmp	r3, #9
 8019ddc:	d94d      	bls.n	8019e7a <_svfiprintf_r+0x16e>
 8019dde:	b1b8      	cbz	r0, 8019e10 <_svfiprintf_r+0x104>
 8019de0:	e00f      	b.n	8019e02 <_svfiprintf_r+0xf6>
 8019de2:	462f      	mov	r7, r5
 8019de4:	e7b8      	b.n	8019d58 <_svfiprintf_r+0x4c>
 8019de6:	4a40      	ldr	r2, [pc, #256]	; (8019ee8 <_svfiprintf_r+0x1dc>)
 8019de8:	1a80      	subs	r0, r0, r2
 8019dea:	fa0b f000 	lsl.w	r0, fp, r0
 8019dee:	4318      	orrs	r0, r3
 8019df0:	9004      	str	r0, [sp, #16]
 8019df2:	463d      	mov	r5, r7
 8019df4:	e7d3      	b.n	8019d9e <_svfiprintf_r+0x92>
 8019df6:	9a03      	ldr	r2, [sp, #12]
 8019df8:	1d11      	adds	r1, r2, #4
 8019dfa:	6812      	ldr	r2, [r2, #0]
 8019dfc:	9103      	str	r1, [sp, #12]
 8019dfe:	2a00      	cmp	r2, #0
 8019e00:	db01      	blt.n	8019e06 <_svfiprintf_r+0xfa>
 8019e02:	9207      	str	r2, [sp, #28]
 8019e04:	e004      	b.n	8019e10 <_svfiprintf_r+0x104>
 8019e06:	4252      	negs	r2, r2
 8019e08:	f043 0302 	orr.w	r3, r3, #2
 8019e0c:	9207      	str	r2, [sp, #28]
 8019e0e:	9304      	str	r3, [sp, #16]
 8019e10:	783b      	ldrb	r3, [r7, #0]
 8019e12:	2b2e      	cmp	r3, #46	; 0x2e
 8019e14:	d10c      	bne.n	8019e30 <_svfiprintf_r+0x124>
 8019e16:	787b      	ldrb	r3, [r7, #1]
 8019e18:	2b2a      	cmp	r3, #42	; 0x2a
 8019e1a:	d133      	bne.n	8019e84 <_svfiprintf_r+0x178>
 8019e1c:	9b03      	ldr	r3, [sp, #12]
 8019e1e:	1d1a      	adds	r2, r3, #4
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	9203      	str	r2, [sp, #12]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	bfb8      	it	lt
 8019e28:	f04f 33ff 	movlt.w	r3, #4294967295
 8019e2c:	3702      	adds	r7, #2
 8019e2e:	9305      	str	r3, [sp, #20]
 8019e30:	4d2e      	ldr	r5, [pc, #184]	; (8019eec <_svfiprintf_r+0x1e0>)
 8019e32:	7839      	ldrb	r1, [r7, #0]
 8019e34:	2203      	movs	r2, #3
 8019e36:	4628      	mov	r0, r5
 8019e38:	f7e6 fa5a 	bl	80002f0 <memchr>
 8019e3c:	b138      	cbz	r0, 8019e4e <_svfiprintf_r+0x142>
 8019e3e:	2340      	movs	r3, #64	; 0x40
 8019e40:	1b40      	subs	r0, r0, r5
 8019e42:	fa03 f000 	lsl.w	r0, r3, r0
 8019e46:	9b04      	ldr	r3, [sp, #16]
 8019e48:	4303      	orrs	r3, r0
 8019e4a:	3701      	adds	r7, #1
 8019e4c:	9304      	str	r3, [sp, #16]
 8019e4e:	7839      	ldrb	r1, [r7, #0]
 8019e50:	4827      	ldr	r0, [pc, #156]	; (8019ef0 <_svfiprintf_r+0x1e4>)
 8019e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e56:	2206      	movs	r2, #6
 8019e58:	1c7e      	adds	r6, r7, #1
 8019e5a:	f7e6 fa49 	bl	80002f0 <memchr>
 8019e5e:	2800      	cmp	r0, #0
 8019e60:	d038      	beq.n	8019ed4 <_svfiprintf_r+0x1c8>
 8019e62:	4b24      	ldr	r3, [pc, #144]	; (8019ef4 <_svfiprintf_r+0x1e8>)
 8019e64:	bb13      	cbnz	r3, 8019eac <_svfiprintf_r+0x1a0>
 8019e66:	9b03      	ldr	r3, [sp, #12]
 8019e68:	3307      	adds	r3, #7
 8019e6a:	f023 0307 	bic.w	r3, r3, #7
 8019e6e:	3308      	adds	r3, #8
 8019e70:	9303      	str	r3, [sp, #12]
 8019e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e74:	444b      	add	r3, r9
 8019e76:	9309      	str	r3, [sp, #36]	; 0x24
 8019e78:	e76d      	b.n	8019d56 <_svfiprintf_r+0x4a>
 8019e7a:	fb05 3202 	mla	r2, r5, r2, r3
 8019e7e:	2001      	movs	r0, #1
 8019e80:	460f      	mov	r7, r1
 8019e82:	e7a6      	b.n	8019dd2 <_svfiprintf_r+0xc6>
 8019e84:	2300      	movs	r3, #0
 8019e86:	3701      	adds	r7, #1
 8019e88:	9305      	str	r3, [sp, #20]
 8019e8a:	4619      	mov	r1, r3
 8019e8c:	250a      	movs	r5, #10
 8019e8e:	4638      	mov	r0, r7
 8019e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e94:	3a30      	subs	r2, #48	; 0x30
 8019e96:	2a09      	cmp	r2, #9
 8019e98:	d903      	bls.n	8019ea2 <_svfiprintf_r+0x196>
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d0c8      	beq.n	8019e30 <_svfiprintf_r+0x124>
 8019e9e:	9105      	str	r1, [sp, #20]
 8019ea0:	e7c6      	b.n	8019e30 <_svfiprintf_r+0x124>
 8019ea2:	fb05 2101 	mla	r1, r5, r1, r2
 8019ea6:	2301      	movs	r3, #1
 8019ea8:	4607      	mov	r7, r0
 8019eaa:	e7f0      	b.n	8019e8e <_svfiprintf_r+0x182>
 8019eac:	ab03      	add	r3, sp, #12
 8019eae:	9300      	str	r3, [sp, #0]
 8019eb0:	4622      	mov	r2, r4
 8019eb2:	4b11      	ldr	r3, [pc, #68]	; (8019ef8 <_svfiprintf_r+0x1ec>)
 8019eb4:	a904      	add	r1, sp, #16
 8019eb6:	4640      	mov	r0, r8
 8019eb8:	f3af 8000 	nop.w
 8019ebc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019ec0:	4681      	mov	r9, r0
 8019ec2:	d1d6      	bne.n	8019e72 <_svfiprintf_r+0x166>
 8019ec4:	89a3      	ldrh	r3, [r4, #12]
 8019ec6:	065b      	lsls	r3, r3, #25
 8019ec8:	f53f af35 	bmi.w	8019d36 <_svfiprintf_r+0x2a>
 8019ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ece:	b01d      	add	sp, #116	; 0x74
 8019ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ed4:	ab03      	add	r3, sp, #12
 8019ed6:	9300      	str	r3, [sp, #0]
 8019ed8:	4622      	mov	r2, r4
 8019eda:	4b07      	ldr	r3, [pc, #28]	; (8019ef8 <_svfiprintf_r+0x1ec>)
 8019edc:	a904      	add	r1, sp, #16
 8019ede:	4640      	mov	r0, r8
 8019ee0:	f000 f9c2 	bl	801a268 <_printf_i>
 8019ee4:	e7ea      	b.n	8019ebc <_svfiprintf_r+0x1b0>
 8019ee6:	bf00      	nop
 8019ee8:	0801afec 	.word	0x0801afec
 8019eec:	0801aff2 	.word	0x0801aff2
 8019ef0:	0801aff6 	.word	0x0801aff6
 8019ef4:	00000000 	.word	0x00000000
 8019ef8:	08019c59 	.word	0x08019c59

08019efc <__sfputc_r>:
 8019efc:	6893      	ldr	r3, [r2, #8]
 8019efe:	3b01      	subs	r3, #1
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	b410      	push	{r4}
 8019f04:	6093      	str	r3, [r2, #8]
 8019f06:	da08      	bge.n	8019f1a <__sfputc_r+0x1e>
 8019f08:	6994      	ldr	r4, [r2, #24]
 8019f0a:	42a3      	cmp	r3, r4
 8019f0c:	db01      	blt.n	8019f12 <__sfputc_r+0x16>
 8019f0e:	290a      	cmp	r1, #10
 8019f10:	d103      	bne.n	8019f1a <__sfputc_r+0x1e>
 8019f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f16:	f7ff bbff 	b.w	8019718 <__swbuf_r>
 8019f1a:	6813      	ldr	r3, [r2, #0]
 8019f1c:	1c58      	adds	r0, r3, #1
 8019f1e:	6010      	str	r0, [r2, #0]
 8019f20:	7019      	strb	r1, [r3, #0]
 8019f22:	4608      	mov	r0, r1
 8019f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f28:	4770      	bx	lr

08019f2a <__sfputs_r>:
 8019f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f2c:	4606      	mov	r6, r0
 8019f2e:	460f      	mov	r7, r1
 8019f30:	4614      	mov	r4, r2
 8019f32:	18d5      	adds	r5, r2, r3
 8019f34:	42ac      	cmp	r4, r5
 8019f36:	d101      	bne.n	8019f3c <__sfputs_r+0x12>
 8019f38:	2000      	movs	r0, #0
 8019f3a:	e007      	b.n	8019f4c <__sfputs_r+0x22>
 8019f3c:	463a      	mov	r2, r7
 8019f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f42:	4630      	mov	r0, r6
 8019f44:	f7ff ffda 	bl	8019efc <__sfputc_r>
 8019f48:	1c43      	adds	r3, r0, #1
 8019f4a:	d1f3      	bne.n	8019f34 <__sfputs_r+0xa>
 8019f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019f50 <_vfiprintf_r>:
 8019f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f54:	460c      	mov	r4, r1
 8019f56:	b09d      	sub	sp, #116	; 0x74
 8019f58:	4617      	mov	r7, r2
 8019f5a:	461d      	mov	r5, r3
 8019f5c:	4606      	mov	r6, r0
 8019f5e:	b118      	cbz	r0, 8019f68 <_vfiprintf_r+0x18>
 8019f60:	6983      	ldr	r3, [r0, #24]
 8019f62:	b90b      	cbnz	r3, 8019f68 <_vfiprintf_r+0x18>
 8019f64:	f7ff fd88 	bl	8019a78 <__sinit>
 8019f68:	4b7c      	ldr	r3, [pc, #496]	; (801a15c <_vfiprintf_r+0x20c>)
 8019f6a:	429c      	cmp	r4, r3
 8019f6c:	d158      	bne.n	801a020 <_vfiprintf_r+0xd0>
 8019f6e:	6874      	ldr	r4, [r6, #4]
 8019f70:	89a3      	ldrh	r3, [r4, #12]
 8019f72:	0718      	lsls	r0, r3, #28
 8019f74:	d55e      	bpl.n	801a034 <_vfiprintf_r+0xe4>
 8019f76:	6923      	ldr	r3, [r4, #16]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d05b      	beq.n	801a034 <_vfiprintf_r+0xe4>
 8019f7c:	2300      	movs	r3, #0
 8019f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8019f80:	2320      	movs	r3, #32
 8019f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019f86:	2330      	movs	r3, #48	; 0x30
 8019f88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019f8c:	9503      	str	r5, [sp, #12]
 8019f8e:	f04f 0b01 	mov.w	fp, #1
 8019f92:	46b8      	mov	r8, r7
 8019f94:	4645      	mov	r5, r8
 8019f96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019f9a:	b10b      	cbz	r3, 8019fa0 <_vfiprintf_r+0x50>
 8019f9c:	2b25      	cmp	r3, #37	; 0x25
 8019f9e:	d154      	bne.n	801a04a <_vfiprintf_r+0xfa>
 8019fa0:	ebb8 0a07 	subs.w	sl, r8, r7
 8019fa4:	d00b      	beq.n	8019fbe <_vfiprintf_r+0x6e>
 8019fa6:	4653      	mov	r3, sl
 8019fa8:	463a      	mov	r2, r7
 8019faa:	4621      	mov	r1, r4
 8019fac:	4630      	mov	r0, r6
 8019fae:	f7ff ffbc 	bl	8019f2a <__sfputs_r>
 8019fb2:	3001      	adds	r0, #1
 8019fb4:	f000 80c2 	beq.w	801a13c <_vfiprintf_r+0x1ec>
 8019fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fba:	4453      	add	r3, sl
 8019fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8019fbe:	f898 3000 	ldrb.w	r3, [r8]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	f000 80ba 	beq.w	801a13c <_vfiprintf_r+0x1ec>
 8019fc8:	2300      	movs	r3, #0
 8019fca:	f04f 32ff 	mov.w	r2, #4294967295
 8019fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019fd2:	9304      	str	r3, [sp, #16]
 8019fd4:	9307      	str	r3, [sp, #28]
 8019fd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019fda:	931a      	str	r3, [sp, #104]	; 0x68
 8019fdc:	46a8      	mov	r8, r5
 8019fde:	2205      	movs	r2, #5
 8019fe0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019fe4:	485e      	ldr	r0, [pc, #376]	; (801a160 <_vfiprintf_r+0x210>)
 8019fe6:	f7e6 f983 	bl	80002f0 <memchr>
 8019fea:	9b04      	ldr	r3, [sp, #16]
 8019fec:	bb78      	cbnz	r0, 801a04e <_vfiprintf_r+0xfe>
 8019fee:	06d9      	lsls	r1, r3, #27
 8019ff0:	bf44      	itt	mi
 8019ff2:	2220      	movmi	r2, #32
 8019ff4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019ff8:	071a      	lsls	r2, r3, #28
 8019ffa:	bf44      	itt	mi
 8019ffc:	222b      	movmi	r2, #43	; 0x2b
 8019ffe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a002:	782a      	ldrb	r2, [r5, #0]
 801a004:	2a2a      	cmp	r2, #42	; 0x2a
 801a006:	d02a      	beq.n	801a05e <_vfiprintf_r+0x10e>
 801a008:	9a07      	ldr	r2, [sp, #28]
 801a00a:	46a8      	mov	r8, r5
 801a00c:	2000      	movs	r0, #0
 801a00e:	250a      	movs	r5, #10
 801a010:	4641      	mov	r1, r8
 801a012:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a016:	3b30      	subs	r3, #48	; 0x30
 801a018:	2b09      	cmp	r3, #9
 801a01a:	d969      	bls.n	801a0f0 <_vfiprintf_r+0x1a0>
 801a01c:	b360      	cbz	r0, 801a078 <_vfiprintf_r+0x128>
 801a01e:	e024      	b.n	801a06a <_vfiprintf_r+0x11a>
 801a020:	4b50      	ldr	r3, [pc, #320]	; (801a164 <_vfiprintf_r+0x214>)
 801a022:	429c      	cmp	r4, r3
 801a024:	d101      	bne.n	801a02a <_vfiprintf_r+0xda>
 801a026:	68b4      	ldr	r4, [r6, #8]
 801a028:	e7a2      	b.n	8019f70 <_vfiprintf_r+0x20>
 801a02a:	4b4f      	ldr	r3, [pc, #316]	; (801a168 <_vfiprintf_r+0x218>)
 801a02c:	429c      	cmp	r4, r3
 801a02e:	bf08      	it	eq
 801a030:	68f4      	ldreq	r4, [r6, #12]
 801a032:	e79d      	b.n	8019f70 <_vfiprintf_r+0x20>
 801a034:	4621      	mov	r1, r4
 801a036:	4630      	mov	r0, r6
 801a038:	f7ff fbc0 	bl	80197bc <__swsetup_r>
 801a03c:	2800      	cmp	r0, #0
 801a03e:	d09d      	beq.n	8019f7c <_vfiprintf_r+0x2c>
 801a040:	f04f 30ff 	mov.w	r0, #4294967295
 801a044:	b01d      	add	sp, #116	; 0x74
 801a046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a04a:	46a8      	mov	r8, r5
 801a04c:	e7a2      	b.n	8019f94 <_vfiprintf_r+0x44>
 801a04e:	4a44      	ldr	r2, [pc, #272]	; (801a160 <_vfiprintf_r+0x210>)
 801a050:	1a80      	subs	r0, r0, r2
 801a052:	fa0b f000 	lsl.w	r0, fp, r0
 801a056:	4318      	orrs	r0, r3
 801a058:	9004      	str	r0, [sp, #16]
 801a05a:	4645      	mov	r5, r8
 801a05c:	e7be      	b.n	8019fdc <_vfiprintf_r+0x8c>
 801a05e:	9a03      	ldr	r2, [sp, #12]
 801a060:	1d11      	adds	r1, r2, #4
 801a062:	6812      	ldr	r2, [r2, #0]
 801a064:	9103      	str	r1, [sp, #12]
 801a066:	2a00      	cmp	r2, #0
 801a068:	db01      	blt.n	801a06e <_vfiprintf_r+0x11e>
 801a06a:	9207      	str	r2, [sp, #28]
 801a06c:	e004      	b.n	801a078 <_vfiprintf_r+0x128>
 801a06e:	4252      	negs	r2, r2
 801a070:	f043 0302 	orr.w	r3, r3, #2
 801a074:	9207      	str	r2, [sp, #28]
 801a076:	9304      	str	r3, [sp, #16]
 801a078:	f898 3000 	ldrb.w	r3, [r8]
 801a07c:	2b2e      	cmp	r3, #46	; 0x2e
 801a07e:	d10e      	bne.n	801a09e <_vfiprintf_r+0x14e>
 801a080:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a084:	2b2a      	cmp	r3, #42	; 0x2a
 801a086:	d138      	bne.n	801a0fa <_vfiprintf_r+0x1aa>
 801a088:	9b03      	ldr	r3, [sp, #12]
 801a08a:	1d1a      	adds	r2, r3, #4
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	9203      	str	r2, [sp, #12]
 801a090:	2b00      	cmp	r3, #0
 801a092:	bfb8      	it	lt
 801a094:	f04f 33ff 	movlt.w	r3, #4294967295
 801a098:	f108 0802 	add.w	r8, r8, #2
 801a09c:	9305      	str	r3, [sp, #20]
 801a09e:	4d33      	ldr	r5, [pc, #204]	; (801a16c <_vfiprintf_r+0x21c>)
 801a0a0:	f898 1000 	ldrb.w	r1, [r8]
 801a0a4:	2203      	movs	r2, #3
 801a0a6:	4628      	mov	r0, r5
 801a0a8:	f7e6 f922 	bl	80002f0 <memchr>
 801a0ac:	b140      	cbz	r0, 801a0c0 <_vfiprintf_r+0x170>
 801a0ae:	2340      	movs	r3, #64	; 0x40
 801a0b0:	1b40      	subs	r0, r0, r5
 801a0b2:	fa03 f000 	lsl.w	r0, r3, r0
 801a0b6:	9b04      	ldr	r3, [sp, #16]
 801a0b8:	4303      	orrs	r3, r0
 801a0ba:	f108 0801 	add.w	r8, r8, #1
 801a0be:	9304      	str	r3, [sp, #16]
 801a0c0:	f898 1000 	ldrb.w	r1, [r8]
 801a0c4:	482a      	ldr	r0, [pc, #168]	; (801a170 <_vfiprintf_r+0x220>)
 801a0c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a0ca:	2206      	movs	r2, #6
 801a0cc:	f108 0701 	add.w	r7, r8, #1
 801a0d0:	f7e6 f90e 	bl	80002f0 <memchr>
 801a0d4:	2800      	cmp	r0, #0
 801a0d6:	d037      	beq.n	801a148 <_vfiprintf_r+0x1f8>
 801a0d8:	4b26      	ldr	r3, [pc, #152]	; (801a174 <_vfiprintf_r+0x224>)
 801a0da:	bb1b      	cbnz	r3, 801a124 <_vfiprintf_r+0x1d4>
 801a0dc:	9b03      	ldr	r3, [sp, #12]
 801a0de:	3307      	adds	r3, #7
 801a0e0:	f023 0307 	bic.w	r3, r3, #7
 801a0e4:	3308      	adds	r3, #8
 801a0e6:	9303      	str	r3, [sp, #12]
 801a0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0ea:	444b      	add	r3, r9
 801a0ec:	9309      	str	r3, [sp, #36]	; 0x24
 801a0ee:	e750      	b.n	8019f92 <_vfiprintf_r+0x42>
 801a0f0:	fb05 3202 	mla	r2, r5, r2, r3
 801a0f4:	2001      	movs	r0, #1
 801a0f6:	4688      	mov	r8, r1
 801a0f8:	e78a      	b.n	801a010 <_vfiprintf_r+0xc0>
 801a0fa:	2300      	movs	r3, #0
 801a0fc:	f108 0801 	add.w	r8, r8, #1
 801a100:	9305      	str	r3, [sp, #20]
 801a102:	4619      	mov	r1, r3
 801a104:	250a      	movs	r5, #10
 801a106:	4640      	mov	r0, r8
 801a108:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a10c:	3a30      	subs	r2, #48	; 0x30
 801a10e:	2a09      	cmp	r2, #9
 801a110:	d903      	bls.n	801a11a <_vfiprintf_r+0x1ca>
 801a112:	2b00      	cmp	r3, #0
 801a114:	d0c3      	beq.n	801a09e <_vfiprintf_r+0x14e>
 801a116:	9105      	str	r1, [sp, #20]
 801a118:	e7c1      	b.n	801a09e <_vfiprintf_r+0x14e>
 801a11a:	fb05 2101 	mla	r1, r5, r1, r2
 801a11e:	2301      	movs	r3, #1
 801a120:	4680      	mov	r8, r0
 801a122:	e7f0      	b.n	801a106 <_vfiprintf_r+0x1b6>
 801a124:	ab03      	add	r3, sp, #12
 801a126:	9300      	str	r3, [sp, #0]
 801a128:	4622      	mov	r2, r4
 801a12a:	4b13      	ldr	r3, [pc, #76]	; (801a178 <_vfiprintf_r+0x228>)
 801a12c:	a904      	add	r1, sp, #16
 801a12e:	4630      	mov	r0, r6
 801a130:	f3af 8000 	nop.w
 801a134:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a138:	4681      	mov	r9, r0
 801a13a:	d1d5      	bne.n	801a0e8 <_vfiprintf_r+0x198>
 801a13c:	89a3      	ldrh	r3, [r4, #12]
 801a13e:	065b      	lsls	r3, r3, #25
 801a140:	f53f af7e 	bmi.w	801a040 <_vfiprintf_r+0xf0>
 801a144:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a146:	e77d      	b.n	801a044 <_vfiprintf_r+0xf4>
 801a148:	ab03      	add	r3, sp, #12
 801a14a:	9300      	str	r3, [sp, #0]
 801a14c:	4622      	mov	r2, r4
 801a14e:	4b0a      	ldr	r3, [pc, #40]	; (801a178 <_vfiprintf_r+0x228>)
 801a150:	a904      	add	r1, sp, #16
 801a152:	4630      	mov	r0, r6
 801a154:	f000 f888 	bl	801a268 <_printf_i>
 801a158:	e7ec      	b.n	801a134 <_vfiprintf_r+0x1e4>
 801a15a:	bf00      	nop
 801a15c:	0801afac 	.word	0x0801afac
 801a160:	0801afec 	.word	0x0801afec
 801a164:	0801afcc 	.word	0x0801afcc
 801a168:	0801af8c 	.word	0x0801af8c
 801a16c:	0801aff2 	.word	0x0801aff2
 801a170:	0801aff6 	.word	0x0801aff6
 801a174:	00000000 	.word	0x00000000
 801a178:	08019f2b 	.word	0x08019f2b

0801a17c <_printf_common>:
 801a17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a180:	4691      	mov	r9, r2
 801a182:	461f      	mov	r7, r3
 801a184:	688a      	ldr	r2, [r1, #8]
 801a186:	690b      	ldr	r3, [r1, #16]
 801a188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a18c:	4293      	cmp	r3, r2
 801a18e:	bfb8      	it	lt
 801a190:	4613      	movlt	r3, r2
 801a192:	f8c9 3000 	str.w	r3, [r9]
 801a196:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a19a:	4606      	mov	r6, r0
 801a19c:	460c      	mov	r4, r1
 801a19e:	b112      	cbz	r2, 801a1a6 <_printf_common+0x2a>
 801a1a0:	3301      	adds	r3, #1
 801a1a2:	f8c9 3000 	str.w	r3, [r9]
 801a1a6:	6823      	ldr	r3, [r4, #0]
 801a1a8:	0699      	lsls	r1, r3, #26
 801a1aa:	bf42      	ittt	mi
 801a1ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a1b0:	3302      	addmi	r3, #2
 801a1b2:	f8c9 3000 	strmi.w	r3, [r9]
 801a1b6:	6825      	ldr	r5, [r4, #0]
 801a1b8:	f015 0506 	ands.w	r5, r5, #6
 801a1bc:	d107      	bne.n	801a1ce <_printf_common+0x52>
 801a1be:	f104 0a19 	add.w	sl, r4, #25
 801a1c2:	68e3      	ldr	r3, [r4, #12]
 801a1c4:	f8d9 2000 	ldr.w	r2, [r9]
 801a1c8:	1a9b      	subs	r3, r3, r2
 801a1ca:	42ab      	cmp	r3, r5
 801a1cc:	dc28      	bgt.n	801a220 <_printf_common+0xa4>
 801a1ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a1d2:	6822      	ldr	r2, [r4, #0]
 801a1d4:	3300      	adds	r3, #0
 801a1d6:	bf18      	it	ne
 801a1d8:	2301      	movne	r3, #1
 801a1da:	0692      	lsls	r2, r2, #26
 801a1dc:	d42d      	bmi.n	801a23a <_printf_common+0xbe>
 801a1de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a1e2:	4639      	mov	r1, r7
 801a1e4:	4630      	mov	r0, r6
 801a1e6:	47c0      	blx	r8
 801a1e8:	3001      	adds	r0, #1
 801a1ea:	d020      	beq.n	801a22e <_printf_common+0xb2>
 801a1ec:	6823      	ldr	r3, [r4, #0]
 801a1ee:	68e5      	ldr	r5, [r4, #12]
 801a1f0:	f8d9 2000 	ldr.w	r2, [r9]
 801a1f4:	f003 0306 	and.w	r3, r3, #6
 801a1f8:	2b04      	cmp	r3, #4
 801a1fa:	bf08      	it	eq
 801a1fc:	1aad      	subeq	r5, r5, r2
 801a1fe:	68a3      	ldr	r3, [r4, #8]
 801a200:	6922      	ldr	r2, [r4, #16]
 801a202:	bf0c      	ite	eq
 801a204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a208:	2500      	movne	r5, #0
 801a20a:	4293      	cmp	r3, r2
 801a20c:	bfc4      	itt	gt
 801a20e:	1a9b      	subgt	r3, r3, r2
 801a210:	18ed      	addgt	r5, r5, r3
 801a212:	f04f 0900 	mov.w	r9, #0
 801a216:	341a      	adds	r4, #26
 801a218:	454d      	cmp	r5, r9
 801a21a:	d11a      	bne.n	801a252 <_printf_common+0xd6>
 801a21c:	2000      	movs	r0, #0
 801a21e:	e008      	b.n	801a232 <_printf_common+0xb6>
 801a220:	2301      	movs	r3, #1
 801a222:	4652      	mov	r2, sl
 801a224:	4639      	mov	r1, r7
 801a226:	4630      	mov	r0, r6
 801a228:	47c0      	blx	r8
 801a22a:	3001      	adds	r0, #1
 801a22c:	d103      	bne.n	801a236 <_printf_common+0xba>
 801a22e:	f04f 30ff 	mov.w	r0, #4294967295
 801a232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a236:	3501      	adds	r5, #1
 801a238:	e7c3      	b.n	801a1c2 <_printf_common+0x46>
 801a23a:	18e1      	adds	r1, r4, r3
 801a23c:	1c5a      	adds	r2, r3, #1
 801a23e:	2030      	movs	r0, #48	; 0x30
 801a240:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a244:	4422      	add	r2, r4
 801a246:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a24a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a24e:	3302      	adds	r3, #2
 801a250:	e7c5      	b.n	801a1de <_printf_common+0x62>
 801a252:	2301      	movs	r3, #1
 801a254:	4622      	mov	r2, r4
 801a256:	4639      	mov	r1, r7
 801a258:	4630      	mov	r0, r6
 801a25a:	47c0      	blx	r8
 801a25c:	3001      	adds	r0, #1
 801a25e:	d0e6      	beq.n	801a22e <_printf_common+0xb2>
 801a260:	f109 0901 	add.w	r9, r9, #1
 801a264:	e7d8      	b.n	801a218 <_printf_common+0x9c>
	...

0801a268 <_printf_i>:
 801a268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a26c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a270:	460c      	mov	r4, r1
 801a272:	7e09      	ldrb	r1, [r1, #24]
 801a274:	b085      	sub	sp, #20
 801a276:	296e      	cmp	r1, #110	; 0x6e
 801a278:	4617      	mov	r7, r2
 801a27a:	4606      	mov	r6, r0
 801a27c:	4698      	mov	r8, r3
 801a27e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a280:	f000 80b3 	beq.w	801a3ea <_printf_i+0x182>
 801a284:	d822      	bhi.n	801a2cc <_printf_i+0x64>
 801a286:	2963      	cmp	r1, #99	; 0x63
 801a288:	d036      	beq.n	801a2f8 <_printf_i+0x90>
 801a28a:	d80a      	bhi.n	801a2a2 <_printf_i+0x3a>
 801a28c:	2900      	cmp	r1, #0
 801a28e:	f000 80b9 	beq.w	801a404 <_printf_i+0x19c>
 801a292:	2958      	cmp	r1, #88	; 0x58
 801a294:	f000 8083 	beq.w	801a39e <_printf_i+0x136>
 801a298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a29c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a2a0:	e032      	b.n	801a308 <_printf_i+0xa0>
 801a2a2:	2964      	cmp	r1, #100	; 0x64
 801a2a4:	d001      	beq.n	801a2aa <_printf_i+0x42>
 801a2a6:	2969      	cmp	r1, #105	; 0x69
 801a2a8:	d1f6      	bne.n	801a298 <_printf_i+0x30>
 801a2aa:	6820      	ldr	r0, [r4, #0]
 801a2ac:	6813      	ldr	r3, [r2, #0]
 801a2ae:	0605      	lsls	r5, r0, #24
 801a2b0:	f103 0104 	add.w	r1, r3, #4
 801a2b4:	d52a      	bpl.n	801a30c <_printf_i+0xa4>
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	6011      	str	r1, [r2, #0]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	da03      	bge.n	801a2c6 <_printf_i+0x5e>
 801a2be:	222d      	movs	r2, #45	; 0x2d
 801a2c0:	425b      	negs	r3, r3
 801a2c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a2c6:	486f      	ldr	r0, [pc, #444]	; (801a484 <_printf_i+0x21c>)
 801a2c8:	220a      	movs	r2, #10
 801a2ca:	e039      	b.n	801a340 <_printf_i+0xd8>
 801a2cc:	2973      	cmp	r1, #115	; 0x73
 801a2ce:	f000 809d 	beq.w	801a40c <_printf_i+0x1a4>
 801a2d2:	d808      	bhi.n	801a2e6 <_printf_i+0x7e>
 801a2d4:	296f      	cmp	r1, #111	; 0x6f
 801a2d6:	d020      	beq.n	801a31a <_printf_i+0xb2>
 801a2d8:	2970      	cmp	r1, #112	; 0x70
 801a2da:	d1dd      	bne.n	801a298 <_printf_i+0x30>
 801a2dc:	6823      	ldr	r3, [r4, #0]
 801a2de:	f043 0320 	orr.w	r3, r3, #32
 801a2e2:	6023      	str	r3, [r4, #0]
 801a2e4:	e003      	b.n	801a2ee <_printf_i+0x86>
 801a2e6:	2975      	cmp	r1, #117	; 0x75
 801a2e8:	d017      	beq.n	801a31a <_printf_i+0xb2>
 801a2ea:	2978      	cmp	r1, #120	; 0x78
 801a2ec:	d1d4      	bne.n	801a298 <_printf_i+0x30>
 801a2ee:	2378      	movs	r3, #120	; 0x78
 801a2f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a2f4:	4864      	ldr	r0, [pc, #400]	; (801a488 <_printf_i+0x220>)
 801a2f6:	e055      	b.n	801a3a4 <_printf_i+0x13c>
 801a2f8:	6813      	ldr	r3, [r2, #0]
 801a2fa:	1d19      	adds	r1, r3, #4
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	6011      	str	r1, [r2, #0]
 801a300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a308:	2301      	movs	r3, #1
 801a30a:	e08c      	b.n	801a426 <_printf_i+0x1be>
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	6011      	str	r1, [r2, #0]
 801a310:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a314:	bf18      	it	ne
 801a316:	b21b      	sxthne	r3, r3
 801a318:	e7cf      	b.n	801a2ba <_printf_i+0x52>
 801a31a:	6813      	ldr	r3, [r2, #0]
 801a31c:	6825      	ldr	r5, [r4, #0]
 801a31e:	1d18      	adds	r0, r3, #4
 801a320:	6010      	str	r0, [r2, #0]
 801a322:	0628      	lsls	r0, r5, #24
 801a324:	d501      	bpl.n	801a32a <_printf_i+0xc2>
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	e002      	b.n	801a330 <_printf_i+0xc8>
 801a32a:	0668      	lsls	r0, r5, #25
 801a32c:	d5fb      	bpl.n	801a326 <_printf_i+0xbe>
 801a32e:	881b      	ldrh	r3, [r3, #0]
 801a330:	4854      	ldr	r0, [pc, #336]	; (801a484 <_printf_i+0x21c>)
 801a332:	296f      	cmp	r1, #111	; 0x6f
 801a334:	bf14      	ite	ne
 801a336:	220a      	movne	r2, #10
 801a338:	2208      	moveq	r2, #8
 801a33a:	2100      	movs	r1, #0
 801a33c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a340:	6865      	ldr	r5, [r4, #4]
 801a342:	60a5      	str	r5, [r4, #8]
 801a344:	2d00      	cmp	r5, #0
 801a346:	f2c0 8095 	blt.w	801a474 <_printf_i+0x20c>
 801a34a:	6821      	ldr	r1, [r4, #0]
 801a34c:	f021 0104 	bic.w	r1, r1, #4
 801a350:	6021      	str	r1, [r4, #0]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d13d      	bne.n	801a3d2 <_printf_i+0x16a>
 801a356:	2d00      	cmp	r5, #0
 801a358:	f040 808e 	bne.w	801a478 <_printf_i+0x210>
 801a35c:	4665      	mov	r5, ip
 801a35e:	2a08      	cmp	r2, #8
 801a360:	d10b      	bne.n	801a37a <_printf_i+0x112>
 801a362:	6823      	ldr	r3, [r4, #0]
 801a364:	07db      	lsls	r3, r3, #31
 801a366:	d508      	bpl.n	801a37a <_printf_i+0x112>
 801a368:	6923      	ldr	r3, [r4, #16]
 801a36a:	6862      	ldr	r2, [r4, #4]
 801a36c:	429a      	cmp	r2, r3
 801a36e:	bfde      	ittt	le
 801a370:	2330      	movle	r3, #48	; 0x30
 801a372:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a376:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a37a:	ebac 0305 	sub.w	r3, ip, r5
 801a37e:	6123      	str	r3, [r4, #16]
 801a380:	f8cd 8000 	str.w	r8, [sp]
 801a384:	463b      	mov	r3, r7
 801a386:	aa03      	add	r2, sp, #12
 801a388:	4621      	mov	r1, r4
 801a38a:	4630      	mov	r0, r6
 801a38c:	f7ff fef6 	bl	801a17c <_printf_common>
 801a390:	3001      	adds	r0, #1
 801a392:	d14d      	bne.n	801a430 <_printf_i+0x1c8>
 801a394:	f04f 30ff 	mov.w	r0, #4294967295
 801a398:	b005      	add	sp, #20
 801a39a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a39e:	4839      	ldr	r0, [pc, #228]	; (801a484 <_printf_i+0x21c>)
 801a3a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a3a4:	6813      	ldr	r3, [r2, #0]
 801a3a6:	6821      	ldr	r1, [r4, #0]
 801a3a8:	1d1d      	adds	r5, r3, #4
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	6015      	str	r5, [r2, #0]
 801a3ae:	060a      	lsls	r2, r1, #24
 801a3b0:	d50b      	bpl.n	801a3ca <_printf_i+0x162>
 801a3b2:	07ca      	lsls	r2, r1, #31
 801a3b4:	bf44      	itt	mi
 801a3b6:	f041 0120 	orrmi.w	r1, r1, #32
 801a3ba:	6021      	strmi	r1, [r4, #0]
 801a3bc:	b91b      	cbnz	r3, 801a3c6 <_printf_i+0x15e>
 801a3be:	6822      	ldr	r2, [r4, #0]
 801a3c0:	f022 0220 	bic.w	r2, r2, #32
 801a3c4:	6022      	str	r2, [r4, #0]
 801a3c6:	2210      	movs	r2, #16
 801a3c8:	e7b7      	b.n	801a33a <_printf_i+0xd2>
 801a3ca:	064d      	lsls	r5, r1, #25
 801a3cc:	bf48      	it	mi
 801a3ce:	b29b      	uxthmi	r3, r3
 801a3d0:	e7ef      	b.n	801a3b2 <_printf_i+0x14a>
 801a3d2:	4665      	mov	r5, ip
 801a3d4:	fbb3 f1f2 	udiv	r1, r3, r2
 801a3d8:	fb02 3311 	mls	r3, r2, r1, r3
 801a3dc:	5cc3      	ldrb	r3, [r0, r3]
 801a3de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a3e2:	460b      	mov	r3, r1
 801a3e4:	2900      	cmp	r1, #0
 801a3e6:	d1f5      	bne.n	801a3d4 <_printf_i+0x16c>
 801a3e8:	e7b9      	b.n	801a35e <_printf_i+0xf6>
 801a3ea:	6813      	ldr	r3, [r2, #0]
 801a3ec:	6825      	ldr	r5, [r4, #0]
 801a3ee:	6961      	ldr	r1, [r4, #20]
 801a3f0:	1d18      	adds	r0, r3, #4
 801a3f2:	6010      	str	r0, [r2, #0]
 801a3f4:	0628      	lsls	r0, r5, #24
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	d501      	bpl.n	801a3fe <_printf_i+0x196>
 801a3fa:	6019      	str	r1, [r3, #0]
 801a3fc:	e002      	b.n	801a404 <_printf_i+0x19c>
 801a3fe:	066a      	lsls	r2, r5, #25
 801a400:	d5fb      	bpl.n	801a3fa <_printf_i+0x192>
 801a402:	8019      	strh	r1, [r3, #0]
 801a404:	2300      	movs	r3, #0
 801a406:	6123      	str	r3, [r4, #16]
 801a408:	4665      	mov	r5, ip
 801a40a:	e7b9      	b.n	801a380 <_printf_i+0x118>
 801a40c:	6813      	ldr	r3, [r2, #0]
 801a40e:	1d19      	adds	r1, r3, #4
 801a410:	6011      	str	r1, [r2, #0]
 801a412:	681d      	ldr	r5, [r3, #0]
 801a414:	6862      	ldr	r2, [r4, #4]
 801a416:	2100      	movs	r1, #0
 801a418:	4628      	mov	r0, r5
 801a41a:	f7e5 ff69 	bl	80002f0 <memchr>
 801a41e:	b108      	cbz	r0, 801a424 <_printf_i+0x1bc>
 801a420:	1b40      	subs	r0, r0, r5
 801a422:	6060      	str	r0, [r4, #4]
 801a424:	6863      	ldr	r3, [r4, #4]
 801a426:	6123      	str	r3, [r4, #16]
 801a428:	2300      	movs	r3, #0
 801a42a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a42e:	e7a7      	b.n	801a380 <_printf_i+0x118>
 801a430:	6923      	ldr	r3, [r4, #16]
 801a432:	462a      	mov	r2, r5
 801a434:	4639      	mov	r1, r7
 801a436:	4630      	mov	r0, r6
 801a438:	47c0      	blx	r8
 801a43a:	3001      	adds	r0, #1
 801a43c:	d0aa      	beq.n	801a394 <_printf_i+0x12c>
 801a43e:	6823      	ldr	r3, [r4, #0]
 801a440:	079b      	lsls	r3, r3, #30
 801a442:	d413      	bmi.n	801a46c <_printf_i+0x204>
 801a444:	68e0      	ldr	r0, [r4, #12]
 801a446:	9b03      	ldr	r3, [sp, #12]
 801a448:	4298      	cmp	r0, r3
 801a44a:	bfb8      	it	lt
 801a44c:	4618      	movlt	r0, r3
 801a44e:	e7a3      	b.n	801a398 <_printf_i+0x130>
 801a450:	2301      	movs	r3, #1
 801a452:	464a      	mov	r2, r9
 801a454:	4639      	mov	r1, r7
 801a456:	4630      	mov	r0, r6
 801a458:	47c0      	blx	r8
 801a45a:	3001      	adds	r0, #1
 801a45c:	d09a      	beq.n	801a394 <_printf_i+0x12c>
 801a45e:	3501      	adds	r5, #1
 801a460:	68e3      	ldr	r3, [r4, #12]
 801a462:	9a03      	ldr	r2, [sp, #12]
 801a464:	1a9b      	subs	r3, r3, r2
 801a466:	42ab      	cmp	r3, r5
 801a468:	dcf2      	bgt.n	801a450 <_printf_i+0x1e8>
 801a46a:	e7eb      	b.n	801a444 <_printf_i+0x1dc>
 801a46c:	2500      	movs	r5, #0
 801a46e:	f104 0919 	add.w	r9, r4, #25
 801a472:	e7f5      	b.n	801a460 <_printf_i+0x1f8>
 801a474:	2b00      	cmp	r3, #0
 801a476:	d1ac      	bne.n	801a3d2 <_printf_i+0x16a>
 801a478:	7803      	ldrb	r3, [r0, #0]
 801a47a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a47e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a482:	e76c      	b.n	801a35e <_printf_i+0xf6>
 801a484:	0801affd 	.word	0x0801affd
 801a488:	0801b00e 	.word	0x0801b00e

0801a48c <__sread>:
 801a48c:	b510      	push	{r4, lr}
 801a48e:	460c      	mov	r4, r1
 801a490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a494:	f000 f8d4 	bl	801a640 <_read_r>
 801a498:	2800      	cmp	r0, #0
 801a49a:	bfab      	itete	ge
 801a49c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a49e:	89a3      	ldrhlt	r3, [r4, #12]
 801a4a0:	181b      	addge	r3, r3, r0
 801a4a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a4a6:	bfac      	ite	ge
 801a4a8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a4aa:	81a3      	strhlt	r3, [r4, #12]
 801a4ac:	bd10      	pop	{r4, pc}

0801a4ae <__swrite>:
 801a4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4b2:	461f      	mov	r7, r3
 801a4b4:	898b      	ldrh	r3, [r1, #12]
 801a4b6:	05db      	lsls	r3, r3, #23
 801a4b8:	4605      	mov	r5, r0
 801a4ba:	460c      	mov	r4, r1
 801a4bc:	4616      	mov	r6, r2
 801a4be:	d505      	bpl.n	801a4cc <__swrite+0x1e>
 801a4c0:	2302      	movs	r3, #2
 801a4c2:	2200      	movs	r2, #0
 801a4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4c8:	f000 f868 	bl	801a59c <_lseek_r>
 801a4cc:	89a3      	ldrh	r3, [r4, #12]
 801a4ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a4d6:	81a3      	strh	r3, [r4, #12]
 801a4d8:	4632      	mov	r2, r6
 801a4da:	463b      	mov	r3, r7
 801a4dc:	4628      	mov	r0, r5
 801a4de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a4e2:	f000 b817 	b.w	801a514 <_write_r>

0801a4e6 <__sseek>:
 801a4e6:	b510      	push	{r4, lr}
 801a4e8:	460c      	mov	r4, r1
 801a4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4ee:	f000 f855 	bl	801a59c <_lseek_r>
 801a4f2:	1c43      	adds	r3, r0, #1
 801a4f4:	89a3      	ldrh	r3, [r4, #12]
 801a4f6:	bf15      	itete	ne
 801a4f8:	6560      	strne	r0, [r4, #84]	; 0x54
 801a4fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a4fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a502:	81a3      	strheq	r3, [r4, #12]
 801a504:	bf18      	it	ne
 801a506:	81a3      	strhne	r3, [r4, #12]
 801a508:	bd10      	pop	{r4, pc}

0801a50a <__sclose>:
 801a50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a50e:	f000 b813 	b.w	801a538 <_close_r>
	...

0801a514 <_write_r>:
 801a514:	b538      	push	{r3, r4, r5, lr}
 801a516:	4c07      	ldr	r4, [pc, #28]	; (801a534 <_write_r+0x20>)
 801a518:	4605      	mov	r5, r0
 801a51a:	4608      	mov	r0, r1
 801a51c:	4611      	mov	r1, r2
 801a51e:	2200      	movs	r2, #0
 801a520:	6022      	str	r2, [r4, #0]
 801a522:	461a      	mov	r2, r3
 801a524:	f7e9 fb47 	bl	8003bb6 <_write>
 801a528:	1c43      	adds	r3, r0, #1
 801a52a:	d102      	bne.n	801a532 <_write_r+0x1e>
 801a52c:	6823      	ldr	r3, [r4, #0]
 801a52e:	b103      	cbz	r3, 801a532 <_write_r+0x1e>
 801a530:	602b      	str	r3, [r5, #0]
 801a532:	bd38      	pop	{r3, r4, r5, pc}
 801a534:	2400248c 	.word	0x2400248c

0801a538 <_close_r>:
 801a538:	b538      	push	{r3, r4, r5, lr}
 801a53a:	4c06      	ldr	r4, [pc, #24]	; (801a554 <_close_r+0x1c>)
 801a53c:	2300      	movs	r3, #0
 801a53e:	4605      	mov	r5, r0
 801a540:	4608      	mov	r0, r1
 801a542:	6023      	str	r3, [r4, #0]
 801a544:	f7e9 fe47 	bl	80041d6 <_close>
 801a548:	1c43      	adds	r3, r0, #1
 801a54a:	d102      	bne.n	801a552 <_close_r+0x1a>
 801a54c:	6823      	ldr	r3, [r4, #0]
 801a54e:	b103      	cbz	r3, 801a552 <_close_r+0x1a>
 801a550:	602b      	str	r3, [r5, #0]
 801a552:	bd38      	pop	{r3, r4, r5, pc}
 801a554:	2400248c 	.word	0x2400248c

0801a558 <_fstat_r>:
 801a558:	b538      	push	{r3, r4, r5, lr}
 801a55a:	4c07      	ldr	r4, [pc, #28]	; (801a578 <_fstat_r+0x20>)
 801a55c:	2300      	movs	r3, #0
 801a55e:	4605      	mov	r5, r0
 801a560:	4608      	mov	r0, r1
 801a562:	4611      	mov	r1, r2
 801a564:	6023      	str	r3, [r4, #0]
 801a566:	f7e9 fe42 	bl	80041ee <_fstat>
 801a56a:	1c43      	adds	r3, r0, #1
 801a56c:	d102      	bne.n	801a574 <_fstat_r+0x1c>
 801a56e:	6823      	ldr	r3, [r4, #0]
 801a570:	b103      	cbz	r3, 801a574 <_fstat_r+0x1c>
 801a572:	602b      	str	r3, [r5, #0]
 801a574:	bd38      	pop	{r3, r4, r5, pc}
 801a576:	bf00      	nop
 801a578:	2400248c 	.word	0x2400248c

0801a57c <_isatty_r>:
 801a57c:	b538      	push	{r3, r4, r5, lr}
 801a57e:	4c06      	ldr	r4, [pc, #24]	; (801a598 <_isatty_r+0x1c>)
 801a580:	2300      	movs	r3, #0
 801a582:	4605      	mov	r5, r0
 801a584:	4608      	mov	r0, r1
 801a586:	6023      	str	r3, [r4, #0]
 801a588:	f7e9 fe41 	bl	800420e <_isatty>
 801a58c:	1c43      	adds	r3, r0, #1
 801a58e:	d102      	bne.n	801a596 <_isatty_r+0x1a>
 801a590:	6823      	ldr	r3, [r4, #0]
 801a592:	b103      	cbz	r3, 801a596 <_isatty_r+0x1a>
 801a594:	602b      	str	r3, [r5, #0]
 801a596:	bd38      	pop	{r3, r4, r5, pc}
 801a598:	2400248c 	.word	0x2400248c

0801a59c <_lseek_r>:
 801a59c:	b538      	push	{r3, r4, r5, lr}
 801a59e:	4c07      	ldr	r4, [pc, #28]	; (801a5bc <_lseek_r+0x20>)
 801a5a0:	4605      	mov	r5, r0
 801a5a2:	4608      	mov	r0, r1
 801a5a4:	4611      	mov	r1, r2
 801a5a6:	2200      	movs	r2, #0
 801a5a8:	6022      	str	r2, [r4, #0]
 801a5aa:	461a      	mov	r2, r3
 801a5ac:	f7e9 fe3a 	bl	8004224 <_lseek>
 801a5b0:	1c43      	adds	r3, r0, #1
 801a5b2:	d102      	bne.n	801a5ba <_lseek_r+0x1e>
 801a5b4:	6823      	ldr	r3, [r4, #0]
 801a5b6:	b103      	cbz	r3, 801a5ba <_lseek_r+0x1e>
 801a5b8:	602b      	str	r3, [r5, #0]
 801a5ba:	bd38      	pop	{r3, r4, r5, pc}
 801a5bc:	2400248c 	.word	0x2400248c

0801a5c0 <memmove>:
 801a5c0:	4288      	cmp	r0, r1
 801a5c2:	b510      	push	{r4, lr}
 801a5c4:	eb01 0302 	add.w	r3, r1, r2
 801a5c8:	d807      	bhi.n	801a5da <memmove+0x1a>
 801a5ca:	1e42      	subs	r2, r0, #1
 801a5cc:	4299      	cmp	r1, r3
 801a5ce:	d00a      	beq.n	801a5e6 <memmove+0x26>
 801a5d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a5d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a5d8:	e7f8      	b.n	801a5cc <memmove+0xc>
 801a5da:	4283      	cmp	r3, r0
 801a5dc:	d9f5      	bls.n	801a5ca <memmove+0xa>
 801a5de:	1881      	adds	r1, r0, r2
 801a5e0:	1ad2      	subs	r2, r2, r3
 801a5e2:	42d3      	cmn	r3, r2
 801a5e4:	d100      	bne.n	801a5e8 <memmove+0x28>
 801a5e6:	bd10      	pop	{r4, pc}
 801a5e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a5ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a5f0:	e7f7      	b.n	801a5e2 <memmove+0x22>

0801a5f2 <_realloc_r>:
 801a5f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5f4:	4607      	mov	r7, r0
 801a5f6:	4614      	mov	r4, r2
 801a5f8:	460e      	mov	r6, r1
 801a5fa:	b921      	cbnz	r1, 801a606 <_realloc_r+0x14>
 801a5fc:	4611      	mov	r1, r2
 801a5fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a602:	f7fe bf47 	b.w	8019494 <_malloc_r>
 801a606:	b922      	cbnz	r2, 801a612 <_realloc_r+0x20>
 801a608:	f7fe fef6 	bl	80193f8 <_free_r>
 801a60c:	4625      	mov	r5, r4
 801a60e:	4628      	mov	r0, r5
 801a610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a612:	f000 f827 	bl	801a664 <_malloc_usable_size_r>
 801a616:	42a0      	cmp	r0, r4
 801a618:	d20f      	bcs.n	801a63a <_realloc_r+0x48>
 801a61a:	4621      	mov	r1, r4
 801a61c:	4638      	mov	r0, r7
 801a61e:	f7fe ff39 	bl	8019494 <_malloc_r>
 801a622:	4605      	mov	r5, r0
 801a624:	2800      	cmp	r0, #0
 801a626:	d0f2      	beq.n	801a60e <_realloc_r+0x1c>
 801a628:	4631      	mov	r1, r6
 801a62a:	4622      	mov	r2, r4
 801a62c:	f7fe fed0 	bl	80193d0 <memcpy>
 801a630:	4631      	mov	r1, r6
 801a632:	4638      	mov	r0, r7
 801a634:	f7fe fee0 	bl	80193f8 <_free_r>
 801a638:	e7e9      	b.n	801a60e <_realloc_r+0x1c>
 801a63a:	4635      	mov	r5, r6
 801a63c:	e7e7      	b.n	801a60e <_realloc_r+0x1c>
	...

0801a640 <_read_r>:
 801a640:	b538      	push	{r3, r4, r5, lr}
 801a642:	4c07      	ldr	r4, [pc, #28]	; (801a660 <_read_r+0x20>)
 801a644:	4605      	mov	r5, r0
 801a646:	4608      	mov	r0, r1
 801a648:	4611      	mov	r1, r2
 801a64a:	2200      	movs	r2, #0
 801a64c:	6022      	str	r2, [r4, #0]
 801a64e:	461a      	mov	r2, r3
 801a650:	f7e9 fda4 	bl	800419c <_read>
 801a654:	1c43      	adds	r3, r0, #1
 801a656:	d102      	bne.n	801a65e <_read_r+0x1e>
 801a658:	6823      	ldr	r3, [r4, #0]
 801a65a:	b103      	cbz	r3, 801a65e <_read_r+0x1e>
 801a65c:	602b      	str	r3, [r5, #0]
 801a65e:	bd38      	pop	{r3, r4, r5, pc}
 801a660:	2400248c 	.word	0x2400248c

0801a664 <_malloc_usable_size_r>:
 801a664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a668:	1f18      	subs	r0, r3, #4
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	bfbc      	itt	lt
 801a66e:	580b      	ldrlt	r3, [r1, r0]
 801a670:	18c0      	addlt	r0, r0, r3
 801a672:	4770      	bx	lr

0801a674 <_init>:
 801a674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a676:	bf00      	nop
 801a678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a67a:	bc08      	pop	{r3}
 801a67c:	469e      	mov	lr, r3
 801a67e:	4770      	bx	lr

0801a680 <_fini>:
 801a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a682:	bf00      	nop
 801a684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a686:	bc08      	pop	{r3}
 801a688:	469e      	mov	lr, r3
 801a68a:	4770      	bx	lr

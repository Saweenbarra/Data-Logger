
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001259c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08012834  08012834  00022834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a38  08012a38  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08012a38  08012a38  00022a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a40  08012a40  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a40  08012a40  00022a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a44  08012a44  00022a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08012a48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e8  240001cc  08012c14  000301cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240017b4  08012c14  000317b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b1a7  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000624c  00000000  00000000  0006b3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ed0  00000000  00000000  000715f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c60  00000000  00000000  000734c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ef69  00000000  00000000  00075120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000206f8  00000000  00000000  000b4089  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016f49f  00000000  00000000  000d4781  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00243c20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008330  00000000  00000000  00243c9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001cc 	.word	0x240001cc
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801281c 	.word	0x0801281c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001d0 	.word	0x240001d0
 80002d4:	0801281c 	.word	0x0801281c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 ff55 	bl	800148c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f85d 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fb1f 	bl	8000c28 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fafd 	bl	8000be8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80005ee:	f000 f9eb 	bl	80009c8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005f2:	f00c fa5f 	bl	800cab4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80005f6:	f011 fb0b 	bl	8011c10 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80005fa:	f000 f91d 	bl	8000838 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80005fe:	f000 f97f 	bl	8000900 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8000602:	f000 fa59 	bl	8000ab8 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000606:	f000 faa3 	bl	8000b50 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800060a:	f000 f9ff 	bl	8000a0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 800060e:	2201      	movs	r2, #1
 8000610:	491c      	ldr	r1, [pc, #112]	; (8000684 <main+0xac>)
 8000612:	481d      	ldr	r0, [pc, #116]	; (8000688 <main+0xb0>)
 8000614:	f010 fe7e 	bl	8011314 <f_mount>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d128      	bne.n	8000670 <main+0x98>
  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800061e:	2101      	movs	r1, #1
 8000620:	481a      	ldr	r0, [pc, #104]	; (800068c <main+0xb4>)
 8000622:	f003 faf6 	bl	8003c12 <HAL_GPIO_TogglePin>
  	  char myPath[] = "mass.csv\0";
 8000626:	4a1a      	ldr	r2, [pc, #104]	; (8000690 <main+0xb8>)
 8000628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800062c:	ca07      	ldmia	r2, {r0, r1, r2}
 800062e:	c303      	stmia	r3!, {r0, r1}
 8000630:	801a      	strh	r2, [r3, #0]
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000636:	220a      	movs	r2, #10
 8000638:	4619      	mov	r1, r3
 800063a:	4816      	ldr	r0, [pc, #88]	; (8000694 <main+0xbc>)
 800063c:	f010 feb0 	bl	80113a0 <f_open>
  	  char myData[] = "This is some data. This is some more data";
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <main+0xc0>)
 8000642:	463c      	mov	r4, r7
 8000644:	461d      	mov	r5, r3
 8000646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000652:	c403      	stmia	r4!, {r0, r1}
 8000654:	8022      	strh	r2, [r4, #0]
  	  f_write(&myFILE, myData, sizeof(myData), &testByte);
 8000656:	4639      	mov	r1, r7
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <main+0xc4>)
 800065a:	222a      	movs	r2, #42	; 0x2a
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <main+0xbc>)
 800065e:	f011 f85d 	bl	801171c <f_write>
  	  f_close(&myFILE);
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <main+0xbc>)
 8000664:	f011 fa4d 	bl	8011b02 <f_close>
  	  HAL_Delay(3000);
 8000668:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800066c:	f000 ffa0 	bl	80015b0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000670:	2101      	movs	r1, #1
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <main+0xb4>)
 8000674:	f003 facd 	bl	8003c12 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067c:	f000 ff98 	bl	80015b0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000680:	e7f6      	b.n	8000670 <main+0x98>
 8000682:	bf00      	nop
 8000684:	24000a74 	.word	0x24000a74
 8000688:	24000798 	.word	0x24000798
 800068c:	58020400 	.word	0x58020400
 8000690:	08012834 	.word	0x08012834
 8000694:	24000334 	.word	0x24000334
 8000698:	08012840 	.word	0x08012840
 800069c:	24000a68 	.word	0x24000a68

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0cc      	sub	sp, #304	; 0x130
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006aa:	224c      	movs	r2, #76	; 0x4c
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f011 fff1 	bl	8012696 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006b8:	2220      	movs	r2, #32
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f011 ffea 	bl	8012696 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4618      	mov	r0, r3
 80006c8:	23bc      	movs	r3, #188	; 0xbc
 80006ca:	461a      	mov	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f011 ffe2 	bl	8012696 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d2:	2002      	movs	r0, #2
 80006d4:	f004 fcc0 	bl	8005058 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	4b53      	ldr	r3, [pc, #332]	; (800082c <SystemClock_Config+0x18c>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	4a52      	ldr	r2, [pc, #328]	; (800082c <SystemClock_Config+0x18c>)
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ea:	4b50      	ldr	r3, [pc, #320]	; (800082c <SystemClock_Config+0x18c>)
 80006ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ee:	f003 0201 	and.w	r2, r3, #1
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <SystemClock_Config+0x190>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fe:	4a4c      	ldr	r2, [pc, #304]	; (8000830 <SystemClock_Config+0x190>)
 8000700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b4a      	ldr	r3, [pc, #296]	; (8000830 <SystemClock_Config+0x190>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000716:	bf00      	nop
 8000718:	4b45      	ldr	r3, [pc, #276]	; (8000830 <SystemClock_Config+0x190>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000724:	d1f8      	bne.n	8000718 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000726:	2321      	movs	r3, #33	; 0x21
 8000728:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 800074c:	2318      	movs	r3, #24
 800074e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 100;
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000764:	230c      	movs	r3, #12
 8000766:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800077a:	4618      	mov	r0, r3
 800077c:	f004 fcb6 	bl	80050ec <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000786:	f000 fb39 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	233f      	movs	r3, #63	; 0x3f
 800078c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2303      	movs	r3, #3
 8000792:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079c:	2308      	movs	r3, #8
 800079e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007be:	2101      	movs	r1, #1
 80007c0:	4618      	mov	r0, r3
 80007c2:	f005 f8a3 	bl	800590c <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x130>
  {
    Error_Handler();
 80007cc:	f000 fb16 	bl	8000dfc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <SystemClock_Config+0x194>)
 80007d6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2200      	movs	r2, #0
 80007de:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2200      	movs	r2, #0
 80007e6:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2200      	movs	r2, #0
 80007ee:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2200      	movs	r2, #0
 80007f6:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f005 fc2f 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x178>
  {
    Error_Handler();
 8000814:	f000 faf2 	bl	8000dfc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000818:	f005 fa2e 	bl	8005c78 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800081c:	f004 fc56 	bl	80050cc <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000820:	bf00      	nop
 8000822:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	58000400 	.word	0x58000400
 8000830:	58024800 	.word	0x58024800
 8000834:	00059002 	.word	0x00059002

08000838 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800083c:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800083e:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <MX_FDCAN1_Init+0xc4>)
 8000840:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000848:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000862:	2201      	movs	r2, #1
 8000864:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000868:	2201      	movs	r2, #1
 800086a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800086e:	2202      	movs	r2, #2
 8000870:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000874:	2202      	movs	r2, #2
 8000876:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800087a:	2201      	movs	r2, #1
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000880:	2201      	movs	r2, #1
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000886:	2201      	movs	r2, #1
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800088c:	2201      	movs	r2, #1
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000898:	2200      	movs	r2, #0
 800089a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008e6:	f002 fc63 	bl	80031b0 <HAL_FDCAN_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008f0:	f000 fa84 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	240005e4 	.word	0x240005e4
 80008fc:	4000a000 	.word	0x4000a000

08000900 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000904:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <MX_FDCAN2_Init+0xc4>)
 8000908:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800092a:	2201      	movs	r2, #1
 800092c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000930:	2201      	movs	r2, #1
 8000932:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000936:	2202      	movs	r2, #2
 8000938:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800093c:	2202      	movs	r2, #2
 800093e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000942:	2201      	movs	r2, #1
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000948:	2201      	movs	r2, #1
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800094e:	2201      	movs	r2, #1
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000954:	2201      	movs	r2, #1
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800095a:	2200      	movs	r2, #0
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000960:	2200      	movs	r2, #0
 8000962:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800096c:	2200      	movs	r2, #0
 800096e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000972:	2204      	movs	r2, #4
 8000974:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000978:	2200      	movs	r2, #0
 800097a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800097e:	2204      	movs	r2, #4
 8000980:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000984:	2200      	movs	r2, #0
 8000986:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800098a:	2204      	movs	r2, #4
 800098c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000990:	2200      	movs	r2, #0
 8000992:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 80009a8:	2204      	movs	r2, #4
 80009aa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 80009ae:	f002 fbff 	bl	80031b0 <HAL_FDCAN_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80009b8:	f000 fa20 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	240009c8 	.word	0x240009c8
 80009c4:	4000a400 	.word	0x4000a400

080009c8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <MX_SDMMC1_SD_Init+0x40>)
 80009d0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	24000564 	.word	0x24000564
 8000a08:	52007000 	.word	0x52007000

08000a0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a12:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <MX_SPI1_Init+0xa8>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a26:	2207      	movs	r2, #7
 8000a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a9c:	f008 fd66 	bl	800956c <HAL_SPI_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 f9a9 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	24000710 	.word	0x24000710
 8000ab4:	40013000 	.word	0x40013000

08000ab8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_UART8_Init+0x90>)
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <MX_UART8_Init+0x94>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_UART8_Init+0x90>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_UART8_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_UART8_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_UART8_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_UART8_Init+0x90>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_UART8_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_UART8_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_UART8_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_UART8_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_UART8_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_UART8_Init+0x90>)
 8000b02:	f008 fe46 	bl	8009792 <HAL_UART_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f000 f976 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_UART8_Init+0x90>)
 8000b14:	f009 fde1 	bl	800a6da <HAL_UARTEx_SetTxFifoThreshold>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f000 f96d 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <MX_UART8_Init+0x90>)
 8000b26:	f009 fe16 	bl	800a756 <HAL_UARTEx_SetRxFifoThreshold>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f000 f964 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_UART8_Init+0x90>)
 8000b36:	f009 fd97 	bl	800a668 <HAL_UARTEx_DisableFifoMode>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 f95c 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	24000684 	.word	0x24000684
 8000b4c:	40007c00 	.word	0x40007c00

08000b50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b56:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <MX_USART3_UART_Init+0x94>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b5c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b9a:	f008 fdfa 	bl	8009792 <HAL_UART_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ba4:	f000 f92a 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000bac:	f009 fd95 	bl	800a6da <HAL_UARTEx_SetTxFifoThreshold>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bb6:	f000 f921 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000bbe:	f009 fdca 	bl	800a756 <HAL_UARTEx_SetRxFifoThreshold>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bc8:	f000 f918 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000bce:	f009 fd4b 	bl	800a668 <HAL_UARTEx_DisableFifoMode>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bd8:	f000 f910 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	240002a8 	.word	0x240002a8
 8000be4:	40004800 	.word	0x40004800

08000be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_DMA_Init+0x3c>)
 8000bf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <MX_DMA_Init+0x3c>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_DMA_Init+0x3c>)
 8000c00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	200b      	movs	r0, #11
 8000c12:	f000 fdd6 	bl	80017c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c16:	200b      	movs	r0, #11
 8000c18:	f000 fded 	bl	80017f6 <HAL_NVIC_EnableIRQ>

}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	58024400 	.word	0x58024400

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	; 0x30
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3e:	4b69      	ldr	r3, [pc, #420]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	4a67      	ldr	r2, [pc, #412]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4e:	4b65      	ldr	r3, [pc, #404]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	4b61      	ldr	r3, [pc, #388]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a60      	ldr	r2, [pc, #384]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b5d      	ldr	r3, [pc, #372]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	4b5a      	ldr	r3, [pc, #360]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	4a58      	ldr	r2, [pc, #352]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8a:	4b56      	ldr	r3, [pc, #344]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b52      	ldr	r3, [pc, #328]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	4a51      	ldr	r2, [pc, #324]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca8:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b4b      	ldr	r3, [pc, #300]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a49      	ldr	r2, [pc, #292]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd4:	4b43      	ldr	r3, [pc, #268]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	4a42      	ldr	r2, [pc, #264]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce4:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	210c      	movs	r1, #12
 8000cf6:	483c      	ldr	r0, [pc, #240]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000cf8:	f002 ff72 	bl	8003be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2103      	movs	r1, #3
 8000d00:	483a      	ldr	r0, [pc, #232]	; (8000dec <MX_GPIO_Init+0x1c4>)
 8000d02:	f002 ff6d 	bl	8003be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4839      	ldr	r0, [pc, #228]	; (8000df0 <MX_GPIO_Init+0x1c8>)
 8000d0c:	f002 ff68 	bl	8003be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d16:	4837      	ldr	r0, [pc, #220]	; (8000df4 <MX_GPIO_Init+0x1cc>)
 8000d18:	f002 ff62 	bl	8003be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	482d      	ldr	r0, [pc, #180]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000d34:	f002 fda4 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4827      	ldr	r0, [pc, #156]	; (8000dec <MX_GPIO_Init+0x1c4>)
 8000d50:	f002 fd96 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000d54:	2304      	movs	r3, #4
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <MX_GPIO_Init+0x1d0>)
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4821      	ldr	r0, [pc, #132]	; (8000dec <MX_GPIO_Init+0x1c4>)
 8000d68:	f002 fd8a 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	481b      	ldr	r0, [pc, #108]	; (8000df0 <MX_GPIO_Init+0x1c8>)
 8000d84:	f002 fd7c 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_GPIO_Init+0x1d0>)
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000d9e:	f002 fd6f 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <MX_GPIO_Init+0x1cc>)
 8000dbc:	f002 fd60 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8000dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_GPIO_Init+0x1c4>)
 8000dd6:	f002 fd53 	bl	8003880 <HAL_GPIO_Init>

}
 8000dda:	bf00      	nop
 8000ddc:	3730      	adds	r7, #48	; 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	58024400 	.word	0x58024400
 8000de8:	58021000 	.word	0x58021000
 8000dec:	58020000 	.word	0x58020000
 8000df0:	58020400 	.word	0x58020400
 8000df4:	58020c00 	.word	0x58020c00
 8000df8:	11110000 	.word	0x11110000

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <Error_Handler+0x6>

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_MspInit+0x30>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x30>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x30>)
 8000e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	58024400 	.word	0x58024400

08000e38 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a3d      	ldr	r2, [pc, #244]	; (8000f4c <HAL_FDCAN_MspInit+0x114>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d138      	bne.n	8000ecc <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e5a:	4b3d      	ldr	r3, [pc, #244]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	4a3b      	ldr	r2, [pc, #236]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000e62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e64:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d10e      	bne.n	8000e8a <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e6c:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e72:	4a38      	ldr	r2, [pc, #224]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e7c:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	4a30      	ldr	r2, [pc, #192]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000eba:	2309      	movs	r3, #9
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4824      	ldr	r0, [pc, #144]	; (8000f58 <HAL_FDCAN_MspInit+0x120>)
 8000ec6:	f002 fcdb 	bl	8003880 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000eca:	e03b      	b.n	8000f44 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a22      	ldr	r2, [pc, #136]	; (8000f5c <HAL_FDCAN_MspInit+0x124>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d136      	bne.n	8000f44 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000ede:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d10e      	bne.n	8000f06 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000eea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eee:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000efa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f24:	2360      	movs	r3, #96	; 0x60
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000f34:	2309      	movs	r3, #9
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <HAL_FDCAN_MspInit+0x120>)
 8000f40:	f002 fc9e 	bl	8003880 <HAL_GPIO_Init>
}
 8000f44:	bf00      	nop
 8000f46:	3730      	adds	r7, #48	; 0x30
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	4000a000 	.word	0x4000a000
 8000f50:	240001e8 	.word	0x240001e8
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020400 	.word	0x58020400
 8000f5c:	4000a400 	.word	0x4000a400

08000f60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a2a      	ldr	r2, [pc, #168]	; (8001028 <HAL_SD_MspInit+0xc8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d14d      	bne.n	800101e <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000f84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f88:	4a28      	ldr	r2, [pc, #160]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000f94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fdc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000fe0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <HAL_SD_MspInit+0xd0>)
 8000ffa:	f002 fc41 	bl	8003880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ffe:	2304      	movs	r3, #4
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800100e:	230c      	movs	r3, #12
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <HAL_SD_MspInit+0xd4>)
 800101a:	f002 fc31 	bl	8003880 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	52007000 	.word	0x52007000
 800102c:	58024400 	.word	0x58024400
 8001030:	58020800 	.word	0x58020800
 8001034:	58020c00 	.word	0x58020c00

08001038 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <HAL_SPI_MspInit+0x88>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d12d      	bne.n	80010b6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 800105c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 8001062:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001066:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 800106c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001096:	23e0      	movs	r3, #224	; 0xe0
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a6:	2305      	movs	r3, #5
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <HAL_SPI_MspInit+0x90>)
 80010b2:	f002 fbe5 	bl	8003880 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40013000 	.word	0x40013000
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58020000 	.word	0x58020000

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_UART_MspInit+0x14c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12e      	bne.n	800114c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80010ee:	4b4b      	ldr	r3, [pc, #300]	; (800121c <HAL_UART_MspInit+0x150>)
 80010f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f4:	4a49      	ldr	r2, [pc, #292]	; (800121c <HAL_UART_MspInit+0x150>)
 80010f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010fe:	4b47      	ldr	r3, [pc, #284]	; (800121c <HAL_UART_MspInit+0x150>)
 8001100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800110c:	4b43      	ldr	r3, [pc, #268]	; (800121c <HAL_UART_MspInit+0x150>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	4a42      	ldr	r2, [pc, #264]	; (800121c <HAL_UART_MspInit+0x150>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111c:	4b3f      	ldr	r3, [pc, #252]	; (800121c <HAL_UART_MspInit+0x150>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800112a:	2303      	movs	r3, #3
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800113a:	2308      	movs	r3, #8
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	4836      	ldr	r0, [pc, #216]	; (8001220 <HAL_UART_MspInit+0x154>)
 8001146:	f002 fb9b 	bl	8003880 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800114a:	e061      	b.n	8001210 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a34      	ldr	r2, [pc, #208]	; (8001224 <HAL_UART_MspInit+0x158>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d15c      	bne.n	8001210 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <HAL_UART_MspInit+0x150>)
 8001158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800115c:	4a2f      	ldr	r2, [pc, #188]	; (800121c <HAL_UART_MspInit+0x150>)
 800115e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001162:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_UART_MspInit+0x150>)
 8001168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800116c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <HAL_UART_MspInit+0x150>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	4a28      	ldr	r2, [pc, #160]	; (800121c <HAL_UART_MspInit+0x150>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_UART_MspInit+0x150>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001192:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011a4:	2307      	movs	r3, #7
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	481e      	ldr	r0, [pc, #120]	; (8001228 <HAL_UART_MspInit+0x15c>)
 80011b0:	f002 fb66 	bl	8003880 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_UART_MspInit+0x160>)
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_UART_MspInit+0x164>)
 80011b8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_UART_MspInit+0x160>)
 80011bc:	222d      	movs	r2, #45	; 0x2d
 80011be:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_UART_MspInit+0x160>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_UART_MspInit+0x160>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_UART_MspInit+0x160>)
 80011ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_UART_MspInit+0x160>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_UART_MspInit+0x160>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_UART_MspInit+0x160>)
 80011e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_UART_MspInit+0x160>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_UART_MspInit+0x160>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <HAL_UART_MspInit+0x160>)
 80011f6:	f000 fb19 	bl	800182c <HAL_DMA_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001200:	f7ff fdfc 	bl	8000dfc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_UART_MspInit+0x160>)
 8001208:	679a      	str	r2, [r3, #120]	; 0x78
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_UART_MspInit+0x160>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001210:	bf00      	nop
 8001212:	3730      	adds	r7, #48	; 0x30
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40007c00 	.word	0x40007c00
 800121c:	58024400 	.word	0x58024400
 8001220:	58021000 	.word	0x58021000
 8001224:	40004800 	.word	0x40004800
 8001228:	58020c00 	.word	0x58020c00
 800122c:	24000230 	.word	0x24000230
 8001230:	40020010 	.word	0x40020010

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001238:	f004 fefc 	bl	8006034 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x8>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 f974 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <DMA1_Stream0_IRQHandler+0x10>)
 8001292:	f000 fe27 	bl	8001ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	24000230 	.word	0x24000230

080012a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <OTG_FS_IRQHandler+0x10>)
 80012a6:	f002 fe26 	bl	8003ef6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	240013a8 	.word	0x240013a8

080012b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <_sbrk+0x5c>)
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <_sbrk+0x60>)
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <_sbrk+0x64>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <_sbrk+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d207      	bcs.n	80012f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e4:	f011 f992 	bl	801260c <__errno>
 80012e8:	4602      	mov	r2, r0
 80012ea:	230c      	movs	r3, #12
 80012ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e009      	b.n	8001308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <_sbrk+0x64>)
 8001304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	24080000 	.word	0x24080000
 8001314:	00000400 	.word	0x00000400
 8001318:	240001ec 	.word	0x240001ec
 800131c:	240017b8 	.word	0x240017b8

08001320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001324:	4b39      	ldr	r3, [pc, #228]	; (800140c <SystemInit+0xec>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132a:	4a38      	ldr	r2, [pc, #224]	; (800140c <SystemInit+0xec>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <SystemInit+0xf0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	2b06      	cmp	r3, #6
 800133e:	d807      	bhi.n	8001350 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <SystemInit+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 030f 	bic.w	r3, r3, #15
 8001348:	4a31      	ldr	r2, [pc, #196]	; (8001410 <SystemInit+0xf0>)
 800134a:	f043 0307 	orr.w	r3, r3, #7
 800134e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <SystemInit+0xf4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a2f      	ldr	r2, [pc, #188]	; (8001414 <SystemInit+0xf4>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800135c:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <SystemInit+0xf4>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <SystemInit+0xf4>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	492b      	ldr	r1, [pc, #172]	; (8001414 <SystemInit+0xf4>)
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <SystemInit+0xf8>)
 800136a:	4013      	ands	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <SystemInit+0xf0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	2b07      	cmp	r3, #7
 8001378:	d907      	bls.n	800138a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800137a:	4b25      	ldr	r3, [pc, #148]	; (8001410 <SystemInit+0xf0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 030f 	bic.w	r3, r3, #15
 8001382:	4a23      	ldr	r2, [pc, #140]	; (8001410 <SystemInit+0xf0>)
 8001384:	f043 0307 	orr.w	r3, r3, #7
 8001388:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <SystemInit+0xf4>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001390:	4b20      	ldr	r3, [pc, #128]	; (8001414 <SystemInit+0xf4>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <SystemInit+0xf4>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <SystemInit+0xf4>)
 800139e:	4a1f      	ldr	r2, [pc, #124]	; (800141c <SystemInit+0xfc>)
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <SystemInit+0xf4>)
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <SystemInit+0x100>)
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <SystemInit+0xf4>)
 80013aa:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <SystemInit+0x104>)
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <SystemInit+0xf4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <SystemInit+0xf4>)
 80013b6:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <SystemInit+0x104>)
 80013b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <SystemInit+0xf4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <SystemInit+0xf4>)
 80013c2:	4a18      	ldr	r2, [pc, #96]	; (8001424 <SystemInit+0x104>)
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <SystemInit+0xf4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <SystemInit+0xf4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a10      	ldr	r2, [pc, #64]	; (8001414 <SystemInit+0xf4>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <SystemInit+0xf4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <SystemInit+0x108>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <SystemInit+0x10c>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ea:	d202      	bcs.n	80013f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <SystemInit+0x110>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <SystemInit+0x114>)
 80013f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013f8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SystemInit+0xec>)
 80013fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001400:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00
 8001410:	52002000 	.word	0x52002000
 8001414:	58024400 	.word	0x58024400
 8001418:	eaf6ed7f 	.word	0xeaf6ed7f
 800141c:	02020200 	.word	0x02020200
 8001420:	01ff0000 	.word	0x01ff0000
 8001424:	01010280 	.word	0x01010280
 8001428:	5c001000 	.word	0x5c001000
 800142c:	ffff0000 	.word	0xffff0000
 8001430:	51008108 	.word	0x51008108
 8001434:	52004000 	.word	0x52004000

08001438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001470 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800143c:	f7ff ff70 	bl	8001320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001442:	e003      	b.n	800144c <LoopCopyDataInit>

08001444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800144a:	3104      	adds	r1, #4

0800144c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001454:	d3f6      	bcc.n	8001444 <CopyDataInit>
  ldr  r2, =_sbss
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001458:	e002      	b.n	8001460 <LoopFillZerobss>

0800145a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800145a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800145c:	f842 3b04 	str.w	r3, [r2], #4

08001460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001464:	d3f9      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001466:	f011 f8d7 	bl	8012618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146a:	f7ff f8b5 	bl	80005d8 <main>
  bx  lr    
 800146e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001474:	08012a48 	.word	0x08012a48
  ldr  r0, =_sdata
 8001478:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800147c:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 8001480:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 8001484:	240017b4 	.word	0x240017b4

08001488 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC3_IRQHandler>
	...

0800148c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001492:	2003      	movs	r0, #3
 8001494:	f000 f98a 	bl	80017ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001498:	f004 fbfe 	bl	8005c98 <HAL_RCC_GetSysClockFreq>
 800149c:	4601      	mov	r1, r0
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_Init+0x68>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <HAL_Init+0x6c>)
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	f003 031f 	and.w	r3, r3, #31
 80014b0:	fa21 f303 	lsr.w	r3, r1, r3
 80014b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_Init+0x68>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_Init+0x6c>)
 80014c0:	5cd3      	ldrb	r3, [r2, r3]
 80014c2:	f003 031f 	and.w	r3, r3, #31
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	fa22 f303 	lsr.w	r3, r2, r3
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_Init+0x70>)
 80014ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014d0:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <HAL_Init+0x74>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f814 	bl	8001504 <HAL_InitTick>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e002      	b.n	80014ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014e6:	f7ff fc8d 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	58024400 	.word	0x58024400
 80014f8:	08012950 	.word	0x08012950
 80014fc:	24000004 	.word	0x24000004
 8001500:	24000000 	.word	0x24000000

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_InitTick+0x60>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e021      	b.n	800155c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_InitTick+0x64>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_InitTick+0x60>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	fbb3 f3f1 	udiv	r3, r3, r1
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f96f 	bl	8001812 <HAL_SYSTICK_Config>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00e      	b.n	800155c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d80a      	bhi.n	800155a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f000 f939 	bl	80017c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_InitTick+0x68>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e000      	b.n	800155c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2400000c 	.word	0x2400000c
 8001568:	24000000 	.word	0x24000000
 800156c:	24000008 	.word	0x24000008

08001570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x20>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x24>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_IncTick+0x24>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	2400000c 	.word	0x2400000c
 8001594:	24000a6c 	.word	0x24000a6c

08001598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	24000a6c 	.word	0x24000a6c

080015b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff ffee 	bl	8001598 <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d005      	beq.n	80015d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_Delay+0x40>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d6:	bf00      	nop
 80015d8:	f7ff ffde 	bl	8001598 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d8f7      	bhi.n	80015d8 <HAL_Delay+0x28>
  {
  }
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2400000c 	.word	0x2400000c

080015f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_GetREVID+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0c1b      	lsrs	r3, r3, #16
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	5c001000 	.word	0x5c001000

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <__NVIC_SetPriorityGrouping+0x40>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	4313      	orrs	r3, r2
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x40>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00
 8001650:	05fa0000 	.word	0x05fa0000

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <__NVIC_EnableIRQ+0x38>)
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100

080016ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db0a      	blt.n	80016d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	490c      	ldr	r1, [pc, #48]	; (80016f8 <__NVIC_SetPriority+0x4c>)
 80016c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ca:	0112      	lsls	r2, r2, #4
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	440b      	add	r3, r1
 80016d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d4:	e00a      	b.n	80016ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4908      	ldr	r1, [pc, #32]	; (80016fc <__NVIC_SetPriority+0x50>)
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	3b04      	subs	r3, #4
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	761a      	strb	r2, [r3, #24]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f1c3 0307 	rsb	r3, r3, #7
 800171a:	2b04      	cmp	r3, #4
 800171c:	bf28      	it	cs
 800171e:	2304      	movcs	r3, #4
 8001720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3304      	adds	r3, #4
 8001726:	2b06      	cmp	r3, #6
 8001728:	d902      	bls.n	8001730 <NVIC_EncodePriority+0x30>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b03      	subs	r3, #3
 800172e:	e000      	b.n	8001732 <NVIC_EncodePriority+0x32>
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	f04f 32ff 	mov.w	r2, #4294967295
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43d9      	mvns	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	4313      	orrs	r3, r2
         );
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	; 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001778:	d301      	bcc.n	800177e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177a:	2301      	movs	r3, #1
 800177c:	e00f      	b.n	800179e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <SysTick_Config+0x40>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001786:	210f      	movs	r1, #15
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f7ff ff8e 	bl	80016ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <SysTick_Config+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SysTick_Config+0x40>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff29 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff40 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff90 	bl	8001700 <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff5f 	bl	80016ac <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff33 	bl	8001670 <__NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffa4 	bl	8001768 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff feb0 	bl	8001598 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e316      	b.n	8001e72 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a66      	ldr	r2, [pc, #408]	; (80019e4 <HAL_DMA_Init+0x1b8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d04a      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a65      	ldr	r2, [pc, #404]	; (80019e8 <HAL_DMA_Init+0x1bc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d045      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a63      	ldr	r2, [pc, #396]	; (80019ec <HAL_DMA_Init+0x1c0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d040      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a62      	ldr	r2, [pc, #392]	; (80019f0 <HAL_DMA_Init+0x1c4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d03b      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a60      	ldr	r2, [pc, #384]	; (80019f4 <HAL_DMA_Init+0x1c8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d036      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a5f      	ldr	r2, [pc, #380]	; (80019f8 <HAL_DMA_Init+0x1cc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d031      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a5d      	ldr	r2, [pc, #372]	; (80019fc <HAL_DMA_Init+0x1d0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d02c      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a5c      	ldr	r2, [pc, #368]	; (8001a00 <HAL_DMA_Init+0x1d4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d027      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a5a      	ldr	r2, [pc, #360]	; (8001a04 <HAL_DMA_Init+0x1d8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d022      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a59      	ldr	r2, [pc, #356]	; (8001a08 <HAL_DMA_Init+0x1dc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d01d      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <HAL_DMA_Init+0x1e0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d018      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a56      	ldr	r2, [pc, #344]	; (8001a10 <HAL_DMA_Init+0x1e4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d013      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a54      	ldr	r2, [pc, #336]	; (8001a14 <HAL_DMA_Init+0x1e8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00e      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a53      	ldr	r2, [pc, #332]	; (8001a18 <HAL_DMA_Init+0x1ec>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d009      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a51      	ldr	r2, [pc, #324]	; (8001a1c <HAL_DMA_Init+0x1f0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d004      	beq.n	80018e4 <HAL_DMA_Init+0xb8>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <HAL_DMA_Init+0x1f4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <HAL_DMA_Init+0xbc>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <HAL_DMA_Init+0xbe>
 80018e8:	2300      	movs	r3, #0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 813b 	beq.w	8001b66 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a37      	ldr	r2, [pc, #220]	; (80019e4 <HAL_DMA_Init+0x1b8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d04a      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a36      	ldr	r2, [pc, #216]	; (80019e8 <HAL_DMA_Init+0x1bc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d045      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a34      	ldr	r2, [pc, #208]	; (80019ec <HAL_DMA_Init+0x1c0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d040      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a33      	ldr	r2, [pc, #204]	; (80019f0 <HAL_DMA_Init+0x1c4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d03b      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a31      	ldr	r2, [pc, #196]	; (80019f4 <HAL_DMA_Init+0x1c8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d036      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <HAL_DMA_Init+0x1cc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d031      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2e      	ldr	r2, [pc, #184]	; (80019fc <HAL_DMA_Init+0x1d0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d02c      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a2d      	ldr	r2, [pc, #180]	; (8001a00 <HAL_DMA_Init+0x1d4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d027      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <HAL_DMA_Init+0x1d8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d022      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a2a      	ldr	r2, [pc, #168]	; (8001a08 <HAL_DMA_Init+0x1dc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d01d      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a28      	ldr	r2, [pc, #160]	; (8001a0c <HAL_DMA_Init+0x1e0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d018      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a27      	ldr	r2, [pc, #156]	; (8001a10 <HAL_DMA_Init+0x1e4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d013      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <HAL_DMA_Init+0x1e8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d00e      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a24      	ldr	r2, [pc, #144]	; (8001a18 <HAL_DMA_Init+0x1ec>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d009      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <HAL_DMA_Init+0x1f0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d004      	beq.n	80019a0 <HAL_DMA_Init+0x174>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <HAL_DMA_Init+0x1f4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d108      	bne.n	80019b2 <HAL_DMA_Init+0x186>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e007      	b.n	80019c2 <HAL_DMA_Init+0x196>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0201 	bic.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019c2:	e02f      	b.n	8001a24 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019c4:	f7ff fde8 	bl	8001598 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d928      	bls.n	8001a24 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2220      	movs	r2, #32
 80019d6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2203      	movs	r2, #3
 80019dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e246      	b.n	8001e72 <HAL_DMA_Init+0x646>
 80019e4:	40020010 	.word	0x40020010
 80019e8:	40020028 	.word	0x40020028
 80019ec:	40020040 	.word	0x40020040
 80019f0:	40020058 	.word	0x40020058
 80019f4:	40020070 	.word	0x40020070
 80019f8:	40020088 	.word	0x40020088
 80019fc:	400200a0 	.word	0x400200a0
 8001a00:	400200b8 	.word	0x400200b8
 8001a04:	40020410 	.word	0x40020410
 8001a08:	40020428 	.word	0x40020428
 8001a0c:	40020440 	.word	0x40020440
 8001a10:	40020458 	.word	0x40020458
 8001a14:	40020470 	.word	0x40020470
 8001a18:	40020488 	.word	0x40020488
 8001a1c:	400204a0 	.word	0x400204a0
 8001a20:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1c8      	bne.n	80019c4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4b83      	ldr	r3, [pc, #524]	; (8001c4c <HAL_DMA_Init+0x420>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a56:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a62:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d107      	bne.n	8001a88 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4313      	orrs	r3, r2
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a88:	4b71      	ldr	r3, [pc, #452]	; (8001c50 <HAL_DMA_Init+0x424>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b71      	ldr	r3, [pc, #452]	; (8001c54 <HAL_DMA_Init+0x428>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a94:	d328      	bcc.n	8001ae8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b28      	cmp	r3, #40	; 0x28
 8001a9c:	d903      	bls.n	8001aa6 <HAL_DMA_Init+0x27a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8001aa4:	d917      	bls.n	8001ad6 <HAL_DMA_Init+0x2aa>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b3e      	cmp	r3, #62	; 0x3e
 8001aac:	d903      	bls.n	8001ab6 <HAL_DMA_Init+0x28a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b42      	cmp	r3, #66	; 0x42
 8001ab4:	d90f      	bls.n	8001ad6 <HAL_DMA_Init+0x2aa>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b46      	cmp	r3, #70	; 0x46
 8001abc:	d903      	bls.n	8001ac6 <HAL_DMA_Init+0x29a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b48      	cmp	r3, #72	; 0x48
 8001ac4:	d907      	bls.n	8001ad6 <HAL_DMA_Init+0x2aa>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b4e      	cmp	r3, #78	; 0x4e
 8001acc:	d905      	bls.n	8001ada <HAL_DMA_Init+0x2ae>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b52      	cmp	r3, #82	; 0x52
 8001ad4:	d801      	bhi.n	8001ada <HAL_DMA_Init+0x2ae>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_DMA_Init+0x2b0>
 8001ada:	2300      	movs	r3, #0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ae6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f023 0307 	bic.w	r3, r3, #7
 8001afe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d117      	bne.n	8001b42 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00e      	beq.n	8001b42 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f001 f9b9 	bl	8002e9c <DMA_CheckFifoParam>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2240      	movs	r2, #64	; 0x40
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e197      	b.n	8001e72 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f001 f8f4 	bl	8002d38 <DMA_CalcBaseAndBitshift>
 8001b50:	4603      	mov	r3, r0
 8001b52:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	223f      	movs	r2, #63	; 0x3f
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	e0cd      	b.n	8001d02 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a3b      	ldr	r2, [pc, #236]	; (8001c58 <HAL_DMA_Init+0x42c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d022      	beq.n	8001bb6 <HAL_DMA_Init+0x38a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a39      	ldr	r2, [pc, #228]	; (8001c5c <HAL_DMA_Init+0x430>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01d      	beq.n	8001bb6 <HAL_DMA_Init+0x38a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a38      	ldr	r2, [pc, #224]	; (8001c60 <HAL_DMA_Init+0x434>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d018      	beq.n	8001bb6 <HAL_DMA_Init+0x38a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a36      	ldr	r2, [pc, #216]	; (8001c64 <HAL_DMA_Init+0x438>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_DMA_Init+0x38a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a35      	ldr	r2, [pc, #212]	; (8001c68 <HAL_DMA_Init+0x43c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00e      	beq.n	8001bb6 <HAL_DMA_Init+0x38a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a33      	ldr	r2, [pc, #204]	; (8001c6c <HAL_DMA_Init+0x440>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d009      	beq.n	8001bb6 <HAL_DMA_Init+0x38a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a32      	ldr	r2, [pc, #200]	; (8001c70 <HAL_DMA_Init+0x444>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_Init+0x38a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a30      	ldr	r2, [pc, #192]	; (8001c74 <HAL_DMA_Init+0x448>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_DMA_Init+0x38e>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_DMA_Init+0x390>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 8097 	beq.w	8001cf0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a24      	ldr	r2, [pc, #144]	; (8001c58 <HAL_DMA_Init+0x42c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d021      	beq.n	8001c10 <HAL_DMA_Init+0x3e4>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <HAL_DMA_Init+0x430>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01c      	beq.n	8001c10 <HAL_DMA_Init+0x3e4>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <HAL_DMA_Init+0x434>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d017      	beq.n	8001c10 <HAL_DMA_Init+0x3e4>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <HAL_DMA_Init+0x438>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d012      	beq.n	8001c10 <HAL_DMA_Init+0x3e4>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <HAL_DMA_Init+0x43c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00d      	beq.n	8001c10 <HAL_DMA_Init+0x3e4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <HAL_DMA_Init+0x440>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d008      	beq.n	8001c10 <HAL_DMA_Init+0x3e4>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <HAL_DMA_Init+0x444>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d003      	beq.n	8001c10 <HAL_DMA_Init+0x3e4>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_DMA_Init+0x448>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_DMA_Init+0x44c>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d020      	beq.n	8001c7c <HAL_DMA_Init+0x450>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b80      	cmp	r3, #128	; 0x80
 8001c40:	d102      	bne.n	8001c48 <HAL_DMA_Init+0x41c>
 8001c42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c46:	e01a      	b.n	8001c7e <HAL_DMA_Init+0x452>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e018      	b.n	8001c7e <HAL_DMA_Init+0x452>
 8001c4c:	fe10803f 	.word	0xfe10803f
 8001c50:	5c001000 	.word	0x5c001000
 8001c54:	ffff0000 	.word	0xffff0000
 8001c58:	58025408 	.word	0x58025408
 8001c5c:	5802541c 	.word	0x5802541c
 8001c60:	58025430 	.word	0x58025430
 8001c64:	58025444 	.word	0x58025444
 8001c68:	58025458 	.word	0x58025458
 8001c6c:	5802546c 	.word	0x5802546c
 8001c70:	58025480 	.word	0x58025480
 8001c74:	58025494 	.word	0x58025494
 8001c78:	fffe000f 	.word	0xfffe000f
 8001c7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68d2      	ldr	r2, [r2, #12]
 8001c82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ca4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b6e      	ldr	r3, [pc, #440]	; (8001e7c <HAL_DMA_Init+0x650>)
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a6e      	ldr	r2, [pc, #440]	; (8001e80 <HAL_DMA_Init+0x654>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	009a      	lsls	r2, r3, #2
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f001 f82f 	bl	8002d38 <DMA_CalcBaseAndBitshift>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	e008      	b.n	8001d02 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0b7      	b.n	8001e72 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a5f      	ldr	r2, [pc, #380]	; (8001e84 <HAL_DMA_Init+0x658>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d072      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a5d      	ldr	r2, [pc, #372]	; (8001e88 <HAL_DMA_Init+0x65c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d06d      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a5c      	ldr	r2, [pc, #368]	; (8001e8c <HAL_DMA_Init+0x660>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d068      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a5a      	ldr	r2, [pc, #360]	; (8001e90 <HAL_DMA_Init+0x664>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d063      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a59      	ldr	r2, [pc, #356]	; (8001e94 <HAL_DMA_Init+0x668>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d05e      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a57      	ldr	r2, [pc, #348]	; (8001e98 <HAL_DMA_Init+0x66c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d059      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a56      	ldr	r2, [pc, #344]	; (8001e9c <HAL_DMA_Init+0x670>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d054      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a54      	ldr	r2, [pc, #336]	; (8001ea0 <HAL_DMA_Init+0x674>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d04f      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a53      	ldr	r2, [pc, #332]	; (8001ea4 <HAL_DMA_Init+0x678>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d04a      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a51      	ldr	r2, [pc, #324]	; (8001ea8 <HAL_DMA_Init+0x67c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d045      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a50      	ldr	r2, [pc, #320]	; (8001eac <HAL_DMA_Init+0x680>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d040      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a4e      	ldr	r2, [pc, #312]	; (8001eb0 <HAL_DMA_Init+0x684>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d03b      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a4d      	ldr	r2, [pc, #308]	; (8001eb4 <HAL_DMA_Init+0x688>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d036      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a4b      	ldr	r2, [pc, #300]	; (8001eb8 <HAL_DMA_Init+0x68c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d031      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a4a      	ldr	r2, [pc, #296]	; (8001ebc <HAL_DMA_Init+0x690>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d02c      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a48      	ldr	r2, [pc, #288]	; (8001ec0 <HAL_DMA_Init+0x694>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d027      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a47      	ldr	r2, [pc, #284]	; (8001ec4 <HAL_DMA_Init+0x698>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d022      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a45      	ldr	r2, [pc, #276]	; (8001ec8 <HAL_DMA_Init+0x69c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01d      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a44      	ldr	r2, [pc, #272]	; (8001ecc <HAL_DMA_Init+0x6a0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d018      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a42      	ldr	r2, [pc, #264]	; (8001ed0 <HAL_DMA_Init+0x6a4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a41      	ldr	r2, [pc, #260]	; (8001ed4 <HAL_DMA_Init+0x6a8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00e      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a3f      	ldr	r2, [pc, #252]	; (8001ed8 <HAL_DMA_Init+0x6ac>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d009      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a3e      	ldr	r2, [pc, #248]	; (8001edc <HAL_DMA_Init+0x6b0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d004      	beq.n	8001df2 <HAL_DMA_Init+0x5c6>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a3c      	ldr	r2, [pc, #240]	; (8001ee0 <HAL_DMA_Init+0x6b4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_DMA_Init+0x5ca>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_DMA_Init+0x5cc>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d032      	beq.n	8001e62 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f001 f8c9 	bl	8002f94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b80      	cmp	r3, #128	; 0x80
 8001e08:	d102      	bne.n	8001e10 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d010      	beq.n	8001e50 <HAL_DMA_Init+0x624>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d80c      	bhi.n	8001e50 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f001 f946 	bl	80030c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	e008      	b.n	8001e62 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	a7fdabf8 	.word	0xa7fdabf8
 8001e80:	cccccccd 	.word	0xcccccccd
 8001e84:	40020010 	.word	0x40020010
 8001e88:	40020028 	.word	0x40020028
 8001e8c:	40020040 	.word	0x40020040
 8001e90:	40020058 	.word	0x40020058
 8001e94:	40020070 	.word	0x40020070
 8001e98:	40020088 	.word	0x40020088
 8001e9c:	400200a0 	.word	0x400200a0
 8001ea0:	400200b8 	.word	0x400200b8
 8001ea4:	40020410 	.word	0x40020410
 8001ea8:	40020428 	.word	0x40020428
 8001eac:	40020440 	.word	0x40020440
 8001eb0:	40020458 	.word	0x40020458
 8001eb4:	40020470 	.word	0x40020470
 8001eb8:	40020488 	.word	0x40020488
 8001ebc:	400204a0 	.word	0x400204a0
 8001ec0:	400204b8 	.word	0x400204b8
 8001ec4:	58025408 	.word	0x58025408
 8001ec8:	5802541c 	.word	0x5802541c
 8001ecc:	58025430 	.word	0x58025430
 8001ed0:	58025444 	.word	0x58025444
 8001ed4:	58025458 	.word	0x58025458
 8001ed8:	5802546c 	.word	0x5802546c
 8001edc:	58025480 	.word	0x58025480
 8001ee0:	58025494 	.word	0x58025494

08001ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef0:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_DMA_IRQHandler+0x1ac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a67      	ldr	r2, [pc, #412]	; (8002094 <HAL_DMA_IRQHandler+0x1b0>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0a9b      	lsrs	r3, r3, #10
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a5f      	ldr	r2, [pc, #380]	; (8002098 <HAL_DMA_IRQHandler+0x1b4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d04a      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a5d      	ldr	r2, [pc, #372]	; (800209c <HAL_DMA_IRQHandler+0x1b8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d045      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a5c      	ldr	r2, [pc, #368]	; (80020a0 <HAL_DMA_IRQHandler+0x1bc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d040      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a5a      	ldr	r2, [pc, #360]	; (80020a4 <HAL_DMA_IRQHandler+0x1c0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d03b      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a59      	ldr	r2, [pc, #356]	; (80020a8 <HAL_DMA_IRQHandler+0x1c4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d036      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a57      	ldr	r2, [pc, #348]	; (80020ac <HAL_DMA_IRQHandler+0x1c8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d031      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a56      	ldr	r2, [pc, #344]	; (80020b0 <HAL_DMA_IRQHandler+0x1cc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d02c      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a54      	ldr	r2, [pc, #336]	; (80020b4 <HAL_DMA_IRQHandler+0x1d0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d027      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <HAL_DMA_IRQHandler+0x1d4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d022      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a51      	ldr	r2, [pc, #324]	; (80020bc <HAL_DMA_IRQHandler+0x1d8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01d      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a50      	ldr	r2, [pc, #320]	; (80020c0 <HAL_DMA_IRQHandler+0x1dc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d018      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a4e      	ldr	r2, [pc, #312]	; (80020c4 <HAL_DMA_IRQHandler+0x1e0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a4d      	ldr	r2, [pc, #308]	; (80020c8 <HAL_DMA_IRQHandler+0x1e4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00e      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a4b      	ldr	r2, [pc, #300]	; (80020cc <HAL_DMA_IRQHandler+0x1e8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d009      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <HAL_DMA_IRQHandler+0x1ec>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d004      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xd2>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a48      	ldr	r2, [pc, #288]	; (80020d4 <HAL_DMA_IRQHandler+0x1f0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_DMA_IRQHandler+0xd6>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_DMA_IRQHandler+0xd8>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 842b 	beq.w	8002818 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	2208      	movs	r2, #8
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80a2 	beq.w	800211c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2e      	ldr	r2, [pc, #184]	; (8002098 <HAL_DMA_IRQHandler+0x1b4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d04a      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a2d      	ldr	r2, [pc, #180]	; (800209c <HAL_DMA_IRQHandler+0x1b8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d045      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2b      	ldr	r2, [pc, #172]	; (80020a0 <HAL_DMA_IRQHandler+0x1bc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d040      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <HAL_DMA_IRQHandler+0x1c0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d03b      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <HAL_DMA_IRQHandler+0x1c4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d036      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a27      	ldr	r2, [pc, #156]	; (80020ac <HAL_DMA_IRQHandler+0x1c8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d031      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <HAL_DMA_IRQHandler+0x1cc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d02c      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a24      	ldr	r2, [pc, #144]	; (80020b4 <HAL_DMA_IRQHandler+0x1d0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d027      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a22      	ldr	r2, [pc, #136]	; (80020b8 <HAL_DMA_IRQHandler+0x1d4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d022      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a21      	ldr	r2, [pc, #132]	; (80020bc <HAL_DMA_IRQHandler+0x1d8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d01d      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <HAL_DMA_IRQHandler+0x1dc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d018      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1e      	ldr	r2, [pc, #120]	; (80020c4 <HAL_DMA_IRQHandler+0x1e0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d013      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <HAL_DMA_IRQHandler+0x1e4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00e      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <HAL_DMA_IRQHandler+0x1e8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d009      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <HAL_DMA_IRQHandler+0x1ec>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_DMA_IRQHandler+0x194>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_DMA_IRQHandler+0x1f0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d12f      	bne.n	80020d8 <HAL_DMA_IRQHandler+0x1f4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf14      	ite	ne
 8002086:	2301      	movne	r3, #1
 8002088:	2300      	moveq	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	e02e      	b.n	80020ec <HAL_DMA_IRQHandler+0x208>
 800208e:	bf00      	nop
 8002090:	24000000 	.word	0x24000000
 8002094:	1b4e81b5 	.word	0x1b4e81b5
 8002098:	40020010 	.word	0x40020010
 800209c:	40020028 	.word	0x40020028
 80020a0:	40020040 	.word	0x40020040
 80020a4:	40020058 	.word	0x40020058
 80020a8:	40020070 	.word	0x40020070
 80020ac:	40020088 	.word	0x40020088
 80020b0:	400200a0 	.word	0x400200a0
 80020b4:	400200b8 	.word	0x400200b8
 80020b8:	40020410 	.word	0x40020410
 80020bc:	40020428 	.word	0x40020428
 80020c0:	40020440 	.word	0x40020440
 80020c4:	40020458 	.word	0x40020458
 80020c8:	40020470 	.word	0x40020470
 80020cc:	40020488 	.word	0x40020488
 80020d0:	400204a0 	.word	0x400204a0
 80020d4:	400204b8 	.word	0x400204b8
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d015      	beq.n	800211c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0204 	bic.w	r2, r2, #4
 80020fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	2208      	movs	r2, #8
 800210a:	409a      	lsls	r2, r3
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	f043 0201 	orr.w	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d06e      	beq.n	8002210 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a69      	ldr	r2, [pc, #420]	; (80022dc <HAL_DMA_IRQHandler+0x3f8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d04a      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a67      	ldr	r2, [pc, #412]	; (80022e0 <HAL_DMA_IRQHandler+0x3fc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d045      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a66      	ldr	r2, [pc, #408]	; (80022e4 <HAL_DMA_IRQHandler+0x400>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d040      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a64      	ldr	r2, [pc, #400]	; (80022e8 <HAL_DMA_IRQHandler+0x404>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d03b      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a63      	ldr	r2, [pc, #396]	; (80022ec <HAL_DMA_IRQHandler+0x408>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d036      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a61      	ldr	r2, [pc, #388]	; (80022f0 <HAL_DMA_IRQHandler+0x40c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d031      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a60      	ldr	r2, [pc, #384]	; (80022f4 <HAL_DMA_IRQHandler+0x410>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d02c      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5e      	ldr	r2, [pc, #376]	; (80022f8 <HAL_DMA_IRQHandler+0x414>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d027      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5d      	ldr	r2, [pc, #372]	; (80022fc <HAL_DMA_IRQHandler+0x418>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d022      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5b      	ldr	r2, [pc, #364]	; (8002300 <HAL_DMA_IRQHandler+0x41c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01d      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a5a      	ldr	r2, [pc, #360]	; (8002304 <HAL_DMA_IRQHandler+0x420>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d018      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a58      	ldr	r2, [pc, #352]	; (8002308 <HAL_DMA_IRQHandler+0x424>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a57      	ldr	r2, [pc, #348]	; (800230c <HAL_DMA_IRQHandler+0x428>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00e      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a55      	ldr	r2, [pc, #340]	; (8002310 <HAL_DMA_IRQHandler+0x42c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d009      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a54      	ldr	r2, [pc, #336]	; (8002314 <HAL_DMA_IRQHandler+0x430>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d004      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2ee>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a52      	ldr	r2, [pc, #328]	; (8002318 <HAL_DMA_IRQHandler+0x434>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d10a      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x304>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e003      	b.n	80021f0 <HAL_DMA_IRQHandler+0x30c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2300      	movs	r3, #0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00d      	beq.n	8002210 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	2201      	movs	r2, #1
 80021fe:	409a      	lsls	r2, r3
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	f043 0202 	orr.w	r2, r3, #2
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	2204      	movs	r2, #4
 800221a:	409a      	lsls	r2, r3
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 808f 	beq.w	8002344 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2c      	ldr	r2, [pc, #176]	; (80022dc <HAL_DMA_IRQHandler+0x3f8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d04a      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <HAL_DMA_IRQHandler+0x3fc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d045      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a29      	ldr	r2, [pc, #164]	; (80022e4 <HAL_DMA_IRQHandler+0x400>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d040      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <HAL_DMA_IRQHandler+0x404>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d03b      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a26      	ldr	r2, [pc, #152]	; (80022ec <HAL_DMA_IRQHandler+0x408>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d036      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <HAL_DMA_IRQHandler+0x40c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d031      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <HAL_DMA_IRQHandler+0x410>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d02c      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <HAL_DMA_IRQHandler+0x414>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d027      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a20      	ldr	r2, [pc, #128]	; (80022fc <HAL_DMA_IRQHandler+0x418>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d022      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <HAL_DMA_IRQHandler+0x41c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d01d      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_DMA_IRQHandler+0x420>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d018      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_DMA_IRQHandler+0x424>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1a      	ldr	r2, [pc, #104]	; (800230c <HAL_DMA_IRQHandler+0x428>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00e      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_DMA_IRQHandler+0x42c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d009      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_DMA_IRQHandler+0x430>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d004      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x3e2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a15      	ldr	r2, [pc, #84]	; (8002318 <HAL_DMA_IRQHandler+0x434>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d12a      	bne.n	800231c <HAL_DMA_IRQHandler+0x438>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf14      	ite	ne
 80022d4:	2301      	movne	r3, #1
 80022d6:	2300      	moveq	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e023      	b.n	8002324 <HAL_DMA_IRQHandler+0x440>
 80022dc:	40020010 	.word	0x40020010
 80022e0:	40020028 	.word	0x40020028
 80022e4:	40020040 	.word	0x40020040
 80022e8:	40020058 	.word	0x40020058
 80022ec:	40020070 	.word	0x40020070
 80022f0:	40020088 	.word	0x40020088
 80022f4:	400200a0 	.word	0x400200a0
 80022f8:	400200b8 	.word	0x400200b8
 80022fc:	40020410 	.word	0x40020410
 8002300:	40020428 	.word	0x40020428
 8002304:	40020440 	.word	0x40020440
 8002308:	40020458 	.word	0x40020458
 800230c:	40020470 	.word	0x40020470
 8002310:	40020488 	.word	0x40020488
 8002314:	400204a0 	.word	0x400204a0
 8002318:	400204b8 	.word	0x400204b8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	2204      	movs	r2, #4
 8002332:	409a      	lsls	r2, r3
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	f043 0204 	orr.w	r2, r3, #4
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	2210      	movs	r2, #16
 800234e:	409a      	lsls	r2, r3
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a6 	beq.w	80024a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a85      	ldr	r2, [pc, #532]	; (8002574 <HAL_DMA_IRQHandler+0x690>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d04a      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a83      	ldr	r2, [pc, #524]	; (8002578 <HAL_DMA_IRQHandler+0x694>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d045      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a82      	ldr	r2, [pc, #520]	; (800257c <HAL_DMA_IRQHandler+0x698>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d040      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a80      	ldr	r2, [pc, #512]	; (8002580 <HAL_DMA_IRQHandler+0x69c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d03b      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7f      	ldr	r2, [pc, #508]	; (8002584 <HAL_DMA_IRQHandler+0x6a0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d036      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a7d      	ldr	r2, [pc, #500]	; (8002588 <HAL_DMA_IRQHandler+0x6a4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d031      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7c      	ldr	r2, [pc, #496]	; (800258c <HAL_DMA_IRQHandler+0x6a8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d02c      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a7a      	ldr	r2, [pc, #488]	; (8002590 <HAL_DMA_IRQHandler+0x6ac>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d027      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a79      	ldr	r2, [pc, #484]	; (8002594 <HAL_DMA_IRQHandler+0x6b0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d022      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a77      	ldr	r2, [pc, #476]	; (8002598 <HAL_DMA_IRQHandler+0x6b4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01d      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a76      	ldr	r2, [pc, #472]	; (800259c <HAL_DMA_IRQHandler+0x6b8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d018      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a74      	ldr	r2, [pc, #464]	; (80025a0 <HAL_DMA_IRQHandler+0x6bc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a73      	ldr	r2, [pc, #460]	; (80025a4 <HAL_DMA_IRQHandler+0x6c0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00e      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a71      	ldr	r2, [pc, #452]	; (80025a8 <HAL_DMA_IRQHandler+0x6c4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a70      	ldr	r2, [pc, #448]	; (80025ac <HAL_DMA_IRQHandler+0x6c8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_DMA_IRQHandler+0x516>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a6e      	ldr	r2, [pc, #440]	; (80025b0 <HAL_DMA_IRQHandler+0x6cc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d10a      	bne.n	8002410 <HAL_DMA_IRQHandler+0x52c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e009      	b.n	8002424 <HAL_DMA_IRQHandler+0x540>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	bf14      	ite	ne
 800241e:	2301      	movne	r3, #1
 8002420:	2300      	moveq	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d03e      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	2210      	movs	r2, #16
 8002432:	409a      	lsls	r2, r3
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d018      	beq.n	8002478 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d108      	bne.n	8002466 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d024      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
 8002464:	e01f      	b.n	80024a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01b      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
 8002476:	e016      	b.n	80024a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0208 	bic.w	r2, r2, #8
 8002494:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2220      	movs	r2, #32
 80024b0:	409a      	lsls	r2, r3
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8110 	beq.w	80026dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2c      	ldr	r2, [pc, #176]	; (8002574 <HAL_DMA_IRQHandler+0x690>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d04a      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a2b      	ldr	r2, [pc, #172]	; (8002578 <HAL_DMA_IRQHandler+0x694>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d045      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a29      	ldr	r2, [pc, #164]	; (800257c <HAL_DMA_IRQHandler+0x698>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d040      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a28      	ldr	r2, [pc, #160]	; (8002580 <HAL_DMA_IRQHandler+0x69c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d03b      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a26      	ldr	r2, [pc, #152]	; (8002584 <HAL_DMA_IRQHandler+0x6a0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d036      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a25      	ldr	r2, [pc, #148]	; (8002588 <HAL_DMA_IRQHandler+0x6a4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d031      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a23      	ldr	r2, [pc, #140]	; (800258c <HAL_DMA_IRQHandler+0x6a8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d02c      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a22      	ldr	r2, [pc, #136]	; (8002590 <HAL_DMA_IRQHandler+0x6ac>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d027      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a20      	ldr	r2, [pc, #128]	; (8002594 <HAL_DMA_IRQHandler+0x6b0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d022      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <HAL_DMA_IRQHandler+0x6b4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d01d      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1d      	ldr	r2, [pc, #116]	; (800259c <HAL_DMA_IRQHandler+0x6b8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d018      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <HAL_DMA_IRQHandler+0x6bc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_DMA_IRQHandler+0x6c0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00e      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <HAL_DMA_IRQHandler+0x6c4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a17      	ldr	r2, [pc, #92]	; (80025ac <HAL_DMA_IRQHandler+0x6c8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_DMA_IRQHandler+0x678>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_DMA_IRQHandler+0x6cc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d12b      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x6d0>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf14      	ite	ne
 800256a:	2301      	movne	r3, #1
 800256c:	2300      	moveq	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	e02a      	b.n	80025c8 <HAL_DMA_IRQHandler+0x6e4>
 8002572:	bf00      	nop
 8002574:	40020010 	.word	0x40020010
 8002578:	40020028 	.word	0x40020028
 800257c:	40020040 	.word	0x40020040
 8002580:	40020058 	.word	0x40020058
 8002584:	40020070 	.word	0x40020070
 8002588:	40020088 	.word	0x40020088
 800258c:	400200a0 	.word	0x400200a0
 8002590:	400200b8 	.word	0x400200b8
 8002594:	40020410 	.word	0x40020410
 8002598:	40020428 	.word	0x40020428
 800259c:	40020440 	.word	0x40020440
 80025a0:	40020458 	.word	0x40020458
 80025a4:	40020470 	.word	0x40020470
 80025a8:	40020488 	.word	0x40020488
 80025ac:	400204a0 	.word	0x400204a0
 80025b0:	400204b8 	.word	0x400204b8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf14      	ite	ne
 80025c2:	2301      	movne	r3, #1
 80025c4:	2300      	moveq	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8087 	beq.w	80026dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2220      	movs	r2, #32
 80025d8:	409a      	lsls	r2, r3
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d139      	bne.n	800265e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0216 	bic.w	r2, r2, #22
 80025f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002608:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <HAL_DMA_IRQHandler+0x736>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0208 	bic.w	r2, r2, #8
 8002628:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	223f      	movs	r2, #63	; 0x3f
 8002634:	409a      	lsls	r2, r3
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 834a 	beq.w	8002ce8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
          }
          return;
 800265c:	e344      	b.n	8002ce8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d018      	beq.n	800269e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d108      	bne.n	800268c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02c      	beq.n	80026dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4798      	blx	r3
 800268a:	e027      	b.n	80026dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d023      	beq.n	80026dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
 800269c:	e01e      	b.n	80026dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10f      	bne.n	80026cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0210 	bic.w	r2, r2, #16
 80026ba:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8306 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8088 	beq.w	8002804 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2204      	movs	r2, #4
 80026f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a7a      	ldr	r2, [pc, #488]	; (80028ec <HAL_DMA_IRQHandler+0xa08>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d04a      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a79      	ldr	r2, [pc, #484]	; (80028f0 <HAL_DMA_IRQHandler+0xa0c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d045      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a77      	ldr	r2, [pc, #476]	; (80028f4 <HAL_DMA_IRQHandler+0xa10>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d040      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a76      	ldr	r2, [pc, #472]	; (80028f8 <HAL_DMA_IRQHandler+0xa14>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d03b      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a74      	ldr	r2, [pc, #464]	; (80028fc <HAL_DMA_IRQHandler+0xa18>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d036      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a73      	ldr	r2, [pc, #460]	; (8002900 <HAL_DMA_IRQHandler+0xa1c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d031      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a71      	ldr	r2, [pc, #452]	; (8002904 <HAL_DMA_IRQHandler+0xa20>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d02c      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a70      	ldr	r2, [pc, #448]	; (8002908 <HAL_DMA_IRQHandler+0xa24>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d027      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6e      	ldr	r2, [pc, #440]	; (800290c <HAL_DMA_IRQHandler+0xa28>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d022      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a6d      	ldr	r2, [pc, #436]	; (8002910 <HAL_DMA_IRQHandler+0xa2c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d01d      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a6b      	ldr	r2, [pc, #428]	; (8002914 <HAL_DMA_IRQHandler+0xa30>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d018      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6a      	ldr	r2, [pc, #424]	; (8002918 <HAL_DMA_IRQHandler+0xa34>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d013      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a68      	ldr	r2, [pc, #416]	; (800291c <HAL_DMA_IRQHandler+0xa38>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00e      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a67      	ldr	r2, [pc, #412]	; (8002920 <HAL_DMA_IRQHandler+0xa3c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a65      	ldr	r2, [pc, #404]	; (8002924 <HAL_DMA_IRQHandler+0xa40>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d004      	beq.n	800279c <HAL_DMA_IRQHandler+0x8b8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a64      	ldr	r2, [pc, #400]	; (8002928 <HAL_DMA_IRQHandler+0xa44>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d108      	bne.n	80027ae <HAL_DMA_IRQHandler+0x8ca>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	e007      	b.n	80027be <HAL_DMA_IRQHandler+0x8da>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3301      	adds	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d307      	bcc.n	80027da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f2      	bne.n	80027be <HAL_DMA_IRQHandler+0x8da>
 80027d8:	e000      	b.n	80027dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80027da:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2203      	movs	r2, #3
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80027fa:	e003      	b.n	8002804 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8272 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
 8002816:	e26c      	b.n	8002cf2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a43      	ldr	r2, [pc, #268]	; (800292c <HAL_DMA_IRQHandler+0xa48>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d022      	beq.n	8002868 <HAL_DMA_IRQHandler+0x984>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a42      	ldr	r2, [pc, #264]	; (8002930 <HAL_DMA_IRQHandler+0xa4c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d01d      	beq.n	8002868 <HAL_DMA_IRQHandler+0x984>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a40      	ldr	r2, [pc, #256]	; (8002934 <HAL_DMA_IRQHandler+0xa50>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d018      	beq.n	8002868 <HAL_DMA_IRQHandler+0x984>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a3f      	ldr	r2, [pc, #252]	; (8002938 <HAL_DMA_IRQHandler+0xa54>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d013      	beq.n	8002868 <HAL_DMA_IRQHandler+0x984>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a3d      	ldr	r2, [pc, #244]	; (800293c <HAL_DMA_IRQHandler+0xa58>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00e      	beq.n	8002868 <HAL_DMA_IRQHandler+0x984>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3c      	ldr	r2, [pc, #240]	; (8002940 <HAL_DMA_IRQHandler+0xa5c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d009      	beq.n	8002868 <HAL_DMA_IRQHandler+0x984>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <HAL_DMA_IRQHandler+0xa60>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d004      	beq.n	8002868 <HAL_DMA_IRQHandler+0x984>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a39      	ldr	r2, [pc, #228]	; (8002948 <HAL_DMA_IRQHandler+0xa64>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d101      	bne.n	800286c <HAL_DMA_IRQHandler+0x988>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <HAL_DMA_IRQHandler+0x98a>
 800286c:	2300      	movs	r3, #0
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 823f 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	2204      	movs	r2, #4
 8002886:	409a      	lsls	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80cd 	beq.w	8002a2c <HAL_DMA_IRQHandler+0xb48>
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80c7 	beq.w	8002a2c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2204      	movs	r2, #4
 80028a8:	409a      	lsls	r2, r3
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d049      	beq.n	800294c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8210 	beq.w	8002cec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028d4:	e20a      	b.n	8002cec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8206 	beq.w	8002cec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028e8:	e200      	b.n	8002cec <HAL_DMA_IRQHandler+0xe08>
 80028ea:	bf00      	nop
 80028ec:	40020010 	.word	0x40020010
 80028f0:	40020028 	.word	0x40020028
 80028f4:	40020040 	.word	0x40020040
 80028f8:	40020058 	.word	0x40020058
 80028fc:	40020070 	.word	0x40020070
 8002900:	40020088 	.word	0x40020088
 8002904:	400200a0 	.word	0x400200a0
 8002908:	400200b8 	.word	0x400200b8
 800290c:	40020410 	.word	0x40020410
 8002910:	40020428 	.word	0x40020428
 8002914:	40020440 	.word	0x40020440
 8002918:	40020458 	.word	0x40020458
 800291c:	40020470 	.word	0x40020470
 8002920:	40020488 	.word	0x40020488
 8002924:	400204a0 	.word	0x400204a0
 8002928:	400204b8 	.word	0x400204b8
 800292c:	58025408 	.word	0x58025408
 8002930:	5802541c 	.word	0x5802541c
 8002934:	58025430 	.word	0x58025430
 8002938:	58025444 	.word	0x58025444
 800293c:	58025458 	.word	0x58025458
 8002940:	5802546c 	.word	0x5802546c
 8002944:	58025480 	.word	0x58025480
 8002948:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d160      	bne.n	8002a18 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a8c      	ldr	r2, [pc, #560]	; (8002b8c <HAL_DMA_IRQHandler+0xca8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d04a      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a8a      	ldr	r2, [pc, #552]	; (8002b90 <HAL_DMA_IRQHandler+0xcac>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d045      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a89      	ldr	r2, [pc, #548]	; (8002b94 <HAL_DMA_IRQHandler+0xcb0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d040      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a87      	ldr	r2, [pc, #540]	; (8002b98 <HAL_DMA_IRQHandler+0xcb4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d03b      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a86      	ldr	r2, [pc, #536]	; (8002b9c <HAL_DMA_IRQHandler+0xcb8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d036      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a84      	ldr	r2, [pc, #528]	; (8002ba0 <HAL_DMA_IRQHandler+0xcbc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d031      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a83      	ldr	r2, [pc, #524]	; (8002ba4 <HAL_DMA_IRQHandler+0xcc0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d02c      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a81      	ldr	r2, [pc, #516]	; (8002ba8 <HAL_DMA_IRQHandler+0xcc4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d027      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a80      	ldr	r2, [pc, #512]	; (8002bac <HAL_DMA_IRQHandler+0xcc8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d022      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7e      	ldr	r2, [pc, #504]	; (8002bb0 <HAL_DMA_IRQHandler+0xccc>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01d      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7d      	ldr	r2, [pc, #500]	; (8002bb4 <HAL_DMA_IRQHandler+0xcd0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d018      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a7b      	ldr	r2, [pc, #492]	; (8002bb8 <HAL_DMA_IRQHandler+0xcd4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7a      	ldr	r2, [pc, #488]	; (8002bbc <HAL_DMA_IRQHandler+0xcd8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00e      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a78      	ldr	r2, [pc, #480]	; (8002bc0 <HAL_DMA_IRQHandler+0xcdc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d009      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a77      	ldr	r2, [pc, #476]	; (8002bc4 <HAL_DMA_IRQHandler+0xce0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d004      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xb12>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a75      	ldr	r2, [pc, #468]	; (8002bc8 <HAL_DMA_IRQHandler+0xce4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d108      	bne.n	8002a08 <HAL_DMA_IRQHandler+0xb24>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0208 	bic.w	r2, r2, #8
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e007      	b.n	8002a18 <HAL_DMA_IRQHandler+0xb34>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0204 	bic.w	r2, r2, #4
 8002a16:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8165 	beq.w	8002cec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a2a:	e15f      	b.n	8002cec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	2202      	movs	r2, #2
 8002a36:	409a      	lsls	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80c5 	beq.w	8002bcc <HAL_DMA_IRQHandler+0xce8>
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80bf 	beq.w	8002bcc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2202      	movs	r2, #2
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d018      	beq.n	8002a9a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 813a 	beq.w	8002cf0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a84:	e134      	b.n	8002cf0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8130 	beq.w	8002cf0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a98:	e12a      	b.n	8002cf0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d168      	bne.n	8002b76 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a38      	ldr	r2, [pc, #224]	; (8002b8c <HAL_DMA_IRQHandler+0xca8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d04a      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a37      	ldr	r2, [pc, #220]	; (8002b90 <HAL_DMA_IRQHandler+0xcac>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d045      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a35      	ldr	r2, [pc, #212]	; (8002b94 <HAL_DMA_IRQHandler+0xcb0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d040      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a34      	ldr	r2, [pc, #208]	; (8002b98 <HAL_DMA_IRQHandler+0xcb4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d03b      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a32      	ldr	r2, [pc, #200]	; (8002b9c <HAL_DMA_IRQHandler+0xcb8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d036      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a31      	ldr	r2, [pc, #196]	; (8002ba0 <HAL_DMA_IRQHandler+0xcbc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d031      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a2f      	ldr	r2, [pc, #188]	; (8002ba4 <HAL_DMA_IRQHandler+0xcc0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d02c      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a2e      	ldr	r2, [pc, #184]	; (8002ba8 <HAL_DMA_IRQHandler+0xcc4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d027      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2c      	ldr	r2, [pc, #176]	; (8002bac <HAL_DMA_IRQHandler+0xcc8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d022      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2b      	ldr	r2, [pc, #172]	; (8002bb0 <HAL_DMA_IRQHandler+0xccc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d01d      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a29      	ldr	r2, [pc, #164]	; (8002bb4 <HAL_DMA_IRQHandler+0xcd0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d018      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <HAL_DMA_IRQHandler+0xcd4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <HAL_DMA_IRQHandler+0xcd8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00e      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <HAL_DMA_IRQHandler+0xcdc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d009      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a23      	ldr	r2, [pc, #140]	; (8002bc4 <HAL_DMA_IRQHandler+0xce0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d004      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc60>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <HAL_DMA_IRQHandler+0xce4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d108      	bne.n	8002b56 <HAL_DMA_IRQHandler+0xc72>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0214 	bic.w	r2, r2, #20
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e007      	b.n	8002b66 <HAL_DMA_IRQHandler+0xc82>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 020a 	bic.w	r2, r2, #10
 8002b64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80b8 	beq.w	8002cf0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b88:	e0b2      	b.n	8002cf0 <HAL_DMA_IRQHandler+0xe0c>
 8002b8a:	bf00      	nop
 8002b8c:	40020010 	.word	0x40020010
 8002b90:	40020028 	.word	0x40020028
 8002b94:	40020040 	.word	0x40020040
 8002b98:	40020058 	.word	0x40020058
 8002b9c:	40020070 	.word	0x40020070
 8002ba0:	40020088 	.word	0x40020088
 8002ba4:	400200a0 	.word	0x400200a0
 8002ba8:	400200b8 	.word	0x400200b8
 8002bac:	40020410 	.word	0x40020410
 8002bb0:	40020428 	.word	0x40020428
 8002bb4:	40020440 	.word	0x40020440
 8002bb8:	40020458 	.word	0x40020458
 8002bbc:	40020470 	.word	0x40020470
 8002bc0:	40020488 	.word	0x40020488
 8002bc4:	400204a0 	.word	0x400204a0
 8002bc8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8088 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0xe0e>
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8082 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a41      	ldr	r2, [pc, #260]	; (8002cf8 <HAL_DMA_IRQHandler+0xe14>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d04a      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3f      	ldr	r2, [pc, #252]	; (8002cfc <HAL_DMA_IRQHandler+0xe18>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d045      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a3e      	ldr	r2, [pc, #248]	; (8002d00 <HAL_DMA_IRQHandler+0xe1c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d040      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a3c      	ldr	r2, [pc, #240]	; (8002d04 <HAL_DMA_IRQHandler+0xe20>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d03b      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a3b      	ldr	r2, [pc, #236]	; (8002d08 <HAL_DMA_IRQHandler+0xe24>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d036      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a39      	ldr	r2, [pc, #228]	; (8002d0c <HAL_DMA_IRQHandler+0xe28>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d031      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a38      	ldr	r2, [pc, #224]	; (8002d10 <HAL_DMA_IRQHandler+0xe2c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d02c      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a36      	ldr	r2, [pc, #216]	; (8002d14 <HAL_DMA_IRQHandler+0xe30>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d027      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a35      	ldr	r2, [pc, #212]	; (8002d18 <HAL_DMA_IRQHandler+0xe34>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a33      	ldr	r2, [pc, #204]	; (8002d1c <HAL_DMA_IRQHandler+0xe38>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01d      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a32      	ldr	r2, [pc, #200]	; (8002d20 <HAL_DMA_IRQHandler+0xe3c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d018      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a30      	ldr	r2, [pc, #192]	; (8002d24 <HAL_DMA_IRQHandler+0xe40>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <HAL_DMA_IRQHandler+0xe44>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2d      	ldr	r2, [pc, #180]	; (8002d2c <HAL_DMA_IRQHandler+0xe48>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2c      	ldr	r2, [pc, #176]	; (8002d30 <HAL_DMA_IRQHandler+0xe4c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xdaa>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <HAL_DMA_IRQHandler+0xe50>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d108      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0xdbc>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 021c 	bic.w	r2, r2, #28
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e007      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xdcc>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 020e 	bic.w	r2, r2, #14
 8002cae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2201      	movs	r2, #1
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
 8002ce6:	e004      	b.n	8002cf2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002ce8:	bf00      	nop
 8002cea:	e002      	b.n	8002cf2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cec:	bf00      	nop
 8002cee:	e000      	b.n	8002cf2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cf0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002cf2:	3728      	adds	r7, #40	; 0x28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40020010 	.word	0x40020010
 8002cfc:	40020028 	.word	0x40020028
 8002d00:	40020040 	.word	0x40020040
 8002d04:	40020058 	.word	0x40020058
 8002d08:	40020070 	.word	0x40020070
 8002d0c:	40020088 	.word	0x40020088
 8002d10:	400200a0 	.word	0x400200a0
 8002d14:	400200b8 	.word	0x400200b8
 8002d18:	40020410 	.word	0x40020410
 8002d1c:	40020428 	.word	0x40020428
 8002d20:	40020440 	.word	0x40020440
 8002d24:	40020458 	.word	0x40020458
 8002d28:	40020470 	.word	0x40020470
 8002d2c:	40020488 	.word	0x40020488
 8002d30:	400204a0 	.word	0x400204a0
 8002d34:	400204b8 	.word	0x400204b8

08002d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a42      	ldr	r2, [pc, #264]	; (8002e50 <DMA_CalcBaseAndBitshift+0x118>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d04a      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a41      	ldr	r2, [pc, #260]	; (8002e54 <DMA_CalcBaseAndBitshift+0x11c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d045      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a3f      	ldr	r2, [pc, #252]	; (8002e58 <DMA_CalcBaseAndBitshift+0x120>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d040      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3e      	ldr	r2, [pc, #248]	; (8002e5c <DMA_CalcBaseAndBitshift+0x124>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d03b      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a3c      	ldr	r2, [pc, #240]	; (8002e60 <DMA_CalcBaseAndBitshift+0x128>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d036      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a3b      	ldr	r2, [pc, #236]	; (8002e64 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d031      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a39      	ldr	r2, [pc, #228]	; (8002e68 <DMA_CalcBaseAndBitshift+0x130>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d02c      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a38      	ldr	r2, [pc, #224]	; (8002e6c <DMA_CalcBaseAndBitshift+0x134>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d027      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a36      	ldr	r2, [pc, #216]	; (8002e70 <DMA_CalcBaseAndBitshift+0x138>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d022      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a35      	ldr	r2, [pc, #212]	; (8002e74 <DMA_CalcBaseAndBitshift+0x13c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d01d      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a33      	ldr	r2, [pc, #204]	; (8002e78 <DMA_CalcBaseAndBitshift+0x140>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d018      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a32      	ldr	r2, [pc, #200]	; (8002e7c <DMA_CalcBaseAndBitshift+0x144>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a30      	ldr	r2, [pc, #192]	; (8002e80 <DMA_CalcBaseAndBitshift+0x148>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2f      	ldr	r2, [pc, #188]	; (8002e84 <DMA_CalcBaseAndBitshift+0x14c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d009      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <DMA_CalcBaseAndBitshift+0x150>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2c      	ldr	r2, [pc, #176]	; (8002e8c <DMA_CalcBaseAndBitshift+0x154>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <DMA_CalcBaseAndBitshift+0xac>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <DMA_CalcBaseAndBitshift+0xae>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d024      	beq.n	8002e34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3b10      	subs	r3, #16
 8002df2:	4a27      	ldr	r2, [pc, #156]	; (8002e90 <DMA_CalcBaseAndBitshift+0x158>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	4a24      	ldr	r2, [pc, #144]	; (8002e94 <DMA_CalcBaseAndBitshift+0x15c>)
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	461a      	mov	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d908      	bls.n	8002e24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <DMA_CalcBaseAndBitshift+0x160>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	1d1a      	adds	r2, r3, #4
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	659a      	str	r2, [r3, #88]	; 0x58
 8002e22:	e00d      	b.n	8002e40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <DMA_CalcBaseAndBitshift+0x160>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6593      	str	r3, [r2, #88]	; 0x58
 8002e32:	e005      	b.n	8002e40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40020010 	.word	0x40020010
 8002e54:	40020028 	.word	0x40020028
 8002e58:	40020040 	.word	0x40020040
 8002e5c:	40020058 	.word	0x40020058
 8002e60:	40020070 	.word	0x40020070
 8002e64:	40020088 	.word	0x40020088
 8002e68:	400200a0 	.word	0x400200a0
 8002e6c:	400200b8 	.word	0x400200b8
 8002e70:	40020410 	.word	0x40020410
 8002e74:	40020428 	.word	0x40020428
 8002e78:	40020440 	.word	0x40020440
 8002e7c:	40020458 	.word	0x40020458
 8002e80:	40020470 	.word	0x40020470
 8002e84:	40020488 	.word	0x40020488
 8002e88:	400204a0 	.word	0x400204a0
 8002e8c:	400204b8 	.word	0x400204b8
 8002e90:	aaaaaaab 	.word	0xaaaaaaab
 8002e94:	08012960 	.word	0x08012960
 8002e98:	fffffc00 	.word	0xfffffc00

08002e9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d120      	bne.n	8002ef2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d858      	bhi.n	8002f6a <DMA_CheckFifoParam+0xce>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <DMA_CheckFifoParam+0x24>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	08002ee3 	.word	0x08002ee3
 8002ec8:	08002ed1 	.word	0x08002ed1
 8002ecc:	08002f6b 	.word	0x08002f6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d048      	beq.n	8002f6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ee0:	e045      	b.n	8002f6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eea:	d142      	bne.n	8002f72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ef0:	e03f      	b.n	8002f72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efa:	d123      	bne.n	8002f44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d838      	bhi.n	8002f76 <DMA_CheckFifoParam+0xda>
 8002f04:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <DMA_CheckFifoParam+0x70>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f23 	.word	0x08002f23
 8002f14:	08002f1d 	.word	0x08002f1d
 8002f18:	08002f35 	.word	0x08002f35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
        break;
 8002f20:	e030      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d025      	beq.n	8002f7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f32:	e022      	b.n	8002f7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f3c:	d11f      	bne.n	8002f7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f42:	e01c      	b.n	8002f7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d902      	bls.n	8002f52 <DMA_CheckFifoParam+0xb6>
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d003      	beq.n	8002f58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002f50:	e018      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
        break;
 8002f56:	e015      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
    break;
 8002f68:	e00b      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
        break;
 8002f6a:	bf00      	nop
 8002f6c:	e00a      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        break;
 8002f6e:	bf00      	nop
 8002f70:	e008      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        break;
 8002f72:	bf00      	nop
 8002f74:	e006      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        break;
 8002f76:	bf00      	nop
 8002f78:	e004      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        break;
 8002f7a:	bf00      	nop
 8002f7c:	e002      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        break;
 8002f7e:	bf00      	nop
 8002f80:	e000      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
    break;
 8002f82:	bf00      	nop
    }
  }

  return status;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a38      	ldr	r2, [pc, #224]	; (8003088 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d022      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a36      	ldr	r2, [pc, #216]	; (800308c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01d      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a35      	ldr	r2, [pc, #212]	; (8003090 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d018      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a33      	ldr	r2, [pc, #204]	; (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a32      	ldr	r2, [pc, #200]	; (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a30      	ldr	r2, [pc, #192]	; (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d009      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2f      	ldr	r2, [pc, #188]	; (80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2d      	ldr	r2, [pc, #180]	; (80030a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01a      	beq.n	8003032 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	3b08      	subs	r3, #8
 8003004:	4a28      	ldr	r2, [pc, #160]	; (80030a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4b26      	ldr	r3, [pc, #152]	; (80030ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003020:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2201      	movs	r2, #1
 800302a:	409a      	lsls	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003030:	e024      	b.n	800307c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3b10      	subs	r3, #16
 800303a:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4a1c      	ldr	r2, [pc, #112]	; (80030b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d806      	bhi.n	800305a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4a1b      	ldr	r2, [pc, #108]	; (80030bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d902      	bls.n	800305a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3308      	adds	r3, #8
 8003058:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	461a      	mov	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800306c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2201      	movs	r2, #1
 8003076:	409a      	lsls	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	58025408 	.word	0x58025408
 800308c:	5802541c 	.word	0x5802541c
 8003090:	58025430 	.word	0x58025430
 8003094:	58025444 	.word	0x58025444
 8003098:	58025458 	.word	0x58025458
 800309c:	5802546c 	.word	0x5802546c
 80030a0:	58025480 	.word	0x58025480
 80030a4:	58025494 	.word	0x58025494
 80030a8:	cccccccd 	.word	0xcccccccd
 80030ac:	16009600 	.word	0x16009600
 80030b0:	58025880 	.word	0x58025880
 80030b4:	aaaaaaab 	.word	0xaaaaaaab
 80030b8:	400204b8 	.word	0x400204b8
 80030bc:	4002040f 	.word	0x4002040f
 80030c0:	10008200 	.word	0x10008200
 80030c4:	40020880 	.word	0x40020880

080030c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d04a      	beq.n	8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d847      	bhi.n	8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a25      	ldr	r2, [pc, #148]	; (8003180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d022      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a24      	ldr	r2, [pc, #144]	; (8003184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01d      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a22      	ldr	r2, [pc, #136]	; (8003188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d018      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a21      	ldr	r2, [pc, #132]	; (800318c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00e      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d009      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1b      	ldr	r2, [pc, #108]	; (800319c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003138:	2300      	movs	r3, #0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	461a      	mov	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003150:	671a      	str	r2, [r3, #112]	; 0x70
 8003152:	e009      	b.n	8003168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a11      	ldr	r2, [pc, #68]	; (80031ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003166:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3b01      	subs	r3, #1
 800316c:	2201      	movs	r2, #1
 800316e:	409a      	lsls	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	58025408 	.word	0x58025408
 8003184:	5802541c 	.word	0x5802541c
 8003188:	58025430 	.word	0x58025430
 800318c:	58025444 	.word	0x58025444
 8003190:	58025458 	.word	0x58025458
 8003194:	5802546c 	.word	0x5802546c
 8003198:	58025480 	.word	0x58025480
 800319c:	58025494 	.word	0x58025494
 80031a0:	1600963f 	.word	0x1600963f
 80031a4:	58025940 	.word	0x58025940
 80031a8:	1000823f 	.word	0x1000823f
 80031ac:	40020940 	.word	0x40020940

080031b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b098      	sub	sp, #96	; 0x60
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80031b8:	4a84      	ldr	r2, [pc, #528]	; (80033cc <HAL_FDCAN_Init+0x21c>)
 80031ba:	f107 030c 	add.w	r3, r7, #12
 80031be:	4611      	mov	r1, r2
 80031c0:	224c      	movs	r2, #76	; 0x4c
 80031c2:	4618      	mov	r0, r3
 80031c4:	f00f fa5c 	bl	8012680 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e1ca      	b.n	8003568 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a7e      	ldr	r2, [pc, #504]	; (80033d0 <HAL_FDCAN_Init+0x220>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d106      	bne.n	80031ea <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031e4:	461a      	mov	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fe1a 	bl	8000e38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0210 	bic.w	r2, r2, #16
 8003212:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003214:	f7fe f9c0 	bl	8001598 <HAL_GetTick>
 8003218:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800321a:	e014      	b.n	8003246 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800321c:	f7fe f9bc 	bl	8001598 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b0a      	cmp	r3, #10
 8003228:	d90d      	bls.n	8003246 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2203      	movs	r2, #3
 800323e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e190      	b.n	8003568 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b08      	cmp	r3, #8
 8003252:	d0e3      	beq.n	800321c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003264:	f7fe f998 	bl	8001598 <HAL_GetTick>
 8003268:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800326a:	e014      	b.n	8003296 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800326c:	f7fe f994 	bl	8001598 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b0a      	cmp	r3, #10
 8003278:	d90d      	bls.n	8003296 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2203      	movs	r2, #3
 800328e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e168      	b.n	8003568 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0e3      	beq.n	800326c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0202 	orr.w	r2, r2, #2
 80032b2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7c1b      	ldrb	r3, [r3, #16]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d108      	bne.n	80032ce <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ca:	619a      	str	r2, [r3, #24]
 80032cc:	e007      	b.n	80032de <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032dc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7c5b      	ldrb	r3, [r3, #17]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d108      	bne.n	80032f8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f4:	619a      	str	r2, [r3, #24]
 80032f6:	e007      	b.n	8003308 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003306:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7c9b      	ldrb	r3, [r3, #18]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d108      	bne.n	8003322 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800331e:	619a      	str	r2, [r3, #24]
 8003320:	e007      	b.n	8003332 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003330:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003356:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0210 	bic.w	r2, r2, #16
 8003366:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d108      	bne.n	8003382 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0204 	orr.w	r2, r2, #4
 800337e:	619a      	str	r2, [r3, #24]
 8003380:	e030      	b.n	80033e4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d02c      	beq.n	80033e4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d020      	beq.n	80033d4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699a      	ldr	r2, [r3, #24]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033a0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0210 	orr.w	r2, r2, #16
 80033b0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d114      	bne.n	80033e4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699a      	ldr	r2, [r3, #24]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0220 	orr.w	r2, r2, #32
 80033c8:	619a      	str	r2, [r3, #24]
 80033ca:	e00b      	b.n	80033e4 <HAL_FDCAN_Init+0x234>
 80033cc:	0801286c 	.word	0x0801286c
 80033d0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0220 	orr.w	r2, r2, #32
 80033e2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033f4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033fc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	3b01      	subs	r3, #1
 8003406:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800340c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800340e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003418:	d115      	bne.n	8003446 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	3b01      	subs	r3, #1
 8003426:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003428:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	3b01      	subs	r3, #1
 8003430:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003432:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	3b01      	subs	r3, #1
 800343c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003442:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003444:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	4413      	add	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d012      	beq.n	8003498 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800347a:	f023 0107 	bic.w	r1, r3, #7
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003488:	4413      	add	r3, r2
 800348a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d012      	beq.n	80034c6 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034a8:	f023 0107 	bic.w	r1, r3, #7
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034b6:	4413      	add	r3, r2
 80034b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d013      	beq.n	80034f6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034d6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034e4:	4413      	add	r3, r2
 80034e6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80034ea:	011a      	lsls	r2, r3, #4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d013      	beq.n	8003526 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003506:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003514:	4413      	add	r3, r2
 8003516:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a11      	ldr	r2, [pc, #68]	; (8003570 <HAL_FDCAN_Init+0x3c0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d107      	bne.n	8003540 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f022 0203 	bic.w	r2, r2, #3
 800353e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f80b 	bl	8003574 <FDCAN_CalcultateRamBlockAddresses>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003564:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003568:	4618      	mov	r0, r3
 800356a:	3760      	adds	r7, #96	; 0x60
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	4000a000 	.word	0x4000a000

08003574 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800358a:	4ba7      	ldr	r3, [pc, #668]	; (8003828 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800358c:	4013      	ands	r3, r2
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	0091      	lsls	r1, r2, #2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	430b      	orrs	r3, r1
 8003598:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	041a      	lsls	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	4413      	add	r3, r2
 80035c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035ca:	4b97      	ldr	r3, [pc, #604]	; (8003828 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	0091      	lsls	r1, r2, #2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	430b      	orrs	r3, r1
 80035d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	041a      	lsls	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	4413      	add	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800360c:	4b86      	ldr	r3, [pc, #536]	; (8003828 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800360e:	4013      	ands	r3, r2
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	0091      	lsls	r1, r2, #2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	430b      	orrs	r3, r1
 800361a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003626:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	041a      	lsls	r2, r3, #16
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4413      	add	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003654:	4b74      	ldr	r3, [pc, #464]	; (8003828 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003656:	4013      	ands	r3, r2
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	0091      	lsls	r1, r2, #2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	430b      	orrs	r3, r1
 8003662:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800366e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003676:	041a      	lsls	r2, r3, #16
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4413      	add	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800369c:	4b62      	ldr	r3, [pc, #392]	; (8003828 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800369e:	4013      	ands	r3, r2
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	0091      	lsls	r1, r2, #2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4413      	add	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80036c8:	4b57      	ldr	r3, [pc, #348]	; (8003828 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	0091      	lsls	r1, r2, #2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036e2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	041a      	lsls	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	4413      	add	r3, r2
 8003700:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800370a:	4b47      	ldr	r3, [pc, #284]	; (8003828 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800370c:	4013      	ands	r3, r2
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	0091      	lsls	r1, r2, #2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	430b      	orrs	r3, r1
 8003718:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003724:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	041a      	lsls	r2, r3, #16
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003740:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003748:	061a      	lsls	r2, r3, #24
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003758:	4b34      	ldr	r3, [pc, #208]	; (800382c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800375a:	4413      	add	r3, r2
 800375c:	009a      	lsls	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	441a      	add	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	441a      	add	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	441a      	add	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	4a04      	ldr	r2, [pc, #16]	; (8003830 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d915      	bls.n	8003850 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003824:	e006      	b.n	8003834 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003826:	bf00      	nop
 8003828:	ffff0003 	.word	0xffff0003
 800382c:	10002b00 	.word	0x10002b00
 8003830:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2203      	movs	r2, #3
 8003848:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e010      	b.n	8003872 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e005      	b.n	8003864 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	3304      	adds	r3, #4
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	429a      	cmp	r2, r3
 800386e:	d3f3      	bcc.n	8003858 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop

08003880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003880:	b480      	push	{r7}
 8003882:	b089      	sub	sp, #36	; 0x24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800388e:	4b89      	ldr	r3, [pc, #548]	; (8003ab4 <HAL_GPIO_Init+0x234>)
 8003890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003892:	e194      	b.n	8003bbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2101      	movs	r1, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8186 	beq.w	8003bb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d00b      	beq.n	80038cc <HAL_GPIO_Init+0x4c>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d007      	beq.n	80038cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038c0:	2b11      	cmp	r3, #17
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b12      	cmp	r3, #18
 80038ca:	d130      	bne.n	800392e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	2203      	movs	r2, #3
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003902:	2201      	movs	r2, #1
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 0201 	and.w	r2, r3, #1
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	2203      	movs	r2, #3
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0xee>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b12      	cmp	r3, #18
 800396c:	d123      	bne.n	80039b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	08da      	lsrs	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3208      	adds	r2, #8
 8003976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	220f      	movs	r2, #15
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	08da      	lsrs	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3208      	adds	r2, #8
 80039b0:	69b9      	ldr	r1, [r7, #24]
 80039b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	2203      	movs	r2, #3
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0203 	and.w	r2, r3, #3
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80e0 	beq.w	8003bb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f8:	4b2f      	ldr	r3, [pc, #188]	; (8003ab8 <HAL_GPIO_Init+0x238>)
 80039fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039fe:	4a2e      	ldr	r2, [pc, #184]	; (8003ab8 <HAL_GPIO_Init+0x238>)
 8003a00:	f043 0302 	orr.w	r3, r3, #2
 8003a04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a08:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_GPIO_Init+0x238>)
 8003a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a16:	4a29      	ldr	r2, [pc, #164]	; (8003abc <HAL_GPIO_Init+0x23c>)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a20      	ldr	r2, [pc, #128]	; (8003ac0 <HAL_GPIO_Init+0x240>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d052      	beq.n	8003ae8 <HAL_GPIO_Init+0x268>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <HAL_GPIO_Init+0x244>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d031      	beq.n	8003aae <HAL_GPIO_Init+0x22e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ac8 <HAL_GPIO_Init+0x248>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02b      	beq.n	8003aaa <HAL_GPIO_Init+0x22a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <HAL_GPIO_Init+0x24c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d025      	beq.n	8003aa6 <HAL_GPIO_Init+0x226>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <HAL_GPIO_Init+0x250>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01f      	beq.n	8003aa2 <HAL_GPIO_Init+0x222>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a1b      	ldr	r2, [pc, #108]	; (8003ad4 <HAL_GPIO_Init+0x254>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d019      	beq.n	8003a9e <HAL_GPIO_Init+0x21e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <HAL_GPIO_Init+0x258>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_GPIO_Init+0x21a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_GPIO_Init+0x25c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00d      	beq.n	8003a96 <HAL_GPIO_Init+0x216>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_GPIO_Init+0x260>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <HAL_GPIO_Init+0x212>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <HAL_GPIO_Init+0x264>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_GPIO_Init+0x20e>
 8003a8a:	2309      	movs	r3, #9
 8003a8c:	e02d      	b.n	8003aea <HAL_GPIO_Init+0x26a>
 8003a8e:	230a      	movs	r3, #10
 8003a90:	e02b      	b.n	8003aea <HAL_GPIO_Init+0x26a>
 8003a92:	2308      	movs	r3, #8
 8003a94:	e029      	b.n	8003aea <HAL_GPIO_Init+0x26a>
 8003a96:	2307      	movs	r3, #7
 8003a98:	e027      	b.n	8003aea <HAL_GPIO_Init+0x26a>
 8003a9a:	2306      	movs	r3, #6
 8003a9c:	e025      	b.n	8003aea <HAL_GPIO_Init+0x26a>
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	e023      	b.n	8003aea <HAL_GPIO_Init+0x26a>
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	e021      	b.n	8003aea <HAL_GPIO_Init+0x26a>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e01f      	b.n	8003aea <HAL_GPIO_Init+0x26a>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e01d      	b.n	8003aea <HAL_GPIO_Init+0x26a>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e01b      	b.n	8003aea <HAL_GPIO_Init+0x26a>
 8003ab2:	bf00      	nop
 8003ab4:	58000080 	.word	0x58000080
 8003ab8:	58024400 	.word	0x58024400
 8003abc:	58000400 	.word	0x58000400
 8003ac0:	58020000 	.word	0x58020000
 8003ac4:	58020400 	.word	0x58020400
 8003ac8:	58020800 	.word	0x58020800
 8003acc:	58020c00 	.word	0x58020c00
 8003ad0:	58021000 	.word	0x58021000
 8003ad4:	58021400 	.word	0x58021400
 8003ad8:	58021800 	.word	0x58021800
 8003adc:	58021c00 	.word	0x58021c00
 8003ae0:	58022000 	.word	0x58022000
 8003ae4:	58022400 	.word	0x58022400
 8003ae8:	2300      	movs	r3, #0
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	f002 0203 	and.w	r2, r2, #3
 8003af0:	0092      	lsls	r2, r2, #2
 8003af2:	4093      	lsls	r3, r2
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003afa:	4938      	ldr	r1, [pc, #224]	; (8003bdc <HAL_GPIO_Init+0x35c>)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	3302      	adds	r3, #2
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f47f ae63 	bne.w	8003894 <HAL_GPIO_Init+0x14>
  }
}
 8003bce:	bf00      	nop
 8003bd0:	3724      	adds	r7, #36	; 0x24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	58000400 	.word	0x58000400

08003be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
 8003bec:	4613      	mov	r3, r2
 8003bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bf0:	787b      	ldrb	r3, [r7, #1]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bf6:	887a      	ldrh	r2, [r7, #2]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003bfc:	e003      	b.n	8003c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bfe:	887b      	ldrh	r3, [r7, #2]
 8003c00:	041a      	lsls	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	619a      	str	r2, [r3, #24]
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	887b      	ldrh	r3, [r7, #2]
 8003c24:	401a      	ands	r2, r3
 8003c26:	887b      	ldrh	r3, [r7, #2]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d104      	bne.n	8003c36 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c2c:	887b      	ldrh	r3, [r7, #2]
 8003c2e:	041a      	lsls	r2, r3, #16
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003c34:	e002      	b.n	8003c3c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4a:	b08f      	sub	sp, #60	; 0x3c
 8003c4c:	af0a      	add	r7, sp, #40	; 0x28
 8003c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e116      	b.n	8003e88 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f00e f9ab 	bl	8011fd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f007 fd04 	bl	800b6a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	687e      	ldr	r6, [r7, #4]
 8003ca6:	466d      	mov	r5, sp
 8003ca8:	f106 0410 	add.w	r4, r6, #16
 8003cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cbc:	1d33      	adds	r3, r6, #4
 8003cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cc0:	6838      	ldr	r0, [r7, #0]
 8003cc2:	f007 fbdb 	bl	800b47c <USB_CoreInit>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0d7      	b.n	8003e88 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f007 fcf2 	bl	800b6c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e04a      	b.n	8003d80 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cea:	7bfa      	ldrb	r2, [r7, #15]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	333d      	adds	r3, #61	; 0x3d
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	333c      	adds	r3, #60	; 0x3c
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	b298      	uxth	r0, r3
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	3342      	adds	r3, #66	; 0x42
 8003d26:	4602      	mov	r2, r0
 8003d28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d2a:	7bfa      	ldrb	r2, [r7, #15]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	333f      	adds	r3, #63	; 0x3f
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d3e:	7bfa      	ldrb	r2, [r7, #15]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3344      	adds	r3, #68	; 0x44
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d52:	7bfa      	ldrb	r2, [r7, #15]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3348      	adds	r3, #72	; 0x48
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3350      	adds	r3, #80	; 0x50
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
 8003d80:	7bfa      	ldrb	r2, [r7, #15]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d3af      	bcc.n	8003cea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
 8003d8e:	e044      	b.n	8003e1a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003da6:	7bfa      	ldrb	r2, [r7, #15]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003de8:	7bfa      	ldrb	r2, [r7, #15]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dfe:	7bfa      	ldrb	r2, [r7, #15]
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	3301      	adds	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d3b5      	bcc.n	8003d90 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	687e      	ldr	r6, [r7, #4]
 8003e2c:	466d      	mov	r5, sp
 8003e2e:	f106 0410 	add.w	r4, r6, #16
 8003e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e42:	1d33      	adds	r3, r6, #4
 8003e44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e46:	6838      	ldr	r0, [r7, #0]
 8003e48:	f007 fc68 	bl	800b71c <USB_DevInit>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e014      	b.n	8003e88 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d102      	bne.n	8003e7c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f001 f8be 	bl	8004ff8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f008 fca7 	bl	800c7d4 <USB_DevDisconnect>

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_PCD_Start+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e020      	b.n	8003eee <HAL_PCD_Start+0x5e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d109      	bne.n	8003ed0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d005      	beq.n	8003ed0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f008 fc65 	bl	800c7a4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f007 fbd0 	bl	800b684 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ef6:	b590      	push	{r4, r7, lr}
 8003ef8:	b08d      	sub	sp, #52	; 0x34
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f008 fd0c 	bl	800c92a <USB_GetMode>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f040 83ca 	bne.w	80046ae <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f008 fc70 	bl	800c804 <USB_ReadInterrupts>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 83c0 	beq.w	80046ac <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f008 fc67 	bl	800c804 <USB_ReadInterrupts>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d107      	bne.n	8003f50 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f002 0202 	and.w	r2, r2, #2
 8003f4e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f008 fc55 	bl	800c804 <USB_ReadInterrupts>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d161      	bne.n	8004028 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0210 	bic.w	r2, r2, #16
 8003f72:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	3304      	adds	r3, #4
 8003f92:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	0c5b      	lsrs	r3, r3, #17
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d124      	bne.n	8003fea <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d035      	beq.n	8004018 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	091b      	lsrs	r3, r3, #4
 8003fb4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	6a38      	ldr	r0, [r7, #32]
 8003fc0:	f008 facd 	bl	800c55e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fd0:	441a      	add	r2, r3
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fe2:	441a      	add	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	619a      	str	r2, [r3, #24]
 8003fe8:	e016      	b.n	8004018 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	0c5b      	lsrs	r3, r3, #17
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	2b06      	cmp	r3, #6
 8003ff4:	d110      	bne.n	8004018 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	4619      	mov	r1, r3
 8004000:	6a38      	ldr	r0, [r7, #32]
 8004002:	f008 faac 	bl	800c55e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004012:	441a      	add	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0210 	orr.w	r2, r2, #16
 8004026:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f008 fbe9 	bl	800c804 <USB_ReadInterrupts>
 8004032:	4603      	mov	r3, r0
 8004034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004038:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800403c:	d16e      	bne.n	800411c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f008 fbef 	bl	800c82a <USB_ReadDevAllOutEpInterrupt>
 800404c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800404e:	e062      	b.n	8004116 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d057      	beq.n	800410a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f008 fc14 	bl	800c892 <USB_ReadDevOutEPInterrupt>
 800406a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004082:	461a      	mov	r2, r3
 8004084:	2301      	movs	r3, #1
 8004086:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fe0a 	bl	8004ca4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00c      	beq.n	80040b4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a6:	461a      	mov	r2, r3
 80040a8:	2308      	movs	r3, #8
 80040aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 ff04 	bl	8004ebc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ca:	461a      	mov	r2, r3
 80040cc:	2310      	movs	r3, #16
 80040ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e6:	461a      	mov	r2, r3
 80040e8:	2320      	movs	r3, #32
 80040ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	461a      	mov	r2, r3
 8004104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004108:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	3301      	adds	r3, #1
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	d199      	bne.n	8004050 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f008 fb6f 	bl	800c804 <USB_ReadInterrupts>
 8004126:	4603      	mov	r3, r0
 8004128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800412c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004130:	f040 80c0 	bne.w	80042b4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f008 fb90 	bl	800c85e <USB_ReadDevAllInEpInterrupt>
 800413e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004144:	e0b2      	b.n	80042ac <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80a7 	beq.w	80042a0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f008 fbb6 	bl	800c8ce <USB_ReadDevInEPInterrupt>
 8004162:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d057      	beq.n	800421e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	2201      	movs	r2, #1
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	43db      	mvns	r3, r3
 8004188:	69f9      	ldr	r1, [r7, #28]
 800418a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800418e:	4013      	ands	r3, r2
 8004190:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	461a      	mov	r2, r3
 80041a0:	2301      	movs	r3, #1
 80041a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d132      	bne.n	8004212 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	4613      	mov	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	3348      	adds	r3, #72	; 0x48
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4403      	add	r3, r0
 80041cc:	3344      	adds	r3, #68	; 0x44
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4419      	add	r1, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4403      	add	r3, r0
 80041e0:	3348      	adds	r3, #72	; 0x48
 80041e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d113      	bne.n	8004212 <HAL_PCD_IRQHandler+0x31c>
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	3350      	adds	r3, #80	; 0x50
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d108      	bne.n	8004212 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800420a:	461a      	mov	r2, r3
 800420c:	2101      	movs	r1, #1
 800420e:	f008 fbbf 	bl	800c990 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	b2db      	uxtb	r3, r3
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f00d ff58 	bl	80120ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d008      	beq.n	800423a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004234:	461a      	mov	r2, r3
 8004236:	2308      	movs	r3, #8
 8004238:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	461a      	mov	r2, r3
 8004252:	2310      	movs	r3, #16
 8004254:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	461a      	mov	r2, r3
 800426e:	2340      	movs	r3, #64	; 0x40
 8004270:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	461a      	mov	r2, r3
 800428a:	2302      	movs	r3, #2
 800428c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fc75 	bl	8004b8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	3301      	adds	r3, #1
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	085b      	lsrs	r3, r3, #1
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f47f af49 	bne.w	8004146 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f008 faa3 	bl	800c804 <USB_ReadInterrupts>
 80042be:	4603      	mov	r3, r0
 80042c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042c8:	d122      	bne.n	8004310 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d108      	bne.n	80042fa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042f0:	2100      	movs	r1, #0
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fea4 	bl	8005040 <HAL_PCDEx_LPM_Callback>
 80042f8:	e002      	b.n	8004300 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f00d ff5e 	bl	80121bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800430e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f008 fa75 	bl	800c804 <USB_ReadInterrupts>
 800431a:	4603      	mov	r3, r0
 800431c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004324:	d112      	bne.n	800434c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b01      	cmp	r3, #1
 8004334:	d102      	bne.n	800433c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f00d ff1a 	bl	8012170 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800434a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f008 fa57 	bl	800c804 <USB_ReadInterrupts>
 8004356:	4603      	mov	r3, r0
 8004358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004360:	d121      	bne.n	80043a6 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004370:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d111      	bne.n	80043a0 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	089b      	lsrs	r3, r3, #2
 800438c:	f003 020f 	and.w	r2, r3, #15
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004396:	2101      	movs	r1, #1
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fe51 	bl	8005040 <HAL_PCDEx_LPM_Callback>
 800439e:	e002      	b.n	80043a6 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f00d fee5 	bl	8012170 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f008 fa2a 	bl	800c804 <USB_ReadInterrupts>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ba:	f040 80c7 	bne.w	800454c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2110      	movs	r1, #16
 80043d8:	4618      	mov	r0, r3
 80043da:	f007 fafd 	bl	800b9d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043de:	2300      	movs	r3, #0
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	e056      	b.n	8004492 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f0:	461a      	mov	r2, r3
 80043f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004412:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004416:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004428:	0151      	lsls	r1, r2, #5
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	440a      	add	r2, r1
 800442e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004432:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004436:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	461a      	mov	r2, r3
 8004446:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800444a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800444c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800445c:	0151      	lsls	r1, r2, #5
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	440a      	add	r2, r1
 8004462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004466:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800446a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447c:	0151      	lsls	r1, r2, #5
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	440a      	add	r2, r1
 8004482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004486:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800448a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	3301      	adds	r3, #1
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004498:	429a      	cmp	r2, r3
 800449a:	d3a3      	bcc.n	80043e4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044aa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044ae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d016      	beq.n	80044e6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044c8:	f043 030b 	orr.w	r3, r3, #11
 80044cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044de:	f043 030b 	orr.w	r3, r3, #11
 80044e2:	6453      	str	r3, [r2, #68]	; 0x44
 80044e4:	e015      	b.n	8004512 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f4:	4619      	mov	r1, r3
 80044f6:	f242 032b 	movw	r3, #8235	; 0x202b
 80044fa:	4313      	orrs	r3, r2
 80044fc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800450c:	f043 030b 	orr.w	r3, r3, #11
 8004510:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004520:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004524:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004536:	461a      	mov	r2, r3
 8004538:	f008 fa2a 	bl	800c990 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800454a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f008 f957 	bl	800c804 <USB_ReadInterrupts>
 8004556:	4603      	mov	r3, r0
 8004558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800455c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004560:	d124      	bne.n	80045ac <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f008 f9ee 	bl	800c948 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f007 fa92 	bl	800ba9a <USB_GetDevSpeed>
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681c      	ldr	r4, [r3, #0]
 8004582:	f001 fcfb 	bl	8005f7c <HAL_RCC_GetHCLKFreq>
 8004586:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	4620      	mov	r0, r4
 8004592:	f006 ffd5 	bl	800b540 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f00d fdc1 	bl	801211e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f008 f927 	bl	800c804 <USB_ReadInterrupts>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d10a      	bne.n	80045d6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f00d fd9e 	bl	8012102 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f002 0208 	and.w	r2, r2, #8
 80045d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f008 f912 	bl	800c804 <USB_ReadInterrupts>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ea:	d10f      	bne.n	800460c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f00d fe00 	bl	80121fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800460a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f008 f8f7 	bl	800c804 <USB_ReadInterrupts>
 8004616:	4603      	mov	r3, r0
 8004618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004620:	d10f      	bne.n	8004642 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f00d fdd3 	bl	80121d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f008 f8dc 	bl	800c804 <USB_ReadInterrupts>
 800464c:	4603      	mov	r3, r0
 800464e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004656:	d10a      	bne.n	800466e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f00d fde1 	bl	8012220 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800466c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f008 f8c6 	bl	800c804 <USB_ReadInterrupts>
 8004678:	4603      	mov	r3, r0
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b04      	cmp	r3, #4
 8004680:	d115      	bne.n	80046ae <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f00d fdd1 	bl	801223c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	e000      	b.n	80046ae <HAL_PCD_IRQHandler+0x7b8>
      return;
 80046ac:	bf00      	nop
    }
  }
}
 80046ae:	3734      	adds	r7, #52	; 0x34
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd90      	pop	{r4, r7, pc}

080046b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_PCD_SetAddress+0x1a>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e013      	b.n	80046f6 <HAL_PCD_SetAddress+0x42>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f008 f836 	bl	800c758 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	4608      	mov	r0, r1
 8004708:	4611      	mov	r1, r2
 800470a:	461a      	mov	r2, r3
 800470c:	4603      	mov	r3, r0
 800470e:	70fb      	strb	r3, [r7, #3]
 8004710:	460b      	mov	r3, r1
 8004712:	803b      	strh	r3, [r7, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800471c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004720:	2b00      	cmp	r3, #0
 8004722:	da0f      	bge.n	8004744 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	f003 020f 	and.w	r2, r3, #15
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	3338      	adds	r3, #56	; 0x38
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	4413      	add	r3, r2
 8004738:	3304      	adds	r3, #4
 800473a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	705a      	strb	r2, [r3, #1]
 8004742:	e00f      	b.n	8004764 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	f003 020f 	and.w	r2, r3, #15
 800474a:	4613      	mov	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	4413      	add	r3, r2
 800475a:	3304      	adds	r3, #4
 800475c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004770:	883a      	ldrh	r2, [r7, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	78ba      	ldrb	r2, [r7, #2]
 800477a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	785b      	ldrb	r3, [r3, #1]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d004      	beq.n	800478e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800478e:	78bb      	ldrb	r3, [r7, #2]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d102      	bne.n	800479a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_PCD_EP_Open+0xaa>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e00e      	b.n	80047c6 <HAL_PCD_EP_Open+0xc8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68f9      	ldr	r1, [r7, #12]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f007 f994 	bl	800bae4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80047c4:	7afb      	ldrb	r3, [r7, #11]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	460b      	mov	r3, r1
 80047d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	da0f      	bge.n	8004802 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	f003 020f 	and.w	r2, r3, #15
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	3338      	adds	r3, #56	; 0x38
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4413      	add	r3, r2
 80047f6:	3304      	adds	r3, #4
 80047f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	705a      	strb	r2, [r3, #1]
 8004800:	e00f      	b.n	8004822 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	f003 020f 	and.w	r2, r3, #15
 8004808:	4613      	mov	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	3304      	adds	r3, #4
 800481a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_PCD_EP_Close+0x6e>
 8004838:	2302      	movs	r3, #2
 800483a:	e00e      	b.n	800485a <HAL_PCD_EP_Close+0x8c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68f9      	ldr	r1, [r7, #12]
 800484a:	4618      	mov	r0, r3
 800484c:	f007 f9d2 	bl	800bbf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	460b      	mov	r3, r1
 8004870:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004872:	7afb      	ldrb	r3, [r7, #11]
 8004874:	f003 020f 	and.w	r2, r3, #15
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	3304      	adds	r3, #4
 800488a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2200      	movs	r2, #0
 800489c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2200      	movs	r2, #0
 80048a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048a4:	7afb      	ldrb	r3, [r7, #11]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d102      	bne.n	80048be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048be:	7afb      	ldrb	r3, [r7, #11]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d109      	bne.n	80048dc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	6979      	ldr	r1, [r7, #20]
 80048d6:	f007 fcb5 	bl	800c244 <USB_EP0StartXfer>
 80048da:	e008      	b.n	80048ee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	6979      	ldr	r1, [r7, #20]
 80048ea:	f007 fa5f 	bl	800bdac <USB_EPStartXfer>
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	f003 020f 	and.w	r2, r3, #15
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	4613      	mov	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	460b      	mov	r3, r1
 8004936:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004938:	7afb      	ldrb	r3, [r7, #11]
 800493a:	f003 020f 	and.w	r2, r3, #15
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	3338      	adds	r3, #56	; 0x38
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	3304      	adds	r3, #4
 800494e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2200      	movs	r2, #0
 8004960:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2201      	movs	r2, #1
 8004966:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004968:	7afb      	ldrb	r3, [r7, #11]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	b2da      	uxtb	r2, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d102      	bne.n	8004982 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004982:	7afb      	ldrb	r3, [r7, #11]
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	6979      	ldr	r1, [r7, #20]
 800499a:	f007 fc53 	bl	800c244 <USB_EP0StartXfer>
 800499e:	e008      	b.n	80049b2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	6979      	ldr	r1, [r7, #20]
 80049ae:	f007 f9fd 	bl	800bdac <USB_EPStartXfer>
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	f003 020f 	and.w	r2, r3, #15
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d901      	bls.n	80049da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e050      	b.n	8004a7c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	da0f      	bge.n	8004a02 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	f003 020f 	and.w	r2, r3, #15
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	3338      	adds	r3, #56	; 0x38
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4413      	add	r3, r2
 80049f6:	3304      	adds	r3, #4
 80049f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	705a      	strb	r2, [r3, #1]
 8004a00:	e00d      	b.n	8004a1e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	4613      	mov	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	4413      	add	r3, r2
 8004a14:	3304      	adds	r3, #4
 8004a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_PCD_EP_SetStall+0x82>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e01e      	b.n	8004a7c <HAL_PCD_EP_SetStall+0xc0>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f007 fdaf 	bl	800c5b0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	b2d9      	uxtb	r1, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	f007 ff8f 	bl	800c990 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	f003 020f 	and.w	r2, r3, #15
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d901      	bls.n	8004aa2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e042      	b.n	8004b28 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da0f      	bge.n	8004aca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 020f 	and.w	r2, r3, #15
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	3338      	adds	r3, #56	; 0x38
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	3304      	adds	r3, #4
 8004ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	705a      	strb	r2, [r3, #1]
 8004ac8:	e00f      	b.n	8004aea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	f003 020f 	and.w	r2, r3, #15
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4413      	add	r3, r2
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_PCD_EP_ClrStall+0x86>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e00e      	b.n	8004b28 <HAL_PCD_EP_ClrStall+0xa4>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f007 fdb7 	bl	800c68c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_PCD_EP_Flush+0x1a>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e01b      	b.n	8004b82 <HAL_PCD_EP_Flush+0x52>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da09      	bge.n	8004b6e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	4619      	mov	r1, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	f006 ff36 	bl	800b9d8 <USB_FlushTxFifo>
 8004b6c:	e004      	b.n	8004b78 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f006 ff56 	bl	800ba24 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b08a      	sub	sp, #40	; 0x28
 8004b8e:	af02      	add	r7, sp, #8
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	3338      	adds	r3, #56	; 0x38
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4413      	add	r3, r2
 8004bae:	3304      	adds	r3, #4
 8004bb0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d901      	bls.n	8004bc2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e06c      	b.n	8004c9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d902      	bls.n	8004bde <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	3303      	adds	r3, #3
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004be6:	e02b      	b.n	8004c40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	695a      	ldr	r2, [r3, #20]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d902      	bls.n	8004c04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	3303      	adds	r3, #3
 8004c08:	089b      	lsrs	r3, r3, #2
 8004c0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68d9      	ldr	r1, [r3, #12]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	4603      	mov	r3, r0
 8004c22:	6978      	ldr	r0, [r7, #20]
 8004c24:	f007 fc66 	bl	800c4f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	441a      	add	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	699a      	ldr	r2, [r3, #24]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	441a      	add	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d809      	bhi.n	8004c6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d203      	bcs.n	8004c6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1be      	bne.n	8004be8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d811      	bhi.n	8004c9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	6939      	ldr	r1, [r7, #16]
 8004c92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c96:	4013      	ands	r3, r2
 8004c98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	333c      	adds	r3, #60	; 0x3c
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	f040 80a0 	bne.w	8004e1c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d015      	beq.n	8004d12 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4a72      	ldr	r2, [pc, #456]	; (8004eb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	f240 80dd 	bls.w	8004eaa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 80d7 	beq.w	8004eaa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d0e:	6093      	str	r3, [r2, #8]
 8004d10:	e0cb      	b.n	8004eaa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d009      	beq.n	8004d30 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2320      	movs	r3, #32
 8004d2c:	6093      	str	r3, [r2, #8]
 8004d2e:	e0bc      	b.n	8004eaa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f040 80b7 	bne.w	8004eaa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4a5d      	ldr	r2, [pc, #372]	; (8004eb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d90f      	bls.n	8004d64 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d60:	6093      	str	r3, [r2, #8]
 8004d62:	e0a2      	b.n	8004eaa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d76:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	0159      	lsls	r1, r3, #5
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	440b      	add	r3, r1
 8004d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004d8a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4403      	add	r3, r0
 8004d9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004d9e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	4613      	mov	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4403      	add	r3, r0
 8004dc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4419      	add	r1, r3
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4403      	add	r3, r0
 8004dd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ddc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d114      	bne.n	8004e0e <PCD_EP_OutXfrComplete_int+0x16a>
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d108      	bne.n	8004e0e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e06:	461a      	mov	r2, r3
 8004e08:	2101      	movs	r1, #1
 8004e0a:	f007 fdc1 	bl	800c990 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f00d f93f 	bl	8012098 <HAL_PCD_DataOutStageCallback>
 8004e1a:	e046      	b.n	8004eaa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4a26      	ldr	r2, [pc, #152]	; (8004eb8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d124      	bne.n	8004e6e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e40:	6093      	str	r3, [r2, #8]
 8004e42:	e032      	b.n	8004eaa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2320      	movs	r3, #32
 8004e5e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f00d f916 	bl	8012098 <HAL_PCD_DataOutStageCallback>
 8004e6c:	e01d      	b.n	8004eaa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d114      	bne.n	8004e9e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d108      	bne.n	8004e9e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e96:	461a      	mov	r2, r3
 8004e98:	2100      	movs	r1, #0
 8004e9a:	f007 fd79 	bl	800c990 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f00d f8f7 	bl	8012098 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	4f54300a 	.word	0x4f54300a
 8004eb8:	4f54310a 	.word	0x4f54310a

08004ebc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	333c      	adds	r3, #60	; 0x3c
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <PCD_EP_OutSetupPacket_int+0x88>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d90e      	bls.n	8004f10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f00d f8af 	bl	8012074 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a0a      	ldr	r2, [pc, #40]	; (8004f44 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d90c      	bls.n	8004f38 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d108      	bne.n	8004f38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f30:	461a      	mov	r2, r3
 8004f32:	2101      	movs	r1, #1
 8004f34:	f007 fd2c 	bl	800c990 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	4f54300a 	.word	0x4f54300a

08004f48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
 8004f54:	4613      	mov	r3, r2
 8004f56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d107      	bne.n	8004f76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f66:	883b      	ldrh	r3, [r7, #0]
 8004f68:	0419      	lsls	r1, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28
 8004f74:	e028      	b.n	8004fc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	4413      	add	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	e00d      	b.n	8004fa6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	3340      	adds	r3, #64	; 0x40
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
 8004fa6:	7bfa      	ldrb	r2, [r7, #15]
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d3ec      	bcc.n	8004f8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fb0:	883b      	ldrh	r3, [r7, #0]
 8004fb2:	0418      	lsls	r0, r3, #16
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6819      	ldr	r1, [r3, #0]
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	4302      	orrs	r2, r0
 8004fc0:	3340      	adds	r3, #64	; 0x40
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	887a      	ldrh	r2, [r7, #2]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_PCDEx_ActivateLPM+0x44>)
 8005028:	4313      	orrs	r3, r2
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	10000003 	.word	0x10000003

08005040 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005060:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <HAL_PWREx_ConfigSupply+0x70>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b04      	cmp	r3, #4
 800506a:	d00a      	beq.n	8005082 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800506c:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <HAL_PWREx_ConfigSupply+0x70>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d001      	beq.n	800507e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e01f      	b.n	80050be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	e01d      	b.n	80050be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005082:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <HAL_PWREx_ConfigSupply+0x70>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f023 0207 	bic.w	r2, r3, #7
 800508a:	490f      	ldr	r1, [pc, #60]	; (80050c8 <HAL_PWREx_ConfigSupply+0x70>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4313      	orrs	r3, r2
 8005090:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005092:	f7fc fa81 	bl	8001598 <HAL_GetTick>
 8005096:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005098:	e009      	b.n	80050ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800509a:	f7fc fa7d 	bl	8001598 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a8:	d901      	bls.n	80050ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e007      	b.n	80050be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_PWREx_ConfigSupply+0x70>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ba:	d1ee      	bne.n	800509a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	58024800 	.word	0x58024800

080050cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4a04      	ldr	r2, [pc, #16]	; (80050e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80050d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050da:	60d3      	str	r3, [r2, #12]
}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	58024800 	.word	0x58024800

080050ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	; 0x30
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e3ff      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8087 	beq.w	800521a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800510c:	4b99      	ldr	r3, [pc, #612]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005116:	4b97      	ldr	r3, [pc, #604]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	2b10      	cmp	r3, #16
 8005120:	d007      	beq.n	8005132 <HAL_RCC_OscConfig+0x46>
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	2b18      	cmp	r3, #24
 8005126:	d110      	bne.n	800514a <HAL_RCC_OscConfig+0x5e>
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d10b      	bne.n	800514a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005132:	4b90      	ldr	r3, [pc, #576]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d06c      	beq.n	8005218 <HAL_RCC_OscConfig+0x12c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d168      	bne.n	8005218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e3d9      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005152:	d106      	bne.n	8005162 <HAL_RCC_OscConfig+0x76>
 8005154:	4b87      	ldr	r3, [pc, #540]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a86      	ldr	r2, [pc, #536]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 800515a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	e02e      	b.n	80051c0 <HAL_RCC_OscConfig+0xd4>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10c      	bne.n	8005184 <HAL_RCC_OscConfig+0x98>
 800516a:	4b82      	ldr	r3, [pc, #520]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a81      	ldr	r2, [pc, #516]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	4b7f      	ldr	r3, [pc, #508]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a7e      	ldr	r2, [pc, #504]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 800517c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e01d      	b.n	80051c0 <HAL_RCC_OscConfig+0xd4>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800518c:	d10c      	bne.n	80051a8 <HAL_RCC_OscConfig+0xbc>
 800518e:	4b79      	ldr	r3, [pc, #484]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a78      	ldr	r2, [pc, #480]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	4b76      	ldr	r3, [pc, #472]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a75      	ldr	r2, [pc, #468]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 80051a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e00b      	b.n	80051c0 <HAL_RCC_OscConfig+0xd4>
 80051a8:	4b72      	ldr	r3, [pc, #456]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a71      	ldr	r2, [pc, #452]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4b6f      	ldr	r3, [pc, #444]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6e      	ldr	r2, [pc, #440]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 80051ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d013      	beq.n	80051f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fc f9e6 	bl	8001598 <HAL_GetTick>
 80051cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d0:	f7fc f9e2 	bl	8001598 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	; 0x64
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e38d      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051e2:	4b64      	ldr	r3, [pc, #400]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0xe4>
 80051ee:	e014      	b.n	800521a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fc f9d2 	bl	8001598 <HAL_GetTick>
 80051f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051f8:	f7fc f9ce 	bl	8001598 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	; 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e379      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800520a:	4b5a      	ldr	r3, [pc, #360]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x10c>
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80ae 	beq.w	8005384 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005228:	4b52      	ldr	r3, [pc, #328]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005230:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005232:	4b50      	ldr	r3, [pc, #320]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <HAL_RCC_OscConfig+0x162>
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	2b18      	cmp	r3, #24
 8005242:	d13a      	bne.n	80052ba <HAL_RCC_OscConfig+0x1ce>
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d135      	bne.n	80052ba <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800524e:	4b49      	ldr	r3, [pc, #292]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_RCC_OscConfig+0x17a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e34b      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005266:	f7fc f9c5 	bl	80015f4 <HAL_GetREVID>
 800526a:	4602      	mov	r2, r0
 800526c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005270:	429a      	cmp	r2, r3
 8005272:	d817      	bhi.n	80052a4 <HAL_RCC_OscConfig+0x1b8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d108      	bne.n	800528e <HAL_RCC_OscConfig+0x1a2>
 800527c:	4b3d      	ldr	r3, [pc, #244]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005284:	4a3b      	ldr	r2, [pc, #236]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800528a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800528c:	e07a      	b.n	8005384 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528e:	4b39      	ldr	r3, [pc, #228]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	031b      	lsls	r3, r3, #12
 800529c:	4935      	ldr	r1, [pc, #212]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052a2:	e06f      	b.n	8005384 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a4:	4b33      	ldr	r3, [pc, #204]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	061b      	lsls	r3, r3, #24
 80052b2:	4930      	ldr	r1, [pc, #192]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b8:	e064      	b.n	8005384 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d045      	beq.n	800534e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052c2:	4b2c      	ldr	r3, [pc, #176]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 0219 	bic.w	r2, r3, #25
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	4929      	ldr	r1, [pc, #164]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d4:	f7fc f960 	bl	8001598 <HAL_GetTick>
 80052d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052dc:	f7fc f95c 	bl	8001598 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e307      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052ee:	4b21      	ldr	r3, [pc, #132]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fa:	f7fc f97b 	bl	80015f4 <HAL_GetREVID>
 80052fe:	4602      	mov	r2, r0
 8005300:	f241 0303 	movw	r3, #4099	; 0x1003
 8005304:	429a      	cmp	r2, r3
 8005306:	d817      	bhi.n	8005338 <HAL_RCC_OscConfig+0x24c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2b40      	cmp	r3, #64	; 0x40
 800530e:	d108      	bne.n	8005322 <HAL_RCC_OscConfig+0x236>
 8005310:	4b18      	ldr	r3, [pc, #96]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005318:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 800531a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800531e:	6053      	str	r3, [r2, #4]
 8005320:	e030      	b.n	8005384 <HAL_RCC_OscConfig+0x298>
 8005322:	4b14      	ldr	r3, [pc, #80]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	031b      	lsls	r3, r3, #12
 8005330:	4910      	ldr	r1, [pc, #64]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005332:	4313      	orrs	r3, r2
 8005334:	604b      	str	r3, [r1, #4]
 8005336:	e025      	b.n	8005384 <HAL_RCC_OscConfig+0x298>
 8005338:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	061b      	lsls	r3, r3, #24
 8005346:	490b      	ldr	r1, [pc, #44]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005348:	4313      	orrs	r3, r2
 800534a:	604b      	str	r3, [r1, #4]
 800534c:	e01a      	b.n	8005384 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800534e:	4b09      	ldr	r3, [pc, #36]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a08      	ldr	r2, [pc, #32]	; (8005374 <HAL_RCC_OscConfig+0x288>)
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535a:	f7fc f91d 	bl	8001598 <HAL_GetTick>
 800535e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005360:	e00a      	b.n	8005378 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005362:	f7fc f919 	bl	8001598 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d903      	bls.n	8005378 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e2c4      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
 8005374:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005378:	4ba4      	ldr	r3, [pc, #656]	; (800560c <HAL_RCC_OscConfig+0x520>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1ee      	bne.n	8005362 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80a9 	beq.w	80054e4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005392:	4b9e      	ldr	r3, [pc, #632]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800539a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800539c:	4b9b      	ldr	r3, [pc, #620]	; (800560c <HAL_RCC_OscConfig+0x520>)
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d007      	beq.n	80053b8 <HAL_RCC_OscConfig+0x2cc>
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b18      	cmp	r3, #24
 80053ac:	d13a      	bne.n	8005424 <HAL_RCC_OscConfig+0x338>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d135      	bne.n	8005424 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053b8:	4b94      	ldr	r3, [pc, #592]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_OscConfig+0x2e4>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	2b80      	cmp	r3, #128	; 0x80
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e296      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053d0:	f7fc f910 	bl	80015f4 <HAL_GetREVID>
 80053d4:	4602      	mov	r2, r0
 80053d6:	f241 0303 	movw	r3, #4099	; 0x1003
 80053da:	429a      	cmp	r2, r3
 80053dc:	d817      	bhi.n	800540e <HAL_RCC_OscConfig+0x322>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d108      	bne.n	80053f8 <HAL_RCC_OscConfig+0x30c>
 80053e6:	4b89      	ldr	r3, [pc, #548]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80053ee:	4a87      	ldr	r2, [pc, #540]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80053f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053f6:	e075      	b.n	80054e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053f8:	4b84      	ldr	r3, [pc, #528]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	069b      	lsls	r3, r3, #26
 8005406:	4981      	ldr	r1, [pc, #516]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005408:	4313      	orrs	r3, r2
 800540a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800540c:	e06a      	b.n	80054e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800540e:	4b7f      	ldr	r3, [pc, #508]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	061b      	lsls	r3, r3, #24
 800541c:	497b      	ldr	r1, [pc, #492]	; (800560c <HAL_RCC_OscConfig+0x520>)
 800541e:	4313      	orrs	r3, r2
 8005420:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005422:	e05f      	b.n	80054e4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d042      	beq.n	80054b2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800542c:	4b77      	ldr	r3, [pc, #476]	; (800560c <HAL_RCC_OscConfig+0x520>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a76      	ldr	r2, [pc, #472]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fc f8ae 	bl	8001598 <HAL_GetTick>
 800543c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005440:	f7fc f8aa 	bl	8001598 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e255      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005452:	4b6e      	ldr	r3, [pc, #440]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800545e:	f7fc f8c9 	bl	80015f4 <HAL_GetREVID>
 8005462:	4602      	mov	r2, r0
 8005464:	f241 0303 	movw	r3, #4099	; 0x1003
 8005468:	429a      	cmp	r2, r3
 800546a:	d817      	bhi.n	800549c <HAL_RCC_OscConfig+0x3b0>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	2b20      	cmp	r3, #32
 8005472:	d108      	bne.n	8005486 <HAL_RCC_OscConfig+0x39a>
 8005474:	4b65      	ldr	r3, [pc, #404]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800547c:	4a63      	ldr	r2, [pc, #396]	; (800560c <HAL_RCC_OscConfig+0x520>)
 800547e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005482:	6053      	str	r3, [r2, #4]
 8005484:	e02e      	b.n	80054e4 <HAL_RCC_OscConfig+0x3f8>
 8005486:	4b61      	ldr	r3, [pc, #388]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	069b      	lsls	r3, r3, #26
 8005494:	495d      	ldr	r1, [pc, #372]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]
 800549a:	e023      	b.n	80054e4 <HAL_RCC_OscConfig+0x3f8>
 800549c:	4b5b      	ldr	r3, [pc, #364]	; (800560c <HAL_RCC_OscConfig+0x520>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	061b      	lsls	r3, r3, #24
 80054aa:	4958      	ldr	r1, [pc, #352]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60cb      	str	r3, [r1, #12]
 80054b0:	e018      	b.n	80054e4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054b2:	4b56      	ldr	r3, [pc, #344]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a55      	ldr	r2, [pc, #340]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80054b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054be:	f7fc f86b 	bl	8001598 <HAL_GetTick>
 80054c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054c6:	f7fc f867 	bl	8001598 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e212      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054d8:	4b4c      	ldr	r3, [pc, #304]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1f0      	bne.n	80054c6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d036      	beq.n	800555e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d019      	beq.n	800552c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054f8:	4b44      	ldr	r3, [pc, #272]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80054fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fc:	4a43      	ldr	r2, [pc, #268]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fc f848 	bl	8001598 <HAL_GetTick>
 8005508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800550c:	f7fc f844 	bl	8001598 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e1ef      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800551e:	4b3b      	ldr	r3, [pc, #236]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0x420>
 800552a:	e018      	b.n	800555e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800552c:	4b37      	ldr	r3, [pc, #220]	; (800560c <HAL_RCC_OscConfig+0x520>)
 800552e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005530:	4a36      	ldr	r2, [pc, #216]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005538:	f7fc f82e 	bl	8001598 <HAL_GetTick>
 800553c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005540:	f7fc f82a 	bl	8001598 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e1d5      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005552:	4b2e      	ldr	r3, [pc, #184]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d036      	beq.n	80055d8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d019      	beq.n	80055a6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005572:	4b26      	ldr	r3, [pc, #152]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a25      	ldr	r2, [pc, #148]	; (800560c <HAL_RCC_OscConfig+0x520>)
 8005578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800557c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800557e:	f7fc f80b 	bl	8001598 <HAL_GetTick>
 8005582:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005586:	f7fc f807 	bl	8001598 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1b2      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005598:	4b1c      	ldr	r3, [pc, #112]	; (800560c <HAL_RCC_OscConfig+0x520>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0x49a>
 80055a4:	e018      	b.n	80055d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055a6:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a18      	ldr	r2, [pc, #96]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80055ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055b2:	f7fb fff1 	bl	8001598 <HAL_GetTick>
 80055b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80055ba:	f7fb ffed 	bl	8001598 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e198      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055cc:	4b0f      	ldr	r3, [pc, #60]	; (800560c <HAL_RCC_OscConfig+0x520>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8085 	beq.w	80056f0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055e6:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <HAL_RCC_OscConfig+0x524>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a09      	ldr	r2, [pc, #36]	; (8005610 <HAL_RCC_OscConfig+0x524>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f2:	f7fb ffd1 	bl	8001598 <HAL_GetTick>
 80055f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055f8:	e00c      	b.n	8005614 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055fa:	f7fb ffcd 	bl	8001598 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b64      	cmp	r3, #100	; 0x64
 8005606:	d905      	bls.n	8005614 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e178      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
 800560c:	58024400 	.word	0x58024400
 8005610:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005614:	4b96      	ldr	r3, [pc, #600]	; (8005870 <HAL_RCC_OscConfig+0x784>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0ec      	beq.n	80055fa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d106      	bne.n	8005636 <HAL_RCC_OscConfig+0x54a>
 8005628:	4b92      	ldr	r3, [pc, #584]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	4a91      	ldr	r2, [pc, #580]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	6713      	str	r3, [r2, #112]	; 0x70
 8005634:	e02d      	b.n	8005692 <HAL_RCC_OscConfig+0x5a6>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10c      	bne.n	8005658 <HAL_RCC_OscConfig+0x56c>
 800563e:	4b8d      	ldr	r3, [pc, #564]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	4a8c      	ldr	r2, [pc, #560]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	6713      	str	r3, [r2, #112]	; 0x70
 800564a:	4b8a      	ldr	r3, [pc, #552]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	4a89      	ldr	r2, [pc, #548]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005650:	f023 0304 	bic.w	r3, r3, #4
 8005654:	6713      	str	r3, [r2, #112]	; 0x70
 8005656:	e01c      	b.n	8005692 <HAL_RCC_OscConfig+0x5a6>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b05      	cmp	r3, #5
 800565e:	d10c      	bne.n	800567a <HAL_RCC_OscConfig+0x58e>
 8005660:	4b84      	ldr	r3, [pc, #528]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	4a83      	ldr	r2, [pc, #524]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005666:	f043 0304 	orr.w	r3, r3, #4
 800566a:	6713      	str	r3, [r2, #112]	; 0x70
 800566c:	4b81      	ldr	r3, [pc, #516]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a80      	ldr	r2, [pc, #512]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
 8005678:	e00b      	b.n	8005692 <HAL_RCC_OscConfig+0x5a6>
 800567a:	4b7e      	ldr	r3, [pc, #504]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567e:	4a7d      	ldr	r2, [pc, #500]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	6713      	str	r3, [r2, #112]	; 0x70
 8005686:	4b7b      	ldr	r3, [pc, #492]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4a7a      	ldr	r2, [pc, #488]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800568c:	f023 0304 	bic.w	r3, r3, #4
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d015      	beq.n	80056c6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569a:	f7fb ff7d 	bl	8001598 <HAL_GetTick>
 800569e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a0:	e00a      	b.n	80056b8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a2:	f7fb ff79 	bl	8001598 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e122      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056b8:	4b6e      	ldr	r3, [pc, #440]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ee      	beq.n	80056a2 <HAL_RCC_OscConfig+0x5b6>
 80056c4:	e014      	b.n	80056f0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c6:	f7fb ff67 	bl	8001598 <HAL_GetTick>
 80056ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056cc:	e00a      	b.n	80056e4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ce:	f7fb ff63 	bl	8001598 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e10c      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056e4:	4b63      	ldr	r3, [pc, #396]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1ee      	bne.n	80056ce <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8101 	beq.w	80058fc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056fa:	4b5e      	ldr	r3, [pc, #376]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005702:	2b18      	cmp	r3, #24
 8005704:	f000 80bc 	beq.w	8005880 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	2b02      	cmp	r3, #2
 800570e:	f040 8095 	bne.w	800583c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005712:	4b58      	ldr	r3, [pc, #352]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a57      	ldr	r2, [pc, #348]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005718:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800571c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571e:	f7fb ff3b 	bl	8001598 <HAL_GetTick>
 8005722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005726:	f7fb ff37 	bl	8001598 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e0e2      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005738:	4b4e      	ldr	r3, [pc, #312]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f0      	bne.n	8005726 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005744:	4b4b      	ldr	r3, [pc, #300]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005746:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005748:	4b4b      	ldr	r3, [pc, #300]	; (8005878 <HAL_RCC_OscConfig+0x78c>)
 800574a:	4013      	ands	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005754:	0112      	lsls	r2, r2, #4
 8005756:	430a      	orrs	r2, r1
 8005758:	4946      	ldr	r1, [pc, #280]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800575a:	4313      	orrs	r3, r2
 800575c:	628b      	str	r3, [r1, #40]	; 0x28
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	3b01      	subs	r3, #1
 8005764:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	3b01      	subs	r3, #1
 800576e:	025b      	lsls	r3, r3, #9
 8005770:	b29b      	uxth	r3, r3
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	3b01      	subs	r3, #1
 800577a:	041b      	lsls	r3, r3, #16
 800577c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005786:	3b01      	subs	r3, #1
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800578e:	4939      	ldr	r1, [pc, #228]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005790:	4313      	orrs	r3, r2
 8005792:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005794:	4b37      	ldr	r3, [pc, #220]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	4a36      	ldr	r2, [pc, #216]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057a0:	4b34      	ldr	r3, [pc, #208]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a4:	4b35      	ldr	r3, [pc, #212]	; (800587c <HAL_RCC_OscConfig+0x790>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057ac:	00d2      	lsls	r2, r2, #3
 80057ae:	4931      	ldr	r1, [pc, #196]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057b4:	4b2f      	ldr	r3, [pc, #188]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	f023 020c 	bic.w	r2, r3, #12
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	492c      	ldr	r1, [pc, #176]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057c6:	4b2b      	ldr	r3, [pc, #172]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	f023 0202 	bic.w	r2, r3, #2
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d2:	4928      	ldr	r1, [pc, #160]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057d8:	4b26      	ldr	r3, [pc, #152]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	4a25      	ldr	r2, [pc, #148]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e4:	4b23      	ldr	r3, [pc, #140]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4a22      	ldr	r2, [pc, #136]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057f0:	4b20      	ldr	r3, [pc, #128]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	4a1f      	ldr	r2, [pc, #124]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80057fc:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	4a1c      	ldr	r2, [pc, #112]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005808:	4b1a      	ldr	r3, [pc, #104]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a19      	ldr	r2, [pc, #100]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800580e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fb fec0 	bl	8001598 <HAL_GetTick>
 8005818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581c:	f7fb febc 	bl	8001598 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e067      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800582e:	4b11      	ldr	r3, [pc, #68]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0x730>
 800583a:	e05f      	b.n	80058fc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583c:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0c      	ldr	r2, [pc, #48]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005848:	f7fb fea6 	bl	8001598 <HAL_GetTick>
 800584c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005850:	f7fb fea2 	bl	8001598 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e04d      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005862:	4b04      	ldr	r3, [pc, #16]	; (8005874 <HAL_RCC_OscConfig+0x788>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f0      	bne.n	8005850 <HAL_RCC_OscConfig+0x764>
 800586e:	e045      	b.n	80058fc <HAL_RCC_OscConfig+0x810>
 8005870:	58024800 	.word	0x58024800
 8005874:	58024400 	.word	0x58024400
 8005878:	fffffc0c 	.word	0xfffffc0c
 800587c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005880:	4b21      	ldr	r3, [pc, #132]	; (8005908 <HAL_RCC_OscConfig+0x81c>)
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005886:	4b20      	ldr	r3, [pc, #128]	; (8005908 <HAL_RCC_OscConfig+0x81c>)
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	2b01      	cmp	r3, #1
 8005892:	d031      	beq.n	80058f8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f003 0203 	and.w	r2, r3, #3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d12a      	bne.n	80058f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	091b      	lsrs	r3, r3, #4
 80058a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d122      	bne.n	80058f8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d11a      	bne.n	80058f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	0a5b      	lsrs	r3, r3, #9
 80058c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d111      	bne.n	80058f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	0c1b      	lsrs	r3, r3, #16
 80058d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d108      	bne.n	80058f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	0e1b      	lsrs	r3, r3, #24
 80058ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3730      	adds	r7, #48	; 0x30
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	58024400 	.word	0x58024400

0800590c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e19c      	b.n	8005c5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005920:	4b8a      	ldr	r3, [pc, #552]	; (8005b4c <HAL_RCC_ClockConfig+0x240>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d910      	bls.n	8005950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592e:	4b87      	ldr	r3, [pc, #540]	; (8005b4c <HAL_RCC_ClockConfig+0x240>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f023 020f 	bic.w	r2, r3, #15
 8005936:	4985      	ldr	r1, [pc, #532]	; (8005b4c <HAL_RCC_ClockConfig+0x240>)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800593e:	4b83      	ldr	r3, [pc, #524]	; (8005b4c <HAL_RCC_ClockConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d001      	beq.n	8005950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e184      	b.n	8005c5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d010      	beq.n	800597e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	4b7b      	ldr	r3, [pc, #492]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005968:	429a      	cmp	r2, r3
 800596a:	d908      	bls.n	800597e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800596c:	4b78      	ldr	r3, [pc, #480]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	4975      	ldr	r1, [pc, #468]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 800597a:	4313      	orrs	r3, r2
 800597c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d010      	beq.n	80059ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695a      	ldr	r2, [r3, #20]
 800598e:	4b70      	ldr	r3, [pc, #448]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005996:	429a      	cmp	r2, r3
 8005998:	d908      	bls.n	80059ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800599a:	4b6d      	ldr	r3, [pc, #436]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	496a      	ldr	r1, [pc, #424]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d010      	beq.n	80059da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699a      	ldr	r2, [r3, #24]
 80059bc:	4b64      	ldr	r3, [pc, #400]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d908      	bls.n	80059da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059c8:	4b61      	ldr	r3, [pc, #388]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	495e      	ldr	r1, [pc, #376]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d010      	beq.n	8005a08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69da      	ldr	r2, [r3, #28]
 80059ea:	4b59      	ldr	r3, [pc, #356]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d908      	bls.n	8005a08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80059f6:	4b56      	ldr	r3, [pc, #344]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	4953      	ldr	r1, [pc, #332]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d010      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	4b4d      	ldr	r3, [pc, #308]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d908      	bls.n	8005a36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a24:	4b4a      	ldr	r3, [pc, #296]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	f023 020f 	bic.w	r2, r3, #15
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4947      	ldr	r1, [pc, #284]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d055      	beq.n	8005aee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a42:	4b43      	ldr	r3, [pc, #268]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	4940      	ldr	r1, [pc, #256]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a5c:	4b3c      	ldr	r3, [pc, #240]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d121      	bne.n	8005aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0f6      	b.n	8005c5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a74:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d115      	bne.n	8005aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0ea      	b.n	8005c5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a8c:	4b30      	ldr	r3, [pc, #192]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0de      	b.n	8005c5a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a9c:	4b2c      	ldr	r3, [pc, #176]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0d6      	b.n	8005c5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005aac:	4b28      	ldr	r3, [pc, #160]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f023 0207 	bic.w	r2, r3, #7
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	4925      	ldr	r1, [pc, #148]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005abe:	f7fb fd6b 	bl	8001598 <HAL_GetTick>
 8005ac2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac4:	e00a      	b.n	8005adc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac6:	f7fb fd67 	bl	8001598 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e0be      	b.n	8005c5a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005adc:	4b1c      	ldr	r3, [pc, #112]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d1eb      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d010      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d208      	bcs.n	8005b1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b0a:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f023 020f 	bic.w	r2, r3, #15
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	490e      	ldr	r1, [pc, #56]	; (8005b50 <HAL_RCC_ClockConfig+0x244>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <HAL_RCC_ClockConfig+0x240>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d214      	bcs.n	8005b54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2a:	4b08      	ldr	r3, [pc, #32]	; (8005b4c <HAL_RCC_ClockConfig+0x240>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f023 020f 	bic.w	r2, r3, #15
 8005b32:	4906      	ldr	r1, [pc, #24]	; (8005b4c <HAL_RCC_ClockConfig+0x240>)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3a:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <HAL_RCC_ClockConfig+0x240>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d005      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e086      	b.n	8005c5a <HAL_RCC_ClockConfig+0x34e>
 8005b4c:	52002000 	.word	0x52002000
 8005b50:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d010      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	4b3f      	ldr	r3, [pc, #252]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d208      	bcs.n	8005b82 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b70:	4b3c      	ldr	r3, [pc, #240]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	4939      	ldr	r1, [pc, #228]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d010      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695a      	ldr	r2, [r3, #20]
 8005b92:	4b34      	ldr	r3, [pc, #208]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d208      	bcs.n	8005bb0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	492e      	ldr	r1, [pc, #184]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d010      	beq.n	8005bde <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	4b28      	ldr	r3, [pc, #160]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d208      	bcs.n	8005bde <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bcc:	4b25      	ldr	r3, [pc, #148]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	4922      	ldr	r1, [pc, #136]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d010      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69da      	ldr	r2, [r3, #28]
 8005bee:	4b1d      	ldr	r3, [pc, #116]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d208      	bcs.n	8005c0c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	4917      	ldr	r1, [pc, #92]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c0c:	f000 f844 	bl	8005c98 <HAL_RCC_GetSysClockFreq>
 8005c10:	4601      	mov	r1, r0
 8005c12:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	4a12      	ldr	r2, [pc, #72]	; (8005c68 <HAL_RCC_ClockConfig+0x35c>)
 8005c1e:	5cd3      	ldrb	r3, [r2, r3]
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	fa21 f303 	lsr.w	r3, r1, r3
 8005c28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c2a:	4b0e      	ldr	r3, [pc, #56]	; (8005c64 <HAL_RCC_ClockConfig+0x358>)
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	4a0d      	ldr	r2, [pc, #52]	; (8005c68 <HAL_RCC_ClockConfig+0x35c>)
 8005c34:	5cd3      	ldrb	r3, [r2, r3]
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c40:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <HAL_RCC_ClockConfig+0x360>)
 8005c42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c44:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <HAL_RCC_ClockConfig+0x364>)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <HAL_RCC_ClockConfig+0x368>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fb fc58 	bl	8001504 <HAL_InitTick>
 8005c54:	4603      	mov	r3, r0
 8005c56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	58024400 	.word	0x58024400
 8005c68:	08012950 	.word	0x08012950
 8005c6c:	24000004 	.word	0x24000004
 8005c70:	24000000 	.word	0x24000000
 8005c74:	24000008 	.word	0x24000008

08005c78 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCC_EnableCSS+0x1c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a04      	ldr	r2, [pc, #16]	; (8005c94 <HAL_RCC_EnableCSS+0x1c>)
 8005c82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c86:	6013      	str	r3, [r2, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	58024400 	.word	0x58024400

08005c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b089      	sub	sp, #36	; 0x24
 8005c9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c9e:	4baf      	ldr	r3, [pc, #700]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ca6:	2b18      	cmp	r3, #24
 8005ca8:	f200 814e 	bhi.w	8005f48 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005cac:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005d19 	.word	0x08005d19
 8005cb8:	08005f49 	.word	0x08005f49
 8005cbc:	08005f49 	.word	0x08005f49
 8005cc0:	08005f49 	.word	0x08005f49
 8005cc4:	08005f49 	.word	0x08005f49
 8005cc8:	08005f49 	.word	0x08005f49
 8005ccc:	08005f49 	.word	0x08005f49
 8005cd0:	08005f49 	.word	0x08005f49
 8005cd4:	08005d3f 	.word	0x08005d3f
 8005cd8:	08005f49 	.word	0x08005f49
 8005cdc:	08005f49 	.word	0x08005f49
 8005ce0:	08005f49 	.word	0x08005f49
 8005ce4:	08005f49 	.word	0x08005f49
 8005ce8:	08005f49 	.word	0x08005f49
 8005cec:	08005f49 	.word	0x08005f49
 8005cf0:	08005f49 	.word	0x08005f49
 8005cf4:	08005d45 	.word	0x08005d45
 8005cf8:	08005f49 	.word	0x08005f49
 8005cfc:	08005f49 	.word	0x08005f49
 8005d00:	08005f49 	.word	0x08005f49
 8005d04:	08005f49 	.word	0x08005f49
 8005d08:	08005f49 	.word	0x08005f49
 8005d0c:	08005f49 	.word	0x08005f49
 8005d10:	08005f49 	.word	0x08005f49
 8005d14:	08005d4b 	.word	0x08005d4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d18:	4b90      	ldr	r3, [pc, #576]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d009      	beq.n	8005d38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d24:	4b8d      	ldr	r3, [pc, #564]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	08db      	lsrs	r3, r3, #3
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	4a8c      	ldr	r2, [pc, #560]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
 8005d34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d36:	e10a      	b.n	8005f4e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d38:	4b89      	ldr	r3, [pc, #548]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d3a:	61bb      	str	r3, [r7, #24]
    break;
 8005d3c:	e107      	b.n	8005f4e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d3e:	4b89      	ldr	r3, [pc, #548]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005d40:	61bb      	str	r3, [r7, #24]
    break;
 8005d42:	e104      	b.n	8005f4e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d44:	4b88      	ldr	r3, [pc, #544]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005d46:	61bb      	str	r3, [r7, #24]
    break;
 8005d48:	e101      	b.n	8005f4e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d4a:	4b84      	ldr	r3, [pc, #528]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005d54:	4b81      	ldr	r3, [pc, #516]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	091b      	lsrs	r3, r3, #4
 8005d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d60:	4b7e      	ldr	r3, [pc, #504]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005d6a:	4b7c      	ldr	r3, [pc, #496]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	08db      	lsrs	r3, r3, #3
 8005d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 80da 	beq.w	8005f42 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d05a      	beq.n	8005e4a <HAL_RCC_GetSysClockFreq+0x1b2>
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d302      	bcc.n	8005d9e <HAL_RCC_GetSysClockFreq+0x106>
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d078      	beq.n	8005e8e <HAL_RCC_GetSysClockFreq+0x1f6>
 8005d9c:	e099      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d9e:	4b6f      	ldr	r3, [pc, #444]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d02d      	beq.n	8005e06 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005daa:	4b6c      	ldr	r3, [pc, #432]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	08db      	lsrs	r3, r3, #3
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	4a6a      	ldr	r2, [pc, #424]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005db6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dba:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd4:	4b61      	ldr	r3, [pc, #388]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005de8:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005f6c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e00:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005e04:	e087      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e10:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005f70 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e18:	4b50      	ldr	r3, [pc, #320]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e28:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e2c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005f6c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e48:	e065      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	ee07 3a90 	vmov	s15, r3
 8005e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e54:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005f74 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5c:	4b3f      	ldr	r3, [pc, #252]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e70:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005f6c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8c:	e043      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	ee07 3a90 	vmov	s15, r3
 8005e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e98:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea0:	4b2e      	ldr	r3, [pc, #184]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea8:	ee07 3a90 	vmov	s15, r3
 8005eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eb4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005f6c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005eb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ecc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ed0:	e021      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005edc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005f74 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee4:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ef8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005f6c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f14:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005f16:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	0a5b      	lsrs	r3, r3, #9
 8005f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f20:	3301      	adds	r3, #1
 8005f22:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3a:	ee17 3a90 	vmov	r3, s15
 8005f3e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005f40:	e005      	b.n	8005f4e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61bb      	str	r3, [r7, #24]
    break;
 8005f46:	e002      	b.n	8005f4e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005f4a:	61bb      	str	r3, [r7, #24]
    break;
 8005f4c:	bf00      	nop
  }

  return sysclockfreq;
 8005f4e:	69bb      	ldr	r3, [r7, #24]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3724      	adds	r7, #36	; 0x24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	58024400 	.word	0x58024400
 8005f60:	03d09000 	.word	0x03d09000
 8005f64:	003d0900 	.word	0x003d0900
 8005f68:	017d7840 	.word	0x017d7840
 8005f6c:	46000000 	.word	0x46000000
 8005f70:	4c742400 	.word	0x4c742400
 8005f74:	4a742400 	.word	0x4a742400
 8005f78:	4bbebc20 	.word	0x4bbebc20

08005f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f82:	f7ff fe89 	bl	8005c98 <HAL_RCC_GetSysClockFreq>
 8005f86:	4601      	mov	r1, r0
 8005f88:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <HAL_RCC_GetHCLKFreq+0x50>)
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	0a1b      	lsrs	r3, r3, #8
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	4a0f      	ldr	r2, [pc, #60]	; (8005fd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f94:	5cd3      	ldrb	r3, [r2, r3]
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8005f9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <HAL_RCC_GetHCLKFreq+0x50>)
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005faa:	5cd3      	ldrb	r3, [r2, r3]
 8005fac:	f003 031f 	and.w	r3, r3, #31
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb6:	4a07      	ldr	r2, [pc, #28]	; (8005fd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fb8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fba:	4a07      	ldr	r2, [pc, #28]	; (8005fd8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	08012950 	.word	0x08012950
 8005fd4:	24000004 	.word	0x24000004
 8005fd8:	24000000 	.word	0x24000000

08005fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fe0:	f7ff ffcc 	bl	8005f7c <HAL_RCC_GetHCLKFreq>
 8005fe4:	4601      	mov	r1, r0
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	091b      	lsrs	r3, r3, #4
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	4a04      	ldr	r2, [pc, #16]	; (8006004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ff2:	5cd3      	ldrb	r3, [r2, r3]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	58024400 	.word	0x58024400
 8006004:	08012950 	.word	0x08012950

08006008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800600c:	f7ff ffb6 	bl	8005f7c <HAL_RCC_GetHCLKFreq>
 8006010:	4601      	mov	r1, r0
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	0a1b      	lsrs	r3, r3, #8
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800601e:	5cd3      	ldrb	r3, [r2, r3]
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006028:	4618      	mov	r0, r3
 800602a:	bd80      	pop	{r7, pc}
 800602c:	58024400 	.word	0x58024400
 8006030:	08012950 	.word	0x08012950

08006034 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006038:	4b07      	ldr	r3, [pc, #28]	; (8006058 <HAL_RCC_NMI_IRQHandler+0x24>)
 800603a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800603c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006044:	d105      	bne.n	8006052 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8006046:	f000 f809 	bl	800605c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800604a:	4b03      	ldr	r3, [pc, #12]	; (8006058 <HAL_RCC_NMI_IRQHandler+0x24>)
 800604c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006050:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8006052:	bf00      	nop
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	58024400 	.word	0x58024400

0800605c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006074:	2300      	movs	r3, #0
 8006076:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006078:	2300      	movs	r3, #0
 800607a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d03d      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800608c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006090:	d013      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006096:	d802      	bhi.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x40>
 800609c:	e01f      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x72>
 800609e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060a2:	d013      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80060a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060a8:	d01c      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80060aa:	e018      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ac:	4baf      	ldr	r3, [pc, #700]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	4aae      	ldr	r2, [pc, #696]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060b8:	e015      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3304      	adds	r3, #4
 80060be:	2102      	movs	r1, #2
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 fd33 	bl	8007b2c <RCCEx_PLL2_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060ca:	e00c      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3324      	adds	r3, #36	; 0x24
 80060d0:	2102      	movs	r1, #2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 fddc 	bl	8007c90 <RCCEx_PLL3_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060dc:	e003      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	75fb      	strb	r3, [r7, #23]
      break;
 80060e2:	e000      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80060e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060ec:	4b9f      	ldr	r3, [pc, #636]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f8:	499c      	ldr	r1, [pc, #624]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	650b      	str	r3, [r1, #80]	; 0x50
 80060fe:	e001      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d03d      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	2b04      	cmp	r3, #4
 8006116:	d826      	bhi.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006118:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	08006135 	.word	0x08006135
 8006124:	08006143 	.word	0x08006143
 8006128:	08006155 	.word	0x08006155
 800612c:	0800616d 	.word	0x0800616d
 8006130:	0800616d 	.word	0x0800616d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006134:	4b8d      	ldr	r3, [pc, #564]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	4a8c      	ldr	r2, [pc, #560]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800613a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800613e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006140:	e015      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3304      	adds	r3, #4
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f001 fcef 	bl	8007b2c <RCCEx_PLL2_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006152:	e00c      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3324      	adds	r3, #36	; 0x24
 8006158:	2100      	movs	r1, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f001 fd98 	bl	8007c90 <RCCEx_PLL3_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006164:	e003      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	75fb      	strb	r3, [r7, #23]
      break;
 800616a:	e000      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800616c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800616e:	7dfb      	ldrb	r3, [r7, #23]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d109      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006174:	4b7d      	ldr	r3, [pc, #500]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006178:	f023 0207 	bic.w	r2, r3, #7
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006180:	497a      	ldr	r1, [pc, #488]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006182:	4313      	orrs	r3, r2
 8006184:	650b      	str	r3, [r1, #80]	; 0x50
 8006186:	e001      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006188:	7dfb      	ldrb	r3, [r7, #23]
 800618a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006194:	2b00      	cmp	r3, #0
 8006196:	d03e      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619c:	2b80      	cmp	r3, #128	; 0x80
 800619e:	d01c      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80061a0:	2b80      	cmp	r3, #128	; 0x80
 80061a2:	d804      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x142>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d008      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d00d      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80061ac:	e01e      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x180>
 80061ae:	2bc0      	cmp	r3, #192	; 0xc0
 80061b0:	d01f      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b6:	d01e      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80061b8:	e018      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ba:	4b6c      	ldr	r3, [pc, #432]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	4a6b      	ldr	r2, [pc, #428]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80061c6:	e017      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	2100      	movs	r1, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 fcac 	bl	8007b2c <RCCEx_PLL2_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80061d8:	e00e      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3324      	adds	r3, #36	; 0x24
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f001 fd55 	bl	8007c90 <RCCEx_PLL3_Config>
 80061e6:	4603      	mov	r3, r0
 80061e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80061ea:	e005      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	75fb      	strb	r3, [r7, #23]
      break;
 80061f0:	e002      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80061f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d109      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061fe:	4b5b      	ldr	r3, [pc, #364]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006202:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	4958      	ldr	r1, [pc, #352]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800620c:	4313      	orrs	r3, r2
 800620e:	650b      	str	r3, [r1, #80]	; 0x50
 8006210:	e001      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800621e:	2b00      	cmp	r3, #0
 8006220:	d044      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800622c:	d01f      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800622e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006232:	d805      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800623c:	d00e      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800623e:	e01f      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006240:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006244:	d01f      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006246:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800624a:	d01e      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800624c:	e018      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800624e:	4b47      	ldr	r3, [pc, #284]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	4a46      	ldr	r2, [pc, #280]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006258:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800625a:	e017      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3304      	adds	r3, #4
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fc62 	bl	8007b2c <RCCEx_PLL2_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800626c:	e00e      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3324      	adds	r3, #36	; 0x24
 8006272:	2100      	movs	r1, #0
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fd0b 	bl	8007c90 <RCCEx_PLL3_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800627e:	e005      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	75fb      	strb	r3, [r7, #23]
      break;
 8006284:	e002      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006286:	bf00      	nop
 8006288:	e000      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800628a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006292:	4b36      	ldr	r3, [pc, #216]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006296:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062a0:	4932      	ldr	r1, [pc, #200]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	658b      	str	r3, [r1, #88]	; 0x58
 80062a6:	e001      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
 80062aa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d044      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062c2:	d01f      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80062c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062c8:	d805      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80062ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062d2:	d00e      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80062d4:	e01f      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80062d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062da:	d01f      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80062dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062e0:	d01e      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80062e2:	e018      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e4:	4b21      	ldr	r3, [pc, #132]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	4a20      	ldr	r2, [pc, #128]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062f0:	e017      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3304      	adds	r3, #4
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fc17 	bl	8007b2c <RCCEx_PLL2_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006302:	e00e      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3324      	adds	r3, #36	; 0x24
 8006308:	2100      	movs	r1, #0
 800630a:	4618      	mov	r0, r3
 800630c:	f001 fcc0 	bl	8007c90 <RCCEx_PLL3_Config>
 8006310:	4603      	mov	r3, r0
 8006312:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006314:	e005      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	75fb      	strb	r3, [r7, #23]
      break;
 800631a:	e002      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800631c:	bf00      	nop
 800631e:	e000      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006328:	4b10      	ldr	r3, [pc, #64]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006336:	490d      	ldr	r1, [pc, #52]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006338:	4313      	orrs	r3, r2
 800633a:	658b      	str	r3, [r1, #88]	; 0x58
 800633c:	e001      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633e:	7dfb      	ldrb	r3, [r7, #23]
 8006340:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d035      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006352:	2b10      	cmp	r3, #16
 8006354:	d00c      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006356:	2b10      	cmp	r3, #16
 8006358:	d802      	bhi.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01b      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800635e:	e017      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006360:	2b20      	cmp	r3, #32
 8006362:	d00c      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006364:	2b30      	cmp	r3, #48	; 0x30
 8006366:	d018      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006368:	e012      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800636a:	bf00      	nop
 800636c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006370:	4baf      	ldr	r3, [pc, #700]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	4aae      	ldr	r2, [pc, #696]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800637a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800637c:	e00e      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3304      	adds	r3, #4
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f001 fbd1 	bl	8007b2c <RCCEx_PLL2_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800638e:	e005      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	75fb      	strb	r3, [r7, #23]
      break;
 8006394:	e002      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006396:	bf00      	nop
 8006398:	e000      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800639a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800639c:	7dfb      	ldrb	r3, [r7, #23]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063a2:	4ba3      	ldr	r3, [pc, #652]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ae:	49a0      	ldr	r1, [pc, #640]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80063b4:	e001      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
 80063b8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d042      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ce:	d01f      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80063d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d4:	d805      	bhi.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80063da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063de:	d00e      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x392>
 80063e0:	e01f      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80063e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063e6:	d01f      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80063e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ec:	d01e      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80063ee:	e018      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f0:	4b8f      	ldr	r3, [pc, #572]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	4a8e      	ldr	r2, [pc, #568]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063fc:	e017      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3304      	adds	r3, #4
 8006402:	2100      	movs	r1, #0
 8006404:	4618      	mov	r0, r3
 8006406:	f001 fb91 	bl	8007b2c <RCCEx_PLL2_Config>
 800640a:	4603      	mov	r3, r0
 800640c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800640e:	e00e      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3324      	adds	r3, #36	; 0x24
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f001 fc3a 	bl	8007c90 <RCCEx_PLL3_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006420:	e005      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
      break;
 8006426:	e002      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006428:	bf00      	nop
 800642a:	e000      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800642c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006434:	4b7e      	ldr	r3, [pc, #504]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006438:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006440:	497b      	ldr	r1, [pc, #492]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006442:	4313      	orrs	r3, r2
 8006444:	650b      	str	r3, [r1, #80]	; 0x50
 8006446:	e001      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d042      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006460:	d01b      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006466:	d805      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d022      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800646c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006470:	d00a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006472:	e01b      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006474:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006478:	d01d      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800647a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800647e:	d01c      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006484:	d01b      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006486:	e011      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	2101      	movs	r1, #1
 800648e:	4618      	mov	r0, r3
 8006490:	f001 fb4c 	bl	8007b2c <RCCEx_PLL2_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006498:	e012      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3324      	adds	r3, #36	; 0x24
 800649e:	2101      	movs	r1, #1
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 fbf5 	bl	8007c90 <RCCEx_PLL3_Config>
 80064a6:	4603      	mov	r3, r0
 80064a8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80064aa:	e009      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	75fb      	strb	r3, [r7, #23]
      break;
 80064b0:	e006      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80064b2:	bf00      	nop
 80064b4:	e004      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80064b6:	bf00      	nop
 80064b8:	e002      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80064ba:	bf00      	nop
 80064bc:	e000      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80064be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80064c6:	4b5a      	ldr	r3, [pc, #360]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d2:	4957      	ldr	r1, [pc, #348]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	650b      	str	r3, [r1, #80]	; 0x50
 80064d8:	e001      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d044      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f4:	d01b      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80064f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064fa:	d805      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d022      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006500:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006504:	d00a      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006506:	e01b      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650c:	d01d      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800650e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006512:	d01c      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006514:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006518:	d01b      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800651a:	e011      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3304      	adds	r3, #4
 8006520:	2101      	movs	r1, #1
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fb02 	bl	8007b2c <RCCEx_PLL2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800652c:	e012      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3324      	adds	r3, #36	; 0x24
 8006532:	2101      	movs	r1, #1
 8006534:	4618      	mov	r0, r3
 8006536:	f001 fbab 	bl	8007c90 <RCCEx_PLL3_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800653e:	e009      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
      break;
 8006544:	e006      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006546:	bf00      	nop
 8006548:	e004      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800654a:	bf00      	nop
 800654c:	e002      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800654e:	bf00      	nop
 8006550:	e000      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800655a:	4b35      	ldr	r3, [pc, #212]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800655c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006568:	4931      	ldr	r1, [pc, #196]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800656a:	4313      	orrs	r3, r2
 800656c:	658b      	str	r3, [r1, #88]	; 0x58
 800656e:	e001      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
 8006572:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d02d      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006588:	d005      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800658a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800658e:	d009      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006594:	e00f      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006596:	4b26      	ldr	r3, [pc, #152]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	4a25      	ldr	r2, [pc, #148]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800659c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80065a2:	e00c      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3304      	adds	r3, #4
 80065a8:	2101      	movs	r1, #1
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 fabe 	bl	8007b2c <RCCEx_PLL2_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80065b4:	e003      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	75fb      	strb	r3, [r7, #23]
      break;
 80065ba:	e000      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80065bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065be:	7dfb      	ldrb	r3, [r7, #23]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065c4:	4b1a      	ldr	r3, [pc, #104]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d0:	4917      	ldr	r1, [pc, #92]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	650b      	str	r3, [r1, #80]	; 0x50
 80065d6:	e001      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
 80065da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d035      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d81b      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80065f0:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	08006635 	.word	0x08006635
 80065fc:	08006609 	.word	0x08006609
 8006600:	08006617 	.word	0x08006617
 8006604:	08006635 	.word	0x08006635
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006608:	4b09      	ldr	r3, [pc, #36]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	4a08      	ldr	r2, [pc, #32]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800660e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006612:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006614:	e00f      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3304      	adds	r3, #4
 800661a:	2102      	movs	r1, #2
 800661c:	4618      	mov	r0, r3
 800661e:	f001 fa85 	bl	8007b2c <RCCEx_PLL2_Config>
 8006622:	4603      	mov	r3, r0
 8006624:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006626:	e006      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]
      break;
 800662c:	e003      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800662e:	bf00      	nop
 8006630:	58024400 	.word	0x58024400
      break;
 8006634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d109      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800663c:	4bba      	ldr	r3, [pc, #744]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800663e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006640:	f023 0203 	bic.w	r2, r3, #3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006648:	49b7      	ldr	r1, [pc, #732]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800664a:	4313      	orrs	r3, r2
 800664c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800664e:	e001      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006650:	7dfb      	ldrb	r3, [r7, #23]
 8006652:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8086 	beq.w	800676e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006662:	4bb2      	ldr	r3, [pc, #712]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4ab1      	ldr	r2, [pc, #708]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800666e:	f7fa ff93 	bl	8001598 <HAL_GetTick>
 8006672:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006674:	e009      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006676:	f7fa ff8f 	bl	8001598 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b64      	cmp	r3, #100	; 0x64
 8006682:	d902      	bls.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	75fb      	strb	r3, [r7, #23]
        break;
 8006688:	e005      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800668a:	4ba8      	ldr	r3, [pc, #672]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0ef      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d166      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800669c:	4ba2      	ldr	r3, [pc, #648]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800669e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066a6:	4053      	eors	r3, r2
 80066a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d013      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066b0:	4b9d      	ldr	r3, [pc, #628]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066ba:	4b9b      	ldr	r3, [pc, #620]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066be:	4a9a      	ldr	r2, [pc, #616]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066c6:	4b98      	ldr	r3, [pc, #608]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ca:	4a97      	ldr	r2, [pc, #604]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066d2:	4a95      	ldr	r2, [pc, #596]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e2:	d115      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fa ff58 	bl	8001598 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066ea:	e00b      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ec:	f7fa ff54 	bl	8001598 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d902      	bls.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	75fb      	strb	r3, [r7, #23]
            break;
 8006702:	e005      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006704:	4b88      	ldr	r3, [pc, #544]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0ed      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d126      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800671c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006724:	d10d      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006726:	4b80      	ldr	r3, [pc, #512]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006734:	0919      	lsrs	r1, r3, #4
 8006736:	4b7e      	ldr	r3, [pc, #504]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006738:	400b      	ands	r3, r1
 800673a:	497b      	ldr	r1, [pc, #492]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800673c:	4313      	orrs	r3, r2
 800673e:	610b      	str	r3, [r1, #16]
 8006740:	e005      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006742:	4b79      	ldr	r3, [pc, #484]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	4a78      	ldr	r2, [pc, #480]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006748:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800674c:	6113      	str	r3, [r2, #16]
 800674e:	4b76      	ldr	r3, [pc, #472]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800675c:	4972      	ldr	r1, [pc, #456]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800675e:	4313      	orrs	r3, r2
 8006760:	670b      	str	r3, [r1, #112]	; 0x70
 8006762:	e004      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006764:	7dfb      	ldrb	r3, [r7, #23]
 8006766:	75bb      	strb	r3, [r7, #22]
 8006768:	e001      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d07d      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800677e:	2b28      	cmp	r3, #40	; 0x28
 8006780:	d866      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	08006857 	.word	0x08006857
 800678c:	08006851 	.word	0x08006851
 8006790:	08006851 	.word	0x08006851
 8006794:	08006851 	.word	0x08006851
 8006798:	08006851 	.word	0x08006851
 800679c:	08006851 	.word	0x08006851
 80067a0:	08006851 	.word	0x08006851
 80067a4:	08006851 	.word	0x08006851
 80067a8:	0800682d 	.word	0x0800682d
 80067ac:	08006851 	.word	0x08006851
 80067b0:	08006851 	.word	0x08006851
 80067b4:	08006851 	.word	0x08006851
 80067b8:	08006851 	.word	0x08006851
 80067bc:	08006851 	.word	0x08006851
 80067c0:	08006851 	.word	0x08006851
 80067c4:	08006851 	.word	0x08006851
 80067c8:	0800683f 	.word	0x0800683f
 80067cc:	08006851 	.word	0x08006851
 80067d0:	08006851 	.word	0x08006851
 80067d4:	08006851 	.word	0x08006851
 80067d8:	08006851 	.word	0x08006851
 80067dc:	08006851 	.word	0x08006851
 80067e0:	08006851 	.word	0x08006851
 80067e4:	08006851 	.word	0x08006851
 80067e8:	08006857 	.word	0x08006857
 80067ec:	08006851 	.word	0x08006851
 80067f0:	08006851 	.word	0x08006851
 80067f4:	08006851 	.word	0x08006851
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006851 	.word	0x08006851
 8006800:	08006851 	.word	0x08006851
 8006804:	08006851 	.word	0x08006851
 8006808:	08006857 	.word	0x08006857
 800680c:	08006851 	.word	0x08006851
 8006810:	08006851 	.word	0x08006851
 8006814:	08006851 	.word	0x08006851
 8006818:	08006851 	.word	0x08006851
 800681c:	08006851 	.word	0x08006851
 8006820:	08006851 	.word	0x08006851
 8006824:	08006851 	.word	0x08006851
 8006828:	08006857 	.word	0x08006857
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3304      	adds	r3, #4
 8006830:	2101      	movs	r1, #1
 8006832:	4618      	mov	r0, r3
 8006834:	f001 f97a 	bl	8007b2c <RCCEx_PLL2_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800683c:	e00c      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3324      	adds	r3, #36	; 0x24
 8006842:	2101      	movs	r1, #1
 8006844:	4618      	mov	r0, r3
 8006846:	f001 fa23 	bl	8007c90 <RCCEx_PLL3_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800684e:	e003      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	75fb      	strb	r3, [r7, #23]
      break;
 8006854:	e000      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800685e:	4b32      	ldr	r3, [pc, #200]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006862:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800686a:	492f      	ldr	r1, [pc, #188]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800686c:	4313      	orrs	r3, r2
 800686e:	654b      	str	r3, [r1, #84]	; 0x54
 8006870:	e001      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d037      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006886:	2b05      	cmp	r3, #5
 8006888:	d820      	bhi.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x860>
 800688a:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006890:	080068d3 	.word	0x080068d3
 8006894:	080068a9 	.word	0x080068a9
 8006898:	080068bb 	.word	0x080068bb
 800689c:	080068d3 	.word	0x080068d3
 80068a0:	080068d3 	.word	0x080068d3
 80068a4:	080068d3 	.word	0x080068d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	2101      	movs	r1, #1
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 f93c 	bl	8007b2c <RCCEx_PLL2_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80068b8:	e00c      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3324      	adds	r3, #36	; 0x24
 80068be:	2101      	movs	r1, #1
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 f9e5 	bl	8007c90 <RCCEx_PLL3_Config>
 80068c6:	4603      	mov	r3, r0
 80068c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80068ca:	e003      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	75fb      	strb	r3, [r7, #23]
      break;
 80068d0:	e000      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80068d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d4:	7dfb      	ldrb	r3, [r7, #23]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80068da:	4b13      	ldr	r3, [pc, #76]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068de:	f023 0207 	bic.w	r2, r3, #7
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e6:	4910      	ldr	r1, [pc, #64]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	654b      	str	r3, [r1, #84]	; 0x54
 80068ec:	e001      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d040      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006904:	2b05      	cmp	r3, #5
 8006906:	d827      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006908:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	0800695f 	.word	0x0800695f
 8006914:	08006935 	.word	0x08006935
 8006918:	08006947 	.word	0x08006947
 800691c:	0800695f 	.word	0x0800695f
 8006920:	0800695f 	.word	0x0800695f
 8006924:	0800695f 	.word	0x0800695f
 8006928:	58024400 	.word	0x58024400
 800692c:	58024800 	.word	0x58024800
 8006930:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3304      	adds	r3, #4
 8006938:	2101      	movs	r1, #1
 800693a:	4618      	mov	r0, r3
 800693c:	f001 f8f6 	bl	8007b2c <RCCEx_PLL2_Config>
 8006940:	4603      	mov	r3, r0
 8006942:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006944:	e00c      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3324      	adds	r3, #36	; 0x24
 800694a:	2101      	movs	r1, #1
 800694c:	4618      	mov	r0, r3
 800694e:	f001 f99f 	bl	8007c90 <RCCEx_PLL3_Config>
 8006952:	4603      	mov	r3, r0
 8006954:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006956:	e003      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	75fb      	strb	r3, [r7, #23]
      break;
 800695c:	e000      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800695e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10a      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006966:	4bb2      	ldr	r3, [pc, #712]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696a:	f023 0207 	bic.w	r2, r3, #7
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006974:	49ae      	ldr	r1, [pc, #696]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006976:	4313      	orrs	r3, r2
 8006978:	658b      	str	r3, [r1, #88]	; 0x58
 800697a:	e001      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d044      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006996:	d01b      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800699c:	d805      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d022      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80069a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069a6:	d00a      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x952>
 80069a8:	e01b      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80069aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ae:	d01d      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x980>
 80069b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069b4:	d01c      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80069b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069ba:	d01b      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80069bc:	e011      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	3304      	adds	r3, #4
 80069c2:	2100      	movs	r1, #0
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 f8b1 	bl	8007b2c <RCCEx_PLL2_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80069ce:	e012      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3324      	adds	r3, #36	; 0x24
 80069d4:	2102      	movs	r1, #2
 80069d6:	4618      	mov	r0, r3
 80069d8:	f001 f95a 	bl	8007c90 <RCCEx_PLL3_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80069e0:	e009      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	75fb      	strb	r3, [r7, #23]
      break;
 80069e6:	e006      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069e8:	bf00      	nop
 80069ea:	e004      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069ec:	bf00      	nop
 80069ee:	e002      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069f0:	bf00      	nop
 80069f2:	e000      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069fc:	4b8c      	ldr	r3, [pc, #560]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80069fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a00:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a0a:	4989      	ldr	r1, [pc, #548]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	654b      	str	r3, [r1, #84]	; 0x54
 8006a10:	e001      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d044      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a2c:	d01b      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a32:	d805      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d022      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3c:	d00a      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006a3e:	e01b      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a44:	d01d      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006a46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a4a:	d01c      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a50:	d01b      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006a52:	e011      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 f866 	bl	8007b2c <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a64:	e012      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3324      	adds	r3, #36	; 0x24
 8006a6a:	2102      	movs	r1, #2
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 f90f 	bl	8007c90 <RCCEx_PLL3_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a76:	e009      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7c:	e006      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a7e:	bf00      	nop
 8006a80:	e004      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a82:	bf00      	nop
 8006a84:	e002      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a86:	bf00      	nop
 8006a88:	e000      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a92:	4b67      	ldr	r3, [pc, #412]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006aa0:	4963      	ldr	r1, [pc, #396]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	658b      	str	r3, [r1, #88]	; 0x58
 8006aa6:	e001      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d044      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ac2:	d01b      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ac8:	d805      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d022      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad2:	d00a      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006ad4:	e01b      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ada:	d01d      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006adc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ae0:	d01c      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006ae2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ae6:	d01b      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006ae8:	e011      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	3304      	adds	r3, #4
 8006aee:	2100      	movs	r1, #0
 8006af0:	4618      	mov	r0, r3
 8006af2:	f001 f81b 	bl	8007b2c <RCCEx_PLL2_Config>
 8006af6:	4603      	mov	r3, r0
 8006af8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006afa:	e012      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3324      	adds	r3, #36	; 0x24
 8006b00:	2102      	movs	r1, #2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f001 f8c4 	bl	8007c90 <RCCEx_PLL3_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b0c:	e009      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	75fb      	strb	r3, [r7, #23]
      break;
 8006b12:	e006      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006b14:	bf00      	nop
 8006b16:	e004      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006b18:	bf00      	nop
 8006b1a:	e002      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006b1c:	bf00      	nop
 8006b1e:	e000      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b28:	4b41      	ldr	r3, [pc, #260]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b36:	493e      	ldr	r1, [pc, #248]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	658b      	str	r3, [r1, #88]	; 0x58
 8006b3c:	e001      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3e:	7dfb      	ldrb	r3, [r7, #23]
 8006b40:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d01a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b58:	d10a      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3324      	adds	r3, #36	; 0x24
 8006b5e:	2102      	movs	r1, #2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 f895 	bl	8007c90 <RCCEx_PLL3_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b70:	4b2f      	ldr	r3, [pc, #188]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b7e:	492c      	ldr	r1, [pc, #176]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0310 	and.w	r3, r3, #16
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01a      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9a:	d10a      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3324      	adds	r3, #36	; 0x24
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f001 f874 	bl	8007c90 <RCCEx_PLL3_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bb2:	4b1f      	ldr	r3, [pc, #124]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bc0:	491b      	ldr	r1, [pc, #108]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d032      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bdc:	d00d      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006be2:	d016      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d111      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3304      	adds	r3, #4
 8006bec:	2100      	movs	r1, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 ff9c 	bl	8007b2c <RCCEx_PLL2_Config>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006bf8:	e00c      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3324      	adds	r3, #36	; 0x24
 8006bfe:	2102      	movs	r1, #2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f001 f845 	bl	8007c90 <RCCEx_PLL3_Config>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c0a:	e003      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c10:	e000      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10c      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c1a:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c28:	4901      	ldr	r1, [pc, #4]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	658b      	str	r3, [r1, #88]	; 0x58
 8006c2e:	e003      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006c30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d02f      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c4e:	d00c      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006c50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c54:	d015      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5a:	d10f      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c5c:	4b79      	ldr	r3, [pc, #484]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	4a78      	ldr	r2, [pc, #480]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c68:	e00c      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3324      	adds	r3, #36	; 0x24
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 f80d 	bl	8007c90 <RCCEx_PLL3_Config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c7a:	e003      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c80:	e000      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10a      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c8a:	4b6e      	ldr	r3, [pc, #440]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c98:	496a      	ldr	r1, [pc, #424]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	654b      	str	r3, [r1, #84]	; 0x54
 8006c9e:	e001      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
 8006ca2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d029      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cbc:	d007      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006cbe:	e00f      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc0:	4b60      	ldr	r3, [pc, #384]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	4a5f      	ldr	r2, [pc, #380]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ccc:	e00b      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	2102      	movs	r1, #2
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 ff29 	bl	8007b2c <RCCEx_PLL2_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006cde:	e002      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006cec:	4b55      	ldr	r3, [pc, #340]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf8:	4952      	ldr	r1, [pc, #328]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cfe:	e001      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00a      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3324      	adds	r3, #36	; 0x24
 8006d14:	2102      	movs	r1, #2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 ffba 	bl	8007c90 <RCCEx_PLL3_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d02f      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3a:	d00c      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d40:	d802      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d011      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006d46:	e00d      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4c:	d00f      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d52:	d00e      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006d54:	e006      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d56:	4b3b      	ldr	r3, [pc, #236]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	4a3a      	ldr	r2, [pc, #232]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006d62:	e007      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
      break;
 8006d68:	e004      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d6a:	bf00      	nop
 8006d6c:	e002      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d6e:	bf00      	nop
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d7a:	4b32      	ldr	r3, [pc, #200]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d86:	492f      	ldr	r1, [pc, #188]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	654b      	str	r3, [r1, #84]	; 0x54
 8006d8c:	e001      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d008      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d9e:	4b29      	ldr	r3, [pc, #164]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	4926      	ldr	r1, [pc, #152]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d009      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006dbc:	4b21      	ldr	r3, [pc, #132]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006dca:	491e      	ldr	r1, [pc, #120]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ddc:	4b19      	ldr	r3, [pc, #100]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de8:	4916      	ldr	r1, [pc, #88]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dfa:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	4a11      	ldr	r2, [pc, #68]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e04:	6113      	str	r3, [r2, #16]
 8006e06:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006e10:	490c      	ldr	r1, [pc, #48]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	da08      	bge.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e1e:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2a:	4906      	ldr	r1, [pc, #24]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006e30:	7dbb      	ldrb	r3, [r7, #22]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e000      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	58024400 	.word	0x58024400

08006e48 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b090      	sub	sp, #64	; 0x40
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e56:	d150      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006e58:	4ba1      	ldr	r3, [pc, #644]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d844      	bhi.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006e68:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006e85 	.word	0x08006e85
 8006e74:	08006e95 	.word	0x08006e95
 8006e78:	08006ea5 	.word	0x08006ea5
 8006e7c:	08006eed 	.word	0x08006eed
 8006e80:	08006eb5 	.word	0x08006eb5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fd03 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e92:	e241      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e94:	f107 0318 	add.w	r3, r7, #24
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fa63 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea2:	e239      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ea4:	f107 030c 	add.w	r3, r7, #12
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fba7 	bl	80075fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eb2:	e231      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006eb4:	4b8a      	ldr	r3, [pc, #552]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ebc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d102      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006ec4:	4b87      	ldr	r3, [pc, #540]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006ec8:	e226      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed0:	d102      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006ed2:	4b85      	ldr	r3, [pc, #532]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ed6:	e21f      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ede:	d102      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006ee0:	4b82      	ldr	r3, [pc, #520]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ee4:	e218      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eea:	e215      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006eec:	4b80      	ldr	r3, [pc, #512]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef0:	e212      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef6:	bf00      	nop
 8006ef8:	e20e      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f00:	d14f      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006f02:	4b77      	ldr	r3, [pc, #476]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f06:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006f0a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	2b80      	cmp	r3, #128	; 0x80
 8006f10:	d01c      	beq.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006f12:	2b80      	cmp	r3, #128	; 0x80
 8006f14:	d804      	bhi.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006f1a:	2b40      	cmp	r3, #64	; 0x40
 8006f1c:	d00e      	beq.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006f1e:	e03c      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006f20:	2bc0      	cmp	r3, #192	; 0xc0
 8006f22:	d037      	beq.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f28:	d018      	beq.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006f2a:	e036      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fcaf 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f3a:	e1ed      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f3c:	f107 0318 	add.w	r3, r7, #24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fa0f 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f4a:	e1e5      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f4c:	f107 030c 	add.w	r3, r7, #12
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fb53 	bl	80075fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f5a:	e1dd      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f5c:	4b60      	ldr	r3, [pc, #384]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006f6c:	4b5d      	ldr	r3, [pc, #372]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006f70:	e1d2      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f78:	d102      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8006f7a:	4b5b      	ldr	r3, [pc, #364]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f7e:	e1cb      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f86:	d102      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006f88:	4b58      	ldr	r3, [pc, #352]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f8c:	e1c4      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f92:	e1c1      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f94:	4b56      	ldr	r3, [pc, #344]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f98:	e1be      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f9e:	bf00      	nop
 8006fa0:	e1ba      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa8:	d153      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006faa:	4b4d      	ldr	r3, [pc, #308]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006fb2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fba:	d01f      	beq.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fc0:	d805      	bhi.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006fc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fca:	d00f      	beq.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006fcc:	e03d      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006fce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006fd2:	d037      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fd8:	d018      	beq.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006fda:	e036      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fc57 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fea:	e195      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fec:	f107 0318 	add.w	r3, r7, #24
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 f9b7 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ffa:	e18d      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ffc:	f107 030c 	add.w	r3, r7, #12
 8007000:	4618      	mov	r0, r3
 8007002:	f000 fafb 	bl	80075fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800700a:	e185      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800700c:	4b34      	ldr	r3, [pc, #208]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800700e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007010:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007014:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	2b00      	cmp	r3, #0
 800701a:	d102      	bne.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800701c:	4b31      	ldr	r3, [pc, #196]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007020:	e17a      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007028:	d102      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800702a:	4b2f      	ldr	r3, [pc, #188]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800702e:	e173      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007036:	d102      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007038:	4b2c      	ldr	r3, [pc, #176]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800703c:	e16c      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007042:	e169      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007044:	4b2a      	ldr	r3, [pc, #168]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007048:	e166      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800704e:	bf00      	nop
 8007050:	e162      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007058:	d15d      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800705a:	4b21      	ldr	r3, [pc, #132]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800705c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007062:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800706a:	d01f      	beq.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800706c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007070:	d805      	bhi.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007076:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800707a:	d00f      	beq.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800707c:	e047      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800707e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007082:	d041      	beq.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007084:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007088:	d018      	beq.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800708a:	e040      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800708c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fbff 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800709a:	e13d      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800709c:	f107 0318 	add.w	r3, r7, #24
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 f95f 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070aa:	e135      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ac:	f107 030c 	add.w	r3, r7, #12
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 faa3 	bl	80075fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ba:	e12d      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80070bc:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80070c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80070d0:	e122      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80070d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070d8:	d10c      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80070da:	4b03      	ldr	r3, [pc, #12]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80070dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070de:	e11b      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80070e0:	58024400 	.word	0x58024400
 80070e4:	03d09000 	.word	0x03d09000
 80070e8:	003d0900 	.word	0x003d0900
 80070ec:	017d7840 	.word	0x017d7840
 80070f0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80070f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070fa:	d102      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80070fc:	4b89      	ldr	r3, [pc, #548]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007100:	e10a      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007106:	e107      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007108:	4b87      	ldr	r3, [pc, #540]	; (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800710a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800710c:	e104      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007112:	bf00      	nop
 8007114:	e100      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711c:	d153      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800711e:	4b83      	ldr	r3, [pc, #524]	; (800732c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007122:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007126:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800712e:	d01f      	beq.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007134:	d805      	bhi.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800713a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800713e:	d00f      	beq.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007140:	e03d      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007142:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007146:	d037      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800714c:	d018      	beq.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800714e:	e036      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fb9d 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715e:	e0db      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007160:	f107 0318 	add.w	r3, r7, #24
 8007164:	4618      	mov	r0, r3
 8007166:	f000 f8fd 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800716e:	e0d3      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007170:	f107 030c 	add.w	r3, r7, #12
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fa41 	bl	80075fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800717e:	e0cb      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007180:	4b6a      	ldr	r3, [pc, #424]	; (800732c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007188:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718c:	2b00      	cmp	r3, #0
 800718e:	d102      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007190:	4b67      	ldr	r3, [pc, #412]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007194:	e0c0      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800719c:	d102      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800719e:	4b65      	ldr	r3, [pc, #404]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80071a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a2:	e0b9      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80071a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071aa:	d102      	bne.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80071ac:	4b5d      	ldr	r3, [pc, #372]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b0:	e0b2      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b6:	e0af      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80071b8:	4b5b      	ldr	r3, [pc, #364]	; (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071bc:	e0ac      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071c2:	bf00      	nop
 80071c4:	e0a8      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071cc:	d13d      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80071ce:	4b57      	ldr	r3, [pc, #348]	; (800732c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80071d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071de:	d00c      	beq.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80071e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071e4:	d011      	beq.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d12b      	bne.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ea:	f107 0318 	add.w	r3, r7, #24
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 f8b8 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f8:	e08e      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071fa:	f107 030c 	add.w	r3, r7, #12
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f9fc 	bl	80075fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007208:	e086      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800720a:	4b48      	ldr	r3, [pc, #288]	; (800732c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800720c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007212:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007216:	2b00      	cmp	r3, #0
 8007218:	d102      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800721a:	4b45      	ldr	r3, [pc, #276]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800721e:	e07b      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007226:	d102      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007228:	4b42      	ldr	r3, [pc, #264]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800722c:	e074      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800722e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007234:	d102      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007236:	4b3b      	ldr	r3, [pc, #236]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800723a:	e06d      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007240:	e06a      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007246:	bf00      	nop
 8007248:	e066      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007250:	d11f      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007252:	4b36      	ldr	r3, [pc, #216]	; (800732c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800725a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007266:	d008      	beq.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007268:	e00f      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800726a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fb10 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007278:	e04e      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800727a:	f107 0318 	add.w	r3, r7, #24
 800727e:	4618      	mov	r0, r3
 8007280:	f000 f870 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007288:	e046      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800728e:	bf00      	nop
 8007290:	e042      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007298:	d13c      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800729a:	4b24      	ldr	r3, [pc, #144]	; (800732c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800729c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80072a2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072aa:	d01e      	beq.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80072ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b0:	d805      	bhi.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00d      	beq.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80072b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ba:	d00e      	beq.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80072bc:	e026      	b.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c2:	d01d      	beq.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80072c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072c8:	d01d      	beq.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80072ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072ce:	d014      	beq.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80072d0:	e01c      	b.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80072d2:	f000 f831 	bl	8007338 <HAL_RCCEx_GetD3PCLK1Freq>
 80072d6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80072d8:	e01e      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072da:	f107 0318 	add.w	r3, r7, #24
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 f840 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e8:	e016      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072ea:	f107 030c 	add.w	r3, r7, #12
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 f984 	bl	80075fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f8:	e00e      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80072fa:	4b0d      	ldr	r3, [pc, #52]	; (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072fe:	e00b      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007300:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007304:	e008      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007306:	4b07      	ldr	r3, [pc, #28]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007308:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800730a:	e005      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007310:	bf00      	nop
 8007312:	e001      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800731a:	4618      	mov	r0, r3
 800731c:	3740      	adds	r7, #64	; 0x40
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	017d7840 	.word	0x017d7840
 8007328:	00bb8000 	.word	0x00bb8000
 800732c:	58024400 	.word	0x58024400
 8007330:	03d09000 	.word	0x03d09000
 8007334:	003d0900 	.word	0x003d0900

08007338 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800733c:	f7fe fe1e 	bl	8005f7c <HAL_RCC_GetHCLKFreq>
 8007340:	4601      	mov	r1, r0
 8007342:	4b06      	ldr	r3, [pc, #24]	; (800735c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	091b      	lsrs	r3, r3, #4
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	4a04      	ldr	r2, [pc, #16]	; (8007360 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800734e:	5cd3      	ldrb	r3, [r2, r3]
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007358:	4618      	mov	r0, r3
 800735a:	bd80      	pop	{r7, pc}
 800735c:	58024400 	.word	0x58024400
 8007360:	08012950 	.word	0x08012950

08007364 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007364:	b480      	push	{r7}
 8007366:	b089      	sub	sp, #36	; 0x24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800736c:	4b9d      	ldr	r3, [pc, #628]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	f003 0303 	and.w	r3, r3, #3
 8007374:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007376:	4b9b      	ldr	r3, [pc, #620]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	0b1b      	lsrs	r3, r3, #12
 800737c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007380:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007382:	4b98      	ldr	r3, [pc, #608]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	091b      	lsrs	r3, r3, #4
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800738e:	4b95      	ldr	r3, [pc, #596]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007392:	08db      	lsrs	r3, r3, #3
 8007394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	fb02 f303 	mul.w	r3, r2, r3
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 810a 	beq.w	80075c6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d05a      	beq.n	800746e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d302      	bcc.n	80073c2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d078      	beq.n	80074b2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80073c0:	e099      	b.n	80074f6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073c2:	4b88      	ldr	r3, [pc, #544]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d02d      	beq.n	800742a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073ce:	4b85      	ldr	r3, [pc, #532]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	08db      	lsrs	r3, r3, #3
 80073d4:	f003 0303 	and.w	r3, r3, #3
 80073d8:	4a83      	ldr	r2, [pc, #524]	; (80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80073da:	fa22 f303 	lsr.w	r3, r2, r3
 80073de:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	ee07 3a90 	vmov	s15, r3
 80073f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f8:	4b7a      	ldr	r3, [pc, #488]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007400:	ee07 3a90 	vmov	s15, r3
 8007404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007408:	ed97 6a03 	vldr	s12, [r7, #12]
 800740c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800741c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007424:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007428:	e087      	b.n	800753a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007434:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743c:	4b69      	ldr	r3, [pc, #420]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007444:	ee07 3a90 	vmov	s15, r3
 8007448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007450:	eddf 5a66 	vldr	s11, [pc, #408]	; 80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007468:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800746c:	e065      	b.n	800753a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007478:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800747c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007480:	4b58      	ldr	r3, [pc, #352]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007488:	ee07 3a90 	vmov	s15, r3
 800748c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007490:	ed97 6a03 	vldr	s12, [r7, #12]
 8007494:	eddf 5a55 	vldr	s11, [pc, #340]	; 80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074b0:	e043      	b.n	800753a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80074c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c4:	4b47      	ldr	r3, [pc, #284]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074cc:	ee07 3a90 	vmov	s15, r3
 80074d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80074d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80074dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074f4:	e021      	b.n	800753a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007500:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007508:	4b36      	ldr	r3, [pc, #216]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007518:	ed97 6a03 	vldr	s12, [r7, #12]
 800751c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800752c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007534:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007538:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800753a:	4b2a      	ldr	r3, [pc, #168]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800753c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753e:	0a5b      	lsrs	r3, r3, #9
 8007540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007544:	ee07 3a90 	vmov	s15, r3
 8007548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007554:	edd7 6a07 	vldr	s13, [r7, #28]
 8007558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800755c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007560:	ee17 2a90 	vmov	r2, s15
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007568:	4b1e      	ldr	r3, [pc, #120]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	0c1b      	lsrs	r3, r3, #16
 800756e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800757e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007582:	edd7 6a07 	vldr	s13, [r7, #28]
 8007586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800758a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800758e:	ee17 2a90 	vmov	r2, s15
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007596:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	0e1b      	lsrs	r3, r3, #24
 800759c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a0:	ee07 3a90 	vmov	s15, r3
 80075a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80075b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075bc:	ee17 2a90 	vmov	r2, s15
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075c4:	e008      	b.n	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	609a      	str	r2, [r3, #8]
}
 80075d8:	bf00      	nop
 80075da:	3724      	adds	r7, #36	; 0x24
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	58024400 	.word	0x58024400
 80075e8:	03d09000 	.word	0x03d09000
 80075ec:	46000000 	.word	0x46000000
 80075f0:	4c742400 	.word	0x4c742400
 80075f4:	4a742400 	.word	0x4a742400
 80075f8:	4bbebc20 	.word	0x4bbebc20

080075fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b089      	sub	sp, #36	; 0x24
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007604:	4b9d      	ldr	r3, [pc, #628]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800760e:	4b9b      	ldr	r3, [pc, #620]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007612:	0d1b      	lsrs	r3, r3, #20
 8007614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007618:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800761a:	4b98      	ldr	r3, [pc, #608]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	0a1b      	lsrs	r3, r3, #8
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007626:	4b95      	ldr	r3, [pc, #596]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762a:	08db      	lsrs	r3, r3, #3
 800762c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	fb02 f303 	mul.w	r3, r2, r3
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 810a 	beq.w	800785e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d05a      	beq.n	8007706 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007650:	2b01      	cmp	r3, #1
 8007652:	d302      	bcc.n	800765a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007654:	2b02      	cmp	r3, #2
 8007656:	d078      	beq.n	800774a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007658:	e099      	b.n	800778e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800765a:	4b88      	ldr	r3, [pc, #544]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d02d      	beq.n	80076c2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007666:	4b85      	ldr	r3, [pc, #532]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	08db      	lsrs	r3, r3, #3
 800766c:	f003 0303 	and.w	r3, r3, #3
 8007670:	4a83      	ldr	r2, [pc, #524]	; (8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007672:	fa22 f303 	lsr.w	r3, r2, r3
 8007676:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	ee07 3a90 	vmov	s15, r3
 8007688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007690:	4b7a      	ldr	r3, [pc, #488]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007698:	ee07 3a90 	vmov	s15, r3
 800769c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076c0:	e087      	b.n	80077d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	ee07 3a90 	vmov	s15, r3
 80076c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007888 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80076d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d4:	4b69      	ldr	r3, [pc, #420]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007700:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007704:	e065      	b.n	80077d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	ee07 3a90 	vmov	s15, r3
 800770c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007710:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800788c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007718:	4b58      	ldr	r3, [pc, #352]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007728:	ed97 6a03 	vldr	s12, [r7, #12]
 800772c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800773c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007744:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007748:	e043      	b.n	80077d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007754:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775c:	4b47      	ldr	r3, [pc, #284]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800775e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007764:	ee07 3a90 	vmov	s15, r3
 8007768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007770:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007788:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800778c:	e021      	b.n	80077d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	ee07 3a90 	vmov	s15, r3
 8007794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007798:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800788c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800779c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a0:	4b36      	ldr	r3, [pc, #216]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a8:	ee07 3a90 	vmov	s15, r3
 80077ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80077b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077d0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80077d2:	4b2a      	ldr	r3, [pc, #168]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	0a5b      	lsrs	r3, r3, #9
 80077d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077dc:	ee07 3a90 	vmov	s15, r3
 80077e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f8:	ee17 2a90 	vmov	r2, s15
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007800:	4b1e      	ldr	r3, [pc, #120]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	0c1b      	lsrs	r3, r3, #16
 8007806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800781a:	edd7 6a07 	vldr	s13, [r7, #28]
 800781e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007826:	ee17 2a90 	vmov	r2, s15
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800782e:	4b13      	ldr	r3, [pc, #76]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	0e1b      	lsrs	r3, r3, #24
 8007834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007838:	ee07 3a90 	vmov	s15, r3
 800783c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007844:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007848:	edd7 6a07 	vldr	s13, [r7, #28]
 800784c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007854:	ee17 2a90 	vmov	r2, s15
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800785c:	e008      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	609a      	str	r2, [r3, #8]
}
 8007870:	bf00      	nop
 8007872:	3724      	adds	r7, #36	; 0x24
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	58024400 	.word	0x58024400
 8007880:	03d09000 	.word	0x03d09000
 8007884:	46000000 	.word	0x46000000
 8007888:	4c742400 	.word	0x4c742400
 800788c:	4a742400 	.word	0x4a742400
 8007890:	4bbebc20 	.word	0x4bbebc20

08007894 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007894:	b480      	push	{r7}
 8007896:	b089      	sub	sp, #36	; 0x24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800789c:	4b9d      	ldr	r3, [pc, #628]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800789e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80078a6:	4b9b      	ldr	r3, [pc, #620]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	091b      	lsrs	r3, r3, #4
 80078ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80078b2:	4b98      	ldr	r3, [pc, #608]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80078bc:	4b95      	ldr	r3, [pc, #596]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c0:	08db      	lsrs	r3, r3, #3
 80078c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	ee07 3a90 	vmov	s15, r3
 80078d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 810a 	beq.w	8007af4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d05a      	beq.n	800799c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d302      	bcc.n	80078f0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d078      	beq.n	80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80078ee:	e099      	b.n	8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078f0:	4b88      	ldr	r3, [pc, #544]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0320 	and.w	r3, r3, #32
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d02d      	beq.n	8007958 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078fc:	4b85      	ldr	r3, [pc, #532]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	08db      	lsrs	r3, r3, #3
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	4a84      	ldr	r2, [pc, #528]	; (8007b18 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007908:	fa22 f303 	lsr.w	r3, r2, r3
 800790c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	ee07 3a90 	vmov	s15, r3
 8007914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007926:	4b7b      	ldr	r3, [pc, #492]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	ed97 6a03 	vldr	s12, [r7, #12]
 800793a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b1c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007956:	e087      	b.n	8007a68 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007962:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800796a:	4b6a      	ldr	r3, [pc, #424]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797a:	ed97 6a03 	vldr	s12, [r7, #12]
 800797e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b1c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800798a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800798e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800799a:	e065      	b.n	8007a68 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	ee07 3a90 	vmov	s15, r3
 80079a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80079aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ae:	4b59      	ldr	r3, [pc, #356]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079be:	ed97 6a03 	vldr	s12, [r7, #12]
 80079c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b1c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80079c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079de:	e043      	b.n	8007a68 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f2:	4b48      	ldr	r3, [pc, #288]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b1c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a22:	e021      	b.n	8007a68 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a36:	4b37      	ldr	r3, [pc, #220]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b1c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a66:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007a68:	4b2a      	ldr	r3, [pc, #168]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6c:	0a5b      	lsrs	r3, r3, #9
 8007a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a8e:	ee17 2a90 	vmov	r2, s15
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007a96:	4b1f      	ldr	r3, [pc, #124]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	0c1b      	lsrs	r3, r3, #16
 8007a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa0:	ee07 3a90 	vmov	s15, r3
 8007aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007abc:	ee17 2a90 	vmov	r2, s15
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007ac4:	4b13      	ldr	r3, [pc, #76]	; (8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	0e1b      	lsrs	r3, r3, #24
 8007aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aea:	ee17 2a90 	vmov	r2, s15
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007af2:	e008      	b.n	8007b06 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	609a      	str	r2, [r3, #8]
}
 8007b06:	bf00      	nop
 8007b08:	3724      	adds	r7, #36	; 0x24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	58024400 	.word	0x58024400
 8007b18:	03d09000 	.word	0x03d09000
 8007b1c:	46000000 	.word	0x46000000
 8007b20:	4c742400 	.word	0x4c742400
 8007b24:	4a742400 	.word	0x4a742400
 8007b28:	4bbebc20 	.word	0x4bbebc20

08007b2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b3a:	4b53      	ldr	r3, [pc, #332]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d101      	bne.n	8007b4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e099      	b.n	8007c7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b4a:	4b4f      	ldr	r3, [pc, #316]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a4e      	ldr	r2, [pc, #312]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007b50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b56:	f7f9 fd1f 	bl	8001598 <HAL_GetTick>
 8007b5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b5c:	e008      	b.n	8007b70 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b5e:	f7f9 fd1b 	bl	8001598 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d901      	bls.n	8007b70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e086      	b.n	8007c7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b70:	4b45      	ldr	r3, [pc, #276]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1f0      	bne.n	8007b5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b7c:	4b42      	ldr	r3, [pc, #264]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	031b      	lsls	r3, r3, #12
 8007b8a:	493f      	ldr	r1, [pc, #252]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	628b      	str	r3, [r1, #40]	; 0x28
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	025b      	lsls	r3, r3, #9
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	041b      	lsls	r3, r3, #16
 8007bae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	061b      	lsls	r3, r3, #24
 8007bbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bc0:	4931      	ldr	r1, [pc, #196]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bc6:	4b30      	ldr	r3, [pc, #192]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	492d      	ldr	r1, [pc, #180]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bd8:	4b2b      	ldr	r3, [pc, #172]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	f023 0220 	bic.w	r2, r3, #32
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	4928      	ldr	r1, [pc, #160]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bea:	4b27      	ldr	r3, [pc, #156]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	4a26      	ldr	r2, [pc, #152]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007bf0:	f023 0310 	bic.w	r3, r3, #16
 8007bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bf6:	4b24      	ldr	r3, [pc, #144]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bfa:	4b24      	ldr	r3, [pc, #144]	; (8007c8c <RCCEx_PLL2_Config+0x160>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	69d2      	ldr	r2, [r2, #28]
 8007c02:	00d2      	lsls	r2, r2, #3
 8007c04:	4920      	ldr	r1, [pc, #128]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c0a:	4b1f      	ldr	r3, [pc, #124]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	4a1e      	ldr	r2, [pc, #120]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c10:	f043 0310 	orr.w	r3, r3, #16
 8007c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c1c:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	4a19      	ldr	r2, [pc, #100]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c28:	e00f      	b.n	8007c4a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d106      	bne.n	8007c3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c30:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	4a14      	ldr	r2, [pc, #80]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c3c:	e005      	b.n	8007c4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c3e:	4b12      	ldr	r3, [pc, #72]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	4a11      	ldr	r2, [pc, #68]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a0e      	ldr	r2, [pc, #56]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c56:	f7f9 fc9f 	bl	8001598 <HAL_GetTick>
 8007c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c5c:	e008      	b.n	8007c70 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c5e:	f7f9 fc9b 	bl	8001598 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d901      	bls.n	8007c70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e006      	b.n	8007c7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <RCCEx_PLL2_Config+0x15c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0f0      	beq.n	8007c5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	58024400 	.word	0x58024400
 8007c8c:	ffff0007 	.word	0xffff0007

08007c90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c9e:	4b53      	ldr	r3, [pc, #332]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d101      	bne.n	8007cae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e099      	b.n	8007de2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007cae:	4b4f      	ldr	r3, [pc, #316]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a4e      	ldr	r2, [pc, #312]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cba:	f7f9 fc6d 	bl	8001598 <HAL_GetTick>
 8007cbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cc0:	e008      	b.n	8007cd4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007cc2:	f7f9 fc69 	bl	8001598 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d901      	bls.n	8007cd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e086      	b.n	8007de2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cd4:	4b45      	ldr	r3, [pc, #276]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1f0      	bne.n	8007cc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ce0:	4b42      	ldr	r3, [pc, #264]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	051b      	lsls	r3, r3, #20
 8007cee:	493f      	ldr	r1, [pc, #252]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	628b      	str	r3, [r1, #40]	; 0x28
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	025b      	lsls	r3, r3, #9
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	041b      	lsls	r3, r3, #16
 8007d12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	061b      	lsls	r3, r3, #24
 8007d20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d24:	4931      	ldr	r1, [pc, #196]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d2a:	4b30      	ldr	r3, [pc, #192]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	492d      	ldr	r1, [pc, #180]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d3c:	4b2b      	ldr	r3, [pc, #172]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	4928      	ldr	r1, [pc, #160]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d4e:	4b27      	ldr	r3, [pc, #156]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d52:	4a26      	ldr	r2, [pc, #152]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d5a:	4b24      	ldr	r3, [pc, #144]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d5e:	4b24      	ldr	r3, [pc, #144]	; (8007df0 <RCCEx_PLL3_Config+0x160>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	69d2      	ldr	r2, [r2, #28]
 8007d66:	00d2      	lsls	r2, r2, #3
 8007d68:	4920      	ldr	r1, [pc, #128]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d6e:	4b1f      	ldr	r3, [pc, #124]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	4a1e      	ldr	r2, [pc, #120]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d106      	bne.n	8007d8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d80:	4b1a      	ldr	r3, [pc, #104]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	4a19      	ldr	r2, [pc, #100]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d8c:	e00f      	b.n	8007dae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d106      	bne.n	8007da2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d94:	4b15      	ldr	r3, [pc, #84]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	4a14      	ldr	r2, [pc, #80]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007d9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007da0:	e005      	b.n	8007dae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007da2:	4b12      	ldr	r3, [pc, #72]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da6:	4a11      	ldr	r2, [pc, #68]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007dae:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a0e      	ldr	r2, [pc, #56]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dba:	f7f9 fbed 	bl	8001598 <HAL_GetTick>
 8007dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dc0:	e008      	b.n	8007dd4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007dc2:	f7f9 fbe9 	bl	8001598 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e006      	b.n	8007de2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <RCCEx_PLL3_Config+0x15c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0f0      	beq.n	8007dc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	58024400 	.word	0x58024400
 8007df0:	ffff0007 	.word	0xffff0007

08007df4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	; 0x28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e07c      	b.n	8007f00 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10c      	bne.n	8007e2c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7f9 f89a 	bl	8000f60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2203      	movs	r2, #3
 8007e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f867 	bl	8007f08 <HAL_SD_InitCard>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e05d      	b.n	8007f00 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007e44:	f107 0308 	add.w	r3, r7, #8
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fdbe 	bl	80089cc <HAL_SD_GetCardStatus>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e052      	b.n	8007f00 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007e5a:	7e3b      	ldrb	r3, [r7, #24]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007e60:	7e7b      	ldrb	r3, [r7, #25]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d10a      	bne.n	8007e84 <HAL_SD_Init+0x90>
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d102      	bne.n	8007e7a <HAL_SD_Init+0x86>
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d004      	beq.n	8007e84 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e80:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e82:	e00b      	b.n	8007e9c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d104      	bne.n	8007e96 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e92:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e94:	e002      	b.n	8007e9c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fe74 	bl	8008b90 <HAL_SD_ConfigWideBusOperation>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e026      	b.n	8007f00 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007eb2:	f7f9 fb71 	bl	8001598 <HAL_GetTick>
 8007eb6:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007eb8:	e011      	b.n	8007ede <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007eba:	f7f9 fb6d 	bl	8001598 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d109      	bne.n	8007ede <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ed0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e010      	b.n	8007f00 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 ff00 	bl	8008ce4 <HAL_SD_GetCardState>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d1e7      	bne.n	8007eba <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3728      	adds	r7, #40	; 0x28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f08:	b5b0      	push	{r4, r5, r7, lr}
 8007f0a:	b08e      	sub	sp, #56	; 0x38
 8007f0c:	af04      	add	r7, sp, #16
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007f20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007f24:	f7fe ff90 	bl	8006e48 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f28:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	0a1b      	lsrs	r3, r3, #8
 8007f2e:	4a40      	ldr	r2, [pc, #256]	; (8008030 <HAL_SD_InitCard+0x128>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	091b      	lsrs	r3, r3, #4
 8007f36:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d107      	bne.n	8007f50 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0210 	orr.w	r2, r2, #16
 8007f4e:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681d      	ldr	r5, [r3, #0]
 8007f54:	466c      	mov	r4, sp
 8007f56:	f107 0314 	add.w	r3, r7, #20
 8007f5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f62:	f107 0308 	add.w	r3, r7, #8
 8007f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f002 fc9b 	bl	800a8a4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f002 fcde 	bl	800a934 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d008      	beq.n	8007f9c <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007f8a:	4a2a      	ldr	r2, [pc, #168]	; (8008034 <HAL_SD_InitCard+0x12c>)
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f92:	3301      	adds	r3, #1
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7f9 fb0b 	bl	80015b0 <HAL_Delay>
 8007f9a:	e002      	b.n	8007fa2 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8007f9c:	2002      	movs	r0, #2
 8007f9e:	f7f9 fb07 	bl	80015b0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 ff7c 	bl	8008ea0 <SD_PowerON>
 8007fa8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00b      	beq.n	8007fc8 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e02e      	b.n	8008026 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 feab 	bl	8008d24 <SD_InitCard>
 8007fce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e01b      	b.n	8008026 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f002 fd32 	bl	800aa60 <SDMMC_CmdBlockLength>
 8007ffc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00f      	beq.n	8008024 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a0b      	ldr	r2, [pc, #44]	; (8008038 <HAL_SD_InitCard+0x130>)
 800800a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3728      	adds	r7, #40	; 0x28
 800802a:	46bd      	mov	sp, r7
 800802c:	bdb0      	pop	{r4, r5, r7, pc}
 800802e:	bf00      	nop
 8008030:	014f8b59 	.word	0x014f8b59
 8008034:	00012110 	.word	0x00012110
 8008038:	1fe00fff 	.word	0x1fe00fff

0800803c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b092      	sub	sp, #72	; 0x48
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800804a:	f7f9 faa5 	bl	8001598 <HAL_GetTick>
 800804e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d107      	bne.n	800806e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e167      	b.n	800833e <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b01      	cmp	r3, #1
 8008078:	f040 815a 	bne.w	8008330 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	441a      	add	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808c:	429a      	cmp	r2, r3
 800808e:	d907      	bls.n	80080a0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e14e      	b.n	800833e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2203      	movs	r2, #3
 80080a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2200      	movs	r2, #0
 80080ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d002      	beq.n	80080be <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	025b      	lsls	r3, r3, #9
 80080bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080be:	f04f 33ff 	mov.w	r3, #4294967295
 80080c2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	025b      	lsls	r3, r3, #9
 80080c8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80080ca:	2390      	movs	r3, #144	; 0x90
 80080cc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80080ce:	2302      	movs	r3, #2
 80080d0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80080d6:	2300      	movs	r3, #0
 80080d8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f107 0214 	add.w	r2, r7, #20
 80080e2:	4611      	mov	r1, r2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f002 fc8f 	bl	800aa08 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080f8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d90a      	bls.n	8008116 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2202      	movs	r2, #2
 8008104:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800810c:	4618      	mov	r0, r3
 800810e:	f002 fced 	bl	800aaec <SDMMC_CmdReadMultiBlock>
 8008112:	6478      	str	r0, [r7, #68]	; 0x44
 8008114:	e009      	b.n	800812a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008122:	4618      	mov	r0, r3
 8008124:	f002 fcbf 	bl	800aaa6 <SDMMC_CmdReadSingleBlock>
 8008128:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800812a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800812c:	2b00      	cmp	r3, #0
 800812e:	d012      	beq.n	8008156 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a84      	ldr	r2, [pc, #528]	; (8008348 <HAL_SD_ReadBlocks+0x30c>)
 8008136:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800813c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800813e:	431a      	orrs	r2, r3
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e0f3      	b.n	800833e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800815a:	e058      	b.n	800820e <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d033      	beq.n	80081d2 <HAL_SD_ReadBlocks+0x196>
 800816a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816c:	2b1f      	cmp	r3, #31
 800816e:	d930      	bls.n	80081d2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008170:	2300      	movs	r3, #0
 8008172:	643b      	str	r3, [r7, #64]	; 0x40
 8008174:	e027      	b.n	80081c6 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4618      	mov	r0, r3
 800817c:	f002 fbbc 	bl	800a8f8 <SDMMC_ReadFIFO>
 8008180:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008184:	b2da      	uxtb	r2, r3
 8008186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008188:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800818a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818c:	3301      	adds	r3, #1
 800818e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	b2da      	uxtb	r2, r3
 8008196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008198:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800819a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819c:	3301      	adds	r3, #1
 800819e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80081a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a2:	0c1b      	lsrs	r3, r3, #16
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	3301      	adds	r3, #1
 80081ae:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80081b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b2:	0e1b      	lsrs	r3, r3, #24
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	3301      	adds	r3, #1
 80081be:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 80081c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081c2:	3301      	adds	r3, #1
 80081c4:	643b      	str	r3, [r7, #64]	; 0x40
 80081c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081c8:	2b07      	cmp	r3, #7
 80081ca:	d9d4      	bls.n	8008176 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80081cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ce:	3b20      	subs	r3, #32
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80081d2:	f7f9 f9e1 	bl	8001598 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081de:	429a      	cmp	r2, r3
 80081e0:	d902      	bls.n	80081e8 <HAL_SD_ReadBlocks+0x1ac>
 80081e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d112      	bne.n	800820e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a56      	ldr	r2, [pc, #344]	; (8008348 <HAL_SD_ReadBlocks+0x30c>)
 80081ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e097      	b.n	800833e <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008214:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008218:	2b00      	cmp	r3, #0
 800821a:	d09f      	beq.n	800815c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800822a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008236:	2b00      	cmp	r3, #0
 8008238:	d022      	beq.n	8008280 <HAL_SD_ReadBlocks+0x244>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d91f      	bls.n	8008280 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008244:	2b03      	cmp	r3, #3
 8008246:	d01b      	beq.n	8008280 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f002 fcb7 	bl	800abc0 <SDMMC_CmdStopTransfer>
 8008252:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008256:	2b00      	cmp	r3, #0
 8008258:	d012      	beq.n	8008280 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a3a      	ldr	r2, [pc, #232]	; (8008348 <HAL_SD_ReadBlocks+0x30c>)
 8008260:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008268:	431a      	orrs	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e05e      	b.n	800833e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d012      	beq.n	80082b4 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a2d      	ldr	r2, [pc, #180]	; (8008348 <HAL_SD_ReadBlocks+0x30c>)
 8008294:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	f043 0208 	orr.w	r2, r3, #8
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e044      	b.n	800833e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d012      	beq.n	80082e8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a20      	ldr	r2, [pc, #128]	; (8008348 <HAL_SD_ReadBlocks+0x30c>)
 80082c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	f043 0202 	orr.w	r2, r3, #2
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e02a      	b.n	800833e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d012      	beq.n	800831c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a13      	ldr	r2, [pc, #76]	; (8008348 <HAL_SD_ReadBlocks+0x30c>)
 80082fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008302:	f043 0220 	orr.w	r2, r3, #32
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e010      	b.n	800833e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a0a      	ldr	r2, [pc, #40]	; (800834c <HAL_SD_ReadBlocks+0x310>)
 8008322:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	e006      	b.n	800833e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
  }
}
 800833e:	4618      	mov	r0, r3
 8008340:	3748      	adds	r7, #72	; 0x48
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	1fe00fff 	.word	0x1fe00fff
 800834c:	18000f3a 	.word	0x18000f3a

08008350 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b092      	sub	sp, #72	; 0x48
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800835e:	f7f9 f91b 	bl	8001598 <HAL_GetTick>
 8008362:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d107      	bne.n	8008382 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e16b      	b.n	800865a <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b01      	cmp	r3, #1
 800838c:	f040 815e 	bne.w	800864c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	441a      	add	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d907      	bls.n	80083b4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e152      	b.n	800865a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2203      	movs	r2, #3
 80083b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2200      	movs	r2, #0
 80083c2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d002      	beq.n	80083d2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	025b      	lsls	r3, r3, #9
 80083d0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083d2:	f04f 33ff 	mov.w	r3, #4294967295
 80083d6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	025b      	lsls	r3, r3, #9
 80083dc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80083de:	2390      	movs	r3, #144	; 0x90
 80083e0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80083e2:	2300      	movs	r3, #0
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f107 0218 	add.w	r2, r7, #24
 80083f6:	4611      	mov	r1, r2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f002 fb05 	bl	800aa08 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800840c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d90a      	bls.n	800842a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008420:	4618      	mov	r0, r3
 8008422:	f002 fba9 	bl	800ab78 <SDMMC_CmdWriteMultiBlock>
 8008426:	6478      	str	r0, [r7, #68]	; 0x44
 8008428:	e009      	b.n	800843e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2210      	movs	r2, #16
 800842e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008436:	4618      	mov	r0, r3
 8008438:	f002 fb7b 	bl	800ab32 <SDMMC_CmdWriteSingleBlock>
 800843c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800843e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008440:	2b00      	cmp	r3, #0
 8008442:	d012      	beq.n	800846a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a86      	ldr	r2, [pc, #536]	; (8008664 <HAL_SD_WriteBlocks+0x314>)
 800844a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008452:	431a      	orrs	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e0f7      	b.n	800865a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800846e:	e05c      	b.n	800852a <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d037      	beq.n	80084ee <HAL_SD_WriteBlocks+0x19e>
 800847e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008480:	2b1f      	cmp	r3, #31
 8008482:	d934      	bls.n	80084ee <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008484:	2300      	movs	r3, #0
 8008486:	643b      	str	r3, [r7, #64]	; 0x40
 8008488:	e02b      	b.n	80084e2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800848a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008492:	3301      	adds	r3, #1
 8008494:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	021a      	lsls	r2, r3, #8
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80084a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a4:	3301      	adds	r3, #1
 80084a6:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80084a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	041a      	lsls	r2, r3, #16
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80084b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b6:	3301      	adds	r3, #1
 80084b8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80084ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	061a      	lsls	r2, r3, #24
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80084c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c8:	3301      	adds	r3, #1
 80084ca:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f107 0214 	add.w	r2, r7, #20
 80084d4:	4611      	mov	r1, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f002 fa1b 	bl	800a912 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80084dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084de:	3301      	adds	r3, #1
 80084e0:	643b      	str	r3, [r7, #64]	; 0x40
 80084e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084e4:	2b07      	cmp	r3, #7
 80084e6:	d9d0      	bls.n	800848a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80084e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ea:	3b20      	subs	r3, #32
 80084ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80084ee:	f7f9 f853 	bl	8001598 <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d902      	bls.n	8008504 <HAL_SD_WriteBlocks+0x1b4>
 80084fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008500:	2b00      	cmp	r3, #0
 8008502:	d112      	bne.n	800852a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a56      	ldr	r2, [pc, #344]	; (8008664 <HAL_SD_WriteBlocks+0x314>)
 800850a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008512:	431a      	orrs	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e097      	b.n	800865a <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008530:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008534:	2b00      	cmp	r3, #0
 8008536:	d09b      	beq.n	8008470 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008546:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008552:	2b00      	cmp	r3, #0
 8008554:	d022      	beq.n	800859c <HAL_SD_WriteBlocks+0x24c>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d91f      	bls.n	800859c <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008560:	2b03      	cmp	r3, #3
 8008562:	d01b      	beq.n	800859c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f002 fb29 	bl	800abc0 <SDMMC_CmdStopTransfer>
 800856e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008572:	2b00      	cmp	r3, #0
 8008574:	d012      	beq.n	800859c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a3a      	ldr	r2, [pc, #232]	; (8008664 <HAL_SD_WriteBlocks+0x314>)
 800857c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008584:	431a      	orrs	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e05e      	b.n	800865a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a2:	f003 0308 	and.w	r3, r3, #8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d012      	beq.n	80085d0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a2d      	ldr	r2, [pc, #180]	; (8008664 <HAL_SD_WriteBlocks+0x314>)
 80085b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b6:	f043 0208 	orr.w	r2, r3, #8
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e044      	b.n	800865a <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d6:	f003 0302 	and.w	r3, r3, #2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d012      	beq.n	8008604 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a20      	ldr	r2, [pc, #128]	; (8008664 <HAL_SD_WriteBlocks+0x314>)
 80085e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ea:	f043 0202 	orr.w	r2, r3, #2
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e02a      	b.n	800865a <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860a:	f003 0310 	and.w	r3, r3, #16
 800860e:	2b00      	cmp	r3, #0
 8008610:	d012      	beq.n	8008638 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a13      	ldr	r2, [pc, #76]	; (8008664 <HAL_SD_WriteBlocks+0x314>)
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	f043 0210 	orr.w	r2, r3, #16
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e010      	b.n	800865a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a0a      	ldr	r2, [pc, #40]	; (8008668 <HAL_SD_WriteBlocks+0x318>)
 800863e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	e006      	b.n	800865a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008650:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
  }
}
 800865a:	4618      	mov	r0, r3
 800865c:	3748      	adds	r7, #72	; 0x48
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	1fe00fff 	.word	0x1fe00fff
 8008668:	18000f3a 	.word	0x18000f3a

0800866c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
	...

08008684 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008692:	0f9b      	lsrs	r3, r3, #30
 8008694:	b2da      	uxtb	r2, r3
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800869e:	0e9b      	lsrs	r3, r3, #26
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b0:	0e1b      	lsrs	r3, r3, #24
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086c2:	0c1b      	lsrs	r3, r3, #16
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ce:	0a1b      	lsrs	r3, r3, #8
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e4:	0d1b      	lsrs	r3, r3, #20
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086f0:	0c1b      	lsrs	r3, r3, #16
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	f003 030f 	and.w	r3, r3, #15
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008702:	0bdb      	lsrs	r3, r3, #15
 8008704:	b2db      	uxtb	r3, r3
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	b2da      	uxtb	r2, r3
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008714:	0b9b      	lsrs	r3, r3, #14
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	b2da      	uxtb	r2, r3
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008726:	0b5b      	lsrs	r3, r3, #13
 8008728:	b2db      	uxtb	r3, r3
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	b2da      	uxtb	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008738:	0b1b      	lsrs	r3, r3, #12
 800873a:	b2db      	uxtb	r3, r3
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	b2da      	uxtb	r2, r3
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2200      	movs	r2, #0
 800874a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008750:	2b00      	cmp	r3, #0
 8008752:	d163      	bne.n	800881c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008758:	009a      	lsls	r2, r3, #2
 800875a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800875e:	4013      	ands	r3, r2
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008764:	0f92      	lsrs	r2, r2, #30
 8008766:	431a      	orrs	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008770:	0edb      	lsrs	r3, r3, #27
 8008772:	b2db      	uxtb	r3, r3
 8008774:	f003 0307 	and.w	r3, r3, #7
 8008778:	b2da      	uxtb	r2, r3
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008782:	0e1b      	lsrs	r3, r3, #24
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f003 0307 	and.w	r3, r3, #7
 800878a:	b2da      	uxtb	r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008794:	0d5b      	lsrs	r3, r3, #21
 8008796:	b2db      	uxtb	r3, r3
 8008798:	f003 0307 	and.w	r3, r3, #7
 800879c:	b2da      	uxtb	r2, r3
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087a6:	0c9b      	lsrs	r3, r3, #18
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087b8:	0bdb      	lsrs	r3, r3, #15
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	f003 0307 	and.w	r3, r3, #7
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	7e1b      	ldrb	r3, [r3, #24]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	3302      	adds	r3, #2
 80087dc:	2201      	movs	r2, #1
 80087de:	fa02 f303 	lsl.w	r3, r2, r3
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80087e6:	fb02 f203 	mul.w	r2, r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	7a1b      	ldrb	r3, [r3, #8]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	f003 030f 	and.w	r3, r3, #15
 80087f8:	2201      	movs	r2, #1
 80087fa:	409a      	lsls	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008808:	0a52      	lsrs	r2, r2, #9
 800880a:	fb02 f203 	mul.w	r2, r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008818:	659a      	str	r2, [r3, #88]	; 0x58
 800881a:	e031      	b.n	8008880 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008820:	2b01      	cmp	r3, #1
 8008822:	d11d      	bne.n	8008860 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008828:	041b      	lsls	r3, r3, #16
 800882a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008832:	0c1b      	lsrs	r3, r3, #16
 8008834:	431a      	orrs	r2, r3
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	3301      	adds	r3, #1
 8008840:	029a      	lsls	r2, r3, #10
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008854:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	659a      	str	r2, [r3, #88]	; 0x58
 800885e:	e00f      	b.n	8008880 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a58      	ldr	r2, [pc, #352]	; (80089c8 <HAL_SD_GetCardCSD+0x344>)
 8008866:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e09d      	b.n	80089bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008884:	0b9b      	lsrs	r3, r3, #14
 8008886:	b2db      	uxtb	r3, r3
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	b2da      	uxtb	r2, r3
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008896:	09db      	lsrs	r3, r3, #7
 8008898:	b2db      	uxtb	r3, r3
 800889a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b8:	0fdb      	lsrs	r3, r3, #31
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c4:	0f5b      	lsrs	r3, r3, #29
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 0303 	and.w	r3, r3, #3
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d6:	0e9b      	lsrs	r3, r3, #26
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f003 0307 	and.w	r3, r3, #7
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088e8:	0d9b      	lsrs	r3, r3, #22
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088fa:	0d5b      	lsrs	r3, r3, #21
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	b2da      	uxtb	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008916:	0c1b      	lsrs	r3, r3, #16
 8008918:	b2db      	uxtb	r3, r3
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	b2da      	uxtb	r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800892a:	0bdb      	lsrs	r3, r3, #15
 800892c:	b2db      	uxtb	r3, r3
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	b2da      	uxtb	r2, r3
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800893e:	0b9b      	lsrs	r3, r3, #14
 8008940:	b2db      	uxtb	r3, r3
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	b2da      	uxtb	r2, r3
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008952:	0b5b      	lsrs	r3, r3, #13
 8008954:	b2db      	uxtb	r3, r3
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	b2da      	uxtb	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008966:	0b1b      	lsrs	r3, r3, #12
 8008968:	b2db      	uxtb	r3, r3
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	b2da      	uxtb	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800897a:	0a9b      	lsrs	r3, r3, #10
 800897c:	b2db      	uxtb	r3, r3
 800897e:	f003 0303 	and.w	r3, r3, #3
 8008982:	b2da      	uxtb	r2, r3
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800898e:	0a1b      	lsrs	r3, r3, #8
 8008990:	b2db      	uxtb	r3, r3
 8008992:	f003 0303 	and.w	r3, r3, #3
 8008996:	b2da      	uxtb	r2, r3
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a2:	085b      	lsrs	r3, r3, #1
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	1fe00fff 	.word	0x1fe00fff

080089cc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b094      	sub	sp, #80	; 0x50
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80089dc:	f107 0308 	add.w	r3, r7, #8
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fb64 	bl	80090b0 <SD_SendSDStatus>
 80089e8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80089ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d011      	beq.n	8008a14 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a4f      	ldr	r2, [pc, #316]	; (8008b34 <HAL_SD_GetCardStatus+0x168>)
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089fe:	431a      	orrs	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008a12:	e070      	b.n	8008af6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	099b      	lsrs	r3, r3, #6
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	095b      	lsrs	r3, r3, #5
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	0a1b      	lsrs	r3, r3, #8
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	0e1b      	lsrs	r3, r3, #24
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	4313      	orrs	r3, r2
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	061a      	lsls	r2, r3, #24
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	021b      	lsls	r3, r3, #8
 8008a56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a5a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	0a1b      	lsrs	r3, r3, #8
 8008a60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a64:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	0e1b      	lsrs	r3, r3, #24
 8008a6a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	0a1b      	lsrs	r3, r3, #8
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	0d1b      	lsrs	r3, r3, #20
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 030f 	and.w	r3, r3, #15
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	0c1b      	lsrs	r3, r3, #16
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	0a9b      	lsrs	r3, r3, #10
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	0a1b      	lsrs	r3, r3, #8
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 0303 	and.w	r3, r3, #3
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	091b      	lsrs	r3, r3, #4
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	f003 030f 	and.w	r3, r3, #15
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f003 030f 	and.w	r3, r3, #15
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	0e1b      	lsrs	r3, r3, #24
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008afe:	4618      	mov	r0, r3
 8008b00:	f001 ffae 	bl	800aa60 <SDMMC_CmdBlockLength>
 8008b04:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00d      	beq.n	8008b28 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a08      	ldr	r2, [pc, #32]	; (8008b34 <HAL_SD_GetCardStatus+0x168>)
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b18:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008b28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3750      	adds	r7, #80	; 0x50
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	1fe00fff 	.word	0x1fe00fff

08008b38 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008b90:	b5b0      	push	{r4, r5, r7, lr}
 8008b92:	b08e      	sub	sp, #56	; 0x38
 8008b94:	af04      	add	r7, sp, #16
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2203      	movs	r2, #3
 8008ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bac:	2b03      	cmp	r3, #3
 8008bae:	d02e      	beq.n	8008c0e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb6:	d106      	bne.n	8008bc6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8008bc4:	e029      	b.n	8008c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bcc:	d10a      	bne.n	8008be4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fb66 	bl	80092a0 <SD_WideBus_Enable>
 8008bd4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	639a      	str	r2, [r3, #56]	; 0x38
 8008be2:	e01a      	b.n	8008c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fba3 	bl	8009336 <SD_WideBus_Disable>
 8008bf0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8008bfe:	e00c      	b.n	8008c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	639a      	str	r2, [r3, #56]	; 0x38
 8008c0c:	e005      	b.n	8008c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d007      	beq.n	8008c32 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a2e      	ldr	r2, [pc, #184]	; (8008ce0 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008c28:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c30:	e034      	b.n	8008c9c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	2b03      	cmp	r3, #3
 8008c4e:	d903      	bls.n	8008c58 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	61bb      	str	r3, [r7, #24]
 8008c56:	e012      	b.n	8008c7e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c60:	d103      	bne.n	8008c6a <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	61bb      	str	r3, [r7, #24]
 8008c68:	e009      	b.n	8008c7e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c72:	d102      	bne.n	8008c7a <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008c74:	2302      	movs	r3, #2
 8008c76:	61bb      	str	r3, [r7, #24]
 8008c78:	e001      	b.n	8008c7e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008c7a:	2304      	movs	r3, #4
 8008c7c:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681d      	ldr	r5, [r3, #0]
 8008c82:	466c      	mov	r4, sp
 8008c84:	f107 0314 	add.w	r3, r7, #20
 8008c88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c90:	f107 0308 	add.w	r3, r7, #8
 8008c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c96:	4628      	mov	r0, r5
 8008c98:	f001 fe04 	bl	800a8a4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 fedb 	bl	800aa60 <SDMMC_CmdBlockLength>
 8008caa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00c      	beq.n	8008ccc <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a0a      	ldr	r2, [pc, #40]	; (8008ce0 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008cb8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3728      	adds	r7, #40	; 0x28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bdb0      	pop	{r4, r5, r7, pc}
 8008ce0:	1fe00fff 	.word	0x1fe00fff

08008ce4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008cf0:	f107 030c 	add.w	r3, r7, #12
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 faaa 	bl	8009250 <SD_SendStatus>
 8008cfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d005      	beq.n	8008d10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	0a5b      	lsrs	r3, r3, #9
 8008d14:	f003 030f 	and.w	r3, r3, #15
 8008d18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008d1a:	693b      	ldr	r3, [r7, #16]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b091      	sub	sp, #68	; 0x44
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f001 fe0e 	bl	800a956 <SDMMC_GetPowerState>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d44:	e0a8      	b.n	8008e98 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d02e      	beq.n	8008dac <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f002 f85a 	bl	800ae0c <SDMMC_CmdSendCID>
 8008d58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <SD_InitCard+0x40>
    {
      return errorstate;
 8008d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d62:	e099      	b.n	8008e98 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2100      	movs	r1, #0
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f001 fe39 	bl	800a9e2 <SDMMC_GetResponse>
 8008d70:	4602      	mov	r2, r0
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2104      	movs	r1, #4
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f001 fe30 	bl	800a9e2 <SDMMC_GetResponse>
 8008d82:	4602      	mov	r2, r0
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2108      	movs	r1, #8
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 fe27 	bl	800a9e2 <SDMMC_GetResponse>
 8008d94:	4602      	mov	r2, r0
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	210c      	movs	r1, #12
 8008da0:	4618      	mov	r0, r3
 8008da2:	f001 fe1e 	bl	800a9e2 <SDMMC_GetResponse>
 8008da6:	4602      	mov	r2, r0
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d00d      	beq.n	8008dd0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f107 020e 	add.w	r2, r7, #14
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f002 f863 	bl	800ae8a <SDMMC_CmdSetRelAdd>
 8008dc4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <SD_InitCard+0xac>
    {
      return errorstate;
 8008dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dce:	e063      	b.n	8008e98 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d036      	beq.n	8008e46 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008dd8:	89fb      	ldrh	r3, [r7, #14]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de8:	041b      	lsls	r3, r3, #16
 8008dea:	4619      	mov	r1, r3
 8008dec:	4610      	mov	r0, r2
 8008dee:	f002 f82c 	bl	800ae4a <SDMMC_CmdSendCSD>
 8008df2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <SD_InitCard+0xda>
    {
      return errorstate;
 8008dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dfc:	e04c      	b.n	8008e98 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f001 fdec 	bl	800a9e2 <SDMMC_GetResponse>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2104      	movs	r1, #4
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 fde3 	bl	800a9e2 <SDMMC_GetResponse>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2108      	movs	r1, #8
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 fdda 	bl	800a9e2 <SDMMC_GetResponse>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	210c      	movs	r1, #12
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f001 fdd1 	bl	800a9e2 <SDMMC_GetResponse>
 8008e40:	4602      	mov	r2, r0
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2104      	movs	r1, #4
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 fdc8 	bl	800a9e2 <SDMMC_GetResponse>
 8008e52:	4603      	mov	r3, r0
 8008e54:	0d1a      	lsrs	r2, r3, #20
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008e5a:	f107 0310 	add.w	r3, r7, #16
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7ff fc0f 	bl	8008684 <HAL_SD_GetCardCSD>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e70:	e012      	b.n	8008e98 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6819      	ldr	r1, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e7a:	041b      	lsls	r3, r3, #16
 8008e7c:	f04f 0400 	mov.w	r4, #0
 8008e80:	461a      	mov	r2, r3
 8008e82:	4623      	mov	r3, r4
 8008e84:	4608      	mov	r0, r1
 8008e86:	f001 fed7 	bl	800ac38 <SDMMC_CmdSelDesel>
 8008e8a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <SD_InitCard+0x172>
  {
    return errorstate;
 8008e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e94:	e000      	b.n	8008e98 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3744      	adds	r7, #68	; 0x44
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd90      	pop	{r4, r7, pc}

08008ea0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8008eb4:	f7f8 fb70 	bl	8001598 <HAL_GetTick>
 8008eb8:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 fede 	bl	800ac80 <SDMMC_CmdGoIdleState>
 8008ec4:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d001      	beq.n	8008ed0 <SD_PowerON+0x30>
  {
    return errorstate;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	e0e9      	b.n	80090a4 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f001 fef1 	bl	800acbc <SDMMC_CmdOperCond>
 8008eda:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00d      	beq.n	8008efe <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f001 fec7 	bl	800ac80 <SDMMC_CmdGoIdleState>
 8008ef2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d004      	beq.n	8008f04 <SD_PowerON+0x64>
    {
      return errorstate;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	e0d2      	b.n	80090a4 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d137      	bne.n	8008f7c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2100      	movs	r1, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f001 fef2 	bl	800acfc <SDMMC_CmdAppCommand>
 8008f18:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d02d      	beq.n	8008f7c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f24:	e0be      	b.n	80090a4 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f001 fee5 	bl	800acfc <SDMMC_CmdAppCommand>
 8008f32:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <SD_PowerON+0x9e>
    {
      return errorstate;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	e0b2      	b.n	80090a4 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	495a      	ldr	r1, [pc, #360]	; (80090ac <SD_PowerON+0x20c>)
 8008f44:	4618      	mov	r0, r3
 8008f46:	f001 fefc 	bl	800ad42 <SDMMC_CmdAppOperCommand>
 8008f4a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d002      	beq.n	8008f58 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f56:	e0a5      	b.n	80090a4 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 fd3f 	bl	800a9e2 <SDMMC_GetResponse>
 8008f64:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	0fdb      	lsrs	r3, r3, #31
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <SD_PowerON+0xd2>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e000      	b.n	8008f74 <SD_PowerON+0xd4>
 8008f72:	2300      	movs	r3, #0
 8008f74:	61bb      	str	r3, [r7, #24]

    count++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d802      	bhi.n	8008f8c <SD_PowerON+0xec>
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d0cc      	beq.n	8008f26 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d902      	bls.n	8008f9c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f9a:	e083      	b.n	80090a4 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d07d      	beq.n	80090a2 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d176      	bne.n	80090a2 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d071      	beq.n	80090a2 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fc4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f042 0208 	orr.w	r2, r2, #8
 8008fd4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f001 ffbc 	bl	800af58 <SDMMC_CmdVoltageSwitch>
 8008fe0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00c      	beq.n	8009002 <SD_PowerON+0x162>
        {
          return errorstate;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	e05b      	b.n	80090a4 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fec:	f7f8 fad4 	bl	8001598 <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffa:	d102      	bne.n	8009002 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008ffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009000:	e050      	b.n	80090a4 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009008:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800900c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009010:	d1ec      	bne.n	8008fec <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800901a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800902a:	d002      	beq.n	8009032 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800902c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009030:	e038      	b.n	80090a4 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009032:	2001      	movs	r0, #1
 8009034:	f7ff fb1a 	bl	800866c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0204 	orr.w	r2, r2, #4
 8009046:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009048:	e00a      	b.n	8009060 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800904a:	f7f8 faa5 	bl	8001598 <HAL_GetTick>
 800904e:	4602      	mov	r2, r0
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009058:	d102      	bne.n	8009060 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800905a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800905e:	e021      	b.n	80090a4 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800906e:	d1ec      	bne.n	800904a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009078:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009088:	d102      	bne.n	8009090 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800908a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800908e:	e009      	b.n	80090a4 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2213      	movs	r2, #19
 8009096:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f04f 32ff 	mov.w	r2, #4294967295
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3720      	adds	r7, #32
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	c1100000 	.word	0xc1100000

080090b0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08c      	sub	sp, #48	; 0x30
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80090ba:	f7f8 fa6d 	bl	8001598 <HAL_GetTick>
 80090be:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f001 fc89 	bl	800a9e2 <SDMMC_GetResponse>
 80090d0:	4603      	mov	r3, r0
 80090d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090da:	d102      	bne.n	80090e2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090e0:	e0b0      	b.n	8009244 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2140      	movs	r1, #64	; 0x40
 80090e8:	4618      	mov	r0, r3
 80090ea:	f001 fcb9 	bl	800aa60 <SDMMC_CmdBlockLength>
 80090ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d005      	beq.n	8009102 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	e0a0      	b.n	8009244 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800910a:	041b      	lsls	r3, r3, #16
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f001 fdf4 	bl	800acfc <SDMMC_CmdAppCommand>
 8009114:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d005      	beq.n	8009128 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	e08d      	b.n	8009244 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009128:	f04f 33ff 	mov.w	r3, #4294967295
 800912c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800912e:	2340      	movs	r3, #64	; 0x40
 8009130:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009132:	2360      	movs	r3, #96	; 0x60
 8009134:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009136:	2302      	movs	r3, #2
 8009138:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800913a:	2300      	movs	r3, #0
 800913c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800913e:	2301      	movs	r3, #1
 8009140:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f107 0208 	add.w	r2, r7, #8
 800914a:	4611      	mov	r1, r2
 800914c:	4618      	mov	r0, r3
 800914e:	f001 fc5b 	bl	800aa08 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4618      	mov	r0, r3
 8009158:	f001 fedc 	bl	800af14 <SDMMC_CmdStatusRegister>
 800915c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d02b      	beq.n	80091bc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	e069      	b.n	8009244 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d013      	beq.n	80091a6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800917e:	2300      	movs	r3, #0
 8009180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009182:	e00d      	b.n	80091a0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4618      	mov	r0, r3
 800918a:	f001 fbb5 	bl	800a8f8 <SDMMC_ReadFIFO>
 800918e:	4602      	mov	r2, r0
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	601a      	str	r2, [r3, #0]
        pData++;
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	3304      	adds	r3, #4
 8009198:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	3301      	adds	r3, #1
 800919e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	2b07      	cmp	r3, #7
 80091a4:	d9ee      	bls.n	8009184 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091a6:	f7f8 f9f7 	bl	8001598 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b4:	d102      	bne.n	80091bc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80091b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091ba:	e043      	b.n	8009244 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0d2      	beq.n	8009170 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d0:	f003 0308 	and.w	r3, r3, #8
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80091d8:	2308      	movs	r3, #8
 80091da:	e033      	b.n	8009244 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80091ea:	2302      	movs	r3, #2
 80091ec:	e02a      	b.n	8009244 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d017      	beq.n	800922c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80091fc:	2320      	movs	r3, #32
 80091fe:	e021      	b.n	8009244 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4618      	mov	r0, r3
 8009206:	f001 fb77 	bl	800a8f8 <SDMMC_ReadFIFO>
 800920a:	4602      	mov	r2, r0
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	601a      	str	r2, [r3, #0]
    pData++;
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	3304      	adds	r3, #4
 8009214:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009216:	f7f8 f9bf 	bl	8001598 <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009224:	d102      	bne.n	800922c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009226:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800922a:	e00b      	b.n	8009244 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e2      	bne.n	8009200 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a03      	ldr	r2, [pc, #12]	; (800924c <SD_SendSDStatus+0x19c>)
 8009240:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3730      	adds	r7, #48	; 0x30
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	18000f3a 	.word	0x18000f3a

08009250 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d102      	bne.n	8009266 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009264:	e018      	b.n	8009298 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800926e:	041b      	lsls	r3, r3, #16
 8009270:	4619      	mov	r1, r3
 8009272:	4610      	mov	r0, r2
 8009274:	f001 fe2b 	bl	800aece <SDMMC_CmdSendStatus>
 8009278:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	e009      	b.n	8009298 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2100      	movs	r1, #0
 800928a:	4618      	mov	r0, r3
 800928c:	f001 fba9 	bl	800a9e2 <SDMMC_GetResponse>
 8009290:	4602      	mov	r2, r0
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80092a8:	2300      	movs	r3, #0
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	2300      	movs	r3, #0
 80092ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2100      	movs	r1, #0
 80092b6:	4618      	mov	r0, r3
 80092b8:	f001 fb93 	bl	800a9e2 <SDMMC_GetResponse>
 80092bc:	4603      	mov	r3, r0
 80092be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092c6:	d102      	bne.n	80092ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092cc:	e02f      	b.n	800932e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092ce:	f107 030c 	add.w	r3, r7, #12
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f879 	bl	80093cc <SD_FindSCR>
 80092da:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	e023      	b.n	800932e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01c      	beq.n	800932a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f8:	041b      	lsls	r3, r3, #16
 80092fa:	4619      	mov	r1, r3
 80092fc:	4610      	mov	r0, r2
 80092fe:	f001 fcfd 	bl	800acfc <SDMMC_CmdAppCommand>
 8009302:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	e00f      	b.n	800932e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2102      	movs	r1, #2
 8009314:	4618      	mov	r0, r3
 8009316:	f001 fd34 	bl	800ad82 <SDMMC_CmdBusWidth>
 800931a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	e003      	b.n	800932e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009326:	2300      	movs	r3, #0
 8009328:	e001      	b.n	800932e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800932a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b086      	sub	sp, #24
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800933e:	2300      	movs	r3, #0
 8009340:	60fb      	str	r3, [r7, #12]
 8009342:	2300      	movs	r3, #0
 8009344:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2100      	movs	r1, #0
 800934c:	4618      	mov	r0, r3
 800934e:	f001 fb48 	bl	800a9e2 <SDMMC_GetResponse>
 8009352:	4603      	mov	r3, r0
 8009354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009358:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800935c:	d102      	bne.n	8009364 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800935e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009362:	e02f      	b.n	80093c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009364:	f107 030c 	add.w	r3, r7, #12
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f82e 	bl	80093cc <SD_FindSCR>
 8009370:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	e023      	b.n	80093c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01c      	beq.n	80093c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800938e:	041b      	lsls	r3, r3, #16
 8009390:	4619      	mov	r1, r3
 8009392:	4610      	mov	r0, r2
 8009394:	f001 fcb2 	bl	800acfc <SDMMC_CmdAppCommand>
 8009398:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	e00f      	b.n	80093c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2100      	movs	r1, #0
 80093aa:	4618      	mov	r0, r3
 80093ac:	f001 fce9 	bl	800ad82 <SDMMC_CmdBusWidth>
 80093b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	e003      	b.n	80093c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093bc:	2300      	movs	r3, #0
 80093be:	e001      	b.n	80093c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08e      	sub	sp, #56	; 0x38
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80093d6:	f7f8 f8df 	bl	8001598 <HAL_GetTick>
 80093da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80093e0:	2300      	movs	r3, #0
 80093e2:	60bb      	str	r3, [r7, #8]
 80093e4:	2300      	movs	r3, #0
 80093e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2108      	movs	r1, #8
 80093f2:	4618      	mov	r0, r3
 80093f4:	f001 fb34 	bl	800aa60 <SDMMC_CmdBlockLength>
 80093f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009402:	e0ad      	b.n	8009560 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800940c:	041b      	lsls	r3, r3, #16
 800940e:	4619      	mov	r1, r3
 8009410:	4610      	mov	r0, r2
 8009412:	f001 fc73 	bl	800acfc <SDMMC_CmdAppCommand>
 8009416:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <SD_FindSCR+0x56>
  {
    return errorstate;
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	e09e      	b.n	8009560 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009422:	f04f 33ff 	mov.w	r3, #4294967295
 8009426:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009428:	2308      	movs	r3, #8
 800942a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800942c:	2330      	movs	r3, #48	; 0x30
 800942e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009430:	2302      	movs	r3, #2
 8009432:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009434:	2300      	movs	r3, #0
 8009436:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009438:	2301      	movs	r3, #1
 800943a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f107 0210 	add.w	r2, r7, #16
 8009444:	4611      	mov	r1, r2
 8009446:	4618      	mov	r0, r3
 8009448:	f001 fade 	bl	800aa08 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4618      	mov	r0, r3
 8009452:	f001 fcb9 	bl	800adc8 <SDMMC_CmdSendSCR>
 8009456:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945a:	2b00      	cmp	r3, #0
 800945c:	d027      	beq.n	80094ae <SD_FindSCR+0xe2>
  {
    return errorstate;
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	e07e      	b.n	8009560 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d113      	bne.n	8009498 <SD_FindSCR+0xcc>
 8009470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009472:	2b00      	cmp	r3, #0
 8009474:	d110      	bne.n	8009498 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4618      	mov	r0, r3
 800947c:	f001 fa3c 	bl	800a8f8 <SDMMC_ReadFIFO>
 8009480:	4603      	mov	r3, r0
 8009482:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	f001 fa35 	bl	800a8f8 <SDMMC_ReadFIFO>
 800948e:	4603      	mov	r3, r0
 8009490:	60fb      	str	r3, [r7, #12]
      index++;
 8009492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009494:	3301      	adds	r3, #1
 8009496:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009498:	f7f8 f87e 	bl	8001598 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a6:	d102      	bne.n	80094ae <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80094a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094ac:	e058      	b.n	8009560 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094b4:	f240 532a 	movw	r3, #1322	; 0x52a
 80094b8:	4013      	ands	r3, r2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0d1      	beq.n	8009462 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c4:	f003 0308 	and.w	r3, r3, #8
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d005      	beq.n	80094d8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2208      	movs	r2, #8
 80094d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094d4:	2308      	movs	r3, #8
 80094d6:	e043      	b.n	8009560 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d005      	beq.n	80094f2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2202      	movs	r2, #2
 80094ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094ee:	2302      	movs	r3, #2
 80094f0:	e036      	b.n	8009560 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f8:	f003 0320 	and.w	r3, r3, #32
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d005      	beq.n	800950c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2220      	movs	r2, #32
 8009506:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009508:	2320      	movs	r3, #32
 800950a:	e029      	b.n	8009560 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a15      	ldr	r2, [pc, #84]	; (8009568 <SD_FindSCR+0x19c>)
 8009512:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	061a      	lsls	r2, r3, #24
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	021b      	lsls	r3, r3, #8
 800951c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009520:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	0a1b      	lsrs	r3, r3, #8
 8009526:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800952a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	0e1b      	lsrs	r3, r3, #24
 8009530:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	601a      	str	r2, [r3, #0]
    scr++;
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	3304      	adds	r3, #4
 800953a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	061a      	lsls	r2, r3, #24
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009548:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	0a1b      	lsrs	r3, r3, #8
 800954e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009552:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	0e1b      	lsrs	r3, r3, #24
 8009558:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800955a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3738      	adds	r7, #56	; 0x38
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	18000f3a 	.word	0x18000f3a

0800956c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009574:	2300      	movs	r3, #0
 8009576:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e0e2      	b.n	8009748 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a70      	ldr	r2, [pc, #448]	; (8009750 <HAL_SPI_Init+0x1e4>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d00f      	beq.n	80095b2 <HAL_SPI_Init+0x46>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a6f      	ldr	r2, [pc, #444]	; (8009754 <HAL_SPI_Init+0x1e8>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d00a      	beq.n	80095b2 <HAL_SPI_Init+0x46>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a6d      	ldr	r2, [pc, #436]	; (8009758 <HAL_SPI_Init+0x1ec>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d005      	beq.n	80095b2 <HAL_SPI_Init+0x46>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	2b0f      	cmp	r3, #15
 80095ac:	d901      	bls.n	80095b2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e0ca      	b.n	8009748 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f8d2 	bl	800975c <SPI_GetPacketSize>
 80095b8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a64      	ldr	r2, [pc, #400]	; (8009750 <HAL_SPI_Init+0x1e4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d00c      	beq.n	80095de <HAL_SPI_Init+0x72>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a62      	ldr	r2, [pc, #392]	; (8009754 <HAL_SPI_Init+0x1e8>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d007      	beq.n	80095de <HAL_SPI_Init+0x72>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a61      	ldr	r2, [pc, #388]	; (8009758 <HAL_SPI_Init+0x1ec>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d002      	beq.n	80095de <HAL_SPI_Init+0x72>
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2b08      	cmp	r3, #8
 80095dc:	d811      	bhi.n	8009602 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095e2:	4a5b      	ldr	r2, [pc, #364]	; (8009750 <HAL_SPI_Init+0x1e4>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d009      	beq.n	80095fc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a59      	ldr	r2, [pc, #356]	; (8009754 <HAL_SPI_Init+0x1e8>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d004      	beq.n	80095fc <HAL_SPI_Init+0x90>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a58      	ldr	r2, [pc, #352]	; (8009758 <HAL_SPI_Init+0x1ec>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d104      	bne.n	8009606 <HAL_SPI_Init+0x9a>
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2b10      	cmp	r3, #16
 8009600:	d901      	bls.n	8009606 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e0a0      	b.n	8009748 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d106      	bne.n	8009620 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7f7 fd0c 	bl	8001038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2202      	movs	r2, #2
 8009624:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f022 0201 	bic.w	r2, r2, #1
 8009636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009640:	d110      	bne.n	8009664 <HAL_SPI_Init+0xf8>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800964a:	d10b      	bne.n	8009664 <HAL_SPI_Init+0xf8>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	2b00      	cmp	r3, #0
 8009652:	d107      	bne.n	8009664 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009662:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	69da      	ldr	r2, [r3, #28]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966c:	431a      	orrs	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	431a      	orrs	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009676:	ea42 0103 	orr.w	r1, r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	431a      	orrs	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	431a      	orrs	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	431a      	orrs	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	431a      	orrs	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	431a      	orrs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096b8:	431a      	orrs	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	431a      	orrs	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096c4:	ea42 0103 	orr.w	r1, r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d113      	bne.n	8009704 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096ee:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009702:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 0201 	bic.w	r2, r2, #1
 8009712:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00a      	beq.n	8009736 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	40013000 	.word	0x40013000
 8009754:	40003800 	.word	0x40003800
 8009758:	40003c00 	.word	0x40003c00

0800975c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009768:	095b      	lsrs	r3, r3, #5
 800976a:	3301      	adds	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	3301      	adds	r3, #1
 8009774:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	3307      	adds	r3, #7
 800977a:	08db      	lsrs	r3, r3, #3
 800977c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	fb02 f303 	mul.w	r3, r2, r3
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e042      	b.n	800982a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d106      	bne.n	80097bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7f7 fc88 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2224      	movs	r2, #36	; 0x24
 80097c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 0201 	bic.w	r2, r2, #1
 80097d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f82d 	bl	8009834 <UART_SetConfig>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d101      	bne.n	80097e4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e022      	b.n	800982a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fdd1 	bl	800a394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009800:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689a      	ldr	r2, [r3, #8]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009810:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f042 0201 	orr.w	r2, r2, #1
 8009820:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fe58 	bl	800a4d8 <UART_CheckIdleState>
 8009828:	4603      	mov	r3, r0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009834:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009838:	b08e      	sub	sp, #56	; 0x38
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	431a      	orrs	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	431a      	orrs	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	4313      	orrs	r3, r2
 800985a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009862:	4313      	orrs	r3, r2
 8009864:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	4bc1      	ldr	r3, [pc, #772]	; (8009b74 <UART_SetConfig+0x340>)
 800986e:	4013      	ands	r3, r2
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	6812      	ldr	r2, [r2, #0]
 8009874:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009876:	430b      	orrs	r3, r1
 8009878:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4ab7      	ldr	r2, [pc, #732]	; (8009b78 <UART_SetConfig+0x344>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d004      	beq.n	80098aa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098a6:	4313      	orrs	r3, r2
 80098a8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	4bb2      	ldr	r3, [pc, #712]	; (8009b7c <UART_SetConfig+0x348>)
 80098b2:	4013      	ands	r3, r2
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	6812      	ldr	r2, [r2, #0]
 80098b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098ba:	430b      	orrs	r3, r1
 80098bc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c4:	f023 010f 	bic.w	r1, r3, #15
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	430a      	orrs	r2, r1
 80098d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4aa9      	ldr	r2, [pc, #676]	; (8009b80 <UART_SetConfig+0x34c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d177      	bne.n	80099ce <UART_SetConfig+0x19a>
 80098de:	4ba9      	ldr	r3, [pc, #676]	; (8009b84 <UART_SetConfig+0x350>)
 80098e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098e6:	2b28      	cmp	r3, #40	; 0x28
 80098e8:	d86c      	bhi.n	80099c4 <UART_SetConfig+0x190>
 80098ea:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <UART_SetConfig+0xbc>)
 80098ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f0:	08009995 	.word	0x08009995
 80098f4:	080099c5 	.word	0x080099c5
 80098f8:	080099c5 	.word	0x080099c5
 80098fc:	080099c5 	.word	0x080099c5
 8009900:	080099c5 	.word	0x080099c5
 8009904:	080099c5 	.word	0x080099c5
 8009908:	080099c5 	.word	0x080099c5
 800990c:	080099c5 	.word	0x080099c5
 8009910:	0800999d 	.word	0x0800999d
 8009914:	080099c5 	.word	0x080099c5
 8009918:	080099c5 	.word	0x080099c5
 800991c:	080099c5 	.word	0x080099c5
 8009920:	080099c5 	.word	0x080099c5
 8009924:	080099c5 	.word	0x080099c5
 8009928:	080099c5 	.word	0x080099c5
 800992c:	080099c5 	.word	0x080099c5
 8009930:	080099a5 	.word	0x080099a5
 8009934:	080099c5 	.word	0x080099c5
 8009938:	080099c5 	.word	0x080099c5
 800993c:	080099c5 	.word	0x080099c5
 8009940:	080099c5 	.word	0x080099c5
 8009944:	080099c5 	.word	0x080099c5
 8009948:	080099c5 	.word	0x080099c5
 800994c:	080099c5 	.word	0x080099c5
 8009950:	080099ad 	.word	0x080099ad
 8009954:	080099c5 	.word	0x080099c5
 8009958:	080099c5 	.word	0x080099c5
 800995c:	080099c5 	.word	0x080099c5
 8009960:	080099c5 	.word	0x080099c5
 8009964:	080099c5 	.word	0x080099c5
 8009968:	080099c5 	.word	0x080099c5
 800996c:	080099c5 	.word	0x080099c5
 8009970:	080099b5 	.word	0x080099b5
 8009974:	080099c5 	.word	0x080099c5
 8009978:	080099c5 	.word	0x080099c5
 800997c:	080099c5 	.word	0x080099c5
 8009980:	080099c5 	.word	0x080099c5
 8009984:	080099c5 	.word	0x080099c5
 8009988:	080099c5 	.word	0x080099c5
 800998c:	080099c5 	.word	0x080099c5
 8009990:	080099bd 	.word	0x080099bd
 8009994:	2301      	movs	r3, #1
 8009996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999a:	e233      	b.n	8009e04 <UART_SetConfig+0x5d0>
 800999c:	2304      	movs	r3, #4
 800999e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a2:	e22f      	b.n	8009e04 <UART_SetConfig+0x5d0>
 80099a4:	2308      	movs	r3, #8
 80099a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099aa:	e22b      	b.n	8009e04 <UART_SetConfig+0x5d0>
 80099ac:	2310      	movs	r3, #16
 80099ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b2:	e227      	b.n	8009e04 <UART_SetConfig+0x5d0>
 80099b4:	2320      	movs	r3, #32
 80099b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ba:	e223      	b.n	8009e04 <UART_SetConfig+0x5d0>
 80099bc:	2340      	movs	r3, #64	; 0x40
 80099be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c2:	e21f      	b.n	8009e04 <UART_SetConfig+0x5d0>
 80099c4:	2380      	movs	r3, #128	; 0x80
 80099c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ca:	bf00      	nop
 80099cc:	e21a      	b.n	8009e04 <UART_SetConfig+0x5d0>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a6d      	ldr	r2, [pc, #436]	; (8009b88 <UART_SetConfig+0x354>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d132      	bne.n	8009a3e <UART_SetConfig+0x20a>
 80099d8:	4b6a      	ldr	r3, [pc, #424]	; (8009b84 <UART_SetConfig+0x350>)
 80099da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	2b05      	cmp	r3, #5
 80099e2:	d827      	bhi.n	8009a34 <UART_SetConfig+0x200>
 80099e4:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <UART_SetConfig+0x1b8>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	08009a05 	.word	0x08009a05
 80099f0:	08009a0d 	.word	0x08009a0d
 80099f4:	08009a15 	.word	0x08009a15
 80099f8:	08009a1d 	.word	0x08009a1d
 80099fc:	08009a25 	.word	0x08009a25
 8009a00:	08009a2d 	.word	0x08009a2d
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0a:	e1fb      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a0c:	2304      	movs	r3, #4
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a12:	e1f7      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a14:	2308      	movs	r3, #8
 8009a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1a:	e1f3      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a1c:	2310      	movs	r3, #16
 8009a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a22:	e1ef      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a24:	2320      	movs	r3, #32
 8009a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2a:	e1eb      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a2c:	2340      	movs	r3, #64	; 0x40
 8009a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a32:	e1e7      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a34:	2380      	movs	r3, #128	; 0x80
 8009a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a3a:	bf00      	nop
 8009a3c:	e1e2      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a52      	ldr	r2, [pc, #328]	; (8009b8c <UART_SetConfig+0x358>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d132      	bne.n	8009aae <UART_SetConfig+0x27a>
 8009a48:	4b4e      	ldr	r3, [pc, #312]	; (8009b84 <UART_SetConfig+0x350>)
 8009a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	2b05      	cmp	r3, #5
 8009a52:	d827      	bhi.n	8009aa4 <UART_SetConfig+0x270>
 8009a54:	a201      	add	r2, pc, #4	; (adr r2, 8009a5c <UART_SetConfig+0x228>)
 8009a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5a:	bf00      	nop
 8009a5c:	08009a75 	.word	0x08009a75
 8009a60:	08009a7d 	.word	0x08009a7d
 8009a64:	08009a85 	.word	0x08009a85
 8009a68:	08009a8d 	.word	0x08009a8d
 8009a6c:	08009a95 	.word	0x08009a95
 8009a70:	08009a9d 	.word	0x08009a9d
 8009a74:	2300      	movs	r3, #0
 8009a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7a:	e1c3      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a7c:	2304      	movs	r3, #4
 8009a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a82:	e1bf      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a84:	2308      	movs	r3, #8
 8009a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8a:	e1bb      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a8c:	2310      	movs	r3, #16
 8009a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a92:	e1b7      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a94:	2320      	movs	r3, #32
 8009a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9a:	e1b3      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009a9c:	2340      	movs	r3, #64	; 0x40
 8009a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa2:	e1af      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009aa4:	2380      	movs	r3, #128	; 0x80
 8009aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aaa:	bf00      	nop
 8009aac:	e1aa      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a37      	ldr	r2, [pc, #220]	; (8009b90 <UART_SetConfig+0x35c>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d132      	bne.n	8009b1e <UART_SetConfig+0x2ea>
 8009ab8:	4b32      	ldr	r3, [pc, #200]	; (8009b84 <UART_SetConfig+0x350>)
 8009aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009abc:	f003 0307 	and.w	r3, r3, #7
 8009ac0:	2b05      	cmp	r3, #5
 8009ac2:	d827      	bhi.n	8009b14 <UART_SetConfig+0x2e0>
 8009ac4:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <UART_SetConfig+0x298>)
 8009ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aca:	bf00      	nop
 8009acc:	08009ae5 	.word	0x08009ae5
 8009ad0:	08009aed 	.word	0x08009aed
 8009ad4:	08009af5 	.word	0x08009af5
 8009ad8:	08009afd 	.word	0x08009afd
 8009adc:	08009b05 	.word	0x08009b05
 8009ae0:	08009b0d 	.word	0x08009b0d
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aea:	e18b      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009aec:	2304      	movs	r3, #4
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af2:	e187      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009af4:	2308      	movs	r3, #8
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e183      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009afc:	2310      	movs	r3, #16
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e17f      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009b04:	2320      	movs	r3, #32
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e17b      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009b0c:	2340      	movs	r3, #64	; 0x40
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b12:	e177      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009b14:	2380      	movs	r3, #128	; 0x80
 8009b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1a:	bf00      	nop
 8009b1c:	e172      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a1c      	ldr	r2, [pc, #112]	; (8009b94 <UART_SetConfig+0x360>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d144      	bne.n	8009bb2 <UART_SetConfig+0x37e>
 8009b28:	4b16      	ldr	r3, [pc, #88]	; (8009b84 <UART_SetConfig+0x350>)
 8009b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2c:	f003 0307 	and.w	r3, r3, #7
 8009b30:	2b05      	cmp	r3, #5
 8009b32:	d839      	bhi.n	8009ba8 <UART_SetConfig+0x374>
 8009b34:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <UART_SetConfig+0x308>)
 8009b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3a:	bf00      	nop
 8009b3c:	08009b55 	.word	0x08009b55
 8009b40:	08009b5d 	.word	0x08009b5d
 8009b44:	08009b65 	.word	0x08009b65
 8009b48:	08009b6d 	.word	0x08009b6d
 8009b4c:	08009b99 	.word	0x08009b99
 8009b50:	08009ba1 	.word	0x08009ba1
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5a:	e153      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009b5c:	2304      	movs	r3, #4
 8009b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b62:	e14f      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009b64:	2308      	movs	r3, #8
 8009b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6a:	e14b      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009b6c:	2310      	movs	r3, #16
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b72:	e147      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009b74:	cfff69f3 	.word	0xcfff69f3
 8009b78:	58000c00 	.word	0x58000c00
 8009b7c:	11fff4ff 	.word	0x11fff4ff
 8009b80:	40011000 	.word	0x40011000
 8009b84:	58024400 	.word	0x58024400
 8009b88:	40004400 	.word	0x40004400
 8009b8c:	40004800 	.word	0x40004800
 8009b90:	40004c00 	.word	0x40004c00
 8009b94:	40005000 	.word	0x40005000
 8009b98:	2320      	movs	r3, #32
 8009b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9e:	e131      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009ba0:	2340      	movs	r3, #64	; 0x40
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e12d      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009ba8:	2380      	movs	r3, #128	; 0x80
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	bf00      	nop
 8009bb0:	e128      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4ab6      	ldr	r2, [pc, #728]	; (8009e90 <UART_SetConfig+0x65c>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d178      	bne.n	8009cae <UART_SetConfig+0x47a>
 8009bbc:	4bb5      	ldr	r3, [pc, #724]	; (8009e94 <UART_SetConfig+0x660>)
 8009bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bc4:	2b28      	cmp	r3, #40	; 0x28
 8009bc6:	d86d      	bhi.n	8009ca4 <UART_SetConfig+0x470>
 8009bc8:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <UART_SetConfig+0x39c>)
 8009bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bce:	bf00      	nop
 8009bd0:	08009c75 	.word	0x08009c75
 8009bd4:	08009ca5 	.word	0x08009ca5
 8009bd8:	08009ca5 	.word	0x08009ca5
 8009bdc:	08009ca5 	.word	0x08009ca5
 8009be0:	08009ca5 	.word	0x08009ca5
 8009be4:	08009ca5 	.word	0x08009ca5
 8009be8:	08009ca5 	.word	0x08009ca5
 8009bec:	08009ca5 	.word	0x08009ca5
 8009bf0:	08009c7d 	.word	0x08009c7d
 8009bf4:	08009ca5 	.word	0x08009ca5
 8009bf8:	08009ca5 	.word	0x08009ca5
 8009bfc:	08009ca5 	.word	0x08009ca5
 8009c00:	08009ca5 	.word	0x08009ca5
 8009c04:	08009ca5 	.word	0x08009ca5
 8009c08:	08009ca5 	.word	0x08009ca5
 8009c0c:	08009ca5 	.word	0x08009ca5
 8009c10:	08009c85 	.word	0x08009c85
 8009c14:	08009ca5 	.word	0x08009ca5
 8009c18:	08009ca5 	.word	0x08009ca5
 8009c1c:	08009ca5 	.word	0x08009ca5
 8009c20:	08009ca5 	.word	0x08009ca5
 8009c24:	08009ca5 	.word	0x08009ca5
 8009c28:	08009ca5 	.word	0x08009ca5
 8009c2c:	08009ca5 	.word	0x08009ca5
 8009c30:	08009c8d 	.word	0x08009c8d
 8009c34:	08009ca5 	.word	0x08009ca5
 8009c38:	08009ca5 	.word	0x08009ca5
 8009c3c:	08009ca5 	.word	0x08009ca5
 8009c40:	08009ca5 	.word	0x08009ca5
 8009c44:	08009ca5 	.word	0x08009ca5
 8009c48:	08009ca5 	.word	0x08009ca5
 8009c4c:	08009ca5 	.word	0x08009ca5
 8009c50:	08009c95 	.word	0x08009c95
 8009c54:	08009ca5 	.word	0x08009ca5
 8009c58:	08009ca5 	.word	0x08009ca5
 8009c5c:	08009ca5 	.word	0x08009ca5
 8009c60:	08009ca5 	.word	0x08009ca5
 8009c64:	08009ca5 	.word	0x08009ca5
 8009c68:	08009ca5 	.word	0x08009ca5
 8009c6c:	08009ca5 	.word	0x08009ca5
 8009c70:	08009c9d 	.word	0x08009c9d
 8009c74:	2301      	movs	r3, #1
 8009c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7a:	e0c3      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009c7c:	2304      	movs	r3, #4
 8009c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c82:	e0bf      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009c84:	2308      	movs	r3, #8
 8009c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8a:	e0bb      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009c8c:	2310      	movs	r3, #16
 8009c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c92:	e0b7      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009c94:	2320      	movs	r3, #32
 8009c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9a:	e0b3      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009c9c:	2340      	movs	r3, #64	; 0x40
 8009c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca2:	e0af      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009ca4:	2380      	movs	r3, #128	; 0x80
 8009ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009caa:	bf00      	nop
 8009cac:	e0aa      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a79      	ldr	r2, [pc, #484]	; (8009e98 <UART_SetConfig+0x664>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d132      	bne.n	8009d1e <UART_SetConfig+0x4ea>
 8009cb8:	4b76      	ldr	r3, [pc, #472]	; (8009e94 <UART_SetConfig+0x660>)
 8009cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cbc:	f003 0307 	and.w	r3, r3, #7
 8009cc0:	2b05      	cmp	r3, #5
 8009cc2:	d827      	bhi.n	8009d14 <UART_SetConfig+0x4e0>
 8009cc4:	a201      	add	r2, pc, #4	; (adr r2, 8009ccc <UART_SetConfig+0x498>)
 8009cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cca:	bf00      	nop
 8009ccc:	08009ce5 	.word	0x08009ce5
 8009cd0:	08009ced 	.word	0x08009ced
 8009cd4:	08009cf5 	.word	0x08009cf5
 8009cd8:	08009cfd 	.word	0x08009cfd
 8009cdc:	08009d05 	.word	0x08009d05
 8009ce0:	08009d0d 	.word	0x08009d0d
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cea:	e08b      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009cec:	2304      	movs	r3, #4
 8009cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf2:	e087      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009cf4:	2308      	movs	r3, #8
 8009cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfa:	e083      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009cfc:	2310      	movs	r3, #16
 8009cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d02:	e07f      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009d04:	2320      	movs	r3, #32
 8009d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0a:	e07b      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009d0c:	2340      	movs	r3, #64	; 0x40
 8009d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d12:	e077      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009d14:	2380      	movs	r3, #128	; 0x80
 8009d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1a:	bf00      	nop
 8009d1c:	e072      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a5e      	ldr	r2, [pc, #376]	; (8009e9c <UART_SetConfig+0x668>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d132      	bne.n	8009d8e <UART_SetConfig+0x55a>
 8009d28:	4b5a      	ldr	r3, [pc, #360]	; (8009e94 <UART_SetConfig+0x660>)
 8009d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d2c:	f003 0307 	and.w	r3, r3, #7
 8009d30:	2b05      	cmp	r3, #5
 8009d32:	d827      	bhi.n	8009d84 <UART_SetConfig+0x550>
 8009d34:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <UART_SetConfig+0x508>)
 8009d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3a:	bf00      	nop
 8009d3c:	08009d55 	.word	0x08009d55
 8009d40:	08009d5d 	.word	0x08009d5d
 8009d44:	08009d65 	.word	0x08009d65
 8009d48:	08009d6d 	.word	0x08009d6d
 8009d4c:	08009d75 	.word	0x08009d75
 8009d50:	08009d7d 	.word	0x08009d7d
 8009d54:	2300      	movs	r3, #0
 8009d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5a:	e053      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009d5c:	2304      	movs	r3, #4
 8009d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d62:	e04f      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009d64:	2308      	movs	r3, #8
 8009d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6a:	e04b      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d72:	e047      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009d74:	2320      	movs	r3, #32
 8009d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7a:	e043      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009d7c:	2340      	movs	r3, #64	; 0x40
 8009d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d82:	e03f      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009d84:	2380      	movs	r3, #128	; 0x80
 8009d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8a:	bf00      	nop
 8009d8c:	e03a      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a43      	ldr	r2, [pc, #268]	; (8009ea0 <UART_SetConfig+0x66c>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d132      	bne.n	8009dfe <UART_SetConfig+0x5ca>
 8009d98:	4b3e      	ldr	r3, [pc, #248]	; (8009e94 <UART_SetConfig+0x660>)
 8009d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d9c:	f003 0307 	and.w	r3, r3, #7
 8009da0:	2b05      	cmp	r3, #5
 8009da2:	d827      	bhi.n	8009df4 <UART_SetConfig+0x5c0>
 8009da4:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <UART_SetConfig+0x578>)
 8009da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009daa:	bf00      	nop
 8009dac:	08009dc5 	.word	0x08009dc5
 8009db0:	08009dcd 	.word	0x08009dcd
 8009db4:	08009dd5 	.word	0x08009dd5
 8009db8:	08009ddd 	.word	0x08009ddd
 8009dbc:	08009de5 	.word	0x08009de5
 8009dc0:	08009ded 	.word	0x08009ded
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dca:	e01b      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009dcc:	2304      	movs	r3, #4
 8009dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd2:	e017      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009dd4:	2308      	movs	r3, #8
 8009dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dda:	e013      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009ddc:	2310      	movs	r3, #16
 8009dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de2:	e00f      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009de4:	2320      	movs	r3, #32
 8009de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dea:	e00b      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009dec:	2340      	movs	r3, #64	; 0x40
 8009dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df2:	e007      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009df4:	2380      	movs	r3, #128	; 0x80
 8009df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfa:	bf00      	nop
 8009dfc:	e002      	b.n	8009e04 <UART_SetConfig+0x5d0>
 8009dfe:	2380      	movs	r3, #128	; 0x80
 8009e00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a25      	ldr	r2, [pc, #148]	; (8009ea0 <UART_SetConfig+0x66c>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	f040 80b8 	bne.w	8009f80 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e14:	2b08      	cmp	r3, #8
 8009e16:	d019      	beq.n	8009e4c <UART_SetConfig+0x618>
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	dc04      	bgt.n	8009e26 <UART_SetConfig+0x5f2>
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d009      	beq.n	8009e34 <UART_SetConfig+0x600>
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d00b      	beq.n	8009e3c <UART_SetConfig+0x608>
 8009e24:	e042      	b.n	8009eac <UART_SetConfig+0x678>
 8009e26:	2b20      	cmp	r3, #32
 8009e28:	d02b      	beq.n	8009e82 <UART_SetConfig+0x64e>
 8009e2a:	2b40      	cmp	r3, #64	; 0x40
 8009e2c:	d02c      	beq.n	8009e88 <UART_SetConfig+0x654>
 8009e2e:	2b10      	cmp	r3, #16
 8009e30:	d014      	beq.n	8009e5c <UART_SetConfig+0x628>
 8009e32:	e03b      	b.n	8009eac <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009e34:	f7fd fa80 	bl	8007338 <HAL_RCCEx_GetD3PCLK1Freq>
 8009e38:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e3a:	e03d      	b.n	8009eb8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e3c:	f107 0314 	add.w	r3, r7, #20
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fd fa8f 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e4a:	e035      	b.n	8009eb8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e4c:	f107 0308 	add.w	r3, r7, #8
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fd fbd3 	bl	80075fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e5a:	e02d      	b.n	8009eb8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e5c:	4b0d      	ldr	r3, [pc, #52]	; (8009e94 <UART_SetConfig+0x660>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 0320 	and.w	r3, r3, #32
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d009      	beq.n	8009e7c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e68:	4b0a      	ldr	r3, [pc, #40]	; (8009e94 <UART_SetConfig+0x660>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	08db      	lsrs	r3, r3, #3
 8009e6e:	f003 0303 	and.w	r3, r3, #3
 8009e72:	4a0c      	ldr	r2, [pc, #48]	; (8009ea4 <UART_SetConfig+0x670>)
 8009e74:	fa22 f303 	lsr.w	r3, r2, r3
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e7a:	e01d      	b.n	8009eb8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009e7c:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <UART_SetConfig+0x670>)
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e80:	e01a      	b.n	8009eb8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e82:	4b09      	ldr	r3, [pc, #36]	; (8009ea8 <UART_SetConfig+0x674>)
 8009e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e86:	e017      	b.n	8009eb8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e8e:	e013      	b.n	8009eb8 <UART_SetConfig+0x684>
 8009e90:	40011400 	.word	0x40011400
 8009e94:	58024400 	.word	0x58024400
 8009e98:	40007800 	.word	0x40007800
 8009e9c:	40007c00 	.word	0x40007c00
 8009ea0:	58000c00 	.word	0x58000c00
 8009ea4:	03d09000 	.word	0x03d09000
 8009ea8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009eac:	2300      	movs	r3, #0
 8009eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009eb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f000 824d 	beq.w	800a35a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	4aad      	ldr	r2, [pc, #692]	; (800a17c <UART_SetConfig+0x948>)
 8009ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ed2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	005b      	lsls	r3, r3, #1
 8009edc:	4413      	add	r3, r2
 8009ede:	6a3a      	ldr	r2, [r7, #32]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d305      	bcc.n	8009ef0 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009eea:	6a3a      	ldr	r2, [r7, #32]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d903      	bls.n	8009ef8 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ef6:	e230      	b.n	800a35a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efa:	4618      	mov	r0, r3
 8009efc:	f04f 0100 	mov.w	r1, #0
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f04:	4a9d      	ldr	r2, [pc, #628]	; (800a17c <UART_SetConfig+0x948>)
 8009f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	f04f 0400 	mov.w	r4, #0
 8009f10:	461a      	mov	r2, r3
 8009f12:	4623      	mov	r3, r4
 8009f14:	f7f6 f9e0 	bl	80002d8 <__aeabi_uldivmod>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4622      	mov	r2, r4
 8009f20:	f04f 0300 	mov.w	r3, #0
 8009f24:	f04f 0400 	mov.w	r4, #0
 8009f28:	0214      	lsls	r4, r2, #8
 8009f2a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009f2e:	020b      	lsls	r3, r1, #8
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6852      	ldr	r2, [r2, #4]
 8009f34:	0852      	lsrs	r2, r2, #1
 8009f36:	4611      	mov	r1, r2
 8009f38:	f04f 0200 	mov.w	r2, #0
 8009f3c:	eb13 0b01 	adds.w	fp, r3, r1
 8009f40:	eb44 0c02 	adc.w	ip, r4, r2
 8009f44:	4658      	mov	r0, fp
 8009f46:	4661      	mov	r1, ip
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f04f 0400 	mov.w	r4, #0
 8009f50:	461a      	mov	r2, r3
 8009f52:	4623      	mov	r3, r4
 8009f54:	f7f6 f9c0 	bl	80002d8 <__aeabi_uldivmod>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f64:	d308      	bcc.n	8009f78 <UART_SetConfig+0x744>
 8009f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f6c:	d204      	bcs.n	8009f78 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f74:	60da      	str	r2, [r3, #12]
 8009f76:	e1f0      	b.n	800a35a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f7e:	e1ec      	b.n	800a35a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f88:	f040 8100 	bne.w	800a18c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8009f8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f90:	2b40      	cmp	r3, #64	; 0x40
 8009f92:	f200 80b7 	bhi.w	800a104 <UART_SetConfig+0x8d0>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <UART_SetConfig+0x768>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	0800a0a1 	.word	0x0800a0a1
 8009fa0:	0800a0a9 	.word	0x0800a0a9
 8009fa4:	0800a105 	.word	0x0800a105
 8009fa8:	0800a105 	.word	0x0800a105
 8009fac:	0800a0b1 	.word	0x0800a0b1
 8009fb0:	0800a105 	.word	0x0800a105
 8009fb4:	0800a105 	.word	0x0800a105
 8009fb8:	0800a105 	.word	0x0800a105
 8009fbc:	0800a0c1 	.word	0x0800a0c1
 8009fc0:	0800a105 	.word	0x0800a105
 8009fc4:	0800a105 	.word	0x0800a105
 8009fc8:	0800a105 	.word	0x0800a105
 8009fcc:	0800a105 	.word	0x0800a105
 8009fd0:	0800a105 	.word	0x0800a105
 8009fd4:	0800a105 	.word	0x0800a105
 8009fd8:	0800a105 	.word	0x0800a105
 8009fdc:	0800a0d1 	.word	0x0800a0d1
 8009fe0:	0800a105 	.word	0x0800a105
 8009fe4:	0800a105 	.word	0x0800a105
 8009fe8:	0800a105 	.word	0x0800a105
 8009fec:	0800a105 	.word	0x0800a105
 8009ff0:	0800a105 	.word	0x0800a105
 8009ff4:	0800a105 	.word	0x0800a105
 8009ff8:	0800a105 	.word	0x0800a105
 8009ffc:	0800a105 	.word	0x0800a105
 800a000:	0800a105 	.word	0x0800a105
 800a004:	0800a105 	.word	0x0800a105
 800a008:	0800a105 	.word	0x0800a105
 800a00c:	0800a105 	.word	0x0800a105
 800a010:	0800a105 	.word	0x0800a105
 800a014:	0800a105 	.word	0x0800a105
 800a018:	0800a105 	.word	0x0800a105
 800a01c:	0800a0f7 	.word	0x0800a0f7
 800a020:	0800a105 	.word	0x0800a105
 800a024:	0800a105 	.word	0x0800a105
 800a028:	0800a105 	.word	0x0800a105
 800a02c:	0800a105 	.word	0x0800a105
 800a030:	0800a105 	.word	0x0800a105
 800a034:	0800a105 	.word	0x0800a105
 800a038:	0800a105 	.word	0x0800a105
 800a03c:	0800a105 	.word	0x0800a105
 800a040:	0800a105 	.word	0x0800a105
 800a044:	0800a105 	.word	0x0800a105
 800a048:	0800a105 	.word	0x0800a105
 800a04c:	0800a105 	.word	0x0800a105
 800a050:	0800a105 	.word	0x0800a105
 800a054:	0800a105 	.word	0x0800a105
 800a058:	0800a105 	.word	0x0800a105
 800a05c:	0800a105 	.word	0x0800a105
 800a060:	0800a105 	.word	0x0800a105
 800a064:	0800a105 	.word	0x0800a105
 800a068:	0800a105 	.word	0x0800a105
 800a06c:	0800a105 	.word	0x0800a105
 800a070:	0800a105 	.word	0x0800a105
 800a074:	0800a105 	.word	0x0800a105
 800a078:	0800a105 	.word	0x0800a105
 800a07c:	0800a105 	.word	0x0800a105
 800a080:	0800a105 	.word	0x0800a105
 800a084:	0800a105 	.word	0x0800a105
 800a088:	0800a105 	.word	0x0800a105
 800a08c:	0800a105 	.word	0x0800a105
 800a090:	0800a105 	.word	0x0800a105
 800a094:	0800a105 	.word	0x0800a105
 800a098:	0800a105 	.word	0x0800a105
 800a09c:	0800a0fd 	.word	0x0800a0fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0a0:	f7fb ff9c 	bl	8005fdc <HAL_RCC_GetPCLK1Freq>
 800a0a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0a6:	e033      	b.n	800a110 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0a8:	f7fb ffae 	bl	8006008 <HAL_RCC_GetPCLK2Freq>
 800a0ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0ae:	e02f      	b.n	800a110 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0b0:	f107 0314 	add.w	r3, r7, #20
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fd f955 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0be:	e027      	b.n	800a110 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0c0:	f107 0308 	add.w	r3, r7, #8
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fd fa99 	bl	80075fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ce:	e01f      	b.n	800a110 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0d0:	4b2b      	ldr	r3, [pc, #172]	; (800a180 <UART_SetConfig+0x94c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0320 	and.w	r3, r3, #32
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0dc:	4b28      	ldr	r3, [pc, #160]	; (800a180 <UART_SetConfig+0x94c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	08db      	lsrs	r3, r3, #3
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	4a27      	ldr	r2, [pc, #156]	; (800a184 <UART_SetConfig+0x950>)
 800a0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0ee:	e00f      	b.n	800a110 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a0f0:	4b24      	ldr	r3, [pc, #144]	; (800a184 <UART_SetConfig+0x950>)
 800a0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0f4:	e00c      	b.n	800a110 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0f6:	4b24      	ldr	r3, [pc, #144]	; (800a188 <UART_SetConfig+0x954>)
 800a0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0fa:	e009      	b.n	800a110 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a100:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a102:	e005      	b.n	800a110 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a10e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 8121 	beq.w	800a35a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	4a17      	ldr	r2, [pc, #92]	; (800a17c <UART_SetConfig+0x948>)
 800a11e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a122:	461a      	mov	r2, r3
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	fbb3 f3f2 	udiv	r3, r3, r2
 800a12a:	005a      	lsls	r2, r3, #1
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	085b      	lsrs	r3, r3, #1
 800a132:	441a      	add	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	fbb2 f3f3 	udiv	r3, r2, r3
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	2b0f      	cmp	r3, #15
 800a144:	d916      	bls.n	800a174 <UART_SetConfig+0x940>
 800a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a14c:	d212      	bcs.n	800a174 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a150:	b29b      	uxth	r3, r3
 800a152:	f023 030f 	bic.w	r3, r3, #15
 800a156:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	085b      	lsrs	r3, r3, #1
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	f003 0307 	and.w	r3, r3, #7
 800a162:	b29a      	uxth	r2, r3
 800a164:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a166:	4313      	orrs	r3, r2
 800a168:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a170:	60da      	str	r2, [r3, #12]
 800a172:	e0f2      	b.n	800a35a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a17a:	e0ee      	b.n	800a35a <UART_SetConfig+0xb26>
 800a17c:	08012968 	.word	0x08012968
 800a180:	58024400 	.word	0x58024400
 800a184:	03d09000 	.word	0x03d09000
 800a188:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a18c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a190:	2b40      	cmp	r3, #64	; 0x40
 800a192:	f200 80b7 	bhi.w	800a304 <UART_SetConfig+0xad0>
 800a196:	a201      	add	r2, pc, #4	; (adr r2, 800a19c <UART_SetConfig+0x968>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a2a1 	.word	0x0800a2a1
 800a1a0:	0800a2a9 	.word	0x0800a2a9
 800a1a4:	0800a305 	.word	0x0800a305
 800a1a8:	0800a305 	.word	0x0800a305
 800a1ac:	0800a2b1 	.word	0x0800a2b1
 800a1b0:	0800a305 	.word	0x0800a305
 800a1b4:	0800a305 	.word	0x0800a305
 800a1b8:	0800a305 	.word	0x0800a305
 800a1bc:	0800a2c1 	.word	0x0800a2c1
 800a1c0:	0800a305 	.word	0x0800a305
 800a1c4:	0800a305 	.word	0x0800a305
 800a1c8:	0800a305 	.word	0x0800a305
 800a1cc:	0800a305 	.word	0x0800a305
 800a1d0:	0800a305 	.word	0x0800a305
 800a1d4:	0800a305 	.word	0x0800a305
 800a1d8:	0800a305 	.word	0x0800a305
 800a1dc:	0800a2d1 	.word	0x0800a2d1
 800a1e0:	0800a305 	.word	0x0800a305
 800a1e4:	0800a305 	.word	0x0800a305
 800a1e8:	0800a305 	.word	0x0800a305
 800a1ec:	0800a305 	.word	0x0800a305
 800a1f0:	0800a305 	.word	0x0800a305
 800a1f4:	0800a305 	.word	0x0800a305
 800a1f8:	0800a305 	.word	0x0800a305
 800a1fc:	0800a305 	.word	0x0800a305
 800a200:	0800a305 	.word	0x0800a305
 800a204:	0800a305 	.word	0x0800a305
 800a208:	0800a305 	.word	0x0800a305
 800a20c:	0800a305 	.word	0x0800a305
 800a210:	0800a305 	.word	0x0800a305
 800a214:	0800a305 	.word	0x0800a305
 800a218:	0800a305 	.word	0x0800a305
 800a21c:	0800a2f7 	.word	0x0800a2f7
 800a220:	0800a305 	.word	0x0800a305
 800a224:	0800a305 	.word	0x0800a305
 800a228:	0800a305 	.word	0x0800a305
 800a22c:	0800a305 	.word	0x0800a305
 800a230:	0800a305 	.word	0x0800a305
 800a234:	0800a305 	.word	0x0800a305
 800a238:	0800a305 	.word	0x0800a305
 800a23c:	0800a305 	.word	0x0800a305
 800a240:	0800a305 	.word	0x0800a305
 800a244:	0800a305 	.word	0x0800a305
 800a248:	0800a305 	.word	0x0800a305
 800a24c:	0800a305 	.word	0x0800a305
 800a250:	0800a305 	.word	0x0800a305
 800a254:	0800a305 	.word	0x0800a305
 800a258:	0800a305 	.word	0x0800a305
 800a25c:	0800a305 	.word	0x0800a305
 800a260:	0800a305 	.word	0x0800a305
 800a264:	0800a305 	.word	0x0800a305
 800a268:	0800a305 	.word	0x0800a305
 800a26c:	0800a305 	.word	0x0800a305
 800a270:	0800a305 	.word	0x0800a305
 800a274:	0800a305 	.word	0x0800a305
 800a278:	0800a305 	.word	0x0800a305
 800a27c:	0800a305 	.word	0x0800a305
 800a280:	0800a305 	.word	0x0800a305
 800a284:	0800a305 	.word	0x0800a305
 800a288:	0800a305 	.word	0x0800a305
 800a28c:	0800a305 	.word	0x0800a305
 800a290:	0800a305 	.word	0x0800a305
 800a294:	0800a305 	.word	0x0800a305
 800a298:	0800a305 	.word	0x0800a305
 800a29c:	0800a2fd 	.word	0x0800a2fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2a0:	f7fb fe9c 	bl	8005fdc <HAL_RCC_GetPCLK1Freq>
 800a2a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2a6:	e033      	b.n	800a310 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2a8:	f7fb feae 	bl	8006008 <HAL_RCC_GetPCLK2Freq>
 800a2ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2ae:	e02f      	b.n	800a310 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2b0:	f107 0314 	add.w	r3, r7, #20
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fd f855 	bl	8007364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2be:	e027      	b.n	800a310 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2c0:	f107 0308 	add.w	r3, r7, #8
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fd f999 	bl	80075fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ce:	e01f      	b.n	800a310 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2d0:	4b2c      	ldr	r3, [pc, #176]	; (800a384 <UART_SetConfig+0xb50>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0320 	and.w	r3, r3, #32
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d009      	beq.n	800a2f0 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2dc:	4b29      	ldr	r3, [pc, #164]	; (800a384 <UART_SetConfig+0xb50>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	08db      	lsrs	r3, r3, #3
 800a2e2:	f003 0303 	and.w	r3, r3, #3
 800a2e6:	4a28      	ldr	r2, [pc, #160]	; (800a388 <UART_SetConfig+0xb54>)
 800a2e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2ee:	e00f      	b.n	800a310 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a2f0:	4b25      	ldr	r3, [pc, #148]	; (800a388 <UART_SetConfig+0xb54>)
 800a2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2f4:	e00c      	b.n	800a310 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2f6:	4b25      	ldr	r3, [pc, #148]	; (800a38c <UART_SetConfig+0xb58>)
 800a2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2fa:	e009      	b.n	800a310 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a300:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a302:	e005      	b.n	800a310 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a304:	2300      	movs	r3, #0
 800a306:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a30e:	bf00      	nop
    }

    if (pclk != 0U)
 800a310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a312:	2b00      	cmp	r3, #0
 800a314:	d021      	beq.n	800a35a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31a:	4a1d      	ldr	r2, [pc, #116]	; (800a390 <UART_SetConfig+0xb5c>)
 800a31c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a320:	461a      	mov	r2, r3
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	fbb3 f2f2 	udiv	r2, r3, r2
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	085b      	lsrs	r3, r3, #1
 800a32e:	441a      	add	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	fbb2 f3f3 	udiv	r3, r2, r3
 800a338:	b29b      	uxth	r3, r3
 800a33a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33e:	2b0f      	cmp	r3, #15
 800a340:	d908      	bls.n	800a354 <UART_SetConfig+0xb20>
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a348:	d204      	bcs.n	800a354 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a350:	60da      	str	r2, [r3, #12]
 800a352:	e002      	b.n	800a35a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a376:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3738      	adds	r7, #56	; 0x38
 800a37e:	46bd      	mov	sp, r7
 800a380:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a384:	58024400 	.word	0x58024400
 800a388:	03d09000 	.word	0x03d09000
 800a38c:	003d0900 	.word	0x003d0900
 800a390:	08012968 	.word	0x08012968

0800a394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00a      	beq.n	800a3be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c2:	f003 0302 	and.w	r3, r3, #2
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00a      	beq.n	800a402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	430a      	orrs	r2, r1
 800a400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a406:	f003 0308 	and.w	r3, r3, #8
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00a      	beq.n	800a424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	430a      	orrs	r2, r1
 800a422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a428:	f003 0310 	and.w	r3, r3, #16
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00a      	beq.n	800a446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00a      	beq.n	800a468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	430a      	orrs	r2, r1
 800a466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a470:	2b00      	cmp	r3, #0
 800a472:	d01a      	beq.n	800a4aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	430a      	orrs	r2, r1
 800a488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a48e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a492:	d10a      	bne.n	800a4aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00a      	beq.n	800a4cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	605a      	str	r2, [r3, #4]
  }
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af02      	add	r7, sp, #8
 800a4de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a4e8:	f7f7 f856 	bl	8001598 <HAL_GetTick>
 800a4ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 0308 	and.w	r3, r3, #8
 800a4f8:	2b08      	cmp	r3, #8
 800a4fa:	d10e      	bne.n	800a51a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f82c 	bl	800a568 <UART_WaitOnFlagUntilTimeout>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e022      	b.n	800a560 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 0304 	and.w	r3, r3, #4
 800a524:	2b04      	cmp	r3, #4
 800a526:	d10e      	bne.n	800a546 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f816 	bl	800a568 <UART_WaitOnFlagUntilTimeout>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d001      	beq.n	800a546 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e00c      	b.n	800a560 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2220      	movs	r2, #32
 800a54a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2220      	movs	r2, #32
 800a552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	4613      	mov	r3, r2
 800a576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a578:	e062      	b.n	800a640 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a580:	d05e      	beq.n	800a640 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a582:	f7f7 f809 	bl	8001598 <HAL_GetTick>
 800a586:	4602      	mov	r2, r0
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d302      	bcc.n	800a598 <UART_WaitOnFlagUntilTimeout+0x30>
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d11d      	bne.n	800a5d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689a      	ldr	r2, [r3, #8]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f022 0201 	bic.w	r2, r2, #1
 800a5b6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e045      	b.n	800a660 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d02e      	beq.n	800a640 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	69db      	ldr	r3, [r3, #28]
 800a5e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5f0:	d126      	bne.n	800a640 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a60a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	689a      	ldr	r2, [r3, #8]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f022 0201 	bic.w	r2, r2, #1
 800a61a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2220      	movs	r2, #32
 800a620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2220      	movs	r2, #32
 800a628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2220      	movs	r2, #32
 800a630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e00f      	b.n	800a660 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	69da      	ldr	r2, [r3, #28]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	4013      	ands	r3, r2
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	bf0c      	ite	eq
 800a650:	2301      	moveq	r3, #1
 800a652:	2300      	movne	r3, #0
 800a654:	b2db      	uxtb	r3, r3
 800a656:	461a      	mov	r2, r3
 800a658:	79fb      	ldrb	r3, [r7, #7]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d08d      	beq.n	800a57a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a676:	2b01      	cmp	r3, #1
 800a678:	d101      	bne.n	800a67e <HAL_UARTEx_DisableFifoMode+0x16>
 800a67a:	2302      	movs	r3, #2
 800a67c:	e027      	b.n	800a6ce <HAL_UARTEx_DisableFifoMode+0x66>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2224      	movs	r2, #36	; 0x24
 800a68a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 0201 	bic.w	r2, r2, #1
 800a6a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a6ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2220      	movs	r2, #32
 800a6c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d101      	bne.n	800a6f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e02d      	b.n	800a74e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2224      	movs	r2, #36	; 0x24
 800a6fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f022 0201 	bic.w	r2, r2, #1
 800a718:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f850 	bl	800a7d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2220      	movs	r2, #32
 800a740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a766:	2b01      	cmp	r3, #1
 800a768:	d101      	bne.n	800a76e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a76a:	2302      	movs	r3, #2
 800a76c:	e02d      	b.n	800a7ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2224      	movs	r2, #36	; 0x24
 800a77a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f022 0201 	bic.w	r2, r2, #1
 800a794:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f812 	bl	800a7d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b089      	sub	sp, #36	; 0x24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a7dc:	4a2f      	ldr	r2, [pc, #188]	; (800a89c <UARTEx_SetNbDataToProcess+0xc8>)
 800a7de:	f107 0314 	add.w	r3, r7, #20
 800a7e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7e6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a7ea:	4a2d      	ldr	r2, [pc, #180]	; (800a8a0 <UARTEx_SetNbDataToProcess+0xcc>)
 800a7ec:	f107 030c 	add.w	r3, r7, #12
 800a7f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7f4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d108      	bne.n	800a812 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a810:	e03d      	b.n	800a88e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a812:	2310      	movs	r3, #16
 800a814:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a816:	2310      	movs	r3, #16
 800a818:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	0e5b      	lsrs	r3, r3, #25
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 0307 	and.w	r3, r3, #7
 800a828:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	0f5b      	lsrs	r3, r3, #29
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f003 0307 	and.w	r3, r3, #7
 800a838:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a83a:	7fbb      	ldrb	r3, [r7, #30]
 800a83c:	7f3a      	ldrb	r2, [r7, #28]
 800a83e:	f107 0120 	add.w	r1, r7, #32
 800a842:	440a      	add	r2, r1
 800a844:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a848:	fb02 f303 	mul.w	r3, r2, r3
 800a84c:	7f3a      	ldrb	r2, [r7, #28]
 800a84e:	f107 0120 	add.w	r1, r7, #32
 800a852:	440a      	add	r2, r1
 800a854:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a858:	fb93 f3f2 	sdiv	r3, r3, r2
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a864:	7ffb      	ldrb	r3, [r7, #31]
 800a866:	7f7a      	ldrb	r2, [r7, #29]
 800a868:	f107 0120 	add.w	r1, r7, #32
 800a86c:	440a      	add	r2, r1
 800a86e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a872:	fb02 f303 	mul.w	r3, r2, r3
 800a876:	7f7a      	ldrb	r2, [r7, #29]
 800a878:	f107 0120 	add.w	r1, r7, #32
 800a87c:	440a      	add	r2, r1
 800a87e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a882:	fb93 f3f2 	sdiv	r3, r3, r2
 800a886:	b29a      	uxth	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a88e:	bf00      	nop
 800a890:	3724      	adds	r7, #36	; 0x24
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	080128b8 	.word	0x080128b8
 800a8a0:	080128c0 	.word	0x080128c0

0800a8a4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	b480      	push	{r7}
 800a8a8:	b085      	sub	sp, #20
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	f107 001c 	add.w	r0, r7, #28
 800a8b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a8ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a8be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800a8c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800a8c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800a8ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <SDMMC_Init+0x50>)
 800a8d8:	4013      	ands	r3, r2
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	b004      	add	sp, #16
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	ffc02c00 	.word	0xffc02c00

0800a8f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f043 0203 	orr.w	r2, r3, #3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a956:	b480      	push	{r7}
 800a958:	b083      	sub	sp, #12
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 0303 	and.w	r3, r3, #3
}
 800a966:	4618      	mov	r0, r3
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
	...

0800a974 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a992:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a998:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a99e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68da      	ldr	r2, [r3, #12]
 800a9aa:	4b06      	ldr	r3, [pc, #24]	; (800a9c4 <SDMMC_SendCommand+0x50>)
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	431a      	orrs	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	fffee0c0 	.word	0xfffee0c0

0800a9c8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	b2db      	uxtb	r3, r3
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3314      	adds	r3, #20
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa2e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aa34:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aa3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	431a      	orrs	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aa52:	2300      	movs	r3, #0

}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b088      	sub	sp, #32
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa6e:	2310      	movs	r3, #16
 800aa70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa82:	f107 0308 	add.w	r3, r7, #8
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff ff73 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aa8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa92:	2110      	movs	r1, #16
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 faaf 	bl	800aff8 <SDMMC_GetCmdResp1>
 800aa9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa9c:	69fb      	ldr	r3, [r7, #28]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3720      	adds	r7, #32
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b088      	sub	sp, #32
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aab4:	2311      	movs	r3, #17
 800aab6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aabc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aabe:	2300      	movs	r3, #0
 800aac0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aac6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aac8:	f107 0308 	add.w	r3, r7, #8
 800aacc:	4619      	mov	r1, r3
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7ff ff50 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aad4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aad8:	2111      	movs	r1, #17
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa8c 	bl	800aff8 <SDMMC_GetCmdResp1>
 800aae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aae2:	69fb      	ldr	r3, [r7, #28]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3720      	adds	r7, #32
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b088      	sub	sp, #32
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aafa:	2312      	movs	r3, #18
 800aafc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aafe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab04:	2300      	movs	r3, #0
 800ab06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab0e:	f107 0308 	add.w	r3, r7, #8
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7ff ff2d 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ab1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab1e:	2112      	movs	r1, #18
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fa69 	bl	800aff8 <SDMMC_GetCmdResp1>
 800ab26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab28:	69fb      	ldr	r3, [r7, #28]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3720      	adds	r7, #32
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b088      	sub	sp, #32
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab40:	2318      	movs	r3, #24
 800ab42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab54:	f107 0308 	add.w	r3, r7, #8
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7ff ff0a 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab64:	2118      	movs	r1, #24
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fa46 	bl	800aff8 <SDMMC_GetCmdResp1>
 800ab6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab6e:	69fb      	ldr	r3, [r7, #28]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3720      	adds	r7, #32
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b088      	sub	sp, #32
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ab86:	2319      	movs	r3, #25
 800ab88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab90:	2300      	movs	r3, #0
 800ab92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab9a:	f107 0308 	add.w	r3, r7, #8
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff fee7 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aba6:	f241 3288 	movw	r2, #5000	; 0x1388
 800abaa:	2119      	movs	r1, #25
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fa23 	bl	800aff8 <SDMMC_GetCmdResp1>
 800abb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abb4:	69fb      	ldr	r3, [r7, #28]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3720      	adds	r7, #32
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
	...

0800abc0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800abcc:	230c      	movs	r3, #12
 800abce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abd6:	2300      	movs	r3, #0
 800abd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abde:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abf8:	f107 0308 	add.w	r3, r7, #8
 800abfc:	4619      	mov	r1, r3
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7ff feb8 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ac04:	4a0b      	ldr	r2, [pc, #44]	; (800ac34 <SDMMC_CmdStopTransfer+0x74>)
 800ac06:	210c      	movs	r1, #12
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f9f5 	bl	800aff8 <SDMMC_GetCmdResp1>
 800ac0e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac22:	d101      	bne.n	800ac28 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ac24:	2300      	movs	r3, #0
 800ac26:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ac28:	69fb      	ldr	r3, [r7, #28]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3720      	adds	r7, #32
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	05f5e100 	.word	0x05f5e100

0800ac38 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08a      	sub	sp, #40	; 0x28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ac48:	2307      	movs	r3, #7
 800ac4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac50:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac52:	2300      	movs	r3, #0
 800ac54:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac5a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac5c:	f107 0310 	add.w	r3, r7, #16
 800ac60:	4619      	mov	r1, r3
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f7ff fe86 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ac68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac6c:	2107      	movs	r1, #7
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f000 f9c2 	bl	800aff8 <SDMMC_GetCmdResp1>
 800ac74:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3728      	adds	r7, #40	; 0x28
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b088      	sub	sp, #32
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ac90:	2300      	movs	r3, #0
 800ac92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac94:	2300      	movs	r3, #0
 800ac96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac9e:	f107 0308 	add.w	r3, r7, #8
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f7ff fe65 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f976 	bl	800af9c <SDMMC_GetCmdError>
 800acb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acb2:	69fb      	ldr	r3, [r7, #28]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3720      	adds	r7, #32
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b088      	sub	sp, #32
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800acc4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800acc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800acca:	2308      	movs	r3, #8
 800accc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acd4:	2300      	movs	r3, #0
 800acd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acde:	f107 0308 	add.w	r3, r7, #8
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7ff fe45 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fb78 	bl	800b3e0 <SDMMC_GetCmdResp7>
 800acf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acf2:	69fb      	ldr	r3, [r7, #28]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3720      	adds	r7, #32
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ad0a:	2337      	movs	r3, #55	; 0x37
 800ad0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad14:	2300      	movs	r3, #0
 800ad16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad1e:	f107 0308 	add.w	r3, r7, #8
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff fe25 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ad2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad2e:	2137      	movs	r1, #55	; 0x37
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f961 	bl	800aff8 <SDMMC_GetCmdResp1>
 800ad36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad38:	69fb      	ldr	r3, [r7, #28]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3720      	adds	r7, #32
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b088      	sub	sp, #32
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ad50:	2329      	movs	r3, #41	; 0x29
 800ad52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad64:	f107 0308 	add.w	r3, r7, #8
 800ad68:	4619      	mov	r1, r3
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff fe02 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fa7d 	bl	800b270 <SDMMC_GetCmdResp3>
 800ad76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad78:	69fb      	ldr	r3, [r7, #28]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3720      	adds	r7, #32
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b088      	sub	sp, #32
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ad90:	2306      	movs	r3, #6
 800ad92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ada2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ada4:	f107 0308 	add.w	r3, r7, #8
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff fde2 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800adb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800adb4:	2106      	movs	r1, #6
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f91e 	bl	800aff8 <SDMMC_GetCmdResp1>
 800adbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adbe:	69fb      	ldr	r3, [r7, #28]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3720      	adds	r7, #32
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800add0:	2300      	movs	r3, #0
 800add2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800add4:	2333      	movs	r3, #51	; 0x33
 800add6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800add8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800addc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adde:	2300      	movs	r3, #0
 800ade0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ade2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ade6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ade8:	f107 0308 	add.w	r3, r7, #8
 800adec:	4619      	mov	r1, r3
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7ff fdc0 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800adf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf8:	2133      	movs	r1, #51	; 0x33
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f8fc 	bl	800aff8 <SDMMC_GetCmdResp1>
 800ae00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae02:	69fb      	ldr	r3, [r7, #28]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3720      	adds	r7, #32
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b088      	sub	sp, #32
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ae14:	2300      	movs	r3, #0
 800ae16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ae18:	2302      	movs	r3, #2
 800ae1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ae20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae22:	2300      	movs	r3, #0
 800ae24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae2c:	f107 0308 	add.w	r3, r7, #8
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fd9e 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f9cf 	bl	800b1dc <SDMMC_GetCmdResp2>
 800ae3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae40:	69fb      	ldr	r3, [r7, #28]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3720      	adds	r7, #32
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b088      	sub	sp, #32
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae58:	2309      	movs	r3, #9
 800ae5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ae60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae62:	2300      	movs	r3, #0
 800ae64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae6c:	f107 0308 	add.w	r3, r7, #8
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff fd7e 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f9af 	bl	800b1dc <SDMMC_GetCmdResp2>
 800ae7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae80:	69fb      	ldr	r3, [r7, #28]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3720      	adds	r7, #32
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b088      	sub	sp, #32
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae94:	2300      	movs	r3, #0
 800ae96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aea2:	2300      	movs	r3, #0
 800aea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aeaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeac:	f107 0308 	add.w	r3, r7, #8
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff fd5e 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	2103      	movs	r1, #3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fa17 	bl	800b2f0 <SDMMC_GetCmdResp6>
 800aec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aec4:	69fb      	ldr	r3, [r7, #28]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3720      	adds	r7, #32
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b088      	sub	sp, #32
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aedc:	230d      	movs	r3, #13
 800aede:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aee6:	2300      	movs	r3, #0
 800aee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aeee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aef0:	f107 0308 	add.w	r3, r7, #8
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff fd3c 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aefc:	f241 3288 	movw	r2, #5000	; 0x1388
 800af00:	210d      	movs	r1, #13
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f878 	bl	800aff8 <SDMMC_GetCmdResp1>
 800af08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af0a:	69fb      	ldr	r3, [r7, #28]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3720      	adds	r7, #32
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b088      	sub	sp, #32
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800af20:	230d      	movs	r3, #13
 800af22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af2a:	2300      	movs	r3, #0
 800af2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af34:	f107 0308 	add.w	r3, r7, #8
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f7ff fd1a 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800af40:	f241 3288 	movw	r2, #5000	; 0x1388
 800af44:	210d      	movs	r1, #13
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f856 	bl	800aff8 <SDMMC_GetCmdResp1>
 800af4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af4e:	69fb      	ldr	r3, [r7, #28]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3720      	adds	r7, #32
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800af60:	2300      	movs	r3, #0
 800af62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800af64:	230b      	movs	r3, #11
 800af66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af6e:	2300      	movs	r3, #0
 800af70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af78:	f107 0308 	add.w	r3, r7, #8
 800af7c:	4619      	mov	r1, r3
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff fcf8 	bl	800a974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800af84:	f241 3288 	movw	r2, #5000	; 0x1388
 800af88:	210b      	movs	r1, #11
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f834 	bl	800aff8 <SDMMC_GetCmdResp1>
 800af90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af92:	69fb      	ldr	r3, [r7, #28]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3720      	adds	r7, #32
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800afa4:	4b11      	ldr	r3, [pc, #68]	; (800afec <SDMMC_GetCmdError+0x50>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a11      	ldr	r2, [pc, #68]	; (800aff0 <SDMMC_GetCmdError+0x54>)
 800afaa:	fba2 2303 	umull	r2, r3, r2, r3
 800afae:	0a5b      	lsrs	r3, r3, #9
 800afb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afb4:	fb02 f303 	mul.w	r3, r2, r3
 800afb8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	1e5a      	subs	r2, r3, #1
 800afbe:	60fa      	str	r2, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d102      	bne.n	800afca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afc8:	e009      	b.n	800afde <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0f1      	beq.n	800afba <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a06      	ldr	r2, [pc, #24]	; (800aff4 <SDMMC_GetCmdError+0x58>)
 800afda:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3714      	adds	r7, #20
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	24000000 	.word	0x24000000
 800aff0:	10624dd3 	.word	0x10624dd3
 800aff4:	002000c5 	.word	0x002000c5

0800aff8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b088      	sub	sp, #32
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	460b      	mov	r3, r1
 800b002:	607a      	str	r2, [r7, #4]
 800b004:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b006:	4b70      	ldr	r3, [pc, #448]	; (800b1c8 <SDMMC_GetCmdResp1+0x1d0>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a70      	ldr	r2, [pc, #448]	; (800b1cc <SDMMC_GetCmdResp1+0x1d4>)
 800b00c:	fba2 2303 	umull	r2, r3, r2, r3
 800b010:	0a5a      	lsrs	r2, r3, #9
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	fb02 f303 	mul.w	r3, r2, r3
 800b018:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	1e5a      	subs	r2, r3, #1
 800b01e:	61fa      	str	r2, [r7, #28]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d102      	bne.n	800b02a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b028:	e0c9      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b02e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b030:	69ba      	ldr	r2, [r7, #24]
 800b032:	4b67      	ldr	r3, [pc, #412]	; (800b1d0 <SDMMC_GetCmdResp1+0x1d8>)
 800b034:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b036:	2b00      	cmp	r3, #0
 800b038:	d0ef      	beq.n	800b01a <SDMMC_GetCmdResp1+0x22>
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1ea      	bne.n	800b01a <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d004      	beq.n	800b05a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2204      	movs	r2, #4
 800b054:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b056:	2304      	movs	r3, #4
 800b058:	e0b1      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05e:	f003 0301 	and.w	r3, r3, #1
 800b062:	2b00      	cmp	r3, #0
 800b064:	d004      	beq.n	800b070 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2201      	movs	r2, #1
 800b06a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e0a6      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4a58      	ldr	r2, [pc, #352]	; (800b1d4 <SDMMC_GetCmdResp1+0x1dc>)
 800b074:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f7ff fca6 	bl	800a9c8 <SDMMC_GetCommandResponse>
 800b07c:	4603      	mov	r3, r0
 800b07e:	461a      	mov	r2, r3
 800b080:	7afb      	ldrb	r3, [r7, #11]
 800b082:	4293      	cmp	r3, r2
 800b084:	d001      	beq.n	800b08a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b086:	2301      	movs	r3, #1
 800b088:	e099      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b08a:	2100      	movs	r1, #0
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f7ff fca8 	bl	800a9e2 <SDMMC_GetResponse>
 800b092:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b094:	697a      	ldr	r2, [r7, #20]
 800b096:	4b50      	ldr	r3, [pc, #320]	; (800b1d8 <SDMMC_GetCmdResp1+0x1e0>)
 800b098:	4013      	ands	r3, r2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d101      	bne.n	800b0a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	e08d      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	da02      	bge.n	800b0ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b0a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0ac:	e087      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b0b8:	2340      	movs	r3, #64	; 0x40
 800b0ba:	e080      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b0c6:	2380      	movs	r3, #128	; 0x80
 800b0c8:	e079      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b0d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0d8:	e071      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b0e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0e8:	e069      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d002      	beq.n	800b0fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b0f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0f8:	e061      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b104:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b108:	e059      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b118:	e051      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b128:	e049      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b134:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b138:	e041      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b148:	e039      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b158:	e031      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b164:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b168:	e029      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b174:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b178:	e021      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b184:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b188:	e019      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b194:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b198:	e011      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b1a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b1a8:	e009      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f003 0308 	and.w	r3, r3, #8
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b1b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b1b8:	e001      	b.n	800b1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b1ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3720      	adds	r7, #32
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	24000000 	.word	0x24000000
 800b1cc:	10624dd3 	.word	0x10624dd3
 800b1d0:	00200045 	.word	0x00200045
 800b1d4:	002000c5 	.word	0x002000c5
 800b1d8:	fdffe008 	.word	0xfdffe008

0800b1dc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1e4:	4b1f      	ldr	r3, [pc, #124]	; (800b264 <SDMMC_GetCmdResp2+0x88>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a1f      	ldr	r2, [pc, #124]	; (800b268 <SDMMC_GetCmdResp2+0x8c>)
 800b1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ee:	0a5b      	lsrs	r3, r3, #9
 800b1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f4:	fb02 f303 	mul.w	r3, r2, r3
 800b1f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	1e5a      	subs	r2, r3, #1
 800b1fe:	60fa      	str	r2, [r7, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d102      	bne.n	800b20a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b208:	e026      	b.n	800b258 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b216:	2b00      	cmp	r3, #0
 800b218:	d0ef      	beq.n	800b1fa <SDMMC_GetCmdResp2+0x1e>
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1ea      	bne.n	800b1fa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b228:	f003 0304 	and.w	r3, r3, #4
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d004      	beq.n	800b23a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2204      	movs	r2, #4
 800b234:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b236:	2304      	movs	r3, #4
 800b238:	e00e      	b.n	800b258 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	2b00      	cmp	r3, #0
 800b244:	d004      	beq.n	800b250 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e003      	b.n	800b258 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a06      	ldr	r2, [pc, #24]	; (800b26c <SDMMC_GetCmdResp2+0x90>)
 800b254:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	24000000 	.word	0x24000000
 800b268:	10624dd3 	.word	0x10624dd3
 800b26c:	002000c5 	.word	0x002000c5

0800b270 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b278:	4b1a      	ldr	r3, [pc, #104]	; (800b2e4 <SDMMC_GetCmdResp3+0x74>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a1a      	ldr	r2, [pc, #104]	; (800b2e8 <SDMMC_GetCmdResp3+0x78>)
 800b27e:	fba2 2303 	umull	r2, r3, r2, r3
 800b282:	0a5b      	lsrs	r3, r3, #9
 800b284:	f241 3288 	movw	r2, #5000	; 0x1388
 800b288:	fb02 f303 	mul.w	r3, r2, r3
 800b28c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	1e5a      	subs	r2, r3, #1
 800b292:	60fa      	str	r2, [r7, #12]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d102      	bne.n	800b29e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b298:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b29c:	e01b      	b.n	800b2d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0ef      	beq.n	800b28e <SDMMC_GetCmdResp3+0x1e>
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1ea      	bne.n	800b28e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2bc:	f003 0304 	and.w	r3, r3, #4
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d004      	beq.n	800b2ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2204      	movs	r2, #4
 800b2c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2ca:	2304      	movs	r3, #4
 800b2cc:	e003      	b.n	800b2d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a06      	ldr	r2, [pc, #24]	; (800b2ec <SDMMC_GetCmdResp3+0x7c>)
 800b2d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	24000000 	.word	0x24000000
 800b2e8:	10624dd3 	.word	0x10624dd3
 800b2ec:	002000c5 	.word	0x002000c5

0800b2f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b088      	sub	sp, #32
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2fe:	4b35      	ldr	r3, [pc, #212]	; (800b3d4 <SDMMC_GetCmdResp6+0xe4>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a35      	ldr	r2, [pc, #212]	; (800b3d8 <SDMMC_GetCmdResp6+0xe8>)
 800b304:	fba2 2303 	umull	r2, r3, r2, r3
 800b308:	0a5b      	lsrs	r3, r3, #9
 800b30a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b30e:	fb02 f303 	mul.w	r3, r2, r3
 800b312:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	1e5a      	subs	r2, r3, #1
 800b318:	61fa      	str	r2, [r7, #28]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d102      	bne.n	800b324 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b31e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b322:	e052      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b328:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b330:	2b00      	cmp	r3, #0
 800b332:	d0ef      	beq.n	800b314 <SDMMC_GetCmdResp6+0x24>
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1ea      	bne.n	800b314 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b342:	f003 0304 	and.w	r3, r3, #4
 800b346:	2b00      	cmp	r3, #0
 800b348:	d004      	beq.n	800b354 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2204      	movs	r2, #4
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b350:	2304      	movs	r3, #4
 800b352:	e03a      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d004      	beq.n	800b36a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2201      	movs	r2, #1
 800b364:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b366:	2301      	movs	r3, #1
 800b368:	e02f      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f7ff fb2c 	bl	800a9c8 <SDMMC_GetCommandResponse>
 800b370:	4603      	mov	r3, r0
 800b372:	461a      	mov	r2, r3
 800b374:	7afb      	ldrb	r3, [r7, #11]
 800b376:	4293      	cmp	r3, r2
 800b378:	d001      	beq.n	800b37e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e025      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	4a16      	ldr	r2, [pc, #88]	; (800b3dc <SDMMC_GetCmdResp6+0xec>)
 800b382:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b384:	2100      	movs	r1, #0
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f7ff fb2b 	bl	800a9e2 <SDMMC_GetResponse>
 800b38c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d106      	bne.n	800b3a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	0c1b      	lsrs	r3, r3, #16
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	e011      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b3b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3b4:	e009      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d002      	beq.n	800b3c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3c4:	e001      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b3c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3720      	adds	r7, #32
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	24000000 	.word	0x24000000
 800b3d8:	10624dd3 	.word	0x10624dd3
 800b3dc:	002000c5 	.word	0x002000c5

0800b3e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3e8:	4b22      	ldr	r3, [pc, #136]	; (800b474 <SDMMC_GetCmdResp7+0x94>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a22      	ldr	r2, [pc, #136]	; (800b478 <SDMMC_GetCmdResp7+0x98>)
 800b3ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b3f2:	0a5b      	lsrs	r3, r3, #9
 800b3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f8:	fb02 f303 	mul.w	r3, r2, r3
 800b3fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	1e5a      	subs	r2, r3, #1
 800b402:	60fa      	str	r2, [r7, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d102      	bne.n	800b40e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b408:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b40c:	e02c      	b.n	800b468 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b412:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d0ef      	beq.n	800b3fe <SDMMC_GetCmdResp7+0x1e>
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1ea      	bne.n	800b3fe <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42c:	f003 0304 	and.w	r3, r3, #4
 800b430:	2b00      	cmp	r3, #0
 800b432:	d004      	beq.n	800b43e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2204      	movs	r2, #4
 800b438:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b43a:	2304      	movs	r3, #4
 800b43c:	e014      	b.n	800b468 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b442:	f003 0301 	and.w	r3, r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	d004      	beq.n	800b454 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b450:	2301      	movs	r3, #1
 800b452:	e009      	b.n	800b468 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2240      	movs	r2, #64	; 0x40
 800b464:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b466:	2300      	movs	r3, #0

}
 800b468:	4618      	mov	r0, r3
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr
 800b474:	24000000 	.word	0x24000000
 800b478:	10624dd3 	.word	0x10624dd3

0800b47c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b47c:	b084      	sub	sp, #16
 800b47e:	b580      	push	{r7, lr}
 800b480:	b084      	sub	sp, #16
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	f107 001c 	add.w	r0, r7, #28
 800b48a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	2b01      	cmp	r3, #1
 800b492:	d120      	bne.n	800b4d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b498:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68da      	ldr	r2, [r3, #12]
 800b4a4:	4b25      	ldr	r3, [pc, #148]	; (800b53c <USB_CoreInit+0xc0>)
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b4b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d105      	bne.n	800b4ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 fabe 	bl	800ca4c <USB_CoreReset>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	73fb      	strb	r3, [r7, #15]
 800b4d4:	e01a      	b.n	800b50c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 fab2 	bl	800ca4c <USB_CoreReset>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b4ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d106      	bne.n	800b500 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	639a      	str	r2, [r3, #56]	; 0x38
 800b4fe:	e005      	b.n	800b50c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b504:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d10b      	bne.n	800b52a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	f043 0206 	orr.w	r2, r3, #6
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f043 0220 	orr.w	r2, r3, #32
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b536:	b004      	add	sp, #16
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	ffbdffbf 	.word	0xffbdffbf

0800b540 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b540:	b480      	push	{r7}
 800b542:	b087      	sub	sp, #28
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	4613      	mov	r3, r2
 800b54c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b02      	cmp	r3, #2
 800b552:	d165      	bne.n	800b620 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	4a41      	ldr	r2, [pc, #260]	; (800b65c <USB_SetTurnaroundTime+0x11c>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d906      	bls.n	800b56a <USB_SetTurnaroundTime+0x2a>
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	4a40      	ldr	r2, [pc, #256]	; (800b660 <USB_SetTurnaroundTime+0x120>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d802      	bhi.n	800b56a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b564:	230f      	movs	r3, #15
 800b566:	617b      	str	r3, [r7, #20]
 800b568:	e062      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	4a3c      	ldr	r2, [pc, #240]	; (800b660 <USB_SetTurnaroundTime+0x120>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d906      	bls.n	800b580 <USB_SetTurnaroundTime+0x40>
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	4a3b      	ldr	r2, [pc, #236]	; (800b664 <USB_SetTurnaroundTime+0x124>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d802      	bhi.n	800b580 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b57a:	230e      	movs	r3, #14
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	e057      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	4a38      	ldr	r2, [pc, #224]	; (800b664 <USB_SetTurnaroundTime+0x124>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d906      	bls.n	800b596 <USB_SetTurnaroundTime+0x56>
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	4a37      	ldr	r2, [pc, #220]	; (800b668 <USB_SetTurnaroundTime+0x128>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d802      	bhi.n	800b596 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b590:	230d      	movs	r3, #13
 800b592:	617b      	str	r3, [r7, #20]
 800b594:	e04c      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	4a33      	ldr	r2, [pc, #204]	; (800b668 <USB_SetTurnaroundTime+0x128>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d906      	bls.n	800b5ac <USB_SetTurnaroundTime+0x6c>
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	4a32      	ldr	r2, [pc, #200]	; (800b66c <USB_SetTurnaroundTime+0x12c>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d802      	bhi.n	800b5ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	e041      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	4a2f      	ldr	r2, [pc, #188]	; (800b66c <USB_SetTurnaroundTime+0x12c>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d906      	bls.n	800b5c2 <USB_SetTurnaroundTime+0x82>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	4a2e      	ldr	r2, [pc, #184]	; (800b670 <USB_SetTurnaroundTime+0x130>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d802      	bhi.n	800b5c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b5bc:	230b      	movs	r3, #11
 800b5be:	617b      	str	r3, [r7, #20]
 800b5c0:	e036      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	4a2a      	ldr	r2, [pc, #168]	; (800b670 <USB_SetTurnaroundTime+0x130>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d906      	bls.n	800b5d8 <USB_SetTurnaroundTime+0x98>
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	4a29      	ldr	r2, [pc, #164]	; (800b674 <USB_SetTurnaroundTime+0x134>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d802      	bhi.n	800b5d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b5d2:	230a      	movs	r3, #10
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	e02b      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	4a26      	ldr	r2, [pc, #152]	; (800b674 <USB_SetTurnaroundTime+0x134>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d906      	bls.n	800b5ee <USB_SetTurnaroundTime+0xae>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	4a25      	ldr	r2, [pc, #148]	; (800b678 <USB_SetTurnaroundTime+0x138>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d802      	bhi.n	800b5ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b5e8:	2309      	movs	r3, #9
 800b5ea:	617b      	str	r3, [r7, #20]
 800b5ec:	e020      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	4a21      	ldr	r2, [pc, #132]	; (800b678 <USB_SetTurnaroundTime+0x138>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d906      	bls.n	800b604 <USB_SetTurnaroundTime+0xc4>
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	4a20      	ldr	r2, [pc, #128]	; (800b67c <USB_SetTurnaroundTime+0x13c>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d802      	bhi.n	800b604 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b5fe:	2308      	movs	r3, #8
 800b600:	617b      	str	r3, [r7, #20]
 800b602:	e015      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	4a1d      	ldr	r2, [pc, #116]	; (800b67c <USB_SetTurnaroundTime+0x13c>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d906      	bls.n	800b61a <USB_SetTurnaroundTime+0xda>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	4a1c      	ldr	r2, [pc, #112]	; (800b680 <USB_SetTurnaroundTime+0x140>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d802      	bhi.n	800b61a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b614:	2307      	movs	r3, #7
 800b616:	617b      	str	r3, [r7, #20]
 800b618:	e00a      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b61a:	2306      	movs	r3, #6
 800b61c:	617b      	str	r3, [r7, #20]
 800b61e:	e007      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b620:	79fb      	ldrb	r3, [r7, #7]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d102      	bne.n	800b62c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b626:	2309      	movs	r3, #9
 800b628:	617b      	str	r3, [r7, #20]
 800b62a:	e001      	b.n	800b630 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b62c:	2309      	movs	r3, #9
 800b62e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	029b      	lsls	r3, r3, #10
 800b644:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b648:	431a      	orrs	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	371c      	adds	r7, #28
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	00d8acbf 	.word	0x00d8acbf
 800b660:	00e4e1bf 	.word	0x00e4e1bf
 800b664:	00f423ff 	.word	0x00f423ff
 800b668:	0106737f 	.word	0x0106737f
 800b66c:	011a499f 	.word	0x011a499f
 800b670:	01312cff 	.word	0x01312cff
 800b674:	014ca43f 	.word	0x014ca43f
 800b678:	016e35ff 	.word	0x016e35ff
 800b67c:	01a6ab1f 	.word	0x01a6ab1f
 800b680:	01e847ff 	.word	0x01e847ff

0800b684 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	f043 0201 	orr.w	r2, r3, #1
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b083      	sub	sp, #12
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	f023 0201 	bic.w	r2, r3, #1
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b6e0:	78fb      	ldrb	r3, [r7, #3]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d106      	bne.n	800b6f4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	60da      	str	r2, [r3, #12]
 800b6f2:	e00b      	b.n	800b70c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b6f4:	78fb      	ldrb	r3, [r7, #3]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d106      	bne.n	800b708 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	60da      	str	r2, [r3, #12]
 800b706:	e001      	b.n	800b70c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	e003      	b.n	800b714 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b70c:	2032      	movs	r0, #50	; 0x32
 800b70e:	f7f5 ff4f 	bl	80015b0 <HAL_Delay>

  return HAL_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b71c:	b084      	sub	sp, #16
 800b71e:	b580      	push	{r7, lr}
 800b720:	b086      	sub	sp, #24
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b72a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b736:	2300      	movs	r3, #0
 800b738:	613b      	str	r3, [r7, #16]
 800b73a:	e009      	b.n	800b750 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	3340      	adds	r3, #64	; 0x40
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4413      	add	r3, r2
 800b746:	2200      	movs	r2, #0
 800b748:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	3301      	adds	r3, #1
 800b74e:	613b      	str	r3, [r7, #16]
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	2b0e      	cmp	r3, #14
 800b754:	d9f2      	bls.n	800b73c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d11c      	bne.n	800b796 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b76a:	f043 0302 	orr.w	r3, r3, #2
 800b76e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b774:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	e005      	b.n	800b7a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7bc:	461a      	mov	r2, r3
 800b7be:	680b      	ldr	r3, [r1, #0]
 800b7c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d10c      	bne.n	800b7e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d104      	bne.n	800b7d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f949 	bl	800ba68 <USB_SetDevSpeed>
 800b7d6:	e008      	b.n	800b7ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b7d8:	2101      	movs	r1, #1
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f944 	bl	800ba68 <USB_SetDevSpeed>
 800b7e0:	e003      	b.n	800b7ea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b7e2:	2103      	movs	r1, #3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f93f 	bl	800ba68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b7ea:	2110      	movs	r1, #16
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f8f3 	bl	800b9d8 <USB_FlushTxFifo>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d001      	beq.n	800b7fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f911 	bl	800ba24 <USB_FlushRxFifo>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b812:	461a      	mov	r2, r3
 800b814:	2300      	movs	r3, #0
 800b816:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81e:	461a      	mov	r2, r3
 800b820:	2300      	movs	r3, #0
 800b822:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b82a:	461a      	mov	r2, r3
 800b82c:	2300      	movs	r3, #0
 800b82e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b830:	2300      	movs	r3, #0
 800b832:	613b      	str	r3, [r7, #16]
 800b834:	e043      	b.n	800b8be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	015a      	lsls	r2, r3, #5
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	4413      	add	r3, r2
 800b83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b84c:	d118      	bne.n	800b880 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d10a      	bne.n	800b86a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	015a      	lsls	r2, r3, #5
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	4413      	add	r3, r2
 800b85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b860:	461a      	mov	r2, r3
 800b862:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	e013      	b.n	800b892 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	4413      	add	r3, r2
 800b872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b876:	461a      	mov	r2, r3
 800b878:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b87c:	6013      	str	r3, [r2, #0]
 800b87e:	e008      	b.n	800b892 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	015a      	lsls	r2, r3, #5
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4413      	add	r3, r2
 800b888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b88c:	461a      	mov	r2, r3
 800b88e:	2300      	movs	r3, #0
 800b890:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	015a      	lsls	r2, r3, #5
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	4413      	add	r3, r2
 800b89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b89e:	461a      	mov	r2, r3
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	015a      	lsls	r2, r3, #5
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b8b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	613b      	str	r3, [r7, #16]
 800b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d3b7      	bcc.n	800b836 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	613b      	str	r3, [r7, #16]
 800b8ca:	e043      	b.n	800b954 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	015a      	lsls	r2, r3, #5
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8e2:	d118      	bne.n	800b916 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	015a      	lsls	r2, r3, #5
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	e013      	b.n	800b928 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	015a      	lsls	r2, r3, #5
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	4413      	add	r3, r2
 800b908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b90c:	461a      	mov	r2, r3
 800b90e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b912:	6013      	str	r3, [r2, #0]
 800b914:	e008      	b.n	800b928 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	015a      	lsls	r2, r3, #5
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	4413      	add	r3, r2
 800b91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b922:	461a      	mov	r2, r3
 800b924:	2300      	movs	r3, #0
 800b926:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	015a      	lsls	r2, r3, #5
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	4413      	add	r3, r2
 800b930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b934:	461a      	mov	r2, r3
 800b936:	2300      	movs	r3, #0
 800b938:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	015a      	lsls	r2, r3, #5
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	4413      	add	r3, r2
 800b942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b946:	461a      	mov	r2, r3
 800b948:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b94c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	3301      	adds	r3, #1
 800b952:	613b      	str	r3, [r7, #16]
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	693a      	ldr	r2, [r7, #16]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d3b7      	bcc.n	800b8cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b96a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b96e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b97c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	2b00      	cmp	r3, #0
 800b982:	d105      	bne.n	800b990 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	f043 0210 	orr.w	r2, r3, #16
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	699a      	ldr	r2, [r3, #24]
 800b994:	4b0e      	ldr	r3, [pc, #56]	; (800b9d0 <USB_DevInit+0x2b4>)
 800b996:	4313      	orrs	r3, r2
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d005      	beq.n	800b9ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	f043 0208 	orr.w	r2, r3, #8
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b9ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d105      	bne.n	800b9c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	699a      	ldr	r2, [r3, #24]
 800b9b8:	4b06      	ldr	r3, [pc, #24]	; (800b9d4 <USB_DevInit+0x2b8>)
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9cc:	b004      	add	sp, #16
 800b9ce:	4770      	bx	lr
 800b9d0:	803c3800 	.word	0x803c3800
 800b9d4:	40000004 	.word	0x40000004

0800b9d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	019b      	lsls	r3, r3, #6
 800b9ea:	f043 0220 	orr.w	r2, r3, #32
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	4a09      	ldr	r2, [pc, #36]	; (800ba20 <USB_FlushTxFifo+0x48>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d901      	bls.n	800ba04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ba00:	2303      	movs	r3, #3
 800ba02:	e006      	b.n	800ba12 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	691b      	ldr	r3, [r3, #16]
 800ba08:	f003 0320 	and.w	r3, r3, #32
 800ba0c:	2b20      	cmp	r3, #32
 800ba0e:	d0f0      	beq.n	800b9f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	00030d40 	.word	0x00030d40

0800ba24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2210      	movs	r2, #16
 800ba34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	60fb      	str	r3, [r7, #12]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	4a09      	ldr	r2, [pc, #36]	; (800ba64 <USB_FlushRxFifo+0x40>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d901      	bls.n	800ba48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e006      	b.n	800ba56 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	f003 0310 	and.w	r3, r3, #16
 800ba50:	2b10      	cmp	r3, #16
 800ba52:	d0f0      	beq.n	800ba36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	00030d40 	.word	0x00030d40

0800ba68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	68f9      	ldr	r1, [r7, #12]
 800ba84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b087      	sub	sp, #28
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	f003 0306 	and.w	r3, r3, #6
 800bab2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d102      	bne.n	800bac0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800baba:	2300      	movs	r3, #0
 800babc:	75fb      	strb	r3, [r7, #23]
 800babe:	e00a      	b.n	800bad6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	d002      	beq.n	800bacc <USB_GetDevSpeed+0x32>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2b06      	cmp	r3, #6
 800baca:	d102      	bne.n	800bad2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bacc:	2302      	movs	r3, #2
 800bace:	75fb      	strb	r3, [r7, #23]
 800bad0:	e001      	b.n	800bad6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bad2:	230f      	movs	r3, #15
 800bad4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	371c      	adds	r7, #28
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	785b      	ldrb	r3, [r3, #1]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d139      	bne.n	800bb74 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb06:	69da      	ldr	r2, [r3, #28]
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	f003 030f 	and.w	r3, r3, #15
 800bb10:	2101      	movs	r1, #1
 800bb12:	fa01 f303 	lsl.w	r3, r1, r3
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	68f9      	ldr	r1, [r7, #12]
 800bb1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	015a      	lsls	r2, r3, #5
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d153      	bne.n	800bbe0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	015a      	lsls	r2, r3, #5
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	78db      	ldrb	r3, [r3, #3]
 800bb52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	059b      	lsls	r3, r3, #22
 800bb5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb5c:	431a      	orrs	r2, r3
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	0159      	lsls	r1, r3, #5
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	440b      	add	r3, r1
 800bb66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4b20      	ldr	r3, [pc, #128]	; (800bbf0 <USB_ActivateEndpoint+0x10c>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	600b      	str	r3, [r1, #0]
 800bb72:	e035      	b.n	800bbe0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7a:	69da      	ldr	r2, [r3, #28]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	f003 030f 	and.w	r3, r3, #15
 800bb84:	2101      	movs	r1, #1
 800bb86:	fa01 f303 	lsl.w	r3, r1, r3
 800bb8a:	041b      	lsls	r3, r3, #16
 800bb8c:	68f9      	ldr	r1, [r7, #12]
 800bb8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb92:	4313      	orrs	r3, r2
 800bb94:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	015a      	lsls	r2, r3, #5
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d119      	bne.n	800bbe0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	015a      	lsls	r2, r3, #5
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	78db      	ldrb	r3, [r3, #3]
 800bbc6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	0159      	lsls	r1, r3, #5
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	440b      	add	r3, r1
 800bbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4b05      	ldr	r3, [pc, #20]	; (800bbf0 <USB_ActivateEndpoint+0x10c>)
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	10008000 	.word	0x10008000

0800bbf4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	785b      	ldrb	r3, [r3, #1]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d161      	bne.n	800bcd4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc26:	d11f      	bne.n	800bc68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	015a      	lsls	r2, r3, #5
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	4413      	add	r3, r2
 800bc30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	0151      	lsls	r1, r2, #5
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	440a      	add	r2, r1
 800bc3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	015a      	lsls	r2, r3, #5
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4413      	add	r3, r2
 800bc50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	0151      	lsls	r1, r2, #5
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	440a      	add	r2, r1
 800bc5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	f003 030f 	and.w	r3, r3, #15
 800bc78:	2101      	movs	r1, #1
 800bc7a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	43db      	mvns	r3, r3
 800bc82:	68f9      	ldr	r1, [r7, #12]
 800bc84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc88:	4013      	ands	r3, r2
 800bc8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc92:	69da      	ldr	r2, [r3, #28]
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	f003 030f 	and.w	r3, r3, #15
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	fa01 f303 	lsl.w	r3, r1, r3
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	43db      	mvns	r3, r3
 800bca6:	68f9      	ldr	r1, [r7, #12]
 800bca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcac:	4013      	ands	r3, r2
 800bcae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	015a      	lsls	r2, r3, #5
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	0159      	lsls	r1, r3, #5
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	440b      	add	r3, r1
 800bcc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcca:	4619      	mov	r1, r3
 800bccc:	4b35      	ldr	r3, [pc, #212]	; (800bda4 <USB_DeactivateEndpoint+0x1b0>)
 800bcce:	4013      	ands	r3, r2
 800bcd0:	600b      	str	r3, [r1, #0]
 800bcd2:	e060      	b.n	800bd96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	015a      	lsls	r2, r3, #5
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcea:	d11f      	bne.n	800bd2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	015a      	lsls	r2, r3, #5
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	0151      	lsls	r1, r2, #5
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	440a      	add	r2, r1
 800bd02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	015a      	lsls	r2, r3, #5
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	4413      	add	r3, r2
 800bd14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	0151      	lsls	r1, r2, #5
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	440a      	add	r2, r1
 800bd22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	f003 030f 	and.w	r3, r3, #15
 800bd3c:	2101      	movs	r1, #1
 800bd3e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd42:	041b      	lsls	r3, r3, #16
 800bd44:	43db      	mvns	r3, r3
 800bd46:	68f9      	ldr	r1, [r7, #12]
 800bd48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd56:	69da      	ldr	r2, [r3, #28]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	f003 030f 	and.w	r3, r3, #15
 800bd60:	2101      	movs	r1, #1
 800bd62:	fa01 f303 	lsl.w	r3, r1, r3
 800bd66:	041b      	lsls	r3, r3, #16
 800bd68:	43db      	mvns	r3, r3
 800bd6a:	68f9      	ldr	r1, [r7, #12]
 800bd6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd70:	4013      	ands	r3, r2
 800bd72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	015a      	lsls	r2, r3, #5
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	0159      	lsls	r1, r3, #5
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	440b      	add	r3, r1
 800bd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4b05      	ldr	r3, [pc, #20]	; (800bda8 <USB_DeactivateEndpoint+0x1b4>)
 800bd92:	4013      	ands	r3, r2
 800bd94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3714      	adds	r7, #20
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr
 800bda4:	ec337800 	.word	0xec337800
 800bda8:	eff37800 	.word	0xeff37800

0800bdac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b08a      	sub	sp, #40	; 0x28
 800bdb0:	af02      	add	r7, sp, #8
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	785b      	ldrb	r3, [r3, #1]
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	f040 8163 	bne.w	800c094 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	695b      	ldr	r3, [r3, #20]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d132      	bne.n	800be3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	015a      	lsls	r2, r3, #5
 800bdda:	69fb      	ldr	r3, [r7, #28]
 800bddc:	4413      	add	r3, r2
 800bdde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bde2:	691a      	ldr	r2, [r3, #16]
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	0159      	lsls	r1, r3, #5
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	440b      	add	r3, r1
 800bdec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4ba5      	ldr	r3, [pc, #660]	; (800c088 <USB_EPStartXfer+0x2dc>)
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	015a      	lsls	r2, r3, #5
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	4413      	add	r3, r2
 800be00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	69ba      	ldr	r2, [r7, #24]
 800be08:	0151      	lsls	r1, r2, #5
 800be0a:	69fa      	ldr	r2, [r7, #28]
 800be0c:	440a      	add	r2, r1
 800be0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	015a      	lsls	r2, r3, #5
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	4413      	add	r3, r2
 800be20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be24:	691a      	ldr	r2, [r3, #16]
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	0159      	lsls	r1, r3, #5
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	440b      	add	r3, r1
 800be2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be32:	4619      	mov	r1, r3
 800be34:	4b95      	ldr	r3, [pc, #596]	; (800c08c <USB_EPStartXfer+0x2e0>)
 800be36:	4013      	ands	r3, r2
 800be38:	610b      	str	r3, [r1, #16]
 800be3a:	e074      	b.n	800bf26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	015a      	lsls	r2, r3, #5
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	4413      	add	r3, r2
 800be44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be48:	691a      	ldr	r2, [r3, #16]
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	0159      	lsls	r1, r3, #5
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	440b      	add	r3, r1
 800be52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be56:	4619      	mov	r1, r3
 800be58:	4b8c      	ldr	r3, [pc, #560]	; (800c08c <USB_EPStartXfer+0x2e0>)
 800be5a:	4013      	ands	r3, r2
 800be5c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	015a      	lsls	r2, r3, #5
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	4413      	add	r3, r2
 800be66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6a:	691a      	ldr	r2, [r3, #16]
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	0159      	lsls	r1, r3, #5
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	440b      	add	r3, r1
 800be74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be78:	4619      	mov	r1, r3
 800be7a:	4b83      	ldr	r3, [pc, #524]	; (800c088 <USB_EPStartXfer+0x2dc>)
 800be7c:	4013      	ands	r3, r2
 800be7e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	015a      	lsls	r2, r3, #5
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	4413      	add	r3, r2
 800be88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be8c:	691a      	ldr	r2, [r3, #16]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	6959      	ldr	r1, [r3, #20]
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	440b      	add	r3, r1
 800be98:	1e59      	subs	r1, r3, #1
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	fbb1 f3f3 	udiv	r3, r1, r3
 800bea2:	04d9      	lsls	r1, r3, #19
 800bea4:	4b7a      	ldr	r3, [pc, #488]	; (800c090 <USB_EPStartXfer+0x2e4>)
 800bea6:	400b      	ands	r3, r1
 800bea8:	69b9      	ldr	r1, [r7, #24]
 800beaa:	0148      	lsls	r0, r1, #5
 800beac:	69f9      	ldr	r1, [r7, #28]
 800beae:	4401      	add	r1, r0
 800beb0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800beb4:	4313      	orrs	r3, r2
 800beb6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	015a      	lsls	r2, r3, #5
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec4:	691a      	ldr	r2, [r3, #16]
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	695b      	ldr	r3, [r3, #20]
 800beca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bece:	69b9      	ldr	r1, [r7, #24]
 800bed0:	0148      	lsls	r0, r1, #5
 800bed2:	69f9      	ldr	r1, [r7, #28]
 800bed4:	4401      	add	r1, r0
 800bed6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800beda:	4313      	orrs	r3, r2
 800bedc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	78db      	ldrb	r3, [r3, #3]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d11f      	bne.n	800bf26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	015a      	lsls	r2, r3, #5
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	4413      	add	r3, r2
 800beee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	0151      	lsls	r1, r2, #5
 800bef8:	69fa      	ldr	r2, [r7, #28]
 800befa:	440a      	add	r2, r1
 800befc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bf04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	015a      	lsls	r2, r3, #5
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	0151      	lsls	r1, r2, #5
 800bf18:	69fa      	ldr	r2, [r7, #28]
 800bf1a:	440a      	add	r2, r1
 800bf1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bf26:	79fb      	ldrb	r3, [r7, #7]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d14b      	bne.n	800bfc4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d009      	beq.n	800bf48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	015a      	lsls	r2, r3, #5
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf40:	461a      	mov	r2, r3
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	78db      	ldrb	r3, [r3, #3]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d128      	bne.n	800bfa2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d110      	bne.n	800bf82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	015a      	lsls	r2, r3, #5
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	4413      	add	r3, r2
 800bf68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	69ba      	ldr	r2, [r7, #24]
 800bf70:	0151      	lsls	r1, r2, #5
 800bf72:	69fa      	ldr	r2, [r7, #28]
 800bf74:	440a      	add	r2, r1
 800bf76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf7e:	6013      	str	r3, [r2, #0]
 800bf80:	e00f      	b.n	800bfa2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	015a      	lsls	r2, r3, #5
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	4413      	add	r3, r2
 800bf8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	69ba      	ldr	r2, [r7, #24]
 800bf92:	0151      	lsls	r1, r2, #5
 800bf94:	69fa      	ldr	r2, [r7, #28]
 800bf96:	440a      	add	r2, r1
 800bf98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfa0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	015a      	lsls	r2, r3, #5
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	69ba      	ldr	r2, [r7, #24]
 800bfb2:	0151      	lsls	r1, r2, #5
 800bfb4:	69fa      	ldr	r2, [r7, #28]
 800bfb6:	440a      	add	r2, r1
 800bfb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfc0:	6013      	str	r3, [r2, #0]
 800bfc2:	e133      	b.n	800c22c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	015a      	lsls	r2, r3, #5
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	4413      	add	r3, r2
 800bfcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	69ba      	ldr	r2, [r7, #24]
 800bfd4:	0151      	lsls	r1, r2, #5
 800bfd6:	69fa      	ldr	r2, [r7, #28]
 800bfd8:	440a      	add	r2, r1
 800bfda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfe2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	78db      	ldrb	r3, [r3, #3]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d015      	beq.n	800c018 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	695b      	ldr	r3, [r3, #20]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f000 811b 	beq.w	800c22c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	f003 030f 	and.w	r3, r3, #15
 800c006:	2101      	movs	r1, #1
 800c008:	fa01 f303 	lsl.w	r3, r1, r3
 800c00c:	69f9      	ldr	r1, [r7, #28]
 800c00e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c012:	4313      	orrs	r3, r2
 800c014:	634b      	str	r3, [r1, #52]	; 0x34
 800c016:	e109      	b.n	800c22c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c024:	2b00      	cmp	r3, #0
 800c026:	d110      	bne.n	800c04a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	015a      	lsls	r2, r3, #5
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	4413      	add	r3, r2
 800c030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	69ba      	ldr	r2, [r7, #24]
 800c038:	0151      	lsls	r1, r2, #5
 800c03a:	69fa      	ldr	r2, [r7, #28]
 800c03c:	440a      	add	r2, r1
 800c03e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c042:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c046:	6013      	str	r3, [r2, #0]
 800c048:	e00f      	b.n	800c06a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	015a      	lsls	r2, r3, #5
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	4413      	add	r3, r2
 800c052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	69ba      	ldr	r2, [r7, #24]
 800c05a:	0151      	lsls	r1, r2, #5
 800c05c:	69fa      	ldr	r2, [r7, #28]
 800c05e:	440a      	add	r2, r1
 800c060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c068:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	68d9      	ldr	r1, [r3, #12]
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	781a      	ldrb	r2, [r3, #0]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	695b      	ldr	r3, [r3, #20]
 800c076:	b298      	uxth	r0, r3
 800c078:	79fb      	ldrb	r3, [r7, #7]
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	4603      	mov	r3, r0
 800c07e:	68f8      	ldr	r0, [r7, #12]
 800c080:	f000 fa38 	bl	800c4f4 <USB_WritePacket>
 800c084:	e0d2      	b.n	800c22c <USB_EPStartXfer+0x480>
 800c086:	bf00      	nop
 800c088:	e007ffff 	.word	0xe007ffff
 800c08c:	fff80000 	.word	0xfff80000
 800c090:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	015a      	lsls	r2, r3, #5
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	4413      	add	r3, r2
 800c09c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a0:	691a      	ldr	r2, [r3, #16]
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	0159      	lsls	r1, r3, #5
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	440b      	add	r3, r1
 800c0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	4b61      	ldr	r3, [pc, #388]	; (800c238 <USB_EPStartXfer+0x48c>)
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	015a      	lsls	r2, r3, #5
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	4413      	add	r3, r2
 800c0be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c2:	691a      	ldr	r2, [r3, #16]
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	0159      	lsls	r1, r3, #5
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	440b      	add	r3, r1
 800c0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	4b5a      	ldr	r3, [pc, #360]	; (800c23c <USB_EPStartXfer+0x490>)
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d123      	bne.n	800c128 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ec:	691a      	ldr	r2, [r3, #16]
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0f6:	69b9      	ldr	r1, [r7, #24]
 800c0f8:	0148      	lsls	r0, r1, #5
 800c0fa:	69f9      	ldr	r1, [r7, #28]
 800c0fc:	4401      	add	r1, r0
 800c0fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c102:	4313      	orrs	r3, r2
 800c104:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	0151      	lsls	r1, r2, #5
 800c118:	69fa      	ldr	r2, [r7, #28]
 800c11a:	440a      	add	r2, r1
 800c11c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c124:	6113      	str	r3, [r2, #16]
 800c126:	e033      	b.n	800c190 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	695a      	ldr	r2, [r3, #20]
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	4413      	add	r3, r2
 800c132:	1e5a      	subs	r2, r3, #1
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	fbb2 f3f3 	udiv	r3, r2, r3
 800c13c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	015a      	lsls	r2, r3, #5
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	4413      	add	r3, r2
 800c146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c14a:	691a      	ldr	r2, [r3, #16]
 800c14c:	8afb      	ldrh	r3, [r7, #22]
 800c14e:	04d9      	lsls	r1, r3, #19
 800c150:	4b3b      	ldr	r3, [pc, #236]	; (800c240 <USB_EPStartXfer+0x494>)
 800c152:	400b      	ands	r3, r1
 800c154:	69b9      	ldr	r1, [r7, #24]
 800c156:	0148      	lsls	r0, r1, #5
 800c158:	69f9      	ldr	r1, [r7, #28]
 800c15a:	4401      	add	r1, r0
 800c15c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c160:	4313      	orrs	r3, r2
 800c162:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	015a      	lsls	r2, r3, #5
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	4413      	add	r3, r2
 800c16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c170:	691a      	ldr	r2, [r3, #16]
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	8af9      	ldrh	r1, [r7, #22]
 800c178:	fb01 f303 	mul.w	r3, r1, r3
 800c17c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c180:	69b9      	ldr	r1, [r7, #24]
 800c182:	0148      	lsls	r0, r1, #5
 800c184:	69f9      	ldr	r1, [r7, #28]
 800c186:	4401      	add	r1, r0
 800c188:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c18c:	4313      	orrs	r3, r2
 800c18e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c190:	79fb      	ldrb	r3, [r7, #7]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d10d      	bne.n	800c1b2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d009      	beq.n	800c1b2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	68d9      	ldr	r1, [r3, #12]
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	015a      	lsls	r2, r3, #5
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ae:	460a      	mov	r2, r1
 800c1b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	78db      	ldrb	r3, [r3, #3]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d128      	bne.n	800c20c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d110      	bne.n	800c1ec <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	015a      	lsls	r2, r3, #5
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	69ba      	ldr	r2, [r7, #24]
 800c1da:	0151      	lsls	r1, r2, #5
 800c1dc:	69fa      	ldr	r2, [r7, #28]
 800c1de:	440a      	add	r2, r1
 800c1e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1e8:	6013      	str	r3, [r2, #0]
 800c1ea:	e00f      	b.n	800c20c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	69ba      	ldr	r2, [r7, #24]
 800c1fc:	0151      	lsls	r1, r2, #5
 800c1fe:	69fa      	ldr	r2, [r7, #28]
 800c200:	440a      	add	r2, r1
 800c202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c20a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	015a      	lsls	r2, r3, #5
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	4413      	add	r3, r2
 800c214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	69ba      	ldr	r2, [r7, #24]
 800c21c:	0151      	lsls	r1, r2, #5
 800c21e:	69fa      	ldr	r2, [r7, #28]
 800c220:	440a      	add	r2, r1
 800c222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c226:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c22a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3720      	adds	r7, #32
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	fff80000 	.word	0xfff80000
 800c23c:	e007ffff 	.word	0xe007ffff
 800c240:	1ff80000 	.word	0x1ff80000

0800c244 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c244:	b480      	push	{r7}
 800c246:	b087      	sub	sp, #28
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	4613      	mov	r3, r2
 800c250:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	785b      	ldrb	r3, [r3, #1]
 800c260:	2b01      	cmp	r3, #1
 800c262:	f040 80cd 	bne.w	800c400 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	695b      	ldr	r3, [r3, #20]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d132      	bne.n	800c2d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	015a      	lsls	r2, r3, #5
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	4413      	add	r3, r2
 800c276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c27a:	691a      	ldr	r2, [r3, #16]
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	0159      	lsls	r1, r3, #5
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	440b      	add	r3, r1
 800c284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c288:	4619      	mov	r1, r3
 800c28a:	4b98      	ldr	r3, [pc, #608]	; (800c4ec <USB_EP0StartXfer+0x2a8>)
 800c28c:	4013      	ands	r3, r2
 800c28e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	015a      	lsls	r2, r3, #5
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	4413      	add	r3, r2
 800c298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	0151      	lsls	r1, r2, #5
 800c2a2:	697a      	ldr	r2, [r7, #20]
 800c2a4:	440a      	add	r2, r1
 800c2a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	015a      	lsls	r2, r3, #5
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2bc:	691a      	ldr	r2, [r3, #16]
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	0159      	lsls	r1, r3, #5
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	440b      	add	r3, r1
 800c2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	4b88      	ldr	r3, [pc, #544]	; (800c4f0 <USB_EP0StartXfer+0x2ac>)
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	610b      	str	r3, [r1, #16]
 800c2d2:	e04e      	b.n	800c372 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	015a      	lsls	r2, r3, #5
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e0:	691a      	ldr	r2, [r3, #16]
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	0159      	lsls	r1, r3, #5
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	440b      	add	r3, r1
 800c2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4b7f      	ldr	r3, [pc, #508]	; (800c4f0 <USB_EP0StartXfer+0x2ac>)
 800c2f2:	4013      	ands	r3, r2
 800c2f4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	015a      	lsls	r2, r3, #5
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c302:	691a      	ldr	r2, [r3, #16]
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	0159      	lsls	r1, r3, #5
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	440b      	add	r3, r1
 800c30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c310:	4619      	mov	r1, r3
 800c312:	4b76      	ldr	r3, [pc, #472]	; (800c4ec <USB_EP0StartXfer+0x2a8>)
 800c314:	4013      	ands	r3, r2
 800c316:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	695a      	ldr	r2, [r3, #20]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	429a      	cmp	r2, r3
 800c322:	d903      	bls.n	800c32c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	689a      	ldr	r2, [r3, #8]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	693a      	ldr	r2, [r7, #16]
 800c33c:	0151      	lsls	r1, r2, #5
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	440a      	add	r2, r1
 800c342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c34a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	015a      	lsls	r2, r3, #5
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	4413      	add	r3, r2
 800c354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c358:	691a      	ldr	r2, [r3, #16]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c362:	6939      	ldr	r1, [r7, #16]
 800c364:	0148      	lsls	r0, r1, #5
 800c366:	6979      	ldr	r1, [r7, #20]
 800c368:	4401      	add	r1, r0
 800c36a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c36e:	4313      	orrs	r3, r2
 800c370:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c372:	79fb      	ldrb	r3, [r7, #7]
 800c374:	2b01      	cmp	r3, #1
 800c376:	d11e      	bne.n	800c3b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d009      	beq.n	800c394 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	015a      	lsls	r2, r3, #5
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	4413      	add	r3, r2
 800c388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c38c:	461a      	mov	r2, r3
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	015a      	lsls	r2, r3, #5
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	4413      	add	r3, r2
 800c39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	693a      	ldr	r2, [r7, #16]
 800c3a4:	0151      	lsls	r1, r2, #5
 800c3a6:	697a      	ldr	r2, [r7, #20]
 800c3a8:	440a      	add	r2, r1
 800c3aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3b2:	6013      	str	r3, [r2, #0]
 800c3b4:	e092      	b.n	800c4dc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	015a      	lsls	r2, r3, #5
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	4413      	add	r3, r2
 800c3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	0151      	lsls	r1, r2, #5
 800c3c8:	697a      	ldr	r2, [r7, #20]
 800c3ca:	440a      	add	r2, r1
 800c3cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	695b      	ldr	r3, [r3, #20]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d07e      	beq.n	800c4dc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	f003 030f 	and.w	r3, r3, #15
 800c3ee:	2101      	movs	r1, #1
 800c3f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c3f4:	6979      	ldr	r1, [r7, #20]
 800c3f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	634b      	str	r3, [r1, #52]	; 0x34
 800c3fe:	e06d      	b.n	800c4dc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	015a      	lsls	r2, r3, #5
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	4413      	add	r3, r2
 800c408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c40c:	691a      	ldr	r2, [r3, #16]
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	0159      	lsls	r1, r3, #5
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	440b      	add	r3, r1
 800c416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c41a:	4619      	mov	r1, r3
 800c41c:	4b34      	ldr	r3, [pc, #208]	; (800c4f0 <USB_EP0StartXfer+0x2ac>)
 800c41e:	4013      	ands	r3, r2
 800c420:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	015a      	lsls	r2, r3, #5
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	4413      	add	r3, r2
 800c42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c42e:	691a      	ldr	r2, [r3, #16]
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	0159      	lsls	r1, r3, #5
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	440b      	add	r3, r1
 800c438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c43c:	4619      	mov	r1, r3
 800c43e:	4b2b      	ldr	r3, [pc, #172]	; (800c4ec <USB_EP0StartXfer+0x2a8>)
 800c440:	4013      	ands	r3, r2
 800c442:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d003      	beq.n	800c454 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	689a      	ldr	r2, [r3, #8]
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	015a      	lsls	r2, r3, #5
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	4413      	add	r3, r2
 800c45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	693a      	ldr	r2, [r7, #16]
 800c464:	0151      	lsls	r1, r2, #5
 800c466:	697a      	ldr	r2, [r7, #20]
 800c468:	440a      	add	r2, r1
 800c46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c46e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c472:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c480:	691a      	ldr	r2, [r3, #16]
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c48a:	6939      	ldr	r1, [r7, #16]
 800c48c:	0148      	lsls	r0, r1, #5
 800c48e:	6979      	ldr	r1, [r7, #20]
 800c490:	4401      	add	r1, r0
 800c492:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c496:	4313      	orrs	r3, r2
 800c498:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c49a:	79fb      	ldrb	r3, [r7, #7]
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d10d      	bne.n	800c4bc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d009      	beq.n	800c4bc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	68d9      	ldr	r1, [r3, #12]
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	015a      	lsls	r2, r3, #5
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b8:	460a      	mov	r2, r1
 800c4ba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	015a      	lsls	r2, r3, #5
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	693a      	ldr	r2, [r7, #16]
 800c4cc:	0151      	lsls	r1, r2, #5
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	440a      	add	r2, r1
 800c4d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c4da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4dc:	2300      	movs	r3, #0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	371c      	adds	r7, #28
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	e007ffff 	.word	0xe007ffff
 800c4f0:	fff80000 	.word	0xfff80000

0800c4f4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b089      	sub	sp, #36	; 0x24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	4611      	mov	r1, r2
 800c500:	461a      	mov	r2, r3
 800c502:	460b      	mov	r3, r1
 800c504:	71fb      	strb	r3, [r7, #7]
 800c506:	4613      	mov	r3, r2
 800c508:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c512:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c516:	2b00      	cmp	r3, #0
 800c518:	d11a      	bne.n	800c550 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c51a:	88bb      	ldrh	r3, [r7, #4]
 800c51c:	3303      	adds	r3, #3
 800c51e:	089b      	lsrs	r3, r3, #2
 800c520:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c522:	2300      	movs	r3, #0
 800c524:	61bb      	str	r3, [r7, #24]
 800c526:	e00f      	b.n	800c548 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c528:	79fb      	ldrb	r3, [r7, #7]
 800c52a:	031a      	lsls	r2, r3, #12
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	4413      	add	r3, r2
 800c530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c534:	461a      	mov	r2, r3
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	3304      	adds	r3, #4
 800c540:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	3301      	adds	r3, #1
 800c546:	61bb      	str	r3, [r7, #24]
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d3eb      	bcc.n	800c528 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3724      	adds	r7, #36	; 0x24
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c55e:	b480      	push	{r7}
 800c560:	b089      	sub	sp, #36	; 0x24
 800c562:	af00      	add	r7, sp, #0
 800c564:	60f8      	str	r0, [r7, #12]
 800c566:	60b9      	str	r1, [r7, #8]
 800c568:	4613      	mov	r3, r2
 800c56a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c574:	88fb      	ldrh	r3, [r7, #6]
 800c576:	3303      	adds	r3, #3
 800c578:	089b      	lsrs	r3, r3, #2
 800c57a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c57c:	2300      	movs	r3, #0
 800c57e:	61bb      	str	r3, [r7, #24]
 800c580:	e00b      	b.n	800c59a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	601a      	str	r2, [r3, #0]
    pDest++;
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	3304      	adds	r3, #4
 800c592:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	3301      	adds	r3, #1
 800c598:	61bb      	str	r3, [r7, #24]
 800c59a:	69ba      	ldr	r2, [r7, #24]
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d3ef      	bcc.n	800c582 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c5a2:	69fb      	ldr	r3, [r7, #28]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3724      	adds	r7, #36	; 0x24
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	785b      	ldrb	r3, [r3, #1]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d12c      	bne.n	800c626 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	015a      	lsls	r2, r3, #5
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	db12      	blt.n	800c604 <USB_EPSetStall+0x54>
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d00f      	beq.n	800c604 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	015a      	lsls	r2, r3, #5
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	0151      	lsls	r1, r2, #5
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	440a      	add	r2, r1
 800c5fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c602:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	015a      	lsls	r2, r3, #5
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	4413      	add	r3, r2
 800c60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	0151      	lsls	r1, r2, #5
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	440a      	add	r2, r1
 800c61a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c61e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c622:	6013      	str	r3, [r2, #0]
 800c624:	e02b      	b.n	800c67e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	015a      	lsls	r2, r3, #5
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	4413      	add	r3, r2
 800c62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	db12      	blt.n	800c65e <USB_EPSetStall+0xae>
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00f      	beq.n	800c65e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	015a      	lsls	r2, r3, #5
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	4413      	add	r3, r2
 800c646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	0151      	lsls	r1, r2, #5
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	440a      	add	r2, r1
 800c654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c658:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c65c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	015a      	lsls	r2, r3, #5
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	4413      	add	r3, r2
 800c666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	0151      	lsls	r1, r2, #5
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	440a      	add	r2, r1
 800c674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c67c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3714      	adds	r7, #20
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	785b      	ldrb	r3, [r3, #1]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d128      	bne.n	800c6fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68ba      	ldr	r2, [r7, #8]
 800c6b8:	0151      	lsls	r1, r2, #5
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	440a      	add	r2, r1
 800c6be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c6c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	78db      	ldrb	r3, [r3, #3]
 800c6cc:	2b03      	cmp	r3, #3
 800c6ce:	d003      	beq.n	800c6d8 <USB_EPClearStall+0x4c>
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	78db      	ldrb	r3, [r3, #3]
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d138      	bne.n	800c74a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	015a      	lsls	r2, r3, #5
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	4413      	add	r3, r2
 800c6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	68ba      	ldr	r2, [r7, #8]
 800c6e8:	0151      	lsls	r1, r2, #5
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	440a      	add	r2, r1
 800c6ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6f6:	6013      	str	r3, [r2, #0]
 800c6f8:	e027      	b.n	800c74a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	015a      	lsls	r2, r3, #5
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	4413      	add	r3, r2
 800c702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	0151      	lsls	r1, r2, #5
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	440a      	add	r2, r1
 800c710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c714:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c718:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	78db      	ldrb	r3, [r3, #3]
 800c71e:	2b03      	cmp	r3, #3
 800c720:	d003      	beq.n	800c72a <USB_EPClearStall+0x9e>
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	78db      	ldrb	r3, [r3, #3]
 800c726:	2b02      	cmp	r3, #2
 800c728:	d10f      	bne.n	800c74a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	015a      	lsls	r2, r3, #5
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	4413      	add	r3, r2
 800c732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	0151      	lsls	r1, r2, #5
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	440a      	add	r2, r1
 800c740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c748:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	460b      	mov	r3, r1
 800c762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c776:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c77a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	78fb      	ldrb	r3, [r7, #3]
 800c786:	011b      	lsls	r3, r3, #4
 800c788:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c78c:	68f9      	ldr	r1, [r7, #12]
 800c78e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c792:	4313      	orrs	r3, r2
 800c794:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7be:	f023 0302 	bic.w	r3, r3, #2
 800c7c2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c7c4:	2003      	movs	r0, #3
 800c7c6:	f7f4 fef3 	bl	80015b0 <HAL_Delay>

  return HAL_OK;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7ee:	f043 0302 	orr.w	r3, r3, #2
 800c7f2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c7f4:	2003      	movs	r0, #3
 800c7f6:	f7f4 fedb 	bl	80015b0 <HAL_Delay>

  return HAL_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	695b      	ldr	r3, [r3, #20]
 800c810:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	4013      	ands	r3, r2
 800c81a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c81c:	68fb      	ldr	r3, [r7, #12]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3714      	adds	r7, #20
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr

0800c82a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c82a:	b480      	push	{r7}
 800c82c:	b085      	sub	sp, #20
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c846:	69db      	ldr	r3, [r3, #28]
 800c848:	68ba      	ldr	r2, [r7, #8]
 800c84a:	4013      	ands	r3, r2
 800c84c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	0c1b      	lsrs	r3, r3, #16
}
 800c852:	4618      	mov	r0, r3
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr

0800c85e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c85e:	b480      	push	{r7}
 800c860:	b085      	sub	sp, #20
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c87a:	69db      	ldr	r3, [r3, #28]
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	4013      	ands	r3, r2
 800c880:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	b29b      	uxth	r3, r3
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c892:	b480      	push	{r7}
 800c894:	b085      	sub	sp, #20
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	460b      	mov	r3, r1
 800c89c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c8a2:	78fb      	ldrb	r3, [r7, #3]
 800c8a4:	015a      	lsls	r2, r3, #5
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	4013      	ands	r3, r2
 800c8be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c8c0:	68bb      	ldr	r3, [r7, #8]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3714      	adds	r7, #20
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr

0800c8ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c8ce:	b480      	push	{r7}
 800c8d0:	b087      	sub	sp, #28
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c8f2:	78fb      	ldrb	r3, [r7, #3]
 800c8f4:	f003 030f 	and.w	r3, r3, #15
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800c8fe:	01db      	lsls	r3, r3, #7
 800c900:	b2db      	uxtb	r3, r3
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	4313      	orrs	r3, r2
 800c906:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c908:	78fb      	ldrb	r3, [r7, #3]
 800c90a:	015a      	lsls	r2, r3, #5
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	4413      	add	r3, r2
 800c910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	693a      	ldr	r2, [r7, #16]
 800c918:	4013      	ands	r3, r2
 800c91a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c91c:	68bb      	ldr	r3, [r7, #8]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	371c      	adds	r7, #28
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b083      	sub	sp, #12
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	695b      	ldr	r3, [r3, #20]
 800c936:	f003 0301 	and.w	r3, r3, #1
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	370c      	adds	r7, #12
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr
	...

0800c948 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c962:	4619      	mov	r1, r3
 800c964:	4b09      	ldr	r3, [pc, #36]	; (800c98c <USB_ActivateSetup+0x44>)
 800c966:	4013      	ands	r3, r2
 800c968:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c97c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c97e:	2300      	movs	r3, #0
}
 800c980:	4618      	mov	r0, r3
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr
 800c98c:	fffff800 	.word	0xfffff800

0800c990 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c990:	b480      	push	{r7}
 800c992:	b087      	sub	sp, #28
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	460b      	mov	r3, r1
 800c99a:	607a      	str	r2, [r7, #4]
 800c99c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	333c      	adds	r3, #60	; 0x3c
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	4a26      	ldr	r2, [pc, #152]	; (800ca48 <USB_EP0_OutStart+0xb8>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d90a      	bls.n	800c9ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9c4:	d101      	bne.n	800c9ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	e037      	b.n	800ca3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9dc:	691b      	ldr	r3, [r3, #16]
 800c9de:	697a      	ldr	r2, [r7, #20]
 800c9e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9f8:	f043 0318 	orr.w	r3, r3, #24
 800c9fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ca10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ca12:	7afb      	ldrb	r3, [r7, #11]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d10f      	bne.n	800ca38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca1e:	461a      	mov	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	697a      	ldr	r2, [r7, #20]
 800ca2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ca36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	371c      	adds	r7, #28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	4f54300a 	.word	0x4f54300a

0800ca4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ca54:	2300      	movs	r3, #0
 800ca56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	4a13      	ldr	r2, [pc, #76]	; (800cab0 <USB_CoreReset+0x64>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d901      	bls.n	800ca6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ca66:	2303      	movs	r3, #3
 800ca68:	e01b      	b.n	800caa2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	daf2      	bge.n	800ca58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ca72:	2300      	movs	r3, #0
 800ca74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	f043 0201 	orr.w	r2, r3, #1
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	3301      	adds	r3, #1
 800ca86:	60fb      	str	r3, [r7, #12]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4a09      	ldr	r2, [pc, #36]	; (800cab0 <USB_CoreReset+0x64>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d901      	bls.n	800ca94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ca90:	2303      	movs	r3, #3
 800ca92:	e006      	b.n	800caa2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	f003 0301 	and.w	r3, r3, #1
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d0f0      	beq.n	800ca82 <USB_CoreReset+0x36>

  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3714      	adds	r7, #20
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	00030d40 	.word	0x00030d40

0800cab4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cab8:	4904      	ldr	r1, [pc, #16]	; (800cacc <MX_FATFS_Init+0x18>)
 800caba:	4805      	ldr	r0, [pc, #20]	; (800cad0 <MX_FATFS_Init+0x1c>)
 800cabc:	f005 f898 	bl	8011bf0 <FATFS_LinkDriver>
 800cac0:	4603      	mov	r3, r0
 800cac2:	461a      	mov	r2, r3
 800cac4:	4b03      	ldr	r3, [pc, #12]	; (800cad4 <MX_FATFS_Init+0x20>)
 800cac6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cac8:	bf00      	nop
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	24000a74 	.word	0x24000a74
 800cad0:	08012980 	.word	0x08012980
 800cad4:	24000a70 	.word	0x24000a70

0800cad8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cad8:	b480      	push	{r7}
 800cada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cadc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cade:	4618      	mov	r0, r3
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800caf2:	f000 f879 	bl	800cbe8 <BSP_SD_IsDetected>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d001      	beq.n	800cb00 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cafc:	2302      	movs	r3, #2
 800cafe:	e012      	b.n	800cb26 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cb00:	480b      	ldr	r0, [pc, #44]	; (800cb30 <BSP_SD_Init+0x48>)
 800cb02:	f7fb f977 	bl	8007df4 <HAL_SD_Init>
 800cb06:	4603      	mov	r3, r0
 800cb08:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cb0a:	79fb      	ldrb	r3, [r7, #7]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d109      	bne.n	800cb24 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cb10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cb14:	4806      	ldr	r0, [pc, #24]	; (800cb30 <BSP_SD_Init+0x48>)
 800cb16:	f7fc f83b 	bl	8008b90 <HAL_SD_ConfigWideBusOperation>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d001      	beq.n	800cb24 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cb24:	79fb      	ldrb	r3, [r7, #7]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	24000564 	.word	0x24000564

0800cb34 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b088      	sub	sp, #32
 800cb38:	af02      	add	r7, sp, #8
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
 800cb40:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	68f9      	ldr	r1, [r7, #12]
 800cb50:	4806      	ldr	r0, [pc, #24]	; (800cb6c <BSP_SD_ReadBlocks+0x38>)
 800cb52:	f7fb fa73 	bl	800803c <HAL_SD_ReadBlocks>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d001      	beq.n	800cb60 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3718      	adds	r7, #24
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	24000564 	.word	0x24000564

0800cb70 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b088      	sub	sp, #32
 800cb74:	af02      	add	r7, sp, #8
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
 800cb7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	68f9      	ldr	r1, [r7, #12]
 800cb8c:	4806      	ldr	r0, [pc, #24]	; (800cba8 <BSP_SD_WriteBlocks+0x38>)
 800cb8e:	f7fb fbdf 	bl	8008350 <HAL_SD_WriteBlocks>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3718      	adds	r7, #24
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	24000564 	.word	0x24000564

0800cbac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cbb0:	4805      	ldr	r0, [pc, #20]	; (800cbc8 <BSP_SD_GetCardState+0x1c>)
 800cbb2:	f7fc f897 	bl	8008ce4 <HAL_SD_GetCardState>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b04      	cmp	r3, #4
 800cbba:	bf14      	ite	ne
 800cbbc:	2301      	movne	r3, #1
 800cbbe:	2300      	moveq	r3, #0
 800cbc0:	b2db      	uxtb	r3, r3
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	24000564 	.word	0x24000564

0800cbcc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cbd4:	6879      	ldr	r1, [r7, #4]
 800cbd6:	4803      	ldr	r0, [pc, #12]	; (800cbe4 <BSP_SD_GetCardInfo+0x18>)
 800cbd8:	f7fb ffae 	bl	8008b38 <HAL_SD_GetCardInfo>
}
 800cbdc:	bf00      	nop
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	24000564 	.word	0x24000564

0800cbe8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800cbf2:	79fb      	ldrb	r3, [r7, #7]
 800cbf4:	b2db      	uxtb	r3, r3
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
	...

0800cc04 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cc0e:	4b0b      	ldr	r3, [pc, #44]	; (800cc3c <SD_CheckStatus+0x38>)
 800cc10:	2201      	movs	r2, #1
 800cc12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cc14:	f7ff ffca 	bl	800cbac <BSP_SD_GetCardState>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d107      	bne.n	800cc2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cc1e:	4b07      	ldr	r3, [pc, #28]	; (800cc3c <SD_CheckStatus+0x38>)
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	f023 0301 	bic.w	r3, r3, #1
 800cc28:	b2da      	uxtb	r2, r3
 800cc2a:	4b04      	ldr	r3, [pc, #16]	; (800cc3c <SD_CheckStatus+0x38>)
 800cc2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cc2e:	4b03      	ldr	r3, [pc, #12]	; (800cc3c <SD_CheckStatus+0x38>)
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	b2db      	uxtb	r3, r3
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3708      	adds	r7, #8
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	2400000d 	.word	0x2400000d

0800cc40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	4603      	mov	r3, r0
 800cc48:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cc4a:	4b0b      	ldr	r3, [pc, #44]	; (800cc78 <SD_initialize+0x38>)
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cc50:	f7ff ff4a 	bl	800cae8 <BSP_SD_Init>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d107      	bne.n	800cc6a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cc5a:	79fb      	ldrb	r3, [r7, #7]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7ff ffd1 	bl	800cc04 <SD_CheckStatus>
 800cc62:	4603      	mov	r3, r0
 800cc64:	461a      	mov	r2, r3
 800cc66:	4b04      	ldr	r3, [pc, #16]	; (800cc78 <SD_initialize+0x38>)
 800cc68:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cc6a:	4b03      	ldr	r3, [pc, #12]	; (800cc78 <SD_initialize+0x38>)
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	b2db      	uxtb	r3, r3
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	2400000d 	.word	0x2400000d

0800cc7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	4603      	mov	r3, r0
 800cc84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7ff ffbb 	bl	800cc04 <SD_CheckStatus>
 800cc8e:	4603      	mov	r3, r0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60b9      	str	r1, [r7, #8]
 800cca0:	607a      	str	r2, [r7, #4]
 800cca2:	603b      	str	r3, [r7, #0]
 800cca4:	4603      	mov	r3, r0
 800cca6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ccac:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	6879      	ldr	r1, [r7, #4]
 800ccb4:	68b8      	ldr	r0, [r7, #8]
 800ccb6:	f7ff ff3d 	bl	800cb34 <BSP_SD_ReadBlocks>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d107      	bne.n	800ccd0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ccc0:	bf00      	nop
 800ccc2:	f7ff ff73 	bl	800cbac <BSP_SD_GetCardState>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1fa      	bne.n	800ccc2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ccd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3718      	adds	r7, #24
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b086      	sub	sp, #24
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
 800cce4:	603b      	str	r3, [r7, #0]
 800cce6:	4603      	mov	r3, r0
 800cce8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ccea:	2301      	movs	r3, #1
 800ccec:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ccee:	f04f 33ff 	mov.w	r3, #4294967295
 800ccf2:	683a      	ldr	r2, [r7, #0]
 800ccf4:	6879      	ldr	r1, [r7, #4]
 800ccf6:	68b8      	ldr	r0, [r7, #8]
 800ccf8:	f7ff ff3a 	bl	800cb70 <BSP_SD_WriteBlocks>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d107      	bne.n	800cd12 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cd02:	bf00      	nop
 800cd04:	f7ff ff52 	bl	800cbac <BSP_SD_GetCardState>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1fa      	bne.n	800cd04 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3718      	adds	r7, #24
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b08c      	sub	sp, #48	; 0x30
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	4603      	mov	r3, r0
 800cd24:	603a      	str	r2, [r7, #0]
 800cd26:	71fb      	strb	r3, [r7, #7]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cd32:	4b25      	ldr	r3, [pc, #148]	; (800cdc8 <SD_ioctl+0xac>)
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	f003 0301 	and.w	r3, r3, #1
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d001      	beq.n	800cd44 <SD_ioctl+0x28>
 800cd40:	2303      	movs	r3, #3
 800cd42:	e03c      	b.n	800cdbe <SD_ioctl+0xa2>

  switch (cmd)
 800cd44:	79bb      	ldrb	r3, [r7, #6]
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d834      	bhi.n	800cdb4 <SD_ioctl+0x98>
 800cd4a:	a201      	add	r2, pc, #4	; (adr r2, 800cd50 <SD_ioctl+0x34>)
 800cd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd50:	0800cd61 	.word	0x0800cd61
 800cd54:	0800cd69 	.word	0x0800cd69
 800cd58:	0800cd81 	.word	0x0800cd81
 800cd5c:	0800cd9b 	.word	0x0800cd9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cd60:	2300      	movs	r3, #0
 800cd62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd66:	e028      	b.n	800cdba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd68:	f107 0308 	add.w	r3, r7, #8
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7ff ff2d 	bl	800cbcc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cd72:	6a3a      	ldr	r2, [r7, #32]
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd7e:	e01c      	b.n	800cdba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd80:	f107 0308 	add.w	r3, r7, #8
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7ff ff21 	bl	800cbcc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd98:	e00f      	b.n	800cdba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd9a:	f107 0308 	add.w	r3, r7, #8
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7ff ff14 	bl	800cbcc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	0a5a      	lsrs	r2, r3, #9
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cdac:	2300      	movs	r3, #0
 800cdae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cdb2:	e002      	b.n	800cdba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cdb4:	2304      	movs	r3, #4
 800cdb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cdba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3730      	adds	r7, #48	; 0x30
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	2400000d 	.word	0x2400000d

0800cdcc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800cdd8:	f44f 701d 	mov.w	r0, #628	; 0x274
 800cddc:	f005 fc40 	bl	8012660 <malloc>
 800cde0:	4603      	mov	r3, r0
 800cde2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d105      	bne.n	800cdf6 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cdf2:	2302      	movs	r3, #2
 800cdf4:	e034      	b.n	800ce60 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	7c1b      	ldrb	r3, [r3, #16]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d115      	bne.n	800ce32 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ce06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	2101      	movs	r1, #1
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f005 fa8d 	bl	801232e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ce1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce20:	2202      	movs	r2, #2
 800ce22:	2181      	movs	r1, #129	; 0x81
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f005 fa82 	bl	801232e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	871a      	strh	r2, [r3, #56]	; 0x38
 800ce30:	e012      	b.n	800ce58 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ce32:	2340      	movs	r3, #64	; 0x40
 800ce34:	2202      	movs	r2, #2
 800ce36:	2101      	movs	r1, #1
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f005 fa78 	bl	801232e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ce46:	2340      	movs	r3, #64	; 0x40
 800ce48:	2202      	movs	r2, #2
 800ce4a:	2181      	movs	r1, #129	; 0x81
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f005 fa6e 	bl	801232e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2201      	movs	r2, #1
 800ce56:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 f98e 	bl	800d17a <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800ce5e:	2300      	movs	r3, #0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	460b      	mov	r3, r1
 800ce72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800ce74:	2101      	movs	r1, #1
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f005 fa7f 	bl	801237a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800ce84:	2181      	movs	r1, #129	; 0x81
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f005 fa77 	bl	801237a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 f9c7 	bl	800d226 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d009      	beq.n	800ceb6 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f005 fbe1 	bl	8012670 <free>
    pdev->pClassData = NULL;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ceb6:	2300      	movs	r3, #0
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ced0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800ced2:	2300      	movs	r3, #0
 800ced4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800ced6:	2300      	movs	r3, #0
 800ced8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d04d      	beq.n	800cf82 <USBD_MSC_Setup+0xc2>
 800cee6:	2b20      	cmp	r3, #32
 800cee8:	f040 80c6 	bne.w	800d078 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	785b      	ldrb	r3, [r3, #1]
 800cef0:	2bfe      	cmp	r3, #254	; 0xfe
 800cef2:	d002      	beq.n	800cefa <USBD_MSC_Setup+0x3a>
 800cef4:	2bff      	cmp	r3, #255	; 0xff
 800cef6:	d024      	beq.n	800cf42 <USBD_MSC_Setup+0x82>
 800cef8:	e03b      	b.n	800cf72 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	885b      	ldrh	r3, [r3, #2]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d118      	bne.n	800cf34 <USBD_MSC_Setup+0x74>
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	88db      	ldrh	r3, [r3, #6]
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d114      	bne.n	800cf34 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	da0f      	bge.n	800cf34 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	4798      	blx	r3
 800cf1e:	4603      	mov	r3, r0
 800cf20:	461a      	mov	r2, r3
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f002 fc58 	bl	800f7e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cf32:	e025      	b.n	800cf80 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f002 fbe2 	bl	800f700 <USBD_CtlError>
        ret = USBD_FAIL;
 800cf3c:	2303      	movs	r3, #3
 800cf3e:	75fb      	strb	r3, [r7, #23]
      break;
 800cf40:	e01e      	b.n	800cf80 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	885b      	ldrh	r3, [r3, #2]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10c      	bne.n	800cf64 <USBD_MSC_Setup+0xa4>
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	88db      	ldrh	r3, [r3, #6]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d108      	bne.n	800cf64 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	db03      	blt.n	800cf64 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 f940 	bl	800d1e2 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cf62:	e00d      	b.n	800cf80 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f002 fbca 	bl	800f700 <USBD_CtlError>
        ret = USBD_FAIL;
 800cf6c:	2303      	movs	r3, #3
 800cf6e:	75fb      	strb	r3, [r7, #23]
      break;
 800cf70:	e006      	b.n	800cf80 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800cf72:	6839      	ldr	r1, [r7, #0]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f002 fbc3 	bl	800f700 <USBD_CtlError>
      ret = USBD_FAIL;
 800cf7a:	2303      	movs	r3, #3
 800cf7c:	75fb      	strb	r3, [r7, #23]
      break;
 800cf7e:	bf00      	nop
    }
    break;
 800cf80:	e081      	b.n	800d086 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	785b      	ldrb	r3, [r3, #1]
 800cf86:	2b0b      	cmp	r3, #11
 800cf88:	d86d      	bhi.n	800d066 <USBD_MSC_Setup+0x1a6>
 800cf8a:	a201      	add	r2, pc, #4	; (adr r2, 800cf90 <USBD_MSC_Setup+0xd0>)
 800cf8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf90:	0800cfc1 	.word	0x0800cfc1
 800cf94:	0800d037 	.word	0x0800d037
 800cf98:	0800d067 	.word	0x0800d067
 800cf9c:	0800d067 	.word	0x0800d067
 800cfa0:	0800d067 	.word	0x0800d067
 800cfa4:	0800d067 	.word	0x0800d067
 800cfa8:	0800d067 	.word	0x0800d067
 800cfac:	0800d067 	.word	0x0800d067
 800cfb0:	0800d067 	.word	0x0800d067
 800cfb4:	0800d067 	.word	0x0800d067
 800cfb8:	0800cfe9 	.word	0x0800cfe9
 800cfbc:	0800d011 	.word	0x0800d011
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfc6:	2b03      	cmp	r3, #3
 800cfc8:	d107      	bne.n	800cfda <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cfca:	f107 030e 	add.w	r3, r7, #14
 800cfce:	2202      	movs	r2, #2
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f002 fc05 	bl	800f7e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cfd8:	e04d      	b.n	800d076 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800cfda:	6839      	ldr	r1, [r7, #0]
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f002 fb8f 	bl	800f700 <USBD_CtlError>
        ret = USBD_FAIL;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	75fb      	strb	r3, [r7, #23]
      break;
 800cfe6:	e046      	b.n	800d076 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfee:	2b03      	cmp	r3, #3
 800cff0:	d107      	bne.n	800d002 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	3304      	adds	r3, #4
 800cff6:	2201      	movs	r2, #1
 800cff8:	4619      	mov	r1, r3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f002 fbf1 	bl	800f7e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d000:	e039      	b.n	800d076 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d002:	6839      	ldr	r1, [r7, #0]
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f002 fb7b 	bl	800f700 <USBD_CtlError>
        ret = USBD_FAIL;
 800d00a:	2303      	movs	r3, #3
 800d00c:	75fb      	strb	r3, [r7, #23]
      break;
 800d00e:	e032      	b.n	800d076 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d016:	2b03      	cmp	r3, #3
 800d018:	d106      	bne.n	800d028 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	885b      	ldrh	r3, [r3, #2]
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	461a      	mov	r2, r3
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d026:	e026      	b.n	800d076 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d028:	6839      	ldr	r1, [r7, #0]
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f002 fb68 	bl	800f700 <USBD_CtlError>
        ret = USBD_FAIL;
 800d030:	2303      	movs	r3, #3
 800d032:	75fb      	strb	r3, [r7, #23]
      break;
 800d034:	e01f      	b.n	800d076 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d03c:	2b03      	cmp	r3, #3
 800d03e:	d119      	bne.n	800d074 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	885b      	ldrh	r3, [r3, #2]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d115      	bne.n	800d074 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	889b      	ldrh	r3, [r3, #4]
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	4619      	mov	r1, r3
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f005 f9b1 	bl	80123b8 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	889b      	ldrh	r3, [r3, #4]
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	4619      	mov	r1, r3
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fa5a 	bl	800d518 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800d064:	e006      	b.n	800d074 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f002 fb49 	bl	800f700 <USBD_CtlError>
      ret = USBD_FAIL;
 800d06e:	2303      	movs	r3, #3
 800d070:	75fb      	strb	r3, [r7, #23]
      break;
 800d072:	e000      	b.n	800d076 <USBD_MSC_Setup+0x1b6>
      break;
 800d074:	bf00      	nop
    }
    break;
 800d076:	e006      	b.n	800d086 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800d078:	6839      	ldr	r1, [r7, #0]
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f002 fb40 	bl	800f700 <USBD_CtlError>
    ret = USBD_FAIL;
 800d080:	2303      	movs	r3, #3
 800d082:	75fb      	strb	r3, [r7, #23]
    break;
 800d084:	bf00      	nop
  }

  return (uint8_t)ret;
 800d086:	7dfb      	ldrb	r3, [r7, #23]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3718      	adds	r7, #24
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	460b      	mov	r3, r1
 800d09a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d09c:	78fb      	ldrb	r3, [r7, #3]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f8d1 	bl	800d248 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d0bc:	78fb      	ldrb	r3, [r7, #3]
 800d0be:	4619      	mov	r1, r3
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f8f2 	bl	800d2aa <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3708      	adds	r7, #8
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2220      	movs	r2, #32
 800d0dc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800d0de:	4b03      	ldr	r3, [pc, #12]	; (800d0ec <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	24000048 	.word	0x24000048

0800d0f0 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2220      	movs	r2, #32
 800d0fc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800d0fe:	4b03      	ldr	r3, [pc, #12]	; (800d10c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800d100:	4618      	mov	r0, r3
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr
 800d10c:	24000068 	.word	0x24000068

0800d110 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2220      	movs	r2, #32
 800d11c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800d11e:	4b03      	ldr	r3, [pc, #12]	; (800d12c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d120:	4618      	mov	r0, r3
 800d122:	370c      	adds	r7, #12
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	24000088 	.word	0x24000088

0800d130 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	220a      	movs	r2, #10
 800d13c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800d13e:	4b03      	ldr	r3, [pc, #12]	; (800d14c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d140:	4618      	mov	r0, r3
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	240000a8 	.word	0x240000a8

0800d150 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d101      	bne.n	800d164 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d160:	2303      	movs	r3, #3
 800d162:	e004      	b.n	800d16e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	683a      	ldr	r2, [r7, #0]
 800d168:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	370c      	adds	r7, #12
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr

0800d17a <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b084      	sub	sp, #16
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d188:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2200      	movs	r2, #0
 800d18e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2000      	movs	r0, #0
 800d1b8:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800d1ba:	2101      	movs	r1, #1
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f005 f8fb 	bl	80123b8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800d1c2:	2181      	movs	r1, #129	; 0x81
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f005 f8f7 	bl	80123b8 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d1d0:	231f      	movs	r3, #31
 800d1d2:	2101      	movs	r1, #1
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f005 f9b8 	bl	801254a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d1da:	bf00      	nop
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b084      	sub	sp, #16
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1f0:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800d1fe:	2181      	movs	r1, #129	; 0x81
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f005 f917 	bl	8012434 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800d206:	2101      	movs	r1, #1
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f005 f913 	bl	8012434 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d214:	231f      	movs	r3, #31
 800d216:	2101      	movs	r1, #1
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f005 f996 	bl	801254a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d21e:	bf00      	nop
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800d226:	b480      	push	{r7}
 800d228:	b085      	sub	sp, #20
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d234:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	721a      	strb	r2, [r3, #8]
}
 800d23c:	bf00      	nop
 800d23e:	3714      	adds	r7, #20
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d25a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	7a1b      	ldrb	r3, [r3, #8]
 800d260:	2b02      	cmp	r3, #2
 800d262:	d004      	beq.n	800d26e <MSC_BOT_DataIn+0x26>
 800d264:	2b02      	cmp	r3, #2
 800d266:	db19      	blt.n	800d29c <MSC_BOT_DataIn+0x54>
 800d268:	2b04      	cmp	r3, #4
 800d26a:	dc17      	bgt.n	800d29c <MSC_BOT_DataIn+0x54>
 800d26c:	e011      	b.n	800d292 <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d27a:	461a      	mov	r2, r3
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f973 	bl	800d568 <SCSI_ProcessCmd>
 800d282:	4603      	mov	r3, r0
 800d284:	2b00      	cmp	r3, #0
 800d286:	da0b      	bge.n	800d2a0 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d288:	2101      	movs	r1, #1
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 f8ea 	bl	800d464 <MSC_BOT_SendCSW>
    }
    break;
 800d290:	e006      	b.n	800d2a0 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d292:	2100      	movs	r1, #0
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 f8e5 	bl	800d464 <MSC_BOT_SendCSW>
    break;
 800d29a:	e002      	b.n	800d2a2 <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800d29c:	bf00      	nop
 800d29e:	e000      	b.n	800d2a2 <MSC_BOT_DataIn+0x5a>
    break;
 800d2a0:	bf00      	nop
  }
}
 800d2a2:	bf00      	nop
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2bc:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	7a1b      	ldrb	r3, [r3, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d002      	beq.n	800d2cc <MSC_BOT_DataOut+0x22>
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d004      	beq.n	800d2d4 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800d2ca:	e015      	b.n	800d2f8 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f817 	bl	800d300 <MSC_BOT_CBW_Decode>
      break;
 800d2d2:	e011      	b.n	800d2f8 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 f940 	bl	800d568 <SCSI_ProcessCmd>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	da03      	bge.n	800d2f6 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d2ee:	2101      	movs	r1, #1
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 f8b7 	bl	800d464 <MSC_BOT_SendCSW>
      break;
 800d2f6:	bf00      	nop
  }
}
 800d2f8:	bf00      	nop
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d30e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d328:	2101      	movs	r1, #1
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f005 f92e 	bl	801258c <USBD_LL_GetRxDataSize>
 800d330:	4603      	mov	r3, r0
 800d332:	2b1f      	cmp	r3, #31
 800d334:	d114      	bne.n	800d360 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d33c:	4a32      	ldr	r2, [pc, #200]	; (800d408 <MSC_BOT_CBW_Decode+0x108>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d10e      	bne.n	800d360 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d809      	bhi.n	800d360 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800d352:	2b00      	cmp	r3, #0
 800d354:	d004      	beq.n	800d360 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d35c:	2b10      	cmp	r3, #16
 800d35e:	d90e      	bls.n	800d37e <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d366:	2320      	movs	r3, #32
 800d368:	2205      	movs	r2, #5
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fcc9 	bl	800dd02 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2202      	movs	r2, #2
 800d374:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 f8a0 	bl	800d4bc <MSC_BOT_Abort>
 800d37c:	e041      	b.n	800d402 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d38a:	461a      	mov	r2, r3
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 f8eb 	bl	800d568 <SCSI_ProcessCmd>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	da0c      	bge.n	800d3b2 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	7a1b      	ldrb	r3, [r3, #8]
 800d39c:	2b05      	cmp	r3, #5
 800d39e:	d104      	bne.n	800d3aa <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d3a0:	2101      	movs	r1, #1
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 f85e 	bl	800d464 <MSC_BOT_SendCSW>
 800d3a8:	e02b      	b.n	800d402 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f886 	bl	800d4bc <MSC_BOT_Abort>
 800d3b0:	e027      	b.n	800d402 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	7a1b      	ldrb	r3, [r3, #8]
 800d3b6:	2b02      	cmp	r3, #2
 800d3b8:	d022      	beq.n	800d400 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d01e      	beq.n	800d400 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d3c6:	2b03      	cmp	r3, #3
 800d3c8:	d01a      	beq.n	800d400 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d009      	beq.n	800d3e6 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f103 0110 	add.w	r1, r3, #16
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	461a      	mov	r2, r3
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 f814 	bl	800d40c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d3e4:	e00d      	b.n	800d402 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d104      	bne.n	800d3f8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 f837 	bl	800d464 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d3f6:	e004      	b.n	800d402 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 f85f 	bl	800d4bc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d3fe:	e000      	b.n	800d402 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800d400:	bf00      	nop
    }
  }
}
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	43425355 	.word	0x43425355

0800d40c <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b086      	sub	sp, #24
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d41e:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	4293      	cmp	r3, r2
 800d42a:	bf28      	it	cs
 800d42c:	4613      	movcs	r3, r2
 800d42e:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	1ad2      	subs	r2, r2, r3
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	2200      	movs	r2, #0
 800d444:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	2204      	movs	r2, #4
 800d44c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	2181      	movs	r1, #129	; 0x81
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f005 f857 	bl	8012508 <USBD_LL_Transmit>
}
 800d45a:	bf00      	nop
 800d45c:	3718      	adds	r7, #24
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
	...

0800d464 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	460b      	mov	r3, r1
 800d46e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d476:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	4a0f      	ldr	r2, [pc, #60]	; (800d4b8 <MSC_BOT_SendCSW+0x54>)
 800d47c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	78fa      	ldrb	r2, [r7, #3]
 800d484:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800d494:	230d      	movs	r3, #13
 800d496:	2181      	movs	r1, #129	; 0x81
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f005 f835 	bl	8012508 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d4a4:	231f      	movs	r3, #31
 800d4a6:	2101      	movs	r1, #1
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f005 f84e 	bl	801254a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d4ae:	bf00      	nop
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	53425355 	.word	0x53425355

0800d4bc <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4ca:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d10c      	bne.n	800d4f0 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d007      	beq.n	800d4f0 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d103      	bne.n	800d4f0 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d4e8:	2101      	movs	r1, #1
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f004 ff83 	bl	80123f6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d4f0:	2181      	movs	r1, #129	; 0x81
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f004 ff7f 	bl	80123f6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	7a5b      	ldrb	r3, [r3, #9]
 800d4fc:	2b02      	cmp	r3, #2
 800d4fe:	d107      	bne.n	800d510 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d500:	2181      	movs	r1, #129	; 0x81
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f004 ff77 	bl	80123f6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d508:	2101      	movs	r1, #1
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f004 ff73 	bl	80123f6 <USBD_LL_StallEP>
  }
}
 800d510:	bf00      	nop
 800d512:	3710      	adds	r7, #16
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	460b      	mov	r3, r1
 800d522:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d52a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	7a5b      	ldrb	r3, [r3, #9]
 800d530:	2b02      	cmp	r3, #2
 800d532:	d108      	bne.n	800d546 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d534:	2181      	movs	r1, #129	; 0x81
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f004 ff5d 	bl	80123f6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d53c:	2101      	movs	r1, #1
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f004 ff59 	bl	80123f6 <USBD_LL_StallEP>
 800d544:	e00d      	b.n	800d562 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d546:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	da08      	bge.n	800d560 <MSC_BOT_CplClrFeature+0x48>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	7a5b      	ldrb	r3, [r3, #9]
 800d552:	2b01      	cmp	r3, #1
 800d554:	d004      	beq.n	800d560 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d556:	2101      	movs	r1, #1
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7ff ff83 	bl	800d464 <MSC_BOT_SendCSW>
 800d55e:	e000      	b.n	800d562 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800d560:	bf00      	nop
  }
}
 800d562:	3710      	adds	r7, #16
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b086      	sub	sp, #24
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	460b      	mov	r3, r1
 800d572:	607a      	str	r2, [r7, #4]
 800d574:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d57c:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	2b25      	cmp	r3, #37	; 0x25
 800d584:	d06e      	beq.n	800d664 <SCSI_ProcessCmd+0xfc>
 800d586:	2b25      	cmp	r3, #37	; 0x25
 800d588:	dc11      	bgt.n	800d5ae <SCSI_ProcessCmd+0x46>
 800d58a:	2b1a      	cmp	r3, #26
 800d58c:	d04f      	beq.n	800d62e <SCSI_ProcessCmd+0xc6>
 800d58e:	2b1a      	cmp	r3, #26
 800d590:	dc06      	bgt.n	800d5a0 <SCSI_ProcessCmd+0x38>
 800d592:	2b03      	cmp	r3, #3
 800d594:	d027      	beq.n	800d5e6 <SCSI_ProcessCmd+0x7e>
 800d596:	2b12      	cmp	r3, #18
 800d598:	d02e      	beq.n	800d5f8 <SCSI_ProcessCmd+0x90>
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d01a      	beq.n	800d5d4 <SCSI_ProcessCmd+0x6c>
 800d59e:	e0a0      	b.n	800d6e2 <SCSI_ProcessCmd+0x17a>
 800d5a0:	2b1e      	cmp	r3, #30
 800d5a2:	d03b      	beq.n	800d61c <SCSI_ProcessCmd+0xb4>
 800d5a4:	2b23      	cmp	r3, #35	; 0x23
 800d5a6:	d054      	beq.n	800d652 <SCSI_ProcessCmd+0xea>
 800d5a8:	2b1b      	cmp	r3, #27
 800d5aa:	d02e      	beq.n	800d60a <SCSI_ProcessCmd+0xa2>
 800d5ac:	e099      	b.n	800d6e2 <SCSI_ProcessCmd+0x17a>
 800d5ae:	2b5a      	cmp	r3, #90	; 0x5a
 800d5b0:	d046      	beq.n	800d640 <SCSI_ProcessCmd+0xd8>
 800d5b2:	2b5a      	cmp	r3, #90	; 0x5a
 800d5b4:	dc07      	bgt.n	800d5c6 <SCSI_ProcessCmd+0x5e>
 800d5b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d5b8:	d078      	beq.n	800d6ac <SCSI_ProcessCmd+0x144>
 800d5ba:	2b2f      	cmp	r3, #47	; 0x2f
 800d5bc:	f000 8088 	beq.w	800d6d0 <SCSI_ProcessCmd+0x168>
 800d5c0:	2b28      	cmp	r3, #40	; 0x28
 800d5c2:	d061      	beq.n	800d688 <SCSI_ProcessCmd+0x120>
 800d5c4:	e08d      	b.n	800d6e2 <SCSI_ProcessCmd+0x17a>
 800d5c6:	2ba8      	cmp	r3, #168	; 0xa8
 800d5c8:	d067      	beq.n	800d69a <SCSI_ProcessCmd+0x132>
 800d5ca:	2baa      	cmp	r3, #170	; 0xaa
 800d5cc:	d077      	beq.n	800d6be <SCSI_ProcessCmd+0x156>
 800d5ce:	2b9e      	cmp	r3, #158	; 0x9e
 800d5d0:	d051      	beq.n	800d676 <SCSI_ProcessCmd+0x10e>
 800d5d2:	e086      	b.n	800d6e2 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800d5d4:	7afb      	ldrb	r3, [r7, #11]
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	4619      	mov	r1, r3
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f000 f893 	bl	800d706 <SCSI_TestUnitReady>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	75fb      	strb	r3, [r7, #23]
    break;
 800d5e4:	e089      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800d5e6:	7afb      	ldrb	r3, [r7, #11]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f000 fb0f 	bl	800dc10 <SCSI_RequestSense>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	75fb      	strb	r3, [r7, #23]
    break;
 800d5f6:	e080      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800d5f8:	7afb      	ldrb	r3, [r7, #11]
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f000 f8cc 	bl	800d79c <SCSI_Inquiry>
 800d604:	4603      	mov	r3, r0
 800d606:	75fb      	strb	r3, [r7, #23]
    break;
 800d608:	e077      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800d60a:	7afb      	ldrb	r3, [r7, #11]
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	4619      	mov	r1, r3
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f000 fbb9 	bl	800dd88 <SCSI_StartStopUnit>
 800d616:	4603      	mov	r3, r0
 800d618:	75fb      	strb	r3, [r7, #23]
    break;
 800d61a:	e06e      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800d61c:	7afb      	ldrb	r3, [r7, #11]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	4619      	mov	r1, r3
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f000 fbfb 	bl	800de1e <SCSI_AllowPreventRemovable>
 800d628:	4603      	mov	r3, r0
 800d62a:	75fb      	strb	r3, [r7, #23]
    break;
 800d62c:	e065      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800d62e:	7afb      	ldrb	r3, [r7, #11]
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	4619      	mov	r1, r3
 800d634:	68f8      	ldr	r0, [r7, #12]
 800d636:	f000 fa9f 	bl	800db78 <SCSI_ModeSense6>
 800d63a:	4603      	mov	r3, r0
 800d63c:	75fb      	strb	r3, [r7, #23]
    break;
 800d63e:	e05c      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800d640:	7afb      	ldrb	r3, [r7, #11]
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	4619      	mov	r1, r3
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f000 fabc 	bl	800dbc4 <SCSI_ModeSense10>
 800d64c:	4603      	mov	r3, r0
 800d64e:	75fb      	strb	r3, [r7, #23]
    break;
 800d650:	e053      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d652:	7afb      	ldrb	r3, [r7, #11]
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	4619      	mov	r1, r3
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f000 fa20 	bl	800da9e <SCSI_ReadFormatCapacity>
 800d65e:	4603      	mov	r3, r0
 800d660:	75fb      	strb	r3, [r7, #23]
    break;
 800d662:	e04a      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800d664:	7afb      	ldrb	r3, [r7, #11]
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	4619      	mov	r1, r3
 800d66a:	68f8      	ldr	r0, [r7, #12]
 800d66c:	f000 f904 	bl	800d878 <SCSI_ReadCapacity10>
 800d670:	4603      	mov	r3, r0
 800d672:	75fb      	strb	r3, [r7, #23]
    break;
 800d674:	e041      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800d676:	7afb      	ldrb	r3, [r7, #11]
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	4619      	mov	r1, r3
 800d67c:	68f8      	ldr	r0, [r7, #12]
 800d67e:	f000 f96a 	bl	800d956 <SCSI_ReadCapacity16>
 800d682:	4603      	mov	r3, r0
 800d684:	75fb      	strb	r3, [r7, #23]
    break;
 800d686:	e038      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800d688:	7afb      	ldrb	r3, [r7, #11]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	4619      	mov	r1, r3
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f000 fbe8 	bl	800de64 <SCSI_Read10>
 800d694:	4603      	mov	r3, r0
 800d696:	75fb      	strb	r3, [r7, #23]
    break;
 800d698:	e02f      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800d69a:	7afb      	ldrb	r3, [r7, #11]
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	68f8      	ldr	r0, [r7, #12]
 800d6a2:	f000 fc79 	bl	800df98 <SCSI_Read12>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	75fb      	strb	r3, [r7, #23]
    break;
 800d6aa:	e026      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800d6ac:	7afb      	ldrb	r3, [r7, #11]
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	68f8      	ldr	r0, [r7, #12]
 800d6b4:	f000 fd15 	bl	800e0e2 <SCSI_Write10>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	75fb      	strb	r3, [r7, #23]
    break;
 800d6bc:	e01d      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800d6be:	7afb      	ldrb	r3, [r7, #11]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	68f8      	ldr	r0, [r7, #12]
 800d6c6:	f000 fdcb 	bl	800e260 <SCSI_Write12>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	75fb      	strb	r3, [r7, #23]
    break;
 800d6ce:	e014      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800d6d0:	7afb      	ldrb	r3, [r7, #11]
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f000 fe91 	bl	800e3fe <SCSI_Verify10>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	75fb      	strb	r3, [r7, #23]
    break;
 800d6e0:	e00b      	b.n	800d6fa <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d6e2:	7af9      	ldrb	r1, [r7, #11]
 800d6e4:	2320      	movs	r3, #32
 800d6e6:	2205      	movs	r2, #5
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f000 fb0a 	bl	800dd02 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	2202      	movs	r2, #2
 800d6f2:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800d6f4:	23ff      	movs	r3, #255	; 0xff
 800d6f6:	75fb      	strb	r3, [r7, #23]
    break;
 800d6f8:	bf00      	nop
  }

  return ret;
 800d6fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b086      	sub	sp, #24
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	60f8      	str	r0, [r7, #12]
 800d70e:	460b      	mov	r3, r1
 800d710:	607a      	str	r2, [r7, #4]
 800d712:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d71a:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d722:	2b00      	cmp	r3, #0
 800d724:	d00a      	beq.n	800d73c <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d72c:	2320      	movs	r3, #32
 800d72e:	2205      	movs	r2, #5
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f000 fae6 	bl	800dd02 <SCSI_SenseCode>

    return -1;
 800d736:	f04f 33ff 	mov.w	r3, #4294967295
 800d73a:	e02a      	b.n	800d792 <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d742:	2b02      	cmp	r3, #2
 800d744:	d10b      	bne.n	800d75e <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d746:	7af9      	ldrb	r1, [r7, #11]
 800d748:	233a      	movs	r3, #58	; 0x3a
 800d74a:	2202      	movs	r2, #2
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f000 fad8 	bl	800dd02 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	2205      	movs	r2, #5
 800d756:	721a      	strb	r2, [r3, #8]
    return -1;
 800d758:	f04f 33ff 	mov.w	r3, #4294967295
 800d75c:	e019      	b.n	800d792 <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	7afa      	ldrb	r2, [r7, #11]
 800d768:	4610      	mov	r0, r2
 800d76a:	4798      	blx	r3
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00b      	beq.n	800d78a <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d772:	7af9      	ldrb	r1, [r7, #11]
 800d774:	233a      	movs	r3, #58	; 0x3a
 800d776:	2202      	movs	r2, #2
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f000 fac2 	bl	800dd02 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	2205      	movs	r2, #5
 800d782:	721a      	strb	r2, [r3, #8]

    return -1;
 800d784:	f04f 33ff 	mov.w	r3, #4294967295
 800d788:	e003      	b.n	800d792 <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2200      	movs	r2, #0
 800d78e:	60da      	str	r2, [r3, #12]

  return 0;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3718      	adds	r7, #24
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
	...

0800d79c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b088      	sub	sp, #32
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	607a      	str	r2, [r7, #4]
 800d7a8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7b0:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d10a      	bne.n	800d7d2 <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d7c2:	2320      	movs	r3, #32
 800d7c4:	2205      	movs	r2, #5
 800d7c6:	68f8      	ldr	r0, [r7, #12]
 800d7c8:	f000 fa9b 	bl	800dd02 <SCSI_SenseCode>
    return -1;
 800d7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d0:	e04a      	b.n	800d868 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	f003 0301 	and.w	r3, r3, #1
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d020      	beq.n	800d822 <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	3302      	adds	r3, #2
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d105      	bne.n	800d7f6 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800d7ea:	2206      	movs	r2, #6
 800d7ec:	4920      	ldr	r1, [pc, #128]	; (800d870 <SCSI_Inquiry+0xd4>)
 800d7ee:	69b8      	ldr	r0, [r7, #24]
 800d7f0:	f000 ff50 	bl	800e694 <SCSI_UpdateBotData>
 800d7f4:	e037      	b.n	800d866 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	3302      	adds	r3, #2
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b80      	cmp	r3, #128	; 0x80
 800d7fe:	d105      	bne.n	800d80c <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800d800:	2208      	movs	r2, #8
 800d802:	491c      	ldr	r1, [pc, #112]	; (800d874 <SCSI_Inquiry+0xd8>)
 800d804:	69b8      	ldr	r0, [r7, #24]
 800d806:	f000 ff45 	bl	800e694 <SCSI_UpdateBotData>
 800d80a:	e02c      	b.n	800d866 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d812:	2324      	movs	r3, #36	; 0x24
 800d814:	2205      	movs	r2, #5
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f000 fa73 	bl	800dd02 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800d81c:	f04f 33ff 	mov.w	r3, #4294967295
 800d820:	e022      	b.n	800d868 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d828:	69d9      	ldr	r1, [r3, #28]
 800d82a:	7afa      	ldrb	r2, [r7, #11]
 800d82c:	4613      	mov	r3, r2
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	4413      	add	r3, r2
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	440b      	add	r3, r1
 800d836:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	3304      	adds	r3, #4
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	b29b      	uxth	r3, r3
 800d840:	3305      	adds	r3, #5
 800d842:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	3304      	adds	r3, #4
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	8bfa      	ldrh	r2, [r7, #30]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d303      	bcc.n	800d85a <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	3304      	adds	r3, #4
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800d85a:	8bfb      	ldrh	r3, [r7, #30]
 800d85c:	461a      	mov	r2, r3
 800d85e:	6979      	ldr	r1, [r7, #20]
 800d860:	69b8      	ldr	r0, [r7, #24]
 800d862:	f000 ff17 	bl	800e694 <SCSI_UpdateBotData>
  }

  return 0;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3720      	adds	r7, #32
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	240000b4 	.word	0x240000b4
 800d874:	240000bc 	.word	0x240000bc

0800d878 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	460b      	mov	r3, r1
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d88c:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	697a      	ldr	r2, [r7, #20]
 800d898:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800d89c:	697a      	ldr	r2, [r7, #20]
 800d89e:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800d8a2:	7af8      	ldrb	r0, [r7, #11]
 800d8a4:	4798      	blx	r3
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d8aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d104      	bne.n	800d8bc <SCSI_ReadCapacity10+0x44>
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d8b8:	2b02      	cmp	r3, #2
 800d8ba:	d108      	bne.n	800d8ce <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d8bc:	7af9      	ldrb	r1, [r7, #11]
 800d8be:	233a      	movs	r3, #58	; 0x3a
 800d8c0:	2202      	movs	r2, #2
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f000 fa1d 	bl	800dd02 <SCSI_SenseCode>
    return -1;
 800d8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8cc:	e03f      	b.n	800d94e <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	0e1b      	lsrs	r3, r3, #24
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	0c1b      	lsrs	r3, r3, #16
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	0a1b      	lsrs	r3, r3, #8
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d904:	b2db      	uxtb	r3, r3
 800d906:	3b01      	subs	r3, #1
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d914:	161b      	asrs	r3, r3, #24
 800d916:	b2da      	uxtb	r2, r3
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d922:	141b      	asrs	r3, r3, #16
 800d924:	b2da      	uxtb	r2, r3
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d930:	0a1b      	lsrs	r3, r3, #8
 800d932:	b29b      	uxth	r3, r3
 800d934:	b2da      	uxtb	r2, r3
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d940:	b2da      	uxtb	r2, r3
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	2208      	movs	r2, #8
 800d94a:	60da      	str	r2, [r3, #12]

  return 0;
 800d94c:	2300      	movs	r3, #0

}
 800d94e:	4618      	mov	r0, r3
 800d950:	3718      	adds	r7, #24
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b088      	sub	sp, #32
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	60f8      	str	r0, [r7, #12]
 800d95e:	460b      	mov	r3, r1
 800d960:	607a      	str	r2, [r7, #4]
 800d962:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d96a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	69ba      	ldr	r2, [r7, #24]
 800d976:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800d97a:	69ba      	ldr	r2, [r7, #24]
 800d97c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800d980:	7af8      	ldrb	r0, [r7, #11]
 800d982:	4798      	blx	r3
 800d984:	4603      	mov	r3, r0
 800d986:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d988:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d104      	bne.n	800d99a <SCSI_ReadCapacity16+0x44>
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d996:	2b02      	cmp	r3, #2
 800d998:	d108      	bne.n	800d9ac <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d99a:	7af9      	ldrb	r1, [r7, #11]
 800d99c:	233a      	movs	r3, #58	; 0x3a
 800d99e:	2202      	movs	r2, #2
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f000 f9ae 	bl	800dd02 <SCSI_SenseCode>
    return -1;
 800d9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9aa:	e074      	b.n	800da96 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	330a      	adds	r3, #10
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	330b      	adds	r3, #11
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d9bc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	330c      	adds	r3, #12
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800d9c6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	320d      	adds	r2, #13
 800d9cc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800d9ce:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	77fb      	strb	r3, [r7, #31]
 800d9d8:	e007      	b.n	800d9ea <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800d9da:	7ffb      	ldrb	r3, [r7, #31]
 800d9dc:	69ba      	ldr	r2, [r7, #24]
 800d9de:	4413      	add	r3, r2
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d9e4:	7ffb      	ldrb	r3, [r7, #31]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	77fb      	strb	r3, [r7, #31]
 800d9ea:	7ffa      	ldrb	r2, [r7, #31]
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d3f2      	bcc.n	800d9da <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d9fa:	3b01      	subs	r3, #1
 800d9fc:	0e1b      	lsrs	r3, r3, #24
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800da0a:	3b01      	subs	r3, #1
 800da0c:	0c1b      	lsrs	r3, r3, #16
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800da1a:	3b01      	subs	r3, #1
 800da1c:	0a1b      	lsrs	r3, r3, #8
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	3b01      	subs	r3, #1
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800da3a:	161b      	asrs	r3, r3, #24
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800da48:	141b      	asrs	r3, r3, #16
 800da4a:	b2da      	uxtb	r2, r3
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800da56:	0a1b      	lsrs	r3, r3, #8
 800da58:	b29b      	uxth	r3, r3
 800da5a:	b2da      	uxtb	r2, r3
 800da5c:	69bb      	ldr	r3, [r7, #24]
 800da5e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800da66:	b2da      	uxtb	r2, r3
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	330a      	adds	r3, #10
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	330b      	adds	r3, #11
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800da7c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	330c      	adds	r3, #12
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800da86:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	320d      	adds	r2, #13
 800da8c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800da8e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	60da      	str	r2, [r3, #12]

  return 0;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3720      	adds	r7, #32
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b088      	sub	sp, #32
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	60f8      	str	r0, [r7, #12]
 800daa6:	460b      	mov	r3, r1
 800daa8:	607a      	str	r2, [r7, #4]
 800daaa:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dab2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	f107 0214 	add.w	r2, r7, #20
 800dac0:	f107 0110 	add.w	r1, r7, #16
 800dac4:	7af8      	ldrb	r0, [r7, #11]
 800dac6:	4798      	blx	r3
 800dac8:	4603      	mov	r3, r0
 800daca:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dacc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d104      	bne.n	800dade <SCSI_ReadFormatCapacity+0x40>
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d108      	bne.n	800daf0 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dade:	7af9      	ldrb	r1, [r7, #11]
 800dae0:	233a      	movs	r3, #58	; 0x3a
 800dae2:	2202      	movs	r2, #2
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	f000 f90c 	bl	800dd02 <SCSI_SenseCode>
    return -1;
 800daea:	f04f 33ff 	mov.w	r3, #4294967295
 800daee:	e03e      	b.n	800db6e <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800daf0:	2300      	movs	r3, #0
 800daf2:	83fb      	strh	r3, [r7, #30]
 800daf4:	e007      	b.n	800db06 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800daf6:	8bfb      	ldrh	r3, [r7, #30]
 800daf8:	69ba      	ldr	r2, [r7, #24]
 800dafa:	4413      	add	r3, r2
 800dafc:	2200      	movs	r2, #0
 800dafe:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800db00:	8bfb      	ldrh	r3, [r7, #30]
 800db02:	3301      	adds	r3, #1
 800db04:	83fb      	strh	r3, [r7, #30]
 800db06:	8bfb      	ldrh	r3, [r7, #30]
 800db08:	2b0b      	cmp	r3, #11
 800db0a:	d9f4      	bls.n	800daf6 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	2208      	movs	r2, #8
 800db10:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	3b01      	subs	r3, #1
 800db16:	0e1b      	lsrs	r3, r3, #24
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	3b01      	subs	r3, #1
 800db22:	0c1b      	lsrs	r3, r3, #16
 800db24:	b2da      	uxtb	r2, r3
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	3b01      	subs	r3, #1
 800db2e:	0a1b      	lsrs	r3, r3, #8
 800db30:	b2da      	uxtb	r2, r3
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	3b01      	subs	r3, #1
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	2202      	movs	r2, #2
 800db46:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800db48:	8abb      	ldrh	r3, [r7, #20]
 800db4a:	141b      	asrs	r3, r3, #16
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800db52:	8abb      	ldrh	r3, [r7, #20]
 800db54:	0a1b      	lsrs	r3, r3, #8
 800db56:	b29b      	uxth	r3, r3
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800db5e:	8abb      	ldrh	r3, [r7, #20]
 800db60:	b2da      	uxtb	r2, r3
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	220c      	movs	r2, #12
 800db6a:	60da      	str	r2, [r3, #12]

  return 0;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3720      	adds	r7, #32
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
	...

0800db78 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b086      	sub	sp, #24
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	460b      	mov	r3, r1
 800db82:	607a      	str	r2, [r7, #4]
 800db84:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db8c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800db8e:	2317      	movs	r3, #23
 800db90:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	3304      	adds	r3, #4
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	b29b      	uxth	r3, r3
 800db9a:	8afa      	ldrh	r2, [r7, #22]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d303      	bcc.n	800dba8 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	3304      	adds	r3, #4
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800dba8:	8afb      	ldrh	r3, [r7, #22]
 800dbaa:	461a      	mov	r2, r3
 800dbac:	4904      	ldr	r1, [pc, #16]	; (800dbc0 <SCSI_ModeSense6+0x48>)
 800dbae:	6938      	ldr	r0, [r7, #16]
 800dbb0:	f000 fd70 	bl	800e694 <SCSI_UpdateBotData>

  return 0;
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3718      	adds	r7, #24
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	240000c4 	.word	0x240000c4

0800dbc4 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b086      	sub	sp, #24
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	460b      	mov	r3, r1
 800dbce:	607a      	str	r2, [r7, #4]
 800dbd0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbd8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800dbda:	231b      	movs	r3, #27
 800dbdc:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	3308      	adds	r3, #8
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	8afa      	ldrh	r2, [r7, #22]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d303      	bcc.n	800dbf4 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	3308      	adds	r3, #8
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800dbf4:	8afb      	ldrh	r3, [r7, #22]
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	4904      	ldr	r1, [pc, #16]	; (800dc0c <SCSI_ModeSense10+0x48>)
 800dbfa:	6938      	ldr	r0, [r7, #16]
 800dbfc:	f000 fd4a 	bl	800e694 <SCSI_UpdateBotData>

  return 0;
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3718      	adds	r7, #24
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	240000dc 	.word	0x240000dc

0800dc10 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	607a      	str	r2, [r7, #4]
 800dc1c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc24:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10a      	bne.n	800dc46 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dc36:	2320      	movs	r3, #32
 800dc38:	2205      	movs	r2, #5
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f000 f861 	bl	800dd02 <SCSI_SenseCode>
    return -1;
 800dc40:	f04f 33ff 	mov.w	r3, #4294967295
 800dc44:	e059      	b.n	800dcfa <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dc46:	2300      	movs	r3, #0
 800dc48:	75fb      	strb	r3, [r7, #23]
 800dc4a:	e007      	b.n	800dc5c <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800dc4c:	7dfb      	ldrb	r3, [r7, #23]
 800dc4e:	693a      	ldr	r2, [r7, #16]
 800dc50:	4413      	add	r3, r2
 800dc52:	2200      	movs	r2, #0
 800dc54:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dc56:	7dfb      	ldrb	r3, [r7, #23]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	75fb      	strb	r3, [r7, #23]
 800dc5c:	7dfb      	ldrb	r3, [r7, #23]
 800dc5e:	2b11      	cmp	r3, #17
 800dc60:	d9f4      	bls.n	800dc4c <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	2270      	movs	r2, #112	; 0x70
 800dc66:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	220c      	movs	r2, #12
 800dc6c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d02e      	beq.n	800dcdc <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc84:	461a      	mov	r2, r3
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	3248      	adds	r2, #72	; 0x48
 800dc8a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc98:	693a      	ldr	r2, [r7, #16]
 800dc9a:	3348      	adds	r3, #72	; 0x48
 800dc9c:	00db      	lsls	r3, r3, #3
 800dc9e:	4413      	add	r3, r2
 800dca0:	791a      	ldrb	r2, [r3, #4]
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	3348      	adds	r3, #72	; 0x48
 800dcb0:	00db      	lsls	r3, r3, #3
 800dcb2:	4413      	add	r3, r2
 800dcb4:	795a      	ldrb	r2, [r3, #5]
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	b2da      	uxtb	r2, r3
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dcd0:	2b04      	cmp	r3, #4
 800dcd2:	d103      	bne.n	800dcdc <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	2212      	movs	r2, #18
 800dce0:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	3304      	adds	r3, #4
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	2b12      	cmp	r3, #18
 800dcea:	d805      	bhi.n	800dcf8 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	3304      	adds	r3, #4
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800dd02:	b480      	push	{r7}
 800dd04:	b085      	sub	sp, #20
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	4608      	mov	r0, r1
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	461a      	mov	r2, r3
 800dd10:	4603      	mov	r3, r0
 800dd12:	70fb      	strb	r3, [r7, #3]
 800dd14:	460b      	mov	r3, r1
 800dd16:	70bb      	strb	r3, [r7, #2]
 800dd18:	4613      	mov	r3, r2
 800dd1a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd22:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	3248      	adds	r2, #72	; 0x48
 800dd30:	78b9      	ldrb	r1, [r7, #2]
 800dd32:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	3348      	adds	r3, #72	; 0x48
 800dd40:	00db      	lsls	r3, r3, #3
 800dd42:	4413      	add	r3, r2
 800dd44:	787a      	ldrb	r2, [r7, #1]
 800dd46:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	3348      	adds	r3, #72	; 0x48
 800dd52:	00db      	lsls	r3, r3, #3
 800dd54:	4413      	add	r3, r2
 800dd56:	2200      	movs	r2, #0
 800dd58:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd60:	3301      	adds	r3, #1
 800dd62:	b2da      	uxtb	r2, r3
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd70:	2b04      	cmp	r3, #4
 800dd72:	d103      	bne.n	800dd7c <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800dd7c:	bf00      	nop
 800dd7e:	3714      	adds	r7, #20
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	460b      	mov	r3, r1
 800dd92:	607a      	str	r2, [r7, #4]
 800dd94:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd9c:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d10f      	bne.n	800ddc8 <SCSI_StartStopUnit+0x40>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	3304      	adds	r3, #4
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	f003 0303 	and.w	r3, r3, #3
 800ddb2:	2b02      	cmp	r3, #2
 800ddb4:	d108      	bne.n	800ddc8 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ddb6:	7af9      	ldrb	r1, [r7, #11]
 800ddb8:	2324      	movs	r3, #36	; 0x24
 800ddba:	2205      	movs	r2, #5
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f7ff ffa0 	bl	800dd02 <SCSI_SenseCode>

    return -1;
 800ddc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc6:	e026      	b.n	800de16 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	3304      	adds	r3, #4
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	f003 0303 	and.w	r3, r3, #3
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d104      	bne.n	800dde0 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ddde:	e016      	b.n	800de0e <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	3304      	adds	r3, #4
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	f003 0303 	and.w	r3, r3, #3
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	d104      	bne.n	800ddf8 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	2202      	movs	r2, #2
 800ddf2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ddf6:	e00a      	b.n	800de0e <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	f003 0303 	and.w	r3, r3, #3
 800de02:	2b03      	cmp	r3, #3
 800de04:	d103      	bne.n	800de0e <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	2200      	movs	r2, #0
 800de0a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2200      	movs	r2, #0
 800de12:	60da      	str	r2, [r3, #12]

  return 0;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3718      	adds	r7, #24
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de1e:	b480      	push	{r7}
 800de20:	b087      	sub	sp, #28
 800de22:	af00      	add	r7, sp, #0
 800de24:	60f8      	str	r0, [r7, #12]
 800de26:	460b      	mov	r3, r1
 800de28:	607a      	str	r2, [r7, #4]
 800de2a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de32:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	3304      	adds	r3, #4
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d104      	bne.n	800de48 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800de46:	e003      	b.n	800de50 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	2201      	movs	r2, #1
 800de4c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	2200      	movs	r2, #0
 800de54:	60da      	str	r2, [r3, #12]

  return 0;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	371c      	adds	r7, #28
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b086      	sub	sp, #24
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	460b      	mov	r3, r1
 800de6e:	607a      	str	r2, [r7, #4]
 800de70:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de78:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	7a1b      	ldrb	r3, [r3, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d17c      	bne.n	800df7c <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800de88:	b25b      	sxtb	r3, r3
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	db0a      	blt.n	800dea4 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800de94:	2320      	movs	r3, #32
 800de96:	2205      	movs	r2, #5
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f7ff ff32 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800de9e:	f04f 33ff 	mov.w	r3, #4294967295
 800dea2:	e075      	b.n	800df90 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800deaa:	2b02      	cmp	r3, #2
 800deac:	d108      	bne.n	800dec0 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800deae:	7af9      	ldrb	r1, [r7, #11]
 800deb0:	233a      	movs	r3, #58	; 0x3a
 800deb2:	2202      	movs	r2, #2
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f7ff ff24 	bl	800dd02 <SCSI_SenseCode>

      return -1;
 800deba:	f04f 33ff 	mov.w	r3, #4294967295
 800debe:	e067      	b.n	800df90 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	7afa      	ldrb	r2, [r7, #11]
 800deca:	4610      	mov	r0, r2
 800decc:	4798      	blx	r3
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d008      	beq.n	800dee6 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ded4:	7af9      	ldrb	r1, [r7, #11]
 800ded6:	233a      	movs	r3, #58	; 0x3a
 800ded8:	2202      	movs	r2, #2
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f7ff ff11 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800dee0:	f04f 33ff 	mov.w	r3, #4294967295
 800dee4:	e054      	b.n	800df90 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	3302      	adds	r3, #2
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	3303      	adds	r3, #3
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800def6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	3304      	adds	r3, #4
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800df00:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	3205      	adds	r2, #5
 800df06:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800df08:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	3307      	adds	r3, #7
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	021b      	lsls	r3, r3, #8
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	3208      	adds	r2, #8
 800df1c:	7812      	ldrb	r2, [r2, #0]
 800df1e:	431a      	orrs	r2, r3
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800df32:	7af9      	ldrb	r1, [r7, #11]
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f000 fa95 	bl	800e464 <SCSI_CheckAddressRange>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	da02      	bge.n	800df46 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800df40:	f04f 33ff 	mov.w	r3, #4294967295
 800df44:	e024      	b.n	800df90 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800df52:	6979      	ldr	r1, [r7, #20]
 800df54:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800df58:	fb01 f303 	mul.w	r3, r1, r3
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d00a      	beq.n	800df76 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800df66:	2320      	movs	r3, #32
 800df68:	2205      	movs	r2, #5
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f7ff fec9 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800df70:	f04f 33ff 	mov.w	r3, #4294967295
 800df74:	e00c      	b.n	800df90 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	2202      	movs	r2, #2
 800df7a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df82:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800df84:	7afb      	ldrb	r3, [r7, #11]
 800df86:	4619      	mov	r1, r3
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f000 fa8d 	bl	800e4a8 <SCSI_ProcessRead>
 800df8e:	4603      	mov	r3, r0
}
 800df90:	4618      	mov	r0, r3
 800df92:	3718      	adds	r7, #24
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b086      	sub	sp, #24
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	607a      	str	r2, [r7, #4]
 800dfa4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfac:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	7a1b      	ldrb	r3, [r3, #8]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f040 8087 	bne.w	800e0c6 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800dfbe:	b25b      	sxtb	r3, r3
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	db0a      	blt.n	800dfda <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dfca:	2320      	movs	r3, #32
 800dfcc:	2205      	movs	r2, #5
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f7ff fe97 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800dfd4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfd8:	e07f      	b.n	800e0da <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d108      	bne.n	800dff6 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dfe4:	7af9      	ldrb	r1, [r7, #11]
 800dfe6:	233a      	movs	r3, #58	; 0x3a
 800dfe8:	2202      	movs	r2, #2
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f7ff fe89 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800dff0:	f04f 33ff 	mov.w	r3, #4294967295
 800dff4:	e071      	b.n	800e0da <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dffc:	689b      	ldr	r3, [r3, #8]
 800dffe:	7afa      	ldrb	r2, [r7, #11]
 800e000:	4610      	mov	r0, r2
 800e002:	4798      	blx	r3
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d008      	beq.n	800e01c <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e00a:	7af9      	ldrb	r1, [r7, #11]
 800e00c:	233a      	movs	r3, #58	; 0x3a
 800e00e:	2202      	movs	r2, #2
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f7ff fe76 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800e016:	f04f 33ff 	mov.w	r3, #4294967295
 800e01a:	e05e      	b.n	800e0da <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	3302      	adds	r3, #2
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	3303      	adds	r3, #3
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e02c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	3304      	adds	r3, #4
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e036:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	3205      	adds	r2, #5
 800e03c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e03e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	3306      	adds	r3, #6
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	3307      	adds	r3, #7
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e056:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	3308      	adds	r3, #8
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e060:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	3209      	adds	r2, #9
 800e066:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e068:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e07c:	7af9      	ldrb	r1, [r7, #11]
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f000 f9f0 	bl	800e464 <SCSI_CheckAddressRange>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	da02      	bge.n	800e090 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e08a:	f04f 33ff 	mov.w	r3, #4294967295
 800e08e:	e024      	b.n	800e0da <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e09c:	6979      	ldr	r1, [r7, #20]
 800e09e:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800e0a2:	fb01 f303 	mul.w	r3, r1, r3
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d00a      	beq.n	800e0c0 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e0b0:	2320      	movs	r3, #32
 800e0b2:	2205      	movs	r2, #5
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f7ff fe24 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800e0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e0be:	e00c      	b.n	800e0da <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	2202      	movs	r2, #2
 800e0c4:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0cc:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e0ce:	7afb      	ldrb	r3, [r7, #11]
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	f000 f9e8 	bl	800e4a8 <SCSI_ProcessRead>
 800e0d8:	4603      	mov	r3, r0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3718      	adds	r7, #24
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e0e2:	b580      	push	{r7, lr}
 800e0e4:	b086      	sub	sp, #24
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	60f8      	str	r0, [r7, #12]
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	607a      	str	r2, [r7, #4]
 800e0ee:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0f6:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	7a1b      	ldrb	r3, [r3, #8]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	f040 80a5 	bne.w	800e24c <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10a      	bne.n	800e122 <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e112:	2320      	movs	r3, #32
 800e114:	2205      	movs	r2, #5
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	f7ff fdf3 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800e11c:	f04f 33ff 	mov.w	r3, #4294967295
 800e120:	e09a      	b.n	800e258 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e128:	b25b      	sxtb	r3, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	da0a      	bge.n	800e144 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e134:	2320      	movs	r3, #32
 800e136:	2205      	movs	r2, #5
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f7ff fde2 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800e13e:	f04f 33ff 	mov.w	r3, #4294967295
 800e142:	e089      	b.n	800e258 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	7afa      	ldrb	r2, [r7, #11]
 800e14e:	4610      	mov	r0, r2
 800e150:	4798      	blx	r3
 800e152:	4603      	mov	r3, r0
 800e154:	2b00      	cmp	r3, #0
 800e156:	d008      	beq.n	800e16a <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e158:	7af9      	ldrb	r1, [r7, #11]
 800e15a:	233a      	movs	r3, #58	; 0x3a
 800e15c:	2202      	movs	r2, #2
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f7ff fdcf 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800e164:	f04f 33ff 	mov.w	r3, #4294967295
 800e168:	e076      	b.n	800e258 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	7afa      	ldrb	r2, [r7, #11]
 800e174:	4610      	mov	r0, r2
 800e176:	4798      	blx	r3
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d008      	beq.n	800e190 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e17e:	7af9      	ldrb	r1, [r7, #11]
 800e180:	2327      	movs	r3, #39	; 0x27
 800e182:	2202      	movs	r2, #2
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f7ff fdbc 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800e18a:	f04f 33ff 	mov.w	r3, #4294967295
 800e18e:	e063      	b.n	800e258 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	3302      	adds	r3, #2
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	3303      	adds	r3, #3
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1a0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e1aa:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	3205      	adds	r2, #5
 800e1b0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e1b2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	3307      	adds	r3, #7
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	3208      	adds	r2, #8
 800e1c6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e1c8:	431a      	orrs	r2, r3
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e1dc:	7af9      	ldrb	r1, [r7, #11]
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f000 f940 	bl	800e464 <SCSI_CheckAddressRange>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	da02      	bge.n	800e1f0 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ee:	e033      	b.n	800e258 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e1f6:	697a      	ldr	r2, [r7, #20]
 800e1f8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e1fc:	fb02 f303 	mul.w	r3, r2, r3
 800e200:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e208:	693a      	ldr	r2, [r7, #16]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d00a      	beq.n	800e224 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e214:	2320      	movs	r3, #32
 800e216:	2205      	movs	r2, #5
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f7ff fd72 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800e21e:	f04f 33ff 	mov.w	r3, #4294967295
 800e222:	e019      	b.n	800e258 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e22a:	bf28      	it	cs
 800e22c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e230:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	2201      	movs	r2, #1
 800e236:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	f103 0210 	add.w	r2, r3, #16
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	2101      	movs	r1, #1
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f004 f981 	bl	801254a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e248:	2300      	movs	r3, #0
 800e24a:	e005      	b.n	800e258 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800e24c:	7afb      	ldrb	r3, [r7, #11]
 800e24e:	4619      	mov	r1, r3
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f000 f99c 	bl	800e58e <SCSI_ProcessWrite>
 800e256:	4603      	mov	r3, r0
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3718      	adds	r7, #24
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	460b      	mov	r3, r1
 800e26a:	607a      	str	r2, [r7, #4]
 800e26c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e274:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	7a1b      	ldrb	r3, [r3, #8]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	f040 80b5 	bne.w	800e3ea <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10a      	bne.n	800e2a0 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e290:	2320      	movs	r3, #32
 800e292:	2205      	movs	r2, #5
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f7ff fd34 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800e29a:	f04f 33ff 	mov.w	r3, #4294967295
 800e29e:	e0aa      	b.n	800e3f6 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e2a6:	b25b      	sxtb	r3, r3
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	da0a      	bge.n	800e2c2 <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e2b2:	2320      	movs	r3, #32
 800e2b4:	2205      	movs	r2, #5
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f7ff fd23 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800e2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c0:	e099      	b.n	800e3f6 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	7afa      	ldrb	r2, [r7, #11]
 800e2cc:	4610      	mov	r0, r2
 800e2ce:	4798      	blx	r3
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00b      	beq.n	800e2ee <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e2d6:	7af9      	ldrb	r1, [r7, #11]
 800e2d8:	233a      	movs	r3, #58	; 0x3a
 800e2da:	2202      	movs	r2, #2
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	f7ff fd10 	bl	800dd02 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	2205      	movs	r2, #5
 800e2e6:	721a      	strb	r2, [r3, #8]
      return -1;
 800e2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ec:	e083      	b.n	800e3f6 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2f4:	68db      	ldr	r3, [r3, #12]
 800e2f6:	7afa      	ldrb	r2, [r7, #11]
 800e2f8:	4610      	mov	r0, r2
 800e2fa:	4798      	blx	r3
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d00b      	beq.n	800e31a <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e302:	7af9      	ldrb	r1, [r7, #11]
 800e304:	2327      	movs	r3, #39	; 0x27
 800e306:	2202      	movs	r2, #2
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f7ff fcfa 	bl	800dd02 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	2205      	movs	r2, #5
 800e312:	721a      	strb	r2, [r3, #8]
      return -1;
 800e314:	f04f 33ff 	mov.w	r3, #4294967295
 800e318:	e06d      	b.n	800e3f6 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	3302      	adds	r3, #2
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	3303      	adds	r3, #3
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e32a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3304      	adds	r3, #4
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e334:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	3205      	adds	r2, #5
 800e33a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e33c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	3306      	adds	r3, #6
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	3307      	adds	r3, #7
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e354:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	3308      	adds	r3, #8
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e35e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	3209      	adds	r2, #9
 800e364:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e366:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e37a:	7af9      	ldrb	r1, [r7, #11]
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f000 f871 	bl	800e464 <SCSI_CheckAddressRange>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	da02      	bge.n	800e38e <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e388:	f04f 33ff 	mov.w	r3, #4294967295
 800e38c:	e033      	b.n	800e3f6 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e394:	697a      	ldr	r2, [r7, #20]
 800e396:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e39a:	fb02 f303 	mul.w	r3, r2, r3
 800e39e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e3a6:	693a      	ldr	r2, [r7, #16]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d00a      	beq.n	800e3c2 <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e3b2:	2320      	movs	r3, #32
 800e3b4:	2205      	movs	r2, #5
 800e3b6:	68f8      	ldr	r0, [r7, #12]
 800e3b8:	f7ff fca3 	bl	800dd02 <SCSI_SenseCode>
      return -1;
 800e3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c0:	e019      	b.n	800e3f6 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3c8:	bf28      	it	cs
 800e3ca:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e3ce:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	f103 0210 	add.w	r2, r3, #16
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	2101      	movs	r1, #1
 800e3e0:	68f8      	ldr	r0, [r7, #12]
 800e3e2:	f004 f8b2 	bl	801254a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	e005      	b.n	800e3f6 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800e3ea:	7afb      	ldrb	r3, [r7, #11]
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f000 f8cd 	bl	800e58e <SCSI_ProcessWrite>
 800e3f4:	4603      	mov	r3, r0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3718      	adds	r7, #24
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b086      	sub	sp, #24
 800e402:	af00      	add	r7, sp, #0
 800e404:	60f8      	str	r0, [r7, #12]
 800e406:	460b      	mov	r3, r1
 800e408:	607a      	str	r2, [r7, #4]
 800e40a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e412:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	3301      	adds	r3, #1
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	f003 0302 	and.w	r3, r3, #2
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d008      	beq.n	800e434 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e422:	7af9      	ldrb	r1, [r7, #11]
 800e424:	2324      	movs	r3, #36	; 0x24
 800e426:	2205      	movs	r2, #5
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f7ff fc6a 	bl	800dd02 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e42e:	f04f 33ff 	mov.w	r3, #4294967295
 800e432:	e013      	b.n	800e45c <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e440:	7af9      	ldrb	r1, [r7, #11]
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f000 f80e 	bl	800e464 <SCSI_CheckAddressRange>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	da02      	bge.n	800e454 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800e44e:	f04f 33ff 	mov.w	r3, #4294967295
 800e452:	e003      	b.n	800e45c <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	2200      	movs	r2, #0
 800e458:	60da      	str	r2, [r3, #12]

  return 0;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3718      	adds	r7, #24
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b086      	sub	sp, #24
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	607a      	str	r2, [r7, #4]
 800e46e:	603b      	str	r3, [r7, #0]
 800e470:	460b      	mov	r3, r1
 800e472:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e47a:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	441a      	add	r2, r3
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e488:	429a      	cmp	r2, r3
 800e48a:	d908      	bls.n	800e49e <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e48c:	7af9      	ldrb	r1, [r7, #11]
 800e48e:	2321      	movs	r3, #33	; 0x21
 800e490:	2205      	movs	r2, #5
 800e492:	68f8      	ldr	r0, [r7, #12]
 800e494:	f7ff fc35 	bl	800dd02 <SCSI_SenseCode>
    return -1;
 800e498:	f04f 33ff 	mov.w	r3, #4294967295
 800e49c:	e000      	b.n	800e4a0 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800e49e:	2300      	movs	r3, #0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3718      	adds	r7, #24
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e4a8:	b590      	push	{r4, r7, lr}
 800e4aa:	b085      	sub	sp, #20
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4ba:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e4c8:	fb02 f303 	mul.w	r3, r2, r3
 800e4cc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4d4:	bf28      	it	cs
 800e4d6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e4da:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4e2:	691c      	ldr	r4, [r3, #16]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f103 0110 	add.w	r1, r3, #16
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	78f8      	ldrb	r0, [r7, #3]
 800e502:	47a0      	blx	r4
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	da08      	bge.n	800e51c <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e50a:	78f9      	ldrb	r1, [r7, #3]
 800e50c:	2311      	movs	r3, #17
 800e50e:	2204      	movs	r2, #4
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7ff fbf6 	bl	800dd02 <SCSI_SenseCode>
    return -1;
 800e516:	f04f 33ff 	mov.w	r3, #4294967295
 800e51a:	e034      	b.n	800e586 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f103 0210 	add.w	r2, r3, #16
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	2181      	movs	r1, #129	; 0x81
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f003 ffee 	bl	8012508 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e538:	4619      	mov	r1, r3
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e540:	441a      	add	r2, r3
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e554:	4619      	mov	r1, r3
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	fbb3 f3f1 	udiv	r3, r3, r1
 800e55c:	1ad2      	subs	r2, r2, r3
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	1ad2      	subs	r2, r2, r3
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d102      	bne.n	800e584 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2203      	movs	r2, #3
 800e582:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3714      	adds	r7, #20
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd90      	pop	{r4, r7, pc}

0800e58e <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e58e:	b590      	push	{r4, r7, lr}
 800e590:	b085      	sub	sp, #20
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
 800e596:	460b      	mov	r3, r1
 800e598:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5a0:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e5ae:	fb02 f303 	mul.w	r3, r2, r3
 800e5b2:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5ba:	bf28      	it	cs
 800e5bc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e5c0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5c8:	695c      	ldr	r4, [r3, #20]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f103 0110 	add.w	r1, r3, #16
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e5dc:	4618      	mov	r0, r3
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	78f8      	ldrb	r0, [r7, #3]
 800e5e8:	47a0      	blx	r4
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	da08      	bge.n	800e602 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e5f0:	78f9      	ldrb	r1, [r7, #3]
 800e5f2:	2303      	movs	r3, #3
 800e5f4:	2204      	movs	r2, #4
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7ff fb83 	bl	800dd02 <SCSI_SenseCode>
    return -1;
 800e5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e600:	e044      	b.n	800e68c <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e60e:	4619      	mov	r1, r3
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	fbb3 f3f1 	udiv	r3, r3, r1
 800e616:	441a      	add	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e62a:	4619      	mov	r1, r3
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e632:	1ad2      	subs	r2, r2, r3
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	1ad2      	subs	r2, r2, r3
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e650:	2b00      	cmp	r3, #0
 800e652:	d104      	bne.n	800e65e <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e654:	2100      	movs	r1, #0
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7fe ff04 	bl	800d464 <MSC_BOT_SendCSW>
 800e65c:	e015      	b.n	800e68a <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e66a:	fb02 f303 	mul.w	r3, r2, r3
 800e66e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e672:	bf28      	it	cs
 800e674:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e678:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f103 0210 	add.w	r2, r3, #16
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	2101      	movs	r1, #1
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f003 ff60 	bl	801254a <USBD_LL_PrepareReceive>
  }

  return 0;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3714      	adds	r7, #20
 800e690:	46bd      	mov	sp, r7
 800e692:	bd90      	pop	{r4, r7, pc}

0800e694 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800e694:	b480      	push	{r7}
 800e696:	b087      	sub	sp, #28
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	4613      	mov	r3, r2
 800e6a0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800e6a2:	88fb      	ldrh	r3, [r7, #6]
 800e6a4:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800e6a6:	8afa      	ldrh	r2, [r7, #22]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800e6ac:	e00b      	b.n	800e6c6 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800e6ae:	8afb      	ldrh	r3, [r7, #22]
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800e6b4:	8afb      	ldrh	r3, [r7, #22]
 800e6b6:	68ba      	ldr	r2, [r7, #8]
 800e6b8:	441a      	add	r2, r3
 800e6ba:	8afb      	ldrh	r3, [r7, #22]
 800e6bc:	7811      	ldrb	r1, [r2, #0]
 800e6be:	68fa      	ldr	r2, [r7, #12]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	460a      	mov	r2, r1
 800e6c4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800e6c6:	8afb      	ldrh	r3, [r7, #22]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d1f0      	bne.n	800e6ae <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800e6cc:	2300      	movs	r3, #0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	371c      	adds	r7, #28
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr

0800e6da <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	b086      	sub	sp, #24
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	60f8      	str	r0, [r7, #12]
 800e6e2:	60b9      	str	r1, [r7, #8]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d101      	bne.n	800e6f2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e6ee:	2303      	movs	r3, #3
 800e6f0:	e025      	b.n	800e73e <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d003      	beq.n	800e704 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2200      	movs	r2, #0
 800e700:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d003      	beq.n	800e716 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d003      	beq.n	800e724 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2201      	movs	r2, #1
 800e728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	79fa      	ldrb	r2, [r7, #7]
 800e730:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f003 fd90 	bl	8012258 <USBD_LL_Init>
 800e738:	4603      	mov	r3, r0
 800e73a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3718      	adds	r7, #24
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b084      	sub	sp, #16
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
 800e74e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e750:	2300      	movs	r3, #0
 800e752:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d101      	bne.n	800e75e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e75a:	2303      	movs	r3, #3
 800e75c:	e010      	b.n	800e780 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	683a      	ldr	r2, [r7, #0]
 800e762:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e76e:	f107 020e 	add.w	r2, r7, #14
 800e772:	4610      	mov	r0, r2
 800e774:	4798      	blx	r3
 800e776:	4602      	mov	r2, r0
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e77e:	2300      	movs	r3, #0
}
 800e780:	4618      	mov	r0, r3
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f003 fdb1 	bl	80122f8 <USBD_LL_Start>
 800e796:	4603      	mov	r3, r0
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	370c      	adds	r7, #12
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr

0800e7b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b084      	sub	sp, #16
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
 800e7be:	460b      	mov	r3, r1
 800e7c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e7c2:	2303      	movs	r3, #3
 800e7c4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d009      	beq.n	800e7e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	78fa      	ldrb	r2, [r7, #3]
 800e7da:	4611      	mov	r1, r2
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	4798      	blx	r3
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b082      	sub	sp, #8
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e800:	2b00      	cmp	r3, #0
 800e802:	d007      	beq.n	800e814 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	78fa      	ldrb	r2, [r7, #3]
 800e80e:	4611      	mov	r1, r2
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	4798      	blx	r3
  }

  return USBD_OK;
 800e814:	2300      	movs	r3, #0
}
 800e816:	4618      	mov	r0, r3
 800e818:	3708      	adds	r7, #8
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}

0800e81e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e81e:	b580      	push	{r7, lr}
 800e820:	b084      	sub	sp, #16
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
 800e826:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e82e:	6839      	ldr	r1, [r7, #0]
 800e830:	4618      	mov	r0, r3
 800e832:	f000 ff2b 	bl	800f68c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2201      	movs	r2, #1
 800e83a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e844:	461a      	mov	r2, r3
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e852:	f003 031f 	and.w	r3, r3, #31
 800e856:	2b01      	cmp	r3, #1
 800e858:	d00e      	beq.n	800e878 <USBD_LL_SetupStage+0x5a>
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d302      	bcc.n	800e864 <USBD_LL_SetupStage+0x46>
 800e85e:	2b02      	cmp	r3, #2
 800e860:	d014      	beq.n	800e88c <USBD_LL_SetupStage+0x6e>
 800e862:	e01d      	b.n	800e8a0 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e86a:	4619      	mov	r1, r3
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fa17 	bl	800eca0 <USBD_StdDevReq>
 800e872:	4603      	mov	r3, r0
 800e874:	73fb      	strb	r3, [r7, #15]
      break;
 800e876:	e020      	b.n	800e8ba <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 fa7b 	bl	800ed7c <USBD_StdItfReq>
 800e886:	4603      	mov	r3, r0
 800e888:	73fb      	strb	r3, [r7, #15]
      break;
 800e88a:	e016      	b.n	800e8ba <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e892:	4619      	mov	r1, r3
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 fab7 	bl	800ee08 <USBD_StdEPReq>
 800e89a:	4603      	mov	r3, r0
 800e89c:	73fb      	strb	r3, [r7, #15]
      break;
 800e89e:	e00c      	b.n	800e8ba <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e8a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f003 fda1 	bl	80123f6 <USBD_LL_StallEP>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	73fb      	strb	r3, [r7, #15]
      break;
 800e8b8:	bf00      	nop
  }

  return ret;
 800e8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3710      	adds	r7, #16
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	607a      	str	r2, [r7, #4]
 800e8d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e8d2:	7afb      	ldrb	r3, [r7, #11]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d137      	bne.n	800e948 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e8de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e8e6:	2b03      	cmp	r3, #3
 800e8e8:	d14a      	bne.n	800e980 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	689a      	ldr	r2, [r3, #8]
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d913      	bls.n	800e91e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	689a      	ldr	r2, [r3, #8]
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	1ad2      	subs	r2, r2, r3
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	68da      	ldr	r2, [r3, #12]
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	4293      	cmp	r3, r2
 800e90e:	bf28      	it	cs
 800e910:	4613      	movcs	r3, r2
 800e912:	461a      	mov	r2, r3
 800e914:	6879      	ldr	r1, [r7, #4]
 800e916:	68f8      	ldr	r0, [r7, #12]
 800e918:	f000 ff8f 	bl	800f83a <USBD_CtlContinueRx>
 800e91c:	e030      	b.n	800e980 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e924:	691b      	ldr	r3, [r3, #16]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00a      	beq.n	800e940 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e930:	2b03      	cmp	r3, #3
 800e932:	d105      	bne.n	800e940 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f000 ff8b 	bl	800f85c <USBD_CtlSendStatus>
 800e946:	e01b      	b.n	800e980 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e94e:	699b      	ldr	r3, [r3, #24]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d013      	beq.n	800e97c <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e95a:	2b03      	cmp	r3, #3
 800e95c:	d10e      	bne.n	800e97c <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e964:	699b      	ldr	r3, [r3, #24]
 800e966:	7afa      	ldrb	r2, [r7, #11]
 800e968:	4611      	mov	r1, r2
 800e96a:	68f8      	ldr	r0, [r7, #12]
 800e96c:	4798      	blx	r3
 800e96e:	4603      	mov	r3, r0
 800e970:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e972:	7dfb      	ldrb	r3, [r7, #23]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d003      	beq.n	800e980 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e978:	7dfb      	ldrb	r3, [r7, #23]
 800e97a:	e002      	b.n	800e982 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e97c:	2303      	movs	r3, #3
 800e97e:	e000      	b.n	800e982 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3718      	adds	r7, #24
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b086      	sub	sp, #24
 800e98e:	af00      	add	r7, sp, #0
 800e990:	60f8      	str	r0, [r7, #12]
 800e992:	460b      	mov	r3, r1
 800e994:	607a      	str	r2, [r7, #4]
 800e996:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e998:	7afb      	ldrb	r3, [r7, #11]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d16a      	bne.n	800ea74 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	3314      	adds	r3, #20
 800e9a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e9aa:	2b02      	cmp	r3, #2
 800e9ac:	d155      	bne.n	800ea5a <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	689a      	ldr	r2, [r3, #8]
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d914      	bls.n	800e9e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	689a      	ldr	r2, [r3, #8]
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	1ad2      	subs	r2, r2, r3
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	6879      	ldr	r1, [r7, #4]
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f000 ff21 	bl	800f818 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	2200      	movs	r2, #0
 800e9da:	2100      	movs	r1, #0
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f003 fdb4 	bl	801254a <USBD_LL_PrepareReceive>
 800e9e2:	e03a      	b.n	800ea5a <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	68da      	ldr	r2, [r3, #12]
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d11c      	bne.n	800ea2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	685a      	ldr	r2, [r3, #4]
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d316      	bcc.n	800ea2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	685a      	ldr	r2, [r3, #4]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d20f      	bcs.n	800ea2a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f000 ff02 	bl	800f818 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2200      	movs	r2, #0
 800ea18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	2200      	movs	r2, #0
 800ea20:	2100      	movs	r1, #0
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f003 fd91 	bl	801254a <USBD_LL_PrepareReceive>
 800ea28:	e017      	b.n	800ea5a <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00a      	beq.n	800ea4c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ea3c:	2b03      	cmp	r3, #3
 800ea3e:	d105      	bne.n	800ea4c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea46:	68db      	ldr	r3, [r3, #12]
 800ea48:	68f8      	ldr	r0, [r7, #12]
 800ea4a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea4c:	2180      	movs	r1, #128	; 0x80
 800ea4e:	68f8      	ldr	r0, [r7, #12]
 800ea50:	f003 fcd1 	bl	80123f6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f000 ff14 	bl	800f882 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d123      	bne.n	800eaac <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f7ff fe9b 	bl	800e7a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ea72:	e01b      	b.n	800eaac <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea7a:	695b      	ldr	r3, [r3, #20]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d013      	beq.n	800eaa8 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ea86:	2b03      	cmp	r3, #3
 800ea88:	d10e      	bne.n	800eaa8 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea90:	695b      	ldr	r3, [r3, #20]
 800ea92:	7afa      	ldrb	r2, [r7, #11]
 800ea94:	4611      	mov	r1, r2
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	4798      	blx	r3
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ea9e:	7dfb      	ldrb	r3, [r7, #23]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d003      	beq.n	800eaac <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800eaa4:	7dfb      	ldrb	r3, [r7, #23]
 800eaa6:	e002      	b.n	800eaae <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800eaa8:	2303      	movs	r3, #3
 800eaaa:	e000      	b.n	800eaae <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800eaac:	2300      	movs	r3, #0
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3718      	adds	r7, #24
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b082      	sub	sp, #8
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2201      	movs	r2, #1
 800eac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d009      	beq.n	800eafa <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	6852      	ldr	r2, [r2, #4]
 800eaf2:	b2d2      	uxtb	r2, r2
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eafa:	2340      	movs	r3, #64	; 0x40
 800eafc:	2200      	movs	r2, #0
 800eafe:	2100      	movs	r1, #0
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f003 fc14 	bl	801232e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2201      	movs	r2, #1
 800eb0a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2240      	movs	r2, #64	; 0x40
 800eb12:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb16:	2340      	movs	r3, #64	; 0x40
 800eb18:	2200      	movs	r2, #0
 800eb1a:	2180      	movs	r1, #128	; 0x80
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f003 fc06 	bl	801232e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2201      	movs	r2, #1
 800eb26:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2240      	movs	r2, #64	; 0x40
 800eb2c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	460b      	mov	r3, r1
 800eb42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	78fa      	ldrb	r2, [r7, #3]
 800eb48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eb4a:	2300      	movs	r3, #0
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	370c      	adds	r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2204      	movs	r2, #4
 800eb70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eb82:	b480      	push	{r7}
 800eb84:	b083      	sub	sp, #12
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb90:	2b04      	cmp	r3, #4
 800eb92:	d105      	bne.n	800eba0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b082      	sub	sp, #8
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebbc:	2b03      	cmp	r3, #3
 800ebbe:	d10b      	bne.n	800ebd8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebc6:	69db      	ldr	r3, [r3, #28]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d005      	beq.n	800ebd8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebd2:	69db      	ldr	r3, [r3, #28]
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ebe2:	b480      	push	{r7}
 800ebe4:	b083      	sub	sp, #12
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
 800ebea:	460b      	mov	r3, r1
 800ebec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	460b      	mov	r3, r1
 800ec06:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ec08:	2300      	movs	r3, #0
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	370c      	adds	r7, #12
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr

0800ec16 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ec16:	b480      	push	{r7}
 800ec18:	b083      	sub	sp, #12
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2201      	movs	r2, #1
 800ec38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d009      	beq.n	800ec5a <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	6852      	ldr	r2, [r2, #4]
 800ec52:	b2d2      	uxtb	r2, r2
 800ec54:	4611      	mov	r1, r2
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	4798      	blx	r3
  }

  return USBD_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b087      	sub	sp, #28
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ec82:	8a3b      	ldrh	r3, [r7, #16]
 800ec84:	021b      	lsls	r3, r3, #8
 800ec86:	b21a      	sxth	r2, r3
 800ec88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	b21b      	sxth	r3, r3
 800ec90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ec92:	89fb      	ldrh	r3, [r7, #14]
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	371c      	adds	r7, #28
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecb6:	2b20      	cmp	r3, #32
 800ecb8:	d004      	beq.n	800ecc4 <USBD_StdDevReq+0x24>
 800ecba:	2b40      	cmp	r3, #64	; 0x40
 800ecbc:	d002      	beq.n	800ecc4 <USBD_StdDevReq+0x24>
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d00a      	beq.n	800ecd8 <USBD_StdDevReq+0x38>
 800ecc2:	e050      	b.n	800ed66 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	6839      	ldr	r1, [r7, #0]
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	4798      	blx	r3
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	73fb      	strb	r3, [r7, #15]
    break;
 800ecd6:	e04b      	b.n	800ed70 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	785b      	ldrb	r3, [r3, #1]
 800ecdc:	2b09      	cmp	r3, #9
 800ecde:	d83c      	bhi.n	800ed5a <USBD_StdDevReq+0xba>
 800ece0:	a201      	add	r2, pc, #4	; (adr r2, 800ece8 <USBD_StdDevReq+0x48>)
 800ece2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece6:	bf00      	nop
 800ece8:	0800ed3d 	.word	0x0800ed3d
 800ecec:	0800ed51 	.word	0x0800ed51
 800ecf0:	0800ed5b 	.word	0x0800ed5b
 800ecf4:	0800ed47 	.word	0x0800ed47
 800ecf8:	0800ed5b 	.word	0x0800ed5b
 800ecfc:	0800ed1b 	.word	0x0800ed1b
 800ed00:	0800ed11 	.word	0x0800ed11
 800ed04:	0800ed5b 	.word	0x0800ed5b
 800ed08:	0800ed33 	.word	0x0800ed33
 800ed0c:	0800ed25 	.word	0x0800ed25
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ed10:	6839      	ldr	r1, [r7, #0]
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f000 f9ce 	bl	800f0b4 <USBD_GetDescriptor>
      break;
 800ed18:	e024      	b.n	800ed64 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ed1a:	6839      	ldr	r1, [r7, #0]
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 fb33 	bl	800f388 <USBD_SetAddress>
      break;
 800ed22:	e01f      	b.n	800ed64 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ed24:	6839      	ldr	r1, [r7, #0]
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 fb70 	bl	800f40c <USBD_SetConfig>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ed30:	e018      	b.n	800ed64 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ed32:	6839      	ldr	r1, [r7, #0]
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 fc0d 	bl	800f554 <USBD_GetConfig>
      break;
 800ed3a:	e013      	b.n	800ed64 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ed3c:	6839      	ldr	r1, [r7, #0]
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 fc3c 	bl	800f5bc <USBD_GetStatus>
      break;
 800ed44:	e00e      	b.n	800ed64 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ed46:	6839      	ldr	r1, [r7, #0]
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f000 fc6a 	bl	800f622 <USBD_SetFeature>
      break;
 800ed4e:	e009      	b.n	800ed64 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ed50:	6839      	ldr	r1, [r7, #0]
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f000 fc79 	bl	800f64a <USBD_ClrFeature>
      break;
 800ed58:	e004      	b.n	800ed64 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ed5a:	6839      	ldr	r1, [r7, #0]
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f000 fccf 	bl	800f700 <USBD_CtlError>
      break;
 800ed62:	bf00      	nop
    }
    break;
 800ed64:	e004      	b.n	800ed70 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ed66:	6839      	ldr	r1, [r7, #0]
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 fcc9 	bl	800f700 <USBD_CtlError>
    break;
 800ed6e:	bf00      	nop
  }

  return ret;
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop

0800ed7c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed86:	2300      	movs	r3, #0
 800ed88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed92:	2b20      	cmp	r3, #32
 800ed94:	d003      	beq.n	800ed9e <USBD_StdItfReq+0x22>
 800ed96:	2b40      	cmp	r3, #64	; 0x40
 800ed98:	d001      	beq.n	800ed9e <USBD_StdItfReq+0x22>
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d12a      	bne.n	800edf4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eda4:	3b01      	subs	r3, #1
 800eda6:	2b02      	cmp	r3, #2
 800eda8:	d81d      	bhi.n	800ede6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	889b      	ldrh	r3, [r3, #4]
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d813      	bhi.n	800eddc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edba:	689b      	ldr	r3, [r3, #8]
 800edbc:	6839      	ldr	r1, [r7, #0]
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	4798      	blx	r3
 800edc2:	4603      	mov	r3, r0
 800edc4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	88db      	ldrh	r3, [r3, #6]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d110      	bne.n	800edf0 <USBD_StdItfReq+0x74>
 800edce:	7bfb      	ldrb	r3, [r7, #15]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d10d      	bne.n	800edf0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f000 fd41 	bl	800f85c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800edda:	e009      	b.n	800edf0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800eddc:	6839      	ldr	r1, [r7, #0]
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 fc8e 	bl	800f700 <USBD_CtlError>
      break;
 800ede4:	e004      	b.n	800edf0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f000 fc89 	bl	800f700 <USBD_CtlError>
      break;
 800edee:	e000      	b.n	800edf2 <USBD_StdItfReq+0x76>
      break;
 800edf0:	bf00      	nop
    }
    break;
 800edf2:	e004      	b.n	800edfe <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800edf4:	6839      	ldr	r1, [r7, #0]
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 fc82 	bl	800f700 <USBD_CtlError>
    break;
 800edfc:	bf00      	nop
  }

  return ret;
 800edfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ee12:	2300      	movs	r3, #0
 800ee14:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	889b      	ldrh	r3, [r3, #4]
 800ee1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee24:	2b20      	cmp	r3, #32
 800ee26:	d004      	beq.n	800ee32 <USBD_StdEPReq+0x2a>
 800ee28:	2b40      	cmp	r3, #64	; 0x40
 800ee2a:	d002      	beq.n	800ee32 <USBD_StdEPReq+0x2a>
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d00a      	beq.n	800ee46 <USBD_StdEPReq+0x3e>
 800ee30:	e135      	b.n	800f09e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee38:	689b      	ldr	r3, [r3, #8]
 800ee3a:	6839      	ldr	r1, [r7, #0]
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	4798      	blx	r3
 800ee40:	4603      	mov	r3, r0
 800ee42:	73fb      	strb	r3, [r7, #15]
    break;
 800ee44:	e130      	b.n	800f0a8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	785b      	ldrb	r3, [r3, #1]
 800ee4a:	2b01      	cmp	r3, #1
 800ee4c:	d03e      	beq.n	800eecc <USBD_StdEPReq+0xc4>
 800ee4e:	2b03      	cmp	r3, #3
 800ee50:	d002      	beq.n	800ee58 <USBD_StdEPReq+0x50>
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d077      	beq.n	800ef46 <USBD_StdEPReq+0x13e>
 800ee56:	e11c      	b.n	800f092 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee5e:	2b02      	cmp	r3, #2
 800ee60:	d002      	beq.n	800ee68 <USBD_StdEPReq+0x60>
 800ee62:	2b03      	cmp	r3, #3
 800ee64:	d015      	beq.n	800ee92 <USBD_StdEPReq+0x8a>
 800ee66:	e02b      	b.n	800eec0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee68:	7bbb      	ldrb	r3, [r7, #14]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00c      	beq.n	800ee88 <USBD_StdEPReq+0x80>
 800ee6e:	7bbb      	ldrb	r3, [r7, #14]
 800ee70:	2b80      	cmp	r3, #128	; 0x80
 800ee72:	d009      	beq.n	800ee88 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee74:	7bbb      	ldrb	r3, [r7, #14]
 800ee76:	4619      	mov	r1, r3
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f003 fabc 	bl	80123f6 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee7e:	2180      	movs	r1, #128	; 0x80
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f003 fab8 	bl	80123f6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ee86:	e020      	b.n	800eeca <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ee88:	6839      	ldr	r1, [r7, #0]
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 fc38 	bl	800f700 <USBD_CtlError>
        break;
 800ee90:	e01b      	b.n	800eeca <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	885b      	ldrh	r3, [r3, #2]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d10e      	bne.n	800eeb8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ee9a:	7bbb      	ldrb	r3, [r7, #14]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d00b      	beq.n	800eeb8 <USBD_StdEPReq+0xb0>
 800eea0:	7bbb      	ldrb	r3, [r7, #14]
 800eea2:	2b80      	cmp	r3, #128	; 0x80
 800eea4:	d008      	beq.n	800eeb8 <USBD_StdEPReq+0xb0>
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	88db      	ldrh	r3, [r3, #6]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d104      	bne.n	800eeb8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800eeae:	7bbb      	ldrb	r3, [r7, #14]
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f003 fa9f 	bl	80123f6 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 fccf 	bl	800f85c <USBD_CtlSendStatus>

        break;
 800eebe:	e004      	b.n	800eeca <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800eec0:	6839      	ldr	r1, [r7, #0]
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 fc1c 	bl	800f700 <USBD_CtlError>
        break;
 800eec8:	bf00      	nop
      }
      break;
 800eeca:	e0e7      	b.n	800f09c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eed2:	2b02      	cmp	r3, #2
 800eed4:	d002      	beq.n	800eedc <USBD_StdEPReq+0xd4>
 800eed6:	2b03      	cmp	r3, #3
 800eed8:	d015      	beq.n	800ef06 <USBD_StdEPReq+0xfe>
 800eeda:	e02d      	b.n	800ef38 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eedc:	7bbb      	ldrb	r3, [r7, #14]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00c      	beq.n	800eefc <USBD_StdEPReq+0xf4>
 800eee2:	7bbb      	ldrb	r3, [r7, #14]
 800eee4:	2b80      	cmp	r3, #128	; 0x80
 800eee6:	d009      	beq.n	800eefc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800eee8:	7bbb      	ldrb	r3, [r7, #14]
 800eeea:	4619      	mov	r1, r3
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f003 fa82 	bl	80123f6 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eef2:	2180      	movs	r1, #128	; 0x80
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f003 fa7e 	bl	80123f6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800eefa:	e023      	b.n	800ef44 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800eefc:	6839      	ldr	r1, [r7, #0]
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f000 fbfe 	bl	800f700 <USBD_CtlError>
        break;
 800ef04:	e01e      	b.n	800ef44 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	885b      	ldrh	r3, [r3, #2]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d119      	bne.n	800ef42 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ef0e:	7bbb      	ldrb	r3, [r7, #14]
 800ef10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d004      	beq.n	800ef22 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ef18:	7bbb      	ldrb	r3, [r7, #14]
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f003 fa89 	bl	8012434 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 fc9a 	bl	800f85c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef2e:	689b      	ldr	r3, [r3, #8]
 800ef30:	6839      	ldr	r1, [r7, #0]
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	4798      	blx	r3
        }
        break;
 800ef36:	e004      	b.n	800ef42 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ef38:	6839      	ldr	r1, [r7, #0]
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 fbe0 	bl	800f700 <USBD_CtlError>
        break;
 800ef40:	e000      	b.n	800ef44 <USBD_StdEPReq+0x13c>
        break;
 800ef42:	bf00      	nop
      }
      break;
 800ef44:	e0aa      	b.n	800f09c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef4c:	2b02      	cmp	r3, #2
 800ef4e:	d002      	beq.n	800ef56 <USBD_StdEPReq+0x14e>
 800ef50:	2b03      	cmp	r3, #3
 800ef52:	d032      	beq.n	800efba <USBD_StdEPReq+0x1b2>
 800ef54:	e097      	b.n	800f086 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef56:	7bbb      	ldrb	r3, [r7, #14]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d007      	beq.n	800ef6c <USBD_StdEPReq+0x164>
 800ef5c:	7bbb      	ldrb	r3, [r7, #14]
 800ef5e:	2b80      	cmp	r3, #128	; 0x80
 800ef60:	d004      	beq.n	800ef6c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ef62:	6839      	ldr	r1, [r7, #0]
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 fbcb 	bl	800f700 <USBD_CtlError>
          break;
 800ef6a:	e091      	b.n	800f090 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	da0b      	bge.n	800ef8c <USBD_StdEPReq+0x184>
 800ef74:	7bbb      	ldrb	r3, [r7, #14]
 800ef76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef7a:	4613      	mov	r3, r2
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	4413      	add	r3, r2
 800ef80:	009b      	lsls	r3, r3, #2
 800ef82:	3310      	adds	r3, #16
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	4413      	add	r3, r2
 800ef88:	3304      	adds	r3, #4
 800ef8a:	e00b      	b.n	800efa4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ef8c:	7bbb      	ldrb	r3, [r7, #14]
 800ef8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef92:	4613      	mov	r3, r2
 800ef94:	009b      	lsls	r3, r3, #2
 800ef96:	4413      	add	r3, r2
 800ef98:	009b      	lsls	r3, r3, #2
 800ef9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	4413      	add	r3, r2
 800efa2:	3304      	adds	r3, #4
 800efa4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	2200      	movs	r2, #0
 800efaa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	2202      	movs	r2, #2
 800efb0:	4619      	mov	r1, r3
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 fc15 	bl	800f7e2 <USBD_CtlSendData>
        break;
 800efb8:	e06a      	b.n	800f090 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800efba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	da11      	bge.n	800efe6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800efc2:	7bbb      	ldrb	r3, [r7, #14]
 800efc4:	f003 020f 	and.w	r2, r3, #15
 800efc8:	6879      	ldr	r1, [r7, #4]
 800efca:	4613      	mov	r3, r2
 800efcc:	009b      	lsls	r3, r3, #2
 800efce:	4413      	add	r3, r2
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	440b      	add	r3, r1
 800efd4:	3324      	adds	r3, #36	; 0x24
 800efd6:	881b      	ldrh	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d117      	bne.n	800f00c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800efdc:	6839      	ldr	r1, [r7, #0]
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 fb8e 	bl	800f700 <USBD_CtlError>
            break;
 800efe4:	e054      	b.n	800f090 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800efe6:	7bbb      	ldrb	r3, [r7, #14]
 800efe8:	f003 020f 	and.w	r2, r3, #15
 800efec:	6879      	ldr	r1, [r7, #4]
 800efee:	4613      	mov	r3, r2
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	4413      	add	r3, r2
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	440b      	add	r3, r1
 800eff8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800effc:	881b      	ldrh	r3, [r3, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d104      	bne.n	800f00c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f002:	6839      	ldr	r1, [r7, #0]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 fb7b 	bl	800f700 <USBD_CtlError>
            break;
 800f00a:	e041      	b.n	800f090 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f00c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f010:	2b00      	cmp	r3, #0
 800f012:	da0b      	bge.n	800f02c <USBD_StdEPReq+0x224>
 800f014:	7bbb      	ldrb	r3, [r7, #14]
 800f016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f01a:	4613      	mov	r3, r2
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	4413      	add	r3, r2
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	3310      	adds	r3, #16
 800f024:	687a      	ldr	r2, [r7, #4]
 800f026:	4413      	add	r3, r2
 800f028:	3304      	adds	r3, #4
 800f02a:	e00b      	b.n	800f044 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f02c:	7bbb      	ldrb	r3, [r7, #14]
 800f02e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f032:	4613      	mov	r3, r2
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	4413      	add	r3, r2
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	4413      	add	r3, r2
 800f042:	3304      	adds	r3, #4
 800f044:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f046:	7bbb      	ldrb	r3, [r7, #14]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d002      	beq.n	800f052 <USBD_StdEPReq+0x24a>
 800f04c:	7bbb      	ldrb	r3, [r7, #14]
 800f04e:	2b80      	cmp	r3, #128	; 0x80
 800f050:	d103      	bne.n	800f05a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	2200      	movs	r2, #0
 800f056:	601a      	str	r2, [r3, #0]
 800f058:	e00e      	b.n	800f078 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f05a:	7bbb      	ldrb	r3, [r7, #14]
 800f05c:	4619      	mov	r1, r3
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f003 fa07 	bl	8012472 <USBD_LL_IsStallEP>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d003      	beq.n	800f072 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	2201      	movs	r2, #1
 800f06e:	601a      	str	r2, [r3, #0]
 800f070:	e002      	b.n	800f078 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	2200      	movs	r2, #0
 800f076:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	2202      	movs	r2, #2
 800f07c:	4619      	mov	r1, r3
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 fbaf 	bl	800f7e2 <USBD_CtlSendData>
          break;
 800f084:	e004      	b.n	800f090 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f086:	6839      	ldr	r1, [r7, #0]
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 fb39 	bl	800f700 <USBD_CtlError>
        break;
 800f08e:	bf00      	nop
      }
      break;
 800f090:	e004      	b.n	800f09c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f092:	6839      	ldr	r1, [r7, #0]
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 fb33 	bl	800f700 <USBD_CtlError>
      break;
 800f09a:	bf00      	nop
    }
    break;
 800f09c:	e004      	b.n	800f0a8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f09e:	6839      	ldr	r1, [r7, #0]
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 fb2d 	bl	800f700 <USBD_CtlError>
    break;
 800f0a6:	bf00      	nop
  }

  return ret;
 800f0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
	...

0800f0b4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	885b      	ldrh	r3, [r3, #2]
 800f0ce:	0a1b      	lsrs	r3, r3, #8
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	2b06      	cmp	r3, #6
 800f0d6:	f200 8128 	bhi.w	800f32a <USBD_GetDescriptor+0x276>
 800f0da:	a201      	add	r2, pc, #4	; (adr r2, 800f0e0 <USBD_GetDescriptor+0x2c>)
 800f0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e0:	0800f0fd 	.word	0x0800f0fd
 800f0e4:	0800f115 	.word	0x0800f115
 800f0e8:	0800f155 	.word	0x0800f155
 800f0ec:	0800f32b 	.word	0x0800f32b
 800f0f0:	0800f32b 	.word	0x0800f32b
 800f0f4:	0800f2cb 	.word	0x0800f2cb
 800f0f8:	0800f2f7 	.word	0x0800f2f7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	7c12      	ldrb	r2, [r2, #16]
 800f108:	f107 0108 	add.w	r1, r7, #8
 800f10c:	4610      	mov	r0, r2
 800f10e:	4798      	blx	r3
 800f110:	60f8      	str	r0, [r7, #12]
    break;
 800f112:	e112      	b.n	800f33a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	7c1b      	ldrb	r3, [r3, #16]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d10d      	bne.n	800f138 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f124:	f107 0208 	add.w	r2, r7, #8
 800f128:	4610      	mov	r0, r2
 800f12a:	4798      	blx	r3
 800f12c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	3301      	adds	r3, #1
 800f132:	2202      	movs	r2, #2
 800f134:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f136:	e100      	b.n	800f33a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f140:	f107 0208 	add.w	r2, r7, #8
 800f144:	4610      	mov	r0, r2
 800f146:	4798      	blx	r3
 800f148:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	3301      	adds	r3, #1
 800f14e:	2202      	movs	r2, #2
 800f150:	701a      	strb	r2, [r3, #0]
    break;
 800f152:	e0f2      	b.n	800f33a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	885b      	ldrh	r3, [r3, #2]
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	2b05      	cmp	r3, #5
 800f15c:	f200 80ac 	bhi.w	800f2b8 <USBD_GetDescriptor+0x204>
 800f160:	a201      	add	r2, pc, #4	; (adr r2, 800f168 <USBD_GetDescriptor+0xb4>)
 800f162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f166:	bf00      	nop
 800f168:	0800f181 	.word	0x0800f181
 800f16c:	0800f1b5 	.word	0x0800f1b5
 800f170:	0800f1e9 	.word	0x0800f1e9
 800f174:	0800f21d 	.word	0x0800f21d
 800f178:	0800f251 	.word	0x0800f251
 800f17c:	0800f285 	.word	0x0800f285
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00b      	beq.n	800f1a4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	7c12      	ldrb	r2, [r2, #16]
 800f198:	f107 0108 	add.w	r1, r7, #8
 800f19c:	4610      	mov	r0, r2
 800f19e:	4798      	blx	r3
 800f1a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1a2:	e091      	b.n	800f2c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f1a4:	6839      	ldr	r1, [r7, #0]
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 faaa 	bl	800f700 <USBD_CtlError>
        err++;
 800f1ac:	7afb      	ldrb	r3, [r7, #11]
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	72fb      	strb	r3, [r7, #11]
      break;
 800f1b2:	e089      	b.n	800f2c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1ba:	689b      	ldr	r3, [r3, #8]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d00b      	beq.n	800f1d8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	7c12      	ldrb	r2, [r2, #16]
 800f1cc:	f107 0108 	add.w	r1, r7, #8
 800f1d0:	4610      	mov	r0, r2
 800f1d2:	4798      	blx	r3
 800f1d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1d6:	e077      	b.n	800f2c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fa90 	bl	800f700 <USBD_CtlError>
        err++;
 800f1e0:	7afb      	ldrb	r3, [r7, #11]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	72fb      	strb	r3, [r7, #11]
      break;
 800f1e6:	e06f      	b.n	800f2c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00b      	beq.n	800f20c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	7c12      	ldrb	r2, [r2, #16]
 800f200:	f107 0108 	add.w	r1, r7, #8
 800f204:	4610      	mov	r0, r2
 800f206:	4798      	blx	r3
 800f208:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f20a:	e05d      	b.n	800f2c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f20c:	6839      	ldr	r1, [r7, #0]
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 fa76 	bl	800f700 <USBD_CtlError>
        err++;
 800f214:	7afb      	ldrb	r3, [r7, #11]
 800f216:	3301      	adds	r3, #1
 800f218:	72fb      	strb	r3, [r7, #11]
      break;
 800f21a:	e055      	b.n	800f2c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f222:	691b      	ldr	r3, [r3, #16]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00b      	beq.n	800f240 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f22e:	691b      	ldr	r3, [r3, #16]
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	7c12      	ldrb	r2, [r2, #16]
 800f234:	f107 0108 	add.w	r1, r7, #8
 800f238:	4610      	mov	r0, r2
 800f23a:	4798      	blx	r3
 800f23c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f23e:	e043      	b.n	800f2c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f240:	6839      	ldr	r1, [r7, #0]
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 fa5c 	bl	800f700 <USBD_CtlError>
        err++;
 800f248:	7afb      	ldrb	r3, [r7, #11]
 800f24a:	3301      	adds	r3, #1
 800f24c:	72fb      	strb	r3, [r7, #11]
      break;
 800f24e:	e03b      	b.n	800f2c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f256:	695b      	ldr	r3, [r3, #20]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00b      	beq.n	800f274 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f262:	695b      	ldr	r3, [r3, #20]
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	7c12      	ldrb	r2, [r2, #16]
 800f268:	f107 0108 	add.w	r1, r7, #8
 800f26c:	4610      	mov	r0, r2
 800f26e:	4798      	blx	r3
 800f270:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f272:	e029      	b.n	800f2c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f274:	6839      	ldr	r1, [r7, #0]
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 fa42 	bl	800f700 <USBD_CtlError>
        err++;
 800f27c:	7afb      	ldrb	r3, [r7, #11]
 800f27e:	3301      	adds	r3, #1
 800f280:	72fb      	strb	r3, [r7, #11]
      break;
 800f282:	e021      	b.n	800f2c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f28a:	699b      	ldr	r3, [r3, #24]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d00b      	beq.n	800f2a8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f296:	699b      	ldr	r3, [r3, #24]
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	7c12      	ldrb	r2, [r2, #16]
 800f29c:	f107 0108 	add.w	r1, r7, #8
 800f2a0:	4610      	mov	r0, r2
 800f2a2:	4798      	blx	r3
 800f2a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2a6:	e00f      	b.n	800f2c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f2a8:	6839      	ldr	r1, [r7, #0]
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 fa28 	bl	800f700 <USBD_CtlError>
        err++;
 800f2b0:	7afb      	ldrb	r3, [r7, #11]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	72fb      	strb	r3, [r7, #11]
      break;
 800f2b6:	e007      	b.n	800f2c8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f2b8:	6839      	ldr	r1, [r7, #0]
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 fa20 	bl	800f700 <USBD_CtlError>
      err++;
 800f2c0:	7afb      	ldrb	r3, [r7, #11]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f2c6:	bf00      	nop
    }
    break;
 800f2c8:	e037      	b.n	800f33a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	7c1b      	ldrb	r3, [r3, #16]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d109      	bne.n	800f2e6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2da:	f107 0208 	add.w	r2, r7, #8
 800f2de:	4610      	mov	r0, r2
 800f2e0:	4798      	blx	r3
 800f2e2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f2e4:	e029      	b.n	800f33a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fa09 	bl	800f700 <USBD_CtlError>
      err++;
 800f2ee:	7afb      	ldrb	r3, [r7, #11]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	72fb      	strb	r3, [r7, #11]
    break;
 800f2f4:	e021      	b.n	800f33a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	7c1b      	ldrb	r3, [r3, #16]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d10d      	bne.n	800f31a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f306:	f107 0208 	add.w	r2, r7, #8
 800f30a:	4610      	mov	r0, r2
 800f30c:	4798      	blx	r3
 800f30e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	3301      	adds	r3, #1
 800f314:	2207      	movs	r2, #7
 800f316:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f318:	e00f      	b.n	800f33a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f31a:	6839      	ldr	r1, [r7, #0]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 f9ef 	bl	800f700 <USBD_CtlError>
      err++;
 800f322:	7afb      	ldrb	r3, [r7, #11]
 800f324:	3301      	adds	r3, #1
 800f326:	72fb      	strb	r3, [r7, #11]
    break;
 800f328:	e007      	b.n	800f33a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f32a:	6839      	ldr	r1, [r7, #0]
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 f9e7 	bl	800f700 <USBD_CtlError>
    err++;
 800f332:	7afb      	ldrb	r3, [r7, #11]
 800f334:	3301      	adds	r3, #1
 800f336:	72fb      	strb	r3, [r7, #11]
    break;
 800f338:	bf00      	nop
  }

  if (err != 0U)
 800f33a:	7afb      	ldrb	r3, [r7, #11]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d11e      	bne.n	800f37e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	88db      	ldrh	r3, [r3, #6]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d016      	beq.n	800f376 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f348:	893b      	ldrh	r3, [r7, #8]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d00e      	beq.n	800f36c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	88da      	ldrh	r2, [r3, #6]
 800f352:	893b      	ldrh	r3, [r7, #8]
 800f354:	4293      	cmp	r3, r2
 800f356:	bf28      	it	cs
 800f358:	4613      	movcs	r3, r2
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f35e:	893b      	ldrh	r3, [r7, #8]
 800f360:	461a      	mov	r2, r3
 800f362:	68f9      	ldr	r1, [r7, #12]
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f000 fa3c 	bl	800f7e2 <USBD_CtlSendData>
 800f36a:	e009      	b.n	800f380 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f36c:	6839      	ldr	r1, [r7, #0]
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 f9c6 	bl	800f700 <USBD_CtlError>
 800f374:	e004      	b.n	800f380 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 fa70 	bl	800f85c <USBD_CtlSendStatus>
 800f37c:	e000      	b.n	800f380 <USBD_GetDescriptor+0x2cc>
    return;
 800f37e:	bf00      	nop
    }
  }
}
 800f380:	3710      	adds	r7, #16
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop

0800f388 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	889b      	ldrh	r3, [r3, #4]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d130      	bne.n	800f3fc <USBD_SetAddress+0x74>
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	88db      	ldrh	r3, [r3, #6]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d12c      	bne.n	800f3fc <USBD_SetAddress+0x74>
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	885b      	ldrh	r3, [r3, #2]
 800f3a6:	2b7f      	cmp	r3, #127	; 0x7f
 800f3a8:	d828      	bhi.n	800f3fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	885b      	ldrh	r3, [r3, #2]
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3bc:	2b03      	cmp	r3, #3
 800f3be:	d104      	bne.n	800f3ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f3c0:	6839      	ldr	r1, [r7, #0]
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 f99c 	bl	800f700 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3c8:	e01c      	b.n	800f404 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	7bfa      	ldrb	r2, [r7, #15]
 800f3ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f3d2:	7bfb      	ldrb	r3, [r7, #15]
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f003 f877 	bl	80124ca <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f000 fa3d 	bl	800f85c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f3e2:	7bfb      	ldrb	r3, [r7, #15]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d004      	beq.n	800f3f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2202      	movs	r2, #2
 800f3ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3f0:	e008      	b.n	800f404 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3fa:	e003      	b.n	800f404 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f3fc:	6839      	ldr	r1, [r7, #0]
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 f97e 	bl	800f700 <USBD_CtlError>
  }
}
 800f404:	bf00      	nop
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f416:	2300      	movs	r3, #0
 800f418:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	885b      	ldrh	r3, [r3, #2]
 800f41e:	b2da      	uxtb	r2, r3
 800f420:	4b4b      	ldr	r3, [pc, #300]	; (800f550 <USBD_SetConfig+0x144>)
 800f422:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f424:	4b4a      	ldr	r3, [pc, #296]	; (800f550 <USBD_SetConfig+0x144>)
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d905      	bls.n	800f438 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f42c:	6839      	ldr	r1, [r7, #0]
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 f966 	bl	800f700 <USBD_CtlError>
    return USBD_FAIL;
 800f434:	2303      	movs	r3, #3
 800f436:	e087      	b.n	800f548 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d002      	beq.n	800f448 <USBD_SetConfig+0x3c>
 800f442:	2b03      	cmp	r3, #3
 800f444:	d025      	beq.n	800f492 <USBD_SetConfig+0x86>
 800f446:	e071      	b.n	800f52c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f448:	4b41      	ldr	r3, [pc, #260]	; (800f550 <USBD_SetConfig+0x144>)
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d01c      	beq.n	800f48a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f450:	4b3f      	ldr	r3, [pc, #252]	; (800f550 <USBD_SetConfig+0x144>)
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	461a      	mov	r2, r3
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f45a:	4b3d      	ldr	r3, [pc, #244]	; (800f550 <USBD_SetConfig+0x144>)
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	4619      	mov	r1, r3
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f7ff f9a8 	bl	800e7b6 <USBD_SetClassConfig>
 800f466:	4603      	mov	r3, r0
 800f468:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d004      	beq.n	800f47a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f470:	6839      	ldr	r1, [r7, #0]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 f944 	bl	800f700 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f478:	e065      	b.n	800f546 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 f9ee 	bl	800f85c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2203      	movs	r2, #3
 800f484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f488:	e05d      	b.n	800f546 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f000 f9e6 	bl	800f85c <USBD_CtlSendStatus>
    break;
 800f490:	e059      	b.n	800f546 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f492:	4b2f      	ldr	r3, [pc, #188]	; (800f550 <USBD_SetConfig+0x144>)
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d112      	bne.n	800f4c0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2202      	movs	r2, #2
 800f49e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f4a2:	4b2b      	ldr	r3, [pc, #172]	; (800f550 <USBD_SetConfig+0x144>)
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f4ac:	4b28      	ldr	r3, [pc, #160]	; (800f550 <USBD_SetConfig+0x144>)
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f7ff f99b 	bl	800e7ee <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 f9cf 	bl	800f85c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f4be:	e042      	b.n	800f546 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f4c0:	4b23      	ldr	r3, [pc, #140]	; (800f550 <USBD_SetConfig+0x144>)
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d02a      	beq.n	800f524 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f7ff f989 	bl	800e7ee <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f4dc:	4b1c      	ldr	r3, [pc, #112]	; (800f550 <USBD_SetConfig+0x144>)
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f4e6:	4b1a      	ldr	r3, [pc, #104]	; (800f550 <USBD_SetConfig+0x144>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7ff f962 	bl	800e7b6 <USBD_SetClassConfig>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f4f6:	7bfb      	ldrb	r3, [r7, #15]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d00f      	beq.n	800f51c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f4fc:	6839      	ldr	r1, [r7, #0]
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 f8fe 	bl	800f700 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	4619      	mov	r1, r3
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f7ff f96e 	bl	800e7ee <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2202      	movs	r2, #2
 800f516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f51a:	e014      	b.n	800f546 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 f99d 	bl	800f85c <USBD_CtlSendStatus>
    break;
 800f522:	e010      	b.n	800f546 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 f999 	bl	800f85c <USBD_CtlSendStatus>
    break;
 800f52a:	e00c      	b.n	800f546 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f52c:	6839      	ldr	r1, [r7, #0]
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 f8e6 	bl	800f700 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f534:	4b06      	ldr	r3, [pc, #24]	; (800f550 <USBD_SetConfig+0x144>)
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	4619      	mov	r1, r3
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7ff f957 	bl	800e7ee <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f540:	2303      	movs	r3, #3
 800f542:	73fb      	strb	r3, [r7, #15]
    break;
 800f544:	bf00      	nop
  }

  return ret;
 800f546:	7bfb      	ldrb	r3, [r7, #15]
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	240001f0 	.word	0x240001f0

0800f554 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	88db      	ldrh	r3, [r3, #6]
 800f562:	2b01      	cmp	r3, #1
 800f564:	d004      	beq.n	800f570 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f566:	6839      	ldr	r1, [r7, #0]
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 f8c9 	bl	800f700 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f56e:	e021      	b.n	800f5b4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f576:	2b01      	cmp	r3, #1
 800f578:	db17      	blt.n	800f5aa <USBD_GetConfig+0x56>
 800f57a:	2b02      	cmp	r3, #2
 800f57c:	dd02      	ble.n	800f584 <USBD_GetConfig+0x30>
 800f57e:	2b03      	cmp	r3, #3
 800f580:	d00b      	beq.n	800f59a <USBD_GetConfig+0x46>
 800f582:	e012      	b.n	800f5aa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2200      	movs	r2, #0
 800f588:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	3308      	adds	r3, #8
 800f58e:	2201      	movs	r2, #1
 800f590:	4619      	mov	r1, r3
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 f925 	bl	800f7e2 <USBD_CtlSendData>
      break;
 800f598:	e00c      	b.n	800f5b4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	3304      	adds	r3, #4
 800f59e:	2201      	movs	r2, #1
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 f91d 	bl	800f7e2 <USBD_CtlSendData>
      break;
 800f5a8:	e004      	b.n	800f5b4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f5aa:	6839      	ldr	r1, [r7, #0]
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f000 f8a7 	bl	800f700 <USBD_CtlError>
      break;
 800f5b2:	bf00      	nop
}
 800f5b4:	bf00      	nop
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5cc:	3b01      	subs	r3, #1
 800f5ce:	2b02      	cmp	r3, #2
 800f5d0:	d81e      	bhi.n	800f610 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	88db      	ldrh	r3, [r3, #6]
 800f5d6:	2b02      	cmp	r3, #2
 800f5d8:	d004      	beq.n	800f5e4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f5da:	6839      	ldr	r1, [r7, #0]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f000 f88f 	bl	800f700 <USBD_CtlError>
      break;
 800f5e2:	e01a      	b.n	800f61a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d005      	beq.n	800f600 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	f043 0202 	orr.w	r2, r3, #2
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	330c      	adds	r3, #12
 800f604:	2202      	movs	r2, #2
 800f606:	4619      	mov	r1, r3
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 f8ea 	bl	800f7e2 <USBD_CtlSendData>
    break;
 800f60e:	e004      	b.n	800f61a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f610:	6839      	ldr	r1, [r7, #0]
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 f874 	bl	800f700 <USBD_CtlError>
    break;
 800f618:	bf00      	nop
  }
}
 800f61a:	bf00      	nop
 800f61c:	3708      	adds	r7, #8
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b082      	sub	sp, #8
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
 800f62a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	885b      	ldrh	r3, [r3, #2]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d106      	bne.n	800f642 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2201      	movs	r2, #1
 800f638:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f000 f90d 	bl	800f85c <USBD_CtlSendStatus>
  }
}
 800f642:	bf00      	nop
 800f644:	3708      	adds	r7, #8
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}

0800f64a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f64a:	b580      	push	{r7, lr}
 800f64c:	b082      	sub	sp, #8
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
 800f652:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f65a:	3b01      	subs	r3, #1
 800f65c:	2b02      	cmp	r3, #2
 800f65e:	d80b      	bhi.n	800f678 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	885b      	ldrh	r3, [r3, #2]
 800f664:	2b01      	cmp	r3, #1
 800f666:	d10c      	bne.n	800f682 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 f8f3 	bl	800f85c <USBD_CtlSendStatus>
      }
      break;
 800f676:	e004      	b.n	800f682 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f678:	6839      	ldr	r1, [r7, #0]
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f000 f840 	bl	800f700 <USBD_CtlError>
      break;
 800f680:	e000      	b.n	800f684 <USBD_ClrFeature+0x3a>
      break;
 800f682:	bf00      	nop
  }
}
 800f684:	bf00      	nop
 800f686:	3708      	adds	r7, #8
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}

0800f68c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	781a      	ldrb	r2, [r3, #0]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	781a      	ldrb	r2, [r3, #0]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	f7ff fad4 	bl	800ec64 <SWAPBYTE>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	461a      	mov	r2, r3
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f6d0:	68f8      	ldr	r0, [r7, #12]
 800f6d2:	f7ff fac7 	bl	800ec64 <SWAPBYTE>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	461a      	mov	r2, r3
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f7ff faba 	bl	800ec64 <SWAPBYTE>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	80da      	strh	r2, [r3, #6]
}
 800f6f8:	bf00      	nop
 800f6fa:	3710      	adds	r7, #16
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f70a:	2180      	movs	r1, #128	; 0x80
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f002 fe72 	bl	80123f6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f712:	2100      	movs	r1, #0
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f002 fe6e 	bl	80123f6 <USBD_LL_StallEP>
}
 800f71a:	bf00      	nop
 800f71c:	3708      	adds	r7, #8
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f722:	b580      	push	{r7, lr}
 800f724:	b086      	sub	sp, #24
 800f726:	af00      	add	r7, sp, #0
 800f728:	60f8      	str	r0, [r7, #12]
 800f72a:	60b9      	str	r1, [r7, #8]
 800f72c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f72e:	2300      	movs	r3, #0
 800f730:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d036      	beq.n	800f7a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f73c:	6938      	ldr	r0, [r7, #16]
 800f73e:	f000 f836 	bl	800f7ae <USBD_GetLen>
 800f742:	4603      	mov	r3, r0
 800f744:	3301      	adds	r3, #1
 800f746:	b29b      	uxth	r3, r3
 800f748:	005b      	lsls	r3, r3, #1
 800f74a:	b29a      	uxth	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f750:	7dfb      	ldrb	r3, [r7, #23]
 800f752:	68ba      	ldr	r2, [r7, #8]
 800f754:	4413      	add	r3, r2
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	7812      	ldrb	r2, [r2, #0]
 800f75a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f75c:	7dfb      	ldrb	r3, [r7, #23]
 800f75e:	3301      	adds	r3, #1
 800f760:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f762:	7dfb      	ldrb	r3, [r7, #23]
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	4413      	add	r3, r2
 800f768:	2203      	movs	r2, #3
 800f76a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f76c:	7dfb      	ldrb	r3, [r7, #23]
 800f76e:	3301      	adds	r3, #1
 800f770:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f772:	e013      	b.n	800f79c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f774:	7dfb      	ldrb	r3, [r7, #23]
 800f776:	68ba      	ldr	r2, [r7, #8]
 800f778:	4413      	add	r3, r2
 800f77a:	693a      	ldr	r2, [r7, #16]
 800f77c:	7812      	ldrb	r2, [r2, #0]
 800f77e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	3301      	adds	r3, #1
 800f784:	613b      	str	r3, [r7, #16]
    idx++;
 800f786:	7dfb      	ldrb	r3, [r7, #23]
 800f788:	3301      	adds	r3, #1
 800f78a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f78c:	7dfb      	ldrb	r3, [r7, #23]
 800f78e:	68ba      	ldr	r2, [r7, #8]
 800f790:	4413      	add	r3, r2
 800f792:	2200      	movs	r2, #0
 800f794:	701a      	strb	r2, [r3, #0]
    idx++;
 800f796:	7dfb      	ldrb	r3, [r7, #23]
 800f798:	3301      	adds	r3, #1
 800f79a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d1e7      	bne.n	800f774 <USBD_GetString+0x52>
 800f7a4:	e000      	b.n	800f7a8 <USBD_GetString+0x86>
    return;
 800f7a6:	bf00      	nop
  }
}
 800f7a8:	3718      	adds	r7, #24
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f7ae:	b480      	push	{r7}
 800f7b0:	b085      	sub	sp, #20
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f7be:	e005      	b.n	800f7cc <USBD_GetLen+0x1e>
  {
    len++;
 800f7c0:	7bfb      	ldrb	r3, [r7, #15]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d1f5      	bne.n	800f7c0 <USBD_GetLen+0x12>
  }

  return len;
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3714      	adds	r7, #20
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f7e2:	b580      	push	{r7, lr}
 800f7e4:	b084      	sub	sp, #16
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	60f8      	str	r0, [r7, #12]
 800f7ea:	60b9      	str	r1, [r7, #8]
 800f7ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2202      	movs	r2, #2
 800f7f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	687a      	ldr	r2, [r7, #4]
 800f7fa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	68ba      	ldr	r2, [r7, #8]
 800f806:	2100      	movs	r1, #0
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f002 fe7d 	bl	8012508 <USBD_LL_Transmit>

  return USBD_OK;
 800f80e:	2300      	movs	r3, #0
}
 800f810:	4618      	mov	r0, r3
 800f812:	3710      	adds	r7, #16
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	2100      	movs	r1, #0
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f002 fe6c 	bl	8012508 <USBD_LL_Transmit>

  return USBD_OK;
 800f830:	2300      	movs	r3, #0
}
 800f832:	4618      	mov	r0, r3
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}

0800f83a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b084      	sub	sp, #16
 800f83e:	af00      	add	r7, sp, #0
 800f840:	60f8      	str	r0, [r7, #12]
 800f842:	60b9      	str	r1, [r7, #8]
 800f844:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	2100      	movs	r1, #0
 800f84c:	68f8      	ldr	r0, [r7, #12]
 800f84e:	f002 fe7c 	bl	801254a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f852:	2300      	movs	r3, #0
}
 800f854:	4618      	mov	r0, r3
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2204      	movs	r2, #4
 800f868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f86c:	2300      	movs	r3, #0
 800f86e:	2200      	movs	r2, #0
 800f870:	2100      	movs	r1, #0
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f002 fe48 	bl	8012508 <USBD_LL_Transmit>

  return USBD_OK;
 800f878:	2300      	movs	r3, #0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f882:	b580      	push	{r7, lr}
 800f884:	b082      	sub	sp, #8
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2205      	movs	r2, #5
 800f88e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f892:	2300      	movs	r3, #0
 800f894:	2200      	movs	r2, #0
 800f896:	2100      	movs	r1, #0
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f002 fe56 	bl	801254a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f89e:	2300      	movs	r3, #0
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}

0800f8a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f8b2:	79fb      	ldrb	r3, [r7, #7]
 800f8b4:	4a08      	ldr	r2, [pc, #32]	; (800f8d8 <disk_status+0x30>)
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	79fa      	ldrb	r2, [r7, #7]
 800f8c0:	4905      	ldr	r1, [pc, #20]	; (800f8d8 <disk_status+0x30>)
 800f8c2:	440a      	add	r2, r1
 800f8c4:	7a12      	ldrb	r2, [r2, #8]
 800f8c6:	4610      	mov	r0, r2
 800f8c8:	4798      	blx	r3
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3710      	adds	r7, #16
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	2400021c 	.word	0x2400021c

0800f8dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f8ea:	79fb      	ldrb	r3, [r7, #7]
 800f8ec:	4a0d      	ldr	r2, [pc, #52]	; (800f924 <disk_initialize+0x48>)
 800f8ee:	5cd3      	ldrb	r3, [r2, r3]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d111      	bne.n	800f918 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f8f4:	79fb      	ldrb	r3, [r7, #7]
 800f8f6:	4a0b      	ldr	r2, [pc, #44]	; (800f924 <disk_initialize+0x48>)
 800f8f8:	2101      	movs	r1, #1
 800f8fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f8fc:	79fb      	ldrb	r3, [r7, #7]
 800f8fe:	4a09      	ldr	r2, [pc, #36]	; (800f924 <disk_initialize+0x48>)
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	4413      	add	r3, r2
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	79fa      	ldrb	r2, [r7, #7]
 800f90a:	4906      	ldr	r1, [pc, #24]	; (800f924 <disk_initialize+0x48>)
 800f90c:	440a      	add	r2, r1
 800f90e:	7a12      	ldrb	r2, [r2, #8]
 800f910:	4610      	mov	r0, r2
 800f912:	4798      	blx	r3
 800f914:	4603      	mov	r3, r0
 800f916:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f918:	7bfb      	ldrb	r3, [r7, #15]
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3710      	adds	r7, #16
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	2400021c 	.word	0x2400021c

0800f928 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f928:	b590      	push	{r4, r7, lr}
 800f92a:	b087      	sub	sp, #28
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60b9      	str	r1, [r7, #8]
 800f930:	607a      	str	r2, [r7, #4]
 800f932:	603b      	str	r3, [r7, #0]
 800f934:	4603      	mov	r3, r0
 800f936:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f938:	7bfb      	ldrb	r3, [r7, #15]
 800f93a:	4a0a      	ldr	r2, [pc, #40]	; (800f964 <disk_read+0x3c>)
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	4413      	add	r3, r2
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	689c      	ldr	r4, [r3, #8]
 800f944:	7bfb      	ldrb	r3, [r7, #15]
 800f946:	4a07      	ldr	r2, [pc, #28]	; (800f964 <disk_read+0x3c>)
 800f948:	4413      	add	r3, r2
 800f94a:	7a18      	ldrb	r0, [r3, #8]
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	68b9      	ldr	r1, [r7, #8]
 800f952:	47a0      	blx	r4
 800f954:	4603      	mov	r3, r0
 800f956:	75fb      	strb	r3, [r7, #23]
  return res;
 800f958:	7dfb      	ldrb	r3, [r7, #23]
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	371c      	adds	r7, #28
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd90      	pop	{r4, r7, pc}
 800f962:	bf00      	nop
 800f964:	2400021c 	.word	0x2400021c

0800f968 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f968:	b590      	push	{r4, r7, lr}
 800f96a:	b087      	sub	sp, #28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60b9      	str	r1, [r7, #8]
 800f970:	607a      	str	r2, [r7, #4]
 800f972:	603b      	str	r3, [r7, #0]
 800f974:	4603      	mov	r3, r0
 800f976:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f978:	7bfb      	ldrb	r3, [r7, #15]
 800f97a:	4a0a      	ldr	r2, [pc, #40]	; (800f9a4 <disk_write+0x3c>)
 800f97c:	009b      	lsls	r3, r3, #2
 800f97e:	4413      	add	r3, r2
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	68dc      	ldr	r4, [r3, #12]
 800f984:	7bfb      	ldrb	r3, [r7, #15]
 800f986:	4a07      	ldr	r2, [pc, #28]	; (800f9a4 <disk_write+0x3c>)
 800f988:	4413      	add	r3, r2
 800f98a:	7a18      	ldrb	r0, [r3, #8]
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	68b9      	ldr	r1, [r7, #8]
 800f992:	47a0      	blx	r4
 800f994:	4603      	mov	r3, r0
 800f996:	75fb      	strb	r3, [r7, #23]
  return res;
 800f998:	7dfb      	ldrb	r3, [r7, #23]
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	371c      	adds	r7, #28
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd90      	pop	{r4, r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	2400021c 	.word	0x2400021c

0800f9a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b084      	sub	sp, #16
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	603a      	str	r2, [r7, #0]
 800f9b2:	71fb      	strb	r3, [r7, #7]
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f9b8:	79fb      	ldrb	r3, [r7, #7]
 800f9ba:	4a09      	ldr	r2, [pc, #36]	; (800f9e0 <disk_ioctl+0x38>)
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	4413      	add	r3, r2
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	691b      	ldr	r3, [r3, #16]
 800f9c4:	79fa      	ldrb	r2, [r7, #7]
 800f9c6:	4906      	ldr	r1, [pc, #24]	; (800f9e0 <disk_ioctl+0x38>)
 800f9c8:	440a      	add	r2, r1
 800f9ca:	7a10      	ldrb	r0, [r2, #8]
 800f9cc:	79b9      	ldrb	r1, [r7, #6]
 800f9ce:	683a      	ldr	r2, [r7, #0]
 800f9d0:	4798      	blx	r3
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	73fb      	strb	r3, [r7, #15]
  return res;
 800f9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	2400021c 	.word	0x2400021c

0800f9e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f9f4:	89fb      	ldrh	r3, [r7, #14]
 800f9f6:	021b      	lsls	r3, r3, #8
 800f9f8:	b21a      	sxth	r2, r3
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	b21b      	sxth	r3, r3
 800fa00:	4313      	orrs	r3, r2
 800fa02:	b21b      	sxth	r3, r3
 800fa04:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fa06:	89fb      	ldrh	r3, [r7, #14]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3714      	adds	r7, #20
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fa14:	b480      	push	{r7}
 800fa16:	b085      	sub	sp, #20
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	3303      	adds	r3, #3
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	021b      	lsls	r3, r3, #8
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	3202      	adds	r2, #2
 800fa2c:	7812      	ldrb	r2, [r2, #0]
 800fa2e:	4313      	orrs	r3, r2
 800fa30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	021b      	lsls	r3, r3, #8
 800fa36:	687a      	ldr	r2, [r7, #4]
 800fa38:	3201      	adds	r2, #1
 800fa3a:	7812      	ldrb	r2, [r2, #0]
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	021b      	lsls	r3, r3, #8
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	7812      	ldrb	r2, [r2, #0]
 800fa48:	4313      	orrs	r3, r2
 800fa4a:	60fb      	str	r3, [r7, #12]
	return rv;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3714      	adds	r7, #20
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr

0800fa5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fa5a:	b480      	push	{r7}
 800fa5c:	b083      	sub	sp, #12
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	6078      	str	r0, [r7, #4]
 800fa62:	460b      	mov	r3, r1
 800fa64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	1c5a      	adds	r2, r3, #1
 800fa6a:	607a      	str	r2, [r7, #4]
 800fa6c:	887a      	ldrh	r2, [r7, #2]
 800fa6e:	b2d2      	uxtb	r2, r2
 800fa70:	701a      	strb	r2, [r3, #0]
 800fa72:	887b      	ldrh	r3, [r7, #2]
 800fa74:	0a1b      	lsrs	r3, r3, #8
 800fa76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	1c5a      	adds	r2, r3, #1
 800fa7c:	607a      	str	r2, [r7, #4]
 800fa7e:	887a      	ldrh	r2, [r7, #2]
 800fa80:	b2d2      	uxtb	r2, r2
 800fa82:	701a      	strb	r2, [r3, #0]
}
 800fa84:	bf00      	nop
 800fa86:	370c      	adds	r7, #12
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	1c5a      	adds	r2, r3, #1
 800fa9e:	607a      	str	r2, [r7, #4]
 800faa0:	683a      	ldr	r2, [r7, #0]
 800faa2:	b2d2      	uxtb	r2, r2
 800faa4:	701a      	strb	r2, [r3, #0]
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	0a1b      	lsrs	r3, r3, #8
 800faaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	1c5a      	adds	r2, r3, #1
 800fab0:	607a      	str	r2, [r7, #4]
 800fab2:	683a      	ldr	r2, [r7, #0]
 800fab4:	b2d2      	uxtb	r2, r2
 800fab6:	701a      	strb	r2, [r3, #0]
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	0a1b      	lsrs	r3, r3, #8
 800fabc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	1c5a      	adds	r2, r3, #1
 800fac2:	607a      	str	r2, [r7, #4]
 800fac4:	683a      	ldr	r2, [r7, #0]
 800fac6:	b2d2      	uxtb	r2, r2
 800fac8:	701a      	strb	r2, [r3, #0]
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	0a1b      	lsrs	r3, r3, #8
 800face:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	1c5a      	adds	r2, r3, #1
 800fad4:	607a      	str	r2, [r7, #4]
 800fad6:	683a      	ldr	r2, [r7, #0]
 800fad8:	b2d2      	uxtb	r2, r2
 800fada:	701a      	strb	r2, [r3, #0]
}
 800fadc:	bf00      	nop
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fae8:	b480      	push	{r7}
 800faea:	b087      	sub	sp, #28
 800faec:	af00      	add	r7, sp, #0
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	60b9      	str	r1, [r7, #8]
 800faf2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d00d      	beq.n	800fb1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fb02:	693a      	ldr	r2, [r7, #16]
 800fb04:	1c53      	adds	r3, r2, #1
 800fb06:	613b      	str	r3, [r7, #16]
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	1c59      	adds	r1, r3, #1
 800fb0c:	6179      	str	r1, [r7, #20]
 800fb0e:	7812      	ldrb	r2, [r2, #0]
 800fb10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	3b01      	subs	r3, #1
 800fb16:	607b      	str	r3, [r7, #4]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d1f1      	bne.n	800fb02 <mem_cpy+0x1a>
	}
}
 800fb1e:	bf00      	nop
 800fb20:	371c      	adds	r7, #28
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr

0800fb2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fb2a:	b480      	push	{r7}
 800fb2c:	b087      	sub	sp, #28
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	60f8      	str	r0, [r7, #12]
 800fb32:	60b9      	str	r1, [r7, #8]
 800fb34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	1c5a      	adds	r2, r3, #1
 800fb3e:	617a      	str	r2, [r7, #20]
 800fb40:	68ba      	ldr	r2, [r7, #8]
 800fb42:	b2d2      	uxtb	r2, r2
 800fb44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	3b01      	subs	r3, #1
 800fb4a:	607b      	str	r3, [r7, #4]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1f3      	bne.n	800fb3a <mem_set+0x10>
}
 800fb52:	bf00      	nop
 800fb54:	371c      	adds	r7, #28
 800fb56:	46bd      	mov	sp, r7
 800fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5c:	4770      	bx	lr

0800fb5e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fb5e:	b480      	push	{r7}
 800fb60:	b089      	sub	sp, #36	; 0x24
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	60f8      	str	r0, [r7, #12]
 800fb66:	60b9      	str	r1, [r7, #8]
 800fb68:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	61fb      	str	r3, [r7, #28]
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fb72:	2300      	movs	r3, #0
 800fb74:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	1c5a      	adds	r2, r3, #1
 800fb7a:	61fa      	str	r2, [r7, #28]
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	4619      	mov	r1, r3
 800fb80:	69bb      	ldr	r3, [r7, #24]
 800fb82:	1c5a      	adds	r2, r3, #1
 800fb84:	61ba      	str	r2, [r7, #24]
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	1acb      	subs	r3, r1, r3
 800fb8a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	3b01      	subs	r3, #1
 800fb90:	607b      	str	r3, [r7, #4]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d002      	beq.n	800fb9e <mem_cmp+0x40>
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d0eb      	beq.n	800fb76 <mem_cmp+0x18>

	return r;
 800fb9e:	697b      	ldr	r3, [r7, #20]
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3724      	adds	r7, #36	; 0x24
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr

0800fbac <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fbac:	b480      	push	{r7}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fbb6:	e002      	b.n	800fbbe <chk_chr+0x12>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	607b      	str	r3, [r7, #4]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d005      	beq.n	800fbd2 <chk_chr+0x26>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	461a      	mov	r2, r3
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d1f2      	bne.n	800fbb8 <chk_chr+0xc>
	return *str;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	781b      	ldrb	r3, [r3, #0]
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	370c      	adds	r7, #12
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
	...

0800fbe4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fbee:	2300      	movs	r3, #0
 800fbf0:	60bb      	str	r3, [r7, #8]
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	60fb      	str	r3, [r7, #12]
 800fbf6:	e029      	b.n	800fc4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fbf8:	4a27      	ldr	r2, [pc, #156]	; (800fc98 <chk_lock+0xb4>)
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	011b      	lsls	r3, r3, #4
 800fbfe:	4413      	add	r3, r2
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d01d      	beq.n	800fc42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fc06:	4a24      	ldr	r2, [pc, #144]	; (800fc98 <chk_lock+0xb4>)
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	011b      	lsls	r3, r3, #4
 800fc0c:	4413      	add	r3, r2
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d116      	bne.n	800fc46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fc18:	4a1f      	ldr	r2, [pc, #124]	; (800fc98 <chk_lock+0xb4>)
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	011b      	lsls	r3, r3, #4
 800fc1e:	4413      	add	r3, r2
 800fc20:	3304      	adds	r3, #4
 800fc22:	681a      	ldr	r2, [r3, #0]
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d10c      	bne.n	800fc46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fc2c:	4a1a      	ldr	r2, [pc, #104]	; (800fc98 <chk_lock+0xb4>)
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	011b      	lsls	r3, r3, #4
 800fc32:	4413      	add	r3, r2
 800fc34:	3308      	adds	r3, #8
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d102      	bne.n	800fc46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fc40:	e007      	b.n	800fc52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fc42:	2301      	movs	r3, #1
 800fc44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	3301      	adds	r3, #1
 800fc4a:	60fb      	str	r3, [r7, #12]
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	d9d2      	bls.n	800fbf8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2b02      	cmp	r3, #2
 800fc56:	d109      	bne.n	800fc6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d102      	bne.n	800fc64 <chk_lock+0x80>
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	2b02      	cmp	r3, #2
 800fc62:	d101      	bne.n	800fc68 <chk_lock+0x84>
 800fc64:	2300      	movs	r3, #0
 800fc66:	e010      	b.n	800fc8a <chk_lock+0xa6>
 800fc68:	2312      	movs	r3, #18
 800fc6a:	e00e      	b.n	800fc8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d108      	bne.n	800fc84 <chk_lock+0xa0>
 800fc72:	4a09      	ldr	r2, [pc, #36]	; (800fc98 <chk_lock+0xb4>)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	011b      	lsls	r3, r3, #4
 800fc78:	4413      	add	r3, r2
 800fc7a:	330c      	adds	r3, #12
 800fc7c:	881b      	ldrh	r3, [r3, #0]
 800fc7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc82:	d101      	bne.n	800fc88 <chk_lock+0xa4>
 800fc84:	2310      	movs	r3, #16
 800fc86:	e000      	b.n	800fc8a <chk_lock+0xa6>
 800fc88:	2300      	movs	r3, #0
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3714      	adds	r7, #20
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr
 800fc96:	bf00      	nop
 800fc98:	240001fc 	.word	0x240001fc

0800fc9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fca2:	2300      	movs	r3, #0
 800fca4:	607b      	str	r3, [r7, #4]
 800fca6:	e002      	b.n	800fcae <enq_lock+0x12>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	607b      	str	r3, [r7, #4]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d806      	bhi.n	800fcc2 <enq_lock+0x26>
 800fcb4:	4a09      	ldr	r2, [pc, #36]	; (800fcdc <enq_lock+0x40>)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	011b      	lsls	r3, r3, #4
 800fcba:	4413      	add	r3, r2
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d1f2      	bne.n	800fca8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2b02      	cmp	r3, #2
 800fcc6:	bf14      	ite	ne
 800fcc8:	2301      	movne	r3, #1
 800fcca:	2300      	moveq	r3, #0
 800fccc:	b2db      	uxtb	r3, r3
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	370c      	adds	r7, #12
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr
 800fcda:	bf00      	nop
 800fcdc:	240001fc 	.word	0x240001fc

0800fce0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b085      	sub	sp, #20
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fcea:	2300      	movs	r3, #0
 800fcec:	60fb      	str	r3, [r7, #12]
 800fcee:	e01f      	b.n	800fd30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fcf0:	4a41      	ldr	r2, [pc, #260]	; (800fdf8 <inc_lock+0x118>)
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	011b      	lsls	r3, r3, #4
 800fcf6:	4413      	add	r3, r2
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d113      	bne.n	800fd2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fd02:	4a3d      	ldr	r2, [pc, #244]	; (800fdf8 <inc_lock+0x118>)
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	011b      	lsls	r3, r3, #4
 800fd08:	4413      	add	r3, r2
 800fd0a:	3304      	adds	r3, #4
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d109      	bne.n	800fd2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fd16:	4a38      	ldr	r2, [pc, #224]	; (800fdf8 <inc_lock+0x118>)
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	011b      	lsls	r3, r3, #4
 800fd1c:	4413      	add	r3, r2
 800fd1e:	3308      	adds	r3, #8
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d006      	beq.n	800fd38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	60fb      	str	r3, [r7, #12]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d9dc      	bls.n	800fcf0 <inc_lock+0x10>
 800fd36:	e000      	b.n	800fd3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fd38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2b02      	cmp	r3, #2
 800fd3e:	d132      	bne.n	800fda6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fd40:	2300      	movs	r3, #0
 800fd42:	60fb      	str	r3, [r7, #12]
 800fd44:	e002      	b.n	800fd4c <inc_lock+0x6c>
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	60fb      	str	r3, [r7, #12]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d806      	bhi.n	800fd60 <inc_lock+0x80>
 800fd52:	4a29      	ldr	r2, [pc, #164]	; (800fdf8 <inc_lock+0x118>)
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	011b      	lsls	r3, r3, #4
 800fd58:	4413      	add	r3, r2
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d1f2      	bne.n	800fd46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2b02      	cmp	r3, #2
 800fd64:	d101      	bne.n	800fd6a <inc_lock+0x8a>
 800fd66:	2300      	movs	r3, #0
 800fd68:	e040      	b.n	800fdec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	4922      	ldr	r1, [pc, #136]	; (800fdf8 <inc_lock+0x118>)
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	011b      	lsls	r3, r3, #4
 800fd74:	440b      	add	r3, r1
 800fd76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	689a      	ldr	r2, [r3, #8]
 800fd7c:	491e      	ldr	r1, [pc, #120]	; (800fdf8 <inc_lock+0x118>)
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	011b      	lsls	r3, r3, #4
 800fd82:	440b      	add	r3, r1
 800fd84:	3304      	adds	r3, #4
 800fd86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	695a      	ldr	r2, [r3, #20]
 800fd8c:	491a      	ldr	r1, [pc, #104]	; (800fdf8 <inc_lock+0x118>)
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	011b      	lsls	r3, r3, #4
 800fd92:	440b      	add	r3, r1
 800fd94:	3308      	adds	r3, #8
 800fd96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fd98:	4a17      	ldr	r2, [pc, #92]	; (800fdf8 <inc_lock+0x118>)
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	011b      	lsls	r3, r3, #4
 800fd9e:	4413      	add	r3, r2
 800fda0:	330c      	adds	r3, #12
 800fda2:	2200      	movs	r2, #0
 800fda4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d009      	beq.n	800fdc0 <inc_lock+0xe0>
 800fdac:	4a12      	ldr	r2, [pc, #72]	; (800fdf8 <inc_lock+0x118>)
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	011b      	lsls	r3, r3, #4
 800fdb2:	4413      	add	r3, r2
 800fdb4:	330c      	adds	r3, #12
 800fdb6:	881b      	ldrh	r3, [r3, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d001      	beq.n	800fdc0 <inc_lock+0xe0>
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	e015      	b.n	800fdec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d108      	bne.n	800fdd8 <inc_lock+0xf8>
 800fdc6:	4a0c      	ldr	r2, [pc, #48]	; (800fdf8 <inc_lock+0x118>)
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	011b      	lsls	r3, r3, #4
 800fdcc:	4413      	add	r3, r2
 800fdce:	330c      	adds	r3, #12
 800fdd0:	881b      	ldrh	r3, [r3, #0]
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	e001      	b.n	800fddc <inc_lock+0xfc>
 800fdd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fddc:	4906      	ldr	r1, [pc, #24]	; (800fdf8 <inc_lock+0x118>)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	011b      	lsls	r3, r3, #4
 800fde2:	440b      	add	r3, r1
 800fde4:	330c      	adds	r3, #12
 800fde6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	3301      	adds	r3, #1
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3714      	adds	r7, #20
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr
 800fdf8:	240001fc 	.word	0x240001fc

0800fdfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b085      	sub	sp, #20
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	3b01      	subs	r3, #1
 800fe08:	607b      	str	r3, [r7, #4]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d825      	bhi.n	800fe5c <dec_lock+0x60>
		n = Files[i].ctr;
 800fe10:	4a17      	ldr	r2, [pc, #92]	; (800fe70 <dec_lock+0x74>)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	011b      	lsls	r3, r3, #4
 800fe16:	4413      	add	r3, r2
 800fe18:	330c      	adds	r3, #12
 800fe1a:	881b      	ldrh	r3, [r3, #0]
 800fe1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fe1e:	89fb      	ldrh	r3, [r7, #14]
 800fe20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe24:	d101      	bne.n	800fe2a <dec_lock+0x2e>
 800fe26:	2300      	movs	r3, #0
 800fe28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fe2a:	89fb      	ldrh	r3, [r7, #14]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d002      	beq.n	800fe36 <dec_lock+0x3a>
 800fe30:	89fb      	ldrh	r3, [r7, #14]
 800fe32:	3b01      	subs	r3, #1
 800fe34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fe36:	4a0e      	ldr	r2, [pc, #56]	; (800fe70 <dec_lock+0x74>)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	011b      	lsls	r3, r3, #4
 800fe3c:	4413      	add	r3, r2
 800fe3e:	330c      	adds	r3, #12
 800fe40:	89fa      	ldrh	r2, [r7, #14]
 800fe42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fe44:	89fb      	ldrh	r3, [r7, #14]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d105      	bne.n	800fe56 <dec_lock+0x5a>
 800fe4a:	4a09      	ldr	r2, [pc, #36]	; (800fe70 <dec_lock+0x74>)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	011b      	lsls	r3, r3, #4
 800fe50:	4413      	add	r3, r2
 800fe52:	2200      	movs	r2, #0
 800fe54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fe56:	2300      	movs	r3, #0
 800fe58:	737b      	strb	r3, [r7, #13]
 800fe5a:	e001      	b.n	800fe60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fe5c:	2302      	movs	r3, #2
 800fe5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fe60:	7b7b      	ldrb	r3, [r7, #13]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3714      	adds	r7, #20
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop
 800fe70:	240001fc 	.word	0x240001fc

0800fe74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b085      	sub	sp, #20
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	60fb      	str	r3, [r7, #12]
 800fe80:	e010      	b.n	800fea4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fe82:	4a0d      	ldr	r2, [pc, #52]	; (800feb8 <clear_lock+0x44>)
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	011b      	lsls	r3, r3, #4
 800fe88:	4413      	add	r3, r2
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	687a      	ldr	r2, [r7, #4]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d105      	bne.n	800fe9e <clear_lock+0x2a>
 800fe92:	4a09      	ldr	r2, [pc, #36]	; (800feb8 <clear_lock+0x44>)
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	011b      	lsls	r3, r3, #4
 800fe98:	4413      	add	r3, r2
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	3301      	adds	r3, #1
 800fea2:	60fb      	str	r3, [r7, #12]
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d9eb      	bls.n	800fe82 <clear_lock+0xe>
	}
}
 800feaa:	bf00      	nop
 800feac:	3714      	adds	r7, #20
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	240001fc 	.word	0x240001fc

0800febc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b086      	sub	sp, #24
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fec4:	2300      	movs	r3, #0
 800fec6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	78db      	ldrb	r3, [r3, #3]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d034      	beq.n	800ff3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	7858      	ldrb	r0, [r3, #1]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fee0:	2301      	movs	r3, #1
 800fee2:	697a      	ldr	r2, [r7, #20]
 800fee4:	f7ff fd40 	bl	800f968 <disk_write>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d002      	beq.n	800fef4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800feee:	2301      	movs	r3, #1
 800fef0:	73fb      	strb	r3, [r7, #15]
 800fef2:	e022      	b.n	800ff3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a1b      	ldr	r3, [r3, #32]
 800fefe:	697a      	ldr	r2, [r7, #20]
 800ff00:	1ad2      	subs	r2, r2, r3
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	699b      	ldr	r3, [r3, #24]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d217      	bcs.n	800ff3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	789b      	ldrb	r3, [r3, #2]
 800ff0e:	613b      	str	r3, [r7, #16]
 800ff10:	e010      	b.n	800ff34 <sync_window+0x78>
					wsect += fs->fsize;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	699b      	ldr	r3, [r3, #24]
 800ff16:	697a      	ldr	r2, [r7, #20]
 800ff18:	4413      	add	r3, r2
 800ff1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	7858      	ldrb	r0, [r3, #1]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff26:	2301      	movs	r3, #1
 800ff28:	697a      	ldr	r2, [r7, #20]
 800ff2a:	f7ff fd1d 	bl	800f968 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	3b01      	subs	r3, #1
 800ff32:	613b      	str	r3, [r7, #16]
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	2b01      	cmp	r3, #1
 800ff38:	d8eb      	bhi.n	800ff12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ff3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3718      	adds	r7, #24
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff56:	683a      	ldr	r2, [r7, #0]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d01b      	beq.n	800ff94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f7ff ffad 	bl	800febc <sync_window>
 800ff62:	4603      	mov	r3, r0
 800ff64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ff66:	7bfb      	ldrb	r3, [r7, #15]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d113      	bne.n	800ff94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	7858      	ldrb	r0, [r3, #1]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff76:	2301      	movs	r3, #1
 800ff78:	683a      	ldr	r2, [r7, #0]
 800ff7a:	f7ff fcd5 	bl	800f928 <disk_read>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d004      	beq.n	800ff8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ff84:	f04f 33ff 	mov.w	r3, #4294967295
 800ff88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	683a      	ldr	r2, [r7, #0]
 800ff92:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ff94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3710      	adds	r7, #16
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
	...

0800ffa0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f7ff ff87 	bl	800febc <sync_window>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ffb2:	7bfb      	ldrb	r3, [r7, #15]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d158      	bne.n	801006a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	2b03      	cmp	r3, #3
 800ffbe:	d148      	bne.n	8010052 <sync_fs+0xb2>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	791b      	ldrb	r3, [r3, #4]
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d144      	bne.n	8010052 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	3330      	adds	r3, #48	; 0x30
 800ffcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffd0:	2100      	movs	r1, #0
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7ff fda9 	bl	800fb2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	3330      	adds	r3, #48	; 0x30
 800ffdc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ffe0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7ff fd38 	bl	800fa5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	3330      	adds	r3, #48	; 0x30
 800ffee:	4921      	ldr	r1, [pc, #132]	; (8010074 <sync_fs+0xd4>)
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7ff fd4d 	bl	800fa90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	3330      	adds	r3, #48	; 0x30
 800fffa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fffe:	491e      	ldr	r1, [pc, #120]	; (8010078 <sync_fs+0xd8>)
 8010000:	4618      	mov	r0, r3
 8010002:	f7ff fd45 	bl	800fa90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	3330      	adds	r3, #48	; 0x30
 801000a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	691b      	ldr	r3, [r3, #16]
 8010012:	4619      	mov	r1, r3
 8010014:	4610      	mov	r0, r2
 8010016:	f7ff fd3b 	bl	800fa90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	3330      	adds	r3, #48	; 0x30
 801001e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	68db      	ldr	r3, [r3, #12]
 8010026:	4619      	mov	r1, r3
 8010028:	4610      	mov	r0, r2
 801002a:	f7ff fd31 	bl	800fa90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	69db      	ldr	r3, [r3, #28]
 8010032:	1c5a      	adds	r2, r3, #1
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	7858      	ldrb	r0, [r3, #1]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010046:	2301      	movs	r3, #1
 8010048:	f7ff fc8e 	bl	800f968 <disk_write>
			fs->fsi_flag = 0;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2200      	movs	r2, #0
 8010050:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	785b      	ldrb	r3, [r3, #1]
 8010056:	2200      	movs	r2, #0
 8010058:	2100      	movs	r1, #0
 801005a:	4618      	mov	r0, r3
 801005c:	f7ff fca4 	bl	800f9a8 <disk_ioctl>
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <sync_fs+0xca>
 8010066:	2301      	movs	r3, #1
 8010068:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801006a:	7bfb      	ldrb	r3, [r7, #15]
}
 801006c:	4618      	mov	r0, r3
 801006e:	3710      	adds	r7, #16
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}
 8010074:	41615252 	.word	0x41615252
 8010078:	61417272 	.word	0x61417272

0801007c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	3b02      	subs	r3, #2
 801008a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	695b      	ldr	r3, [r3, #20]
 8010090:	3b02      	subs	r3, #2
 8010092:	683a      	ldr	r2, [r7, #0]
 8010094:	429a      	cmp	r2, r3
 8010096:	d301      	bcc.n	801009c <clust2sect+0x20>
 8010098:	2300      	movs	r3, #0
 801009a:	e008      	b.n	80100ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	895b      	ldrh	r3, [r3, #10]
 80100a0:	461a      	mov	r2, r3
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	fb03 f202 	mul.w	r2, r3, r2
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ac:	4413      	add	r3, r2
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	370c      	adds	r7, #12
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr

080100ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80100ba:	b580      	push	{r7, lr}
 80100bc:	b086      	sub	sp, #24
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
 80100c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d904      	bls.n	80100da <get_fat+0x20>
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	695b      	ldr	r3, [r3, #20]
 80100d4:	683a      	ldr	r2, [r7, #0]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d302      	bcc.n	80100e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80100da:	2301      	movs	r3, #1
 80100dc:	617b      	str	r3, [r7, #20]
 80100de:	e08c      	b.n	80101fa <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80100e0:	f04f 33ff 	mov.w	r3, #4294967295
 80100e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	2b02      	cmp	r3, #2
 80100ec:	d045      	beq.n	801017a <get_fat+0xc0>
 80100ee:	2b03      	cmp	r3, #3
 80100f0:	d05d      	beq.n	80101ae <get_fat+0xf4>
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	d177      	bne.n	80101e6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	60fb      	str	r3, [r7, #12]
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	085b      	lsrs	r3, r3, #1
 80100fe:	68fa      	ldr	r2, [r7, #12]
 8010100:	4413      	add	r3, r2
 8010102:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	6a1a      	ldr	r2, [r3, #32]
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	0a5b      	lsrs	r3, r3, #9
 801010c:	4413      	add	r3, r2
 801010e:	4619      	mov	r1, r3
 8010110:	6938      	ldr	r0, [r7, #16]
 8010112:	f7ff ff17 	bl	800ff44 <move_window>
 8010116:	4603      	mov	r3, r0
 8010118:	2b00      	cmp	r3, #0
 801011a:	d167      	bne.n	80101ec <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	1c5a      	adds	r2, r3, #1
 8010120:	60fa      	str	r2, [r7, #12]
 8010122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010126:	693a      	ldr	r2, [r7, #16]
 8010128:	4413      	add	r3, r2
 801012a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801012e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	6a1a      	ldr	r2, [r3, #32]
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	0a5b      	lsrs	r3, r3, #9
 8010138:	4413      	add	r3, r2
 801013a:	4619      	mov	r1, r3
 801013c:	6938      	ldr	r0, [r7, #16]
 801013e:	f7ff ff01 	bl	800ff44 <move_window>
 8010142:	4603      	mov	r3, r0
 8010144:	2b00      	cmp	r3, #0
 8010146:	d153      	bne.n	80101f0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801014e:	693a      	ldr	r2, [r7, #16]
 8010150:	4413      	add	r3, r2
 8010152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010156:	021b      	lsls	r3, r3, #8
 8010158:	461a      	mov	r2, r3
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	4313      	orrs	r3, r2
 801015e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	f003 0301 	and.w	r3, r3, #1
 8010166:	2b00      	cmp	r3, #0
 8010168:	d002      	beq.n	8010170 <get_fat+0xb6>
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	091b      	lsrs	r3, r3, #4
 801016e:	e002      	b.n	8010176 <get_fat+0xbc>
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010176:	617b      	str	r3, [r7, #20]
			break;
 8010178:	e03f      	b.n	80101fa <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	6a1a      	ldr	r2, [r3, #32]
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	0a1b      	lsrs	r3, r3, #8
 8010182:	4413      	add	r3, r2
 8010184:	4619      	mov	r1, r3
 8010186:	6938      	ldr	r0, [r7, #16]
 8010188:	f7ff fedc 	bl	800ff44 <move_window>
 801018c:	4603      	mov	r3, r0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d130      	bne.n	80101f4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	005b      	lsls	r3, r3, #1
 801019c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80101a0:	4413      	add	r3, r2
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7ff fc1e 	bl	800f9e4 <ld_word>
 80101a8:	4603      	mov	r3, r0
 80101aa:	617b      	str	r3, [r7, #20]
			break;
 80101ac:	e025      	b.n	80101fa <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	6a1a      	ldr	r2, [r3, #32]
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	09db      	lsrs	r3, r3, #7
 80101b6:	4413      	add	r3, r2
 80101b8:	4619      	mov	r1, r3
 80101ba:	6938      	ldr	r0, [r7, #16]
 80101bc:	f7ff fec2 	bl	800ff44 <move_window>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d118      	bne.n	80101f8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80101d4:	4413      	add	r3, r2
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7ff fc1c 	bl	800fa14 <ld_dword>
 80101dc:	4603      	mov	r3, r0
 80101de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80101e2:	617b      	str	r3, [r7, #20]
			break;
 80101e4:	e009      	b.n	80101fa <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80101e6:	2301      	movs	r3, #1
 80101e8:	617b      	str	r3, [r7, #20]
 80101ea:	e006      	b.n	80101fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80101ec:	bf00      	nop
 80101ee:	e004      	b.n	80101fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80101f0:	bf00      	nop
 80101f2:	e002      	b.n	80101fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80101f4:	bf00      	nop
 80101f6:	e000      	b.n	80101fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80101f8:	bf00      	nop
		}
	}

	return val;
 80101fa:	697b      	ldr	r3, [r7, #20]
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3718      	adds	r7, #24
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010204:	b590      	push	{r4, r7, lr}
 8010206:	b089      	sub	sp, #36	; 0x24
 8010208:	af00      	add	r7, sp, #0
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010210:	2302      	movs	r3, #2
 8010212:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	2b01      	cmp	r3, #1
 8010218:	f240 80d6 	bls.w	80103c8 <put_fat+0x1c4>
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	695b      	ldr	r3, [r3, #20]
 8010220:	68ba      	ldr	r2, [r7, #8]
 8010222:	429a      	cmp	r2, r3
 8010224:	f080 80d0 	bcs.w	80103c8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	2b02      	cmp	r3, #2
 801022e:	d073      	beq.n	8010318 <put_fat+0x114>
 8010230:	2b03      	cmp	r3, #3
 8010232:	f000 8091 	beq.w	8010358 <put_fat+0x154>
 8010236:	2b01      	cmp	r3, #1
 8010238:	f040 80c6 	bne.w	80103c8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	61bb      	str	r3, [r7, #24]
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	085b      	lsrs	r3, r3, #1
 8010244:	69ba      	ldr	r2, [r7, #24]
 8010246:	4413      	add	r3, r2
 8010248:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	6a1a      	ldr	r2, [r3, #32]
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	0a5b      	lsrs	r3, r3, #9
 8010252:	4413      	add	r3, r2
 8010254:	4619      	mov	r1, r3
 8010256:	68f8      	ldr	r0, [r7, #12]
 8010258:	f7ff fe74 	bl	800ff44 <move_window>
 801025c:	4603      	mov	r3, r0
 801025e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010260:	7ffb      	ldrb	r3, [r7, #31]
 8010262:	2b00      	cmp	r3, #0
 8010264:	f040 80a9 	bne.w	80103ba <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	1c59      	adds	r1, r3, #1
 8010272:	61b9      	str	r1, [r7, #24]
 8010274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010278:	4413      	add	r3, r2
 801027a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	f003 0301 	and.w	r3, r3, #1
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00d      	beq.n	80102a2 <put_fat+0x9e>
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	b25b      	sxtb	r3, r3
 801028c:	f003 030f 	and.w	r3, r3, #15
 8010290:	b25a      	sxtb	r2, r3
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	b2db      	uxtb	r3, r3
 8010296:	011b      	lsls	r3, r3, #4
 8010298:	b25b      	sxtb	r3, r3
 801029a:	4313      	orrs	r3, r2
 801029c:	b25b      	sxtb	r3, r3
 801029e:	b2db      	uxtb	r3, r3
 80102a0:	e001      	b.n	80102a6 <put_fat+0xa2>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	697a      	ldr	r2, [r7, #20]
 80102a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2201      	movs	r2, #1
 80102ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	6a1a      	ldr	r2, [r3, #32]
 80102b4:	69bb      	ldr	r3, [r7, #24]
 80102b6:	0a5b      	lsrs	r3, r3, #9
 80102b8:	4413      	add	r3, r2
 80102ba:	4619      	mov	r1, r3
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f7ff fe41 	bl	800ff44 <move_window>
 80102c2:	4603      	mov	r3, r0
 80102c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80102c6:	7ffb      	ldrb	r3, [r7, #31]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d178      	bne.n	80103be <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102d8:	4413      	add	r3, r2
 80102da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	f003 0301 	and.w	r3, r3, #1
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d003      	beq.n	80102ee <put_fat+0xea>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	091b      	lsrs	r3, r3, #4
 80102ea:	b2db      	uxtb	r3, r3
 80102ec:	e00e      	b.n	801030c <put_fat+0x108>
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	b25b      	sxtb	r3, r3
 80102f4:	f023 030f 	bic.w	r3, r3, #15
 80102f8:	b25a      	sxtb	r2, r3
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	0a1b      	lsrs	r3, r3, #8
 80102fe:	b25b      	sxtb	r3, r3
 8010300:	f003 030f 	and.w	r3, r3, #15
 8010304:	b25b      	sxtb	r3, r3
 8010306:	4313      	orrs	r3, r2
 8010308:	b25b      	sxtb	r3, r3
 801030a:	b2db      	uxtb	r3, r3
 801030c:	697a      	ldr	r2, [r7, #20]
 801030e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2201      	movs	r2, #1
 8010314:	70da      	strb	r2, [r3, #3]
			break;
 8010316:	e057      	b.n	80103c8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	6a1a      	ldr	r2, [r3, #32]
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	0a1b      	lsrs	r3, r3, #8
 8010320:	4413      	add	r3, r2
 8010322:	4619      	mov	r1, r3
 8010324:	68f8      	ldr	r0, [r7, #12]
 8010326:	f7ff fe0d 	bl	800ff44 <move_window>
 801032a:	4603      	mov	r3, r0
 801032c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801032e:	7ffb      	ldrb	r3, [r7, #31]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d146      	bne.n	80103c2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	005b      	lsls	r3, r3, #1
 801033e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010342:	4413      	add	r3, r2
 8010344:	687a      	ldr	r2, [r7, #4]
 8010346:	b292      	uxth	r2, r2
 8010348:	4611      	mov	r1, r2
 801034a:	4618      	mov	r0, r3
 801034c:	f7ff fb85 	bl	800fa5a <st_word>
			fs->wflag = 1;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2201      	movs	r2, #1
 8010354:	70da      	strb	r2, [r3, #3]
			break;
 8010356:	e037      	b.n	80103c8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	6a1a      	ldr	r2, [r3, #32]
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	09db      	lsrs	r3, r3, #7
 8010360:	4413      	add	r3, r2
 8010362:	4619      	mov	r1, r3
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f7ff fded 	bl	800ff44 <move_window>
 801036a:	4603      	mov	r3, r0
 801036c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801036e:	7ffb      	ldrb	r3, [r7, #31]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d128      	bne.n	80103c6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	009b      	lsls	r3, r3, #2
 8010384:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010388:	4413      	add	r3, r2
 801038a:	4618      	mov	r0, r3
 801038c:	f7ff fb42 	bl	800fa14 <ld_dword>
 8010390:	4603      	mov	r3, r0
 8010392:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010396:	4323      	orrs	r3, r4
 8010398:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80103a8:	4413      	add	r3, r2
 80103aa:	6879      	ldr	r1, [r7, #4]
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7ff fb6f 	bl	800fa90 <st_dword>
			fs->wflag = 1;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2201      	movs	r2, #1
 80103b6:	70da      	strb	r2, [r3, #3]
			break;
 80103b8:	e006      	b.n	80103c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103ba:	bf00      	nop
 80103bc:	e004      	b.n	80103c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103be:	bf00      	nop
 80103c0:	e002      	b.n	80103c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103c2:	bf00      	nop
 80103c4:	e000      	b.n	80103c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103c6:	bf00      	nop
		}
	}
	return res;
 80103c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3724      	adds	r7, #36	; 0x24
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd90      	pop	{r4, r7, pc}

080103d2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80103d2:	b580      	push	{r7, lr}
 80103d4:	b088      	sub	sp, #32
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	60f8      	str	r0, [r7, #12]
 80103da:	60b9      	str	r1, [r7, #8]
 80103dc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80103de:	2300      	movs	r3, #0
 80103e0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d904      	bls.n	80103f8 <remove_chain+0x26>
 80103ee:	69bb      	ldr	r3, [r7, #24]
 80103f0:	695b      	ldr	r3, [r3, #20]
 80103f2:	68ba      	ldr	r2, [r7, #8]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d301      	bcc.n	80103fc <remove_chain+0x2a>
 80103f8:	2302      	movs	r3, #2
 80103fa:	e04b      	b.n	8010494 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00c      	beq.n	801041c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010402:	f04f 32ff 	mov.w	r2, #4294967295
 8010406:	6879      	ldr	r1, [r7, #4]
 8010408:	69b8      	ldr	r0, [r7, #24]
 801040a:	f7ff fefb 	bl	8010204 <put_fat>
 801040e:	4603      	mov	r3, r0
 8010410:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010412:	7ffb      	ldrb	r3, [r7, #31]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d001      	beq.n	801041c <remove_chain+0x4a>
 8010418:	7ffb      	ldrb	r3, [r7, #31]
 801041a:	e03b      	b.n	8010494 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801041c:	68b9      	ldr	r1, [r7, #8]
 801041e:	68f8      	ldr	r0, [r7, #12]
 8010420:	f7ff fe4b 	bl	80100ba <get_fat>
 8010424:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d031      	beq.n	8010490 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	2b01      	cmp	r3, #1
 8010430:	d101      	bne.n	8010436 <remove_chain+0x64>
 8010432:	2302      	movs	r3, #2
 8010434:	e02e      	b.n	8010494 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801043c:	d101      	bne.n	8010442 <remove_chain+0x70>
 801043e:	2301      	movs	r3, #1
 8010440:	e028      	b.n	8010494 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010442:	2200      	movs	r2, #0
 8010444:	68b9      	ldr	r1, [r7, #8]
 8010446:	69b8      	ldr	r0, [r7, #24]
 8010448:	f7ff fedc 	bl	8010204 <put_fat>
 801044c:	4603      	mov	r3, r0
 801044e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010450:	7ffb      	ldrb	r3, [r7, #31]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d001      	beq.n	801045a <remove_chain+0x88>
 8010456:	7ffb      	ldrb	r3, [r7, #31]
 8010458:	e01c      	b.n	8010494 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	691a      	ldr	r2, [r3, #16]
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	695b      	ldr	r3, [r3, #20]
 8010462:	3b02      	subs	r3, #2
 8010464:	429a      	cmp	r2, r3
 8010466:	d20b      	bcs.n	8010480 <remove_chain+0xae>
			fs->free_clst++;
 8010468:	69bb      	ldr	r3, [r7, #24]
 801046a:	691b      	ldr	r3, [r3, #16]
 801046c:	1c5a      	adds	r2, r3, #1
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010472:	69bb      	ldr	r3, [r7, #24]
 8010474:	791b      	ldrb	r3, [r3, #4]
 8010476:	f043 0301 	orr.w	r3, r3, #1
 801047a:	b2da      	uxtb	r2, r3
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	695b      	ldr	r3, [r3, #20]
 8010488:	68ba      	ldr	r2, [r7, #8]
 801048a:	429a      	cmp	r2, r3
 801048c:	d3c6      	bcc.n	801041c <remove_chain+0x4a>
 801048e:	e000      	b.n	8010492 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010490:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010492:	2300      	movs	r3, #0
}
 8010494:	4618      	mov	r0, r3
 8010496:	3720      	adds	r7, #32
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b088      	sub	sp, #32
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d10d      	bne.n	80104ce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d004      	beq.n	80104c8 <create_chain+0x2c>
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	695b      	ldr	r3, [r3, #20]
 80104c2:	69ba      	ldr	r2, [r7, #24]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d31b      	bcc.n	8010500 <create_chain+0x64>
 80104c8:	2301      	movs	r3, #1
 80104ca:	61bb      	str	r3, [r7, #24]
 80104cc:	e018      	b.n	8010500 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80104ce:	6839      	ldr	r1, [r7, #0]
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f7ff fdf2 	bl	80100ba <get_fat>
 80104d6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d801      	bhi.n	80104e2 <create_chain+0x46>
 80104de:	2301      	movs	r3, #1
 80104e0:	e070      	b.n	80105c4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104e8:	d101      	bne.n	80104ee <create_chain+0x52>
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	e06a      	b.n	80105c4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	695b      	ldr	r3, [r3, #20]
 80104f2:	68fa      	ldr	r2, [r7, #12]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d201      	bcs.n	80104fc <create_chain+0x60>
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	e063      	b.n	80105c4 <create_chain+0x128>
		scl = clst;
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	3301      	adds	r3, #1
 8010508:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	695b      	ldr	r3, [r3, #20]
 801050e:	69fa      	ldr	r2, [r7, #28]
 8010510:	429a      	cmp	r2, r3
 8010512:	d307      	bcc.n	8010524 <create_chain+0x88>
				ncl = 2;
 8010514:	2302      	movs	r3, #2
 8010516:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010518:	69fa      	ldr	r2, [r7, #28]
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	429a      	cmp	r2, r3
 801051e:	d901      	bls.n	8010524 <create_chain+0x88>
 8010520:	2300      	movs	r3, #0
 8010522:	e04f      	b.n	80105c4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010524:	69f9      	ldr	r1, [r7, #28]
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7ff fdc7 	bl	80100ba <get_fat>
 801052c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d00e      	beq.n	8010552 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2b01      	cmp	r3, #1
 8010538:	d003      	beq.n	8010542 <create_chain+0xa6>
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010540:	d101      	bne.n	8010546 <create_chain+0xaa>
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	e03e      	b.n	80105c4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010546:	69fa      	ldr	r2, [r7, #28]
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	429a      	cmp	r2, r3
 801054c:	d1da      	bne.n	8010504 <create_chain+0x68>
 801054e:	2300      	movs	r3, #0
 8010550:	e038      	b.n	80105c4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010552:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010554:	f04f 32ff 	mov.w	r2, #4294967295
 8010558:	69f9      	ldr	r1, [r7, #28]
 801055a:	6938      	ldr	r0, [r7, #16]
 801055c:	f7ff fe52 	bl	8010204 <put_fat>
 8010560:	4603      	mov	r3, r0
 8010562:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010564:	7dfb      	ldrb	r3, [r7, #23]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d109      	bne.n	801057e <create_chain+0xe2>
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d006      	beq.n	801057e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010570:	69fa      	ldr	r2, [r7, #28]
 8010572:	6839      	ldr	r1, [r7, #0]
 8010574:	6938      	ldr	r0, [r7, #16]
 8010576:	f7ff fe45 	bl	8010204 <put_fat>
 801057a:	4603      	mov	r3, r0
 801057c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801057e:	7dfb      	ldrb	r3, [r7, #23]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d116      	bne.n	80105b2 <create_chain+0x116>
		fs->last_clst = ncl;
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	69fa      	ldr	r2, [r7, #28]
 8010588:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	691a      	ldr	r2, [r3, #16]
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	695b      	ldr	r3, [r3, #20]
 8010592:	3b02      	subs	r3, #2
 8010594:	429a      	cmp	r2, r3
 8010596:	d804      	bhi.n	80105a2 <create_chain+0x106>
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	691b      	ldr	r3, [r3, #16]
 801059c:	1e5a      	subs	r2, r3, #1
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	791b      	ldrb	r3, [r3, #4]
 80105a6:	f043 0301 	orr.w	r3, r3, #1
 80105aa:	b2da      	uxtb	r2, r3
 80105ac:	693b      	ldr	r3, [r7, #16]
 80105ae:	711a      	strb	r2, [r3, #4]
 80105b0:	e007      	b.n	80105c2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80105b2:	7dfb      	ldrb	r3, [r7, #23]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d102      	bne.n	80105be <create_chain+0x122>
 80105b8:	f04f 33ff 	mov.w	r3, #4294967295
 80105bc:	e000      	b.n	80105c0 <create_chain+0x124>
 80105be:	2301      	movs	r3, #1
 80105c0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80105c2:	69fb      	ldr	r3, [r7, #28]
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3720      	adds	r7, #32
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b087      	sub	sp, #28
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e0:	3304      	adds	r3, #4
 80105e2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	0a5b      	lsrs	r3, r3, #9
 80105e8:	68fa      	ldr	r2, [r7, #12]
 80105ea:	8952      	ldrh	r2, [r2, #10]
 80105ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80105f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	1d1a      	adds	r2, r3, #4
 80105f6:	613a      	str	r2, [r7, #16]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d101      	bne.n	8010606 <clmt_clust+0x3a>
 8010602:	2300      	movs	r3, #0
 8010604:	e010      	b.n	8010628 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010606:	697a      	ldr	r2, [r7, #20]
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	429a      	cmp	r2, r3
 801060c:	d307      	bcc.n	801061e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801060e:	697a      	ldr	r2, [r7, #20]
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	1ad3      	subs	r3, r2, r3
 8010614:	617b      	str	r3, [r7, #20]
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	3304      	adds	r3, #4
 801061a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801061c:	e7e9      	b.n	80105f2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801061e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	4413      	add	r3, r2
}
 8010628:	4618      	mov	r0, r3
 801062a:	371c      	adds	r7, #28
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b086      	sub	sp, #24
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801064a:	d204      	bcs.n	8010656 <dir_sdi+0x22>
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	f003 031f 	and.w	r3, r3, #31
 8010652:	2b00      	cmp	r3, #0
 8010654:	d001      	beq.n	801065a <dir_sdi+0x26>
		return FR_INT_ERR;
 8010656:	2302      	movs	r3, #2
 8010658:	e063      	b.n	8010722 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	683a      	ldr	r2, [r7, #0]
 801065e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	689b      	ldr	r3, [r3, #8]
 8010664:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d106      	bne.n	801067a <dir_sdi+0x46>
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	2b02      	cmp	r3, #2
 8010672:	d902      	bls.n	801067a <dir_sdi+0x46>
		clst = fs->dirbase;
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010678:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d10c      	bne.n	801069a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	095b      	lsrs	r3, r3, #5
 8010684:	693a      	ldr	r2, [r7, #16]
 8010686:	8912      	ldrh	r2, [r2, #8]
 8010688:	4293      	cmp	r3, r2
 801068a:	d301      	bcc.n	8010690 <dir_sdi+0x5c>
 801068c:	2302      	movs	r3, #2
 801068e:	e048      	b.n	8010722 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	61da      	str	r2, [r3, #28]
 8010698:	e029      	b.n	80106ee <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	895b      	ldrh	r3, [r3, #10]
 801069e:	025b      	lsls	r3, r3, #9
 80106a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80106a2:	e019      	b.n	80106d8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6979      	ldr	r1, [r7, #20]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7ff fd06 	bl	80100ba <get_fat>
 80106ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b6:	d101      	bne.n	80106bc <dir_sdi+0x88>
 80106b8:	2301      	movs	r3, #1
 80106ba:	e032      	b.n	8010722 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d904      	bls.n	80106cc <dir_sdi+0x98>
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	695b      	ldr	r3, [r3, #20]
 80106c6:	697a      	ldr	r2, [r7, #20]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d301      	bcc.n	80106d0 <dir_sdi+0x9c>
 80106cc:	2302      	movs	r3, #2
 80106ce:	e028      	b.n	8010722 <dir_sdi+0xee>
			ofs -= csz;
 80106d0:	683a      	ldr	r2, [r7, #0]
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	1ad3      	subs	r3, r2, r3
 80106d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80106d8:	683a      	ldr	r2, [r7, #0]
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d2e1      	bcs.n	80106a4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80106e0:	6979      	ldr	r1, [r7, #20]
 80106e2:	6938      	ldr	r0, [r7, #16]
 80106e4:	f7ff fcca 	bl	801007c <clust2sect>
 80106e8:	4602      	mov	r2, r0
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	697a      	ldr	r2, [r7, #20]
 80106f2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	69db      	ldr	r3, [r3, #28]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d101      	bne.n	8010700 <dir_sdi+0xcc>
 80106fc:	2302      	movs	r3, #2
 80106fe:	e010      	b.n	8010722 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	69da      	ldr	r2, [r3, #28]
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	0a5b      	lsrs	r3, r3, #9
 8010708:	441a      	add	r2, r3
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801071a:	441a      	add	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010720:	2300      	movs	r3, #0
}
 8010722:	4618      	mov	r0, r3
 8010724:	3718      	adds	r7, #24
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}

0801072a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801072a:	b580      	push	{r7, lr}
 801072c:	b086      	sub	sp, #24
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
 8010732:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	695b      	ldr	r3, [r3, #20]
 801073e:	3320      	adds	r3, #32
 8010740:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	69db      	ldr	r3, [r3, #28]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d003      	beq.n	8010752 <dir_next+0x28>
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010750:	d301      	bcc.n	8010756 <dir_next+0x2c>
 8010752:	2304      	movs	r3, #4
 8010754:	e0aa      	b.n	80108ac <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801075c:	2b00      	cmp	r3, #0
 801075e:	f040 8098 	bne.w	8010892 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	69db      	ldr	r3, [r3, #28]
 8010766:	1c5a      	adds	r2, r3, #1
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	699b      	ldr	r3, [r3, #24]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d10b      	bne.n	801078c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	095b      	lsrs	r3, r3, #5
 8010778:	68fa      	ldr	r2, [r7, #12]
 801077a:	8912      	ldrh	r2, [r2, #8]
 801077c:	4293      	cmp	r3, r2
 801077e:	f0c0 8088 	bcc.w	8010892 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	61da      	str	r2, [r3, #28]
 8010788:	2304      	movs	r3, #4
 801078a:	e08f      	b.n	80108ac <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	0a5b      	lsrs	r3, r3, #9
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	8952      	ldrh	r2, [r2, #10]
 8010794:	3a01      	subs	r2, #1
 8010796:	4013      	ands	r3, r2
 8010798:	2b00      	cmp	r3, #0
 801079a:	d17a      	bne.n	8010892 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	699b      	ldr	r3, [r3, #24]
 80107a2:	4619      	mov	r1, r3
 80107a4:	4610      	mov	r0, r2
 80107a6:	f7ff fc88 	bl	80100ba <get_fat>
 80107aa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d801      	bhi.n	80107b6 <dir_next+0x8c>
 80107b2:	2302      	movs	r3, #2
 80107b4:	e07a      	b.n	80108ac <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107bc:	d101      	bne.n	80107c2 <dir_next+0x98>
 80107be:	2301      	movs	r3, #1
 80107c0:	e074      	b.n	80108ac <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	695b      	ldr	r3, [r3, #20]
 80107c6:	697a      	ldr	r2, [r7, #20]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d358      	bcc.n	801087e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d104      	bne.n	80107dc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2200      	movs	r2, #0
 80107d6:	61da      	str	r2, [r3, #28]
 80107d8:	2304      	movs	r3, #4
 80107da:	e067      	b.n	80108ac <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80107dc:	687a      	ldr	r2, [r7, #4]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	699b      	ldr	r3, [r3, #24]
 80107e2:	4619      	mov	r1, r3
 80107e4:	4610      	mov	r0, r2
 80107e6:	f7ff fe59 	bl	801049c <create_chain>
 80107ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d101      	bne.n	80107f6 <dir_next+0xcc>
 80107f2:	2307      	movs	r3, #7
 80107f4:	e05a      	b.n	80108ac <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d101      	bne.n	8010800 <dir_next+0xd6>
 80107fc:	2302      	movs	r3, #2
 80107fe:	e055      	b.n	80108ac <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010806:	d101      	bne.n	801080c <dir_next+0xe2>
 8010808:	2301      	movs	r3, #1
 801080a:	e04f      	b.n	80108ac <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801080c:	68f8      	ldr	r0, [r7, #12]
 801080e:	f7ff fb55 	bl	800febc <sync_window>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <dir_next+0xf2>
 8010818:	2301      	movs	r3, #1
 801081a:	e047      	b.n	80108ac <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	3330      	adds	r3, #48	; 0x30
 8010820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010824:	2100      	movs	r1, #0
 8010826:	4618      	mov	r0, r3
 8010828:	f7ff f97f 	bl	800fb2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801082c:	2300      	movs	r3, #0
 801082e:	613b      	str	r3, [r7, #16]
 8010830:	6979      	ldr	r1, [r7, #20]
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	f7ff fc22 	bl	801007c <clust2sect>
 8010838:	4602      	mov	r2, r0
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	62da      	str	r2, [r3, #44]	; 0x2c
 801083e:	e012      	b.n	8010866 <dir_next+0x13c>
						fs->wflag = 1;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2201      	movs	r2, #1
 8010844:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010846:	68f8      	ldr	r0, [r7, #12]
 8010848:	f7ff fb38 	bl	800febc <sync_window>
 801084c:	4603      	mov	r3, r0
 801084e:	2b00      	cmp	r3, #0
 8010850:	d001      	beq.n	8010856 <dir_next+0x12c>
 8010852:	2301      	movs	r3, #1
 8010854:	e02a      	b.n	80108ac <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	3301      	adds	r3, #1
 801085a:	613b      	str	r3, [r7, #16]
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010860:	1c5a      	adds	r2, r3, #1
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	62da      	str	r2, [r3, #44]	; 0x2c
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	895b      	ldrh	r3, [r3, #10]
 801086a:	461a      	mov	r2, r3
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	4293      	cmp	r3, r2
 8010870:	d3e6      	bcc.n	8010840 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	1ad2      	subs	r2, r2, r3
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	697a      	ldr	r2, [r7, #20]
 8010882:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010884:	6979      	ldr	r1, [r7, #20]
 8010886:	68f8      	ldr	r0, [r7, #12]
 8010888:	f7ff fbf8 	bl	801007c <clust2sect>
 801088c:	4602      	mov	r2, r0
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108a4:	441a      	add	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80108aa:	2300      	movs	r3, #0
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3718      	adds	r7, #24
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b086      	sub	sp, #24
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80108c4:	2100      	movs	r1, #0
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7ff feb4 	bl	8010634 <dir_sdi>
 80108cc:	4603      	mov	r3, r0
 80108ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80108d0:	7dfb      	ldrb	r3, [r7, #23]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d12b      	bne.n	801092e <dir_alloc+0x7a>
		n = 0;
 80108d6:	2300      	movs	r3, #0
 80108d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	69db      	ldr	r3, [r3, #28]
 80108de:	4619      	mov	r1, r3
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f7ff fb2f 	bl	800ff44 <move_window>
 80108e6:	4603      	mov	r3, r0
 80108e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80108ea:	7dfb      	ldrb	r3, [r7, #23]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d11d      	bne.n	801092c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6a1b      	ldr	r3, [r3, #32]
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	2be5      	cmp	r3, #229	; 0xe5
 80108f8:	d004      	beq.n	8010904 <dir_alloc+0x50>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6a1b      	ldr	r3, [r3, #32]
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d107      	bne.n	8010914 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	3301      	adds	r3, #1
 8010908:	613b      	str	r3, [r7, #16]
 801090a:	693a      	ldr	r2, [r7, #16]
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	429a      	cmp	r2, r3
 8010910:	d102      	bne.n	8010918 <dir_alloc+0x64>
 8010912:	e00c      	b.n	801092e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010914:	2300      	movs	r3, #0
 8010916:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010918:	2101      	movs	r1, #1
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f7ff ff05 	bl	801072a <dir_next>
 8010920:	4603      	mov	r3, r0
 8010922:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010924:	7dfb      	ldrb	r3, [r7, #23]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d0d7      	beq.n	80108da <dir_alloc+0x26>
 801092a:	e000      	b.n	801092e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801092c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801092e:	7dfb      	ldrb	r3, [r7, #23]
 8010930:	2b04      	cmp	r3, #4
 8010932:	d101      	bne.n	8010938 <dir_alloc+0x84>
 8010934:	2307      	movs	r3, #7
 8010936:	75fb      	strb	r3, [r7, #23]
	return res;
 8010938:	7dfb      	ldrb	r3, [r7, #23]
}
 801093a:	4618      	mov	r0, r3
 801093c:	3718      	adds	r7, #24
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}

08010942 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010942:	b580      	push	{r7, lr}
 8010944:	b084      	sub	sp, #16
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	331a      	adds	r3, #26
 8010950:	4618      	mov	r0, r3
 8010952:	f7ff f847 	bl	800f9e4 <ld_word>
 8010956:	4603      	mov	r3, r0
 8010958:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	2b03      	cmp	r3, #3
 8010960:	d109      	bne.n	8010976 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	3314      	adds	r3, #20
 8010966:	4618      	mov	r0, r3
 8010968:	f7ff f83c 	bl	800f9e4 <ld_word>
 801096c:	4603      	mov	r3, r0
 801096e:	041b      	lsls	r3, r3, #16
 8010970:	68fa      	ldr	r2, [r7, #12]
 8010972:	4313      	orrs	r3, r2
 8010974:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010976:	68fb      	ldr	r3, [r7, #12]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3710      	adds	r7, #16
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	60b9      	str	r1, [r7, #8]
 801098a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	331a      	adds	r3, #26
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	b292      	uxth	r2, r2
 8010994:	4611      	mov	r1, r2
 8010996:	4618      	mov	r0, r3
 8010998:	f7ff f85f 	bl	800fa5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	2b03      	cmp	r3, #3
 80109a2:	d109      	bne.n	80109b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	f103 0214 	add.w	r2, r3, #20
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	0c1b      	lsrs	r3, r3, #16
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	4619      	mov	r1, r3
 80109b2:	4610      	mov	r0, r2
 80109b4:	f7ff f851 	bl	800fa5a <st_word>
	}
}
 80109b8:	bf00      	nop
 80109ba:	3710      	adds	r7, #16
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b086      	sub	sp, #24
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80109ce:	2100      	movs	r1, #0
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7ff fe2f 	bl	8010634 <dir_sdi>
 80109d6:	4603      	mov	r3, r0
 80109d8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80109da:	7dfb      	ldrb	r3, [r7, #23]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d001      	beq.n	80109e4 <dir_find+0x24>
 80109e0:	7dfb      	ldrb	r3, [r7, #23]
 80109e2:	e03e      	b.n	8010a62 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	69db      	ldr	r3, [r3, #28]
 80109e8:	4619      	mov	r1, r3
 80109ea:	6938      	ldr	r0, [r7, #16]
 80109ec:	f7ff faaa 	bl	800ff44 <move_window>
 80109f0:	4603      	mov	r3, r0
 80109f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80109f4:	7dfb      	ldrb	r3, [r7, #23]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d12f      	bne.n	8010a5a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6a1b      	ldr	r3, [r3, #32]
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010a02:	7bfb      	ldrb	r3, [r7, #15]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d102      	bne.n	8010a0e <dir_find+0x4e>
 8010a08:	2304      	movs	r3, #4
 8010a0a:	75fb      	strb	r3, [r7, #23]
 8010a0c:	e028      	b.n	8010a60 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6a1b      	ldr	r3, [r3, #32]
 8010a12:	330b      	adds	r3, #11
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a1a:	b2da      	uxtb	r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6a1b      	ldr	r3, [r3, #32]
 8010a24:	330b      	adds	r3, #11
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	f003 0308 	and.w	r3, r3, #8
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d10a      	bne.n	8010a46 <dir_find+0x86>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6a18      	ldr	r0, [r3, #32]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	3324      	adds	r3, #36	; 0x24
 8010a38:	220b      	movs	r2, #11
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	f7ff f88f 	bl	800fb5e <mem_cmp>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00b      	beq.n	8010a5e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010a46:	2100      	movs	r1, #0
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f7ff fe6e 	bl	801072a <dir_next>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010a52:	7dfb      	ldrb	r3, [r7, #23]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d0c5      	beq.n	80109e4 <dir_find+0x24>
 8010a58:	e002      	b.n	8010a60 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010a5a:	bf00      	nop
 8010a5c:	e000      	b.n	8010a60 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010a5e:	bf00      	nop

	return res;
 8010a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3718      	adds	r7, #24
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}

08010a6a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b084      	sub	sp, #16
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010a78:	2101      	movs	r1, #1
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f7ff ff1a 	bl	80108b4 <dir_alloc>
 8010a80:	4603      	mov	r3, r0
 8010a82:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010a84:	7bfb      	ldrb	r3, [r7, #15]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d11c      	bne.n	8010ac4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	69db      	ldr	r3, [r3, #28]
 8010a8e:	4619      	mov	r1, r3
 8010a90:	68b8      	ldr	r0, [r7, #8]
 8010a92:	f7ff fa57 	bl	800ff44 <move_window>
 8010a96:	4603      	mov	r3, r0
 8010a98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010a9a:	7bfb      	ldrb	r3, [r7, #15]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d111      	bne.n	8010ac4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6a1b      	ldr	r3, [r3, #32]
 8010aa4:	2220      	movs	r2, #32
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7ff f83e 	bl	800fb2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6a18      	ldr	r0, [r3, #32]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	3324      	adds	r3, #36	; 0x24
 8010ab6:	220b      	movs	r2, #11
 8010ab8:	4619      	mov	r1, r3
 8010aba:	f7ff f815 	bl	800fae8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	2201      	movs	r2, #1
 8010ac2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3710      	adds	r7, #16
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
	...

08010ad0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b088      	sub	sp, #32
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	60fb      	str	r3, [r7, #12]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	3324      	adds	r3, #36	; 0x24
 8010ae4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010ae6:	220b      	movs	r2, #11
 8010ae8:	2120      	movs	r1, #32
 8010aea:	68b8      	ldr	r0, [r7, #8]
 8010aec:	f7ff f81d 	bl	800fb2a <mem_set>
	si = i = 0; ni = 8;
 8010af0:	2300      	movs	r3, #0
 8010af2:	613b      	str	r3, [r7, #16]
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	617b      	str	r3, [r7, #20]
 8010af8:	2308      	movs	r3, #8
 8010afa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	1c5a      	adds	r2, r3, #1
 8010b00:	617a      	str	r2, [r7, #20]
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	4413      	add	r3, r2
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010b0a:	7ffb      	ldrb	r3, [r7, #31]
 8010b0c:	2b20      	cmp	r3, #32
 8010b0e:	d94e      	bls.n	8010bae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010b10:	7ffb      	ldrb	r3, [r7, #31]
 8010b12:	2b2f      	cmp	r3, #47	; 0x2f
 8010b14:	d006      	beq.n	8010b24 <create_name+0x54>
 8010b16:	7ffb      	ldrb	r3, [r7, #31]
 8010b18:	2b5c      	cmp	r3, #92	; 0x5c
 8010b1a:	d110      	bne.n	8010b3e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010b1c:	e002      	b.n	8010b24 <create_name+0x54>
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	3301      	adds	r3, #1
 8010b22:	617b      	str	r3, [r7, #20]
 8010b24:	68fa      	ldr	r2, [r7, #12]
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	4413      	add	r3, r2
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	2b2f      	cmp	r3, #47	; 0x2f
 8010b2e:	d0f6      	beq.n	8010b1e <create_name+0x4e>
 8010b30:	68fa      	ldr	r2, [r7, #12]
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	4413      	add	r3, r2
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	2b5c      	cmp	r3, #92	; 0x5c
 8010b3a:	d0f0      	beq.n	8010b1e <create_name+0x4e>
			break;
 8010b3c:	e038      	b.n	8010bb0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010b3e:	7ffb      	ldrb	r3, [r7, #31]
 8010b40:	2b2e      	cmp	r3, #46	; 0x2e
 8010b42:	d003      	beq.n	8010b4c <create_name+0x7c>
 8010b44:	693a      	ldr	r2, [r7, #16]
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d30c      	bcc.n	8010b66 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010b4c:	69bb      	ldr	r3, [r7, #24]
 8010b4e:	2b0b      	cmp	r3, #11
 8010b50:	d002      	beq.n	8010b58 <create_name+0x88>
 8010b52:	7ffb      	ldrb	r3, [r7, #31]
 8010b54:	2b2e      	cmp	r3, #46	; 0x2e
 8010b56:	d001      	beq.n	8010b5c <create_name+0x8c>
 8010b58:	2306      	movs	r3, #6
 8010b5a:	e044      	b.n	8010be6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010b5c:	2308      	movs	r3, #8
 8010b5e:	613b      	str	r3, [r7, #16]
 8010b60:	230b      	movs	r3, #11
 8010b62:	61bb      	str	r3, [r7, #24]
			continue;
 8010b64:	e022      	b.n	8010bac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010b66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	da04      	bge.n	8010b78 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010b6e:	7ffb      	ldrb	r3, [r7, #31]
 8010b70:	3b80      	subs	r3, #128	; 0x80
 8010b72:	4a1f      	ldr	r2, [pc, #124]	; (8010bf0 <create_name+0x120>)
 8010b74:	5cd3      	ldrb	r3, [r2, r3]
 8010b76:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010b78:	7ffb      	ldrb	r3, [r7, #31]
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	481d      	ldr	r0, [pc, #116]	; (8010bf4 <create_name+0x124>)
 8010b7e:	f7ff f815 	bl	800fbac <chk_chr>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d001      	beq.n	8010b8c <create_name+0xbc>
 8010b88:	2306      	movs	r3, #6
 8010b8a:	e02c      	b.n	8010be6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010b8c:	7ffb      	ldrb	r3, [r7, #31]
 8010b8e:	2b60      	cmp	r3, #96	; 0x60
 8010b90:	d905      	bls.n	8010b9e <create_name+0xce>
 8010b92:	7ffb      	ldrb	r3, [r7, #31]
 8010b94:	2b7a      	cmp	r3, #122	; 0x7a
 8010b96:	d802      	bhi.n	8010b9e <create_name+0xce>
 8010b98:	7ffb      	ldrb	r3, [r7, #31]
 8010b9a:	3b20      	subs	r3, #32
 8010b9c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010b9e:	693b      	ldr	r3, [r7, #16]
 8010ba0:	1c5a      	adds	r2, r3, #1
 8010ba2:	613a      	str	r2, [r7, #16]
 8010ba4:	68ba      	ldr	r2, [r7, #8]
 8010ba6:	4413      	add	r3, r2
 8010ba8:	7ffa      	ldrb	r2, [r7, #31]
 8010baa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010bac:	e7a6      	b.n	8010afc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010bae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010bb0:	68fa      	ldr	r2, [r7, #12]
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	441a      	add	r2, r3
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010bba:	693b      	ldr	r3, [r7, #16]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d101      	bne.n	8010bc4 <create_name+0xf4>
 8010bc0:	2306      	movs	r3, #6
 8010bc2:	e010      	b.n	8010be6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	2be5      	cmp	r3, #229	; 0xe5
 8010bca:	d102      	bne.n	8010bd2 <create_name+0x102>
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	2205      	movs	r2, #5
 8010bd0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010bd2:	7ffb      	ldrb	r3, [r7, #31]
 8010bd4:	2b20      	cmp	r3, #32
 8010bd6:	d801      	bhi.n	8010bdc <create_name+0x10c>
 8010bd8:	2204      	movs	r2, #4
 8010bda:	e000      	b.n	8010bde <create_name+0x10e>
 8010bdc:	2200      	movs	r2, #0
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	330b      	adds	r3, #11
 8010be2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010be4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3720      	adds	r7, #32
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	08012994 	.word	0x08012994
 8010bf4:	080128c8 	.word	0x080128c8

08010bf8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b086      	sub	sp, #24
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010c0c:	e002      	b.n	8010c14 <follow_path+0x1c>
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	3301      	adds	r3, #1
 8010c12:	603b      	str	r3, [r7, #0]
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	781b      	ldrb	r3, [r3, #0]
 8010c18:	2b2f      	cmp	r3, #47	; 0x2f
 8010c1a:	d0f8      	beq.n	8010c0e <follow_path+0x16>
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	2b5c      	cmp	r3, #92	; 0x5c
 8010c22:	d0f4      	beq.n	8010c0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	2200      	movs	r2, #0
 8010c28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	2b1f      	cmp	r3, #31
 8010c30:	d80a      	bhi.n	8010c48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2280      	movs	r2, #128	; 0x80
 8010c36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f7ff fcf9 	bl	8010634 <dir_sdi>
 8010c42:	4603      	mov	r3, r0
 8010c44:	75fb      	strb	r3, [r7, #23]
 8010c46:	e043      	b.n	8010cd0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010c48:	463b      	mov	r3, r7
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f7ff ff3f 	bl	8010ad0 <create_name>
 8010c52:	4603      	mov	r3, r0
 8010c54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010c56:	7dfb      	ldrb	r3, [r7, #23]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d134      	bne.n	8010cc6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f7ff feaf 	bl	80109c0 <dir_find>
 8010c62:	4603      	mov	r3, r0
 8010c64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010c6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010c6e:	7dfb      	ldrb	r3, [r7, #23]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00a      	beq.n	8010c8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010c74:	7dfb      	ldrb	r3, [r7, #23]
 8010c76:	2b04      	cmp	r3, #4
 8010c78:	d127      	bne.n	8010cca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010c7a:	7afb      	ldrb	r3, [r7, #11]
 8010c7c:	f003 0304 	and.w	r3, r3, #4
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d122      	bne.n	8010cca <follow_path+0xd2>
 8010c84:	2305      	movs	r3, #5
 8010c86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010c88:	e01f      	b.n	8010cca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010c8a:	7afb      	ldrb	r3, [r7, #11]
 8010c8c:	f003 0304 	and.w	r3, r3, #4
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d11c      	bne.n	8010cce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	799b      	ldrb	r3, [r3, #6]
 8010c98:	f003 0310 	and.w	r3, r3, #16
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d102      	bne.n	8010ca6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010ca0:	2305      	movs	r3, #5
 8010ca2:	75fb      	strb	r3, [r7, #23]
 8010ca4:	e014      	b.n	8010cd0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	695b      	ldr	r3, [r3, #20]
 8010cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cb4:	4413      	add	r3, r2
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	f7ff fe42 	bl	8010942 <ld_clust>
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	693b      	ldr	r3, [r7, #16]
 8010cc2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010cc4:	e7c0      	b.n	8010c48 <follow_path+0x50>
			if (res != FR_OK) break;
 8010cc6:	bf00      	nop
 8010cc8:	e002      	b.n	8010cd0 <follow_path+0xd8>
				break;
 8010cca:	bf00      	nop
 8010ccc:	e000      	b.n	8010cd0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010cce:	bf00      	nop
			}
		}
	}

	return res;
 8010cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3718      	adds	r7, #24
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}

08010cda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010cda:	b480      	push	{r7}
 8010cdc:	b087      	sub	sp, #28
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ce6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d031      	beq.n	8010d54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	617b      	str	r3, [r7, #20]
 8010cf6:	e002      	b.n	8010cfe <get_ldnumber+0x24>
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	617b      	str	r3, [r7, #20]
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	2b20      	cmp	r3, #32
 8010d04:	d903      	bls.n	8010d0e <get_ldnumber+0x34>
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	2b3a      	cmp	r3, #58	; 0x3a
 8010d0c:	d1f4      	bne.n	8010cf8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	781b      	ldrb	r3, [r3, #0]
 8010d12:	2b3a      	cmp	r3, #58	; 0x3a
 8010d14:	d11c      	bne.n	8010d50 <get_ldnumber+0x76>
			tp = *path;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	1c5a      	adds	r2, r3, #1
 8010d20:	60fa      	str	r2, [r7, #12]
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	3b30      	subs	r3, #48	; 0x30
 8010d26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	2b09      	cmp	r3, #9
 8010d2c:	d80e      	bhi.n	8010d4c <get_ldnumber+0x72>
 8010d2e:	68fa      	ldr	r2, [r7, #12]
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d10a      	bne.n	8010d4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d107      	bne.n	8010d4c <get_ldnumber+0x72>
					vol = (int)i;
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	3301      	adds	r3, #1
 8010d44:	617b      	str	r3, [r7, #20]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	697a      	ldr	r2, [r7, #20]
 8010d4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	e002      	b.n	8010d56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010d50:	2300      	movs	r3, #0
 8010d52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010d54:	693b      	ldr	r3, [r7, #16]
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	371c      	adds	r7, #28
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d60:	4770      	bx	lr
	...

08010d64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2200      	movs	r2, #0
 8010d72:	70da      	strb	r2, [r3, #3]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f04f 32ff 	mov.w	r2, #4294967295
 8010d7a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010d7c:	6839      	ldr	r1, [r7, #0]
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f7ff f8e0 	bl	800ff44 <move_window>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d001      	beq.n	8010d8e <check_fs+0x2a>
 8010d8a:	2304      	movs	r3, #4
 8010d8c:	e038      	b.n	8010e00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	3330      	adds	r3, #48	; 0x30
 8010d92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7fe fe24 	bl	800f9e4 <ld_word>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	461a      	mov	r2, r3
 8010da0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d001      	beq.n	8010dac <check_fs+0x48>
 8010da8:	2303      	movs	r3, #3
 8010daa:	e029      	b.n	8010e00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010db2:	2be9      	cmp	r3, #233	; 0xe9
 8010db4:	d009      	beq.n	8010dca <check_fs+0x66>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dbc:	2beb      	cmp	r3, #235	; 0xeb
 8010dbe:	d11e      	bne.n	8010dfe <check_fs+0x9a>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010dc6:	2b90      	cmp	r3, #144	; 0x90
 8010dc8:	d119      	bne.n	8010dfe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	3330      	adds	r3, #48	; 0x30
 8010dce:	3336      	adds	r3, #54	; 0x36
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7fe fe1f 	bl	800fa14 <ld_dword>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010ddc:	4a0a      	ldr	r2, [pc, #40]	; (8010e08 <check_fs+0xa4>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d101      	bne.n	8010de6 <check_fs+0x82>
 8010de2:	2300      	movs	r3, #0
 8010de4:	e00c      	b.n	8010e00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	3330      	adds	r3, #48	; 0x30
 8010dea:	3352      	adds	r3, #82	; 0x52
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fe fe11 	bl	800fa14 <ld_dword>
 8010df2:	4602      	mov	r2, r0
 8010df4:	4b05      	ldr	r3, [pc, #20]	; (8010e0c <check_fs+0xa8>)
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d101      	bne.n	8010dfe <check_fs+0x9a>
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	e000      	b.n	8010e00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010dfe:	2302      	movs	r3, #2
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	00544146 	.word	0x00544146
 8010e0c:	33544146 	.word	0x33544146

08010e10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b096      	sub	sp, #88	; 0x58
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	60f8      	str	r0, [r7, #12]
 8010e18:	60b9      	str	r1, [r7, #8]
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	2200      	movs	r2, #0
 8010e22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	f7ff ff58 	bl	8010cda <get_ldnumber>
 8010e2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	da01      	bge.n	8010e36 <find_volume+0x26>
 8010e32:	230b      	movs	r3, #11
 8010e34:	e22e      	b.n	8011294 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010e36:	4aa8      	ldr	r2, [pc, #672]	; (80110d8 <find_volume+0x2c8>)
 8010e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d101      	bne.n	8010e4a <find_volume+0x3a>
 8010e46:	230c      	movs	r3, #12
 8010e48:	e224      	b.n	8011294 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010e50:	79fb      	ldrb	r3, [r7, #7]
 8010e52:	f023 0301 	bic.w	r3, r3, #1
 8010e56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d01a      	beq.n	8010e96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e62:	785b      	ldrb	r3, [r3, #1]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7fe fd1f 	bl	800f8a8 <disk_status>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010e70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e74:	f003 0301 	and.w	r3, r3, #1
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d10c      	bne.n	8010e96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010e7c:	79fb      	ldrb	r3, [r7, #7]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d007      	beq.n	8010e92 <find_volume+0x82>
 8010e82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e86:	f003 0304 	and.w	r3, r3, #4
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d001      	beq.n	8010e92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010e8e:	230a      	movs	r3, #10
 8010e90:	e200      	b.n	8011294 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8010e92:	2300      	movs	r3, #0
 8010e94:	e1fe      	b.n	8011294 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e98:	2200      	movs	r2, #0
 8010e9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e9e:	b2da      	uxtb	r2, r3
 8010ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea6:	785b      	ldrb	r3, [r3, #1]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fe fd17 	bl	800f8dc <disk_initialize>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010eb8:	f003 0301 	and.w	r3, r3, #1
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d001      	beq.n	8010ec4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010ec0:	2303      	movs	r3, #3
 8010ec2:	e1e7      	b.n	8011294 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010ec4:	79fb      	ldrb	r3, [r7, #7]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d007      	beq.n	8010eda <find_volume+0xca>
 8010eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ece:	f003 0304 	and.w	r3, r3, #4
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010ed6:	230a      	movs	r3, #10
 8010ed8:	e1dc      	b.n	8011294 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010eda:	2300      	movs	r3, #0
 8010edc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010ede:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ee0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ee2:	f7ff ff3f 	bl	8010d64 <check_fs>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ef0:	2b02      	cmp	r3, #2
 8010ef2:	d14b      	bne.n	8010f8c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8010ef8:	e01f      	b.n	8010f3a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010efc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f02:	011b      	lsls	r3, r3, #4
 8010f04:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010f08:	4413      	add	r3, r2
 8010f0a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0e:	3304      	adds	r3, #4
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d006      	beq.n	8010f24 <find_volume+0x114>
 8010f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f18:	3308      	adds	r3, #8
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fe fd7a 	bl	800fa14 <ld_dword>
 8010f20:	4602      	mov	r2, r0
 8010f22:	e000      	b.n	8010f26 <find_volume+0x116>
 8010f24:	2200      	movs	r2, #0
 8010f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f28:	009b      	lsls	r3, r3, #2
 8010f2a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010f2e:	440b      	add	r3, r1
 8010f30:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f36:	3301      	adds	r3, #1
 8010f38:	643b      	str	r3, [r7, #64]	; 0x40
 8010f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f3c:	2b03      	cmp	r3, #3
 8010f3e:	d9dc      	bls.n	8010efa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010f40:	2300      	movs	r3, #0
 8010f42:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d002      	beq.n	8010f50 <find_volume+0x140>
 8010f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f4c:	3b01      	subs	r3, #1
 8010f4e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010f58:	4413      	add	r3, r2
 8010f5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010f5e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d005      	beq.n	8010f72 <find_volume+0x162>
 8010f66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f6a:	f7ff fefb 	bl	8010d64 <check_fs>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	e000      	b.n	8010f74 <find_volume+0x164>
 8010f72:	2303      	movs	r3, #3
 8010f74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d905      	bls.n	8010f8c <find_volume+0x17c>
 8010f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f82:	3301      	adds	r3, #1
 8010f84:	643b      	str	r3, [r7, #64]	; 0x40
 8010f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f88:	2b03      	cmp	r3, #3
 8010f8a:	d9e1      	bls.n	8010f50 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f90:	2b04      	cmp	r3, #4
 8010f92:	d101      	bne.n	8010f98 <find_volume+0x188>
 8010f94:	2301      	movs	r3, #1
 8010f96:	e17d      	b.n	8011294 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010f98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d901      	bls.n	8010fa4 <find_volume+0x194>
 8010fa0:	230d      	movs	r3, #13
 8010fa2:	e177      	b.n	8011294 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa6:	3330      	adds	r3, #48	; 0x30
 8010fa8:	330b      	adds	r3, #11
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7fe fd1a 	bl	800f9e4 <ld_word>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fb6:	d001      	beq.n	8010fbc <find_volume+0x1ac>
 8010fb8:	230d      	movs	r3, #13
 8010fba:	e16b      	b.n	8011294 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fbe:	3330      	adds	r3, #48	; 0x30
 8010fc0:	3316      	adds	r3, #22
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fe fd0e 	bl	800f9e4 <ld_word>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d106      	bne.n	8010fe0 <find_volume+0x1d0>
 8010fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd4:	3330      	adds	r3, #48	; 0x30
 8010fd6:	3324      	adds	r3, #36	; 0x24
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7fe fd1b 	bl	800fa14 <ld_dword>
 8010fde:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010fe4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fe8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8010fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff2:	789b      	ldrb	r3, [r3, #2]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	d005      	beq.n	8011004 <find_volume+0x1f4>
 8010ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ffa:	789b      	ldrb	r3, [r3, #2]
 8010ffc:	2b02      	cmp	r3, #2
 8010ffe:	d001      	beq.n	8011004 <find_volume+0x1f4>
 8011000:	230d      	movs	r3, #13
 8011002:	e147      	b.n	8011294 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011006:	789b      	ldrb	r3, [r3, #2]
 8011008:	461a      	mov	r2, r3
 801100a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801100c:	fb02 f303 	mul.w	r3, r2, r3
 8011010:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011018:	b29a      	uxth	r2, r3
 801101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011020:	895b      	ldrh	r3, [r3, #10]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d008      	beq.n	8011038 <find_volume+0x228>
 8011026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011028:	895b      	ldrh	r3, [r3, #10]
 801102a:	461a      	mov	r2, r3
 801102c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102e:	895b      	ldrh	r3, [r3, #10]
 8011030:	3b01      	subs	r3, #1
 8011032:	4013      	ands	r3, r2
 8011034:	2b00      	cmp	r3, #0
 8011036:	d001      	beq.n	801103c <find_volume+0x22c>
 8011038:	230d      	movs	r3, #13
 801103a:	e12b      	b.n	8011294 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801103c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801103e:	3330      	adds	r3, #48	; 0x30
 8011040:	3311      	adds	r3, #17
 8011042:	4618      	mov	r0, r3
 8011044:	f7fe fcce 	bl	800f9e4 <ld_word>
 8011048:	4603      	mov	r3, r0
 801104a:	461a      	mov	r2, r3
 801104c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011052:	891b      	ldrh	r3, [r3, #8]
 8011054:	f003 030f 	and.w	r3, r3, #15
 8011058:	b29b      	uxth	r3, r3
 801105a:	2b00      	cmp	r3, #0
 801105c:	d001      	beq.n	8011062 <find_volume+0x252>
 801105e:	230d      	movs	r3, #13
 8011060:	e118      	b.n	8011294 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011064:	3330      	adds	r3, #48	; 0x30
 8011066:	3313      	adds	r3, #19
 8011068:	4618      	mov	r0, r3
 801106a:	f7fe fcbb 	bl	800f9e4 <ld_word>
 801106e:	4603      	mov	r3, r0
 8011070:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011074:	2b00      	cmp	r3, #0
 8011076:	d106      	bne.n	8011086 <find_volume+0x276>
 8011078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801107a:	3330      	adds	r3, #48	; 0x30
 801107c:	3320      	adds	r3, #32
 801107e:	4618      	mov	r0, r3
 8011080:	f7fe fcc8 	bl	800fa14 <ld_dword>
 8011084:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011088:	3330      	adds	r3, #48	; 0x30
 801108a:	330e      	adds	r3, #14
 801108c:	4618      	mov	r0, r3
 801108e:	f7fe fca9 	bl	800f9e4 <ld_word>
 8011092:	4603      	mov	r3, r0
 8011094:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011096:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011098:	2b00      	cmp	r3, #0
 801109a:	d101      	bne.n	80110a0 <find_volume+0x290>
 801109c:	230d      	movs	r3, #13
 801109e:	e0f9      	b.n	8011294 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80110a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80110a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110a4:	4413      	add	r3, r2
 80110a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110a8:	8912      	ldrh	r2, [r2, #8]
 80110aa:	0912      	lsrs	r2, r2, #4
 80110ac:	b292      	uxth	r2, r2
 80110ae:	4413      	add	r3, r2
 80110b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80110b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d201      	bcs.n	80110be <find_volume+0x2ae>
 80110ba:	230d      	movs	r3, #13
 80110bc:	e0ea      	b.n	8011294 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80110be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110c6:	8952      	ldrh	r2, [r2, #10]
 80110c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80110cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80110ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d103      	bne.n	80110dc <find_volume+0x2cc>
 80110d4:	230d      	movs	r3, #13
 80110d6:	e0dd      	b.n	8011294 <find_volume+0x484>
 80110d8:	240001f4 	.word	0x240001f4
		fmt = FS_FAT32;
 80110dc:	2303      	movs	r3, #3
 80110de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80110e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d802      	bhi.n	80110f2 <find_volume+0x2e2>
 80110ec:	2302      	movs	r3, #2
 80110ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80110f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d802      	bhi.n	8011102 <find_volume+0x2f2>
 80110fc:	2301      	movs	r3, #1
 80110fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011104:	1c9a      	adds	r2, r3, #2
 8011106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011108:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801110a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801110e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011110:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011114:	441a      	add	r2, r3
 8011116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011118:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801111a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801111e:	441a      	add	r2, r3
 8011120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011122:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011128:	2b03      	cmp	r3, #3
 801112a:	d11e      	bne.n	801116a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801112c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112e:	3330      	adds	r3, #48	; 0x30
 8011130:	332a      	adds	r3, #42	; 0x2a
 8011132:	4618      	mov	r0, r3
 8011134:	f7fe fc56 	bl	800f9e4 <ld_word>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	d001      	beq.n	8011142 <find_volume+0x332>
 801113e:	230d      	movs	r3, #13
 8011140:	e0a8      	b.n	8011294 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011144:	891b      	ldrh	r3, [r3, #8]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d001      	beq.n	801114e <find_volume+0x33e>
 801114a:	230d      	movs	r3, #13
 801114c:	e0a2      	b.n	8011294 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801114e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011150:	3330      	adds	r3, #48	; 0x30
 8011152:	332c      	adds	r3, #44	; 0x2c
 8011154:	4618      	mov	r0, r3
 8011156:	f7fe fc5d 	bl	800fa14 <ld_dword>
 801115a:	4602      	mov	r2, r0
 801115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011162:	695b      	ldr	r3, [r3, #20]
 8011164:	009b      	lsls	r3, r3, #2
 8011166:	647b      	str	r3, [r7, #68]	; 0x44
 8011168:	e01f      	b.n	80111aa <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801116a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116c:	891b      	ldrh	r3, [r3, #8]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <find_volume+0x366>
 8011172:	230d      	movs	r3, #13
 8011174:	e08e      	b.n	8011294 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011178:	6a1a      	ldr	r2, [r3, #32]
 801117a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801117c:	441a      	add	r2, r3
 801117e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011180:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011182:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011186:	2b02      	cmp	r3, #2
 8011188:	d103      	bne.n	8011192 <find_volume+0x382>
 801118a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801118c:	695b      	ldr	r3, [r3, #20]
 801118e:	005b      	lsls	r3, r3, #1
 8011190:	e00a      	b.n	80111a8 <find_volume+0x398>
 8011192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011194:	695a      	ldr	r2, [r3, #20]
 8011196:	4613      	mov	r3, r2
 8011198:	005b      	lsls	r3, r3, #1
 801119a:	4413      	add	r3, r2
 801119c:	085a      	lsrs	r2, r3, #1
 801119e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a0:	695b      	ldr	r3, [r3, #20]
 80111a2:	f003 0301 	and.w	r3, r3, #1
 80111a6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80111a8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80111aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ac:	699a      	ldr	r2, [r3, #24]
 80111ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80111b4:	0a5b      	lsrs	r3, r3, #9
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d201      	bcs.n	80111be <find_volume+0x3ae>
 80111ba:	230d      	movs	r3, #13
 80111bc:	e06a      	b.n	8011294 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80111be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c0:	f04f 32ff 	mov.w	r2, #4294967295
 80111c4:	611a      	str	r2, [r3, #16]
 80111c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c8:	691a      	ldr	r2, [r3, #16]
 80111ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111cc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80111ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d0:	2280      	movs	r2, #128	; 0x80
 80111d2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80111d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111d8:	2b03      	cmp	r3, #3
 80111da:	d149      	bne.n	8011270 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80111dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111de:	3330      	adds	r3, #48	; 0x30
 80111e0:	3330      	adds	r3, #48	; 0x30
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fe fbfe 	bl	800f9e4 <ld_word>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b01      	cmp	r3, #1
 80111ec:	d140      	bne.n	8011270 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80111ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111f0:	3301      	adds	r3, #1
 80111f2:	4619      	mov	r1, r3
 80111f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80111f6:	f7fe fea5 	bl	800ff44 <move_window>
 80111fa:	4603      	mov	r3, r0
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d137      	bne.n	8011270 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8011200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011202:	2200      	movs	r2, #0
 8011204:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011208:	3330      	adds	r3, #48	; 0x30
 801120a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801120e:	4618      	mov	r0, r3
 8011210:	f7fe fbe8 	bl	800f9e4 <ld_word>
 8011214:	4603      	mov	r3, r0
 8011216:	461a      	mov	r2, r3
 8011218:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801121c:	429a      	cmp	r2, r3
 801121e:	d127      	bne.n	8011270 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011222:	3330      	adds	r3, #48	; 0x30
 8011224:	4618      	mov	r0, r3
 8011226:	f7fe fbf5 	bl	800fa14 <ld_dword>
 801122a:	4602      	mov	r2, r0
 801122c:	4b1b      	ldr	r3, [pc, #108]	; (801129c <find_volume+0x48c>)
 801122e:	429a      	cmp	r2, r3
 8011230:	d11e      	bne.n	8011270 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011234:	3330      	adds	r3, #48	; 0x30
 8011236:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801123a:	4618      	mov	r0, r3
 801123c:	f7fe fbea 	bl	800fa14 <ld_dword>
 8011240:	4602      	mov	r2, r0
 8011242:	4b17      	ldr	r3, [pc, #92]	; (80112a0 <find_volume+0x490>)
 8011244:	429a      	cmp	r2, r3
 8011246:	d113      	bne.n	8011270 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124a:	3330      	adds	r3, #48	; 0x30
 801124c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011250:	4618      	mov	r0, r3
 8011252:	f7fe fbdf 	bl	800fa14 <ld_dword>
 8011256:	4602      	mov	r2, r0
 8011258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801125c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125e:	3330      	adds	r3, #48	; 0x30
 8011260:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011264:	4618      	mov	r0, r3
 8011266:	f7fe fbd5 	bl	800fa14 <ld_dword>
 801126a:	4602      	mov	r2, r0
 801126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011272:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011276:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011278:	4b0a      	ldr	r3, [pc, #40]	; (80112a4 <find_volume+0x494>)
 801127a:	881b      	ldrh	r3, [r3, #0]
 801127c:	3301      	adds	r3, #1
 801127e:	b29a      	uxth	r2, r3
 8011280:	4b08      	ldr	r3, [pc, #32]	; (80112a4 <find_volume+0x494>)
 8011282:	801a      	strh	r2, [r3, #0]
 8011284:	4b07      	ldr	r3, [pc, #28]	; (80112a4 <find_volume+0x494>)
 8011286:	881a      	ldrh	r2, [r3, #0]
 8011288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801128c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801128e:	f7fe fdf1 	bl	800fe74 <clear_lock>
#endif
	return FR_OK;
 8011292:	2300      	movs	r3, #0
}
 8011294:	4618      	mov	r0, r3
 8011296:	3758      	adds	r7, #88	; 0x58
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	41615252 	.word	0x41615252
 80112a0:	61417272 	.word	0x61417272
 80112a4:	240001f8 	.word	0x240001f8

080112a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80112b2:	2309      	movs	r3, #9
 80112b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d01c      	beq.n	80112f6 <validate+0x4e>
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d018      	beq.n	80112f6 <validate+0x4e>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	781b      	ldrb	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d013      	beq.n	80112f6 <validate+0x4e>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	889a      	ldrh	r2, [r3, #4]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	88db      	ldrh	r3, [r3, #6]
 80112d8:	429a      	cmp	r2, r3
 80112da:	d10c      	bne.n	80112f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	785b      	ldrb	r3, [r3, #1]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7fe fae0 	bl	800f8a8 <disk_status>
 80112e8:	4603      	mov	r3, r0
 80112ea:	f003 0301 	and.w	r3, r3, #1
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d101      	bne.n	80112f6 <validate+0x4e>
			res = FR_OK;
 80112f2:	2300      	movs	r3, #0
 80112f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80112f6:	7bfb      	ldrb	r3, [r7, #15]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d102      	bne.n	8011302 <validate+0x5a>
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	e000      	b.n	8011304 <validate+0x5c>
 8011302:	2300      	movs	r3, #0
 8011304:	683a      	ldr	r2, [r7, #0]
 8011306:	6013      	str	r3, [r2, #0]
	return res;
 8011308:	7bfb      	ldrb	r3, [r7, #15]
}
 801130a:	4618      	mov	r0, r3
 801130c:	3710      	adds	r7, #16
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
	...

08011314 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b088      	sub	sp, #32
 8011318:	af00      	add	r7, sp, #0
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	4613      	mov	r3, r2
 8011320:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011326:	f107 0310 	add.w	r3, r7, #16
 801132a:	4618      	mov	r0, r3
 801132c:	f7ff fcd5 	bl	8010cda <get_ldnumber>
 8011330:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	2b00      	cmp	r3, #0
 8011336:	da01      	bge.n	801133c <f_mount+0x28>
 8011338:	230b      	movs	r3, #11
 801133a:	e02b      	b.n	8011394 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801133c:	4a17      	ldr	r2, [pc, #92]	; (801139c <f_mount+0x88>)
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011344:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011346:	69bb      	ldr	r3, [r7, #24]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d005      	beq.n	8011358 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801134c:	69b8      	ldr	r0, [r7, #24]
 801134e:	f7fe fd91 	bl	800fe74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011352:	69bb      	ldr	r3, [r7, #24]
 8011354:	2200      	movs	r2, #0
 8011356:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d002      	beq.n	8011364 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	2200      	movs	r2, #0
 8011362:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011364:	68fa      	ldr	r2, [r7, #12]
 8011366:	490d      	ldr	r1, [pc, #52]	; (801139c <f_mount+0x88>)
 8011368:	69fb      	ldr	r3, [r7, #28]
 801136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d002      	beq.n	801137a <f_mount+0x66>
 8011374:	79fb      	ldrb	r3, [r7, #7]
 8011376:	2b01      	cmp	r3, #1
 8011378:	d001      	beq.n	801137e <f_mount+0x6a>
 801137a:	2300      	movs	r3, #0
 801137c:	e00a      	b.n	8011394 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801137e:	f107 010c 	add.w	r1, r7, #12
 8011382:	f107 0308 	add.w	r3, r7, #8
 8011386:	2200      	movs	r2, #0
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff fd41 	bl	8010e10 <find_volume>
 801138e:	4603      	mov	r3, r0
 8011390:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011392:	7dfb      	ldrb	r3, [r7, #23]
}
 8011394:	4618      	mov	r0, r3
 8011396:	3720      	adds	r7, #32
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	240001f4 	.word	0x240001f4

080113a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b098      	sub	sp, #96	; 0x60
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	60b9      	str	r1, [r7, #8]
 80113aa:	4613      	mov	r3, r2
 80113ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d101      	bne.n	80113b8 <f_open+0x18>
 80113b4:	2309      	movs	r3, #9
 80113b6:	e1ad      	b.n	8011714 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80113b8:	79fb      	ldrb	r3, [r7, #7]
 80113ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80113c0:	79fa      	ldrb	r2, [r7, #7]
 80113c2:	f107 0110 	add.w	r1, r7, #16
 80113c6:	f107 0308 	add.w	r3, r7, #8
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff fd20 	bl	8010e10 <find_volume>
 80113d0:	4603      	mov	r3, r0
 80113d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80113d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113da:	2b00      	cmp	r3, #0
 80113dc:	f040 8191 	bne.w	8011702 <f_open+0x362>
		dj.obj.fs = fs;
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80113e4:	68ba      	ldr	r2, [r7, #8]
 80113e6:	f107 0314 	add.w	r3, r7, #20
 80113ea:	4611      	mov	r1, r2
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7ff fc03 	bl	8010bf8 <follow_path>
 80113f2:	4603      	mov	r3, r0
 80113f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80113f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d11a      	bne.n	8011436 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011400:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011404:	b25b      	sxtb	r3, r3
 8011406:	2b00      	cmp	r3, #0
 8011408:	da03      	bge.n	8011412 <f_open+0x72>
				res = FR_INVALID_NAME;
 801140a:	2306      	movs	r3, #6
 801140c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011410:	e011      	b.n	8011436 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011412:	79fb      	ldrb	r3, [r7, #7]
 8011414:	f023 0301 	bic.w	r3, r3, #1
 8011418:	2b00      	cmp	r3, #0
 801141a:	bf14      	ite	ne
 801141c:	2301      	movne	r3, #1
 801141e:	2300      	moveq	r3, #0
 8011420:	b2db      	uxtb	r3, r3
 8011422:	461a      	mov	r2, r3
 8011424:	f107 0314 	add.w	r3, r7, #20
 8011428:	4611      	mov	r1, r2
 801142a:	4618      	mov	r0, r3
 801142c:	f7fe fbda 	bl	800fbe4 <chk_lock>
 8011430:	4603      	mov	r3, r0
 8011432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011436:	79fb      	ldrb	r3, [r7, #7]
 8011438:	f003 031c 	and.w	r3, r3, #28
 801143c:	2b00      	cmp	r3, #0
 801143e:	d07f      	beq.n	8011540 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011444:	2b00      	cmp	r3, #0
 8011446:	d017      	beq.n	8011478 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801144c:	2b04      	cmp	r3, #4
 801144e:	d10e      	bne.n	801146e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011450:	f7fe fc24 	bl	800fc9c <enq_lock>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d006      	beq.n	8011468 <f_open+0xc8>
 801145a:	f107 0314 	add.w	r3, r7, #20
 801145e:	4618      	mov	r0, r3
 8011460:	f7ff fb03 	bl	8010a6a <dir_register>
 8011464:	4603      	mov	r3, r0
 8011466:	e000      	b.n	801146a <f_open+0xca>
 8011468:	2312      	movs	r3, #18
 801146a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801146e:	79fb      	ldrb	r3, [r7, #7]
 8011470:	f043 0308 	orr.w	r3, r3, #8
 8011474:	71fb      	strb	r3, [r7, #7]
 8011476:	e010      	b.n	801149a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011478:	7ebb      	ldrb	r3, [r7, #26]
 801147a:	f003 0311 	and.w	r3, r3, #17
 801147e:	2b00      	cmp	r3, #0
 8011480:	d003      	beq.n	801148a <f_open+0xea>
					res = FR_DENIED;
 8011482:	2307      	movs	r3, #7
 8011484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011488:	e007      	b.n	801149a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801148a:	79fb      	ldrb	r3, [r7, #7]
 801148c:	f003 0304 	and.w	r3, r3, #4
 8011490:	2b00      	cmp	r3, #0
 8011492:	d002      	beq.n	801149a <f_open+0xfa>
 8011494:	2308      	movs	r3, #8
 8011496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801149a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d168      	bne.n	8011574 <f_open+0x1d4>
 80114a2:	79fb      	ldrb	r3, [r7, #7]
 80114a4:	f003 0308 	and.w	r3, r3, #8
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d063      	beq.n	8011574 <f_open+0x1d4>
				dw = GET_FATTIME();
 80114ac:	f7fb fb14 	bl	800cad8 <get_fattime>
 80114b0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80114b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114b4:	330e      	adds	r3, #14
 80114b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fe fae9 	bl	800fa90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80114be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114c0:	3316      	adds	r3, #22
 80114c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7fe fae3 	bl	800fa90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80114ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114cc:	330b      	adds	r3, #11
 80114ce:	2220      	movs	r2, #32
 80114d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114d6:	4611      	mov	r1, r2
 80114d8:	4618      	mov	r0, r3
 80114da:	f7ff fa32 	bl	8010942 <ld_clust>
 80114de:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80114e4:	2200      	movs	r2, #0
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7ff fa4a 	bl	8010980 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80114ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ee:	331c      	adds	r3, #28
 80114f0:	2100      	movs	r1, #0
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fe facc 	bl	800fa90 <st_dword>
					fs->wflag = 1;
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	2201      	movs	r2, #1
 80114fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80114fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011500:	2b00      	cmp	r3, #0
 8011502:	d037      	beq.n	8011574 <f_open+0x1d4>
						dw = fs->winsect;
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011508:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801150a:	f107 0314 	add.w	r3, r7, #20
 801150e:	2200      	movs	r2, #0
 8011510:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011512:	4618      	mov	r0, r3
 8011514:	f7fe ff5d 	bl	80103d2 <remove_chain>
 8011518:	4603      	mov	r3, r0
 801151a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801151e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011522:	2b00      	cmp	r3, #0
 8011524:	d126      	bne.n	8011574 <f_open+0x1d4>
							res = move_window(fs, dw);
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801152a:	4618      	mov	r0, r3
 801152c:	f7fe fd0a 	bl	800ff44 <move_window>
 8011530:	4603      	mov	r3, r0
 8011532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801153a:	3a01      	subs	r2, #1
 801153c:	60da      	str	r2, [r3, #12]
 801153e:	e019      	b.n	8011574 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011544:	2b00      	cmp	r3, #0
 8011546:	d115      	bne.n	8011574 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011548:	7ebb      	ldrb	r3, [r7, #26]
 801154a:	f003 0310 	and.w	r3, r3, #16
 801154e:	2b00      	cmp	r3, #0
 8011550:	d003      	beq.n	801155a <f_open+0x1ba>
					res = FR_NO_FILE;
 8011552:	2304      	movs	r3, #4
 8011554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011558:	e00c      	b.n	8011574 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801155a:	79fb      	ldrb	r3, [r7, #7]
 801155c:	f003 0302 	and.w	r3, r3, #2
 8011560:	2b00      	cmp	r3, #0
 8011562:	d007      	beq.n	8011574 <f_open+0x1d4>
 8011564:	7ebb      	ldrb	r3, [r7, #26]
 8011566:	f003 0301 	and.w	r3, r3, #1
 801156a:	2b00      	cmp	r3, #0
 801156c:	d002      	beq.n	8011574 <f_open+0x1d4>
						res = FR_DENIED;
 801156e:	2307      	movs	r3, #7
 8011570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011578:	2b00      	cmp	r3, #0
 801157a:	d128      	bne.n	80115ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801157c:	79fb      	ldrb	r3, [r7, #7]
 801157e:	f003 0308 	and.w	r3, r3, #8
 8011582:	2b00      	cmp	r3, #0
 8011584:	d003      	beq.n	801158e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8011586:	79fb      	ldrb	r3, [r7, #7]
 8011588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801158c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801159c:	79fb      	ldrb	r3, [r7, #7]
 801159e:	f023 0301 	bic.w	r3, r3, #1
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	bf14      	ite	ne
 80115a6:	2301      	movne	r3, #1
 80115a8:	2300      	moveq	r3, #0
 80115aa:	b2db      	uxtb	r3, r3
 80115ac:	461a      	mov	r2, r3
 80115ae:	f107 0314 	add.w	r3, r7, #20
 80115b2:	4611      	mov	r1, r2
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7fe fb93 	bl	800fce0 <inc_lock>
 80115ba:	4602      	mov	r2, r0
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	691b      	ldr	r3, [r3, #16]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d102      	bne.n	80115ce <f_open+0x22e>
 80115c8:	2302      	movs	r3, #2
 80115ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80115ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	f040 8095 	bne.w	8011702 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80115d8:	693b      	ldr	r3, [r7, #16]
 80115da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115dc:	4611      	mov	r1, r2
 80115de:	4618      	mov	r0, r3
 80115e0:	f7ff f9af 	bl	8010942 <ld_clust>
 80115e4:	4602      	mov	r2, r0
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80115ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ec:	331c      	adds	r3, #28
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fe fa10 	bl	800fa14 <ld_dword>
 80115f4:	4602      	mov	r2, r0
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	2200      	movs	r2, #0
 80115fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011600:	693a      	ldr	r2, [r7, #16]
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	88da      	ldrh	r2, [r3, #6]
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	79fa      	ldrb	r2, [r7, #7]
 8011612:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	2200      	movs	r2, #0
 8011618:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	2200      	movs	r2, #0
 801161e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	2200      	movs	r2, #0
 8011624:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	3330      	adds	r3, #48	; 0x30
 801162a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801162e:	2100      	movs	r1, #0
 8011630:	4618      	mov	r0, r3
 8011632:	f7fe fa7a 	bl	800fb2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011636:	79fb      	ldrb	r3, [r7, #7]
 8011638:	f003 0320 	and.w	r3, r3, #32
 801163c:	2b00      	cmp	r3, #0
 801163e:	d060      	beq.n	8011702 <f_open+0x362>
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d05c      	beq.n	8011702 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	68da      	ldr	r2, [r3, #12]
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	895b      	ldrh	r3, [r3, #10]
 8011654:	025b      	lsls	r3, r3, #9
 8011656:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	689b      	ldr	r3, [r3, #8]
 801165c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	657b      	str	r3, [r7, #84]	; 0x54
 8011664:	e016      	b.n	8011694 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801166a:	4618      	mov	r0, r3
 801166c:	f7fe fd25 	bl	80100ba <get_fat>
 8011670:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011674:	2b01      	cmp	r3, #1
 8011676:	d802      	bhi.n	801167e <f_open+0x2de>
 8011678:	2302      	movs	r3, #2
 801167a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801167e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011684:	d102      	bne.n	801168c <f_open+0x2ec>
 8011686:	2301      	movs	r3, #1
 8011688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801168c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801168e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011690:	1ad3      	subs	r3, r2, r3
 8011692:	657b      	str	r3, [r7, #84]	; 0x54
 8011694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011698:	2b00      	cmp	r3, #0
 801169a:	d103      	bne.n	80116a4 <f_open+0x304>
 801169c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801169e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d8e0      	bhi.n	8011666 <f_open+0x2c6>
				}
				fp->clust = clst;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80116a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80116aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d127      	bne.n	8011702 <f_open+0x362>
 80116b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d022      	beq.n	8011702 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7fe fcdb 	bl	801007c <clust2sect>
 80116c6:	6478      	str	r0, [r7, #68]	; 0x44
 80116c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d103      	bne.n	80116d6 <f_open+0x336>
						res = FR_INT_ERR;
 80116ce:	2302      	movs	r3, #2
 80116d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80116d4:	e015      	b.n	8011702 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80116d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116d8:	0a5a      	lsrs	r2, r3, #9
 80116da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116dc:	441a      	add	r2, r3
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80116e2:	693b      	ldr	r3, [r7, #16]
 80116e4:	7858      	ldrb	r0, [r3, #1]
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6a1a      	ldr	r2, [r3, #32]
 80116f0:	2301      	movs	r3, #1
 80116f2:	f7fe f919 	bl	800f928 <disk_read>
 80116f6:	4603      	mov	r3, r0
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d002      	beq.n	8011702 <f_open+0x362>
 80116fc:	2301      	movs	r3, #1
 80116fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011706:	2b00      	cmp	r3, #0
 8011708:	d002      	beq.n	8011710 <f_open+0x370>
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2200      	movs	r2, #0
 801170e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011714:	4618      	mov	r0, r3
 8011716:	3760      	adds	r7, #96	; 0x60
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}

0801171c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b08c      	sub	sp, #48	; 0x30
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	607a      	str	r2, [r7, #4]
 8011728:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	2200      	movs	r2, #0
 8011732:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	f107 0210 	add.w	r2, r7, #16
 801173a:	4611      	mov	r1, r2
 801173c:	4618      	mov	r0, r3
 801173e:	f7ff fdb3 	bl	80112a8 <validate>
 8011742:	4603      	mov	r3, r0
 8011744:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801174c:	2b00      	cmp	r3, #0
 801174e:	d107      	bne.n	8011760 <f_write+0x44>
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	7d5b      	ldrb	r3, [r3, #21]
 8011754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801175c:	2b00      	cmp	r3, #0
 801175e:	d002      	beq.n	8011766 <f_write+0x4a>
 8011760:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011764:	e14b      	b.n	80119fe <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	7d1b      	ldrb	r3, [r3, #20]
 801176a:	f003 0302 	and.w	r3, r3, #2
 801176e:	2b00      	cmp	r3, #0
 8011770:	d101      	bne.n	8011776 <f_write+0x5a>
 8011772:	2307      	movs	r3, #7
 8011774:	e143      	b.n	80119fe <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	699a      	ldr	r2, [r3, #24]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	441a      	add	r2, r3
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	699b      	ldr	r3, [r3, #24]
 8011782:	429a      	cmp	r2, r3
 8011784:	f080 812d 	bcs.w	80119e2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	699b      	ldr	r3, [r3, #24]
 801178c:	43db      	mvns	r3, r3
 801178e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011790:	e127      	b.n	80119e2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	699b      	ldr	r3, [r3, #24]
 8011796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801179a:	2b00      	cmp	r3, #0
 801179c:	f040 80e3 	bne.w	8011966 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	699b      	ldr	r3, [r3, #24]
 80117a4:	0a5b      	lsrs	r3, r3, #9
 80117a6:	693a      	ldr	r2, [r7, #16]
 80117a8:	8952      	ldrh	r2, [r2, #10]
 80117aa:	3a01      	subs	r2, #1
 80117ac:	4013      	ands	r3, r2
 80117ae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80117b0:	69bb      	ldr	r3, [r7, #24]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d143      	bne.n	801183e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	699b      	ldr	r3, [r3, #24]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d10c      	bne.n	80117d8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	689b      	ldr	r3, [r3, #8]
 80117c2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80117c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d11a      	bne.n	8011800 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	2100      	movs	r1, #0
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7fe fe64 	bl	801049c <create_chain>
 80117d4:	62b8      	str	r0, [r7, #40]	; 0x28
 80117d6:	e013      	b.n	8011800 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d007      	beq.n	80117f0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	699b      	ldr	r3, [r3, #24]
 80117e4:	4619      	mov	r1, r3
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	f7fe fef0 	bl	80105cc <clmt_clust>
 80117ec:	62b8      	str	r0, [r7, #40]	; 0x28
 80117ee:	e007      	b.n	8011800 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80117f0:	68fa      	ldr	r2, [r7, #12]
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	69db      	ldr	r3, [r3, #28]
 80117f6:	4619      	mov	r1, r3
 80117f8:	4610      	mov	r0, r2
 80117fa:	f7fe fe4f 	bl	801049c <create_chain>
 80117fe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011802:	2b00      	cmp	r3, #0
 8011804:	f000 80f2 	beq.w	80119ec <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801180a:	2b01      	cmp	r3, #1
 801180c:	d104      	bne.n	8011818 <f_write+0xfc>
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2202      	movs	r2, #2
 8011812:	755a      	strb	r2, [r3, #21]
 8011814:	2302      	movs	r3, #2
 8011816:	e0f2      	b.n	80119fe <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801181a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801181e:	d104      	bne.n	801182a <f_write+0x10e>
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	2201      	movs	r2, #1
 8011824:	755a      	strb	r2, [r3, #21]
 8011826:	2301      	movs	r3, #1
 8011828:	e0e9      	b.n	80119fe <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801182e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	689b      	ldr	r3, [r3, #8]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d102      	bne.n	801183e <f_write+0x122>
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801183c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	7d1b      	ldrb	r3, [r3, #20]
 8011842:	b25b      	sxtb	r3, r3
 8011844:	2b00      	cmp	r3, #0
 8011846:	da18      	bge.n	801187a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	7858      	ldrb	r0, [r3, #1]
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	6a1a      	ldr	r2, [r3, #32]
 8011856:	2301      	movs	r3, #1
 8011858:	f7fe f886 	bl	800f968 <disk_write>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d004      	beq.n	801186c <f_write+0x150>
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	2201      	movs	r2, #1
 8011866:	755a      	strb	r2, [r3, #21]
 8011868:	2301      	movs	r3, #1
 801186a:	e0c8      	b.n	80119fe <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	7d1b      	ldrb	r3, [r3, #20]
 8011870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011874:	b2da      	uxtb	r2, r3
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801187a:	693a      	ldr	r2, [r7, #16]
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	69db      	ldr	r3, [r3, #28]
 8011880:	4619      	mov	r1, r3
 8011882:	4610      	mov	r0, r2
 8011884:	f7fe fbfa 	bl	801007c <clust2sect>
 8011888:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d104      	bne.n	801189a <f_write+0x17e>
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	2202      	movs	r2, #2
 8011894:	755a      	strb	r2, [r3, #21]
 8011896:	2302      	movs	r3, #2
 8011898:	e0b1      	b.n	80119fe <f_write+0x2e2>
			sect += csect;
 801189a:	697a      	ldr	r2, [r7, #20]
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	4413      	add	r3, r2
 80118a0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	0a5b      	lsrs	r3, r3, #9
 80118a6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80118a8:	6a3b      	ldr	r3, [r7, #32]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d03c      	beq.n	8011928 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80118ae:	69ba      	ldr	r2, [r7, #24]
 80118b0:	6a3b      	ldr	r3, [r7, #32]
 80118b2:	4413      	add	r3, r2
 80118b4:	693a      	ldr	r2, [r7, #16]
 80118b6:	8952      	ldrh	r2, [r2, #10]
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d905      	bls.n	80118c8 <f_write+0x1ac>
					cc = fs->csize - csect;
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	895b      	ldrh	r3, [r3, #10]
 80118c0:	461a      	mov	r2, r3
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	7858      	ldrb	r0, [r3, #1]
 80118cc:	6a3b      	ldr	r3, [r7, #32]
 80118ce:	697a      	ldr	r2, [r7, #20]
 80118d0:	69f9      	ldr	r1, [r7, #28]
 80118d2:	f7fe f849 	bl	800f968 <disk_write>
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d004      	beq.n	80118e6 <f_write+0x1ca>
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2201      	movs	r2, #1
 80118e0:	755a      	strb	r2, [r3, #21]
 80118e2:	2301      	movs	r3, #1
 80118e4:	e08b      	b.n	80119fe <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	6a1a      	ldr	r2, [r3, #32]
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	1ad3      	subs	r3, r2, r3
 80118ee:	6a3a      	ldr	r2, [r7, #32]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d915      	bls.n	8011920 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	6a1a      	ldr	r2, [r3, #32]
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	1ad3      	subs	r3, r2, r3
 8011902:	025b      	lsls	r3, r3, #9
 8011904:	69fa      	ldr	r2, [r7, #28]
 8011906:	4413      	add	r3, r2
 8011908:	f44f 7200 	mov.w	r2, #512	; 0x200
 801190c:	4619      	mov	r1, r3
 801190e:	f7fe f8eb 	bl	800fae8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	7d1b      	ldrb	r3, [r3, #20]
 8011916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801191a:	b2da      	uxtb	r2, r3
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011920:	6a3b      	ldr	r3, [r7, #32]
 8011922:	025b      	lsls	r3, r3, #9
 8011924:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011926:	e03f      	b.n	80119a8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	6a1b      	ldr	r3, [r3, #32]
 801192c:	697a      	ldr	r2, [r7, #20]
 801192e:	429a      	cmp	r2, r3
 8011930:	d016      	beq.n	8011960 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	699a      	ldr	r2, [r3, #24]
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801193a:	429a      	cmp	r2, r3
 801193c:	d210      	bcs.n	8011960 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	7858      	ldrb	r0, [r3, #1]
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011948:	2301      	movs	r3, #1
 801194a:	697a      	ldr	r2, [r7, #20]
 801194c:	f7fd ffec 	bl	800f928 <disk_read>
 8011950:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011952:	2b00      	cmp	r3, #0
 8011954:	d004      	beq.n	8011960 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	2201      	movs	r2, #1
 801195a:	755a      	strb	r2, [r3, #21]
 801195c:	2301      	movs	r3, #1
 801195e:	e04e      	b.n	80119fe <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	697a      	ldr	r2, [r7, #20]
 8011964:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	699b      	ldr	r3, [r3, #24]
 801196a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801196e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011972:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	429a      	cmp	r2, r3
 801197a:	d901      	bls.n	8011980 <f_write+0x264>
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	699b      	ldr	r3, [r3, #24]
 801198a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801198e:	4413      	add	r3, r2
 8011990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011992:	69f9      	ldr	r1, [r7, #28]
 8011994:	4618      	mov	r0, r3
 8011996:	f7fe f8a7 	bl	800fae8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	7d1b      	ldrb	r3, [r3, #20]
 801199e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119a2:	b2da      	uxtb	r2, r3
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80119a8:	69fa      	ldr	r2, [r7, #28]
 80119aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ac:	4413      	add	r3, r2
 80119ae:	61fb      	str	r3, [r7, #28]
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	699a      	ldr	r2, [r3, #24]
 80119b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b6:	441a      	add	r2, r3
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	619a      	str	r2, [r3, #24]
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	68da      	ldr	r2, [r3, #12]
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	699b      	ldr	r3, [r3, #24]
 80119c4:	429a      	cmp	r2, r3
 80119c6:	bf38      	it	cc
 80119c8:	461a      	movcc	r2, r3
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	60da      	str	r2, [r3, #12]
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d4:	441a      	add	r2, r3
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	601a      	str	r2, [r3, #0]
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119de:	1ad3      	subs	r3, r2, r3
 80119e0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	f47f aed4 	bne.w	8011792 <f_write+0x76>
 80119ea:	e000      	b.n	80119ee <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80119ec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	7d1b      	ldrb	r3, [r3, #20]
 80119f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119f6:	b2da      	uxtb	r2, r3
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3730      	adds	r7, #48	; 0x30
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}

08011a06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011a06:	b580      	push	{r7, lr}
 8011a08:	b086      	sub	sp, #24
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f107 0208 	add.w	r2, r7, #8
 8011a14:	4611      	mov	r1, r2
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7ff fc46 	bl	80112a8 <validate>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011a20:	7dfb      	ldrb	r3, [r7, #23]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d168      	bne.n	8011af8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	7d1b      	ldrb	r3, [r3, #20]
 8011a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d062      	beq.n	8011af8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	7d1b      	ldrb	r3, [r3, #20]
 8011a36:	b25b      	sxtb	r3, r3
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	da15      	bge.n	8011a68 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	7858      	ldrb	r0, [r3, #1]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6a1a      	ldr	r2, [r3, #32]
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	f7fd ff8c 	bl	800f968 <disk_write>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d001      	beq.n	8011a5a <f_sync+0x54>
 8011a56:	2301      	movs	r3, #1
 8011a58:	e04f      	b.n	8011afa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	7d1b      	ldrb	r3, [r3, #20]
 8011a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a62:	b2da      	uxtb	r2, r3
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011a68:	f7fb f836 	bl	800cad8 <get_fattime>
 8011a6c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011a6e:	68ba      	ldr	r2, [r7, #8]
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a74:	4619      	mov	r1, r3
 8011a76:	4610      	mov	r0, r2
 8011a78:	f7fe fa64 	bl	800ff44 <move_window>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011a80:	7dfb      	ldrb	r3, [r7, #23]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d138      	bne.n	8011af8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	330b      	adds	r3, #11
 8011a90:	781a      	ldrb	r2, [r3, #0]
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	330b      	adds	r3, #11
 8011a96:	f042 0220 	orr.w	r2, r2, #32
 8011a9a:	b2d2      	uxtb	r2, r2
 8011a9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6818      	ldr	r0, [r3, #0]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	689b      	ldr	r3, [r3, #8]
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	68f9      	ldr	r1, [r7, #12]
 8011aaa:	f7fe ff69 	bl	8010980 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	f103 021c 	add.w	r2, r3, #28
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	68db      	ldr	r3, [r3, #12]
 8011ab8:	4619      	mov	r1, r3
 8011aba:	4610      	mov	r0, r2
 8011abc:	f7fd ffe8 	bl	800fa90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	3316      	adds	r3, #22
 8011ac4:	6939      	ldr	r1, [r7, #16]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7fd ffe2 	bl	800fa90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	3312      	adds	r3, #18
 8011ad0:	2100      	movs	r1, #0
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7fd ffc1 	bl	800fa5a <st_word>
					fs->wflag = 1;
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	2201      	movs	r2, #1
 8011adc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7fe fa5d 	bl	800ffa0 <sync_fs>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	7d1b      	ldrb	r3, [r3, #20]
 8011aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011af2:	b2da      	uxtb	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3718      	adds	r7, #24
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}

08011b02 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011b02:	b580      	push	{r7, lr}
 8011b04:	b084      	sub	sp, #16
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f7ff ff7b 	bl	8011a06 <f_sync>
 8011b10:	4603      	mov	r3, r0
 8011b12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011b14:	7bfb      	ldrb	r3, [r7, #15]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d118      	bne.n	8011b4c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f107 0208 	add.w	r2, r7, #8
 8011b20:	4611      	mov	r1, r2
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7ff fbc0 	bl	80112a8 <validate>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011b2c:	7bfb      	ldrb	r3, [r7, #15]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d10c      	bne.n	8011b4c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	691b      	ldr	r3, [r3, #16]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7fe f960 	bl	800fdfc <dec_lock>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011b40:	7bfb      	ldrb	r3, [r7, #15]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d102      	bne.n	8011b4c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3710      	adds	r7, #16
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}
	...

08011b58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b087      	sub	sp, #28
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	60f8      	str	r0, [r7, #12]
 8011b60:	60b9      	str	r1, [r7, #8]
 8011b62:	4613      	mov	r3, r2
 8011b64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011b66:	2301      	movs	r3, #1
 8011b68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011b6e:	4b1f      	ldr	r3, [pc, #124]	; (8011bec <FATFS_LinkDriverEx+0x94>)
 8011b70:	7a5b      	ldrb	r3, [r3, #9]
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d131      	bne.n	8011bdc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011b78:	4b1c      	ldr	r3, [pc, #112]	; (8011bec <FATFS_LinkDriverEx+0x94>)
 8011b7a:	7a5b      	ldrb	r3, [r3, #9]
 8011b7c:	b2db      	uxtb	r3, r3
 8011b7e:	461a      	mov	r2, r3
 8011b80:	4b1a      	ldr	r3, [pc, #104]	; (8011bec <FATFS_LinkDriverEx+0x94>)
 8011b82:	2100      	movs	r1, #0
 8011b84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011b86:	4b19      	ldr	r3, [pc, #100]	; (8011bec <FATFS_LinkDriverEx+0x94>)
 8011b88:	7a5b      	ldrb	r3, [r3, #9]
 8011b8a:	b2db      	uxtb	r3, r3
 8011b8c:	4a17      	ldr	r2, [pc, #92]	; (8011bec <FATFS_LinkDriverEx+0x94>)
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	4413      	add	r3, r2
 8011b92:	68fa      	ldr	r2, [r7, #12]
 8011b94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011b96:	4b15      	ldr	r3, [pc, #84]	; (8011bec <FATFS_LinkDriverEx+0x94>)
 8011b98:	7a5b      	ldrb	r3, [r3, #9]
 8011b9a:	b2db      	uxtb	r3, r3
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	4b13      	ldr	r3, [pc, #76]	; (8011bec <FATFS_LinkDriverEx+0x94>)
 8011ba0:	4413      	add	r3, r2
 8011ba2:	79fa      	ldrb	r2, [r7, #7]
 8011ba4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011ba6:	4b11      	ldr	r3, [pc, #68]	; (8011bec <FATFS_LinkDriverEx+0x94>)
 8011ba8:	7a5b      	ldrb	r3, [r3, #9]
 8011baa:	b2db      	uxtb	r3, r3
 8011bac:	1c5a      	adds	r2, r3, #1
 8011bae:	b2d1      	uxtb	r1, r2
 8011bb0:	4a0e      	ldr	r2, [pc, #56]	; (8011bec <FATFS_LinkDriverEx+0x94>)
 8011bb2:	7251      	strb	r1, [r2, #9]
 8011bb4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011bb6:	7dbb      	ldrb	r3, [r7, #22]
 8011bb8:	3330      	adds	r3, #48	; 0x30
 8011bba:	b2da      	uxtb	r2, r3
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	223a      	movs	r2, #58	; 0x3a
 8011bc6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	3302      	adds	r3, #2
 8011bcc:	222f      	movs	r2, #47	; 0x2f
 8011bce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	3303      	adds	r3, #3
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	371c      	adds	r7, #28
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr
 8011bea:	bf00      	nop
 8011bec:	2400021c 	.word	0x2400021c

08011bf0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	6839      	ldr	r1, [r7, #0]
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f7ff ffaa 	bl	8011b58 <FATFS_LinkDriverEx>
 8011c04:	4603      	mov	r3, r0
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3708      	adds	r7, #8
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
	...

08011c10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011c14:	2200      	movs	r2, #0
 8011c16:	4913      	ldr	r1, [pc, #76]	; (8011c64 <MX_USB_DEVICE_Init+0x54>)
 8011c18:	4813      	ldr	r0, [pc, #76]	; (8011c68 <MX_USB_DEVICE_Init+0x58>)
 8011c1a:	f7fc fd5e 	bl	800e6da <USBD_Init>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d001      	beq.n	8011c28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011c24:	f7ef f8ea 	bl	8000dfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8011c28:	4910      	ldr	r1, [pc, #64]	; (8011c6c <MX_USB_DEVICE_Init+0x5c>)
 8011c2a:	480f      	ldr	r0, [pc, #60]	; (8011c68 <MX_USB_DEVICE_Init+0x58>)
 8011c2c:	f7fc fd8b 	bl	800e746 <USBD_RegisterClass>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d001      	beq.n	8011c3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011c36:	f7ef f8e1 	bl	8000dfc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8011c3a:	490d      	ldr	r1, [pc, #52]	; (8011c70 <MX_USB_DEVICE_Init+0x60>)
 8011c3c:	480a      	ldr	r0, [pc, #40]	; (8011c68 <MX_USB_DEVICE_Init+0x58>)
 8011c3e:	f7fb fa87 	bl	800d150 <USBD_MSC_RegisterStorage>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d001      	beq.n	8011c4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011c48:	f7ef f8d8 	bl	8000dfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011c4c:	4806      	ldr	r0, [pc, #24]	; (8011c68 <MX_USB_DEVICE_Init+0x58>)
 8011c4e:	f7fc fd9b 	bl	800e788 <USBD_Start>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d001      	beq.n	8011c5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011c58:	f7ef f8d0 	bl	8000dfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011c5c:	f7f3 fa36 	bl	80050cc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011c60:	bf00      	nop
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	240000f8 	.word	0x240000f8
 8011c68:	24000ed8 	.word	0x24000ed8
 8011c6c:	24000010 	.word	0x24000010
 8011c70:	24000148 	.word	0x24000148

08011c74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c74:	b480      	push	{r7}
 8011c76:	b083      	sub	sp, #12
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	6039      	str	r1, [r7, #0]
 8011c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	2212      	movs	r2, #18
 8011c84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011c86:	4b03      	ldr	r3, [pc, #12]	; (8011c94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr
 8011c94:	24000114 	.word	0x24000114

08011c98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	6039      	str	r1, [r7, #0]
 8011ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	2204      	movs	r2, #4
 8011ca8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011caa:	4b03      	ldr	r3, [pc, #12]	; (8011cb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	370c      	adds	r7, #12
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr
 8011cb8:	24000128 	.word	0x24000128

08011cbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	6039      	str	r1, [r7, #0]
 8011cc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011cc8:	79fb      	ldrb	r3, [r7, #7]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d105      	bne.n	8011cda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011cce:	683a      	ldr	r2, [r7, #0]
 8011cd0:	4907      	ldr	r1, [pc, #28]	; (8011cf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8011cd2:	4808      	ldr	r0, [pc, #32]	; (8011cf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8011cd4:	f7fd fd25 	bl	800f722 <USBD_GetString>
 8011cd8:	e004      	b.n	8011ce4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011cda:	683a      	ldr	r2, [r7, #0]
 8011cdc:	4904      	ldr	r1, [pc, #16]	; (8011cf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8011cde:	4805      	ldr	r0, [pc, #20]	; (8011cf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8011ce0:	f7fd fd1f 	bl	800f722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ce4:	4b02      	ldr	r3, [pc, #8]	; (8011cf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3708      	adds	r7, #8
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
 8011cee:	bf00      	nop
 8011cf0:	240011a8 	.word	0x240011a8
 8011cf4:	0801290c 	.word	0x0801290c

08011cf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	4603      	mov	r3, r0
 8011d00:	6039      	str	r1, [r7, #0]
 8011d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011d04:	683a      	ldr	r2, [r7, #0]
 8011d06:	4904      	ldr	r1, [pc, #16]	; (8011d18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011d08:	4804      	ldr	r0, [pc, #16]	; (8011d1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011d0a:	f7fd fd0a 	bl	800f722 <USBD_GetString>
  return USBD_StrDesc;
 8011d0e:	4b02      	ldr	r3, [pc, #8]	; (8011d18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	240011a8 	.word	0x240011a8
 8011d1c:	08012920 	.word	0x08012920

08011d20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	4603      	mov	r3, r0
 8011d28:	6039      	str	r1, [r7, #0]
 8011d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	221a      	movs	r2, #26
 8011d30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011d32:	f000 f843 	bl	8011dbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011d36:	4b02      	ldr	r3, [pc, #8]	; (8011d40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	2400012c 	.word	0x2400012c

08011d44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	6039      	str	r1, [r7, #0]
 8011d4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011d50:	79fb      	ldrb	r3, [r7, #7]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d105      	bne.n	8011d62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d56:	683a      	ldr	r2, [r7, #0]
 8011d58:	4907      	ldr	r1, [pc, #28]	; (8011d78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d5a:	4808      	ldr	r0, [pc, #32]	; (8011d7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d5c:	f7fd fce1 	bl	800f722 <USBD_GetString>
 8011d60:	e004      	b.n	8011d6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d62:	683a      	ldr	r2, [r7, #0]
 8011d64:	4904      	ldr	r1, [pc, #16]	; (8011d78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d66:	4805      	ldr	r0, [pc, #20]	; (8011d7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d68:	f7fd fcdb 	bl	800f722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d6c:	4b02      	ldr	r3, [pc, #8]	; (8011d78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3708      	adds	r7, #8
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	240011a8 	.word	0x240011a8
 8011d7c:	08012934 	.word	0x08012934

08011d80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	4603      	mov	r3, r0
 8011d88:	6039      	str	r1, [r7, #0]
 8011d8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011d8c:	79fb      	ldrb	r3, [r7, #7]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d105      	bne.n	8011d9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011d92:	683a      	ldr	r2, [r7, #0]
 8011d94:	4907      	ldr	r1, [pc, #28]	; (8011db4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011d96:	4808      	ldr	r0, [pc, #32]	; (8011db8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011d98:	f7fd fcc3 	bl	800f722 <USBD_GetString>
 8011d9c:	e004      	b.n	8011da8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011d9e:	683a      	ldr	r2, [r7, #0]
 8011da0:	4904      	ldr	r1, [pc, #16]	; (8011db4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011da2:	4805      	ldr	r0, [pc, #20]	; (8011db8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011da4:	f7fd fcbd 	bl	800f722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011da8:	4b02      	ldr	r3, [pc, #8]	; (8011db4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3708      	adds	r7, #8
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	240011a8 	.word	0x240011a8
 8011db8:	08012940 	.word	0x08012940

08011dbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b084      	sub	sp, #16
 8011dc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011dc2:	4b0f      	ldr	r3, [pc, #60]	; (8011e00 <Get_SerialNum+0x44>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011dc8:	4b0e      	ldr	r3, [pc, #56]	; (8011e04 <Get_SerialNum+0x48>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011dce:	4b0e      	ldr	r3, [pc, #56]	; (8011e08 <Get_SerialNum+0x4c>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011dd4:	68fa      	ldr	r2, [r7, #12]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	4413      	add	r3, r2
 8011dda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d009      	beq.n	8011df6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011de2:	2208      	movs	r2, #8
 8011de4:	4909      	ldr	r1, [pc, #36]	; (8011e0c <Get_SerialNum+0x50>)
 8011de6:	68f8      	ldr	r0, [r7, #12]
 8011de8:	f000 f814 	bl	8011e14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011dec:	2204      	movs	r2, #4
 8011dee:	4908      	ldr	r1, [pc, #32]	; (8011e10 <Get_SerialNum+0x54>)
 8011df0:	68b8      	ldr	r0, [r7, #8]
 8011df2:	f000 f80f 	bl	8011e14 <IntToUnicode>
  }
}
 8011df6:	bf00      	nop
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	1ff1e800 	.word	0x1ff1e800
 8011e04:	1ff1e804 	.word	0x1ff1e804
 8011e08:	1ff1e808 	.word	0x1ff1e808
 8011e0c:	2400012e 	.word	0x2400012e
 8011e10:	2400013e 	.word	0x2400013e

08011e14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011e14:	b480      	push	{r7}
 8011e16:	b087      	sub	sp, #28
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	4613      	mov	r3, r2
 8011e20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011e22:	2300      	movs	r3, #0
 8011e24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011e26:	2300      	movs	r3, #0
 8011e28:	75fb      	strb	r3, [r7, #23]
 8011e2a:	e027      	b.n	8011e7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	0f1b      	lsrs	r3, r3, #28
 8011e30:	2b09      	cmp	r3, #9
 8011e32:	d80b      	bhi.n	8011e4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	0f1b      	lsrs	r3, r3, #28
 8011e38:	b2da      	uxtb	r2, r3
 8011e3a:	7dfb      	ldrb	r3, [r7, #23]
 8011e3c:	005b      	lsls	r3, r3, #1
 8011e3e:	4619      	mov	r1, r3
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	440b      	add	r3, r1
 8011e44:	3230      	adds	r2, #48	; 0x30
 8011e46:	b2d2      	uxtb	r2, r2
 8011e48:	701a      	strb	r2, [r3, #0]
 8011e4a:	e00a      	b.n	8011e62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	0f1b      	lsrs	r3, r3, #28
 8011e50:	b2da      	uxtb	r2, r3
 8011e52:	7dfb      	ldrb	r3, [r7, #23]
 8011e54:	005b      	lsls	r3, r3, #1
 8011e56:	4619      	mov	r1, r3
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	440b      	add	r3, r1
 8011e5c:	3237      	adds	r2, #55	; 0x37
 8011e5e:	b2d2      	uxtb	r2, r2
 8011e60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	011b      	lsls	r3, r3, #4
 8011e66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011e68:	7dfb      	ldrb	r3, [r7, #23]
 8011e6a:	005b      	lsls	r3, r3, #1
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	68ba      	ldr	r2, [r7, #8]
 8011e70:	4413      	add	r3, r2
 8011e72:	2200      	movs	r2, #0
 8011e74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011e76:	7dfb      	ldrb	r3, [r7, #23]
 8011e78:	3301      	adds	r3, #1
 8011e7a:	75fb      	strb	r3, [r7, #23]
 8011e7c:	7dfa      	ldrb	r2, [r7, #23]
 8011e7e:	79fb      	ldrb	r3, [r7, #7]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d3d3      	bcc.n	8011e2c <IntToUnicode+0x18>
  }
}
 8011e84:	bf00      	nop
 8011e86:	371c      	adds	r7, #28
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8e:	4770      	bx	lr

08011e90 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b083      	sub	sp, #12
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	4603      	mov	r3, r0
 8011e98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8011e9a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	370c      	adds	r7, #12
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea6:	4770      	bx	lr

08011ea8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b08e      	sub	sp, #56	; 0x38
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	4603      	mov	r3, r0
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	607a      	str	r2, [r7, #4]
 8011eb4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8011eb6:	23ff      	movs	r3, #255	; 0xff
 8011eb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8011ebc:	f107 0310 	add.w	r3, r7, #16
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	480a      	ldr	r0, [pc, #40]	; (8011eec <STORAGE_GetCapacity_FS+0x44>)
 8011ec4:	f7f6 fe38 	bl	8008b38 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8011ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eca:	1e5a      	subs	r2, r3, #1
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8011ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8011ede:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3738      	adds	r7, #56	; 0x38
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
 8011eea:	bf00      	nop
 8011eec:	24000564 	.word	0x24000564

08011ef0 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b083      	sub	sp, #12
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011efa:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	370c      	adds	r7, #12
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr

08011f08 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	4603      	mov	r3, r0
 8011f10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8011f12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	370c      	adds	r7, #12
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr

08011f20 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b088      	sub	sp, #32
 8011f24:	af02      	add	r7, sp, #8
 8011f26:	60b9      	str	r1, [r7, #8]
 8011f28:	607a      	str	r2, [r7, #4]
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	73fb      	strb	r3, [r7, #15]
 8011f30:	4613      	mov	r3, r2
 8011f32:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8011f34:	23ff      	movs	r3, #255	; 0xff
 8011f36:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8011f38:	89ba      	ldrh	r2, [r7, #12]
 8011f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f3e:	9300      	str	r3, [sp, #0]
 8011f40:	4613      	mov	r3, r2
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	68b9      	ldr	r1, [r7, #8]
 8011f46:	4809      	ldr	r0, [pc, #36]	; (8011f6c <STORAGE_Read_FS+0x4c>)
 8011f48:	f7f6 f878 	bl	800803c <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8011f4c:	bf00      	nop
 8011f4e:	4807      	ldr	r0, [pc, #28]	; (8011f6c <STORAGE_Read_FS+0x4c>)
 8011f50:	f7f6 fec8 	bl	8008ce4 <HAL_SD_GetCardState>
 8011f54:	4603      	mov	r3, r0
 8011f56:	2b04      	cmp	r3, #4
 8011f58:	d1f9      	bne.n	8011f4e <STORAGE_Read_FS+0x2e>
	ret = 0;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	75fb      	strb	r3, [r7, #23]
	return ret;
 8011f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	3718      	adds	r7, #24
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	24000564 	.word	0x24000564

08011f70 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b088      	sub	sp, #32
 8011f74:	af02      	add	r7, sp, #8
 8011f76:	60b9      	str	r1, [r7, #8]
 8011f78:	607a      	str	r2, [r7, #4]
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	73fb      	strb	r3, [r7, #15]
 8011f80:	4613      	mov	r3, r2
 8011f82:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8011f84:	23ff      	movs	r3, #255	; 0xff
 8011f86:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8011f88:	89ba      	ldrh	r2, [r7, #12]
 8011f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f8e:	9300      	str	r3, [sp, #0]
 8011f90:	4613      	mov	r3, r2
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	68b9      	ldr	r1, [r7, #8]
 8011f96:	4809      	ldr	r0, [pc, #36]	; (8011fbc <STORAGE_Write_FS+0x4c>)
 8011f98:	f7f6 f9da 	bl	8008350 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8011f9c:	bf00      	nop
 8011f9e:	4807      	ldr	r0, [pc, #28]	; (8011fbc <STORAGE_Write_FS+0x4c>)
 8011fa0:	f7f6 fea0 	bl	8008ce4 <HAL_SD_GetCardState>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2b04      	cmp	r3, #4
 8011fa8:	d1f9      	bne.n	8011f9e <STORAGE_Write_FS+0x2e>
	ret = 0;
 8011faa:	2300      	movs	r3, #0
 8011fac:	75fb      	strb	r3, [r7, #23]
	return ret;
 8011fae:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3718      	adds	r7, #24
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}
 8011fba:	bf00      	nop
 8011fbc:	24000564 	.word	0x24000564

08011fc0 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8011fc0:	b480      	push	{r7}
 8011fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8011fc4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b08a      	sub	sp, #40	; 0x28
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011fd8:	f107 0314 	add.w	r3, r7, #20
 8011fdc:	2200      	movs	r2, #0
 8011fde:	601a      	str	r2, [r3, #0]
 8011fe0:	605a      	str	r2, [r3, #4]
 8011fe2:	609a      	str	r2, [r3, #8]
 8011fe4:	60da      	str	r2, [r3, #12]
 8011fe6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4a1e      	ldr	r2, [pc, #120]	; (8012068 <HAL_PCD_MspInit+0x98>)
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d136      	bne.n	8012060 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011ff2:	4b1e      	ldr	r3, [pc, #120]	; (801206c <HAL_PCD_MspInit+0x9c>)
 8011ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011ff8:	4a1c      	ldr	r2, [pc, #112]	; (801206c <HAL_PCD_MspInit+0x9c>)
 8011ffa:	f043 0301 	orr.w	r3, r3, #1
 8011ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012002:	4b1a      	ldr	r3, [pc, #104]	; (801206c <HAL_PCD_MspInit+0x9c>)
 8012004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012008:	f003 0301 	and.w	r3, r3, #1
 801200c:	613b      	str	r3, [r7, #16]
 801200e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012010:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012016:	2302      	movs	r3, #2
 8012018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801201a:	2300      	movs	r3, #0
 801201c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801201e:	2300      	movs	r3, #0
 8012020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012022:	230a      	movs	r3, #10
 8012024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012026:	f107 0314 	add.w	r3, r7, #20
 801202a:	4619      	mov	r1, r3
 801202c:	4810      	ldr	r0, [pc, #64]	; (8012070 <HAL_PCD_MspInit+0xa0>)
 801202e:	f7f1 fc27 	bl	8003880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012032:	4b0e      	ldr	r3, [pc, #56]	; (801206c <HAL_PCD_MspInit+0x9c>)
 8012034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012038:	4a0c      	ldr	r2, [pc, #48]	; (801206c <HAL_PCD_MspInit+0x9c>)
 801203a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801203e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012042:	4b0a      	ldr	r3, [pc, #40]	; (801206c <HAL_PCD_MspInit+0x9c>)
 8012044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801204c:	60fb      	str	r3, [r7, #12]
 801204e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012050:	2200      	movs	r2, #0
 8012052:	2100      	movs	r1, #0
 8012054:	2065      	movs	r0, #101	; 0x65
 8012056:	f7ef fbb4 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801205a:	2065      	movs	r0, #101	; 0x65
 801205c:	f7ef fbcb 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012060:	bf00      	nop
 8012062:	3728      	adds	r7, #40	; 0x28
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}
 8012068:	40080000 	.word	0x40080000
 801206c:	58024400 	.word	0x58024400
 8012070:	58020000 	.word	0x58020000

08012074 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012088:	4619      	mov	r1, r3
 801208a:	4610      	mov	r0, r2
 801208c:	f7fc fbc7 	bl	800e81e <USBD_LL_SetupStage>
}
 8012090:	bf00      	nop
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}

08012098 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	460b      	mov	r3, r1
 80120a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80120aa:	78fa      	ldrb	r2, [r7, #3]
 80120ac:	6879      	ldr	r1, [r7, #4]
 80120ae:	4613      	mov	r3, r2
 80120b0:	00db      	lsls	r3, r3, #3
 80120b2:	1a9b      	subs	r3, r3, r2
 80120b4:	009b      	lsls	r3, r3, #2
 80120b6:	440b      	add	r3, r1
 80120b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80120bc:	681a      	ldr	r2, [r3, #0]
 80120be:	78fb      	ldrb	r3, [r7, #3]
 80120c0:	4619      	mov	r1, r3
 80120c2:	f7fc fbff 	bl	800e8c4 <USBD_LL_DataOutStage>
}
 80120c6:	bf00      	nop
 80120c8:	3708      	adds	r7, #8
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}

080120ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120ce:	b580      	push	{r7, lr}
 80120d0:	b082      	sub	sp, #8
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	6078      	str	r0, [r7, #4]
 80120d6:	460b      	mov	r3, r1
 80120d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80120e0:	78fa      	ldrb	r2, [r7, #3]
 80120e2:	6879      	ldr	r1, [r7, #4]
 80120e4:	4613      	mov	r3, r2
 80120e6:	00db      	lsls	r3, r3, #3
 80120e8:	1a9b      	subs	r3, r3, r2
 80120ea:	009b      	lsls	r3, r3, #2
 80120ec:	440b      	add	r3, r1
 80120ee:	3348      	adds	r3, #72	; 0x48
 80120f0:	681a      	ldr	r2, [r3, #0]
 80120f2:	78fb      	ldrb	r3, [r7, #3]
 80120f4:	4619      	mov	r1, r3
 80120f6:	f7fc fc48 	bl	800e98a <USBD_LL_DataInStage>
}
 80120fa:	bf00      	nop
 80120fc:	3708      	adds	r7, #8
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}

08012102 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012102:	b580      	push	{r7, lr}
 8012104:	b082      	sub	sp, #8
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012110:	4618      	mov	r0, r3
 8012112:	f7fc fd4c 	bl	800ebae <USBD_LL_SOF>
}
 8012116:	bf00      	nop
 8012118:	3708      	adds	r7, #8
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801211e:	b580      	push	{r7, lr}
 8012120:	b084      	sub	sp, #16
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012126:	2301      	movs	r3, #1
 8012128:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d102      	bne.n	8012138 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012132:	2300      	movs	r3, #0
 8012134:	73fb      	strb	r3, [r7, #15]
 8012136:	e008      	b.n	801214a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	68db      	ldr	r3, [r3, #12]
 801213c:	2b02      	cmp	r3, #2
 801213e:	d102      	bne.n	8012146 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012140:	2301      	movs	r3, #1
 8012142:	73fb      	strb	r3, [r7, #15]
 8012144:	e001      	b.n	801214a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012146:	f7ee fe59 	bl	8000dfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012150:	7bfa      	ldrb	r2, [r7, #15]
 8012152:	4611      	mov	r1, r2
 8012154:	4618      	mov	r0, r3
 8012156:	f7fc fcef 	bl	800eb38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012160:	4618      	mov	r0, r3
 8012162:	f7fc fca8 	bl	800eab6 <USBD_LL_Reset>
}
 8012166:	bf00      	nop
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
	...

08012170 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801217e:	4618      	mov	r0, r3
 8012180:	f7fc fcea 	bl	800eb58 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	687a      	ldr	r2, [r7, #4]
 8012190:	6812      	ldr	r2, [r2, #0]
 8012192:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012196:	f043 0301 	orr.w	r3, r3, #1
 801219a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6a1b      	ldr	r3, [r3, #32]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d005      	beq.n	80121b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80121a4:	4b04      	ldr	r3, [pc, #16]	; (80121b8 <HAL_PCD_SuspendCallback+0x48>)
 80121a6:	691b      	ldr	r3, [r3, #16]
 80121a8:	4a03      	ldr	r2, [pc, #12]	; (80121b8 <HAL_PCD_SuspendCallback+0x48>)
 80121aa:	f043 0306 	orr.w	r3, r3, #6
 80121ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80121b0:	bf00      	nop
 80121b2:	3708      	adds	r7, #8
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	e000ed00 	.word	0xe000ed00

080121bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fc fcd9 	bl	800eb82 <USBD_LL_Resume>
}
 80121d0:	bf00      	nop
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	460b      	mov	r3, r1
 80121e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121ea:	78fa      	ldrb	r2, [r7, #3]
 80121ec:	4611      	mov	r1, r2
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fc fd04 	bl	800ebfc <USBD_LL_IsoOUTIncomplete>
}
 80121f4:	bf00      	nop
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}

080121fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	460b      	mov	r3, r1
 8012206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801220e:	78fa      	ldrb	r2, [r7, #3]
 8012210:	4611      	mov	r1, r2
 8012212:	4618      	mov	r0, r3
 8012214:	f7fc fce5 	bl	800ebe2 <USBD_LL_IsoINIncomplete>
}
 8012218:	bf00      	nop
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}

08012220 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801222e:	4618      	mov	r0, r3
 8012230:	f7fc fcf1 	bl	800ec16 <USBD_LL_DevConnected>
}
 8012234:	bf00      	nop
 8012236:	3708      	adds	r7, #8
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}

0801223c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801224a:	4618      	mov	r0, r3
 801224c:	f7fc fcee 	bl	800ec2c <USBD_LL_DevDisconnected>
}
 8012250:	bf00      	nop
 8012252:	3708      	adds	r7, #8
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}

08012258 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d13e      	bne.n	80122e6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012268:	4a21      	ldr	r2, [pc, #132]	; (80122f0 <USBD_LL_Init+0x98>)
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	4a1f      	ldr	r2, [pc, #124]	; (80122f0 <USBD_LL_Init+0x98>)
 8012274:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012278:	4b1d      	ldr	r3, [pc, #116]	; (80122f0 <USBD_LL_Init+0x98>)
 801227a:	4a1e      	ldr	r2, [pc, #120]	; (80122f4 <USBD_LL_Init+0x9c>)
 801227c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801227e:	4b1c      	ldr	r3, [pc, #112]	; (80122f0 <USBD_LL_Init+0x98>)
 8012280:	2209      	movs	r2, #9
 8012282:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012284:	4b1a      	ldr	r3, [pc, #104]	; (80122f0 <USBD_LL_Init+0x98>)
 8012286:	2202      	movs	r2, #2
 8012288:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801228a:	4b19      	ldr	r3, [pc, #100]	; (80122f0 <USBD_LL_Init+0x98>)
 801228c:	2200      	movs	r2, #0
 801228e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012290:	4b17      	ldr	r3, [pc, #92]	; (80122f0 <USBD_LL_Init+0x98>)
 8012292:	2202      	movs	r2, #2
 8012294:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012296:	4b16      	ldr	r3, [pc, #88]	; (80122f0 <USBD_LL_Init+0x98>)
 8012298:	2200      	movs	r2, #0
 801229a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801229c:	4b14      	ldr	r3, [pc, #80]	; (80122f0 <USBD_LL_Init+0x98>)
 801229e:	2200      	movs	r2, #0
 80122a0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80122a2:	4b13      	ldr	r3, [pc, #76]	; (80122f0 <USBD_LL_Init+0x98>)
 80122a4:	2200      	movs	r2, #0
 80122a6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80122a8:	4b11      	ldr	r3, [pc, #68]	; (80122f0 <USBD_LL_Init+0x98>)
 80122aa:	2200      	movs	r2, #0
 80122ac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80122ae:	4b10      	ldr	r3, [pc, #64]	; (80122f0 <USBD_LL_Init+0x98>)
 80122b0:	2200      	movs	r2, #0
 80122b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80122b4:	4b0e      	ldr	r3, [pc, #56]	; (80122f0 <USBD_LL_Init+0x98>)
 80122b6:	2200      	movs	r2, #0
 80122b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80122ba:	480d      	ldr	r0, [pc, #52]	; (80122f0 <USBD_LL_Init+0x98>)
 80122bc:	f7f1 fcc4 	bl	8003c48 <HAL_PCD_Init>
 80122c0:	4603      	mov	r3, r0
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80122c6:	f7ee fd99 	bl	8000dfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80122ca:	2180      	movs	r1, #128	; 0x80
 80122cc:	4808      	ldr	r0, [pc, #32]	; (80122f0 <USBD_LL_Init+0x98>)
 80122ce:	f7f2 fe82 	bl	8004fd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80122d2:	2240      	movs	r2, #64	; 0x40
 80122d4:	2100      	movs	r1, #0
 80122d6:	4806      	ldr	r0, [pc, #24]	; (80122f0 <USBD_LL_Init+0x98>)
 80122d8:	f7f2 fe36 	bl	8004f48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80122dc:	2280      	movs	r2, #128	; 0x80
 80122de:	2101      	movs	r1, #1
 80122e0:	4803      	ldr	r0, [pc, #12]	; (80122f0 <USBD_LL_Init+0x98>)
 80122e2:	f7f2 fe31 	bl	8004f48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80122e6:	2300      	movs	r3, #0
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3708      	adds	r7, #8
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}
 80122f0:	240013a8 	.word	0x240013a8
 80122f4:	40080000 	.word	0x40080000

080122f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012300:	2300      	movs	r3, #0
 8012302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012304:	2300      	movs	r3, #0
 8012306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801230e:	4618      	mov	r0, r3
 8012310:	f7f1 fdbe 	bl	8003e90 <HAL_PCD_Start>
 8012314:	4603      	mov	r3, r0
 8012316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012318:	7bfb      	ldrb	r3, [r7, #15]
 801231a:	4618      	mov	r0, r3
 801231c:	f000 f94a 	bl	80125b4 <USBD_Get_USB_Status>
 8012320:	4603      	mov	r3, r0
 8012322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012324:	7bbb      	ldrb	r3, [r7, #14]
}
 8012326:	4618      	mov	r0, r3
 8012328:	3710      	adds	r7, #16
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}

0801232e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801232e:	b580      	push	{r7, lr}
 8012330:	b084      	sub	sp, #16
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
 8012336:	4608      	mov	r0, r1
 8012338:	4611      	mov	r1, r2
 801233a:	461a      	mov	r2, r3
 801233c:	4603      	mov	r3, r0
 801233e:	70fb      	strb	r3, [r7, #3]
 8012340:	460b      	mov	r3, r1
 8012342:	70bb      	strb	r3, [r7, #2]
 8012344:	4613      	mov	r3, r2
 8012346:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012348:	2300      	movs	r3, #0
 801234a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801234c:	2300      	movs	r3, #0
 801234e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012356:	78bb      	ldrb	r3, [r7, #2]
 8012358:	883a      	ldrh	r2, [r7, #0]
 801235a:	78f9      	ldrb	r1, [r7, #3]
 801235c:	f7f2 f9cf 	bl	80046fe <HAL_PCD_EP_Open>
 8012360:	4603      	mov	r3, r0
 8012362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012364:	7bfb      	ldrb	r3, [r7, #15]
 8012366:	4618      	mov	r0, r3
 8012368:	f000 f924 	bl	80125b4 <USBD_Get_USB_Status>
 801236c:	4603      	mov	r3, r0
 801236e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012370:	7bbb      	ldrb	r3, [r7, #14]
}
 8012372:	4618      	mov	r0, r3
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}

0801237a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b084      	sub	sp, #16
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
 8012382:	460b      	mov	r3, r1
 8012384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012386:	2300      	movs	r3, #0
 8012388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801238a:	2300      	movs	r3, #0
 801238c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012394:	78fa      	ldrb	r2, [r7, #3]
 8012396:	4611      	mov	r1, r2
 8012398:	4618      	mov	r0, r3
 801239a:	f7f2 fa18 	bl	80047ce <HAL_PCD_EP_Close>
 801239e:	4603      	mov	r3, r0
 80123a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123a2:	7bfb      	ldrb	r3, [r7, #15]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f000 f905 	bl	80125b4 <USBD_Get_USB_Status>
 80123aa:	4603      	mov	r3, r0
 80123ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3710      	adds	r7, #16
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b084      	sub	sp, #16
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	460b      	mov	r3, r1
 80123c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123c4:	2300      	movs	r3, #0
 80123c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123c8:	2300      	movs	r3, #0
 80123ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80123d2:	78fa      	ldrb	r2, [r7, #3]
 80123d4:	4611      	mov	r1, r2
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7f2 fbaa 	bl	8004b30 <HAL_PCD_EP_Flush>
 80123dc:	4603      	mov	r3, r0
 80123de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123e0:	7bfb      	ldrb	r3, [r7, #15]
 80123e2:	4618      	mov	r0, r3
 80123e4:	f000 f8e6 	bl	80125b4 <USBD_Get_USB_Status>
 80123e8:	4603      	mov	r3, r0
 80123ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3710      	adds	r7, #16
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}

080123f6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123f6:	b580      	push	{r7, lr}
 80123f8:	b084      	sub	sp, #16
 80123fa:	af00      	add	r7, sp, #0
 80123fc:	6078      	str	r0, [r7, #4]
 80123fe:	460b      	mov	r3, r1
 8012400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012402:	2300      	movs	r3, #0
 8012404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012406:	2300      	movs	r3, #0
 8012408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012410:	78fa      	ldrb	r2, [r7, #3]
 8012412:	4611      	mov	r1, r2
 8012414:	4618      	mov	r0, r3
 8012416:	f7f2 fad1 	bl	80049bc <HAL_PCD_EP_SetStall>
 801241a:	4603      	mov	r3, r0
 801241c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801241e:	7bfb      	ldrb	r3, [r7, #15]
 8012420:	4618      	mov	r0, r3
 8012422:	f000 f8c7 	bl	80125b4 <USBD_Get_USB_Status>
 8012426:	4603      	mov	r3, r0
 8012428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801242a:	7bbb      	ldrb	r3, [r7, #14]
}
 801242c:	4618      	mov	r0, r3
 801242e:	3710      	adds	r7, #16
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	460b      	mov	r3, r1
 801243e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012440:	2300      	movs	r3, #0
 8012442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012444:	2300      	movs	r3, #0
 8012446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801244e:	78fa      	ldrb	r2, [r7, #3]
 8012450:	4611      	mov	r1, r2
 8012452:	4618      	mov	r0, r3
 8012454:	f7f2 fb16 	bl	8004a84 <HAL_PCD_EP_ClrStall>
 8012458:	4603      	mov	r3, r0
 801245a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801245c:	7bfb      	ldrb	r3, [r7, #15]
 801245e:	4618      	mov	r0, r3
 8012460:	f000 f8a8 	bl	80125b4 <USBD_Get_USB_Status>
 8012464:	4603      	mov	r3, r0
 8012466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012468:	7bbb      	ldrb	r3, [r7, #14]
}
 801246a:	4618      	mov	r0, r3
 801246c:	3710      	adds	r7, #16
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}

08012472 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012472:	b480      	push	{r7}
 8012474:	b085      	sub	sp, #20
 8012476:	af00      	add	r7, sp, #0
 8012478:	6078      	str	r0, [r7, #4]
 801247a:	460b      	mov	r3, r1
 801247c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012484:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801248a:	2b00      	cmp	r3, #0
 801248c:	da0b      	bge.n	80124a6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801248e:	78fb      	ldrb	r3, [r7, #3]
 8012490:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012494:	68f9      	ldr	r1, [r7, #12]
 8012496:	4613      	mov	r3, r2
 8012498:	00db      	lsls	r3, r3, #3
 801249a:	1a9b      	subs	r3, r3, r2
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	440b      	add	r3, r1
 80124a0:	333e      	adds	r3, #62	; 0x3e
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	e00b      	b.n	80124be <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80124a6:	78fb      	ldrb	r3, [r7, #3]
 80124a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80124ac:	68f9      	ldr	r1, [r7, #12]
 80124ae:	4613      	mov	r3, r2
 80124b0:	00db      	lsls	r3, r3, #3
 80124b2:	1a9b      	subs	r3, r3, r2
 80124b4:	009b      	lsls	r3, r3, #2
 80124b6:	440b      	add	r3, r1
 80124b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80124bc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3714      	adds	r7, #20
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr

080124ca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80124ca:	b580      	push	{r7, lr}
 80124cc:	b084      	sub	sp, #16
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	6078      	str	r0, [r7, #4]
 80124d2:	460b      	mov	r3, r1
 80124d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124d6:	2300      	movs	r3, #0
 80124d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124da:	2300      	movs	r3, #0
 80124dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80124e4:	78fa      	ldrb	r2, [r7, #3]
 80124e6:	4611      	mov	r1, r2
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7f2 f8e3 	bl	80046b4 <HAL_PCD_SetAddress>
 80124ee:	4603      	mov	r3, r0
 80124f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124f2:	7bfb      	ldrb	r3, [r7, #15]
 80124f4:	4618      	mov	r0, r3
 80124f6:	f000 f85d 	bl	80125b4 <USBD_Get_USB_Status>
 80124fa:	4603      	mov	r3, r0
 80124fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8012500:	4618      	mov	r0, r3
 8012502:	3710      	adds	r7, #16
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b086      	sub	sp, #24
 801250c:	af00      	add	r7, sp, #0
 801250e:	60f8      	str	r0, [r7, #12]
 8012510:	607a      	str	r2, [r7, #4]
 8012512:	603b      	str	r3, [r7, #0]
 8012514:	460b      	mov	r3, r1
 8012516:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012518:	2300      	movs	r3, #0
 801251a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801251c:	2300      	movs	r3, #0
 801251e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012526:	7af9      	ldrb	r1, [r7, #11]
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	f7f2 f9fc 	bl	8004928 <HAL_PCD_EP_Transmit>
 8012530:	4603      	mov	r3, r0
 8012532:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012534:	7dfb      	ldrb	r3, [r7, #23]
 8012536:	4618      	mov	r0, r3
 8012538:	f000 f83c 	bl	80125b4 <USBD_Get_USB_Status>
 801253c:	4603      	mov	r3, r0
 801253e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012540:	7dbb      	ldrb	r3, [r7, #22]
}
 8012542:	4618      	mov	r0, r3
 8012544:	3718      	adds	r7, #24
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}

0801254a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801254a:	b580      	push	{r7, lr}
 801254c:	b086      	sub	sp, #24
 801254e:	af00      	add	r7, sp, #0
 8012550:	60f8      	str	r0, [r7, #12]
 8012552:	607a      	str	r2, [r7, #4]
 8012554:	603b      	str	r3, [r7, #0]
 8012556:	460b      	mov	r3, r1
 8012558:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801255a:	2300      	movs	r3, #0
 801255c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801255e:	2300      	movs	r3, #0
 8012560:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012568:	7af9      	ldrb	r1, [r7, #11]
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	687a      	ldr	r2, [r7, #4]
 801256e:	f7f2 f978 	bl	8004862 <HAL_PCD_EP_Receive>
 8012572:	4603      	mov	r3, r0
 8012574:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012576:	7dfb      	ldrb	r3, [r7, #23]
 8012578:	4618      	mov	r0, r3
 801257a:	f000 f81b 	bl	80125b4 <USBD_Get_USB_Status>
 801257e:	4603      	mov	r3, r0
 8012580:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012582:	7dbb      	ldrb	r3, [r7, #22]
}
 8012584:	4618      	mov	r0, r3
 8012586:	3718      	adds	r7, #24
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}

0801258c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b082      	sub	sp, #8
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	460b      	mov	r3, r1
 8012596:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801259e:	78fa      	ldrb	r2, [r7, #3]
 80125a0:	4611      	mov	r1, r2
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7f2 f9a8 	bl	80048f8 <HAL_PCD_EP_GetRxCount>
 80125a8:	4603      	mov	r3, r0
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3708      	adds	r7, #8
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}
	...

080125b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80125b4:	b480      	push	{r7}
 80125b6:	b085      	sub	sp, #20
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	4603      	mov	r3, r0
 80125bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125be:	2300      	movs	r3, #0
 80125c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80125c2:	79fb      	ldrb	r3, [r7, #7]
 80125c4:	2b03      	cmp	r3, #3
 80125c6:	d817      	bhi.n	80125f8 <USBD_Get_USB_Status+0x44>
 80125c8:	a201      	add	r2, pc, #4	; (adr r2, 80125d0 <USBD_Get_USB_Status+0x1c>)
 80125ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ce:	bf00      	nop
 80125d0:	080125e1 	.word	0x080125e1
 80125d4:	080125e7 	.word	0x080125e7
 80125d8:	080125ed 	.word	0x080125ed
 80125dc:	080125f3 	.word	0x080125f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80125e0:	2300      	movs	r3, #0
 80125e2:	73fb      	strb	r3, [r7, #15]
    break;
 80125e4:	e00b      	b.n	80125fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80125e6:	2303      	movs	r3, #3
 80125e8:	73fb      	strb	r3, [r7, #15]
    break;
 80125ea:	e008      	b.n	80125fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80125ec:	2301      	movs	r3, #1
 80125ee:	73fb      	strb	r3, [r7, #15]
    break;
 80125f0:	e005      	b.n	80125fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80125f2:	2303      	movs	r3, #3
 80125f4:	73fb      	strb	r3, [r7, #15]
    break;
 80125f6:	e002      	b.n	80125fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80125f8:	2303      	movs	r3, #3
 80125fa:	73fb      	strb	r3, [r7, #15]
    break;
 80125fc:	bf00      	nop
  }
  return usb_status;
 80125fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012600:	4618      	mov	r0, r3
 8012602:	3714      	adds	r7, #20
 8012604:	46bd      	mov	sp, r7
 8012606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260a:	4770      	bx	lr

0801260c <__errno>:
 801260c:	4b01      	ldr	r3, [pc, #4]	; (8012614 <__errno+0x8>)
 801260e:	6818      	ldr	r0, [r3, #0]
 8012610:	4770      	bx	lr
 8012612:	bf00      	nop
 8012614:	24000168 	.word	0x24000168

08012618 <__libc_init_array>:
 8012618:	b570      	push	{r4, r5, r6, lr}
 801261a:	4e0d      	ldr	r6, [pc, #52]	; (8012650 <__libc_init_array+0x38>)
 801261c:	4c0d      	ldr	r4, [pc, #52]	; (8012654 <__libc_init_array+0x3c>)
 801261e:	1ba4      	subs	r4, r4, r6
 8012620:	10a4      	asrs	r4, r4, #2
 8012622:	2500      	movs	r5, #0
 8012624:	42a5      	cmp	r5, r4
 8012626:	d109      	bne.n	801263c <__libc_init_array+0x24>
 8012628:	4e0b      	ldr	r6, [pc, #44]	; (8012658 <__libc_init_array+0x40>)
 801262a:	4c0c      	ldr	r4, [pc, #48]	; (801265c <__libc_init_array+0x44>)
 801262c:	f000 f8f6 	bl	801281c <_init>
 8012630:	1ba4      	subs	r4, r4, r6
 8012632:	10a4      	asrs	r4, r4, #2
 8012634:	2500      	movs	r5, #0
 8012636:	42a5      	cmp	r5, r4
 8012638:	d105      	bne.n	8012646 <__libc_init_array+0x2e>
 801263a:	bd70      	pop	{r4, r5, r6, pc}
 801263c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012640:	4798      	blx	r3
 8012642:	3501      	adds	r5, #1
 8012644:	e7ee      	b.n	8012624 <__libc_init_array+0xc>
 8012646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801264a:	4798      	blx	r3
 801264c:	3501      	adds	r5, #1
 801264e:	e7f2      	b.n	8012636 <__libc_init_array+0x1e>
 8012650:	08012a40 	.word	0x08012a40
 8012654:	08012a40 	.word	0x08012a40
 8012658:	08012a40 	.word	0x08012a40
 801265c:	08012a44 	.word	0x08012a44

08012660 <malloc>:
 8012660:	4b02      	ldr	r3, [pc, #8]	; (801266c <malloc+0xc>)
 8012662:	4601      	mov	r1, r0
 8012664:	6818      	ldr	r0, [r3, #0]
 8012666:	f000 b86d 	b.w	8012744 <_malloc_r>
 801266a:	bf00      	nop
 801266c:	24000168 	.word	0x24000168

08012670 <free>:
 8012670:	4b02      	ldr	r3, [pc, #8]	; (801267c <free+0xc>)
 8012672:	4601      	mov	r1, r0
 8012674:	6818      	ldr	r0, [r3, #0]
 8012676:	f000 b817 	b.w	80126a8 <_free_r>
 801267a:	bf00      	nop
 801267c:	24000168 	.word	0x24000168

08012680 <memcpy>:
 8012680:	b510      	push	{r4, lr}
 8012682:	1e43      	subs	r3, r0, #1
 8012684:	440a      	add	r2, r1
 8012686:	4291      	cmp	r1, r2
 8012688:	d100      	bne.n	801268c <memcpy+0xc>
 801268a:	bd10      	pop	{r4, pc}
 801268c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012690:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012694:	e7f7      	b.n	8012686 <memcpy+0x6>

08012696 <memset>:
 8012696:	4402      	add	r2, r0
 8012698:	4603      	mov	r3, r0
 801269a:	4293      	cmp	r3, r2
 801269c:	d100      	bne.n	80126a0 <memset+0xa>
 801269e:	4770      	bx	lr
 80126a0:	f803 1b01 	strb.w	r1, [r3], #1
 80126a4:	e7f9      	b.n	801269a <memset+0x4>
	...

080126a8 <_free_r>:
 80126a8:	b538      	push	{r3, r4, r5, lr}
 80126aa:	4605      	mov	r5, r0
 80126ac:	2900      	cmp	r1, #0
 80126ae:	d045      	beq.n	801273c <_free_r+0x94>
 80126b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126b4:	1f0c      	subs	r4, r1, #4
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	bfb8      	it	lt
 80126ba:	18e4      	addlt	r4, r4, r3
 80126bc:	f000 f8ac 	bl	8012818 <__malloc_lock>
 80126c0:	4a1f      	ldr	r2, [pc, #124]	; (8012740 <_free_r+0x98>)
 80126c2:	6813      	ldr	r3, [r2, #0]
 80126c4:	4610      	mov	r0, r2
 80126c6:	b933      	cbnz	r3, 80126d6 <_free_r+0x2e>
 80126c8:	6063      	str	r3, [r4, #4]
 80126ca:	6014      	str	r4, [r2, #0]
 80126cc:	4628      	mov	r0, r5
 80126ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126d2:	f000 b8a2 	b.w	801281a <__malloc_unlock>
 80126d6:	42a3      	cmp	r3, r4
 80126d8:	d90c      	bls.n	80126f4 <_free_r+0x4c>
 80126da:	6821      	ldr	r1, [r4, #0]
 80126dc:	1862      	adds	r2, r4, r1
 80126de:	4293      	cmp	r3, r2
 80126e0:	bf04      	itt	eq
 80126e2:	681a      	ldreq	r2, [r3, #0]
 80126e4:	685b      	ldreq	r3, [r3, #4]
 80126e6:	6063      	str	r3, [r4, #4]
 80126e8:	bf04      	itt	eq
 80126ea:	1852      	addeq	r2, r2, r1
 80126ec:	6022      	streq	r2, [r4, #0]
 80126ee:	6004      	str	r4, [r0, #0]
 80126f0:	e7ec      	b.n	80126cc <_free_r+0x24>
 80126f2:	4613      	mov	r3, r2
 80126f4:	685a      	ldr	r2, [r3, #4]
 80126f6:	b10a      	cbz	r2, 80126fc <_free_r+0x54>
 80126f8:	42a2      	cmp	r2, r4
 80126fa:	d9fa      	bls.n	80126f2 <_free_r+0x4a>
 80126fc:	6819      	ldr	r1, [r3, #0]
 80126fe:	1858      	adds	r0, r3, r1
 8012700:	42a0      	cmp	r0, r4
 8012702:	d10b      	bne.n	801271c <_free_r+0x74>
 8012704:	6820      	ldr	r0, [r4, #0]
 8012706:	4401      	add	r1, r0
 8012708:	1858      	adds	r0, r3, r1
 801270a:	4282      	cmp	r2, r0
 801270c:	6019      	str	r1, [r3, #0]
 801270e:	d1dd      	bne.n	80126cc <_free_r+0x24>
 8012710:	6810      	ldr	r0, [r2, #0]
 8012712:	6852      	ldr	r2, [r2, #4]
 8012714:	605a      	str	r2, [r3, #4]
 8012716:	4401      	add	r1, r0
 8012718:	6019      	str	r1, [r3, #0]
 801271a:	e7d7      	b.n	80126cc <_free_r+0x24>
 801271c:	d902      	bls.n	8012724 <_free_r+0x7c>
 801271e:	230c      	movs	r3, #12
 8012720:	602b      	str	r3, [r5, #0]
 8012722:	e7d3      	b.n	80126cc <_free_r+0x24>
 8012724:	6820      	ldr	r0, [r4, #0]
 8012726:	1821      	adds	r1, r4, r0
 8012728:	428a      	cmp	r2, r1
 801272a:	bf04      	itt	eq
 801272c:	6811      	ldreq	r1, [r2, #0]
 801272e:	6852      	ldreq	r2, [r2, #4]
 8012730:	6062      	str	r2, [r4, #4]
 8012732:	bf04      	itt	eq
 8012734:	1809      	addeq	r1, r1, r0
 8012736:	6021      	streq	r1, [r4, #0]
 8012738:	605c      	str	r4, [r3, #4]
 801273a:	e7c7      	b.n	80126cc <_free_r+0x24>
 801273c:	bd38      	pop	{r3, r4, r5, pc}
 801273e:	bf00      	nop
 8012740:	24000228 	.word	0x24000228

08012744 <_malloc_r>:
 8012744:	b570      	push	{r4, r5, r6, lr}
 8012746:	1ccd      	adds	r5, r1, #3
 8012748:	f025 0503 	bic.w	r5, r5, #3
 801274c:	3508      	adds	r5, #8
 801274e:	2d0c      	cmp	r5, #12
 8012750:	bf38      	it	cc
 8012752:	250c      	movcc	r5, #12
 8012754:	2d00      	cmp	r5, #0
 8012756:	4606      	mov	r6, r0
 8012758:	db01      	blt.n	801275e <_malloc_r+0x1a>
 801275a:	42a9      	cmp	r1, r5
 801275c:	d903      	bls.n	8012766 <_malloc_r+0x22>
 801275e:	230c      	movs	r3, #12
 8012760:	6033      	str	r3, [r6, #0]
 8012762:	2000      	movs	r0, #0
 8012764:	bd70      	pop	{r4, r5, r6, pc}
 8012766:	f000 f857 	bl	8012818 <__malloc_lock>
 801276a:	4a21      	ldr	r2, [pc, #132]	; (80127f0 <_malloc_r+0xac>)
 801276c:	6814      	ldr	r4, [r2, #0]
 801276e:	4621      	mov	r1, r4
 8012770:	b991      	cbnz	r1, 8012798 <_malloc_r+0x54>
 8012772:	4c20      	ldr	r4, [pc, #128]	; (80127f4 <_malloc_r+0xb0>)
 8012774:	6823      	ldr	r3, [r4, #0]
 8012776:	b91b      	cbnz	r3, 8012780 <_malloc_r+0x3c>
 8012778:	4630      	mov	r0, r6
 801277a:	f000 f83d 	bl	80127f8 <_sbrk_r>
 801277e:	6020      	str	r0, [r4, #0]
 8012780:	4629      	mov	r1, r5
 8012782:	4630      	mov	r0, r6
 8012784:	f000 f838 	bl	80127f8 <_sbrk_r>
 8012788:	1c43      	adds	r3, r0, #1
 801278a:	d124      	bne.n	80127d6 <_malloc_r+0x92>
 801278c:	230c      	movs	r3, #12
 801278e:	6033      	str	r3, [r6, #0]
 8012790:	4630      	mov	r0, r6
 8012792:	f000 f842 	bl	801281a <__malloc_unlock>
 8012796:	e7e4      	b.n	8012762 <_malloc_r+0x1e>
 8012798:	680b      	ldr	r3, [r1, #0]
 801279a:	1b5b      	subs	r3, r3, r5
 801279c:	d418      	bmi.n	80127d0 <_malloc_r+0x8c>
 801279e:	2b0b      	cmp	r3, #11
 80127a0:	d90f      	bls.n	80127c2 <_malloc_r+0x7e>
 80127a2:	600b      	str	r3, [r1, #0]
 80127a4:	50cd      	str	r5, [r1, r3]
 80127a6:	18cc      	adds	r4, r1, r3
 80127a8:	4630      	mov	r0, r6
 80127aa:	f000 f836 	bl	801281a <__malloc_unlock>
 80127ae:	f104 000b 	add.w	r0, r4, #11
 80127b2:	1d23      	adds	r3, r4, #4
 80127b4:	f020 0007 	bic.w	r0, r0, #7
 80127b8:	1ac3      	subs	r3, r0, r3
 80127ba:	d0d3      	beq.n	8012764 <_malloc_r+0x20>
 80127bc:	425a      	negs	r2, r3
 80127be:	50e2      	str	r2, [r4, r3]
 80127c0:	e7d0      	b.n	8012764 <_malloc_r+0x20>
 80127c2:	428c      	cmp	r4, r1
 80127c4:	684b      	ldr	r3, [r1, #4]
 80127c6:	bf16      	itet	ne
 80127c8:	6063      	strne	r3, [r4, #4]
 80127ca:	6013      	streq	r3, [r2, #0]
 80127cc:	460c      	movne	r4, r1
 80127ce:	e7eb      	b.n	80127a8 <_malloc_r+0x64>
 80127d0:	460c      	mov	r4, r1
 80127d2:	6849      	ldr	r1, [r1, #4]
 80127d4:	e7cc      	b.n	8012770 <_malloc_r+0x2c>
 80127d6:	1cc4      	adds	r4, r0, #3
 80127d8:	f024 0403 	bic.w	r4, r4, #3
 80127dc:	42a0      	cmp	r0, r4
 80127de:	d005      	beq.n	80127ec <_malloc_r+0xa8>
 80127e0:	1a21      	subs	r1, r4, r0
 80127e2:	4630      	mov	r0, r6
 80127e4:	f000 f808 	bl	80127f8 <_sbrk_r>
 80127e8:	3001      	adds	r0, #1
 80127ea:	d0cf      	beq.n	801278c <_malloc_r+0x48>
 80127ec:	6025      	str	r5, [r4, #0]
 80127ee:	e7db      	b.n	80127a8 <_malloc_r+0x64>
 80127f0:	24000228 	.word	0x24000228
 80127f4:	2400022c 	.word	0x2400022c

080127f8 <_sbrk_r>:
 80127f8:	b538      	push	{r3, r4, r5, lr}
 80127fa:	4c06      	ldr	r4, [pc, #24]	; (8012814 <_sbrk_r+0x1c>)
 80127fc:	2300      	movs	r3, #0
 80127fe:	4605      	mov	r5, r0
 8012800:	4608      	mov	r0, r1
 8012802:	6023      	str	r3, [r4, #0]
 8012804:	f7ee fd56 	bl	80012b4 <_sbrk>
 8012808:	1c43      	adds	r3, r0, #1
 801280a:	d102      	bne.n	8012812 <_sbrk_r+0x1a>
 801280c:	6823      	ldr	r3, [r4, #0]
 801280e:	b103      	cbz	r3, 8012812 <_sbrk_r+0x1a>
 8012810:	602b      	str	r3, [r5, #0]
 8012812:	bd38      	pop	{r3, r4, r5, pc}
 8012814:	240017b0 	.word	0x240017b0

08012818 <__malloc_lock>:
 8012818:	4770      	bx	lr

0801281a <__malloc_unlock>:
 801281a:	4770      	bx	lr

0801281c <_init>:
 801281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801281e:	bf00      	nop
 8012820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012822:	bc08      	pop	{r3}
 8012824:	469e      	mov	lr, r3
 8012826:	4770      	bx	lr

08012828 <_fini>:
 8012828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801282a:	bf00      	nop
 801282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801282e:	bc08      	pop	{r3}
 8012830:	469e      	mov	lr, r3
 8012832:	4770      	bx	lr

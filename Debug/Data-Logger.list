
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08013340  08013340  00023340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013550  08013550  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08013550  08013550  00023550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013558  08013558  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013558  08013558  00023558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801355c  0801355c  0002355c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08013560  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e8  240001cc  0801372c  000301cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240017b4  0801372c  000317b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b223  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000625b  00000000  00000000  0006b41d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ed0  00000000  00000000  00071678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c60  00000000  00000000  00073548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ef69  00000000  00000000  000751a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020735  00000000  00000000  000b4111  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016f4b1  00000000  00000000  000d4846  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00243cf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008518  00000000  00000000  00243d74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001cc 	.word	0x240001cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013328 	.word	0x08013328

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d0 	.word	0x240001d0
 80002dc:	08013328 	.word	0x08013328

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	f5ad 4da1 	sub.w	sp, sp, #20608	; 0x5080
 8000696:	b09a      	sub	sp, #104	; 0x68
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 ffe9 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f8c7 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 fbb3 	bl	8000e0c <MX_GPIO_Init>
  MX_DMA_Init();
 80006a6:	f000 fb91 	bl	8000dcc <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80006aa:	f000 fa7f 	bl	8000bac <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80006ae:	f00c faf3 	bl	800cc98 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80006b2:	f011 fcf1 	bl	8012098 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80006b6:	f000 f9b1 	bl	8000a1c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006ba:	f000 fa13 	bl	8000ae4 <MX_FDCAN2_Init>
  MX_UART8_Init();
 80006be:	f000 faed 	bl	8000c9c <MX_UART8_Init>
  MX_USART3_UART_Init();
 80006c2:	f000 fb37 	bl	8000d34 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80006c6:	f000 fa93 	bl	8000bf0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 80006ca:	2201      	movs	r2, #1
 80006cc:	494f      	ldr	r1, [pc, #316]	; (800080c <main+0x17c>)
 80006ce:	4850      	ldr	r0, [pc, #320]	; (8000810 <main+0x180>)
 80006d0:	f011 f864 	bl	801179c <f_mount>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f040 808f 	bne.w	80007fa <main+0x16a>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "test50.csv\0";
 80006dc:	4a4d      	ldr	r2, [pc, #308]	; (8000814 <main+0x184>)
 80006de:	f245 03c8 	movw	r3, #20680	; 0x50c8
 80006e2:	443b      	add	r3, r7
 80006e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 80006ea:	f245 03c8 	movw	r3, #20680	; 0x50c8
 80006ee:	443b      	add	r3, r7
 80006f0:	220a      	movs	r2, #10
 80006f2:	4619      	mov	r1, r3
 80006f4:	4848      	ldr	r0, [pc, #288]	; (8000818 <main+0x188>)
 80006f6:	f011 f897 	bl	8011828 <f_open>
  	  char myData[20480];
  	  for(int i = 0; i<20480; i++){
 80006fa:	2300      	movs	r3, #0
 80006fc:	f245 02e4 	movw	r2, #20708	; 0x50e4
 8000700:	443a      	add	r2, r7
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	e014      	b.n	8000730 <main+0xa0>
  		myData[i] = 'A';
 8000706:	4b45      	ldr	r3, [pc, #276]	; (800081c <main+0x18c>)
 8000708:	f245 02e8 	movw	r2, #20712	; 0x50e8
 800070c:	443a      	add	r2, r7
 800070e:	4413      	add	r3, r2
 8000710:	f245 02e4 	movw	r2, #20708	; 0x50e4
 8000714:	443a      	add	r2, r7
 8000716:	6812      	ldr	r2, [r2, #0]
 8000718:	4413      	add	r3, r2
 800071a:	2241      	movs	r2, #65	; 0x41
 800071c:	701a      	strb	r2, [r3, #0]
  	  for(int i = 0; i<20480; i++){
 800071e:	f245 03e4 	movw	r3, #20708	; 0x50e4
 8000722:	443b      	add	r3, r7
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	f245 02e4 	movw	r2, #20708	; 0x50e4
 800072c:	443a      	add	r2, r7
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	f245 03e4 	movw	r3, #20708	; 0x50e4
 8000734:	443b      	add	r3, r7
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800073c:	dbe3      	blt.n	8000706 <main+0x76>
  	  }
  	 int start = HAL_GetTick();
 800073e:	f001 f81d 	bl	800177c <HAL_GetTick>
 8000742:	4603      	mov	r3, r0
 8000744:	f245 02dc 	movw	r2, #20700	; 0x50dc
 8000748:	443a      	add	r2, r7
 800074a:	6013      	str	r3, [r2, #0]
  	for(int i = 0; i<12800; i++){
 800074c:	2300      	movs	r3, #0
 800074e:	f245 02e0 	movw	r2, #20704	; 0x50e0
 8000752:	443a      	add	r2, r7
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	e013      	b.n	8000780 <main+0xf0>
  		f_write(&myFILE, myData, sizeof(myData), &testByte);
 8000758:	4930      	ldr	r1, [pc, #192]	; (800081c <main+0x18c>)
 800075a:	f245 03e8 	movw	r3, #20712	; 0x50e8
 800075e:	443b      	add	r3, r7
 8000760:	4419      	add	r1, r3
 8000762:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <main+0x190>)
 8000764:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000768:	482b      	ldr	r0, [pc, #172]	; (8000818 <main+0x188>)
 800076a:	f011 fa1b 	bl	8011ba4 <f_write>
  	for(int i = 0; i<12800; i++){
 800076e:	f245 03e0 	movw	r3, #20704	; 0x50e0
 8000772:	443b      	add	r3, r7
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3301      	adds	r3, #1
 8000778:	f245 02e0 	movw	r2, #20704	; 0x50e0
 800077c:	443a      	add	r2, r7
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	f245 03e0 	movw	r3, #20704	; 0x50e0
 8000784:	443b      	add	r3, r7
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 800078c:	dbe4      	blt.n	8000758 <main+0xc8>
  	  	  }
  	int end = HAL_GetTick();
 800078e:	f000 fff5 	bl	800177c <HAL_GetTick>
 8000792:	4603      	mov	r3, r0
 8000794:	f245 02d8 	movw	r2, #20696	; 0x50d8
 8000798:	443a      	add	r2, r7
 800079a:	6013      	str	r3, [r2, #0]
  	int duration = end - start;
 800079c:	f245 03d8 	movw	r3, #20696	; 0x50d8
 80007a0:	443b      	add	r3, r7
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	f245 03dc 	movw	r3, #20700	; 0x50dc
 80007a8:	443b      	add	r3, r7
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	f245 02d4 	movw	r2, #20692	; 0x50d4
 80007b2:	443a      	add	r2, r7
 80007b4:	6013      	str	r3, [r2, #0]
  	char myTime[200];
  	sprintf(myTime, "\r%i", duration);
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <main+0x194>)
 80007b8:	f245 02e8 	movw	r2, #20712	; 0x50e8
 80007bc:	443a      	add	r2, r7
 80007be:	4413      	add	r3, r2
 80007c0:	f245 02d4 	movw	r2, #20692	; 0x50d4
 80007c4:	443a      	add	r2, r7
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	4917      	ldr	r1, [pc, #92]	; (8000828 <main+0x198>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f012 fa68 	bl	8012ca0 <siprintf>
  	f_write(&myFILE, myTime, strlen(myTime), &testByte);
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <main+0x194>)
 80007d2:	f245 02e8 	movw	r2, #20712	; 0x50e8
 80007d6:	443a      	add	r2, r7
 80007d8:	4413      	add	r3, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fd80 	bl	80002e0 <strlen>
 80007e0:	4602      	mov	r2, r0
 80007e2:	4910      	ldr	r1, [pc, #64]	; (8000824 <main+0x194>)
 80007e4:	f245 03e8 	movw	r3, #20712	; 0x50e8
 80007e8:	443b      	add	r3, r7
 80007ea:	4419      	add	r1, r3
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <main+0x190>)
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <main+0x188>)
 80007f0:	f011 f9d8 	bl	8011ba4 <f_write>
  	  f_close(&myFILE);
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <main+0x188>)
 80007f6:	f011 fbc8 	bl	8011f8a <f_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007fa:	2101      	movs	r1, #1
 80007fc:	480b      	ldr	r0, [pc, #44]	; (800082c <main+0x19c>)
 80007fe:	f003 fafa 	bl	8003df6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000806:	f000 ffc5 	bl	8001794 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800080a:	e7f6      	b.n	80007fa <main+0x16a>
 800080c:	24000a74 	.word	0x24000a74
 8000810:	24000798 	.word	0x24000798
 8000814:	08013344 	.word	0x08013344
 8000818:	24000334 	.word	0x24000334
 800081c:	ffffafe0 	.word	0xffffafe0
 8000820:	24000a68 	.word	0x24000a68
 8000824:	ffffaf18 	.word	0xffffaf18
 8000828:	08013340 	.word	0x08013340
 800082c:	58020400 	.word	0x58020400

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b0cc      	sub	sp, #304	; 0x130
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800083a:	224c      	movs	r2, #76	; 0x4c
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f012 f96d 	bl	8012b1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000848:	2220      	movs	r2, #32
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f012 f966 	bl	8012b1e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	4618      	mov	r0, r3
 8000858:	23bc      	movs	r3, #188	; 0xbc
 800085a:	461a      	mov	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f012 f95e 	bl	8012b1e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000862:	2002      	movs	r0, #2
 8000864:	f004 fcea 	bl	800523c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	4b67      	ldr	r3, [pc, #412]	; (8000a0c <SystemClock_Config+0x1dc>)
 8000870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000872:	4a66      	ldr	r2, [pc, #408]	; (8000a0c <SystemClock_Config+0x1dc>)
 8000874:	f023 0301 	bic.w	r3, r3, #1
 8000878:	62d3      	str	r3, [r2, #44]	; 0x2c
 800087a:	4b64      	ldr	r3, [pc, #400]	; (8000a0c <SystemClock_Config+0x1dc>)
 800087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087e:	f003 0201 	and.w	r2, r3, #1
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	4b62      	ldr	r3, [pc, #392]	; (8000a10 <SystemClock_Config+0x1e0>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800088e:	4a60      	ldr	r2, [pc, #384]	; (8000a10 <SystemClock_Config+0x1e0>)
 8000890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b5e      	ldr	r3, [pc, #376]	; (8000a10 <SystemClock_Config+0x1e0>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a6:	bf00      	nop
 80008a8:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <SystemClock_Config+0x1e0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b4:	d1f8      	bne.n	80008a8 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008b6:	4b57      	ldr	r3, [pc, #348]	; (8000a14 <SystemClock_Config+0x1e4>)
 80008b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ba:	f023 0303 	bic.w	r3, r3, #3
 80008be:	4a55      	ldr	r2, [pc, #340]	; (8000a14 <SystemClock_Config+0x1e4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008c6:	2321      	movs	r3, #33	; 0x21
 80008c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008d4:	2301      	movs	r3, #1
 80008d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e0:	2302      	movs	r3, #2
 80008e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 38;
 80008ec:	2326      	movs	r3, #38	; 0x26
 80008ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 84;
 80008f8:	2354      	movs	r3, #84	; 0x54
 80008fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000904:	230c      	movs	r3, #12
 8000906:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800090a:	2300      	movs	r3, #0
 800090c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000916:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800091a:	4618      	mov	r0, r3
 800091c:	f004 fcd8 	bl	80052d0 <HAL_RCC_OscConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000926:	f000 fb5b 	bl	8000fe0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	233f      	movs	r3, #63	; 0x3f
 800092c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2303      	movs	r3, #3
 8000932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800093c:	2308      	movs	r3, #8
 800093e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800095a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800095e:	2101      	movs	r1, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f005 f8c5 	bl	8005af0 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x140>
  {
    Error_Handler();
 800096c:	f000 fb38 	bl	8000fe0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4a28      	ldr	r2, [pc, #160]	; (8000a18 <SystemClock_Config+0x1e8>)
 8000976:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2202      	movs	r2, #2
 800097e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	220c      	movs	r2, #12
 8000986:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2202      	movs	r2, #2
 800098e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	2202      	movs	r2, #2
 8000996:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	2203      	movs	r2, #3
 800099e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	22c0      	movs	r2, #192	; 0xc0
 80009a6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	2220      	movs	r2, #32
 80009ae:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009c0:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2200      	movs	r2, #0
 80009c8:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	2200      	movs	r2, #0
 80009d0:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2200      	movs	r2, #0
 80009d8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80009e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 fc30 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x1ca>
  {
    Error_Handler();
 80009f6:	f000 faf3 	bl	8000fe0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80009fa:	f005 fa2f 	bl	8005e5c <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80009fe:	f004 fc57 	bl	80052b0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000a02:	bf00      	nop
 8000a04:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	58000400 	.word	0x58000400
 8000a10:	58024800 	.word	0x58024800
 8000a14:	58024400 	.word	0x58024400
 8000a18:	00059002 	.word	0x00059002

08000a1c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a20:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a22:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <MX_FDCAN1_Init+0xc4>)
 8000a24:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a32:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a3e:	4b27      	ldr	r3, [pc, #156]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_FDCAN1_Init+0xc0>)
 8000aca:	f002 fc63 	bl	8003394 <HAL_FDCAN_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ad4:	f000 fa84 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	240005e4 	.word	0x240005e4
 8000ae0:	4000a000 	.word	0x4000a000

08000ae4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000aea:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <MX_FDCAN2_Init+0xc4>)
 8000aec:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b56:	2204      	movs	r2, #4
 8000b58:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b62:	2204      	movs	r2, #4
 8000b64:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b6e:	2204      	movs	r2, #4
 8000b70:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_FDCAN2_Init+0xc0>)
 8000b92:	f002 fbff 	bl	8003394 <HAL_FDCAN_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000b9c:	f000 fa20 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	240009c8 	.word	0x240009c8
 8000ba8:	4000a400 	.word	0x4000a400

08000bac <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <MX_SDMMC1_SD_Init+0x40>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bd0:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <MX_SDMMC1_SD_Init+0x3c>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	24000564 	.word	0x24000564
 8000bec:	52007000 	.word	0x52007000

08000bf0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bf4:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000bf6:	4a28      	ldr	r2, [pc, #160]	; (8000c98 <MX_SPI1_Init+0xa8>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000bfc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c0a:	2207      	movs	r2, #7
 8000c0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_SPI1_Init+0xa4>)
 8000c80:	f008 fd66 	bl	8009750 <HAL_SPI_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000c8a:	f000 f9a9 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	24000710 	.word	0x24000710
 8000c98:	40013000 	.word	0x40013000

08000c9c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_UART8_Init+0x90>)
 8000ca2:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <MX_UART8_Init+0x94>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <MX_UART8_Init+0x90>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_UART8_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_UART8_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_UART8_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_UART8_Init+0x90>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_UART8_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_UART8_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_UART8_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_UART8_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_UART8_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <MX_UART8_Init+0x90>)
 8000ce6:	f008 fe46 	bl	8009976 <HAL_UART_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000cf0:	f000 f976 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_UART8_Init+0x90>)
 8000cf8:	f009 fde1 	bl	800a8be <HAL_UARTEx_SetTxFifoThreshold>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000d02:	f000 f96d 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <MX_UART8_Init+0x90>)
 8000d0a:	f009 fe16 	bl	800a93a <HAL_UARTEx_SetRxFifoThreshold>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000d14:	f000 f964 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_UART8_Init+0x90>)
 8000d1a:	f009 fd97 	bl	800a84c <HAL_UARTEx_DisableFifoMode>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000d24:	f000 f95c 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24000684 	.word	0x24000684
 8000d30:	40007c00 	.word	0x40007c00

08000d34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d3a:	4a23      	ldr	r2, [pc, #140]	; (8000dc8 <MX_USART3_UART_Init+0x94>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d40:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d7c:	4811      	ldr	r0, [pc, #68]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d7e:	f008 fdfa 	bl	8009976 <HAL_UART_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d88:	f000 f92a 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000d90:	f009 fd95 	bl	800a8be <HAL_UARTEx_SetTxFifoThreshold>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d9a:	f000 f921 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000da2:	f009 fdca 	bl	800a93a <HAL_UARTEx_SetRxFifoThreshold>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dac:	f000 f918 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_USART3_UART_Init+0x90>)
 8000db2:	f009 fd4b 	bl	800a84c <HAL_UARTEx_DisableFifoMode>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dbc:	f000 f910 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	240002a8 	.word	0x240002a8
 8000dc8:	40004800 	.word	0x40004800

08000dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <MX_DMA_Init+0x3c>)
 8000dd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <MX_DMA_Init+0x3c>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_DMA_Init+0x3c>)
 8000de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	200b      	movs	r0, #11
 8000df6:	f000 fdd6 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dfa:	200b      	movs	r0, #11
 8000dfc:	f000 fded 	bl	80019da <HAL_NVIC_EnableIRQ>

}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	58024400 	.word	0x58024400

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	; 0x30
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e22:	4b69      	ldr	r3, [pc, #420]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	4a67      	ldr	r2, [pc, #412]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e32:	4b65      	ldr	r3, [pc, #404]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e40:	4b61      	ldr	r3, [pc, #388]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	4a60      	ldr	r2, [pc, #384]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e50:	4b5d      	ldr	r3, [pc, #372]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	4b5a      	ldr	r3, [pc, #360]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	4a58      	ldr	r2, [pc, #352]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6e:	4b56      	ldr	r3, [pc, #344]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	4a51      	ldr	r2, [pc, #324]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8c:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	4a49      	ldr	r2, [pc, #292]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eaa:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb8:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	4a42      	ldr	r2, [pc, #264]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec8:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	210c      	movs	r1, #12
 8000eda:	483c      	ldr	r0, [pc, #240]	; (8000fcc <MX_GPIO_Init+0x1c0>)
 8000edc:	f002 ff72 	bl	8003dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	483a      	ldr	r0, [pc, #232]	; (8000fd0 <MX_GPIO_Init+0x1c4>)
 8000ee6:	f002 ff6d 	bl	8003dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2101      	movs	r1, #1
 8000eee:	4839      	ldr	r0, [pc, #228]	; (8000fd4 <MX_GPIO_Init+0x1c8>)
 8000ef0:	f002 ff68 	bl	8003dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efa:	4837      	ldr	r0, [pc, #220]	; (8000fd8 <MX_GPIO_Init+0x1cc>)
 8000efc:	f002 ff62 	bl	8003dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000f00:	230c      	movs	r3, #12
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	482d      	ldr	r0, [pc, #180]	; (8000fcc <MX_GPIO_Init+0x1c0>)
 8000f18:	f002 fda4 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	4827      	ldr	r0, [pc, #156]	; (8000fd0 <MX_GPIO_Init+0x1c4>)
 8000f34:	f002 fd96 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <MX_GPIO_Init+0x1d0>)
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4821      	ldr	r0, [pc, #132]	; (8000fd0 <MX_GPIO_Init+0x1c4>)
 8000f4c:	f002 fd8a 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f50:	2301      	movs	r3, #1
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <MX_GPIO_Init+0x1c8>)
 8000f68:	f002 fd7c 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_GPIO_Init+0x1d0>)
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4812      	ldr	r0, [pc, #72]	; (8000fcc <MX_GPIO_Init+0x1c0>)
 8000f82:	f002 fd6f 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <MX_GPIO_Init+0x1cc>)
 8000fa0:	f002 fd60 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8000fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_GPIO_Init+0x1c4>)
 8000fba:	f002 fd53 	bl	8003a64 <HAL_GPIO_Init>

}
 8000fbe:	bf00      	nop
 8000fc0:	3730      	adds	r7, #48	; 0x30
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58021000 	.word	0x58021000
 8000fd0:	58020000 	.word	0x58020000
 8000fd4:	58020400 	.word	0x58020400
 8000fd8:	58020c00 	.word	0x58020c00
 8000fdc:	11110000 	.word	0x11110000

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <Error_Handler+0x6>

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_MspInit+0x30>)
 8000ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x30>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x30>)
 8001000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	58024400 	.word	0x58024400

0800101c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a3d      	ldr	r2, [pc, #244]	; (8001130 <HAL_FDCAN_MspInit+0x114>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d138      	bne.n	80010b0 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <HAL_FDCAN_MspInit+0x118>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a3b      	ldr	r2, [pc, #236]	; (8001134 <HAL_FDCAN_MspInit+0x118>)
 8001046:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001048:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <HAL_FDCAN_MspInit+0x118>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d10e      	bne.n	800106e <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001050:	4b39      	ldr	r3, [pc, #228]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 8001052:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001056:	4a38      	ldr	r2, [pc, #224]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001060:	4b35      	ldr	r3, [pc, #212]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 8001062:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	4a30      	ldr	r2, [pc, #192]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800108c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800109e:	2309      	movs	r3, #9
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	4824      	ldr	r0, [pc, #144]	; (800113c <HAL_FDCAN_MspInit+0x120>)
 80010aa:	f002 fcdb 	bl	8003a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80010ae:	e03b      	b.n	8001128 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <HAL_FDCAN_MspInit+0x124>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d136      	bne.n	8001128 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_FDCAN_MspInit+0x118>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_FDCAN_MspInit+0x118>)
 80010c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_FDCAN_MspInit+0x118>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10e      	bne.n	80010ea <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 80010ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010d2:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 80010de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	4a11      	ldr	r2, [pc, #68]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_FDCAN_MspInit+0x11c>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001108:	2360      	movs	r3, #96	; 0x60
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001118:	2309      	movs	r3, #9
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <HAL_FDCAN_MspInit+0x120>)
 8001124:	f002 fc9e 	bl	8003a64 <HAL_GPIO_Init>
}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	; 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	4000a000 	.word	0x4000a000
 8001134:	240001e8 	.word	0x240001e8
 8001138:	58024400 	.word	0x58024400
 800113c:	58020400 	.word	0x58020400
 8001140:	4000a400 	.word	0x4000a400

08001144 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a2a      	ldr	r2, [pc, #168]	; (800120c <HAL_SD_MspInit+0xc8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d14d      	bne.n	8001202 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <HAL_SD_MspInit+0xcc>)
 8001168:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800116c:	4a28      	ldr	r2, [pc, #160]	; (8001210 <HAL_SD_MspInit+0xcc>)
 800116e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001172:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_SD_MspInit+0xcc>)
 8001178:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_SD_MspInit+0xcc>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118a:	4a21      	ldr	r2, [pc, #132]	; (8001210 <HAL_SD_MspInit+0xcc>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_SD_MspInit+0xcc>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_SD_MspInit+0xcc>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_SD_MspInit+0xcc>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_SD_MspInit+0xcc>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011c0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011c4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011d2:	230c      	movs	r3, #12
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <HAL_SD_MspInit+0xd0>)
 80011de:	f002 fc41 	bl	8003a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011e2:	2304      	movs	r3, #4
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011f2:	230c      	movs	r3, #12
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <HAL_SD_MspInit+0xd4>)
 80011fe:	f002 fc31 	bl	8003a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	52007000 	.word	0x52007000
 8001210:	58024400 	.word	0x58024400
 8001214:	58020800 	.word	0x58020800
 8001218:	58020c00 	.word	0x58020c00

0800121c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <HAL_SPI_MspInit+0x88>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12d      	bne.n	800129a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_SPI_MspInit+0x8c>)
 8001240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001244:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <HAL_SPI_MspInit+0x8c>)
 8001246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800124a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_SPI_MspInit+0x8c>)
 8001250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_SPI_MspInit+0x8c>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_SPI_MspInit+0x8c>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_SPI_MspInit+0x8c>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800127a:	23e0      	movs	r3, #224	; 0xe0
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128a:	2305      	movs	r3, #5
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_SPI_MspInit+0x90>)
 8001296:	f002 fbe5 	bl	8003a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40013000 	.word	0x40013000
 80012a8:	58024400 	.word	0x58024400
 80012ac:	58020000 	.word	0x58020000

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <HAL_UART_MspInit+0x14c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d12e      	bne.n	8001330 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80012d2:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_UART_MspInit+0x150>)
 80012d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d8:	4a49      	ldr	r2, [pc, #292]	; (8001400 <HAL_UART_MspInit+0x150>)
 80012da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012e2:	4b47      	ldr	r3, [pc, #284]	; (8001400 <HAL_UART_MspInit+0x150>)
 80012e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80012ec:	61bb      	str	r3, [r7, #24]
 80012ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <HAL_UART_MspInit+0x150>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	4a42      	ldr	r2, [pc, #264]	; (8001400 <HAL_UART_MspInit+0x150>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001300:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <HAL_UART_MspInit+0x150>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800130e:	2303      	movs	r3, #3
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800131e:	2308      	movs	r3, #8
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4836      	ldr	r0, [pc, #216]	; (8001404 <HAL_UART_MspInit+0x154>)
 800132a:	f002 fb9b 	bl	8003a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800132e:	e061      	b.n	80013f4 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a34      	ldr	r2, [pc, #208]	; (8001408 <HAL_UART_MspInit+0x158>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d15c      	bne.n	80013f4 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 800133a:	4b31      	ldr	r3, [pc, #196]	; (8001400 <HAL_UART_MspInit+0x150>)
 800133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001340:	4a2f      	ldr	r2, [pc, #188]	; (8001400 <HAL_UART_MspInit+0x150>)
 8001342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001346:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_UART_MspInit+0x150>)
 800134c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_UART_MspInit+0x150>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	4a28      	ldr	r2, [pc, #160]	; (8001400 <HAL_UART_MspInit+0x150>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_UART_MspInit+0x150>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001376:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001388:	2307      	movs	r3, #7
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	481e      	ldr	r0, [pc, #120]	; (800140c <HAL_UART_MspInit+0x15c>)
 8001394:	f002 fb66 	bl	8003a64 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_UART_MspInit+0x160>)
 800139a:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <HAL_UART_MspInit+0x164>)
 800139c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013a0:	222d      	movs	r2, #45	; 0x2d
 80013a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013da:	f000 fb19 	bl	8001a10 <HAL_DMA_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_UART_MspInit+0x138>
      Error_Handler();
 80013e4:	f7ff fdfc 	bl	8000fe0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013ec:	679a      	str	r2, [r3, #120]	; 0x78
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_UART_MspInit+0x160>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40007c00 	.word	0x40007c00
 8001400:	58024400 	.word	0x58024400
 8001404:	58021000 	.word	0x58021000
 8001408:	40004800 	.word	0x40004800
 800140c:	58020c00 	.word	0x58020c00
 8001410:	24000230 	.word	0x24000230
 8001414:	40020010 	.word	0x40020010

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800141c:	f004 fefc 	bl	8006218 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x8>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 f974 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA1_Stream0_IRQHandler+0x10>)
 8001476:	f000 fe27 	bl	80020c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	24000230 	.word	0x24000230

08001484 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <OTG_FS_IRQHandler+0x10>)
 800148a:	f002 fe26 	bl	80040da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	240013a8 	.word	0x240013a8

08001498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <_sbrk+0x5c>)
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <_sbrk+0x60>)
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <_sbrk+0x64>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <_sbrk+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d207      	bcs.n	80014d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c8:	f011 fae4 	bl	8012a94 <__errno>
 80014cc:	4602      	mov	r2, r0
 80014ce:	230c      	movs	r3, #12
 80014d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	e009      	b.n	80014ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <_sbrk+0x64>)
 80014e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	24080000 	.word	0x24080000
 80014f8:	00000400 	.word	0x00000400
 80014fc:	240001ec 	.word	0x240001ec
 8001500:	240017b8 	.word	0x240017b8

08001504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <SystemInit+0xec>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150e:	4a38      	ldr	r2, [pc, #224]	; (80015f0 <SystemInit+0xec>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001518:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <SystemInit+0xf0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	2b06      	cmp	r3, #6
 8001522:	d807      	bhi.n	8001534 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001524:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <SystemInit+0xf0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 030f 	bic.w	r3, r3, #15
 800152c:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <SystemInit+0xf0>)
 800152e:	f043 0307 	orr.w	r3, r3, #7
 8001532:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001534:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <SystemInit+0xf4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2f      	ldr	r2, [pc, #188]	; (80015f8 <SystemInit+0xf4>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <SystemInit+0xf4>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001546:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <SystemInit+0xf4>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	492b      	ldr	r1, [pc, #172]	; (80015f8 <SystemInit+0xf4>)
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <SystemInit+0xf8>)
 800154e:	4013      	ands	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001552:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <SystemInit+0xf0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	2b07      	cmp	r3, #7
 800155c:	d907      	bls.n	800156e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800155e:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <SystemInit+0xf0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 030f 	bic.w	r3, r3, #15
 8001566:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <SystemInit+0xf0>)
 8001568:	f043 0307 	orr.w	r3, r3, #7
 800156c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <SystemInit+0xf4>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <SystemInit+0xf4>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <SystemInit+0xf4>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <SystemInit+0xf4>)
 8001582:	4a1f      	ldr	r2, [pc, #124]	; (8001600 <SystemInit+0xfc>)
 8001584:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <SystemInit+0xf4>)
 8001588:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <SystemInit+0x100>)
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <SystemInit+0xf4>)
 800158e:	4a1e      	ldr	r2, [pc, #120]	; (8001608 <SystemInit+0x104>)
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <SystemInit+0xf4>)
 8001594:	2200      	movs	r2, #0
 8001596:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <SystemInit+0xf4>)
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <SystemInit+0x104>)
 800159c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <SystemInit+0xf4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <SystemInit+0xf4>)
 80015a6:	4a18      	ldr	r2, [pc, #96]	; (8001608 <SystemInit+0x104>)
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <SystemInit+0xf4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <SystemInit+0xf4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <SystemInit+0xf4>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <SystemInit+0xf4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <SystemInit+0x108>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <SystemInit+0x10c>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015ce:	d202      	bcs.n	80015d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <SystemInit+0x110>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <SystemInit+0x114>)
 80015d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015dc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <SystemInit+0xec>)
 80015e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015e4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00
 80015f4:	52002000 	.word	0x52002000
 80015f8:	58024400 	.word	0x58024400
 80015fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001600:	02020200 	.word	0x02020200
 8001604:	01ff0000 	.word	0x01ff0000
 8001608:	01010280 	.word	0x01010280
 800160c:	5c001000 	.word	0x5c001000
 8001610:	ffff0000 	.word	0xffff0000
 8001614:	51008108 	.word	0x51008108
 8001618:	52004000 	.word	0x52004000

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001620:	f7ff ff70 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001624:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001626:	e003      	b.n	8001630 <LoopCopyDataInit>

08001628 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800162a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800162c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800162e:	3104      	adds	r1, #4

08001630 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001630:	480a      	ldr	r0, [pc, #40]	; (800165c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001634:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001636:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001638:	d3f6      	bcc.n	8001628 <CopyDataInit>
  ldr  r2, =_sbss
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800163c:	e002      	b.n	8001644 <LoopFillZerobss>

0800163e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800163e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001640:	f842 3b04 	str.w	r3, [r2], #4

08001644 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001646:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001648:	d3f9      	bcc.n	800163e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164a:	f011 fa29 	bl	8012aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7ff f81f 	bl	8000690 <main>
  bx  lr    
 8001652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001658:	08013560 	.word	0x08013560
  ldr  r0, =_sdata
 800165c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001660:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 8001664:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 8001668:	240017b4 	.word	0x240017b4

0800166c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC3_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001676:	2003      	movs	r0, #3
 8001678:	f000 f98a 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800167c:	f004 fbfe 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 8001680:	4601      	mov	r1, r0
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_Init+0x68>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	4a13      	ldr	r2, [pc, #76]	; (80016dc <HAL_Init+0x6c>)
 800168e:	5cd3      	ldrb	r3, [r2, r3]
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	fa21 f303 	lsr.w	r3, r1, r3
 8001698:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_Init+0x68>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_Init+0x6c>)
 80016a4:	5cd3      	ldrb	r3, [r2, r3]
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
 80016b0:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <HAL_Init+0x70>)
 80016b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016b4:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <HAL_Init+0x74>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ba:	2000      	movs	r0, #0
 80016bc:	f000 f814 	bl	80016e8 <HAL_InitTick>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e002      	b.n	80016d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ca:	f7ff fc8d 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	58024400 	.word	0x58024400
 80016dc:	08013434 	.word	0x08013434
 80016e0:	24000004 	.word	0x24000004
 80016e4:	24000000 	.word	0x24000000

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_InitTick+0x60>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e021      	b.n	8001740 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_InitTick+0x64>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_InitTick+0x60>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f96f 	bl	80019f6 <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f939 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x68>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2400000c 	.word	0x2400000c
 800174c:	24000000 	.word	0x24000000
 8001750:	24000008 	.word	0x24000008

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2400000c 	.word	0x2400000c
 8001778:	24000a6c 	.word	0x24000a6c

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	24000a6c 	.word	0x24000a6c

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_Delay+0x40>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2400000c 	.word	0x2400000c

080017d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetREVID+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0c1b      	lsrs	r3, r3, #16
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	5c001000 	.word	0x5c001000

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <__NVIC_SetPriorityGrouping+0x40>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	4313      	orrs	r3, r2
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x40>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	05fa0000 	.word	0x05fa0000

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff8e 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff29 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff40 	bl	8001838 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff90 	bl	80018e4 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5f 	bl	8001890 <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff33 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa4 	bl	800194c <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff feb0 	bl	800177c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e316      	b.n	8002056 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a66      	ldr	r2, [pc, #408]	; (8001bc8 <HAL_DMA_Init+0x1b8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d04a      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_DMA_Init+0x1bc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d045      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a63      	ldr	r2, [pc, #396]	; (8001bd0 <HAL_DMA_Init+0x1c0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d040      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a62      	ldr	r2, [pc, #392]	; (8001bd4 <HAL_DMA_Init+0x1c4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d03b      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a60      	ldr	r2, [pc, #384]	; (8001bd8 <HAL_DMA_Init+0x1c8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d036      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a5f      	ldr	r2, [pc, #380]	; (8001bdc <HAL_DMA_Init+0x1cc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d031      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a5d      	ldr	r2, [pc, #372]	; (8001be0 <HAL_DMA_Init+0x1d0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d02c      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a5c      	ldr	r2, [pc, #368]	; (8001be4 <HAL_DMA_Init+0x1d4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d027      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a5a      	ldr	r2, [pc, #360]	; (8001be8 <HAL_DMA_Init+0x1d8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d022      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a59      	ldr	r2, [pc, #356]	; (8001bec <HAL_DMA_Init+0x1dc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d01d      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a57      	ldr	r2, [pc, #348]	; (8001bf0 <HAL_DMA_Init+0x1e0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d018      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_DMA_Init+0x1e4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d013      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a54      	ldr	r2, [pc, #336]	; (8001bf8 <HAL_DMA_Init+0x1e8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00e      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a53      	ldr	r2, [pc, #332]	; (8001bfc <HAL_DMA_Init+0x1ec>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d009      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <HAL_DMA_Init+0x1f0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d004      	beq.n	8001ac8 <HAL_DMA_Init+0xb8>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a50      	ldr	r2, [pc, #320]	; (8001c04 <HAL_DMA_Init+0x1f4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_DMA_Init+0xbc>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_DMA_Init+0xbe>
 8001acc:	2300      	movs	r3, #0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 813b 	beq.w	8001d4a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a37      	ldr	r2, [pc, #220]	; (8001bc8 <HAL_DMA_Init+0x1b8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d04a      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a36      	ldr	r2, [pc, #216]	; (8001bcc <HAL_DMA_Init+0x1bc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d045      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a34      	ldr	r2, [pc, #208]	; (8001bd0 <HAL_DMA_Init+0x1c0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d040      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a33      	ldr	r2, [pc, #204]	; (8001bd4 <HAL_DMA_Init+0x1c4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d03b      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a31      	ldr	r2, [pc, #196]	; (8001bd8 <HAL_DMA_Init+0x1c8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d036      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a30      	ldr	r2, [pc, #192]	; (8001bdc <HAL_DMA_Init+0x1cc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d031      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2e      	ldr	r2, [pc, #184]	; (8001be0 <HAL_DMA_Init+0x1d0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d02c      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a2d      	ldr	r2, [pc, #180]	; (8001be4 <HAL_DMA_Init+0x1d4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d027      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <HAL_DMA_Init+0x1d8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d022      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a2a      	ldr	r2, [pc, #168]	; (8001bec <HAL_DMA_Init+0x1dc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d01d      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a28      	ldr	r2, [pc, #160]	; (8001bf0 <HAL_DMA_Init+0x1e0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d018      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <HAL_DMA_Init+0x1e4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d013      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <HAL_DMA_Init+0x1e8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00e      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a24      	ldr	r2, [pc, #144]	; (8001bfc <HAL_DMA_Init+0x1ec>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d009      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a22      	ldr	r2, [pc, #136]	; (8001c00 <HAL_DMA_Init+0x1f0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d004      	beq.n	8001b84 <HAL_DMA_Init+0x174>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <HAL_DMA_Init+0x1f4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d108      	bne.n	8001b96 <HAL_DMA_Init+0x186>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e007      	b.n	8001ba6 <HAL_DMA_Init+0x196>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ba6:	e02f      	b.n	8001c08 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ba8:	f7ff fde8 	bl	800177c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d928      	bls.n	8001c08 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e246      	b.n	8002056 <HAL_DMA_Init+0x646>
 8001bc8:	40020010 	.word	0x40020010
 8001bcc:	40020028 	.word	0x40020028
 8001bd0:	40020040 	.word	0x40020040
 8001bd4:	40020058 	.word	0x40020058
 8001bd8:	40020070 	.word	0x40020070
 8001bdc:	40020088 	.word	0x40020088
 8001be0:	400200a0 	.word	0x400200a0
 8001be4:	400200b8 	.word	0x400200b8
 8001be8:	40020410 	.word	0x40020410
 8001bec:	40020428 	.word	0x40020428
 8001bf0:	40020440 	.word	0x40020440
 8001bf4:	40020458 	.word	0x40020458
 8001bf8:	40020470 	.word	0x40020470
 8001bfc:	40020488 	.word	0x40020488
 8001c00:	400204a0 	.word	0x400204a0
 8001c04:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1c8      	bne.n	8001ba8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4b83      	ldr	r3, [pc, #524]	; (8001e30 <HAL_DMA_Init+0x420>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c46:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d107      	bne.n	8001c6c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	4313      	orrs	r3, r2
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c6c:	4b71      	ldr	r3, [pc, #452]	; (8001e34 <HAL_DMA_Init+0x424>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b71      	ldr	r3, [pc, #452]	; (8001e38 <HAL_DMA_Init+0x428>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c78:	d328      	bcc.n	8001ccc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b28      	cmp	r3, #40	; 0x28
 8001c80:	d903      	bls.n	8001c8a <HAL_DMA_Init+0x27a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b2e      	cmp	r3, #46	; 0x2e
 8001c88:	d917      	bls.n	8001cba <HAL_DMA_Init+0x2aa>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c90:	d903      	bls.n	8001c9a <HAL_DMA_Init+0x28a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b42      	cmp	r3, #66	; 0x42
 8001c98:	d90f      	bls.n	8001cba <HAL_DMA_Init+0x2aa>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b46      	cmp	r3, #70	; 0x46
 8001ca0:	d903      	bls.n	8001caa <HAL_DMA_Init+0x29a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b48      	cmp	r3, #72	; 0x48
 8001ca8:	d907      	bls.n	8001cba <HAL_DMA_Init+0x2aa>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b4e      	cmp	r3, #78	; 0x4e
 8001cb0:	d905      	bls.n	8001cbe <HAL_DMA_Init+0x2ae>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b52      	cmp	r3, #82	; 0x52
 8001cb8:	d801      	bhi.n	8001cbe <HAL_DMA_Init+0x2ae>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_DMA_Init+0x2b0>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f023 0307 	bic.w	r3, r3, #7
 8001ce2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d117      	bne.n	8001d26 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f001 f9b9 	bl	8003080 <DMA_CheckFifoParam>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2240      	movs	r2, #64	; 0x40
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e197      	b.n	8002056 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f001 f8f4 	bl	8002f1c <DMA_CalcBaseAndBitshift>
 8001d34:	4603      	mov	r3, r0
 8001d36:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	223f      	movs	r2, #63	; 0x3f
 8001d42:	409a      	lsls	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	e0cd      	b.n	8001ee6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a3b      	ldr	r2, [pc, #236]	; (8001e3c <HAL_DMA_Init+0x42c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d022      	beq.n	8001d9a <HAL_DMA_Init+0x38a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a39      	ldr	r2, [pc, #228]	; (8001e40 <HAL_DMA_Init+0x430>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01d      	beq.n	8001d9a <HAL_DMA_Init+0x38a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a38      	ldr	r2, [pc, #224]	; (8001e44 <HAL_DMA_Init+0x434>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d018      	beq.n	8001d9a <HAL_DMA_Init+0x38a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a36      	ldr	r2, [pc, #216]	; (8001e48 <HAL_DMA_Init+0x438>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_DMA_Init+0x38a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a35      	ldr	r2, [pc, #212]	; (8001e4c <HAL_DMA_Init+0x43c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00e      	beq.n	8001d9a <HAL_DMA_Init+0x38a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a33      	ldr	r2, [pc, #204]	; (8001e50 <HAL_DMA_Init+0x440>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d009      	beq.n	8001d9a <HAL_DMA_Init+0x38a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a32      	ldr	r2, [pc, #200]	; (8001e54 <HAL_DMA_Init+0x444>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_DMA_Init+0x38a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <HAL_DMA_Init+0x448>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_DMA_Init+0x38e>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_DMA_Init+0x390>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8097 	beq.w	8001ed4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <HAL_DMA_Init+0x42c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d021      	beq.n	8001df4 <HAL_DMA_Init+0x3e4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <HAL_DMA_Init+0x430>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01c      	beq.n	8001df4 <HAL_DMA_Init+0x3e4>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <HAL_DMA_Init+0x434>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d017      	beq.n	8001df4 <HAL_DMA_Init+0x3e4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_DMA_Init+0x438>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d012      	beq.n	8001df4 <HAL_DMA_Init+0x3e4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_DMA_Init+0x43c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00d      	beq.n	8001df4 <HAL_DMA_Init+0x3e4>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_DMA_Init+0x440>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d008      	beq.n	8001df4 <HAL_DMA_Init+0x3e4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_DMA_Init+0x444>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d003      	beq.n	8001df4 <HAL_DMA_Init+0x3e4>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_DMA_Init+0x448>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_DMA_Init+0x44c>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b40      	cmp	r3, #64	; 0x40
 8001e1c:	d020      	beq.n	8001e60 <HAL_DMA_Init+0x450>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b80      	cmp	r3, #128	; 0x80
 8001e24:	d102      	bne.n	8001e2c <HAL_DMA_Init+0x41c>
 8001e26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e2a:	e01a      	b.n	8001e62 <HAL_DMA_Init+0x452>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e018      	b.n	8001e62 <HAL_DMA_Init+0x452>
 8001e30:	fe10803f 	.word	0xfe10803f
 8001e34:	5c001000 	.word	0x5c001000
 8001e38:	ffff0000 	.word	0xffff0000
 8001e3c:	58025408 	.word	0x58025408
 8001e40:	5802541c 	.word	0x5802541c
 8001e44:	58025430 	.word	0x58025430
 8001e48:	58025444 	.word	0x58025444
 8001e4c:	58025458 	.word	0x58025458
 8001e50:	5802546c 	.word	0x5802546c
 8001e54:	58025480 	.word	0x58025480
 8001e58:	58025494 	.word	0x58025494
 8001e5c:	fffe000f 	.word	0xfffe000f
 8001e60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68d2      	ldr	r2, [r2, #12]
 8001e66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b6e      	ldr	r3, [pc, #440]	; (8002060 <HAL_DMA_Init+0x650>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a6e      	ldr	r2, [pc, #440]	; (8002064 <HAL_DMA_Init+0x654>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	009a      	lsls	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f001 f82f 	bl	8002f1c <DMA_CalcBaseAndBitshift>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	2201      	movs	r2, #1
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	e008      	b.n	8001ee6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2240      	movs	r2, #64	; 0x40
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0b7      	b.n	8002056 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <HAL_DMA_Init+0x658>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d072      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a5d      	ldr	r2, [pc, #372]	; (800206c <HAL_DMA_Init+0x65c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d06d      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a5c      	ldr	r2, [pc, #368]	; (8002070 <HAL_DMA_Init+0x660>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d068      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a5a      	ldr	r2, [pc, #360]	; (8002074 <HAL_DMA_Init+0x664>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d063      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a59      	ldr	r2, [pc, #356]	; (8002078 <HAL_DMA_Init+0x668>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d05e      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a57      	ldr	r2, [pc, #348]	; (800207c <HAL_DMA_Init+0x66c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d059      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a56      	ldr	r2, [pc, #344]	; (8002080 <HAL_DMA_Init+0x670>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d054      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a54      	ldr	r2, [pc, #336]	; (8002084 <HAL_DMA_Init+0x674>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d04f      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a53      	ldr	r2, [pc, #332]	; (8002088 <HAL_DMA_Init+0x678>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d04a      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a51      	ldr	r2, [pc, #324]	; (800208c <HAL_DMA_Init+0x67c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d045      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a50      	ldr	r2, [pc, #320]	; (8002090 <HAL_DMA_Init+0x680>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d040      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a4e      	ldr	r2, [pc, #312]	; (8002094 <HAL_DMA_Init+0x684>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d03b      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a4d      	ldr	r2, [pc, #308]	; (8002098 <HAL_DMA_Init+0x688>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d036      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a4b      	ldr	r2, [pc, #300]	; (800209c <HAL_DMA_Init+0x68c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d031      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a4a      	ldr	r2, [pc, #296]	; (80020a0 <HAL_DMA_Init+0x690>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d02c      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a48      	ldr	r2, [pc, #288]	; (80020a4 <HAL_DMA_Init+0x694>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d027      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a47      	ldr	r2, [pc, #284]	; (80020a8 <HAL_DMA_Init+0x698>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d022      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a45      	ldr	r2, [pc, #276]	; (80020ac <HAL_DMA_Init+0x69c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01d      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a44      	ldr	r2, [pc, #272]	; (80020b0 <HAL_DMA_Init+0x6a0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d018      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a42      	ldr	r2, [pc, #264]	; (80020b4 <HAL_DMA_Init+0x6a4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a41      	ldr	r2, [pc, #260]	; (80020b8 <HAL_DMA_Init+0x6a8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00e      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a3f      	ldr	r2, [pc, #252]	; (80020bc <HAL_DMA_Init+0x6ac>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3e      	ldr	r2, [pc, #248]	; (80020c0 <HAL_DMA_Init+0x6b0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d004      	beq.n	8001fd6 <HAL_DMA_Init+0x5c6>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a3c      	ldr	r2, [pc, #240]	; (80020c4 <HAL_DMA_Init+0x6b4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_DMA_Init+0x5ca>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_DMA_Init+0x5cc>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d032      	beq.n	8002046 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f001 f8c9 	bl	8003178 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b80      	cmp	r3, #128	; 0x80
 8001fec:	d102      	bne.n	8001ff4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002008:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d010      	beq.n	8002034 <HAL_DMA_Init+0x624>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b08      	cmp	r3, #8
 8002018:	d80c      	bhi.n	8002034 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f001 f946 	bl	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	e008      	b.n	8002046 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	a7fdabf8 	.word	0xa7fdabf8
 8002064:	cccccccd 	.word	0xcccccccd
 8002068:	40020010 	.word	0x40020010
 800206c:	40020028 	.word	0x40020028
 8002070:	40020040 	.word	0x40020040
 8002074:	40020058 	.word	0x40020058
 8002078:	40020070 	.word	0x40020070
 800207c:	40020088 	.word	0x40020088
 8002080:	400200a0 	.word	0x400200a0
 8002084:	400200b8 	.word	0x400200b8
 8002088:	40020410 	.word	0x40020410
 800208c:	40020428 	.word	0x40020428
 8002090:	40020440 	.word	0x40020440
 8002094:	40020458 	.word	0x40020458
 8002098:	40020470 	.word	0x40020470
 800209c:	40020488 	.word	0x40020488
 80020a0:	400204a0 	.word	0x400204a0
 80020a4:	400204b8 	.word	0x400204b8
 80020a8:	58025408 	.word	0x58025408
 80020ac:	5802541c 	.word	0x5802541c
 80020b0:	58025430 	.word	0x58025430
 80020b4:	58025444 	.word	0x58025444
 80020b8:	58025458 	.word	0x58025458
 80020bc:	5802546c 	.word	0x5802546c
 80020c0:	58025480 	.word	0x58025480
 80020c4:	58025494 	.word	0x58025494

080020c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020d4:	4b67      	ldr	r3, [pc, #412]	; (8002274 <HAL_DMA_IRQHandler+0x1ac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a67      	ldr	r2, [pc, #412]	; (8002278 <HAL_DMA_IRQHandler+0x1b0>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0a9b      	lsrs	r3, r3, #10
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a5f      	ldr	r2, [pc, #380]	; (800227c <HAL_DMA_IRQHandler+0x1b4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d04a      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a5d      	ldr	r2, [pc, #372]	; (8002280 <HAL_DMA_IRQHandler+0x1b8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d045      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a5c      	ldr	r2, [pc, #368]	; (8002284 <HAL_DMA_IRQHandler+0x1bc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d040      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a5a      	ldr	r2, [pc, #360]	; (8002288 <HAL_DMA_IRQHandler+0x1c0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d03b      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a59      	ldr	r2, [pc, #356]	; (800228c <HAL_DMA_IRQHandler+0x1c4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d036      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a57      	ldr	r2, [pc, #348]	; (8002290 <HAL_DMA_IRQHandler+0x1c8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d031      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a56      	ldr	r2, [pc, #344]	; (8002294 <HAL_DMA_IRQHandler+0x1cc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d02c      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a54      	ldr	r2, [pc, #336]	; (8002298 <HAL_DMA_IRQHandler+0x1d0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d027      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a53      	ldr	r2, [pc, #332]	; (800229c <HAL_DMA_IRQHandler+0x1d4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d022      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a51      	ldr	r2, [pc, #324]	; (80022a0 <HAL_DMA_IRQHandler+0x1d8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01d      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a50      	ldr	r2, [pc, #320]	; (80022a4 <HAL_DMA_IRQHandler+0x1dc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d018      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a4e      	ldr	r2, [pc, #312]	; (80022a8 <HAL_DMA_IRQHandler+0x1e0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a4d      	ldr	r2, [pc, #308]	; (80022ac <HAL_DMA_IRQHandler+0x1e4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00e      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a4b      	ldr	r2, [pc, #300]	; (80022b0 <HAL_DMA_IRQHandler+0x1e8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d009      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a4a      	ldr	r2, [pc, #296]	; (80022b4 <HAL_DMA_IRQHandler+0x1ec>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d004      	beq.n	800219a <HAL_DMA_IRQHandler+0xd2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a48      	ldr	r2, [pc, #288]	; (80022b8 <HAL_DMA_IRQHandler+0x1f0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_DMA_IRQHandler+0xd6>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_DMA_IRQHandler+0xd8>
 800219e:	2300      	movs	r3, #0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 842b 	beq.w	80029fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	2208      	movs	r2, #8
 80021b0:	409a      	lsls	r2, r3
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80a2 	beq.w	8002300 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2e      	ldr	r2, [pc, #184]	; (800227c <HAL_DMA_IRQHandler+0x1b4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d04a      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2d      	ldr	r2, [pc, #180]	; (8002280 <HAL_DMA_IRQHandler+0x1b8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d045      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <HAL_DMA_IRQHandler+0x1bc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d040      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <HAL_DMA_IRQHandler+0x1c0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d03b      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a28      	ldr	r2, [pc, #160]	; (800228c <HAL_DMA_IRQHandler+0x1c4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d036      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a27      	ldr	r2, [pc, #156]	; (8002290 <HAL_DMA_IRQHandler+0x1c8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d031      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a25      	ldr	r2, [pc, #148]	; (8002294 <HAL_DMA_IRQHandler+0x1cc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02c      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a24      	ldr	r2, [pc, #144]	; (8002298 <HAL_DMA_IRQHandler+0x1d0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d027      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a22      	ldr	r2, [pc, #136]	; (800229c <HAL_DMA_IRQHandler+0x1d4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d022      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <HAL_DMA_IRQHandler+0x1d8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d01d      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <HAL_DMA_IRQHandler+0x1dc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d018      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <HAL_DMA_IRQHandler+0x1e0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d013      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1c      	ldr	r2, [pc, #112]	; (80022ac <HAL_DMA_IRQHandler+0x1e4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00e      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <HAL_DMA_IRQHandler+0x1e8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d009      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_DMA_IRQHandler+0x1ec>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_DMA_IRQHandler+0x194>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <HAL_DMA_IRQHandler+0x1f0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d12f      	bne.n	80022bc <HAL_DMA_IRQHandler+0x1f4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	e02e      	b.n	80022d0 <HAL_DMA_IRQHandler+0x208>
 8002272:	bf00      	nop
 8002274:	24000000 	.word	0x24000000
 8002278:	1b4e81b5 	.word	0x1b4e81b5
 800227c:	40020010 	.word	0x40020010
 8002280:	40020028 	.word	0x40020028
 8002284:	40020040 	.word	0x40020040
 8002288:	40020058 	.word	0x40020058
 800228c:	40020070 	.word	0x40020070
 8002290:	40020088 	.word	0x40020088
 8002294:	400200a0 	.word	0x400200a0
 8002298:	400200b8 	.word	0x400200b8
 800229c:	40020410 	.word	0x40020410
 80022a0:	40020428 	.word	0x40020428
 80022a4:	40020440 	.word	0x40020440
 80022a8:	40020458 	.word	0x40020458
 80022ac:	40020470 	.word	0x40020470
 80022b0:	40020488 	.word	0x40020488
 80022b4:	400204a0 	.word	0x400204a0
 80022b8:	400204b8 	.word	0x400204b8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d015      	beq.n	8002300 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0204 	bic.w	r2, r2, #4
 80022e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	2208      	movs	r2, #8
 80022ee:	409a      	lsls	r2, r3
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d06e      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a69      	ldr	r2, [pc, #420]	; (80024c0 <HAL_DMA_IRQHandler+0x3f8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04a      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a67      	ldr	r2, [pc, #412]	; (80024c4 <HAL_DMA_IRQHandler+0x3fc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d045      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a66      	ldr	r2, [pc, #408]	; (80024c8 <HAL_DMA_IRQHandler+0x400>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d040      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a64      	ldr	r2, [pc, #400]	; (80024cc <HAL_DMA_IRQHandler+0x404>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d03b      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a63      	ldr	r2, [pc, #396]	; (80024d0 <HAL_DMA_IRQHandler+0x408>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d036      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a61      	ldr	r2, [pc, #388]	; (80024d4 <HAL_DMA_IRQHandler+0x40c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a60      	ldr	r2, [pc, #384]	; (80024d8 <HAL_DMA_IRQHandler+0x410>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d02c      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a5e      	ldr	r2, [pc, #376]	; (80024dc <HAL_DMA_IRQHandler+0x414>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d027      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5d      	ldr	r2, [pc, #372]	; (80024e0 <HAL_DMA_IRQHandler+0x418>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5b      	ldr	r2, [pc, #364]	; (80024e4 <HAL_DMA_IRQHandler+0x41c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01d      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a5a      	ldr	r2, [pc, #360]	; (80024e8 <HAL_DMA_IRQHandler+0x420>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d018      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a58      	ldr	r2, [pc, #352]	; (80024ec <HAL_DMA_IRQHandler+0x424>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a57      	ldr	r2, [pc, #348]	; (80024f0 <HAL_DMA_IRQHandler+0x428>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a55      	ldr	r2, [pc, #340]	; (80024f4 <HAL_DMA_IRQHandler+0x42c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d009      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a54      	ldr	r2, [pc, #336]	; (80024f8 <HAL_DMA_IRQHandler+0x430>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x2ee>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_DMA_IRQHandler+0x434>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d10a      	bne.n	80023cc <HAL_DMA_IRQHandler+0x304>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf14      	ite	ne
 80023c4:	2301      	movne	r3, #1
 80023c6:	2300      	moveq	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e003      	b.n	80023d4 <HAL_DMA_IRQHandler+0x30c>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2201      	movs	r2, #1
 80023e2:	409a      	lsls	r2, r3
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	f043 0202 	orr.w	r2, r3, #2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2204      	movs	r2, #4
 80023fe:	409a      	lsls	r2, r3
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 808f 	beq.w	8002528 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2c      	ldr	r2, [pc, #176]	; (80024c0 <HAL_DMA_IRQHandler+0x3f8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d04a      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2a      	ldr	r2, [pc, #168]	; (80024c4 <HAL_DMA_IRQHandler+0x3fc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d045      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a29      	ldr	r2, [pc, #164]	; (80024c8 <HAL_DMA_IRQHandler+0x400>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d040      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a27      	ldr	r2, [pc, #156]	; (80024cc <HAL_DMA_IRQHandler+0x404>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d03b      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <HAL_DMA_IRQHandler+0x408>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d036      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <HAL_DMA_IRQHandler+0x40c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d031      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a23      	ldr	r2, [pc, #140]	; (80024d8 <HAL_DMA_IRQHandler+0x410>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d02c      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a21      	ldr	r2, [pc, #132]	; (80024dc <HAL_DMA_IRQHandler+0x414>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d027      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <HAL_DMA_IRQHandler+0x418>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d022      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1e      	ldr	r2, [pc, #120]	; (80024e4 <HAL_DMA_IRQHandler+0x41c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01d      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1d      	ldr	r2, [pc, #116]	; (80024e8 <HAL_DMA_IRQHandler+0x420>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d018      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_DMA_IRQHandler+0x424>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <HAL_DMA_IRQHandler+0x428>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00e      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <HAL_DMA_IRQHandler+0x42c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <HAL_DMA_IRQHandler+0x430>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d004      	beq.n	80024aa <HAL_DMA_IRQHandler+0x3e2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a15      	ldr	r2, [pc, #84]	; (80024fc <HAL_DMA_IRQHandler+0x434>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d12a      	bne.n	8002500 <HAL_DMA_IRQHandler+0x438>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e023      	b.n	8002508 <HAL_DMA_IRQHandler+0x440>
 80024c0:	40020010 	.word	0x40020010
 80024c4:	40020028 	.word	0x40020028
 80024c8:	40020040 	.word	0x40020040
 80024cc:	40020058 	.word	0x40020058
 80024d0:	40020070 	.word	0x40020070
 80024d4:	40020088 	.word	0x40020088
 80024d8:	400200a0 	.word	0x400200a0
 80024dc:	400200b8 	.word	0x400200b8
 80024e0:	40020410 	.word	0x40020410
 80024e4:	40020428 	.word	0x40020428
 80024e8:	40020440 	.word	0x40020440
 80024ec:	40020458 	.word	0x40020458
 80024f0:	40020470 	.word	0x40020470
 80024f4:	40020488 	.word	0x40020488
 80024f8:	400204a0 	.word	0x400204a0
 80024fc:	400204b8 	.word	0x400204b8
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2300      	movs	r3, #0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00d      	beq.n	8002528 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2204      	movs	r2, #4
 8002516:	409a      	lsls	r2, r3
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f043 0204 	orr.w	r2, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2210      	movs	r2, #16
 8002532:	409a      	lsls	r2, r3
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a6 	beq.w	800268a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a85      	ldr	r2, [pc, #532]	; (8002758 <HAL_DMA_IRQHandler+0x690>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d04a      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a83      	ldr	r2, [pc, #524]	; (800275c <HAL_DMA_IRQHandler+0x694>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d045      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a82      	ldr	r2, [pc, #520]	; (8002760 <HAL_DMA_IRQHandler+0x698>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d040      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a80      	ldr	r2, [pc, #512]	; (8002764 <HAL_DMA_IRQHandler+0x69c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d03b      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7f      	ldr	r2, [pc, #508]	; (8002768 <HAL_DMA_IRQHandler+0x6a0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d036      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a7d      	ldr	r2, [pc, #500]	; (800276c <HAL_DMA_IRQHandler+0x6a4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d031      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a7c      	ldr	r2, [pc, #496]	; (8002770 <HAL_DMA_IRQHandler+0x6a8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d02c      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a7a      	ldr	r2, [pc, #488]	; (8002774 <HAL_DMA_IRQHandler+0x6ac>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d027      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a79      	ldr	r2, [pc, #484]	; (8002778 <HAL_DMA_IRQHandler+0x6b0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d022      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a77      	ldr	r2, [pc, #476]	; (800277c <HAL_DMA_IRQHandler+0x6b4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d01d      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a76      	ldr	r2, [pc, #472]	; (8002780 <HAL_DMA_IRQHandler+0x6b8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d018      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a74      	ldr	r2, [pc, #464]	; (8002784 <HAL_DMA_IRQHandler+0x6bc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a73      	ldr	r2, [pc, #460]	; (8002788 <HAL_DMA_IRQHandler+0x6c0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00e      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a71      	ldr	r2, [pc, #452]	; (800278c <HAL_DMA_IRQHandler+0x6c4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d009      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a70      	ldr	r2, [pc, #448]	; (8002790 <HAL_DMA_IRQHandler+0x6c8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d004      	beq.n	80025de <HAL_DMA_IRQHandler+0x516>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6e      	ldr	r2, [pc, #440]	; (8002794 <HAL_DMA_IRQHandler+0x6cc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d10a      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x52c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf14      	ite	ne
 80025ec:	2301      	movne	r3, #1
 80025ee:	2300      	moveq	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e009      	b.n	8002608 <HAL_DMA_IRQHandler+0x540>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf14      	ite	ne
 8002602:	2301      	movne	r3, #1
 8002604:	2300      	moveq	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d03e      	beq.n	800268a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2210      	movs	r2, #16
 8002616:	409a      	lsls	r2, r3
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d018      	beq.n	800265c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d108      	bne.n	800264a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d024      	beq.n	800268a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
 8002648:	e01f      	b.n	800268a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01b      	beq.n	800268a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
 800265a:	e016      	b.n	800268a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d107      	bne.n	800267a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0208 	bic.w	r2, r2, #8
 8002678:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	2220      	movs	r2, #32
 8002694:	409a      	lsls	r2, r3
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 8110 	beq.w	80028c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2c      	ldr	r2, [pc, #176]	; (8002758 <HAL_DMA_IRQHandler+0x690>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d04a      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2b      	ldr	r2, [pc, #172]	; (800275c <HAL_DMA_IRQHandler+0x694>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d045      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a29      	ldr	r2, [pc, #164]	; (8002760 <HAL_DMA_IRQHandler+0x698>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d040      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_DMA_IRQHandler+0x69c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d03b      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a26      	ldr	r2, [pc, #152]	; (8002768 <HAL_DMA_IRQHandler+0x6a0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d036      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a25      	ldr	r2, [pc, #148]	; (800276c <HAL_DMA_IRQHandler+0x6a4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d031      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a23      	ldr	r2, [pc, #140]	; (8002770 <HAL_DMA_IRQHandler+0x6a8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02c      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a22      	ldr	r2, [pc, #136]	; (8002774 <HAL_DMA_IRQHandler+0x6ac>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d027      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a20      	ldr	r2, [pc, #128]	; (8002778 <HAL_DMA_IRQHandler+0x6b0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d022      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1f      	ldr	r2, [pc, #124]	; (800277c <HAL_DMA_IRQHandler+0x6b4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d01d      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_DMA_IRQHandler+0x6b8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d018      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_DMA_IRQHandler+0x6bc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <HAL_DMA_IRQHandler+0x6c0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00e      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a19      	ldr	r2, [pc, #100]	; (800278c <HAL_DMA_IRQHandler+0x6c4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a17      	ldr	r2, [pc, #92]	; (8002790 <HAL_DMA_IRQHandler+0x6c8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <HAL_DMA_IRQHandler+0x678>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a16      	ldr	r2, [pc, #88]	; (8002794 <HAL_DMA_IRQHandler+0x6cc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d12b      	bne.n	8002798 <HAL_DMA_IRQHandler+0x6d0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	e02a      	b.n	80027ac <HAL_DMA_IRQHandler+0x6e4>
 8002756:	bf00      	nop
 8002758:	40020010 	.word	0x40020010
 800275c:	40020028 	.word	0x40020028
 8002760:	40020040 	.word	0x40020040
 8002764:	40020058 	.word	0x40020058
 8002768:	40020070 	.word	0x40020070
 800276c:	40020088 	.word	0x40020088
 8002770:	400200a0 	.word	0x400200a0
 8002774:	400200b8 	.word	0x400200b8
 8002778:	40020410 	.word	0x40020410
 800277c:	40020428 	.word	0x40020428
 8002780:	40020440 	.word	0x40020440
 8002784:	40020458 	.word	0x40020458
 8002788:	40020470 	.word	0x40020470
 800278c:	40020488 	.word	0x40020488
 8002790:	400204a0 	.word	0x400204a0
 8002794:	400204b8 	.word	0x400204b8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8087 	beq.w	80028c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	2220      	movs	r2, #32
 80027bc:	409a      	lsls	r2, r3
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d139      	bne.n	8002842 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0216 	bic.w	r2, r2, #22
 80027dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_DMA_IRQHandler+0x736>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0208 	bic.w	r2, r2, #8
 800280c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	223f      	movs	r2, #63	; 0x3f
 8002818:	409a      	lsls	r2, r3
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 834a 	beq.w	8002ecc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
          }
          return;
 8002840:	e344      	b.n	8002ecc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d018      	beq.n	8002882 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d108      	bne.n	8002870 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	2b00      	cmp	r3, #0
 8002864:	d02c      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
 800286e:	e027      	b.n	80028c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d023      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
 8002880:	e01e      	b.n	80028c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10f      	bne.n	80028b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0210 	bic.w	r2, r2, #16
 800289e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8306 	beq.w	8002ed6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8088 	beq.w	80029e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2204      	movs	r2, #4
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a7a      	ldr	r2, [pc, #488]	; (8002ad0 <HAL_DMA_IRQHandler+0xa08>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d04a      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a79      	ldr	r2, [pc, #484]	; (8002ad4 <HAL_DMA_IRQHandler+0xa0c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d045      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a77      	ldr	r2, [pc, #476]	; (8002ad8 <HAL_DMA_IRQHandler+0xa10>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d040      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a76      	ldr	r2, [pc, #472]	; (8002adc <HAL_DMA_IRQHandler+0xa14>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d03b      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a74      	ldr	r2, [pc, #464]	; (8002ae0 <HAL_DMA_IRQHandler+0xa18>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d036      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a73      	ldr	r2, [pc, #460]	; (8002ae4 <HAL_DMA_IRQHandler+0xa1c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d031      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a71      	ldr	r2, [pc, #452]	; (8002ae8 <HAL_DMA_IRQHandler+0xa20>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d02c      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a70      	ldr	r2, [pc, #448]	; (8002aec <HAL_DMA_IRQHandler+0xa24>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d027      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_DMA_IRQHandler+0xa28>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d022      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a6d      	ldr	r2, [pc, #436]	; (8002af4 <HAL_DMA_IRQHandler+0xa2c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d01d      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6b      	ldr	r2, [pc, #428]	; (8002af8 <HAL_DMA_IRQHandler+0xa30>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d018      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6a      	ldr	r2, [pc, #424]	; (8002afc <HAL_DMA_IRQHandler+0xa34>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a68      	ldr	r2, [pc, #416]	; (8002b00 <HAL_DMA_IRQHandler+0xa38>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00e      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a67      	ldr	r2, [pc, #412]	; (8002b04 <HAL_DMA_IRQHandler+0xa3c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a65      	ldr	r2, [pc, #404]	; (8002b08 <HAL_DMA_IRQHandler+0xa40>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_DMA_IRQHandler+0x8b8>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a64      	ldr	r2, [pc, #400]	; (8002b0c <HAL_DMA_IRQHandler+0xa44>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d108      	bne.n	8002992 <HAL_DMA_IRQHandler+0x8ca>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e007      	b.n	80029a2 <HAL_DMA_IRQHandler+0x8da>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3301      	adds	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d307      	bcc.n	80029be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f2      	bne.n	80029a2 <HAL_DMA_IRQHandler+0x8da>
 80029bc:	e000      	b.n	80029c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80029be:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2203      	movs	r2, #3
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80029de:	e003      	b.n	80029e8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8272 	beq.w	8002ed6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
 80029fa:	e26c      	b.n	8002ed6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a43      	ldr	r2, [pc, #268]	; (8002b10 <HAL_DMA_IRQHandler+0xa48>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d022      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x984>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a42      	ldr	r2, [pc, #264]	; (8002b14 <HAL_DMA_IRQHandler+0xa4c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d01d      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x984>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a40      	ldr	r2, [pc, #256]	; (8002b18 <HAL_DMA_IRQHandler+0xa50>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d018      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x984>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a3f      	ldr	r2, [pc, #252]	; (8002b1c <HAL_DMA_IRQHandler+0xa54>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d013      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x984>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a3d      	ldr	r2, [pc, #244]	; (8002b20 <HAL_DMA_IRQHandler+0xa58>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00e      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x984>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a3c      	ldr	r2, [pc, #240]	; (8002b24 <HAL_DMA_IRQHandler+0xa5c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d009      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x984>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a3a      	ldr	r2, [pc, #232]	; (8002b28 <HAL_DMA_IRQHandler+0xa60>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x984>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a39      	ldr	r2, [pc, #228]	; (8002b2c <HAL_DMA_IRQHandler+0xa64>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d101      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x988>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_DMA_IRQHandler+0x98a>
 8002a50:	2300      	movs	r3, #0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 823f 	beq.w	8002ed6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2204      	movs	r2, #4
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80cd 	beq.w	8002c10 <HAL_DMA_IRQHandler+0xb48>
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80c7 	beq.w	8002c10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d049      	beq.n	8002b30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8210 	beq.w	8002ed0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ab8:	e20a      	b.n	8002ed0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8206 	beq.w	8002ed0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002acc:	e200      	b.n	8002ed0 <HAL_DMA_IRQHandler+0xe08>
 8002ace:	bf00      	nop
 8002ad0:	40020010 	.word	0x40020010
 8002ad4:	40020028 	.word	0x40020028
 8002ad8:	40020040 	.word	0x40020040
 8002adc:	40020058 	.word	0x40020058
 8002ae0:	40020070 	.word	0x40020070
 8002ae4:	40020088 	.word	0x40020088
 8002ae8:	400200a0 	.word	0x400200a0
 8002aec:	400200b8 	.word	0x400200b8
 8002af0:	40020410 	.word	0x40020410
 8002af4:	40020428 	.word	0x40020428
 8002af8:	40020440 	.word	0x40020440
 8002afc:	40020458 	.word	0x40020458
 8002b00:	40020470 	.word	0x40020470
 8002b04:	40020488 	.word	0x40020488
 8002b08:	400204a0 	.word	0x400204a0
 8002b0c:	400204b8 	.word	0x400204b8
 8002b10:	58025408 	.word	0x58025408
 8002b14:	5802541c 	.word	0x5802541c
 8002b18:	58025430 	.word	0x58025430
 8002b1c:	58025444 	.word	0x58025444
 8002b20:	58025458 	.word	0x58025458
 8002b24:	5802546c 	.word	0x5802546c
 8002b28:	58025480 	.word	0x58025480
 8002b2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d160      	bne.n	8002bfc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a8c      	ldr	r2, [pc, #560]	; (8002d70 <HAL_DMA_IRQHandler+0xca8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04a      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a8a      	ldr	r2, [pc, #552]	; (8002d74 <HAL_DMA_IRQHandler+0xcac>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d045      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a89      	ldr	r2, [pc, #548]	; (8002d78 <HAL_DMA_IRQHandler+0xcb0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d040      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a87      	ldr	r2, [pc, #540]	; (8002d7c <HAL_DMA_IRQHandler+0xcb4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03b      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a86      	ldr	r2, [pc, #536]	; (8002d80 <HAL_DMA_IRQHandler+0xcb8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d036      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a84      	ldr	r2, [pc, #528]	; (8002d84 <HAL_DMA_IRQHandler+0xcbc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a83      	ldr	r2, [pc, #524]	; (8002d88 <HAL_DMA_IRQHandler+0xcc0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02c      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a81      	ldr	r2, [pc, #516]	; (8002d8c <HAL_DMA_IRQHandler+0xcc4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d027      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a80      	ldr	r2, [pc, #512]	; (8002d90 <HAL_DMA_IRQHandler+0xcc8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a7e      	ldr	r2, [pc, #504]	; (8002d94 <HAL_DMA_IRQHandler+0xccc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a7d      	ldr	r2, [pc, #500]	; (8002d98 <HAL_DMA_IRQHandler+0xcd0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a7b      	ldr	r2, [pc, #492]	; (8002d9c <HAL_DMA_IRQHandler+0xcd4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a7a      	ldr	r2, [pc, #488]	; (8002da0 <HAL_DMA_IRQHandler+0xcd8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a78      	ldr	r2, [pc, #480]	; (8002da4 <HAL_DMA_IRQHandler+0xcdc>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a77      	ldr	r2, [pc, #476]	; (8002da8 <HAL_DMA_IRQHandler+0xce0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_DMA_IRQHandler+0xb12>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a75      	ldr	r2, [pc, #468]	; (8002dac <HAL_DMA_IRQHandler+0xce4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d108      	bne.n	8002bec <HAL_DMA_IRQHandler+0xb24>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0208 	bic.w	r2, r2, #8
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e007      	b.n	8002bfc <HAL_DMA_IRQHandler+0xb34>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0204 	bic.w	r2, r2, #4
 8002bfa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8165 	beq.w	8002ed0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c0e:	e15f      	b.n	8002ed0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	2202      	movs	r2, #2
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80c5 	beq.w	8002db0 <HAL_DMA_IRQHandler+0xce8>
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80bf 	beq.w	8002db0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d018      	beq.n	8002c7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 813a 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c68:	e134      	b.n	8002ed4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8130 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c7c:	e12a      	b.n	8002ed4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d168      	bne.n	8002d5a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a38      	ldr	r2, [pc, #224]	; (8002d70 <HAL_DMA_IRQHandler+0xca8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d04a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a37      	ldr	r2, [pc, #220]	; (8002d74 <HAL_DMA_IRQHandler+0xcac>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d045      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a35      	ldr	r2, [pc, #212]	; (8002d78 <HAL_DMA_IRQHandler+0xcb0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d040      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <HAL_DMA_IRQHandler+0xcb4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d03b      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a32      	ldr	r2, [pc, #200]	; (8002d80 <HAL_DMA_IRQHandler+0xcb8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d036      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a31      	ldr	r2, [pc, #196]	; (8002d84 <HAL_DMA_IRQHandler+0xcbc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d031      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <HAL_DMA_IRQHandler+0xcc0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d02c      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2e      	ldr	r2, [pc, #184]	; (8002d8c <HAL_DMA_IRQHandler+0xcc4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d027      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a2c      	ldr	r2, [pc, #176]	; (8002d90 <HAL_DMA_IRQHandler+0xcc8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d022      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2b      	ldr	r2, [pc, #172]	; (8002d94 <HAL_DMA_IRQHandler+0xccc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d01d      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_DMA_IRQHandler+0xcd0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d018      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <HAL_DMA_IRQHandler+0xcd4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <HAL_DMA_IRQHandler+0xcd8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00e      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <HAL_DMA_IRQHandler+0xcdc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <HAL_DMA_IRQHandler+0xce0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xc60>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a22      	ldr	r2, [pc, #136]	; (8002dac <HAL_DMA_IRQHandler+0xce4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d108      	bne.n	8002d3a <HAL_DMA_IRQHandler+0xc72>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0214 	bic.w	r2, r2, #20
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e007      	b.n	8002d4a <HAL_DMA_IRQHandler+0xc82>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 020a 	bic.w	r2, r2, #10
 8002d48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80b8 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d6c:	e0b2      	b.n	8002ed4 <HAL_DMA_IRQHandler+0xe0c>
 8002d6e:	bf00      	nop
 8002d70:	40020010 	.word	0x40020010
 8002d74:	40020028 	.word	0x40020028
 8002d78:	40020040 	.word	0x40020040
 8002d7c:	40020058 	.word	0x40020058
 8002d80:	40020070 	.word	0x40020070
 8002d84:	40020088 	.word	0x40020088
 8002d88:	400200a0 	.word	0x400200a0
 8002d8c:	400200b8 	.word	0x400200b8
 8002d90:	40020410 	.word	0x40020410
 8002d94:	40020428 	.word	0x40020428
 8002d98:	40020440 	.word	0x40020440
 8002d9c:	40020458 	.word	0x40020458
 8002da0:	40020470 	.word	0x40020470
 8002da4:	40020488 	.word	0x40020488
 8002da8:	400204a0 	.word	0x400204a0
 8002dac:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2208      	movs	r2, #8
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8088 	beq.w	8002ed6 <HAL_DMA_IRQHandler+0xe0e>
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8082 	beq.w	8002ed6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a41      	ldr	r2, [pc, #260]	; (8002edc <HAL_DMA_IRQHandler+0xe14>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d04a      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a3f      	ldr	r2, [pc, #252]	; (8002ee0 <HAL_DMA_IRQHandler+0xe18>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d045      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a3e      	ldr	r2, [pc, #248]	; (8002ee4 <HAL_DMA_IRQHandler+0xe1c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d040      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a3c      	ldr	r2, [pc, #240]	; (8002ee8 <HAL_DMA_IRQHandler+0xe20>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d03b      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <HAL_DMA_IRQHandler+0xe24>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d036      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a39      	ldr	r2, [pc, #228]	; (8002ef0 <HAL_DMA_IRQHandler+0xe28>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d031      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a38      	ldr	r2, [pc, #224]	; (8002ef4 <HAL_DMA_IRQHandler+0xe2c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d02c      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a36      	ldr	r2, [pc, #216]	; (8002ef8 <HAL_DMA_IRQHandler+0xe30>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d027      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a35      	ldr	r2, [pc, #212]	; (8002efc <HAL_DMA_IRQHandler+0xe34>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d022      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a33      	ldr	r2, [pc, #204]	; (8002f00 <HAL_DMA_IRQHandler+0xe38>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01d      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a32      	ldr	r2, [pc, #200]	; (8002f04 <HAL_DMA_IRQHandler+0xe3c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d018      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a30      	ldr	r2, [pc, #192]	; (8002f08 <HAL_DMA_IRQHandler+0xe40>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <HAL_DMA_IRQHandler+0xe44>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00e      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2d      	ldr	r2, [pc, #180]	; (8002f10 <HAL_DMA_IRQHandler+0xe48>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2c      	ldr	r2, [pc, #176]	; (8002f14 <HAL_DMA_IRQHandler+0xe4c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d004      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xdaa>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <HAL_DMA_IRQHandler+0xe50>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d108      	bne.n	8002e84 <HAL_DMA_IRQHandler+0xdbc>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 021c 	bic.w	r2, r2, #28
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e007      	b.n	8002e94 <HAL_DMA_IRQHandler+0xdcc>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 020e 	bic.w	r2, r2, #14
 8002e92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
 8002eca:	e004      	b.n	8002ed6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002ecc:	bf00      	nop
 8002ece:	e002      	b.n	8002ed6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ed0:	bf00      	nop
 8002ed2:	e000      	b.n	8002ed6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ed4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002ed6:	3728      	adds	r7, #40	; 0x28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40020010 	.word	0x40020010
 8002ee0:	40020028 	.word	0x40020028
 8002ee4:	40020040 	.word	0x40020040
 8002ee8:	40020058 	.word	0x40020058
 8002eec:	40020070 	.word	0x40020070
 8002ef0:	40020088 	.word	0x40020088
 8002ef4:	400200a0 	.word	0x400200a0
 8002ef8:	400200b8 	.word	0x400200b8
 8002efc:	40020410 	.word	0x40020410
 8002f00:	40020428 	.word	0x40020428
 8002f04:	40020440 	.word	0x40020440
 8002f08:	40020458 	.word	0x40020458
 8002f0c:	40020470 	.word	0x40020470
 8002f10:	40020488 	.word	0x40020488
 8002f14:	400204a0 	.word	0x400204a0
 8002f18:	400204b8 	.word	0x400204b8

08002f1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a42      	ldr	r2, [pc, #264]	; (8003034 <DMA_CalcBaseAndBitshift+0x118>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d04a      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a41      	ldr	r2, [pc, #260]	; (8003038 <DMA_CalcBaseAndBitshift+0x11c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d045      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a3f      	ldr	r2, [pc, #252]	; (800303c <DMA_CalcBaseAndBitshift+0x120>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d040      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a3e      	ldr	r2, [pc, #248]	; (8003040 <DMA_CalcBaseAndBitshift+0x124>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d03b      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <DMA_CalcBaseAndBitshift+0x128>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d036      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a3b      	ldr	r2, [pc, #236]	; (8003048 <DMA_CalcBaseAndBitshift+0x12c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d031      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a39      	ldr	r2, [pc, #228]	; (800304c <DMA_CalcBaseAndBitshift+0x130>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d02c      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a38      	ldr	r2, [pc, #224]	; (8003050 <DMA_CalcBaseAndBitshift+0x134>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d027      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a36      	ldr	r2, [pc, #216]	; (8003054 <DMA_CalcBaseAndBitshift+0x138>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a35      	ldr	r2, [pc, #212]	; (8003058 <DMA_CalcBaseAndBitshift+0x13c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d01d      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a33      	ldr	r2, [pc, #204]	; (800305c <DMA_CalcBaseAndBitshift+0x140>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a32      	ldr	r2, [pc, #200]	; (8003060 <DMA_CalcBaseAndBitshift+0x144>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d013      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a30      	ldr	r2, [pc, #192]	; (8003064 <DMA_CalcBaseAndBitshift+0x148>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00e      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2f      	ldr	r2, [pc, #188]	; (8003068 <DMA_CalcBaseAndBitshift+0x14c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a2d      	ldr	r2, [pc, #180]	; (800306c <DMA_CalcBaseAndBitshift+0x150>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <DMA_CalcBaseAndBitshift+0x154>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <DMA_CalcBaseAndBitshift+0xac>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <DMA_CalcBaseAndBitshift+0xae>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d024      	beq.n	8003018 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	3b10      	subs	r3, #16
 8002fd6:	4a27      	ldr	r2, [pc, #156]	; (8003074 <DMA_CalcBaseAndBitshift+0x158>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	4a24      	ldr	r2, [pc, #144]	; (8003078 <DMA_CalcBaseAndBitshift+0x15c>)
 8002fe8:	5cd3      	ldrb	r3, [r2, r3]
 8002fea:	461a      	mov	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d908      	bls.n	8003008 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	; (800307c <DMA_CalcBaseAndBitshift+0x160>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	1d1a      	adds	r2, r3, #4
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	; 0x58
 8003006:	e00d      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	4b1b      	ldr	r3, [pc, #108]	; (800307c <DMA_CalcBaseAndBitshift+0x160>)
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6593      	str	r3, [r2, #88]	; 0x58
 8003016:	e005      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40020010 	.word	0x40020010
 8003038:	40020028 	.word	0x40020028
 800303c:	40020040 	.word	0x40020040
 8003040:	40020058 	.word	0x40020058
 8003044:	40020070 	.word	0x40020070
 8003048:	40020088 	.word	0x40020088
 800304c:	400200a0 	.word	0x400200a0
 8003050:	400200b8 	.word	0x400200b8
 8003054:	40020410 	.word	0x40020410
 8003058:	40020428 	.word	0x40020428
 800305c:	40020440 	.word	0x40020440
 8003060:	40020458 	.word	0x40020458
 8003064:	40020470 	.word	0x40020470
 8003068:	40020488 	.word	0x40020488
 800306c:	400204a0 	.word	0x400204a0
 8003070:	400204b8 	.word	0x400204b8
 8003074:	aaaaaaab 	.word	0xaaaaaaab
 8003078:	08013444 	.word	0x08013444
 800307c:	fffffc00 	.word	0xfffffc00

08003080 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d120      	bne.n	80030d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	2b03      	cmp	r3, #3
 800309a:	d858      	bhi.n	800314e <DMA_CheckFifoParam+0xce>
 800309c:	a201      	add	r2, pc, #4	; (adr r2, 80030a4 <DMA_CheckFifoParam+0x24>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	080030b5 	.word	0x080030b5
 80030a8:	080030c7 	.word	0x080030c7
 80030ac:	080030b5 	.word	0x080030b5
 80030b0:	0800314f 	.word	0x0800314f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d048      	beq.n	8003152 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030c4:	e045      	b.n	8003152 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030ce:	d142      	bne.n	8003156 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030d4:	e03f      	b.n	8003156 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030de:	d123      	bne.n	8003128 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d838      	bhi.n	800315a <DMA_CheckFifoParam+0xda>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <DMA_CheckFifoParam+0x70>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003101 	.word	0x08003101
 80030f4:	08003107 	.word	0x08003107
 80030f8:	08003101 	.word	0x08003101
 80030fc:	08003119 	.word	0x08003119
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
        break;
 8003104:	e030      	b.n	8003168 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d025      	beq.n	800315e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003116:	e022      	b.n	800315e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003120:	d11f      	bne.n	8003162 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003126:	e01c      	b.n	8003162 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	2b02      	cmp	r3, #2
 800312e:	d902      	bls.n	8003136 <DMA_CheckFifoParam+0xb6>
 8003130:	2b03      	cmp	r3, #3
 8003132:	d003      	beq.n	800313c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003134:	e018      	b.n	8003168 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
        break;
 800313a:	e015      	b.n	8003168 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00e      	beq.n	8003166 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
    break;
 800314c:	e00b      	b.n	8003166 <DMA_CheckFifoParam+0xe6>
        break;
 800314e:	bf00      	nop
 8003150:	e00a      	b.n	8003168 <DMA_CheckFifoParam+0xe8>
        break;
 8003152:	bf00      	nop
 8003154:	e008      	b.n	8003168 <DMA_CheckFifoParam+0xe8>
        break;
 8003156:	bf00      	nop
 8003158:	e006      	b.n	8003168 <DMA_CheckFifoParam+0xe8>
        break;
 800315a:	bf00      	nop
 800315c:	e004      	b.n	8003168 <DMA_CheckFifoParam+0xe8>
        break;
 800315e:	bf00      	nop
 8003160:	e002      	b.n	8003168 <DMA_CheckFifoParam+0xe8>
        break;
 8003162:	bf00      	nop
 8003164:	e000      	b.n	8003168 <DMA_CheckFifoParam+0xe8>
    break;
 8003166:	bf00      	nop
    }
  }

  return status;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop

08003178 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a38      	ldr	r2, [pc, #224]	; (800326c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d022      	beq.n	80031d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a36      	ldr	r2, [pc, #216]	; (8003270 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a35      	ldr	r2, [pc, #212]	; (8003274 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d018      	beq.n	80031d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a33      	ldr	r2, [pc, #204]	; (8003278 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a32      	ldr	r2, [pc, #200]	; (800327c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a30      	ldr	r2, [pc, #192]	; (8003280 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2d      	ldr	r2, [pc, #180]	; (8003288 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01a      	beq.n	8003216 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	3b08      	subs	r3, #8
 80031e8:	4a28      	ldr	r2, [pc, #160]	; (800328c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4b26      	ldr	r3, [pc, #152]	; (8003290 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	461a      	mov	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a24      	ldr	r2, [pc, #144]	; (8003294 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003204:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	2201      	movs	r2, #1
 800320e:	409a      	lsls	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003214:	e024      	b.n	8003260 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	3b10      	subs	r3, #16
 800321e:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4a1c      	ldr	r2, [pc, #112]	; (800329c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d806      	bhi.n	800323e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d902      	bls.n	800323e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3308      	adds	r3, #8
 800323c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	461a      	mov	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003250:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2201      	movs	r2, #1
 800325a:	409a      	lsls	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	58025408 	.word	0x58025408
 8003270:	5802541c 	.word	0x5802541c
 8003274:	58025430 	.word	0x58025430
 8003278:	58025444 	.word	0x58025444
 800327c:	58025458 	.word	0x58025458
 8003280:	5802546c 	.word	0x5802546c
 8003284:	58025480 	.word	0x58025480
 8003288:	58025494 	.word	0x58025494
 800328c:	cccccccd 	.word	0xcccccccd
 8003290:	16009600 	.word	0x16009600
 8003294:	58025880 	.word	0x58025880
 8003298:	aaaaaaab 	.word	0xaaaaaaab
 800329c:	400204b8 	.word	0x400204b8
 80032a0:	4002040f 	.word	0x4002040f
 80032a4:	10008200 	.word	0x10008200
 80032a8:	40020880 	.word	0x40020880

080032ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d04a      	beq.n	8003358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d847      	bhi.n	8003358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a25      	ldr	r2, [pc, #148]	; (8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d022      	beq.n	8003318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a24      	ldr	r2, [pc, #144]	; (8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d01d      	beq.n	8003318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a22      	ldr	r2, [pc, #136]	; (800336c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d018      	beq.n	8003318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a21      	ldr	r2, [pc, #132]	; (8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d013      	beq.n	8003318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00e      	beq.n	8003318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d009      	beq.n	8003318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1c      	ldr	r2, [pc, #112]	; (800337c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d004      	beq.n	8003318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800331c:	2300      	movs	r3, #0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4b17      	ldr	r3, [pc, #92]	; (8003384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	461a      	mov	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a15      	ldr	r2, [pc, #84]	; (8003388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003334:	671a      	str	r2, [r3, #112]	; 0x70
 8003336:	e009      	b.n	800334c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	461a      	mov	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a11      	ldr	r2, [pc, #68]	; (8003390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800334a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3b01      	subs	r3, #1
 8003350:	2201      	movs	r2, #1
 8003352:	409a      	lsls	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	58025408 	.word	0x58025408
 8003368:	5802541c 	.word	0x5802541c
 800336c:	58025430 	.word	0x58025430
 8003370:	58025444 	.word	0x58025444
 8003374:	58025458 	.word	0x58025458
 8003378:	5802546c 	.word	0x5802546c
 800337c:	58025480 	.word	0x58025480
 8003380:	58025494 	.word	0x58025494
 8003384:	1600963f 	.word	0x1600963f
 8003388:	58025940 	.word	0x58025940
 800338c:	1000823f 	.word	0x1000823f
 8003390:	40020940 	.word	0x40020940

08003394 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b098      	sub	sp, #96	; 0x60
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800339c:	4a84      	ldr	r2, [pc, #528]	; (80035b0 <HAL_FDCAN_Init+0x21c>)
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	4611      	mov	r1, r2
 80033a4:	224c      	movs	r2, #76	; 0x4c
 80033a6:	4618      	mov	r0, r3
 80033a8:	f00f fbae 	bl	8012b08 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e1ca      	b.n	800374c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7e      	ldr	r2, [pc, #504]	; (80035b4 <HAL_FDCAN_Init+0x220>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d106      	bne.n	80033ce <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033c8:	461a      	mov	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fe1a 	bl	800101c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0210 	bic.w	r2, r2, #16
 80033f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f8:	f7fe f9c0 	bl	800177c <HAL_GetTick>
 80033fc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80033fe:	e014      	b.n	800342a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003400:	f7fe f9bc 	bl	800177c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b0a      	cmp	r3, #10
 800340c:	d90d      	bls.n	800342a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003414:	f043 0201 	orr.w	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2203      	movs	r2, #3
 8003422:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e190      	b.n	800374c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d0e3      	beq.n	8003400 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003448:	f7fe f998 	bl	800177c <HAL_GetTick>
 800344c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800344e:	e014      	b.n	800347a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003450:	f7fe f994 	bl	800177c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b0a      	cmp	r3, #10
 800345c:	d90d      	bls.n	800347a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2203      	movs	r2, #3
 8003472:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e168      	b.n	800374c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0e3      	beq.n	8003450 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0202 	orr.w	r2, r2, #2
 8003496:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7c1b      	ldrb	r3, [r3, #16]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d108      	bne.n	80034b2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ae:	619a      	str	r2, [r3, #24]
 80034b0:	e007      	b.n	80034c2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7c5b      	ldrb	r3, [r3, #17]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d108      	bne.n	80034dc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034d8:	619a      	str	r2, [r3, #24]
 80034da:	e007      	b.n	80034ec <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7c9b      	ldrb	r3, [r3, #18]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d108      	bne.n	8003506 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003502:	619a      	str	r2, [r3, #24]
 8003504:	e007      	b.n	8003516 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003514:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800353a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0210 	bic.w	r2, r2, #16
 800354a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d108      	bne.n	8003566 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0204 	orr.w	r2, r2, #4
 8003562:	619a      	str	r2, [r3, #24]
 8003564:	e030      	b.n	80035c8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02c      	beq.n	80035c8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d020      	beq.n	80035b8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003584:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0210 	orr.w	r2, r2, #16
 8003594:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d114      	bne.n	80035c8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0220 	orr.w	r2, r2, #32
 80035ac:	619a      	str	r2, [r3, #24]
 80035ae:	e00b      	b.n	80035c8 <HAL_FDCAN_Init+0x234>
 80035b0:	08013350 	.word	0x08013350
 80035b4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0220 	orr.w	r2, r2, #32
 80035c6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035d8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035e0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035f0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035f2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035fc:	d115      	bne.n	800362a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	3b01      	subs	r3, #1
 800360a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800360c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	3b01      	subs	r3, #1
 8003614:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003616:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	3b01      	subs	r3, #1
 8003620:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003626:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003628:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003650:	4413      	add	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d012      	beq.n	800367c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800365e:	f023 0107 	bic.w	r1, r3, #7
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800366c:	4413      	add	r3, r2
 800366e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d012      	beq.n	80036aa <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800368c:	f023 0107 	bic.w	r1, r3, #7
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800369a:	4413      	add	r3, r2
 800369c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d013      	beq.n	80036da <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036ba:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036c8:	4413      	add	r3, r2
 80036ca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80036ce:	011a      	lsls	r2, r3, #4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d013      	beq.n	800370a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036ea:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036f8:	4413      	add	r3, r2
 80036fa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80036fe:	021a      	lsls	r2, r3, #8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a11      	ldr	r2, [pc, #68]	; (8003754 <HAL_FDCAN_Init+0x3c0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d107      	bne.n	8003724 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f022 0203 	bic.w	r2, r2, #3
 8003722:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f80b 	bl	8003758 <FDCAN_CalcultateRamBlockAddresses>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003748:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800374c:	4618      	mov	r0, r3
 800374e:	3760      	adds	r7, #96	; 0x60
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	4000a000 	.word	0x4000a000

08003758 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003764:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800376e:	4ba7      	ldr	r3, [pc, #668]	; (8003a0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003770:	4013      	ands	r3, r2
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	0091      	lsls	r1, r2, #2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	430b      	orrs	r3, r1
 800377c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003788:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	041a      	lsls	r2, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	4413      	add	r3, r2
 80037a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037ae:	4b97      	ldr	r3, [pc, #604]	; (8003a0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	0091      	lsls	r1, r2, #2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	430b      	orrs	r3, r1
 80037bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	041a      	lsls	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	4413      	add	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80037f0:	4b86      	ldr	r3, [pc, #536]	; (8003a0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	0091      	lsls	r1, r2, #2
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800380a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	041a      	lsls	r2, r3, #16
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4413      	add	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003838:	4b74      	ldr	r3, [pc, #464]	; (8003a0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800383a:	4013      	ands	r3, r2
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	0091      	lsls	r1, r2, #2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003852:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	041a      	lsls	r2, r3, #16
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	4413      	add	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003880:	4b62      	ldr	r3, [pc, #392]	; (8003a0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003882:	4013      	ands	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	0091      	lsls	r1, r2, #2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	430b      	orrs	r3, r1
 800388e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	4413      	add	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80038ac:	4b57      	ldr	r3, [pc, #348]	; (8003a0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	0091      	lsls	r1, r2, #2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	430b      	orrs	r3, r1
 80038ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038c6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	041a      	lsls	r2, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	4413      	add	r3, r2
 80038e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	0091      	lsls	r1, r2, #2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	430b      	orrs	r3, r1
 80038fc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003908:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003910:	041a      	lsls	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003924:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392c:	061a      	lsls	r2, r3, #24
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800393c:	4b34      	ldr	r3, [pc, #208]	; (8003a10 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800393e:	4413      	add	r3, r2
 8003940:	009a      	lsls	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	441a      	add	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	441a      	add	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	441a      	add	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	441a      	add	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	441a      	add	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	441a      	add	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d915      	bls.n	8003a34 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003a08:	e006      	b.n	8003a18 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003a0a:	bf00      	nop
 8003a0c:	ffff0003 	.word	0xffff0003
 8003a10:	10002b00 	.word	0x10002b00
 8003a14:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e010      	b.n	8003a56 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e005      	b.n	8003a48 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3304      	adds	r3, #4
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d3f3      	bcc.n	8003a3c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop

08003a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	; 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a72:	4b89      	ldr	r3, [pc, #548]	; (8003c98 <HAL_GPIO_Init+0x234>)
 8003a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a76:	e194      	b.n	8003da2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fa01 f303 	lsl.w	r3, r1, r3
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8186 	beq.w	8003d9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d00b      	beq.n	8003ab0 <HAL_GPIO_Init+0x4c>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d007      	beq.n	8003ab0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003aa4:	2b11      	cmp	r3, #17
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b12      	cmp	r3, #18
 8003aae:	d130      	bne.n	8003b12 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	f003 0201 	and.w	r2, r3, #1
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0xee>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b12      	cmp	r3, #18
 8003b50:	d123      	bne.n	8003b9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	08da      	lsrs	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3208      	adds	r2, #8
 8003b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	220f      	movs	r2, #15
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	08da      	lsrs	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3208      	adds	r2, #8
 8003b94:	69b9      	ldr	r1, [r7, #24]
 8003b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 0203 	and.w	r2, r3, #3
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80e0 	beq.w	8003d9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bdc:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <HAL_GPIO_Init+0x238>)
 8003bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003be2:	4a2e      	ldr	r2, [pc, #184]	; (8003c9c <HAL_GPIO_Init+0x238>)
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003bec:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <HAL_GPIO_Init+0x238>)
 8003bee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bfa:	4a29      	ldr	r2, [pc, #164]	; (8003ca0 <HAL_GPIO_Init+0x23c>)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	3302      	adds	r3, #2
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	220f      	movs	r2, #15
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a20      	ldr	r2, [pc, #128]	; (8003ca4 <HAL_GPIO_Init+0x240>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d052      	beq.n	8003ccc <HAL_GPIO_Init+0x268>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <HAL_GPIO_Init+0x244>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d031      	beq.n	8003c92 <HAL_GPIO_Init+0x22e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1e      	ldr	r2, [pc, #120]	; (8003cac <HAL_GPIO_Init+0x248>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d02b      	beq.n	8003c8e <HAL_GPIO_Init+0x22a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <HAL_GPIO_Init+0x24c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d025      	beq.n	8003c8a <HAL_GPIO_Init+0x226>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <HAL_GPIO_Init+0x250>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01f      	beq.n	8003c86 <HAL_GPIO_Init+0x222>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_GPIO_Init+0x254>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d019      	beq.n	8003c82 <HAL_GPIO_Init+0x21e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1a      	ldr	r2, [pc, #104]	; (8003cbc <HAL_GPIO_Init+0x258>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_GPIO_Init+0x21a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <HAL_GPIO_Init+0x25c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00d      	beq.n	8003c7a <HAL_GPIO_Init+0x216>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <HAL_GPIO_Init+0x260>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <HAL_GPIO_Init+0x212>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <HAL_GPIO_Init+0x264>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d101      	bne.n	8003c72 <HAL_GPIO_Init+0x20e>
 8003c6e:	2309      	movs	r3, #9
 8003c70:	e02d      	b.n	8003cce <HAL_GPIO_Init+0x26a>
 8003c72:	230a      	movs	r3, #10
 8003c74:	e02b      	b.n	8003cce <HAL_GPIO_Init+0x26a>
 8003c76:	2308      	movs	r3, #8
 8003c78:	e029      	b.n	8003cce <HAL_GPIO_Init+0x26a>
 8003c7a:	2307      	movs	r3, #7
 8003c7c:	e027      	b.n	8003cce <HAL_GPIO_Init+0x26a>
 8003c7e:	2306      	movs	r3, #6
 8003c80:	e025      	b.n	8003cce <HAL_GPIO_Init+0x26a>
 8003c82:	2305      	movs	r3, #5
 8003c84:	e023      	b.n	8003cce <HAL_GPIO_Init+0x26a>
 8003c86:	2304      	movs	r3, #4
 8003c88:	e021      	b.n	8003cce <HAL_GPIO_Init+0x26a>
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e01f      	b.n	8003cce <HAL_GPIO_Init+0x26a>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e01d      	b.n	8003cce <HAL_GPIO_Init+0x26a>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e01b      	b.n	8003cce <HAL_GPIO_Init+0x26a>
 8003c96:	bf00      	nop
 8003c98:	58000080 	.word	0x58000080
 8003c9c:	58024400 	.word	0x58024400
 8003ca0:	58000400 	.word	0x58000400
 8003ca4:	58020000 	.word	0x58020000
 8003ca8:	58020400 	.word	0x58020400
 8003cac:	58020800 	.word	0x58020800
 8003cb0:	58020c00 	.word	0x58020c00
 8003cb4:	58021000 	.word	0x58021000
 8003cb8:	58021400 	.word	0x58021400
 8003cbc:	58021800 	.word	0x58021800
 8003cc0:	58021c00 	.word	0x58021c00
 8003cc4:	58022000 	.word	0x58022000
 8003cc8:	58022400 	.word	0x58022400
 8003ccc:	2300      	movs	r3, #0
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	f002 0203 	and.w	r2, r2, #3
 8003cd4:	0092      	lsls	r2, r2, #2
 8003cd6:	4093      	lsls	r3, r2
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cde:	4938      	ldr	r1, [pc, #224]	; (8003dc0 <HAL_GPIO_Init+0x35c>)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f47f ae63 	bne.w	8003a78 <HAL_GPIO_Init+0x14>
  }
}
 8003db2:	bf00      	nop
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	58000400 	.word	0x58000400

08003dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	807b      	strh	r3, [r7, #2]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dd4:	787b      	ldrb	r3, [r7, #1]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dda:	887a      	ldrh	r2, [r7, #2]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003de0:	e003      	b.n	8003dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	041a      	lsls	r2, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	619a      	str	r2, [r3, #24]
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	887b      	ldrh	r3, [r7, #2]
 8003e08:	401a      	ands	r2, r3
 8003e0a:	887b      	ldrh	r3, [r7, #2]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d104      	bne.n	8003e1a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e10:	887b      	ldrh	r3, [r7, #2]
 8003e12:	041a      	lsls	r2, r3, #16
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003e18:	e002      	b.n	8003e20 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	619a      	str	r2, [r3, #24]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2e:	b08f      	sub	sp, #60	; 0x3c
 8003e30:	af0a      	add	r7, sp, #40	; 0x28
 8003e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e116      	b.n	800406c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f00e fafd 	bl	8012458 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2203      	movs	r2, #3
 8003e62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f007 fd04 	bl	800b88a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	687e      	ldr	r6, [r7, #4]
 8003e8a:	466d      	mov	r5, sp
 8003e8c:	f106 0410 	add.w	r4, r6, #16
 8003e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ea0:	1d33      	adds	r3, r6, #4
 8003ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ea4:	6838      	ldr	r0, [r7, #0]
 8003ea6:	f007 fbdb 	bl	800b660 <USB_CoreInit>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0d7      	b.n	800406c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f007 fcf2 	bl	800b8ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]
 8003ecc:	e04a      	b.n	8003f64 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	333d      	adds	r3, #61	; 0x3d
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ee2:	7bfa      	ldrb	r2, [r7, #15]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	333c      	adds	r3, #60	; 0x3c
 8003ef2:	7bfa      	ldrb	r2, [r7, #15]
 8003ef4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	b298      	uxth	r0, r3
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	3342      	adds	r3, #66	; 0x42
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	333f      	adds	r3, #63	; 0x3f
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f22:	7bfa      	ldrb	r2, [r7, #15]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	3344      	adds	r3, #68	; 0x44
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	3348      	adds	r3, #72	; 0x48
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	3350      	adds	r3, #80	; 0x50
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	3301      	adds	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d3af      	bcc.n	8003ece <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
 8003f72:	e044      	b.n	8003ffe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003f86:	2200      	movs	r2, #0
 8003f88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fa0:	7bfa      	ldrb	r2, [r7, #15]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fb6:	7bfa      	ldrb	r2, [r7, #15]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fe2:	7bfa      	ldrb	r2, [r7, #15]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	73fb      	strb	r3, [r7, #15]
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	d3b5      	bcc.n	8003f74 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	687e      	ldr	r6, [r7, #4]
 8004010:	466d      	mov	r5, sp
 8004012:	f106 0410 	add.w	r4, r6, #16
 8004016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800401a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800401c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800401e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004022:	e885 0003 	stmia.w	r5, {r0, r1}
 8004026:	1d33      	adds	r3, r6, #4
 8004028:	cb0e      	ldmia	r3, {r1, r2, r3}
 800402a:	6838      	ldr	r0, [r7, #0]
 800402c:	f007 fc68 	bl	800b900 <USB_DevInit>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2202      	movs	r2, #2
 800403a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e014      	b.n	800406c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	2b01      	cmp	r3, #1
 8004058:	d102      	bne.n	8004060 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f001 f8be 	bl	80051dc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f008 fca7 	bl	800c9b8 <USB_DevDisconnect>

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004074 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_PCD_Start+0x1c>
 800408c:	2302      	movs	r3, #2
 800408e:	e020      	b.n	80040d2 <HAL_PCD_Start+0x5e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	2b01      	cmp	r3, #1
 800409e:	d109      	bne.n	80040b4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d005      	beq.n	80040b4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f008 fc65 	bl	800c988 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f007 fbd0 	bl	800b868 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040da:	b590      	push	{r4, r7, lr}
 80040dc:	b08d      	sub	sp, #52	; 0x34
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f008 fd0c 	bl	800cb0e <USB_GetMode>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f040 83ca 	bne.w	8004892 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f008 fc70 	bl	800c9e8 <USB_ReadInterrupts>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 83c0 	beq.w	8004890 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f008 fc67 	bl	800c9e8 <USB_ReadInterrupts>
 800411a:	4603      	mov	r3, r0
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b02      	cmp	r3, #2
 8004122:	d107      	bne.n	8004134 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f002 0202 	and.w	r2, r2, #2
 8004132:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f008 fc55 	bl	800c9e8 <USB_ReadInterrupts>
 800413e:	4603      	mov	r3, r0
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b10      	cmp	r3, #16
 8004146:	d161      	bne.n	800420c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0210 	bic.w	r2, r2, #16
 8004156:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f003 020f 	and.w	r2, r3, #15
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	3304      	adds	r3, #4
 8004176:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	0c5b      	lsrs	r3, r3, #17
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	2b02      	cmp	r3, #2
 8004182:	d124      	bne.n	80041ce <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d035      	beq.n	80041fc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800419a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800419e:	b29b      	uxth	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	6a38      	ldr	r0, [r7, #32]
 80041a4:	f008 facd 	bl	800c742 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041b4:	441a      	add	r2, r3
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041c6:	441a      	add	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	619a      	str	r2, [r3, #24]
 80041cc:	e016      	b.n	80041fc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	0c5b      	lsrs	r3, r3, #17
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d110      	bne.n	80041fc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041e0:	2208      	movs	r2, #8
 80041e2:	4619      	mov	r1, r3
 80041e4:	6a38      	ldr	r0, [r7, #32]
 80041e6:	f008 faac 	bl	800c742 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f6:	441a      	add	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0210 	orr.w	r2, r2, #16
 800420a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f008 fbe9 	bl	800c9e8 <USB_ReadInterrupts>
 8004216:	4603      	mov	r3, r0
 8004218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800421c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004220:	d16e      	bne.n	8004300 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f008 fbef 	bl	800ca0e <USB_ReadDevAllOutEpInterrupt>
 8004230:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004232:	e062      	b.n	80042fa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d057      	beq.n	80042ee <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f008 fc14 	bl	800ca76 <USB_ReadDevOutEPInterrupt>
 800424e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00c      	beq.n	8004274 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	461a      	mov	r2, r3
 8004268:	2301      	movs	r3, #1
 800426a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800426c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fe0a 	bl	8004e88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00c      	beq.n	8004298 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428a:	461a      	mov	r2, r3
 800428c:	2308      	movs	r3, #8
 800428e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 ff04 	bl	80050a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ae:	461a      	mov	r2, r3
 80042b0:	2310      	movs	r3, #16
 80042b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ca:	461a      	mov	r2, r3
 80042cc:	2320      	movs	r3, #32
 80042ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	461a      	mov	r2, r3
 80042e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	3301      	adds	r3, #1
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d199      	bne.n	8004234 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f008 fb6f 	bl	800c9e8 <USB_ReadInterrupts>
 800430a:	4603      	mov	r3, r0
 800430c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004314:	f040 80c0 	bne.w	8004498 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f008 fb90 	bl	800ca42 <USB_ReadDevAllInEpInterrupt>
 8004322:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004328:	e0b2      	b.n	8004490 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80a7 	beq.w	8004484 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	4611      	mov	r1, r2
 8004340:	4618      	mov	r0, r3
 8004342:	f008 fbb6 	bl	800cab2 <USB_ReadDevInEPInterrupt>
 8004346:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d057      	beq.n	8004402 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	2201      	movs	r2, #1
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	43db      	mvns	r3, r3
 800436c:	69f9      	ldr	r1, [r7, #28]
 800436e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004372:	4013      	ands	r3, r2
 8004374:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	461a      	mov	r2, r3
 8004384:	2301      	movs	r3, #1
 8004386:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d132      	bne.n	80043f6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	3348      	adds	r3, #72	; 0x48
 80043a0:	6819      	ldr	r1, [r3, #0]
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a6:	4613      	mov	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4403      	add	r3, r0
 80043b0:	3344      	adds	r3, #68	; 0x44
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4419      	add	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ba:	4613      	mov	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4403      	add	r3, r0
 80043c4:	3348      	adds	r3, #72	; 0x48
 80043c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d113      	bne.n	80043f6 <HAL_PCD_IRQHandler+0x31c>
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	4613      	mov	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	3350      	adds	r3, #80	; 0x50
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d108      	bne.n	80043f6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043ee:	461a      	mov	r2, r3
 80043f0:	2101      	movs	r1, #1
 80043f2:	f008 fbbf 	bl	800cb74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	4619      	mov	r1, r3
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f00e f8aa 	bl	8012556 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004418:	461a      	mov	r2, r3
 800441a:	2308      	movs	r3, #8
 800441c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	461a      	mov	r2, r3
 8004436:	2310      	movs	r3, #16
 8004438:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004450:	461a      	mov	r2, r3
 8004452:	2340      	movs	r3, #64	; 0x40
 8004454:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	461a      	mov	r2, r3
 800446e:	2302      	movs	r3, #2
 8004470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800447c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fc75 	bl	8004d6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	3301      	adds	r3, #1
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	f47f af49 	bne.w	800432a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f008 faa3 	bl	800c9e8 <USB_ReadInterrupts>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ac:	d122      	bne.n	80044f4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d108      	bne.n	80044de <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044d4:	2100      	movs	r1, #0
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fea4 	bl	8005224 <HAL_PCDEx_LPM_Callback>
 80044dc:	e002      	b.n	80044e4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f00e f8b0 	bl	8012644 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80044f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f008 fa75 	bl	800c9e8 <USB_ReadInterrupts>
 80044fe:	4603      	mov	r3, r0
 8004500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004508:	d112      	bne.n	8004530 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d102      	bne.n	8004520 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f00e f86c 	bl	80125f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800452e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f008 fa57 	bl	800c9e8 <USB_ReadInterrupts>
 800453a:	4603      	mov	r3, r0
 800453c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004544:	d121      	bne.n	800458a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004554:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d111      	bne.n	8004584 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	f003 020f 	and.w	r2, r3, #15
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800457a:	2101      	movs	r1, #1
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fe51 	bl	8005224 <HAL_PCDEx_LPM_Callback>
 8004582:	e002      	b.n	800458a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f00e f837 	bl	80125f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f008 fa2a 	bl	800c9e8 <USB_ReadInterrupts>
 8004594:	4603      	mov	r3, r0
 8004596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459e:	f040 80c7 	bne.w	8004730 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2110      	movs	r1, #16
 80045bc:	4618      	mov	r0, r3
 80045be:	f007 fafd 	bl	800bbbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c2:	2300      	movs	r3, #0
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c6:	e056      	b.n	8004676 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ec:	0151      	lsls	r1, r2, #5
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	440a      	add	r2, r1
 80045f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045fa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	440a      	add	r2, r1
 8004612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800461a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	461a      	mov	r2, r3
 800462a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800462e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800464e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	440a      	add	r2, r1
 8004666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800466e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	3301      	adds	r3, #1
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800467c:	429a      	cmp	r2, r3
 800467e:	d3a3      	bcc.n	80045c8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800468e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004692:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	2b00      	cmp	r3, #0
 800469a:	d016      	beq.n	80046ca <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ac:	f043 030b 	orr.w	r3, r3, #11
 80046b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c2:	f043 030b 	orr.w	r3, r3, #11
 80046c6:	6453      	str	r3, [r2, #68]	; 0x44
 80046c8:	e015      	b.n	80046f6 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d8:	4619      	mov	r1, r3
 80046da:	f242 032b 	movw	r3, #8235	; 0x202b
 80046de:	4313      	orrs	r3, r2
 80046e0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f0:	f043 030b 	orr.w	r3, r3, #11
 80046f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004704:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004708:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800471a:	461a      	mov	r2, r3
 800471c:	f008 fa2a 	bl	800cb74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800472e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f008 f957 	bl	800c9e8 <USB_ReadInterrupts>
 800473a:	4603      	mov	r3, r0
 800473c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004744:	d124      	bne.n	8004790 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f008 f9ee 	bl	800cb2c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f007 fa92 	bl	800bc7e <USB_GetDevSpeed>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681c      	ldr	r4, [r3, #0]
 8004766:	f001 fcfb 	bl	8006160 <HAL_RCC_GetHCLKFreq>
 800476a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	4620      	mov	r0, r4
 8004776:	f006 ffd5 	bl	800b724 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f00d ff13 	bl	80125a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800478e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f008 f927 	bl	800c9e8 <USB_ReadInterrupts>
 800479a:	4603      	mov	r3, r0
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d10a      	bne.n	80047ba <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f00d fef0 	bl	801258a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695a      	ldr	r2, [r3, #20]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f002 0208 	and.w	r2, r2, #8
 80047b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f008 f912 	bl	800c9e8 <USB_ReadInterrupts>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ce:	d10f      	bne.n	80047f0 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	4619      	mov	r1, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f00d ff52 	bl	8012684 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80047ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f008 f8f7 	bl	800c9e8 <USB_ReadInterrupts>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004800:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004804:	d10f      	bne.n	8004826 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	b2db      	uxtb	r3, r3
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f00d ff25 	bl	8012660 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695a      	ldr	r2, [r3, #20]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f008 f8dc 	bl	800c9e8 <USB_ReadInterrupts>
 8004830:	4603      	mov	r3, r0
 8004832:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483a:	d10a      	bne.n	8004852 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f00d ff33 	bl	80126a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f008 f8c6 	bl	800c9e8 <USB_ReadInterrupts>
 800485c:	4603      	mov	r3, r0
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b04      	cmp	r3, #4
 8004864:	d115      	bne.n	8004892 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f00d ff23 	bl	80126c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	e000      	b.n	8004892 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004890:	bf00      	nop
    }
  }
}
 8004892:	3734      	adds	r7, #52	; 0x34
 8004894:	46bd      	mov	sp, r7
 8004896:	bd90      	pop	{r4, r7, pc}

08004898 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_PCD_SetAddress+0x1a>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e013      	b.n	80048da <HAL_PCD_SetAddress+0x42>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f008 f836 	bl	800c93c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	4608      	mov	r0, r1
 80048ec:	4611      	mov	r1, r2
 80048ee:	461a      	mov	r2, r3
 80048f0:	4603      	mov	r3, r0
 80048f2:	70fb      	strb	r3, [r7, #3]
 80048f4:	460b      	mov	r3, r1
 80048f6:	803b      	strh	r3, [r7, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004904:	2b00      	cmp	r3, #0
 8004906:	da0f      	bge.n	8004928 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	f003 020f 	and.w	r2, r3, #15
 800490e:	4613      	mov	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	3338      	adds	r3, #56	; 0x38
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4413      	add	r3, r2
 800491c:	3304      	adds	r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	705a      	strb	r2, [r3, #1]
 8004926:	e00f      	b.n	8004948 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	f003 020f 	and.w	r2, r3, #15
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	3304      	adds	r3, #4
 8004940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004954:	883a      	ldrh	r2, [r7, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	78ba      	ldrb	r2, [r7, #2]
 800495e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	785b      	ldrb	r3, [r3, #1]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004972:	78bb      	ldrb	r3, [r7, #2]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d102      	bne.n	800497e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_PCD_EP_Open+0xaa>
 8004988:	2302      	movs	r3, #2
 800498a:	e00e      	b.n	80049aa <HAL_PCD_EP_Open+0xc8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68f9      	ldr	r1, [r7, #12]
 800499a:	4618      	mov	r0, r3
 800499c:	f007 f994 	bl	800bcc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80049a8:	7afb      	ldrb	r3, [r7, #11]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	da0f      	bge.n	80049e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	f003 020f 	and.w	r2, r3, #15
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	3338      	adds	r3, #56	; 0x38
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	4413      	add	r3, r2
 80049da:	3304      	adds	r3, #4
 80049dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	705a      	strb	r2, [r3, #1]
 80049e4:	e00f      	b.n	8004a06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	f003 020f 	and.w	r2, r3, #15
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	4413      	add	r3, r2
 80049fc:	3304      	adds	r3, #4
 80049fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_PCD_EP_Close+0x6e>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e00e      	b.n	8004a3e <HAL_PCD_EP_Close+0x8c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f007 f9d2 	bl	800bdd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b086      	sub	sp, #24
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
 8004a52:	460b      	mov	r3, r1
 8004a54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	f003 020f 	and.w	r2, r3, #15
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2200      	movs	r2, #0
 8004a86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a88:	7afb      	ldrb	r3, [r7, #11]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d102      	bne.n	8004aa2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004aa2:	7afb      	ldrb	r3, [r7, #11]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d109      	bne.n	8004ac0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	6979      	ldr	r1, [r7, #20]
 8004aba:	f007 fcb5 	bl	800c428 <USB_EP0StartXfer>
 8004abe:	e008      	b.n	8004ad2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	6979      	ldr	r1, [r7, #20]
 8004ace:	f007 fa5f 	bl	800bf90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	f003 020f 	and.w	r2, r3, #15
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b1c:	7afb      	ldrb	r3, [r7, #11]
 8004b1e:	f003 020f 	and.w	r2, r3, #15
 8004b22:	4613      	mov	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	3338      	adds	r3, #56	; 0x38
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	3304      	adds	r3, #4
 8004b32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2200      	movs	r2, #0
 8004b44:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b4c:	7afb      	ldrb	r3, [r7, #11]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d102      	bne.n	8004b66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b66:	7afb      	ldrb	r3, [r7, #11]
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	6979      	ldr	r1, [r7, #20]
 8004b7e:	f007 fc53 	bl	800c428 <USB_EP0StartXfer>
 8004b82:	e008      	b.n	8004b96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6979      	ldr	r1, [r7, #20]
 8004b92:	f007 f9fd 	bl	800bf90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	f003 020f 	and.w	r2, r3, #15
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d901      	bls.n	8004bbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e050      	b.n	8004c60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	da0f      	bge.n	8004be6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	f003 020f 	and.w	r2, r3, #15
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	3338      	adds	r3, #56	; 0x38
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	3304      	adds	r3, #4
 8004bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	705a      	strb	r2, [r3, #1]
 8004be4:	e00d      	b.n	8004c02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_PCD_EP_SetStall+0x82>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e01e      	b.n	8004c60 <HAL_PCD_EP_SetStall+0xc0>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f007 fdaf 	bl	800c794 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	b2d9      	uxtb	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c50:	461a      	mov	r2, r3
 8004c52:	f007 ff8f 	bl	800cb74 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	f003 020f 	and.w	r2, r3, #15
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d901      	bls.n	8004c86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e042      	b.n	8004d0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	da0f      	bge.n	8004cae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	f003 020f 	and.w	r2, r3, #15
 8004c94:	4613      	mov	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	3338      	adds	r3, #56	; 0x38
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	705a      	strb	r2, [r3, #1]
 8004cac:	e00f      	b.n	8004cce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 020f 	and.w	r2, r3, #15
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_PCD_EP_ClrStall+0x86>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e00e      	b.n	8004d0c <HAL_PCD_EP_ClrStall+0xa4>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f007 fdb7 	bl	800c870 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_PCD_EP_Flush+0x1a>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e01b      	b.n	8004d66 <HAL_PCD_EP_Flush+0x52>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da09      	bge.n	8004d52 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f006 ff36 	bl	800bbbc <USB_FlushTxFifo>
 8004d50:	e004      	b.n	8004d5c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f006 ff56 	bl	800bc08 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b08a      	sub	sp, #40	; 0x28
 8004d72:	af02      	add	r7, sp, #8
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	3338      	adds	r3, #56	; 0x38
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	3304      	adds	r3, #4
 8004d94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d901      	bls.n	8004da6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e06c      	b.n	8004e80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d902      	bls.n	8004dc2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3303      	adds	r3, #3
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dca:	e02b      	b.n	8004e24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d902      	bls.n	8004de8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	3303      	adds	r3, #3
 8004dec:	089b      	lsrs	r3, r3, #2
 8004dee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	68d9      	ldr	r1, [r3, #12]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	4603      	mov	r3, r0
 8004e06:	6978      	ldr	r0, [r7, #20]
 8004e08:	f007 fc66 	bl	800c6d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	699a      	ldr	r2, [r3, #24]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	441a      	add	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d809      	bhi.n	8004e4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d203      	bcs.n	8004e4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1be      	bne.n	8004dcc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d811      	bhi.n	8004e7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	2201      	movs	r2, #1
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	43db      	mvns	r3, r3
 8004e74:	6939      	ldr	r1, [r7, #16]
 8004e76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3720      	adds	r7, #32
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	333c      	adds	r3, #60	; 0x3c
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	f040 80a0 	bne.w	8005000 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d015      	beq.n	8004ef6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a72      	ldr	r2, [pc, #456]	; (8005098 <PCD_EP_OutXfrComplete_int+0x210>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	f240 80dd 	bls.w	800508e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 80d7 	beq.w	800508e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eec:	461a      	mov	r2, r3
 8004eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef2:	6093      	str	r3, [r2, #8]
 8004ef4:	e0cb      	b.n	800508e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d009      	beq.n	8004f14 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2320      	movs	r3, #32
 8004f10:	6093      	str	r3, [r2, #8]
 8004f12:	e0bc      	b.n	800508e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f040 80b7 	bne.w	800508e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4a5d      	ldr	r2, [pc, #372]	; (8005098 <PCD_EP_OutXfrComplete_int+0x210>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d90f      	bls.n	8004f48 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f44:	6093      	str	r3, [r2, #8]
 8004f46:	e0a2      	b.n	800508e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f5a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	0159      	lsls	r1, r3, #5
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	440b      	add	r3, r1
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004f6e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	1a9b      	subs	r3, r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4403      	add	r3, r0
 8004f7e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004f82:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	1a9b      	subs	r3, r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f96:	6819      	ldr	r1, [r3, #0]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4403      	add	r3, r0
 8004fa6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4419      	add	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4403      	add	r3, r0
 8004fbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004fc0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d114      	bne.n	8004ff2 <PCD_EP_OutXfrComplete_int+0x16a>
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d108      	bne.n	8004ff2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fea:	461a      	mov	r2, r3
 8004fec:	2101      	movs	r1, #1
 8004fee:	f007 fdc1 	bl	800cb74 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f00d fa91 	bl	8012520 <HAL_PCD_DataOutStageCallback>
 8004ffe:	e046      	b.n	800508e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4a26      	ldr	r2, [pc, #152]	; (800509c <PCD_EP_OutXfrComplete_int+0x214>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d124      	bne.n	8005052 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501e:	461a      	mov	r2, r3
 8005020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005024:	6093      	str	r3, [r2, #8]
 8005026:	e032      	b.n	800508e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	461a      	mov	r2, r3
 8005040:	2320      	movs	r3, #32
 8005042:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f00d fa68 	bl	8012520 <HAL_PCD_DataOutStageCallback>
 8005050:	e01d      	b.n	800508e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d114      	bne.n	8005082 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d108      	bne.n	8005082 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800507a:	461a      	mov	r2, r3
 800507c:	2100      	movs	r1, #0
 800507e:	f007 fd79 	bl	800cb74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f00d fa49 	bl	8012520 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	4f54300a 	.word	0x4f54300a
 800509c:	4f54310a 	.word	0x4f54310a

080050a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	333c      	adds	r3, #60	; 0x3c
 80050b8:	3304      	adds	r3, #4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <PCD_EP_OutSetupPacket_int+0x88>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d90e      	bls.n	80050f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d009      	beq.n	80050f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	461a      	mov	r2, r3
 80050ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f00d fa01 	bl	80124fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4a0a      	ldr	r2, [pc, #40]	; (8005128 <PCD_EP_OutSetupPacket_int+0x88>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d90c      	bls.n	800511c <PCD_EP_OutSetupPacket_int+0x7c>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d108      	bne.n	800511c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005114:	461a      	mov	r2, r3
 8005116:	2101      	movs	r1, #1
 8005118:	f007 fd2c 	bl	800cb74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	4f54300a 	.word	0x4f54300a

0800512c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
 8005138:	4613      	mov	r3, r2
 800513a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d107      	bne.n	800515a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800514a:	883b      	ldrh	r3, [r7, #0]
 800514c:	0419      	lsls	r1, r3, #16
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	430a      	orrs	r2, r1
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
 8005158:	e028      	b.n	80051ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	0c1b      	lsrs	r3, r3, #16
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	4413      	add	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
 800516c:	e00d      	b.n	800518a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	3340      	adds	r3, #64	; 0x40
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	4413      	add	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	3301      	adds	r3, #1
 8005188:	73fb      	strb	r3, [r7, #15]
 800518a:	7bfa      	ldrb	r2, [r7, #15]
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	3b01      	subs	r3, #1
 8005190:	429a      	cmp	r2, r3
 8005192:	d3ec      	bcc.n	800516e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005194:	883b      	ldrh	r3, [r7, #0]
 8005196:	0418      	lsls	r0, r3, #16
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6819      	ldr	r1, [r3, #0]
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	3b01      	subs	r3, #1
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	4302      	orrs	r2, r0
 80051a4:	3340      	adds	r3, #64	; 0x40
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	887a      	ldrh	r2, [r7, #2]
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_PCDEx_ActivateLPM+0x44>)
 800520c:	4313      	orrs	r3, r2
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	10000003 	.word	0x10000003

08005224 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005244:	4b19      	ldr	r3, [pc, #100]	; (80052ac <HAL_PWREx_ConfigSupply+0x70>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b04      	cmp	r3, #4
 800524e:	d00a      	beq.n	8005266 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005250:	4b16      	ldr	r3, [pc, #88]	; (80052ac <HAL_PWREx_ConfigSupply+0x70>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d001      	beq.n	8005262 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e01f      	b.n	80052a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	e01d      	b.n	80052a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005266:	4b11      	ldr	r3, [pc, #68]	; (80052ac <HAL_PWREx_ConfigSupply+0x70>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f023 0207 	bic.w	r2, r3, #7
 800526e:	490f      	ldr	r1, [pc, #60]	; (80052ac <HAL_PWREx_ConfigSupply+0x70>)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4313      	orrs	r3, r2
 8005274:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005276:	f7fc fa81 	bl	800177c <HAL_GetTick>
 800527a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800527c:	e009      	b.n	8005292 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800527e:	f7fc fa7d 	bl	800177c <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800528c:	d901      	bls.n	8005292 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e007      	b.n	80052a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_PWREx_ConfigSupply+0x70>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800529a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529e:	d1ee      	bne.n	800527e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	58024800 	.word	0x58024800

080052b0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80052b4:	4b05      	ldr	r3, [pc, #20]	; (80052cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4a04      	ldr	r2, [pc, #16]	; (80052cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80052ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052be:	60d3      	str	r3, [r2, #12]
}
 80052c0:	bf00      	nop
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	58024800 	.word	0x58024800

080052d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08c      	sub	sp, #48	; 0x30
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e3ff      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 8087 	beq.w	80053fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052f0:	4b99      	ldr	r3, [pc, #612]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052fa:	4b97      	ldr	r3, [pc, #604]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005302:	2b10      	cmp	r3, #16
 8005304:	d007      	beq.n	8005316 <HAL_RCC_OscConfig+0x46>
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	2b18      	cmp	r3, #24
 800530a:	d110      	bne.n	800532e <HAL_RCC_OscConfig+0x5e>
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d10b      	bne.n	800532e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005316:	4b90      	ldr	r3, [pc, #576]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d06c      	beq.n	80053fc <HAL_RCC_OscConfig+0x12c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d168      	bne.n	80053fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e3d9      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005336:	d106      	bne.n	8005346 <HAL_RCC_OscConfig+0x76>
 8005338:	4b87      	ldr	r3, [pc, #540]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a86      	ldr	r2, [pc, #536]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 800533e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	e02e      	b.n	80053a4 <HAL_RCC_OscConfig+0xd4>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10c      	bne.n	8005368 <HAL_RCC_OscConfig+0x98>
 800534e:	4b82      	ldr	r3, [pc, #520]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a81      	ldr	r2, [pc, #516]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	4b7f      	ldr	r3, [pc, #508]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a7e      	ldr	r2, [pc, #504]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e01d      	b.n	80053a4 <HAL_RCC_OscConfig+0xd4>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005370:	d10c      	bne.n	800538c <HAL_RCC_OscConfig+0xbc>
 8005372:	4b79      	ldr	r3, [pc, #484]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a78      	ldr	r2, [pc, #480]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	4b76      	ldr	r3, [pc, #472]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a75      	ldr	r2, [pc, #468]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	e00b      	b.n	80053a4 <HAL_RCC_OscConfig+0xd4>
 800538c:	4b72      	ldr	r3, [pc, #456]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a71      	ldr	r2, [pc, #452]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	4b6f      	ldr	r3, [pc, #444]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a6e      	ldr	r2, [pc, #440]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 800539e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d013      	beq.n	80053d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fc f9e6 	bl	800177c <HAL_GetTick>
 80053b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fc f9e2 	bl	800177c <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	; 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e38d      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053c6:	4b64      	ldr	r3, [pc, #400]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0xe4>
 80053d2:	e014      	b.n	80053fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fc f9d2 	bl	800177c <HAL_GetTick>
 80053d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fc f9ce 	bl	800177c <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e379      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ee:	4b5a      	ldr	r3, [pc, #360]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x10c>
 80053fa:	e000      	b.n	80053fe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80ae 	beq.w	8005568 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800540c:	4b52      	ldr	r3, [pc, #328]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005414:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005416:	4b50      	ldr	r3, [pc, #320]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <HAL_RCC_OscConfig+0x162>
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	2b18      	cmp	r3, #24
 8005426:	d13a      	bne.n	800549e <HAL_RCC_OscConfig+0x1ce>
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d135      	bne.n	800549e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005432:	4b49      	ldr	r3, [pc, #292]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_RCC_OscConfig+0x17a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e34b      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544a:	f7fc f9c5 	bl	80017d8 <HAL_GetREVID>
 800544e:	4602      	mov	r2, r0
 8005450:	f241 0303 	movw	r3, #4099	; 0x1003
 8005454:	429a      	cmp	r2, r3
 8005456:	d817      	bhi.n	8005488 <HAL_RCC_OscConfig+0x1b8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d108      	bne.n	8005472 <HAL_RCC_OscConfig+0x1a2>
 8005460:	4b3d      	ldr	r3, [pc, #244]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005468:	4a3b      	ldr	r2, [pc, #236]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 800546a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800546e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005470:	e07a      	b.n	8005568 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005472:	4b39      	ldr	r3, [pc, #228]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	031b      	lsls	r3, r3, #12
 8005480:	4935      	ldr	r1, [pc, #212]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005482:	4313      	orrs	r3, r2
 8005484:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005486:	e06f      	b.n	8005568 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005488:	4b33      	ldr	r3, [pc, #204]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	061b      	lsls	r3, r3, #24
 8005496:	4930      	ldr	r1, [pc, #192]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005498:	4313      	orrs	r3, r2
 800549a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800549c:	e064      	b.n	8005568 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d045      	beq.n	8005532 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054a6:	4b2c      	ldr	r3, [pc, #176]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 0219 	bic.w	r2, r3, #25
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	4929      	ldr	r1, [pc, #164]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7fc f960 	bl	800177c <HAL_GetTick>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054c0:	f7fc f95c 	bl	800177c <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e307      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054d2:	4b21      	ldr	r3, [pc, #132]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054de:	f7fc f97b 	bl	80017d8 <HAL_GetREVID>
 80054e2:	4602      	mov	r2, r0
 80054e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d817      	bhi.n	800551c <HAL_RCC_OscConfig+0x24c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d108      	bne.n	8005506 <HAL_RCC_OscConfig+0x236>
 80054f4:	4b18      	ldr	r3, [pc, #96]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054fc:	4a16      	ldr	r2, [pc, #88]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 80054fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005502:	6053      	str	r3, [r2, #4]
 8005504:	e030      	b.n	8005568 <HAL_RCC_OscConfig+0x298>
 8005506:	4b14      	ldr	r3, [pc, #80]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	031b      	lsls	r3, r3, #12
 8005514:	4910      	ldr	r1, [pc, #64]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005516:	4313      	orrs	r3, r2
 8005518:	604b      	str	r3, [r1, #4]
 800551a:	e025      	b.n	8005568 <HAL_RCC_OscConfig+0x298>
 800551c:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	061b      	lsls	r3, r3, #24
 800552a:	490b      	ldr	r1, [pc, #44]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 800552c:	4313      	orrs	r3, r2
 800552e:	604b      	str	r3, [r1, #4]
 8005530:	e01a      	b.n	8005568 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005532:	4b09      	ldr	r3, [pc, #36]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a08      	ldr	r2, [pc, #32]	; (8005558 <HAL_RCC_OscConfig+0x288>)
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553e:	f7fc f91d 	bl	800177c <HAL_GetTick>
 8005542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005544:	e00a      	b.n	800555c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005546:	f7fc f919 	bl	800177c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d903      	bls.n	800555c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e2c4      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
 8005558:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800555c:	4ba4      	ldr	r3, [pc, #656]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1ee      	bne.n	8005546 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80a9 	beq.w	80056c8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005576:	4b9e      	ldr	r3, [pc, #632]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800557e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005580:	4b9b      	ldr	r3, [pc, #620]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d007      	beq.n	800559c <HAL_RCC_OscConfig+0x2cc>
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b18      	cmp	r3, #24
 8005590:	d13a      	bne.n	8005608 <HAL_RCC_OscConfig+0x338>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d135      	bne.n	8005608 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800559c:	4b94      	ldr	r3, [pc, #592]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_RCC_OscConfig+0x2e4>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	2b80      	cmp	r3, #128	; 0x80
 80055ae:	d001      	beq.n	80055b4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e296      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055b4:	f7fc f910 	bl	80017d8 <HAL_GetREVID>
 80055b8:	4602      	mov	r2, r0
 80055ba:	f241 0303 	movw	r3, #4099	; 0x1003
 80055be:	429a      	cmp	r2, r3
 80055c0:	d817      	bhi.n	80055f2 <HAL_RCC_OscConfig+0x322>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	d108      	bne.n	80055dc <HAL_RCC_OscConfig+0x30c>
 80055ca:	4b89      	ldr	r3, [pc, #548]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055d2:	4a87      	ldr	r2, [pc, #540]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 80055d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055da:	e075      	b.n	80056c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055dc:	4b84      	ldr	r3, [pc, #528]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	069b      	lsls	r3, r3, #26
 80055ea:	4981      	ldr	r1, [pc, #516]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055f0:	e06a      	b.n	80056c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055f2:	4b7f      	ldr	r3, [pc, #508]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	061b      	lsls	r3, r3, #24
 8005600:	497b      	ldr	r1, [pc, #492]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005602:	4313      	orrs	r3, r2
 8005604:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005606:	e05f      	b.n	80056c8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d042      	beq.n	8005696 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005610:	4b77      	ldr	r3, [pc, #476]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a76      	ldr	r2, [pc, #472]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561c:	f7fc f8ae 	bl	800177c <HAL_GetTick>
 8005620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005624:	f7fc f8aa 	bl	800177c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e255      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005636:	4b6e      	ldr	r3, [pc, #440]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005642:	f7fc f8c9 	bl	80017d8 <HAL_GetREVID>
 8005646:	4602      	mov	r2, r0
 8005648:	f241 0303 	movw	r3, #4099	; 0x1003
 800564c:	429a      	cmp	r2, r3
 800564e:	d817      	bhi.n	8005680 <HAL_RCC_OscConfig+0x3b0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	2b20      	cmp	r3, #32
 8005656:	d108      	bne.n	800566a <HAL_RCC_OscConfig+0x39a>
 8005658:	4b65      	ldr	r3, [pc, #404]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005660:	4a63      	ldr	r2, [pc, #396]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005666:	6053      	str	r3, [r2, #4]
 8005668:	e02e      	b.n	80056c8 <HAL_RCC_OscConfig+0x3f8>
 800566a:	4b61      	ldr	r3, [pc, #388]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	069b      	lsls	r3, r3, #26
 8005678:	495d      	ldr	r1, [pc, #372]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 800567a:	4313      	orrs	r3, r2
 800567c:	604b      	str	r3, [r1, #4]
 800567e:	e023      	b.n	80056c8 <HAL_RCC_OscConfig+0x3f8>
 8005680:	4b5b      	ldr	r3, [pc, #364]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	061b      	lsls	r3, r3, #24
 800568e:	4958      	ldr	r1, [pc, #352]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005690:	4313      	orrs	r3, r2
 8005692:	60cb      	str	r3, [r1, #12]
 8005694:	e018      	b.n	80056c8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005696:	4b56      	ldr	r3, [pc, #344]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a55      	ldr	r2, [pc, #340]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 800569c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a2:	f7fc f86b 	bl	800177c <HAL_GetTick>
 80056a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056aa:	f7fc f867 	bl	800177c <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e212      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056bc:	4b4c      	ldr	r3, [pc, #304]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f0      	bne.n	80056aa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d036      	beq.n	8005742 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d019      	beq.n	8005710 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056dc:	4b44      	ldr	r3, [pc, #272]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 80056de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e0:	4a43      	ldr	r2, [pc, #268]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e8:	f7fc f848 	bl	800177c <HAL_GetTick>
 80056ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f0:	f7fc f844 	bl	800177c <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e1ef      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005702:	4b3b      	ldr	r3, [pc, #236]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <HAL_RCC_OscConfig+0x420>
 800570e:	e018      	b.n	8005742 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005710:	4b37      	ldr	r3, [pc, #220]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005714:	4a36      	ldr	r2, [pc, #216]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571c:	f7fc f82e 	bl	800177c <HAL_GetTick>
 8005720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005724:	f7fc f82a 	bl	800177c <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e1d5      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005736:	4b2e      	ldr	r3, [pc, #184]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d036      	beq.n	80057bc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d019      	beq.n	800578a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005756:	4b26      	ldr	r3, [pc, #152]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 800575c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005760:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005762:	f7fc f80b 	bl	800177c <HAL_GetTick>
 8005766:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800576a:	f7fc f807 	bl	800177c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e1b2      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800577c:	4b1c      	ldr	r3, [pc, #112]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0f0      	beq.n	800576a <HAL_RCC_OscConfig+0x49a>
 8005788:	e018      	b.n	80057bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800578a:	4b19      	ldr	r3, [pc, #100]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 8005790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005794:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005796:	f7fb fff1 	bl	800177c <HAL_GetTick>
 800579a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800579e:	f7fb ffed 	bl	800177c <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e198      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057b0:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <HAL_RCC_OscConfig+0x520>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f0      	bne.n	800579e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 8085 	beq.w	80058d4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057ca:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <HAL_RCC_OscConfig+0x524>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a09      	ldr	r2, [pc, #36]	; (80057f4 <HAL_RCC_OscConfig+0x524>)
 80057d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057d6:	f7fb ffd1 	bl	800177c <HAL_GetTick>
 80057da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057dc:	e00c      	b.n	80057f8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057de:	f7fb ffcd 	bl	800177c <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b64      	cmp	r3, #100	; 0x64
 80057ea:	d905      	bls.n	80057f8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e178      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
 80057f0:	58024400 	.word	0x58024400
 80057f4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057f8:	4b96      	ldr	r3, [pc, #600]	; (8005a54 <HAL_RCC_OscConfig+0x784>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0ec      	beq.n	80057de <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d106      	bne.n	800581a <HAL_RCC_OscConfig+0x54a>
 800580c:	4b92      	ldr	r3, [pc, #584]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4a91      	ldr	r2, [pc, #580]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	6713      	str	r3, [r2, #112]	; 0x70
 8005818:	e02d      	b.n	8005876 <HAL_RCC_OscConfig+0x5a6>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10c      	bne.n	800583c <HAL_RCC_OscConfig+0x56c>
 8005822:	4b8d      	ldr	r3, [pc, #564]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	4a8c      	ldr	r2, [pc, #560]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005828:	f023 0301 	bic.w	r3, r3, #1
 800582c:	6713      	str	r3, [r2, #112]	; 0x70
 800582e:	4b8a      	ldr	r3, [pc, #552]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	4a89      	ldr	r2, [pc, #548]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005834:	f023 0304 	bic.w	r3, r3, #4
 8005838:	6713      	str	r3, [r2, #112]	; 0x70
 800583a:	e01c      	b.n	8005876 <HAL_RCC_OscConfig+0x5a6>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b05      	cmp	r3, #5
 8005842:	d10c      	bne.n	800585e <HAL_RCC_OscConfig+0x58e>
 8005844:	4b84      	ldr	r3, [pc, #528]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005848:	4a83      	ldr	r2, [pc, #524]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 800584a:	f043 0304 	orr.w	r3, r3, #4
 800584e:	6713      	str	r3, [r2, #112]	; 0x70
 8005850:	4b81      	ldr	r3, [pc, #516]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	4a80      	ldr	r2, [pc, #512]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	6713      	str	r3, [r2, #112]	; 0x70
 800585c:	e00b      	b.n	8005876 <HAL_RCC_OscConfig+0x5a6>
 800585e:	4b7e      	ldr	r3, [pc, #504]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	4a7d      	ldr	r2, [pc, #500]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	6713      	str	r3, [r2, #112]	; 0x70
 800586a:	4b7b      	ldr	r3, [pc, #492]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	4a7a      	ldr	r2, [pc, #488]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005870:	f023 0304 	bic.w	r3, r3, #4
 8005874:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d015      	beq.n	80058aa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587e:	f7fb ff7d 	bl	800177c <HAL_GetTick>
 8005882:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005884:	e00a      	b.n	800589c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005886:	f7fb ff79 	bl	800177c <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	f241 3288 	movw	r2, #5000	; 0x1388
 8005894:	4293      	cmp	r3, r2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e122      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800589c:	4b6e      	ldr	r3, [pc, #440]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 800589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0ee      	beq.n	8005886 <HAL_RCC_OscConfig+0x5b6>
 80058a8:	e014      	b.n	80058d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058aa:	f7fb ff67 	bl	800177c <HAL_GetTick>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058b0:	e00a      	b.n	80058c8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058b2:	f7fb ff63 	bl	800177c <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e10c      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058c8:	4b63      	ldr	r3, [pc, #396]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1ee      	bne.n	80058b2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8101 	beq.w	8005ae0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058de:	4b5e      	ldr	r3, [pc, #376]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058e6:	2b18      	cmp	r3, #24
 80058e8:	f000 80bc 	beq.w	8005a64 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	f040 8095 	bne.w	8005a20 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f6:	4b58      	ldr	r3, [pc, #352]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a57      	ldr	r2, [pc, #348]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80058fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005902:	f7fb ff3b 	bl	800177c <HAL_GetTick>
 8005906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800590a:	f7fb ff37 	bl	800177c <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e0e2      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800591c:	4b4e      	ldr	r3, [pc, #312]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f0      	bne.n	800590a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005928:	4b4b      	ldr	r3, [pc, #300]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 800592a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592c:	4b4b      	ldr	r3, [pc, #300]	; (8005a5c <HAL_RCC_OscConfig+0x78c>)
 800592e:	4013      	ands	r3, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005938:	0112      	lsls	r2, r2, #4
 800593a:	430a      	orrs	r2, r1
 800593c:	4946      	ldr	r1, [pc, #280]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 800593e:	4313      	orrs	r3, r2
 8005940:	628b      	str	r3, [r1, #40]	; 0x28
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	3b01      	subs	r3, #1
 8005948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005950:	3b01      	subs	r3, #1
 8005952:	025b      	lsls	r3, r3, #9
 8005954:	b29b      	uxth	r3, r3
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	3b01      	subs	r3, #1
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	3b01      	subs	r3, #1
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005972:	4939      	ldr	r1, [pc, #228]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005974:	4313      	orrs	r3, r2
 8005976:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005978:	4b37      	ldr	r3, [pc, #220]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	4a36      	ldr	r2, [pc, #216]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005984:	4b34      	ldr	r3, [pc, #208]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005988:	4b35      	ldr	r3, [pc, #212]	; (8005a60 <HAL_RCC_OscConfig+0x790>)
 800598a:	4013      	ands	r3, r2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005990:	00d2      	lsls	r2, r2, #3
 8005992:	4931      	ldr	r1, [pc, #196]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005994:	4313      	orrs	r3, r2
 8005996:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005998:	4b2f      	ldr	r3, [pc, #188]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	f023 020c 	bic.w	r2, r3, #12
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	492c      	ldr	r1, [pc, #176]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059aa:	4b2b      	ldr	r3, [pc, #172]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	f023 0202 	bic.w	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b6:	4928      	ldr	r1, [pc, #160]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059bc:	4b26      	ldr	r3, [pc, #152]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	4a25      	ldr	r2, [pc, #148]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c8:	4b23      	ldr	r3, [pc, #140]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4a22      	ldr	r2, [pc, #136]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059d4:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059ec:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 80059f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f8:	f7fb fec0 	bl	800177c <HAL_GetTick>
 80059fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a00:	f7fb febc 	bl	800177c <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e067      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a12:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f0      	beq.n	8005a00 <HAL_RCC_OscConfig+0x730>
 8005a1e:	e05f      	b.n	8005ae0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a20:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2c:	f7fb fea6 	bl	800177c <HAL_GetTick>
 8005a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a34:	f7fb fea2 	bl	800177c <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e04d      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a46:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <HAL_RCC_OscConfig+0x788>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x764>
 8005a52:	e045      	b.n	8005ae0 <HAL_RCC_OscConfig+0x810>
 8005a54:	58024800 	.word	0x58024800
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	fffffc0c 	.word	0xfffffc0c
 8005a60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a64:	4b21      	ldr	r3, [pc, #132]	; (8005aec <HAL_RCC_OscConfig+0x81c>)
 8005a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a6a:	4b20      	ldr	r3, [pc, #128]	; (8005aec <HAL_RCC_OscConfig+0x81c>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d031      	beq.n	8005adc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f003 0203 	and.w	r2, r3, #3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d12a      	bne.n	8005adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d122      	bne.n	8005adc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d11a      	bne.n	8005adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	0a5b      	lsrs	r3, r3, #9
 8005aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d111      	bne.n	8005adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	0c1b      	lsrs	r3, r3, #16
 8005abc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d108      	bne.n	8005adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	0e1b      	lsrs	r3, r3, #24
 8005ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3730      	adds	r7, #48	; 0x30
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	58024400 	.word	0x58024400

08005af0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e19c      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b04:	4b8a      	ldr	r3, [pc, #552]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d910      	bls.n	8005b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b87      	ldr	r3, [pc, #540]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f023 020f 	bic.w	r2, r3, #15
 8005b1a:	4985      	ldr	r1, [pc, #532]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b22:	4b83      	ldr	r3, [pc, #524]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e184      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d010      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	4b7b      	ldr	r3, [pc, #492]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d908      	bls.n	8005b62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b50:	4b78      	ldr	r3, [pc, #480]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	4975      	ldr	r1, [pc, #468]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d010      	beq.n	8005b90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	4b70      	ldr	r3, [pc, #448]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d908      	bls.n	8005b90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b7e:	4b6d      	ldr	r3, [pc, #436]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	496a      	ldr	r1, [pc, #424]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d010      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	4b64      	ldr	r3, [pc, #400]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d908      	bls.n	8005bbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bac:	4b61      	ldr	r3, [pc, #388]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	495e      	ldr	r1, [pc, #376]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d010      	beq.n	8005bec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	4b59      	ldr	r3, [pc, #356]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d908      	bls.n	8005bec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bda:	4b56      	ldr	r3, [pc, #344]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	4953      	ldr	r1, [pc, #332]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d010      	beq.n	8005c1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	4b4d      	ldr	r3, [pc, #308]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d908      	bls.n	8005c1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c08:	4b4a      	ldr	r3, [pc, #296]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f023 020f 	bic.w	r2, r3, #15
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4947      	ldr	r1, [pc, #284]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d055      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c26:	4b43      	ldr	r3, [pc, #268]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	4940      	ldr	r1, [pc, #256]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c40:	4b3c      	ldr	r3, [pc, #240]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d121      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0f6      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d107      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c58:	4b36      	ldr	r3, [pc, #216]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d115      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0ea      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d107      	bne.n	8005c80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c70:	4b30      	ldr	r3, [pc, #192]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e0de      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c80:	4b2c      	ldr	r3, [pc, #176]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0d6      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c90:	4b28      	ldr	r3, [pc, #160]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f023 0207 	bic.w	r2, r3, #7
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	4925      	ldr	r1, [pc, #148]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca2:	f7fb fd6b 	bl	800177c <HAL_GetTick>
 8005ca6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca8:	e00a      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005caa:	f7fb fd67 	bl	800177c <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e0be      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc0:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d1eb      	bne.n	8005caa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d010      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d208      	bcs.n	8005d00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cee:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f023 020f 	bic.w	r2, r3, #15
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	490e      	ldr	r1, [pc, #56]	; (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d214      	bcs.n	8005d38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0e:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f023 020f 	bic.w	r2, r3, #15
 8005d16:	4906      	ldr	r1, [pc, #24]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1e:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d005      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e086      	b.n	8005e3e <HAL_RCC_ClockConfig+0x34e>
 8005d30:	52002000 	.word	0x52002000
 8005d34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d010      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	4b3f      	ldr	r3, [pc, #252]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d208      	bcs.n	8005d66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d54:	4b3c      	ldr	r3, [pc, #240]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	4939      	ldr	r1, [pc, #228]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d010      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	4b34      	ldr	r3, [pc, #208]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d208      	bcs.n	8005d94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d82:	4b31      	ldr	r3, [pc, #196]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	492e      	ldr	r1, [pc, #184]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d010      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699a      	ldr	r2, [r3, #24]
 8005da4:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d208      	bcs.n	8005dc2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005db0:	4b25      	ldr	r3, [pc, #148]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	4922      	ldr	r1, [pc, #136]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d010      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69da      	ldr	r2, [r3, #28]
 8005dd2:	4b1d      	ldr	r3, [pc, #116]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d208      	bcs.n	8005df0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005dde:	4b1a      	ldr	r3, [pc, #104]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	4917      	ldr	r1, [pc, #92]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005df0:	f000 f844 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 8005df4:	4601      	mov	r1, r0
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	4a12      	ldr	r2, [pc, #72]	; (8005e4c <HAL_RCC_ClockConfig+0x35c>)
 8005e02:	5cd3      	ldrb	r3, [r2, r3]
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	fa21 f303 	lsr.w	r3, r1, r3
 8005e0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e0e:	4b0e      	ldr	r3, [pc, #56]	; (8005e48 <HAL_RCC_ClockConfig+0x358>)
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	4a0d      	ldr	r2, [pc, #52]	; (8005e4c <HAL_RCC_ClockConfig+0x35c>)
 8005e18:	5cd3      	ldrb	r3, [r2, r3]
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
 8005e24:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <HAL_RCC_ClockConfig+0x360>)
 8005e26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e28:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <HAL_RCC_ClockConfig+0x364>)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <HAL_RCC_ClockConfig+0x368>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fb fc58 	bl	80016e8 <HAL_InitTick>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	58024400 	.word	0x58024400
 8005e4c:	08013434 	.word	0x08013434
 8005e50:	24000004 	.word	0x24000004
 8005e54:	24000000 	.word	0x24000000
 8005e58:	24000008 	.word	0x24000008

08005e5c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_RCC_EnableCSS+0x1c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a04      	ldr	r2, [pc, #16]	; (8005e78 <HAL_RCC_EnableCSS+0x1c>)
 8005e66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e6a:	6013      	str	r3, [r2, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	58024400 	.word	0x58024400

08005e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b089      	sub	sp, #36	; 0x24
 8005e80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e82:	4baf      	ldr	r3, [pc, #700]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e8a:	2b18      	cmp	r3, #24
 8005e8c:	f200 814e 	bhi.w	800612c <HAL_RCC_GetSysClockFreq+0x2b0>
 8005e90:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005efd 	.word	0x08005efd
 8005e9c:	0800612d 	.word	0x0800612d
 8005ea0:	0800612d 	.word	0x0800612d
 8005ea4:	0800612d 	.word	0x0800612d
 8005ea8:	0800612d 	.word	0x0800612d
 8005eac:	0800612d 	.word	0x0800612d
 8005eb0:	0800612d 	.word	0x0800612d
 8005eb4:	0800612d 	.word	0x0800612d
 8005eb8:	08005f23 	.word	0x08005f23
 8005ebc:	0800612d 	.word	0x0800612d
 8005ec0:	0800612d 	.word	0x0800612d
 8005ec4:	0800612d 	.word	0x0800612d
 8005ec8:	0800612d 	.word	0x0800612d
 8005ecc:	0800612d 	.word	0x0800612d
 8005ed0:	0800612d 	.word	0x0800612d
 8005ed4:	0800612d 	.word	0x0800612d
 8005ed8:	08005f29 	.word	0x08005f29
 8005edc:	0800612d 	.word	0x0800612d
 8005ee0:	0800612d 	.word	0x0800612d
 8005ee4:	0800612d 	.word	0x0800612d
 8005ee8:	0800612d 	.word	0x0800612d
 8005eec:	0800612d 	.word	0x0800612d
 8005ef0:	0800612d 	.word	0x0800612d
 8005ef4:	0800612d 	.word	0x0800612d
 8005ef8:	08005f2f 	.word	0x08005f2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005efc:	4b90      	ldr	r3, [pc, #576]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d009      	beq.n	8005f1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f08:	4b8d      	ldr	r3, [pc, #564]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	08db      	lsrs	r3, r3, #3
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	4a8c      	ldr	r2, [pc, #560]	; (8006144 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
 8005f18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f1a:	e10a      	b.n	8006132 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f1c:	4b89      	ldr	r3, [pc, #548]	; (8006144 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f1e:	61bb      	str	r3, [r7, #24]
    break;
 8005f20:	e107      	b.n	8006132 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f22:	4b89      	ldr	r3, [pc, #548]	; (8006148 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005f24:	61bb      	str	r3, [r7, #24]
    break;
 8005f26:	e104      	b.n	8006132 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f28:	4b88      	ldr	r3, [pc, #544]	; (800614c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005f2a:	61bb      	str	r3, [r7, #24]
    break;
 8005f2c:	e101      	b.n	8006132 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f2e:	4b84      	ldr	r3, [pc, #528]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005f38:	4b81      	ldr	r3, [pc, #516]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f44:	4b7e      	ldr	r3, [pc, #504]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f4e:	4b7c      	ldr	r3, [pc, #496]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f52:	08db      	lsrs	r3, r3, #3
 8005f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	fb02 f303 	mul.w	r3, r2, r3
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80da 	beq.w	8006126 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d05a      	beq.n	800602e <HAL_RCC_GetSysClockFreq+0x1b2>
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d302      	bcc.n	8005f82 <HAL_RCC_GetSysClockFreq+0x106>
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d078      	beq.n	8006072 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005f80:	e099      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f82:	4b6f      	ldr	r3, [pc, #444]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d02d      	beq.n	8005fea <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f8e:	4b6c      	ldr	r3, [pc, #432]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	08db      	lsrs	r3, r3, #3
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	4a6a      	ldr	r2, [pc, #424]	; (8006144 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb8:	4b61      	ldr	r3, [pc, #388]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc0:	ee07 3a90 	vmov	s15, r3
 8005fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fcc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006150 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005fe8:	e087      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	ee07 3a90 	vmov	s15, r3
 8005ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006154 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffc:	4b50      	ldr	r3, [pc, #320]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006010:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006150 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006028:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800602c:	e065      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006038:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006158 <HAL_RCC_GetSysClockFreq+0x2dc>
 800603c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006040:	4b3f      	ldr	r3, [pc, #252]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006050:	ed97 6a02 	vldr	s12, [r7, #8]
 8006054:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006150 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006070:	e043      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	ee07 3a90 	vmov	s15, r3
 8006078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800615c <HAL_RCC_GetSysClockFreq+0x2e0>
 8006080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006084:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006094:	ed97 6a02 	vldr	s12, [r7, #8]
 8006098:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006150 <HAL_RCC_GetSysClockFreq+0x2d4>
 800609c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060b4:	e021      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006158 <HAL_RCC_GetSysClockFreq+0x2dc>
 80060c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c8:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80060dc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006150 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060fa:	4b11      	ldr	r3, [pc, #68]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	0a5b      	lsrs	r3, r3, #9
 8006100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006104:	3301      	adds	r3, #1
 8006106:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006112:	edd7 6a07 	vldr	s13, [r7, #28]
 8006116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800611a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611e:	ee17 3a90 	vmov	r3, s15
 8006122:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006124:	e005      	b.n	8006132 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
    break;
 800612a:	e002      	b.n	8006132 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800612e:	61bb      	str	r3, [r7, #24]
    break;
 8006130:	bf00      	nop
  }

  return sysclockfreq;
 8006132:	69bb      	ldr	r3, [r7, #24]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3724      	adds	r7, #36	; 0x24
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	58024400 	.word	0x58024400
 8006144:	03d09000 	.word	0x03d09000
 8006148:	003d0900 	.word	0x003d0900
 800614c:	017d7840 	.word	0x017d7840
 8006150:	46000000 	.word	0x46000000
 8006154:	4c742400 	.word	0x4c742400
 8006158:	4a742400 	.word	0x4a742400
 800615c:	4bbebc20 	.word	0x4bbebc20

08006160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006166:	f7ff fe89 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 800616a:	4601      	mov	r1, r0
 800616c:	4b10      	ldr	r3, [pc, #64]	; (80061b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	0a1b      	lsrs	r3, r3, #8
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	4a0f      	ldr	r2, [pc, #60]	; (80061b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006178:	5cd3      	ldrb	r3, [r2, r3]
 800617a:	f003 031f 	and.w	r3, r3, #31
 800617e:	fa21 f303 	lsr.w	r3, r1, r3
 8006182:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006184:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f003 030f 	and.w	r3, r3, #15
 800618c:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800618e:	5cd3      	ldrb	r3, [r2, r3]
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	fa22 f303 	lsr.w	r3, r2, r3
 800619a:	4a07      	ldr	r2, [pc, #28]	; (80061b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800619c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800619e:	4a07      	ldr	r2, [pc, #28]	; (80061bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80061a4:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80061a6:	681b      	ldr	r3, [r3, #0]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	58024400 	.word	0x58024400
 80061b4:	08013434 	.word	0x08013434
 80061b8:	24000004 	.word	0x24000004
 80061bc:	24000000 	.word	0x24000000

080061c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80061c4:	f7ff ffcc 	bl	8006160 <HAL_RCC_GetHCLKFreq>
 80061c8:	4601      	mov	r1, r0
 80061ca:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	091b      	lsrs	r3, r3, #4
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	4a04      	ldr	r2, [pc, #16]	; (80061e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061d6:	5cd3      	ldrb	r3, [r2, r3]
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	58024400 	.word	0x58024400
 80061e8:	08013434 	.word	0x08013434

080061ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061f0:	f7ff ffb6 	bl	8006160 <HAL_RCC_GetHCLKFreq>
 80061f4:	4601      	mov	r1, r0
 80061f6:	4b06      	ldr	r3, [pc, #24]	; (8006210 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	0a1b      	lsrs	r3, r3, #8
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	4a04      	ldr	r2, [pc, #16]	; (8006214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006202:	5cd3      	ldrb	r3, [r2, r3]
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800620c:	4618      	mov	r0, r3
 800620e:	bd80      	pop	{r7, pc}
 8006210:	58024400 	.word	0x58024400
 8006214:	08013434 	.word	0x08013434

08006218 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800621c:	4b07      	ldr	r3, [pc, #28]	; (800623c <HAL_RCC_NMI_IRQHandler+0x24>)
 800621e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006228:	d105      	bne.n	8006236 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800622a:	f000 f809 	bl	8006240 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800622e:	4b03      	ldr	r3, [pc, #12]	; (800623c <HAL_RCC_NMI_IRQHandler+0x24>)
 8006230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006234:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8006236:	bf00      	nop
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	58024400 	.word	0x58024400

08006240 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
	...

08006250 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006258:	2300      	movs	r3, #0
 800625a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800625c:	2300      	movs	r3, #0
 800625e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d03d      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006274:	d013      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800627a:	d802      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006280:	e01f      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006282:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006286:	d013      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006288:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800628c:	d01c      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800628e:	e018      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006290:	4baf      	ldr	r3, [pc, #700]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	4aae      	ldr	r2, [pc, #696]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800629a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800629c:	e015      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	2102      	movs	r1, #2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 fd33 	bl	8007d10 <RCCEx_PLL2_Config>
 80062aa:	4603      	mov	r3, r0
 80062ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062ae:	e00c      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3324      	adds	r3, #36	; 0x24
 80062b4:	2102      	movs	r1, #2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fddc 	bl	8007e74 <RCCEx_PLL3_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062c0:	e003      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	75fb      	strb	r3, [r7, #23]
      break;
 80062c6:	e000      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80062c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d109      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80062d0:	4b9f      	ldr	r3, [pc, #636]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062dc:	499c      	ldr	r1, [pc, #624]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	650b      	str	r3, [r1, #80]	; 0x50
 80062e2:	e001      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d03d      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d826      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80062fc:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	08006319 	.word	0x08006319
 8006308:	08006327 	.word	0x08006327
 800630c:	08006339 	.word	0x08006339
 8006310:	08006351 	.word	0x08006351
 8006314:	08006351 	.word	0x08006351
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006318:	4b8d      	ldr	r3, [pc, #564]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	4a8c      	ldr	r2, [pc, #560]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800631e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006322:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006324:	e015      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3304      	adds	r3, #4
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f001 fcef 	bl	8007d10 <RCCEx_PLL2_Config>
 8006332:	4603      	mov	r3, r0
 8006334:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006336:	e00c      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f001 fd98 	bl	8007e74 <RCCEx_PLL3_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006348:	e003      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	75fb      	strb	r3, [r7, #23]
      break;
 800634e:	e000      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006352:	7dfb      	ldrb	r3, [r7, #23]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006358:	4b7d      	ldr	r3, [pc, #500]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800635a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635c:	f023 0207 	bic.w	r2, r3, #7
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	497a      	ldr	r1, [pc, #488]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006366:	4313      	orrs	r3, r2
 8006368:	650b      	str	r3, [r1, #80]	; 0x50
 800636a:	e001      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006378:	2b00      	cmp	r3, #0
 800637a:	d03e      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006380:	2b80      	cmp	r3, #128	; 0x80
 8006382:	d01c      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006384:	2b80      	cmp	r3, #128	; 0x80
 8006386:	d804      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d00d      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006390:	e01e      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006392:	2bc0      	cmp	r3, #192	; 0xc0
 8006394:	d01f      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800639a:	d01e      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800639c:	e018      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800639e:	4b6c      	ldr	r3, [pc, #432]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a2:	4a6b      	ldr	r2, [pc, #428]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063aa:	e017      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3304      	adds	r3, #4
 80063b0:	2100      	movs	r1, #0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 fcac 	bl	8007d10 <RCCEx_PLL2_Config>
 80063b8:	4603      	mov	r3, r0
 80063ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063bc:	e00e      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3324      	adds	r3, #36	; 0x24
 80063c2:	2100      	movs	r1, #0
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 fd55 	bl	8007e74 <RCCEx_PLL3_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063ce:	e005      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	75fb      	strb	r3, [r7, #23]
      break;
 80063d4:	e002      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80063d6:	bf00      	nop
 80063d8:	e000      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80063da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063e2:	4b5b      	ldr	r3, [pc, #364]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ee:	4958      	ldr	r1, [pc, #352]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	650b      	str	r3, [r1, #80]	; 0x50
 80063f4:	e001      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006402:	2b00      	cmp	r3, #0
 8006404:	d044      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800640c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006410:	d01f      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006416:	d805      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800641c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006420:	d00e      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006422:	e01f      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006424:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006428:	d01f      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800642a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800642e:	d01e      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006430:	e018      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006432:	4b47      	ldr	r3, [pc, #284]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006436:	4a46      	ldr	r2, [pc, #280]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800643c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800643e:	e017      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3304      	adds	r3, #4
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f001 fc62 	bl	8007d10 <RCCEx_PLL2_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006450:	e00e      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3324      	adds	r3, #36	; 0x24
 8006456:	2100      	movs	r1, #0
 8006458:	4618      	mov	r0, r3
 800645a:	f001 fd0b 	bl	8007e74 <RCCEx_PLL3_Config>
 800645e:	4603      	mov	r3, r0
 8006460:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006462:	e005      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	75fb      	strb	r3, [r7, #23]
      break;
 8006468:	e002      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800646a:	bf00      	nop
 800646c:	e000      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800646e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006476:	4b36      	ldr	r3, [pc, #216]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006484:	4932      	ldr	r1, [pc, #200]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006486:	4313      	orrs	r3, r2
 8006488:	658b      	str	r3, [r1, #88]	; 0x58
 800648a:	e001      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006498:	2b00      	cmp	r3, #0
 800649a:	d044      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064a6:	d01f      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80064a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ac:	d805      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80064b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064b6:	d00e      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80064b8:	e01f      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80064ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064be:	d01f      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80064c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064c4:	d01e      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80064c6:	e018      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c8:	4b21      	ldr	r3, [pc, #132]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	4a20      	ldr	r2, [pc, #128]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064d4:	e017      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3304      	adds	r3, #4
 80064da:	2100      	movs	r1, #0
 80064dc:	4618      	mov	r0, r3
 80064de:	f001 fc17 	bl	8007d10 <RCCEx_PLL2_Config>
 80064e2:	4603      	mov	r3, r0
 80064e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064e6:	e00e      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3324      	adds	r3, #36	; 0x24
 80064ec:	2100      	movs	r1, #0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 fcc0 	bl	8007e74 <RCCEx_PLL3_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064f8:	e005      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	75fb      	strb	r3, [r7, #23]
      break;
 80064fe:	e002      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006500:	bf00      	nop
 8006502:	e000      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800650c:	4b10      	ldr	r3, [pc, #64]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800650e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006510:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800651a:	490d      	ldr	r1, [pc, #52]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800651c:	4313      	orrs	r3, r2
 800651e:	658b      	str	r3, [r1, #88]	; 0x58
 8006520:	e001      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d035      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006536:	2b10      	cmp	r3, #16
 8006538:	d00c      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800653a:	2b10      	cmp	r3, #16
 800653c:	d802      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d01b      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006542:	e017      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006544:	2b20      	cmp	r3, #32
 8006546:	d00c      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006548:	2b30      	cmp	r3, #48	; 0x30
 800654a:	d018      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800654c:	e012      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800654e:	bf00      	nop
 8006550:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006554:	4baf      	ldr	r3, [pc, #700]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4aae      	ldr	r2, [pc, #696]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800655a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800655e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006560:	e00e      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3304      	adds	r3, #4
 8006566:	2102      	movs	r1, #2
 8006568:	4618      	mov	r0, r3
 800656a:	f001 fbd1 	bl	8007d10 <RCCEx_PLL2_Config>
 800656e:	4603      	mov	r3, r0
 8006570:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006572:	e005      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	75fb      	strb	r3, [r7, #23]
      break;
 8006578:	e002      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800657a:	bf00      	nop
 800657c:	e000      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800657e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006580:	7dfb      	ldrb	r3, [r7, #23]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006586:	4ba3      	ldr	r3, [pc, #652]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006592:	49a0      	ldr	r1, [pc, #640]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006594:	4313      	orrs	r3, r2
 8006596:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006598:	e001      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d042      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b2:	d01f      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80065b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b8:	d805      	bhi.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c2:	d00e      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80065c4:	e01f      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80065c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065ca:	d01f      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80065cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065d0:	d01e      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80065d2:	e018      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d4:	4b8f      	ldr	r3, [pc, #572]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	4a8e      	ldr	r2, [pc, #568]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065e0:	e017      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3304      	adds	r3, #4
 80065e6:	2100      	movs	r1, #0
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 fb91 	bl	8007d10 <RCCEx_PLL2_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065f2:	e00e      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3324      	adds	r3, #36	; 0x24
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fc3a 	bl	8007e74 <RCCEx_PLL3_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006604:	e005      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]
      break;
 800660a:	e002      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800660c:	bf00      	nop
 800660e:	e000      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006612:	7dfb      	ldrb	r3, [r7, #23]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d109      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006618:	4b7e      	ldr	r3, [pc, #504]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006624:	497b      	ldr	r1, [pc, #492]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006626:	4313      	orrs	r3, r2
 8006628:	650b      	str	r3, [r1, #80]	; 0x50
 800662a:	e001      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d042      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006644:	d01b      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800664a:	d805      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d022      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006654:	d00a      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006656:	e01b      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006658:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800665c:	d01d      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800665e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006662:	d01c      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006664:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006668:	d01b      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800666a:	e011      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3304      	adds	r3, #4
 8006670:	2101      	movs	r1, #1
 8006672:	4618      	mov	r0, r3
 8006674:	f001 fb4c 	bl	8007d10 <RCCEx_PLL2_Config>
 8006678:	4603      	mov	r3, r0
 800667a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800667c:	e012      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3324      	adds	r3, #36	; 0x24
 8006682:	2101      	movs	r1, #1
 8006684:	4618      	mov	r0, r3
 8006686:	f001 fbf5 	bl	8007e74 <RCCEx_PLL3_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800668e:	e009      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	75fb      	strb	r3, [r7, #23]
      break;
 8006694:	e006      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006696:	bf00      	nop
 8006698:	e004      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800669a:	bf00      	nop
 800669c:	e002      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800669e:	bf00      	nop
 80066a0:	e000      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d109      	bne.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066aa:	4b5a      	ldr	r3, [pc, #360]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b6:	4957      	ldr	r1, [pc, #348]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	650b      	str	r3, [r1, #80]	; 0x50
 80066bc:	e001      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d044      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d8:	d01b      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80066da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066de:	d805      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d022      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80066e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80066ea:	e01b      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f0:	d01d      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80066f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066f6:	d01c      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80066f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066fc:	d01b      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066fe:	e011      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3304      	adds	r3, #4
 8006704:	2101      	movs	r1, #1
 8006706:	4618      	mov	r0, r3
 8006708:	f001 fb02 	bl	8007d10 <RCCEx_PLL2_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006710:	e012      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3324      	adds	r3, #36	; 0x24
 8006716:	2101      	movs	r1, #1
 8006718:	4618      	mov	r0, r3
 800671a:	f001 fbab 	bl	8007e74 <RCCEx_PLL3_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006722:	e009      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	75fb      	strb	r3, [r7, #23]
      break;
 8006728:	e006      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800672a:	bf00      	nop
 800672c:	e004      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800672e:	bf00      	nop
 8006730:	e002      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006732:	bf00      	nop
 8006734:	e000      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800673e:	4b35      	ldr	r3, [pc, #212]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006742:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800674c:	4931      	ldr	r1, [pc, #196]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800674e:	4313      	orrs	r3, r2
 8006750:	658b      	str	r3, [r1, #88]	; 0x58
 8006752:	e001      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d02d      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800676c:	d005      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800676e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006772:	d009      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d013      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006778:	e00f      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800677a:	4b26      	ldr	r3, [pc, #152]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	4a25      	ldr	r2, [pc, #148]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006784:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006786:	e00c      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3304      	adds	r3, #4
 800678c:	2101      	movs	r1, #1
 800678e:	4618      	mov	r0, r3
 8006790:	f001 fabe 	bl	8007d10 <RCCEx_PLL2_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006798:	e003      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	75fb      	strb	r3, [r7, #23]
      break;
 800679e:	e000      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80067a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d109      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b4:	4917      	ldr	r1, [pc, #92]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	650b      	str	r3, [r1, #80]	; 0x50
 80067ba:	e001      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d035      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d81b      	bhi.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80067d4:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80067d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067da:	bf00      	nop
 80067dc:	08006819 	.word	0x08006819
 80067e0:	080067ed 	.word	0x080067ed
 80067e4:	080067fb 	.word	0x080067fb
 80067e8:	08006819 	.word	0x08006819
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ec:	4b09      	ldr	r3, [pc, #36]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	4a08      	ldr	r2, [pc, #32]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067f8:	e00f      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3304      	adds	r3, #4
 80067fe:	2102      	movs	r1, #2
 8006800:	4618      	mov	r0, r3
 8006802:	f001 fa85 	bl	8007d10 <RCCEx_PLL2_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800680a:	e006      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	75fb      	strb	r3, [r7, #23]
      break;
 8006810:	e003      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006812:	bf00      	nop
 8006814:	58024400 	.word	0x58024400
      break;
 8006818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d109      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006820:	4bba      	ldr	r3, [pc, #744]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006824:	f023 0203 	bic.w	r2, r3, #3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682c:	49b7      	ldr	r1, [pc, #732]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800682e:	4313      	orrs	r3, r2
 8006830:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006832:	e001      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8086 	beq.w	8006952 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006846:	4bb2      	ldr	r3, [pc, #712]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4ab1      	ldr	r2, [pc, #708]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800684c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006850:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006852:	f7fa ff93 	bl	800177c <HAL_GetTick>
 8006856:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006858:	e009      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800685a:	f7fa ff8f 	bl	800177c <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b64      	cmp	r3, #100	; 0x64
 8006866:	d902      	bls.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	75fb      	strb	r3, [r7, #23]
        break;
 800686c:	e005      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800686e:	4ba8      	ldr	r3, [pc, #672]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0ef      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d166      	bne.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006880:	4ba2      	ldr	r3, [pc, #648]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006882:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800688a:	4053      	eors	r3, r2
 800688c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006890:	2b00      	cmp	r3, #0
 8006892:	d013      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006894:	4b9d      	ldr	r3, [pc, #628]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800689e:	4b9b      	ldr	r3, [pc, #620]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	4a9a      	ldr	r2, [pc, #616]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068aa:	4b98      	ldr	r3, [pc, #608]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	4a97      	ldr	r2, [pc, #604]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80068b6:	4a95      	ldr	r2, [pc, #596]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c6:	d115      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c8:	f7fa ff58 	bl	800177c <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068ce:	e00b      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d0:	f7fa ff54 	bl	800177c <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f241 3288 	movw	r2, #5000	; 0x1388
 80068de:	4293      	cmp	r3, r2
 80068e0:	d902      	bls.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	75fb      	strb	r3, [r7, #23]
            break;
 80068e6:	e005      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068e8:	4b88      	ldr	r3, [pc, #544]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0ed      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d126      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006908:	d10d      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800690a:	4b80      	ldr	r3, [pc, #512]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006918:	0919      	lsrs	r1, r3, #4
 800691a:	4b7e      	ldr	r3, [pc, #504]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800691c:	400b      	ands	r3, r1
 800691e:	497b      	ldr	r1, [pc, #492]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006920:	4313      	orrs	r3, r2
 8006922:	610b      	str	r3, [r1, #16]
 8006924:	e005      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006926:	4b79      	ldr	r3, [pc, #484]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	4a78      	ldr	r2, [pc, #480]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800692c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006930:	6113      	str	r3, [r2, #16]
 8006932:	4b76      	ldr	r3, [pc, #472]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006934:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800693c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006940:	4972      	ldr	r1, [pc, #456]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006942:	4313      	orrs	r3, r2
 8006944:	670b      	str	r3, [r1, #112]	; 0x70
 8006946:	e004      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	75bb      	strb	r3, [r7, #22]
 800694c:	e001      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d07d      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006962:	2b28      	cmp	r3, #40	; 0x28
 8006964:	d866      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006966:	a201      	add	r2, pc, #4	; (adr r2, 800696c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	08006a3b 	.word	0x08006a3b
 8006970:	08006a35 	.word	0x08006a35
 8006974:	08006a35 	.word	0x08006a35
 8006978:	08006a35 	.word	0x08006a35
 800697c:	08006a35 	.word	0x08006a35
 8006980:	08006a35 	.word	0x08006a35
 8006984:	08006a35 	.word	0x08006a35
 8006988:	08006a35 	.word	0x08006a35
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a35 	.word	0x08006a35
 8006994:	08006a35 	.word	0x08006a35
 8006998:	08006a35 	.word	0x08006a35
 800699c:	08006a35 	.word	0x08006a35
 80069a0:	08006a35 	.word	0x08006a35
 80069a4:	08006a35 	.word	0x08006a35
 80069a8:	08006a35 	.word	0x08006a35
 80069ac:	08006a23 	.word	0x08006a23
 80069b0:	08006a35 	.word	0x08006a35
 80069b4:	08006a35 	.word	0x08006a35
 80069b8:	08006a35 	.word	0x08006a35
 80069bc:	08006a35 	.word	0x08006a35
 80069c0:	08006a35 	.word	0x08006a35
 80069c4:	08006a35 	.word	0x08006a35
 80069c8:	08006a35 	.word	0x08006a35
 80069cc:	08006a3b 	.word	0x08006a3b
 80069d0:	08006a35 	.word	0x08006a35
 80069d4:	08006a35 	.word	0x08006a35
 80069d8:	08006a35 	.word	0x08006a35
 80069dc:	08006a35 	.word	0x08006a35
 80069e0:	08006a35 	.word	0x08006a35
 80069e4:	08006a35 	.word	0x08006a35
 80069e8:	08006a35 	.word	0x08006a35
 80069ec:	08006a3b 	.word	0x08006a3b
 80069f0:	08006a35 	.word	0x08006a35
 80069f4:	08006a35 	.word	0x08006a35
 80069f8:	08006a35 	.word	0x08006a35
 80069fc:	08006a35 	.word	0x08006a35
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006a35 	.word	0x08006a35
 8006a08:	08006a35 	.word	0x08006a35
 8006a0c:	08006a3b 	.word	0x08006a3b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	2101      	movs	r1, #1
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 f97a 	bl	8007d10 <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a20:	e00c      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3324      	adds	r3, #36	; 0x24
 8006a26:	2101      	movs	r1, #1
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 fa23 	bl	8007e74 <RCCEx_PLL3_Config>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	75fb      	strb	r3, [r7, #23]
      break;
 8006a38:	e000      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a42:	4b32      	ldr	r3, [pc, #200]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a4e:	492f      	ldr	r1, [pc, #188]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	654b      	str	r3, [r1, #84]	; 0x54
 8006a54:	e001      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d037      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	d820      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006a6e:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a74:	08006ab7 	.word	0x08006ab7
 8006a78:	08006a8d 	.word	0x08006a8d
 8006a7c:	08006a9f 	.word	0x08006a9f
 8006a80:	08006ab7 	.word	0x08006ab7
 8006a84:	08006ab7 	.word	0x08006ab7
 8006a88:	08006ab7 	.word	0x08006ab7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	2101      	movs	r1, #1
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 f93c 	bl	8007d10 <RCCEx_PLL2_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a9c:	e00c      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3324      	adds	r3, #36	; 0x24
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 f9e5 	bl	8007e74 <RCCEx_PLL3_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006aae:	e003      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab4:	e000      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006abe:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac2:	f023 0207 	bic.w	r2, r3, #7
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aca:	4910      	ldr	r1, [pc, #64]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	654b      	str	r3, [r1, #84]	; 0x54
 8006ad0:	e001      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d040      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae8:	2b05      	cmp	r3, #5
 8006aea:	d827      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b43 	.word	0x08006b43
 8006af8:	08006b19 	.word	0x08006b19
 8006afc:	08006b2b 	.word	0x08006b2b
 8006b00:	08006b43 	.word	0x08006b43
 8006b04:	08006b43 	.word	0x08006b43
 8006b08:	08006b43 	.word	0x08006b43
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	58024800 	.word	0x58024800
 8006b14:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 f8f6 	bl	8007d10 <RCCEx_PLL2_Config>
 8006b24:	4603      	mov	r3, r0
 8006b26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b28:	e00c      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3324      	adds	r3, #36	; 0x24
 8006b2e:	2101      	movs	r1, #1
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 f99f 	bl	8007e74 <RCCEx_PLL3_Config>
 8006b36:	4603      	mov	r3, r0
 8006b38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b3a:	e003      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b40:	e000      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b4a:	4bb2      	ldr	r3, [pc, #712]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	f023 0207 	bic.w	r2, r3, #7
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b58:	49ae      	ldr	r1, [pc, #696]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	658b      	str	r3, [r1, #88]	; 0x58
 8006b5e:	e001      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0320 	and.w	r3, r3, #32
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d044      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b7a:	d01b      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b80:	d805      	bhi.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d022      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b8a:	d00a      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006b8c:	e01b      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b92:	d01d      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b98:	d01c      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006b9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b9e:	d01b      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006ba0:	e011      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f8b1 	bl	8007d10 <RCCEx_PLL2_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bb2:	e012      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3324      	adds	r3, #36	; 0x24
 8006bb8:	2102      	movs	r1, #2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f001 f95a 	bl	8007e74 <RCCEx_PLL3_Config>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bc4:	e009      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bca:	e006      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006bcc:	bf00      	nop
 8006bce:	e004      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006bd0:	bf00      	nop
 8006bd2:	e002      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006bd4:	bf00      	nop
 8006bd6:	e000      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006be0:	4b8c      	ldr	r3, [pc, #560]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bee:	4989      	ldr	r1, [pc, #548]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	654b      	str	r3, [r1, #84]	; 0x54
 8006bf4:	e001      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d044      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c10:	d01b      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c16:	d805      	bhi.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d022      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c20:	d00a      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006c22:	e01b      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c28:	d01d      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006c2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c2e:	d01c      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c34:	d01b      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006c36:	e011      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 f866 	bl	8007d10 <RCCEx_PLL2_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c48:	e012      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3324      	adds	r3, #36	; 0x24
 8006c4e:	2102      	movs	r1, #2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 f90f 	bl	8007e74 <RCCEx_PLL3_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c5a:	e009      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c60:	e006      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c62:	bf00      	nop
 8006c64:	e004      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c66:	bf00      	nop
 8006c68:	e002      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c6a:	bf00      	nop
 8006c6c:	e000      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c76:	4b67      	ldr	r3, [pc, #412]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c84:	4963      	ldr	r1, [pc, #396]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	658b      	str	r3, [r1, #88]	; 0x58
 8006c8a:	e001      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d044      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ca6:	d01b      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cac:	d805      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d022      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb6:	d00a      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006cb8:	e01b      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cbe:	d01d      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006cc0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006cc4:	d01c      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006cc6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006cca:	d01b      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006ccc:	e011      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 f81b 	bl	8007d10 <RCCEx_PLL2_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cde:	e012      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3324      	adds	r3, #36	; 0x24
 8006ce4:	2102      	movs	r1, #2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 f8c4 	bl	8007e74 <RCCEx_PLL3_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cf0:	e009      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf6:	e006      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006cf8:	bf00      	nop
 8006cfa:	e004      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006cfc:	bf00      	nop
 8006cfe:	e002      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d00:	bf00      	nop
 8006d02:	e000      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d0c:	4b41      	ldr	r3, [pc, #260]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d1a:	493e      	ldr	r1, [pc, #248]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	658b      	str	r3, [r1, #88]	; 0x58
 8006d20:	e001      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
 8006d24:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d01a      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3c:	d10a      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3324      	adds	r3, #36	; 0x24
 8006d42:	2102      	movs	r1, #2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 f895 	bl	8007e74 <RCCEx_PLL3_Config>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d54:	4b2f      	ldr	r3, [pc, #188]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d62:	492c      	ldr	r1, [pc, #176]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01a      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d7e:	d10a      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3324      	adds	r3, #36	; 0x24
 8006d84:	2102      	movs	r1, #2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 f874 	bl	8007e74 <RCCEx_PLL3_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d96:	4b1f      	ldr	r3, [pc, #124]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006da4:	491b      	ldr	r1, [pc, #108]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d032      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc0:	d00d      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc6:	d016      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d111      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 ff9c 	bl	8007d10 <RCCEx_PLL2_Config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ddc:	e00c      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3324      	adds	r3, #36	; 0x24
 8006de2:	2102      	movs	r1, #2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 f845 	bl	8007e74 <RCCEx_PLL3_Config>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006dee:	e003      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	75fb      	strb	r3, [r7, #23]
      break;
 8006df4:	e000      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10c      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dfe:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e0c:	4901      	ldr	r1, [pc, #4]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	658b      	str	r3, [r1, #88]	; 0x58
 8006e12:	e003      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006e14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d02f      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e32:	d00c      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006e34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e38:	d015      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e3e:	d10f      	bne.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e40:	4b79      	ldr	r3, [pc, #484]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	4a78      	ldr	r2, [pc, #480]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e4c:	e00c      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3324      	adds	r3, #36	; 0x24
 8006e52:	2101      	movs	r1, #1
 8006e54:	4618      	mov	r0, r3
 8006e56:	f001 f80d 	bl	8007e74 <RCCEx_PLL3_Config>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e5e:	e003      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
      break;
 8006e64:	e000      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e6e:	4b6e      	ldr	r3, [pc, #440]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e7c:	496a      	ldr	r1, [pc, #424]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	654b      	str	r3, [r1, #84]	; 0x54
 8006e82:	e001      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d029      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea0:	d007      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006ea2:	e00f      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea4:	4b60      	ldr	r3, [pc, #384]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	4a5f      	ldr	r2, [pc, #380]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006eb0:	e00b      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 ff29 	bl	8007d10 <RCCEx_PLL2_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ec2:	e002      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d109      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ed0:	4b55      	ldr	r3, [pc, #340]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006edc:	4952      	ldr	r1, [pc, #328]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ee2:	e001      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3324      	adds	r3, #36	; 0x24
 8006ef8:	2102      	movs	r1, #2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 ffba 	bl	8007e74 <RCCEx_PLL3_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d02f      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1e:	d00c      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f24:	d802      	bhi.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d011      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006f2a:	e00d      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f30:	d00f      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f36:	d00e      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006f38:	e006      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3a:	4b3b      	ldr	r3, [pc, #236]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	4a3a      	ldr	r2, [pc, #232]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f46:	e007      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f4c:	e004      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006f4e:	bf00      	nop
 8006f50:	e002      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006f52:	bf00      	nop
 8006f54:	e000      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f5e:	4b32      	ldr	r3, [pc, #200]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f6a:	492f      	ldr	r1, [pc, #188]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	654b      	str	r3, [r1, #84]	; 0x54
 8006f70:	e001      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f82:	4b29      	ldr	r3, [pc, #164]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8e:	4926      	ldr	r1, [pc, #152]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006fa0:	4b21      	ldr	r3, [pc, #132]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fae:	491e      	ldr	r1, [pc, #120]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d008      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fc0:	4b19      	ldr	r3, [pc, #100]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fcc:	4916      	ldr	r1, [pc, #88]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00d      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fde:	4b12      	ldr	r3, [pc, #72]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	4a11      	ldr	r2, [pc, #68]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fe4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fe8:	6113      	str	r3, [r2, #16]
 8006fea:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fec:	691a      	ldr	r2, [r3, #16]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ff4:	490c      	ldr	r1, [pc, #48]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	da08      	bge.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007006:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700e:	4906      	ldr	r1, [pc, #24]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007010:	4313      	orrs	r3, r2
 8007012:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007014:	7dbb      	ldrb	r3, [r7, #22]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	e000      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	58024400 	.word	0x58024400

0800702c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b090      	sub	sp, #64	; 0x40
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800703a:	d150      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800703c:	4ba1      	ldr	r3, [pc, #644]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800703e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	2b04      	cmp	r3, #4
 800704a:	d844      	bhi.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	08007069 	.word	0x08007069
 8007058:	08007079 	.word	0x08007079
 800705c:	08007089 	.word	0x08007089
 8007060:	080070d1 	.word	0x080070d1
 8007064:	08007099 	.word	0x08007099
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fd03 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007076:	e241      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007078:	f107 0318 	add.w	r3, r7, #24
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fa63 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007086:	e239      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007088:	f107 030c 	add.w	r3, r7, #12
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fba7 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007096:	e231      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007098:	4b8a      	ldr	r3, [pc, #552]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800709a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070a0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80070a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80070a8:	4b87      	ldr	r3, [pc, #540]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80070ac:	e226      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80070ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070b4:	d102      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80070b6:	4b85      	ldr	r3, [pc, #532]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80070b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ba:	e21f      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80070bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c2:	d102      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80070c4:	4b82      	ldr	r3, [pc, #520]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070c8:	e218      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ce:	e215      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070d0:	4b80      	ldr	r3, [pc, #512]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070d4:	e212      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070da:	bf00      	nop
 80070dc:	e20e      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e4:	d14f      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80070e6:	4b77      	ldr	r3, [pc, #476]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80070ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	2b80      	cmp	r3, #128	; 0x80
 80070f4:	d01c      	beq.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80070f6:	2b80      	cmp	r3, #128	; 0x80
 80070f8:	d804      	bhi.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d008      	beq.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	d00e      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007102:	e03c      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007104:	2bc0      	cmp	r3, #192	; 0xc0
 8007106:	d037      	beq.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710c:	d018      	beq.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800710e:	e036      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fcaf 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800711e:	e1ed      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007120:	f107 0318 	add.w	r3, r7, #24
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fa0f 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800712e:	e1e5      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fb53 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713e:	e1dd      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007140:	4b60      	ldr	r3, [pc, #384]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007144:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007148:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800714a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714c:	2b00      	cmp	r3, #0
 800714e:	d102      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007150:	4b5d      	ldr	r3, [pc, #372]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007154:	e1d2      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800715c:	d102      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800715e:	4b5b      	ldr	r3, [pc, #364]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007162:	e1cb      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800716a:	d102      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800716c:	4b58      	ldr	r3, [pc, #352]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007170:	e1c4      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007172:	2300      	movs	r3, #0
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007176:	e1c1      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007178:	4b56      	ldr	r3, [pc, #344]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800717a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800717c:	e1be      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007182:	bf00      	nop
 8007184:	e1ba      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800718c:	d153      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800718e:	4b4d      	ldr	r3, [pc, #308]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007192:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007196:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800719e:	d01f      	beq.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80071a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071a4:	d805      	bhi.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80071aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071ae:	d00f      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80071b0:	e03d      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80071b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80071b6:	d037      	beq.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80071b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071bc:	d018      	beq.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80071be:	e036      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fc57 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ce:	e195      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d0:	f107 0318 	add.w	r3, r7, #24
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 f9b7 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071de:	e18d      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071e0:	f107 030c 	add.w	r3, r7, #12
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fafb 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ee:	e185      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071f0:	4b34      	ldr	r3, [pc, #208]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007200:	4b31      	ldr	r3, [pc, #196]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007204:	e17a      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800720c:	d102      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800720e:	4b2f      	ldr	r3, [pc, #188]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007212:	e173      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800721a:	d102      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800721c:	4b2c      	ldr	r3, [pc, #176]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800721e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007220:	e16c      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007226:	e169      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007228:	4b2a      	ldr	r3, [pc, #168]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800722c:	e166      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007232:	bf00      	nop
 8007234:	e162      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800723c:	d15d      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800723e:	4b21      	ldr	r3, [pc, #132]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007242:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007246:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800724e:	d01f      	beq.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007254:	d805      	bhi.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800725a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800725e:	d00f      	beq.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007260:	e047      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007262:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007266:	d041      	beq.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800726c:	d018      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800726e:	e040      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fbff 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800727e:	e13d      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007280:	f107 0318 	add.w	r3, r7, #24
 8007284:	4618      	mov	r0, r3
 8007286:	f000 f95f 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800728e:	e135      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007290:	f107 030c 	add.w	r3, r7, #12
 8007294:	4618      	mov	r0, r3
 8007296:	f000 faa3 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800729e:	e12d      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80072a0:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072a8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80072b4:	e122      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80072b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072bc:	d10c      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80072be:	4b03      	ldr	r3, [pc, #12]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c2:	e11b      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80072c4:	58024400 	.word	0x58024400
 80072c8:	03d09000 	.word	0x03d09000
 80072cc:	003d0900 	.word	0x003d0900
 80072d0:	017d7840 	.word	0x017d7840
 80072d4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80072d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072de:	d102      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80072e0:	4b89      	ldr	r3, [pc, #548]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e4:	e10a      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ea:	e107      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072ec:	4b87      	ldr	r3, [pc, #540]	; (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f0:	e104      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f6:	bf00      	nop
 80072f8:	e100      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007300:	d153      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007302:	4b83      	ldr	r3, [pc, #524]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007306:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800730a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007312:	d01f      	beq.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007318:	d805      	bhi.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800731e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007322:	d00f      	beq.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007324:	e03d      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007326:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800732a:	d037      	beq.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800732c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007330:	d018      	beq.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007332:	e036      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fb9d 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007342:	e0db      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007344:	f107 0318 	add.w	r3, r7, #24
 8007348:	4618      	mov	r0, r3
 800734a:	f000 f8fd 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007352:	e0d3      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007354:	f107 030c 	add.w	r3, r7, #12
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fa41 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007362:	e0cb      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007364:	4b6a      	ldr	r3, [pc, #424]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800736c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800736e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007374:	4b67      	ldr	r3, [pc, #412]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007378:	e0c0      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007380:	d102      	bne.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007382:	4b65      	ldr	r3, [pc, #404]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007384:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007386:	e0b9      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800738e:	d102      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007390:	4b5d      	ldr	r3, [pc, #372]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007394:	e0b2      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800739a:	e0af      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800739c:	4b5b      	ldr	r3, [pc, #364]	; (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a0:	e0ac      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a6:	bf00      	nop
 80073a8:	e0a8      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073b0:	d13d      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80073b2:	4b57      	ldr	r3, [pc, #348]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80073b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c2:	d00c      	beq.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80073c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073c8:	d011      	beq.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d12b      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ce:	f107 0318 	add.w	r3, r7, #24
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 f8b8 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073dc:	e08e      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073de:	f107 030c 	add.w	r3, r7, #12
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 f9fc 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ec:	e086      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073ee:	4b48      	ldr	r3, [pc, #288]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80073f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80073f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d102      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80073fe:	4b45      	ldr	r3, [pc, #276]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007402:	e07b      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800740a:	d102      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800740c:	4b42      	ldr	r3, [pc, #264]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007410:	e074      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007418:	d102      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800741a:	4b3b      	ldr	r3, [pc, #236]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741e:	e06d      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007424:	e06a      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800742a:	bf00      	nop
 800742c:	e066      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007434:	d11f      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007436:	4b36      	ldr	r3, [pc, #216]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800743a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800743e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800744a:	d008      	beq.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800744c:	e00f      	b.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800744e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fb10 	bl	8007a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800745c:	e04e      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800745e:	f107 0318 	add.w	r3, r7, #24
 8007462:	4618      	mov	r0, r3
 8007464:	f000 f870 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800746c:	e046      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007472:	bf00      	nop
 8007474:	e042      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800747c:	d13c      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800747e:	4b24      	ldr	r3, [pc, #144]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007482:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007486:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800748e:	d01e      	beq.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007494:	d805      	bhi.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00d      	beq.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800749a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800749e:	d00e      	beq.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80074a0:	e026      	b.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80074a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a6:	d01d      	beq.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80074a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074ac:	d01d      	beq.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80074ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074b2:	d014      	beq.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80074b4:	e01c      	b.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80074b6:	f000 f831 	bl	800751c <HAL_RCCEx_GetD3PCLK1Freq>
 80074ba:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80074bc:	e01e      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074be:	f107 0318 	add.w	r3, r7, #24
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f840 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074cc:	e016      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ce:	f107 030c 	add.w	r3, r7, #12
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 f984 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074dc:	e00e      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80074de:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e2:	e00b      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80074e4:	4b0c      	ldr	r3, [pc, #48]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80074e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e8:	e008      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80074ea:	4b07      	ldr	r3, [pc, #28]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ee:	e005      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074f4:	bf00      	nop
 80074f6:	e001      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80074fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3740      	adds	r7, #64	; 0x40
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	017d7840 	.word	0x017d7840
 800750c:	00bb8000 	.word	0x00bb8000
 8007510:	58024400 	.word	0x58024400
 8007514:	03d09000 	.word	0x03d09000
 8007518:	003d0900 	.word	0x003d0900

0800751c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007520:	f7fe fe1e 	bl	8006160 <HAL_RCC_GetHCLKFreq>
 8007524:	4601      	mov	r1, r0
 8007526:	4b06      	ldr	r3, [pc, #24]	; (8007540 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	091b      	lsrs	r3, r3, #4
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	4a04      	ldr	r2, [pc, #16]	; (8007544 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007532:	5cd3      	ldrb	r3, [r2, r3]
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800753c:	4618      	mov	r0, r3
 800753e:	bd80      	pop	{r7, pc}
 8007540:	58024400 	.word	0x58024400
 8007544:	08013434 	.word	0x08013434

08007548 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007548:	b480      	push	{r7}
 800754a:	b089      	sub	sp, #36	; 0x24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007550:	4b9d      	ldr	r3, [pc, #628]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800755a:	4b9b      	ldr	r3, [pc, #620]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800755c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755e:	0b1b      	lsrs	r3, r3, #12
 8007560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007564:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007566:	4b98      	ldr	r3, [pc, #608]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	091b      	lsrs	r3, r3, #4
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007572:	4b95      	ldr	r3, [pc, #596]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007576:	08db      	lsrs	r3, r3, #3
 8007578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	fb02 f303 	mul.w	r3, r2, r3
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 810a 	beq.w	80077aa <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d05a      	beq.n	8007652 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800759c:	2b01      	cmp	r3, #1
 800759e:	d302      	bcc.n	80075a6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d078      	beq.n	8007696 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80075a4:	e099      	b.n	80076da <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a6:	4b88      	ldr	r3, [pc, #544]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d02d      	beq.n	800760e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075b2:	4b85      	ldr	r3, [pc, #532]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	08db      	lsrs	r3, r3, #3
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	4a83      	ldr	r2, [pc, #524]	; (80077cc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80075be:	fa22 f303 	lsr.w	r3, r2, r3
 80075c2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	ee07 3a90 	vmov	s15, r3
 80075d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075dc:	4b7a      	ldr	r3, [pc, #488]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e4:	ee07 3a90 	vmov	s15, r3
 80075e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80075f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007608:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800760c:	e087      	b.n	800771e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	ee07 3a90 	vmov	s15, r3
 8007614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007618:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80077d4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800761c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007620:	4b69      	ldr	r3, [pc, #420]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007630:	ed97 6a03 	vldr	s12, [r7, #12]
 8007634:	eddf 5a66 	vldr	s11, [pc, #408]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007650:	e065      	b.n	800771e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80077d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007664:	4b58      	ldr	r3, [pc, #352]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766c:	ee07 3a90 	vmov	s15, r3
 8007670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007674:	ed97 6a03 	vldr	s12, [r7, #12]
 8007678:	eddf 5a55 	vldr	s11, [pc, #340]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800767c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007690:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007694:	e043      	b.n	800771e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	ee07 3a90 	vmov	s15, r3
 800769c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80076a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a8:	4b47      	ldr	r3, [pc, #284]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b0:	ee07 3a90 	vmov	s15, r3
 80076b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076d8:	e021      	b.n	800771e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80077d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80076e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ec:	4b36      	ldr	r3, [pc, #216]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007700:	eddf 5a33 	vldr	s11, [pc, #204]	; 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007718:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800771c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800771e:	4b2a      	ldr	r3, [pc, #168]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	0a5b      	lsrs	r3, r3, #9
 8007724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007738:	edd7 6a07 	vldr	s13, [r7, #28]
 800773c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007744:	ee17 2a90 	vmov	r2, s15
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800774c:	4b1e      	ldr	r3, [pc, #120]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	0c1b      	lsrs	r3, r3, #16
 8007752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007766:	edd7 6a07 	vldr	s13, [r7, #28]
 800776a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800776e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007772:	ee17 2a90 	vmov	r2, s15
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800777a:	4b13      	ldr	r3, [pc, #76]	; (80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	0e1b      	lsrs	r3, r3, #24
 8007780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007794:	edd7 6a07 	vldr	s13, [r7, #28]
 8007798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a0:	ee17 2a90 	vmov	r2, s15
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077a8:	e008      	b.n	80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	609a      	str	r2, [r3, #8]
}
 80077bc:	bf00      	nop
 80077be:	3724      	adds	r7, #36	; 0x24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	58024400 	.word	0x58024400
 80077cc:	03d09000 	.word	0x03d09000
 80077d0:	46000000 	.word	0x46000000
 80077d4:	4c742400 	.word	0x4c742400
 80077d8:	4a742400 	.word	0x4a742400
 80077dc:	4bbebc20 	.word	0x4bbebc20

080077e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b089      	sub	sp, #36	; 0x24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077e8:	4b9d      	ldr	r3, [pc, #628]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80077f2:	4b9b      	ldr	r3, [pc, #620]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	0d1b      	lsrs	r3, r3, #20
 80077f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80077fe:	4b98      	ldr	r3, [pc, #608]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	0a1b      	lsrs	r3, r3, #8
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800780a:	4b95      	ldr	r3, [pc, #596]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800780c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780e:	08db      	lsrs	r3, r3, #3
 8007810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	fb02 f303 	mul.w	r3, r2, r3
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 810a 	beq.w	8007a42 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d05a      	beq.n	80078ea <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007834:	2b01      	cmp	r3, #1
 8007836:	d302      	bcc.n	800783e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007838:	2b02      	cmp	r3, #2
 800783a:	d078      	beq.n	800792e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800783c:	e099      	b.n	8007972 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800783e:	4b88      	ldr	r3, [pc, #544]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d02d      	beq.n	80078a6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800784a:	4b85      	ldr	r3, [pc, #532]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	08db      	lsrs	r3, r3, #3
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	4a83      	ldr	r2, [pc, #524]	; (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007856:	fa22 f303 	lsr.w	r3, r2, r3
 800785a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007874:	4b7a      	ldr	r3, [pc, #488]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787c:	ee07 3a90 	vmov	s15, r3
 8007880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007884:	ed97 6a03 	vldr	s12, [r7, #12]
 8007888:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800788c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078a4:	e087      	b.n	80079b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a6c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80078b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b8:	4b69      	ldr	r3, [pc, #420]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80078cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80078d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078e8:	e065      	b.n	80079b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80078f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fc:	4b58      	ldr	r3, [pc, #352]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007904:	ee07 3a90 	vmov	s15, r3
 8007908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007910:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007928:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800792c:	e043      	b.n	80079b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	ee07 3a90 	vmov	s15, r3
 8007934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007938:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800793c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007940:	4b47      	ldr	r3, [pc, #284]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007950:	ed97 6a03 	vldr	s12, [r7, #12]
 8007954:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007970:	e021      	b.n	80079b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	ee07 3a90 	vmov	s15, r3
 8007978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007984:	4b36      	ldr	r3, [pc, #216]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798c:	ee07 3a90 	vmov	s15, r3
 8007990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007994:	ed97 6a03 	vldr	s12, [r7, #12]
 8007998:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800799c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079b4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80079b6:	4b2a      	ldr	r3, [pc, #168]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	0a5b      	lsrs	r3, r3, #9
 80079bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079dc:	ee17 2a90 	vmov	r2, s15
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80079e4:	4b1e      	ldr	r3, [pc, #120]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	0c1b      	lsrs	r3, r3, #16
 80079ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a0a:	ee17 2a90 	vmov	r2, s15
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007a12:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	0e1b      	lsrs	r3, r3, #24
 8007a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a1c:	ee07 3a90 	vmov	s15, r3
 8007a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a38:	ee17 2a90 	vmov	r2, s15
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a40:	e008      	b.n	8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	609a      	str	r2, [r3, #8]
}
 8007a54:	bf00      	nop
 8007a56:	3724      	adds	r7, #36	; 0x24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	58024400 	.word	0x58024400
 8007a64:	03d09000 	.word	0x03d09000
 8007a68:	46000000 	.word	0x46000000
 8007a6c:	4c742400 	.word	0x4c742400
 8007a70:	4a742400 	.word	0x4a742400
 8007a74:	4bbebc20 	.word	0x4bbebc20

08007a78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b089      	sub	sp, #36	; 0x24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a80:	4b9d      	ldr	r3, [pc, #628]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	f003 0303 	and.w	r3, r3, #3
 8007a88:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007a8a:	4b9b      	ldr	r3, [pc, #620]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8e:	091b      	lsrs	r3, r3, #4
 8007a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a94:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007a96:	4b98      	ldr	r3, [pc, #608]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007aa0:	4b95      	ldr	r3, [pc, #596]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa4:	08db      	lsrs	r3, r3, #3
 8007aa6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	fb02 f303 	mul.w	r3, r2, r3
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 810a 	beq.w	8007cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d05a      	beq.n	8007b80 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d302      	bcc.n	8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d078      	beq.n	8007bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007ad2:	e099      	b.n	8007c08 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ad4:	4b88      	ldr	r3, [pc, #544]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0320 	and.w	r3, r3, #32
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d02d      	beq.n	8007b3c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ae0:	4b85      	ldr	r3, [pc, #532]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	08db      	lsrs	r3, r3, #3
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	4a84      	ldr	r2, [pc, #528]	; (8007cfc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007aec:	fa22 f303 	lsr.w	r3, r2, r3
 8007af0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	ee07 3a90 	vmov	s15, r3
 8007af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0a:	4b7b      	ldr	r3, [pc, #492]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d00 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b3a:	e087      	b.n	8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4e:	4b6a      	ldr	r3, [pc, #424]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d00 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b7e:	e065      	b.n	8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b92:	4b59      	ldr	r3, [pc, #356]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ba6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d00 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bc2:	e043      	b.n	8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd6:	4b48      	ldr	r3, [pc, #288]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d00 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c06:	e021      	b.n	8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c1a:	4b37      	ldr	r3, [pc, #220]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d00 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c4a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007c4c:	4b2a      	ldr	r3, [pc, #168]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c50:	0a5b      	lsrs	r3, r3, #9
 8007c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c72:	ee17 2a90 	vmov	r2, s15
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007c7a:	4b1f      	ldr	r3, [pc, #124]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7e:	0c1b      	lsrs	r3, r3, #16
 8007c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c84:	ee07 3a90 	vmov	s15, r3
 8007c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ca0:	ee17 2a90 	vmov	r2, s15
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007ca8:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cac:	0e1b      	lsrs	r3, r3, #24
 8007cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cce:	ee17 2a90 	vmov	r2, s15
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007cd6:	e008      	b.n	8007cea <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	609a      	str	r2, [r3, #8]
}
 8007cea:	bf00      	nop
 8007cec:	3724      	adds	r7, #36	; 0x24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	58024400 	.word	0x58024400
 8007cfc:	03d09000 	.word	0x03d09000
 8007d00:	46000000 	.word	0x46000000
 8007d04:	4c742400 	.word	0x4c742400
 8007d08:	4a742400 	.word	0x4a742400
 8007d0c:	4bbebc20 	.word	0x4bbebc20

08007d10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d1e:	4b53      	ldr	r3, [pc, #332]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d22:	f003 0303 	and.w	r3, r3, #3
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d101      	bne.n	8007d2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e099      	b.n	8007e62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d2e:	4b4f      	ldr	r3, [pc, #316]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a4e      	ldr	r2, [pc, #312]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007d34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d3a:	f7f9 fd1f 	bl	800177c <HAL_GetTick>
 8007d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d40:	e008      	b.n	8007d54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d42:	f7f9 fd1b 	bl	800177c <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d901      	bls.n	8007d54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e086      	b.n	8007e62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d54:	4b45      	ldr	r3, [pc, #276]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1f0      	bne.n	8007d42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d60:	4b42      	ldr	r3, [pc, #264]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	031b      	lsls	r3, r3, #12
 8007d6e:	493f      	ldr	r1, [pc, #252]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	628b      	str	r3, [r1, #40]	; 0x28
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	025b      	lsls	r3, r3, #9
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	041b      	lsls	r3, r3, #16
 8007d92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	061b      	lsls	r3, r3, #24
 8007da0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007da4:	4931      	ldr	r1, [pc, #196]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007daa:	4b30      	ldr	r3, [pc, #192]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	492d      	ldr	r1, [pc, #180]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007dbc:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	f023 0220 	bic.w	r2, r3, #32
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	4928      	ldr	r1, [pc, #160]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007dce:	4b27      	ldr	r3, [pc, #156]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd2:	4a26      	ldr	r2, [pc, #152]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007dd4:	f023 0310 	bic.w	r3, r3, #16
 8007dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007dda:	4b24      	ldr	r3, [pc, #144]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dde:	4b24      	ldr	r3, [pc, #144]	; (8007e70 <RCCEx_PLL2_Config+0x160>)
 8007de0:	4013      	ands	r3, r2
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	69d2      	ldr	r2, [r2, #28]
 8007de6:	00d2      	lsls	r2, r2, #3
 8007de8:	4920      	ldr	r1, [pc, #128]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007dee:	4b1f      	ldr	r3, [pc, #124]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	4a1e      	ldr	r2, [pc, #120]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007df4:	f043 0310 	orr.w	r3, r3, #16
 8007df8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d106      	bne.n	8007e0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e00:	4b1a      	ldr	r3, [pc, #104]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	4a19      	ldr	r2, [pc, #100]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007e06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e0c:	e00f      	b.n	8007e2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d106      	bne.n	8007e22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e14:	4b15      	ldr	r3, [pc, #84]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	4a14      	ldr	r2, [pc, #80]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e20:	e005      	b.n	8007e2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e22:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	4a11      	ldr	r2, [pc, #68]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e2e:	4b0f      	ldr	r3, [pc, #60]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a0e      	ldr	r2, [pc, #56]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e3a:	f7f9 fc9f 	bl	800177c <HAL_GetTick>
 8007e3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e40:	e008      	b.n	8007e54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e42:	f7f9 fc9b 	bl	800177c <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d901      	bls.n	8007e54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e006      	b.n	8007e62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e54:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <RCCEx_PLL2_Config+0x15c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0f0      	beq.n	8007e42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	58024400 	.word	0x58024400
 8007e70:	ffff0007 	.word	0xffff0007

08007e74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e82:	4b53      	ldr	r3, [pc, #332]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d101      	bne.n	8007e92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e099      	b.n	8007fc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e92:	4b4f      	ldr	r3, [pc, #316]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a4e      	ldr	r2, [pc, #312]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e9e:	f7f9 fc6d 	bl	800177c <HAL_GetTick>
 8007ea2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ea4:	e008      	b.n	8007eb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ea6:	f7f9 fc69 	bl	800177c <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e086      	b.n	8007fc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007eb8:	4b45      	ldr	r3, [pc, #276]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1f0      	bne.n	8007ea6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ec4:	4b42      	ldr	r3, [pc, #264]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	051b      	lsls	r3, r3, #20
 8007ed2:	493f      	ldr	r1, [pc, #252]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	628b      	str	r3, [r1, #40]	; 0x28
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	025b      	lsls	r3, r3, #9
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	041b      	lsls	r3, r3, #16
 8007ef6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	061b      	lsls	r3, r3, #24
 8007f04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f08:	4931      	ldr	r1, [pc, #196]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f0e:	4b30      	ldr	r3, [pc, #192]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	492d      	ldr	r1, [pc, #180]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f20:	4b2b      	ldr	r3, [pc, #172]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	4928      	ldr	r1, [pc, #160]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f32:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f36:	4a26      	ldr	r2, [pc, #152]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f3e:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f42:	4b24      	ldr	r3, [pc, #144]	; (8007fd4 <RCCEx_PLL3_Config+0x160>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	69d2      	ldr	r2, [r2, #28]
 8007f4a:	00d2      	lsls	r2, r2, #3
 8007f4c:	4920      	ldr	r1, [pc, #128]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f52:	4b1f      	ldr	r3, [pc, #124]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f56:	4a1e      	ldr	r2, [pc, #120]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d106      	bne.n	8007f72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f64:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	4a19      	ldr	r2, [pc, #100]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f70:	e00f      	b.n	8007f92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d106      	bne.n	8007f86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f78:	4b15      	ldr	r3, [pc, #84]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	4a14      	ldr	r2, [pc, #80]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f84:	e005      	b.n	8007f92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f86:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	4a11      	ldr	r2, [pc, #68]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f92:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a0e      	ldr	r2, [pc, #56]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f9e:	f7f9 fbed 	bl	800177c <HAL_GetTick>
 8007fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fa4:	e008      	b.n	8007fb8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007fa6:	f7f9 fbe9 	bl	800177c <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d901      	bls.n	8007fb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e006      	b.n	8007fc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fb8:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <RCCEx_PLL3_Config+0x15c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0f0      	beq.n	8007fa6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	58024400 	.word	0x58024400
 8007fd4:	ffff0007 	.word	0xffff0007

08007fd8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e07c      	b.n	80080e4 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10c      	bne.n	8008010 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d102      	bne.n	800800a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7f9 f89a 	bl	8001144 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2203      	movs	r2, #3
 8008014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f867 	bl	80080ec <HAL_SD_InitCard>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e05d      	b.n	80080e4 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008028:	f107 0308 	add.w	r3, r7, #8
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fdbe 	bl	8008bb0 <HAL_SD_GetCardStatus>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e052      	b.n	80080e4 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800803e:	7e3b      	ldrb	r3, [r7, #24]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008044:	7e7b      	ldrb	r3, [r7, #25]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804e:	2b01      	cmp	r3, #1
 8008050:	d10a      	bne.n	8008068 <HAL_SD_Init+0x90>
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	2b00      	cmp	r3, #0
 8008056:	d102      	bne.n	800805e <HAL_SD_Init+0x86>
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d004      	beq.n	8008068 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008064:	65da      	str	r2, [r3, #92]	; 0x5c
 8008066:	e00b      	b.n	8008080 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806c:	2b01      	cmp	r3, #1
 800806e:	d104      	bne.n	800807a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008076:	65da      	str	r2, [r3, #92]	; 0x5c
 8008078:	e002      	b.n	8008080 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fe74 	bl	8008d74 <HAL_SD_ConfigWideBusOperation>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e026      	b.n	80080e4 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008096:	f7f9 fb71 	bl	800177c <HAL_GetTick>
 800809a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800809c:	e011      	b.n	80080c2 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800809e:	f7f9 fb6d 	bl	800177c <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ac:	d109      	bne.n	80080c2 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e010      	b.n	80080e4 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 ff00 	bl	8008ec8 <HAL_SD_GetCardState>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d1e7      	bne.n	800809e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3728      	adds	r7, #40	; 0x28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80080ec:	b5b0      	push	{r4, r5, r7, lr}
 80080ee:	b08e      	sub	sp, #56	; 0x38
 80080f0:	af04      	add	r7, sp, #16
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80080fc:	2300      	movs	r3, #0
 80080fe:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008100:	2300      	movs	r3, #0
 8008102:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008104:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008108:	f7fe ff90 	bl	800702c <HAL_RCCEx_GetPeriphCLKFreq>
 800810c:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	0a1b      	lsrs	r3, r3, #8
 8008112:	4a40      	ldr	r2, [pc, #256]	; (8008214 <HAL_SD_InitCard+0x128>)
 8008114:	fba2 2303 	umull	r2, r3, r2, r3
 8008118:	091b      	lsrs	r3, r3, #4
 800811a:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	2b02      	cmp	r3, #2
 8008122:	d107      	bne.n	8008134 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f042 0210 	orr.w	r2, r2, #16
 8008132:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681d      	ldr	r5, [r3, #0]
 8008138:	466c      	mov	r4, sp
 800813a:	f107 0314 	add.w	r3, r7, #20
 800813e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008146:	f107 0308 	add.w	r3, r7, #8
 800814a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800814c:	4628      	mov	r0, r5
 800814e:	f002 fc9b 	bl	800aa88 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4618      	mov	r0, r3
 8008158:	f002 fcde 	bl	800ab18 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008162:	fbb2 f3f3 	udiv	r3, r2, r3
 8008166:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800816e:	4a2a      	ldr	r2, [pc, #168]	; (8008218 <HAL_SD_InitCard+0x12c>)
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	fbb2 f3f3 	udiv	r3, r2, r3
 8008176:	3301      	adds	r3, #1
 8008178:	4618      	mov	r0, r3
 800817a:	f7f9 fb0b 	bl	8001794 <HAL_Delay>
 800817e:	e002      	b.n	8008186 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8008180:	2002      	movs	r0, #2
 8008182:	f7f9 fb07 	bl	8001794 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 ff7c 	bl	8009084 <SD_PowerON>
 800818c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e02e      	b.n	800820a <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 feab 	bl	8008f08 <SD_InitCard>
 80081b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00b      	beq.n	80081d2 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	431a      	orrs	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e01b      	b.n	800820a <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081da:	4618      	mov	r0, r3
 80081dc:	f002 fd32 	bl	800ac44 <SDMMC_CmdBlockLength>
 80081e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00f      	beq.n	8008208 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a0b      	ldr	r2, [pc, #44]	; (800821c <HAL_SD_InitCard+0x130>)
 80081ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3728      	adds	r7, #40	; 0x28
 800820e:	46bd      	mov	sp, r7
 8008210:	bdb0      	pop	{r4, r5, r7, pc}
 8008212:	bf00      	nop
 8008214:	014f8b59 	.word	0x014f8b59
 8008218:	00012110 	.word	0x00012110
 800821c:	1fe00fff 	.word	0x1fe00fff

08008220 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b092      	sub	sp, #72	; 0x48
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800822e:	f7f9 faa5 	bl	800177c <HAL_GetTick>
 8008232:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d107      	bne.n	8008252 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e167      	b.n	8008522 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b01      	cmp	r3, #1
 800825c:	f040 815a 	bne.w	8008514 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	441a      	add	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008270:	429a      	cmp	r2, r3
 8008272:	d907      	bls.n	8008284 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e14e      	b.n	8008522 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2203      	movs	r2, #3
 8008288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2200      	movs	r2, #0
 8008292:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008298:	2b01      	cmp	r3, #1
 800829a:	d002      	beq.n	80082a2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800829c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829e:	025b      	lsls	r3, r3, #9
 80082a0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80082a2:	f04f 33ff 	mov.w	r3, #4294967295
 80082a6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	025b      	lsls	r3, r3, #9
 80082ac:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80082ae:	2390      	movs	r3, #144	; 0x90
 80082b0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80082b2:	2302      	movs	r3, #2
 80082b4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80082ba:	2300      	movs	r3, #0
 80082bc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f107 0214 	add.w	r2, r7, #20
 80082c6:	4611      	mov	r1, r2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f002 fc8f 	bl	800abec <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082dc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d90a      	bls.n	80082fa <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2202      	movs	r2, #2
 80082e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082f0:	4618      	mov	r0, r3
 80082f2:	f002 fced 	bl	800acd0 <SDMMC_CmdReadMultiBlock>
 80082f6:	6478      	str	r0, [r7, #68]	; 0x44
 80082f8:	e009      	b.n	800830e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008306:	4618      	mov	r0, r3
 8008308:	f002 fcbf 	bl	800ac8a <SDMMC_CmdReadSingleBlock>
 800830c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800830e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008310:	2b00      	cmp	r3, #0
 8008312:	d012      	beq.n	800833a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a84      	ldr	r2, [pc, #528]	; (800852c <HAL_SD_ReadBlocks+0x30c>)
 800831a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008322:	431a      	orrs	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e0f3      	b.n	8008522 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800833e:	e058      	b.n	80083f2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d033      	beq.n	80083b6 <HAL_SD_ReadBlocks+0x196>
 800834e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008350:	2b1f      	cmp	r3, #31
 8008352:	d930      	bls.n	80083b6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008354:	2300      	movs	r3, #0
 8008356:	643b      	str	r3, [r7, #64]	; 0x40
 8008358:	e027      	b.n	80083aa <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4618      	mov	r0, r3
 8008360:	f002 fbbc 	bl	800aadc <SDMMC_ReadFIFO>
 8008364:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	b2da      	uxtb	r2, r3
 800836a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800836e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008370:	3301      	adds	r3, #1
 8008372:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	0a1b      	lsrs	r3, r3, #8
 8008378:	b2da      	uxtb	r2, r3
 800837a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800837e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008380:	3301      	adds	r3, #1
 8008382:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	0c1b      	lsrs	r3, r3, #16
 8008388:	b2da      	uxtb	r2, r3
 800838a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	3301      	adds	r3, #1
 8008392:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	0e1b      	lsrs	r3, r3, #24
 8008398:	b2da      	uxtb	r2, r3
 800839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800839e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a0:	3301      	adds	r3, #1
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 80083a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a6:	3301      	adds	r3, #1
 80083a8:	643b      	str	r3, [r7, #64]	; 0x40
 80083aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ac:	2b07      	cmp	r3, #7
 80083ae:	d9d4      	bls.n	800835a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80083b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b2:	3b20      	subs	r3, #32
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80083b6:	f7f9 f9e1 	bl	800177c <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d902      	bls.n	80083cc <HAL_SD_ReadBlocks+0x1ac>
 80083c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d112      	bne.n	80083f2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a56      	ldr	r2, [pc, #344]	; (800852c <HAL_SD_ReadBlocks+0x30c>)
 80083d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e097      	b.n	8008522 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d09f      	beq.n	8008340 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800840e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841a:	2b00      	cmp	r3, #0
 800841c:	d022      	beq.n	8008464 <HAL_SD_ReadBlocks+0x244>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d91f      	bls.n	8008464 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008428:	2b03      	cmp	r3, #3
 800842a:	d01b      	beq.n	8008464 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4618      	mov	r0, r3
 8008432:	f002 fcb7 	bl	800ada4 <SDMMC_CmdStopTransfer>
 8008436:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800843a:	2b00      	cmp	r3, #0
 800843c:	d012      	beq.n	8008464 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a3a      	ldr	r2, [pc, #232]	; (800852c <HAL_SD_ReadBlocks+0x30c>)
 8008444:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800844a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800844c:	431a      	orrs	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e05e      	b.n	8008522 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	2b00      	cmp	r3, #0
 8008470:	d012      	beq.n	8008498 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a2d      	ldr	r2, [pc, #180]	; (800852c <HAL_SD_ReadBlocks+0x30c>)
 8008478:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847e:	f043 0208 	orr.w	r2, r3, #8
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e044      	b.n	8008522 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d012      	beq.n	80084cc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a20      	ldr	r2, [pc, #128]	; (800852c <HAL_SD_ReadBlocks+0x30c>)
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b2:	f043 0202 	orr.w	r2, r3, #2
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e02a      	b.n	8008522 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d012      	beq.n	8008500 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a13      	ldr	r2, [pc, #76]	; (800852c <HAL_SD_ReadBlocks+0x30c>)
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e6:	f043 0220 	orr.w	r2, r3, #32
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e010      	b.n	8008522 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a0a      	ldr	r2, [pc, #40]	; (8008530 <HAL_SD_ReadBlocks+0x310>)
 8008506:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	e006      	b.n	8008522 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
  }
}
 8008522:	4618      	mov	r0, r3
 8008524:	3748      	adds	r7, #72	; 0x48
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	1fe00fff 	.word	0x1fe00fff
 8008530:	18000f3a 	.word	0x18000f3a

08008534 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b092      	sub	sp, #72	; 0x48
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008542:	f7f9 f91b 	bl	800177c <HAL_GetTick>
 8008546:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d107      	bne.n	8008566 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e16b      	b.n	800883e <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b01      	cmp	r3, #1
 8008570:	f040 815e 	bne.w	8008830 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800857a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	441a      	add	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008584:	429a      	cmp	r2, r3
 8008586:	d907      	bls.n	8008598 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e152      	b.n	800883e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2203      	movs	r2, #3
 800859c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2200      	movs	r2, #0
 80085a6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d002      	beq.n	80085b6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	025b      	lsls	r3, r3, #9
 80085b4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085b6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ba:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	025b      	lsls	r3, r3, #9
 80085c0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80085c2:	2390      	movs	r3, #144	; 0x90
 80085c4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80085c6:	2300      	movs	r3, #0
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80085ce:	2300      	movs	r3, #0
 80085d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f107 0218 	add.w	r2, r7, #24
 80085da:	4611      	mov	r1, r2
 80085dc:	4618      	mov	r0, r3
 80085de:	f002 fb05 	bl	800abec <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085f0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d90a      	bls.n	800860e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2220      	movs	r2, #32
 80085fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008604:	4618      	mov	r0, r3
 8008606:	f002 fba9 	bl	800ad5c <SDMMC_CmdWriteMultiBlock>
 800860a:	6478      	str	r0, [r7, #68]	; 0x44
 800860c:	e009      	b.n	8008622 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2210      	movs	r2, #16
 8008612:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800861a:	4618      	mov	r0, r3
 800861c:	f002 fb7b 	bl	800ad16 <SDMMC_CmdWriteSingleBlock>
 8008620:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008624:	2b00      	cmp	r3, #0
 8008626:	d012      	beq.n	800864e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a86      	ldr	r2, [pc, #536]	; (8008848 <HAL_SD_WriteBlocks+0x314>)
 800862e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008636:	431a      	orrs	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e0f7      	b.n	800883e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008652:	e05c      	b.n	800870e <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d037      	beq.n	80086d2 <HAL_SD_WriteBlocks+0x19e>
 8008662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008664:	2b1f      	cmp	r3, #31
 8008666:	d934      	bls.n	80086d2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008668:	2300      	movs	r3, #0
 800866a:	643b      	str	r3, [r7, #64]	; 0x40
 800866c:	e02b      	b.n	80086c6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800866e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008676:	3301      	adds	r3, #1
 8008678:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800867a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	021a      	lsls	r2, r3, #8
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	4313      	orrs	r3, r2
 8008684:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008688:	3301      	adds	r3, #1
 800868a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800868c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	041a      	lsls	r2, r3, #16
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869a:	3301      	adds	r3, #1
 800869c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800869e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	061a      	lsls	r2, r3, #24
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	3301      	adds	r3, #1
 80086ae:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f107 0214 	add.w	r2, r7, #20
 80086b8:	4611      	mov	r1, r2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f002 fa1b 	bl	800aaf6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80086c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c2:	3301      	adds	r3, #1
 80086c4:	643b      	str	r3, [r7, #64]	; 0x40
 80086c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c8:	2b07      	cmp	r3, #7
 80086ca:	d9d0      	bls.n	800866e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80086cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ce:	3b20      	subs	r3, #32
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80086d2:	f7f9 f853 	bl	800177c <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086de:	429a      	cmp	r2, r3
 80086e0:	d902      	bls.n	80086e8 <HAL_SD_WriteBlocks+0x1b4>
 80086e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d112      	bne.n	800870e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a56      	ldr	r2, [pc, #344]	; (8008848 <HAL_SD_WriteBlocks+0x314>)
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f6:	431a      	orrs	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e097      	b.n	800883e <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008714:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008718:	2b00      	cmp	r3, #0
 800871a:	d09b      	beq.n	8008654 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800872a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008736:	2b00      	cmp	r3, #0
 8008738:	d022      	beq.n	8008780 <HAL_SD_WriteBlocks+0x24c>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d91f      	bls.n	8008780 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008744:	2b03      	cmp	r3, #3
 8008746:	d01b      	beq.n	8008780 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4618      	mov	r0, r3
 800874e:	f002 fb29 	bl	800ada4 <SDMMC_CmdStopTransfer>
 8008752:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008756:	2b00      	cmp	r3, #0
 8008758:	d012      	beq.n	8008780 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a3a      	ldr	r2, [pc, #232]	; (8008848 <HAL_SD_WriteBlocks+0x314>)
 8008760:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008768:	431a      	orrs	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e05e      	b.n	800883e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008786:	f003 0308 	and.w	r3, r3, #8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d012      	beq.n	80087b4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a2d      	ldr	r2, [pc, #180]	; (8008848 <HAL_SD_WriteBlocks+0x314>)
 8008794:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	f043 0208 	orr.w	r2, r3, #8
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e044      	b.n	800883e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d012      	beq.n	80087e8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a20      	ldr	r2, [pc, #128]	; (8008848 <HAL_SD_WriteBlocks+0x314>)
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	f043 0202 	orr.w	r2, r3, #2
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e02a      	b.n	800883e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d012      	beq.n	800881c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a13      	ldr	r2, [pc, #76]	; (8008848 <HAL_SD_WriteBlocks+0x314>)
 80087fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	f043 0210 	orr.w	r2, r3, #16
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e010      	b.n	800883e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a0a      	ldr	r2, [pc, #40]	; (800884c <HAL_SD_WriteBlocks+0x318>)
 8008822:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	e006      	b.n	800883e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008834:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
  }
}
 800883e:	4618      	mov	r0, r3
 8008840:	3748      	adds	r7, #72	; 0x48
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	1fe00fff 	.word	0x1fe00fff
 800884c:	18000f3a 	.word	0x18000f3a

08008850 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800885a:	bf00      	nop
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
	...

08008868 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008876:	0f9b      	lsrs	r3, r3, #30
 8008878:	b2da      	uxtb	r2, r3
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008882:	0e9b      	lsrs	r3, r3, #26
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f003 030f 	and.w	r3, r3, #15
 800888a:	b2da      	uxtb	r2, r3
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008894:	0e1b      	lsrs	r3, r3, #24
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f003 0303 	and.w	r3, r3, #3
 800889c:	b2da      	uxtb	r2, r3
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088a6:	0c1b      	lsrs	r3, r3, #16
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088c8:	0d1b      	lsrs	r3, r3, #20
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088d4:	0c1b      	lsrs	r3, r3, #16
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	f003 030f 	and.w	r3, r3, #15
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e6:	0bdb      	lsrs	r3, r3, #15
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f8:	0b9b      	lsrs	r3, r3, #14
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	b2da      	uxtb	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800890a:	0b5b      	lsrs	r3, r3, #13
 800890c:	b2db      	uxtb	r3, r3
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	b2da      	uxtb	r2, r3
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800891c:	0b1b      	lsrs	r3, r3, #12
 800891e:	b2db      	uxtb	r3, r3
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	b2da      	uxtb	r2, r3
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2200      	movs	r2, #0
 800892e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d163      	bne.n	8008a00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800893c:	009a      	lsls	r2, r3, #2
 800893e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008942:	4013      	ands	r3, r2
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008948:	0f92      	lsrs	r2, r2, #30
 800894a:	431a      	orrs	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008954:	0edb      	lsrs	r3, r3, #27
 8008956:	b2db      	uxtb	r3, r3
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	b2da      	uxtb	r2, r3
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008966:	0e1b      	lsrs	r3, r3, #24
 8008968:	b2db      	uxtb	r3, r3
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	b2da      	uxtb	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008978:	0d5b      	lsrs	r3, r3, #21
 800897a:	b2db      	uxtb	r3, r3
 800897c:	f003 0307 	and.w	r3, r3, #7
 8008980:	b2da      	uxtb	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800898a:	0c9b      	lsrs	r3, r3, #18
 800898c:	b2db      	uxtb	r3, r3
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	b2da      	uxtb	r2, r3
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800899c:	0bdb      	lsrs	r3, r3, #15
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	7e1b      	ldrb	r3, [r3, #24]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	3302      	adds	r3, #2
 80089c0:	2201      	movs	r2, #1
 80089c2:	fa02 f303 	lsl.w	r3, r2, r3
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80089ca:	fb02 f203 	mul.w	r2, r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	7a1b      	ldrb	r3, [r3, #8]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 030f 	and.w	r3, r3, #15
 80089dc:	2201      	movs	r2, #1
 80089de:	409a      	lsls	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80089ec:	0a52      	lsrs	r2, r2, #9
 80089ee:	fb02 f203 	mul.w	r2, r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089fc:	659a      	str	r2, [r3, #88]	; 0x58
 80089fe:	e031      	b.n	8008a64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d11d      	bne.n	8008a44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a0c:	041b      	lsls	r3, r3, #16
 8008a0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a16:	0c1b      	lsrs	r3, r3, #16
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	3301      	adds	r3, #1
 8008a24:	029a      	lsls	r2, r3, #10
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a38:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	659a      	str	r2, [r3, #88]	; 0x58
 8008a42:	e00f      	b.n	8008a64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a58      	ldr	r2, [pc, #352]	; (8008bac <HAL_SD_GetCardCSD+0x344>)
 8008a4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e09d      	b.n	8008ba0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a68:	0b9b      	lsrs	r3, r3, #14
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a7a:	09db      	lsrs	r3, r3, #7
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a9c:	0fdb      	lsrs	r3, r3, #31
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa8:	0f5b      	lsrs	r3, r3, #29
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	f003 0303 	and.w	r3, r3, #3
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aba:	0e9b      	lsrs	r3, r3, #26
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 0307 	and.w	r3, r3, #7
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008acc:	0d9b      	lsrs	r3, r3, #22
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ade:	0d5b      	lsrs	r3, r3, #21
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008afa:	0c1b      	lsrs	r3, r3, #16
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b0e:	0bdb      	lsrs	r3, r3, #15
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b22:	0b9b      	lsrs	r3, r3, #14
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b36:	0b5b      	lsrs	r3, r3, #13
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b4a:	0b1b      	lsrs	r3, r3, #12
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b5e:	0a9b      	lsrs	r3, r3, #10
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b72:	0a1b      	lsrs	r3, r3, #8
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b86:	085b      	lsrs	r3, r3, #1
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	1fe00fff 	.word	0x1fe00fff

08008bb0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b094      	sub	sp, #80	; 0x50
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008bc0:	f107 0308 	add.w	r3, r7, #8
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fb64 	bl	8009294 <SD_SendSDStatus>
 8008bcc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d011      	beq.n	8008bf8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a4f      	ldr	r2, [pc, #316]	; (8008d18 <HAL_SD_GetCardStatus+0x168>)
 8008bda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008be2:	431a      	orrs	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008bf6:	e070      	b.n	8008cda <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	099b      	lsrs	r3, r3, #6
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	095b      	lsrs	r3, r3, #5
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	0a1b      	lsrs	r3, r3, #8
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	0e1b      	lsrs	r3, r3, #24
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	061a      	lsls	r2, r3, #24
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c3e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	0a1b      	lsrs	r3, r3, #8
 8008c44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c48:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	0e1b      	lsrs	r3, r3, #24
 8008c4e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	0a1b      	lsrs	r3, r3, #8
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	0d1b      	lsrs	r3, r3, #20
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	f003 030f 	and.w	r3, r3, #15
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	0c1b      	lsrs	r3, r3, #16
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	0a9b      	lsrs	r3, r3, #10
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	0a1b      	lsrs	r3, r3, #8
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	f003 0303 	and.w	r3, r3, #3
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	091b      	lsrs	r3, r3, #4
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f003 030f 	and.w	r3, r3, #15
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f003 030f 	and.w	r3, r3, #15
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	0e1b      	lsrs	r3, r3, #24
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f001 ffae 	bl	800ac44 <SDMMC_CmdBlockLength>
 8008ce8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00d      	beq.n	8008d0c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a08      	ldr	r2, [pc, #32]	; (8008d18 <HAL_SD_GetCardStatus+0x168>)
 8008cf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cfc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008d0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3750      	adds	r7, #80	; 0x50
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	1fe00fff 	.word	0x1fe00fff

08008d1c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d74:	b5b0      	push	{r4, r5, r7, lr}
 8008d76:	b08e      	sub	sp, #56	; 0x38
 8008d78:	af04      	add	r7, sp, #16
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2203      	movs	r2, #3
 8008d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d90:	2b03      	cmp	r3, #3
 8008d92:	d02e      	beq.n	8008df2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d9a:	d106      	bne.n	8008daa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	639a      	str	r2, [r3, #56]	; 0x38
 8008da8:	e029      	b.n	8008dfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008db0:	d10a      	bne.n	8008dc8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fb66 	bl	8009484 <SD_WideBus_Enable>
 8008db8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8008dc6:	e01a      	b.n	8008dfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fba3 	bl	800951a <SD_WideBus_Disable>
 8008dd4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	639a      	str	r2, [r3, #56]	; 0x38
 8008de2:	e00c      	b.n	8008dfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38
 8008df0:	e005      	b.n	8008dfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d007      	beq.n	8008e16 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a2e      	ldr	r2, [pc, #184]	; (8008ec4 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008e0c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e14:	e034      	b.n	8008e80 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	2b03      	cmp	r3, #3
 8008e32:	d903      	bls.n	8008e3c <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	61bb      	str	r3, [r7, #24]
 8008e3a:	e012      	b.n	8008e62 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e44:	d103      	bne.n	8008e4e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	61bb      	str	r3, [r7, #24]
 8008e4c:	e009      	b.n	8008e62 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e56:	d102      	bne.n	8008e5e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008e58:	2302      	movs	r3, #2
 8008e5a:	61bb      	str	r3, [r7, #24]
 8008e5c:	e001      	b.n	8008e62 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008e5e:	2304      	movs	r3, #4
 8008e60:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681d      	ldr	r5, [r3, #0]
 8008e66:	466c      	mov	r4, sp
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e74:	f107 0308 	add.w	r3, r7, #8
 8008e78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f001 fe04 	bl	800aa88 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f001 fedb 	bl	800ac44 <SDMMC_CmdBlockLength>
 8008e8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00c      	beq.n	8008eb0 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3728      	adds	r7, #40	; 0x28
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8008ec4:	1fe00fff 	.word	0x1fe00fff

08008ec8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008ed4:	f107 030c 	add.w	r3, r7, #12
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 faaa 	bl	8009434 <SD_SendStatus>
 8008ee0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	0a5b      	lsrs	r3, r3, #9
 8008ef8:	f003 030f 	and.w	r3, r3, #15
 8008efc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008efe:	693b      	ldr	r3, [r7, #16]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f08:	b590      	push	{r4, r7, lr}
 8008f0a:	b091      	sub	sp, #68	; 0x44
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008f10:	2301      	movs	r3, #1
 8008f12:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f001 fe0e 	bl	800ab3a <SDMMC_GetPowerState>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d102      	bne.n	8008f2a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f28:	e0a8      	b.n	800907c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d02e      	beq.n	8008f90 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f002 f85a 	bl	800aff0 <SDMMC_CmdSendCID>
 8008f3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <SD_InitCard+0x40>
    {
      return errorstate;
 8008f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f46:	e099      	b.n	800907c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f001 fe39 	bl	800abc6 <SDMMC_GetResponse>
 8008f54:	4602      	mov	r2, r0
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2104      	movs	r1, #4
 8008f60:	4618      	mov	r0, r3
 8008f62:	f001 fe30 	bl	800abc6 <SDMMC_GetResponse>
 8008f66:	4602      	mov	r2, r0
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2108      	movs	r1, #8
 8008f72:	4618      	mov	r0, r3
 8008f74:	f001 fe27 	bl	800abc6 <SDMMC_GetResponse>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	210c      	movs	r1, #12
 8008f84:	4618      	mov	r0, r3
 8008f86:	f001 fe1e 	bl	800abc6 <SDMMC_GetResponse>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d00d      	beq.n	8008fb4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f107 020e 	add.w	r2, r7, #14
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f002 f863 	bl	800b06e <SDMMC_CmdSetRelAdd>
 8008fa8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <SD_InitCard+0xac>
    {
      return errorstate;
 8008fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb2:	e063      	b.n	800907c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d036      	beq.n	800902a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008fbc:	89fb      	ldrh	r3, [r7, #14]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fcc:	041b      	lsls	r3, r3, #16
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f002 f82c 	bl	800b02e <SDMMC_CmdSendCSD>
 8008fd6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <SD_InitCard+0xda>
    {
      return errorstate;
 8008fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe0:	e04c      	b.n	800907c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f001 fdec 	bl	800abc6 <SDMMC_GetResponse>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2104      	movs	r1, #4
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f001 fde3 	bl	800abc6 <SDMMC_GetResponse>
 8009000:	4602      	mov	r2, r0
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2108      	movs	r1, #8
 800900c:	4618      	mov	r0, r3
 800900e:	f001 fdda 	bl	800abc6 <SDMMC_GetResponse>
 8009012:	4602      	mov	r2, r0
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	210c      	movs	r1, #12
 800901e:	4618      	mov	r0, r3
 8009020:	f001 fdd1 	bl	800abc6 <SDMMC_GetResponse>
 8009024:	4602      	mov	r2, r0
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2104      	movs	r1, #4
 8009030:	4618      	mov	r0, r3
 8009032:	f001 fdc8 	bl	800abc6 <SDMMC_GetResponse>
 8009036:	4603      	mov	r3, r0
 8009038:	0d1a      	lsrs	r2, r3, #20
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800903e:	f107 0310 	add.w	r3, r7, #16
 8009042:	4619      	mov	r1, r3
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff fc0f 	bl	8008868 <HAL_SD_GetCardCSD>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d002      	beq.n	8009056 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009050:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009054:	e012      	b.n	800907c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6819      	ldr	r1, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800905e:	041b      	lsls	r3, r3, #16
 8009060:	f04f 0400 	mov.w	r4, #0
 8009064:	461a      	mov	r2, r3
 8009066:	4623      	mov	r3, r4
 8009068:	4608      	mov	r0, r1
 800906a:	f001 fed7 	bl	800ae1c <SDMMC_CmdSelDesel>
 800906e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <SD_InitCard+0x172>
  {
    return errorstate;
 8009076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009078:	e000      	b.n	800907c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3744      	adds	r7, #68	; 0x44
 8009080:	46bd      	mov	sp, r7
 8009082:	bd90      	pop	{r4, r7, pc}

08009084 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800908c:	2300      	movs	r3, #0
 800908e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009090:	2300      	movs	r3, #0
 8009092:	61fb      	str	r3, [r7, #28]
 8009094:	2300      	movs	r3, #0
 8009096:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009098:	f7f8 fb70 	bl	800177c <HAL_GetTick>
 800909c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f001 fede 	bl	800ae64 <SDMMC_CmdGoIdleState>
 80090a8:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <SD_PowerON+0x30>
  {
    return errorstate;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	e0e9      	b.n	8009288 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 fef1 	bl	800aea0 <SDMMC_CmdOperCond>
 80090be:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00d      	beq.n	80090e2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 fec7 	bl	800ae64 <SDMMC_CmdGoIdleState>
 80090d6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d004      	beq.n	80090e8 <SD_PowerON+0x64>
    {
      return errorstate;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	e0d2      	b.n	8009288 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d137      	bne.n	8009160 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f001 fef2 	bl	800aee0 <SDMMC_CmdAppCommand>
 80090fc:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d02d      	beq.n	8009160 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009108:	e0be      	b.n	8009288 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2100      	movs	r1, #0
 8009110:	4618      	mov	r0, r3
 8009112:	f001 fee5 	bl	800aee0 <SDMMC_CmdAppCommand>
 8009116:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <SD_PowerON+0x9e>
    {
      return errorstate;
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	e0b2      	b.n	8009288 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	495a      	ldr	r1, [pc, #360]	; (8009290 <SD_PowerON+0x20c>)
 8009128:	4618      	mov	r0, r3
 800912a:	f001 fefc 	bl	800af26 <SDMMC_CmdAppOperCommand>
 800912e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009136:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800913a:	e0a5      	b.n	8009288 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2100      	movs	r1, #0
 8009142:	4618      	mov	r0, r3
 8009144:	f001 fd3f 	bl	800abc6 <SDMMC_GetResponse>
 8009148:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	0fdb      	lsrs	r3, r3, #31
 800914e:	2b01      	cmp	r3, #1
 8009150:	d101      	bne.n	8009156 <SD_PowerON+0xd2>
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <SD_PowerON+0xd4>
 8009156:	2300      	movs	r3, #0
 8009158:	61bb      	str	r3, [r7, #24]

    count++;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3301      	adds	r3, #1
 800915e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009166:	4293      	cmp	r3, r2
 8009168:	d802      	bhi.n	8009170 <SD_PowerON+0xec>
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d0cc      	beq.n	800910a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009176:	4293      	cmp	r3, r2
 8009178:	d902      	bls.n	8009180 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800917a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800917e:	e083      	b.n	8009288 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d07d      	beq.n	8009286 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	2b02      	cmp	r3, #2
 8009196:	d176      	bne.n	8009286 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d071      	beq.n	8009286 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091a8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f042 0208 	orr.w	r2, r2, #8
 80091b8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4618      	mov	r0, r3
 80091c0:	f001 ffbc 	bl	800b13c <SDMMC_CmdVoltageSwitch>
 80091c4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00c      	beq.n	80091e6 <SD_PowerON+0x162>
        {
          return errorstate;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	e05b      	b.n	8009288 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091d0:	f7f8 fad4 	bl	800177c <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091de:	d102      	bne.n	80091e6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80091e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091e4:	e050      	b.n	8009288 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091f4:	d1ec      	bne.n	80091d0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80091fe:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800920a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800920e:	d002      	beq.n	8009216 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009210:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009214:	e038      	b.n	8009288 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009216:	2001      	movs	r0, #1
 8009218:	f7ff fb1a 	bl	8008850 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0204 	orr.w	r2, r2, #4
 800922a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800922c:	e00a      	b.n	8009244 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800922e:	f7f8 faa5 	bl	800177c <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923c:	d102      	bne.n	8009244 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800923e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009242:	e021      	b.n	8009288 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009252:	d1ec      	bne.n	800922e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800925c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800926c:	d102      	bne.n	8009274 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800926e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009272:	e009      	b.n	8009288 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2213      	movs	r2, #19
 800927a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f04f 32ff 	mov.w	r2, #4294967295
 8009284:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3720      	adds	r7, #32
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	c1100000 	.word	0xc1100000

08009294 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08c      	sub	sp, #48	; 0x30
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800929e:	f7f8 fa6d 	bl	800177c <HAL_GetTick>
 80092a2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2100      	movs	r1, #0
 80092ae:	4618      	mov	r0, r3
 80092b0:	f001 fc89 	bl	800abc6 <SDMMC_GetResponse>
 80092b4:	4603      	mov	r3, r0
 80092b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092be:	d102      	bne.n	80092c6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092c4:	e0b0      	b.n	8009428 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2140      	movs	r1, #64	; 0x40
 80092cc:	4618      	mov	r0, r3
 80092ce:	f001 fcb9 	bl	800ac44 <SDMMC_CmdBlockLength>
 80092d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d005      	beq.n	80092e6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	e0a0      	b.n	8009428 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ee:	041b      	lsls	r3, r3, #16
 80092f0:	4619      	mov	r1, r3
 80092f2:	4610      	mov	r0, r2
 80092f4:	f001 fdf4 	bl	800aee0 <SDMMC_CmdAppCommand>
 80092f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009308:	6a3b      	ldr	r3, [r7, #32]
 800930a:	e08d      	b.n	8009428 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800930c:	f04f 33ff 	mov.w	r3, #4294967295
 8009310:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009312:	2340      	movs	r3, #64	; 0x40
 8009314:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009316:	2360      	movs	r3, #96	; 0x60
 8009318:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800931a:	2302      	movs	r3, #2
 800931c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800931e:	2300      	movs	r3, #0
 8009320:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009322:	2301      	movs	r3, #1
 8009324:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f107 0208 	add.w	r2, r7, #8
 800932e:	4611      	mov	r1, r2
 8009330:	4618      	mov	r0, r3
 8009332:	f001 fc5b 	bl	800abec <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4618      	mov	r0, r3
 800933c:	f001 fedc 	bl	800b0f8 <SDMMC_CmdStatusRegister>
 8009340:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d02b      	beq.n	80093a0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	e069      	b.n	8009428 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d013      	beq.n	800938a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009362:	2300      	movs	r3, #0
 8009364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009366:	e00d      	b.n	8009384 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4618      	mov	r0, r3
 800936e:	f001 fbb5 	bl	800aadc <SDMMC_ReadFIFO>
 8009372:	4602      	mov	r2, r0
 8009374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009376:	601a      	str	r2, [r3, #0]
        pData++;
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	3304      	adds	r3, #4
 800937c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	3301      	adds	r3, #1
 8009382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009386:	2b07      	cmp	r3, #7
 8009388:	d9ee      	bls.n	8009368 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800938a:	f7f8 f9f7 	bl	800177c <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d102      	bne.n	80093a0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800939a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800939e:	e043      	b.n	8009428 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0d2      	beq.n	8009354 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b4:	f003 0308 	and.w	r3, r3, #8
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80093bc:	2308      	movs	r3, #8
 80093be:	e033      	b.n	8009428 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80093ce:	2302      	movs	r3, #2
 80093d0:	e02a      	b.n	8009428 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d8:	f003 0320 	and.w	r3, r3, #32
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d017      	beq.n	8009410 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80093e0:	2320      	movs	r3, #32
 80093e2:	e021      	b.n	8009428 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f001 fb77 	bl	800aadc <SDMMC_ReadFIFO>
 80093ee:	4602      	mov	r2, r0
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	601a      	str	r2, [r3, #0]
    pData++;
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	3304      	adds	r3, #4
 80093f8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80093fa:	f7f8 f9bf 	bl	800177c <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009408:	d102      	bne.n	8009410 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800940a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800940e:	e00b      	b.n	8009428 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e2      	bne.n	80093e4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a03      	ldr	r2, [pc, #12]	; (8009430 <SD_SendSDStatus+0x19c>)
 8009424:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3730      	adds	r7, #48	; 0x30
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	18000f3a 	.word	0x18000f3a

08009434 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d102      	bne.n	800944a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009444:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009448:	e018      	b.n	800947c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009452:	041b      	lsls	r3, r3, #16
 8009454:	4619      	mov	r1, r3
 8009456:	4610      	mov	r0, r2
 8009458:	f001 fe2b 	bl	800b0b2 <SDMMC_CmdSendStatus>
 800945c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	e009      	b.n	800947c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f001 fba9 	bl	800abc6 <SDMMC_GetResponse>
 8009474:	4602      	mov	r2, r0
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]
 8009490:	2300      	movs	r3, #0
 8009492:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2100      	movs	r1, #0
 800949a:	4618      	mov	r0, r3
 800949c:	f001 fb93 	bl	800abc6 <SDMMC_GetResponse>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094aa:	d102      	bne.n	80094b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80094ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094b0:	e02f      	b.n	8009512 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80094b2:	f107 030c 	add.w	r3, r7, #12
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f879 	bl	80095b0 <SD_FindSCR>
 80094be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	e023      	b.n	8009512 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d01c      	beq.n	800950e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094dc:	041b      	lsls	r3, r3, #16
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f001 fcfd 	bl	800aee0 <SDMMC_CmdAppCommand>
 80094e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	e00f      	b.n	8009512 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2102      	movs	r1, #2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f001 fd34 	bl	800af66 <SDMMC_CmdBusWidth>
 80094fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	e003      	b.n	8009512 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800950a:	2300      	movs	r3, #0
 800950c:	e001      	b.n	8009512 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800950e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b086      	sub	sp, #24
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
 8009526:	2300      	movs	r3, #0
 8009528:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2100      	movs	r1, #0
 8009530:	4618      	mov	r0, r3
 8009532:	f001 fb48 	bl	800abc6 <SDMMC_GetResponse>
 8009536:	4603      	mov	r3, r0
 8009538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800953c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009540:	d102      	bne.n	8009548 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009546:	e02f      	b.n	80095a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009548:	f107 030c 	add.w	r3, r7, #12
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f82e 	bl	80095b0 <SD_FindSCR>
 8009554:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	e023      	b.n	80095a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009566:	2b00      	cmp	r3, #0
 8009568:	d01c      	beq.n	80095a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009572:	041b      	lsls	r3, r3, #16
 8009574:	4619      	mov	r1, r3
 8009576:	4610      	mov	r0, r2
 8009578:	f001 fcb2 	bl	800aee0 <SDMMC_CmdAppCommand>
 800957c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	e00f      	b.n	80095a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2100      	movs	r1, #0
 800958e:	4618      	mov	r0, r3
 8009590:	f001 fce9 	bl	800af66 <SDMMC_CmdBusWidth>
 8009594:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	e003      	b.n	80095a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	e001      	b.n	80095a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08e      	sub	sp, #56	; 0x38
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80095ba:	f7f8 f8df 	bl	800177c <HAL_GetTick>
 80095be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80095c4:	2300      	movs	r3, #0
 80095c6:	60bb      	str	r3, [r7, #8]
 80095c8:	2300      	movs	r3, #0
 80095ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2108      	movs	r1, #8
 80095d6:	4618      	mov	r0, r3
 80095d8:	f001 fb34 	bl	800ac44 <SDMMC_CmdBlockLength>
 80095dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80095e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e6:	e0ad      	b.n	8009744 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f0:	041b      	lsls	r3, r3, #16
 80095f2:	4619      	mov	r1, r3
 80095f4:	4610      	mov	r0, r2
 80095f6:	f001 fc73 	bl	800aee0 <SDMMC_CmdAppCommand>
 80095fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	e09e      	b.n	8009744 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009606:	f04f 33ff 	mov.w	r3, #4294967295
 800960a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800960c:	2308      	movs	r3, #8
 800960e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009610:	2330      	movs	r3, #48	; 0x30
 8009612:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009614:	2302      	movs	r3, #2
 8009616:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009618:	2300      	movs	r3, #0
 800961a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800961c:	2301      	movs	r3, #1
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f107 0210 	add.w	r2, r7, #16
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f001 fade 	bl	800abec <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fcb9 	bl	800afac <SDMMC_CmdSendSCR>
 800963a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	2b00      	cmp	r3, #0
 8009640:	d027      	beq.n	8009692 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009644:	e07e      	b.n	8009744 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d113      	bne.n	800967c <SD_FindSCR+0xcc>
 8009654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009656:	2b00      	cmp	r3, #0
 8009658:	d110      	bne.n	800967c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4618      	mov	r0, r3
 8009660:	f001 fa3c 	bl	800aadc <SDMMC_ReadFIFO>
 8009664:	4603      	mov	r3, r0
 8009666:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4618      	mov	r0, r3
 800966e:	f001 fa35 	bl	800aadc <SDMMC_ReadFIFO>
 8009672:	4603      	mov	r3, r0
 8009674:	60fb      	str	r3, [r7, #12]
      index++;
 8009676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009678:	3301      	adds	r3, #1
 800967a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800967c:	f7f8 f87e 	bl	800177c <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968a:	d102      	bne.n	8009692 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800968c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009690:	e058      	b.n	8009744 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009698:	f240 532a 	movw	r3, #1322	; 0x52a
 800969c:	4013      	ands	r3, r2
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d0d1      	beq.n	8009646 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a8:	f003 0308 	and.w	r3, r3, #8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d005      	beq.n	80096bc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2208      	movs	r2, #8
 80096b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80096b8:	2308      	movs	r3, #8
 80096ba:	e043      	b.n	8009744 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d005      	beq.n	80096d6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2202      	movs	r2, #2
 80096d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80096d2:	2302      	movs	r3, #2
 80096d4:	e036      	b.n	8009744 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096dc:	f003 0320 	and.w	r3, r3, #32
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d005      	beq.n	80096f0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2220      	movs	r2, #32
 80096ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80096ec:	2320      	movs	r3, #32
 80096ee:	e029      	b.n	8009744 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a15      	ldr	r2, [pc, #84]	; (800974c <SD_FindSCR+0x19c>)
 80096f6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	061a      	lsls	r2, r3, #24
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	021b      	lsls	r3, r3, #8
 8009700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009704:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	0a1b      	lsrs	r3, r3, #8
 800970a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800970e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	0e1b      	lsrs	r3, r3, #24
 8009714:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009718:	601a      	str	r2, [r3, #0]
    scr++;
 800971a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971c:	3304      	adds	r3, #4
 800971e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	061a      	lsls	r2, r3, #24
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	021b      	lsls	r3, r3, #8
 8009728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800972c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	0a1b      	lsrs	r3, r3, #8
 8009732:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009736:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	0e1b      	lsrs	r3, r3, #24
 800973c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3738      	adds	r7, #56	; 0x38
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	18000f3a 	.word	0x18000f3a

08009750 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e0e2      	b.n	800992c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a70      	ldr	r2, [pc, #448]	; (8009934 <HAL_SPI_Init+0x1e4>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00f      	beq.n	8009796 <HAL_SPI_Init+0x46>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a6f      	ldr	r2, [pc, #444]	; (8009938 <HAL_SPI_Init+0x1e8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00a      	beq.n	8009796 <HAL_SPI_Init+0x46>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a6d      	ldr	r2, [pc, #436]	; (800993c <HAL_SPI_Init+0x1ec>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d005      	beq.n	8009796 <HAL_SPI_Init+0x46>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	2b0f      	cmp	r3, #15
 8009790:	d901      	bls.n	8009796 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e0ca      	b.n	800992c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f8d2 	bl	8009940 <SPI_GetPacketSize>
 800979c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a64      	ldr	r2, [pc, #400]	; (8009934 <HAL_SPI_Init+0x1e4>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d00c      	beq.n	80097c2 <HAL_SPI_Init+0x72>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a62      	ldr	r2, [pc, #392]	; (8009938 <HAL_SPI_Init+0x1e8>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d007      	beq.n	80097c2 <HAL_SPI_Init+0x72>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a61      	ldr	r2, [pc, #388]	; (800993c <HAL_SPI_Init+0x1ec>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d002      	beq.n	80097c2 <HAL_SPI_Init+0x72>
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b08      	cmp	r3, #8
 80097c0:	d811      	bhi.n	80097e6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80097c6:	4a5b      	ldr	r2, [pc, #364]	; (8009934 <HAL_SPI_Init+0x1e4>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d009      	beq.n	80097e0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a59      	ldr	r2, [pc, #356]	; (8009938 <HAL_SPI_Init+0x1e8>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d004      	beq.n	80097e0 <HAL_SPI_Init+0x90>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a58      	ldr	r2, [pc, #352]	; (800993c <HAL_SPI_Init+0x1ec>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d104      	bne.n	80097ea <HAL_SPI_Init+0x9a>
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2b10      	cmp	r3, #16
 80097e4:	d901      	bls.n	80097ea <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e0a0      	b.n	800992c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d106      	bne.n	8009804 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7f7 fd0c 	bl	800121c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2202      	movs	r2, #2
 8009808:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 0201 	bic.w	r2, r2, #1
 800981a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009824:	d110      	bne.n	8009848 <HAL_SPI_Init+0xf8>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800982e:	d10b      	bne.n	8009848 <HAL_SPI_Init+0xf8>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009834:	2b00      	cmp	r3, #0
 8009836:	d107      	bne.n	8009848 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009846:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	69da      	ldr	r2, [r3, #28]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009850:	431a      	orrs	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	431a      	orrs	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985a:	ea42 0103 	orr.w	r1, r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	431a      	orrs	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009878:	431a      	orrs	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	431a      	orrs	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	431a      	orrs	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	431a      	orrs	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	431a      	orrs	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	431a      	orrs	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800989c:	431a      	orrs	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	431a      	orrs	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098a8:	ea42 0103 	orr.w	r1, r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	430a      	orrs	r2, r1
 80098b6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d113      	bne.n	80098e8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098d2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098e6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 0201 	bic.w	r2, r2, #1
 80098f6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	40013000 	.word	0x40013000
 8009938:	40003800 	.word	0x40003800
 800993c:	40003c00 	.word	0x40003c00

08009940 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800994c:	095b      	lsrs	r3, r3, #5
 800994e:	3301      	adds	r3, #1
 8009950:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	3301      	adds	r3, #1
 8009958:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	3307      	adds	r3, #7
 800995e:	08db      	lsrs	r3, r3, #3
 8009960:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	fb02 f303 	mul.w	r3, r2, r3
}
 800996a:	4618      	mov	r0, r3
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e042      	b.n	8009a0e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800998e:	2b00      	cmp	r3, #0
 8009990:	d106      	bne.n	80099a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7f7 fc88 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2224      	movs	r2, #36	; 0x24
 80099a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f022 0201 	bic.w	r2, r2, #1
 80099b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f82d 	bl	8009a18 <UART_SetConfig>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d101      	bne.n	80099c8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e022      	b.n	8009a0e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fdd1 	bl	800a578 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689a      	ldr	r2, [r3, #8]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f042 0201 	orr.w	r2, r2, #1
 8009a04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fe58 	bl	800a6bc <UART_CheckIdleState>
 8009a0c:	4603      	mov	r3, r0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
	...

08009a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009a1c:	b08e      	sub	sp, #56	; 0x38
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689a      	ldr	r2, [r3, #8]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	431a      	orrs	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	431a      	orrs	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a46:	4313      	orrs	r3, r2
 8009a48:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	4bc1      	ldr	r3, [pc, #772]	; (8009d58 <UART_SetConfig+0x340>)
 8009a52:	4013      	ands	r3, r2
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	6812      	ldr	r2, [r2, #0]
 8009a58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a5a:	430b      	orrs	r3, r1
 8009a5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68da      	ldr	r2, [r3, #12]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4ab7      	ldr	r2, [pc, #732]	; (8009d5c <UART_SetConfig+0x344>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d004      	beq.n	8009a8e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	4bb2      	ldr	r3, [pc, #712]	; (8009d60 <UART_SetConfig+0x348>)
 8009a96:	4013      	ands	r3, r2
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	6812      	ldr	r2, [r2, #0]
 8009a9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa8:	f023 010f 	bic.w	r1, r3, #15
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4aa9      	ldr	r2, [pc, #676]	; (8009d64 <UART_SetConfig+0x34c>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d177      	bne.n	8009bb2 <UART_SetConfig+0x19a>
 8009ac2:	4ba9      	ldr	r3, [pc, #676]	; (8009d68 <UART_SetConfig+0x350>)
 8009ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009aca:	2b28      	cmp	r3, #40	; 0x28
 8009acc:	d86c      	bhi.n	8009ba8 <UART_SetConfig+0x190>
 8009ace:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <UART_SetConfig+0xbc>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009b79 	.word	0x08009b79
 8009ad8:	08009ba9 	.word	0x08009ba9
 8009adc:	08009ba9 	.word	0x08009ba9
 8009ae0:	08009ba9 	.word	0x08009ba9
 8009ae4:	08009ba9 	.word	0x08009ba9
 8009ae8:	08009ba9 	.word	0x08009ba9
 8009aec:	08009ba9 	.word	0x08009ba9
 8009af0:	08009ba9 	.word	0x08009ba9
 8009af4:	08009b81 	.word	0x08009b81
 8009af8:	08009ba9 	.word	0x08009ba9
 8009afc:	08009ba9 	.word	0x08009ba9
 8009b00:	08009ba9 	.word	0x08009ba9
 8009b04:	08009ba9 	.word	0x08009ba9
 8009b08:	08009ba9 	.word	0x08009ba9
 8009b0c:	08009ba9 	.word	0x08009ba9
 8009b10:	08009ba9 	.word	0x08009ba9
 8009b14:	08009b89 	.word	0x08009b89
 8009b18:	08009ba9 	.word	0x08009ba9
 8009b1c:	08009ba9 	.word	0x08009ba9
 8009b20:	08009ba9 	.word	0x08009ba9
 8009b24:	08009ba9 	.word	0x08009ba9
 8009b28:	08009ba9 	.word	0x08009ba9
 8009b2c:	08009ba9 	.word	0x08009ba9
 8009b30:	08009ba9 	.word	0x08009ba9
 8009b34:	08009b91 	.word	0x08009b91
 8009b38:	08009ba9 	.word	0x08009ba9
 8009b3c:	08009ba9 	.word	0x08009ba9
 8009b40:	08009ba9 	.word	0x08009ba9
 8009b44:	08009ba9 	.word	0x08009ba9
 8009b48:	08009ba9 	.word	0x08009ba9
 8009b4c:	08009ba9 	.word	0x08009ba9
 8009b50:	08009ba9 	.word	0x08009ba9
 8009b54:	08009b99 	.word	0x08009b99
 8009b58:	08009ba9 	.word	0x08009ba9
 8009b5c:	08009ba9 	.word	0x08009ba9
 8009b60:	08009ba9 	.word	0x08009ba9
 8009b64:	08009ba9 	.word	0x08009ba9
 8009b68:	08009ba9 	.word	0x08009ba9
 8009b6c:	08009ba9 	.word	0x08009ba9
 8009b70:	08009ba9 	.word	0x08009ba9
 8009b74:	08009ba1 	.word	0x08009ba1
 8009b78:	2301      	movs	r3, #1
 8009b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7e:	e233      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009b80:	2304      	movs	r3, #4
 8009b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b86:	e22f      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009b88:	2308      	movs	r3, #8
 8009b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8e:	e22b      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009b90:	2310      	movs	r3, #16
 8009b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b96:	e227      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009b98:	2320      	movs	r3, #32
 8009b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9e:	e223      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009ba0:	2340      	movs	r3, #64	; 0x40
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e21f      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009ba8:	2380      	movs	r3, #128	; 0x80
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	bf00      	nop
 8009bb0:	e21a      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a6d      	ldr	r2, [pc, #436]	; (8009d6c <UART_SetConfig+0x354>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d132      	bne.n	8009c22 <UART_SetConfig+0x20a>
 8009bbc:	4b6a      	ldr	r3, [pc, #424]	; (8009d68 <UART_SetConfig+0x350>)
 8009bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc0:	f003 0307 	and.w	r3, r3, #7
 8009bc4:	2b05      	cmp	r3, #5
 8009bc6:	d827      	bhi.n	8009c18 <UART_SetConfig+0x200>
 8009bc8:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <UART_SetConfig+0x1b8>)
 8009bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bce:	bf00      	nop
 8009bd0:	08009be9 	.word	0x08009be9
 8009bd4:	08009bf1 	.word	0x08009bf1
 8009bd8:	08009bf9 	.word	0x08009bf9
 8009bdc:	08009c01 	.word	0x08009c01
 8009be0:	08009c09 	.word	0x08009c09
 8009be4:	08009c11 	.word	0x08009c11
 8009be8:	2300      	movs	r3, #0
 8009bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bee:	e1fb      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009bf0:	2304      	movs	r3, #4
 8009bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf6:	e1f7      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009bf8:	2308      	movs	r3, #8
 8009bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfe:	e1f3      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c00:	2310      	movs	r3, #16
 8009c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c06:	e1ef      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c08:	2320      	movs	r3, #32
 8009c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0e:	e1eb      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c10:	2340      	movs	r3, #64	; 0x40
 8009c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c16:	e1e7      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c18:	2380      	movs	r3, #128	; 0x80
 8009c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1e:	bf00      	nop
 8009c20:	e1e2      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a52      	ldr	r2, [pc, #328]	; (8009d70 <UART_SetConfig+0x358>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d132      	bne.n	8009c92 <UART_SetConfig+0x27a>
 8009c2c:	4b4e      	ldr	r3, [pc, #312]	; (8009d68 <UART_SetConfig+0x350>)
 8009c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c30:	f003 0307 	and.w	r3, r3, #7
 8009c34:	2b05      	cmp	r3, #5
 8009c36:	d827      	bhi.n	8009c88 <UART_SetConfig+0x270>
 8009c38:	a201      	add	r2, pc, #4	; (adr r2, 8009c40 <UART_SetConfig+0x228>)
 8009c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3e:	bf00      	nop
 8009c40:	08009c59 	.word	0x08009c59
 8009c44:	08009c61 	.word	0x08009c61
 8009c48:	08009c69 	.word	0x08009c69
 8009c4c:	08009c71 	.word	0x08009c71
 8009c50:	08009c79 	.word	0x08009c79
 8009c54:	08009c81 	.word	0x08009c81
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5e:	e1c3      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c60:	2304      	movs	r3, #4
 8009c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c66:	e1bf      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c68:	2308      	movs	r3, #8
 8009c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6e:	e1bb      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c70:	2310      	movs	r3, #16
 8009c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c76:	e1b7      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c78:	2320      	movs	r3, #32
 8009c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7e:	e1b3      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c80:	2340      	movs	r3, #64	; 0x40
 8009c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c86:	e1af      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c88:	2380      	movs	r3, #128	; 0x80
 8009c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8e:	bf00      	nop
 8009c90:	e1aa      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a37      	ldr	r2, [pc, #220]	; (8009d74 <UART_SetConfig+0x35c>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d132      	bne.n	8009d02 <UART_SetConfig+0x2ea>
 8009c9c:	4b32      	ldr	r3, [pc, #200]	; (8009d68 <UART_SetConfig+0x350>)
 8009c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca0:	f003 0307 	and.w	r3, r3, #7
 8009ca4:	2b05      	cmp	r3, #5
 8009ca6:	d827      	bhi.n	8009cf8 <UART_SetConfig+0x2e0>
 8009ca8:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <UART_SetConfig+0x298>)
 8009caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cae:	bf00      	nop
 8009cb0:	08009cc9 	.word	0x08009cc9
 8009cb4:	08009cd1 	.word	0x08009cd1
 8009cb8:	08009cd9 	.word	0x08009cd9
 8009cbc:	08009ce1 	.word	0x08009ce1
 8009cc0:	08009ce9 	.word	0x08009ce9
 8009cc4:	08009cf1 	.word	0x08009cf1
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e18b      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e187      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009cd8:	2308      	movs	r3, #8
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e183      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce6:	e17f      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009ce8:	2320      	movs	r3, #32
 8009cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cee:	e17b      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009cf0:	2340      	movs	r3, #64	; 0x40
 8009cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf6:	e177      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfe:	bf00      	nop
 8009d00:	e172      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a1c      	ldr	r2, [pc, #112]	; (8009d78 <UART_SetConfig+0x360>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d144      	bne.n	8009d96 <UART_SetConfig+0x37e>
 8009d0c:	4b16      	ldr	r3, [pc, #88]	; (8009d68 <UART_SetConfig+0x350>)
 8009d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d10:	f003 0307 	and.w	r3, r3, #7
 8009d14:	2b05      	cmp	r3, #5
 8009d16:	d839      	bhi.n	8009d8c <UART_SetConfig+0x374>
 8009d18:	a201      	add	r2, pc, #4	; (adr r2, 8009d20 <UART_SetConfig+0x308>)
 8009d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1e:	bf00      	nop
 8009d20:	08009d39 	.word	0x08009d39
 8009d24:	08009d41 	.word	0x08009d41
 8009d28:	08009d49 	.word	0x08009d49
 8009d2c:	08009d51 	.word	0x08009d51
 8009d30:	08009d7d 	.word	0x08009d7d
 8009d34:	08009d85 	.word	0x08009d85
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3e:	e153      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009d40:	2304      	movs	r3, #4
 8009d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d46:	e14f      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009d48:	2308      	movs	r3, #8
 8009d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4e:	e14b      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009d50:	2310      	movs	r3, #16
 8009d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d56:	e147      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009d58:	cfff69f3 	.word	0xcfff69f3
 8009d5c:	58000c00 	.word	0x58000c00
 8009d60:	11fff4ff 	.word	0x11fff4ff
 8009d64:	40011000 	.word	0x40011000
 8009d68:	58024400 	.word	0x58024400
 8009d6c:	40004400 	.word	0x40004400
 8009d70:	40004800 	.word	0x40004800
 8009d74:	40004c00 	.word	0x40004c00
 8009d78:	40005000 	.word	0x40005000
 8009d7c:	2320      	movs	r3, #32
 8009d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d82:	e131      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009d84:	2340      	movs	r3, #64	; 0x40
 8009d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8a:	e12d      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009d8c:	2380      	movs	r3, #128	; 0x80
 8009d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d92:	bf00      	nop
 8009d94:	e128      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4ab6      	ldr	r2, [pc, #728]	; (800a074 <UART_SetConfig+0x65c>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d178      	bne.n	8009e92 <UART_SetConfig+0x47a>
 8009da0:	4bb5      	ldr	r3, [pc, #724]	; (800a078 <UART_SetConfig+0x660>)
 8009da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009da8:	2b28      	cmp	r3, #40	; 0x28
 8009daa:	d86d      	bhi.n	8009e88 <UART_SetConfig+0x470>
 8009dac:	a201      	add	r2, pc, #4	; (adr r2, 8009db4 <UART_SetConfig+0x39c>)
 8009dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db2:	bf00      	nop
 8009db4:	08009e59 	.word	0x08009e59
 8009db8:	08009e89 	.word	0x08009e89
 8009dbc:	08009e89 	.word	0x08009e89
 8009dc0:	08009e89 	.word	0x08009e89
 8009dc4:	08009e89 	.word	0x08009e89
 8009dc8:	08009e89 	.word	0x08009e89
 8009dcc:	08009e89 	.word	0x08009e89
 8009dd0:	08009e89 	.word	0x08009e89
 8009dd4:	08009e61 	.word	0x08009e61
 8009dd8:	08009e89 	.word	0x08009e89
 8009ddc:	08009e89 	.word	0x08009e89
 8009de0:	08009e89 	.word	0x08009e89
 8009de4:	08009e89 	.word	0x08009e89
 8009de8:	08009e89 	.word	0x08009e89
 8009dec:	08009e89 	.word	0x08009e89
 8009df0:	08009e89 	.word	0x08009e89
 8009df4:	08009e69 	.word	0x08009e69
 8009df8:	08009e89 	.word	0x08009e89
 8009dfc:	08009e89 	.word	0x08009e89
 8009e00:	08009e89 	.word	0x08009e89
 8009e04:	08009e89 	.word	0x08009e89
 8009e08:	08009e89 	.word	0x08009e89
 8009e0c:	08009e89 	.word	0x08009e89
 8009e10:	08009e89 	.word	0x08009e89
 8009e14:	08009e71 	.word	0x08009e71
 8009e18:	08009e89 	.word	0x08009e89
 8009e1c:	08009e89 	.word	0x08009e89
 8009e20:	08009e89 	.word	0x08009e89
 8009e24:	08009e89 	.word	0x08009e89
 8009e28:	08009e89 	.word	0x08009e89
 8009e2c:	08009e89 	.word	0x08009e89
 8009e30:	08009e89 	.word	0x08009e89
 8009e34:	08009e79 	.word	0x08009e79
 8009e38:	08009e89 	.word	0x08009e89
 8009e3c:	08009e89 	.word	0x08009e89
 8009e40:	08009e89 	.word	0x08009e89
 8009e44:	08009e89 	.word	0x08009e89
 8009e48:	08009e89 	.word	0x08009e89
 8009e4c:	08009e89 	.word	0x08009e89
 8009e50:	08009e89 	.word	0x08009e89
 8009e54:	08009e81 	.word	0x08009e81
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e5e:	e0c3      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009e60:	2304      	movs	r3, #4
 8009e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e66:	e0bf      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009e68:	2308      	movs	r3, #8
 8009e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6e:	e0bb      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009e70:	2310      	movs	r3, #16
 8009e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e76:	e0b7      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009e78:	2320      	movs	r3, #32
 8009e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7e:	e0b3      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009e80:	2340      	movs	r3, #64	; 0x40
 8009e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e86:	e0af      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009e88:	2380      	movs	r3, #128	; 0x80
 8009e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8e:	bf00      	nop
 8009e90:	e0aa      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a79      	ldr	r2, [pc, #484]	; (800a07c <UART_SetConfig+0x664>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d132      	bne.n	8009f02 <UART_SetConfig+0x4ea>
 8009e9c:	4b76      	ldr	r3, [pc, #472]	; (800a078 <UART_SetConfig+0x660>)
 8009e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea0:	f003 0307 	and.w	r3, r3, #7
 8009ea4:	2b05      	cmp	r3, #5
 8009ea6:	d827      	bhi.n	8009ef8 <UART_SetConfig+0x4e0>
 8009ea8:	a201      	add	r2, pc, #4	; (adr r2, 8009eb0 <UART_SetConfig+0x498>)
 8009eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eae:	bf00      	nop
 8009eb0:	08009ec9 	.word	0x08009ec9
 8009eb4:	08009ed1 	.word	0x08009ed1
 8009eb8:	08009ed9 	.word	0x08009ed9
 8009ebc:	08009ee1 	.word	0x08009ee1
 8009ec0:	08009ee9 	.word	0x08009ee9
 8009ec4:	08009ef1 	.word	0x08009ef1
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ece:	e08b      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009ed0:	2304      	movs	r3, #4
 8009ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed6:	e087      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009ed8:	2308      	movs	r3, #8
 8009eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ede:	e083      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009ee0:	2310      	movs	r3, #16
 8009ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee6:	e07f      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009ee8:	2320      	movs	r3, #32
 8009eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eee:	e07b      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009ef0:	2340      	movs	r3, #64	; 0x40
 8009ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef6:	e077      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009ef8:	2380      	movs	r3, #128	; 0x80
 8009efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009efe:	bf00      	nop
 8009f00:	e072      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a5e      	ldr	r2, [pc, #376]	; (800a080 <UART_SetConfig+0x668>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d132      	bne.n	8009f72 <UART_SetConfig+0x55a>
 8009f0c:	4b5a      	ldr	r3, [pc, #360]	; (800a078 <UART_SetConfig+0x660>)
 8009f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f10:	f003 0307 	and.w	r3, r3, #7
 8009f14:	2b05      	cmp	r3, #5
 8009f16:	d827      	bhi.n	8009f68 <UART_SetConfig+0x550>
 8009f18:	a201      	add	r2, pc, #4	; (adr r2, 8009f20 <UART_SetConfig+0x508>)
 8009f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1e:	bf00      	nop
 8009f20:	08009f39 	.word	0x08009f39
 8009f24:	08009f41 	.word	0x08009f41
 8009f28:	08009f49 	.word	0x08009f49
 8009f2c:	08009f51 	.word	0x08009f51
 8009f30:	08009f59 	.word	0x08009f59
 8009f34:	08009f61 	.word	0x08009f61
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3e:	e053      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009f40:	2304      	movs	r3, #4
 8009f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f46:	e04f      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009f48:	2308      	movs	r3, #8
 8009f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4e:	e04b      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009f50:	2310      	movs	r3, #16
 8009f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f56:	e047      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009f58:	2320      	movs	r3, #32
 8009f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f5e:	e043      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009f60:	2340      	movs	r3, #64	; 0x40
 8009f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f66:	e03f      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009f68:	2380      	movs	r3, #128	; 0x80
 8009f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f6e:	bf00      	nop
 8009f70:	e03a      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a43      	ldr	r2, [pc, #268]	; (800a084 <UART_SetConfig+0x66c>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d132      	bne.n	8009fe2 <UART_SetConfig+0x5ca>
 8009f7c:	4b3e      	ldr	r3, [pc, #248]	; (800a078 <UART_SetConfig+0x660>)
 8009f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f80:	f003 0307 	and.w	r3, r3, #7
 8009f84:	2b05      	cmp	r3, #5
 8009f86:	d827      	bhi.n	8009fd8 <UART_SetConfig+0x5c0>
 8009f88:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <UART_SetConfig+0x578>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fa9 	.word	0x08009fa9
 8009f94:	08009fb1 	.word	0x08009fb1
 8009f98:	08009fb9 	.word	0x08009fb9
 8009f9c:	08009fc1 	.word	0x08009fc1
 8009fa0:	08009fc9 	.word	0x08009fc9
 8009fa4:	08009fd1 	.word	0x08009fd1
 8009fa8:	2302      	movs	r3, #2
 8009faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fae:	e01b      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009fb0:	2304      	movs	r3, #4
 8009fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb6:	e017      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009fb8:	2308      	movs	r3, #8
 8009fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fbe:	e013      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fc6:	e00f      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009fc8:	2320      	movs	r3, #32
 8009fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fce:	e00b      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009fd0:	2340      	movs	r3, #64	; 0x40
 8009fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fd6:	e007      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009fd8:	2380      	movs	r3, #128	; 0x80
 8009fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fde:	bf00      	nop
 8009fe0:	e002      	b.n	8009fe8 <UART_SetConfig+0x5d0>
 8009fe2:	2380      	movs	r3, #128	; 0x80
 8009fe4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a25      	ldr	r2, [pc, #148]	; (800a084 <UART_SetConfig+0x66c>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	f040 80b8 	bne.w	800a164 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ff4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ff8:	2b08      	cmp	r3, #8
 8009ffa:	d019      	beq.n	800a030 <UART_SetConfig+0x618>
 8009ffc:	2b08      	cmp	r3, #8
 8009ffe:	dc04      	bgt.n	800a00a <UART_SetConfig+0x5f2>
 800a000:	2b02      	cmp	r3, #2
 800a002:	d009      	beq.n	800a018 <UART_SetConfig+0x600>
 800a004:	2b04      	cmp	r3, #4
 800a006:	d00b      	beq.n	800a020 <UART_SetConfig+0x608>
 800a008:	e042      	b.n	800a090 <UART_SetConfig+0x678>
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	d02b      	beq.n	800a066 <UART_SetConfig+0x64e>
 800a00e:	2b40      	cmp	r3, #64	; 0x40
 800a010:	d02c      	beq.n	800a06c <UART_SetConfig+0x654>
 800a012:	2b10      	cmp	r3, #16
 800a014:	d014      	beq.n	800a040 <UART_SetConfig+0x628>
 800a016:	e03b      	b.n	800a090 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a018:	f7fd fa80 	bl	800751c <HAL_RCCEx_GetD3PCLK1Freq>
 800a01c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a01e:	e03d      	b.n	800a09c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a020:	f107 0314 	add.w	r3, r7, #20
 800a024:	4618      	mov	r0, r3
 800a026:	f7fd fa8f 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a02e:	e035      	b.n	800a09c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a030:	f107 0308 	add.w	r3, r7, #8
 800a034:	4618      	mov	r0, r3
 800a036:	f7fd fbd3 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a03e:	e02d      	b.n	800a09c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a040:	4b0d      	ldr	r3, [pc, #52]	; (800a078 <UART_SetConfig+0x660>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0320 	and.w	r3, r3, #32
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d009      	beq.n	800a060 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a04c:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <UART_SetConfig+0x660>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	08db      	lsrs	r3, r3, #3
 800a052:	f003 0303 	and.w	r3, r3, #3
 800a056:	4a0c      	ldr	r2, [pc, #48]	; (800a088 <UART_SetConfig+0x670>)
 800a058:	fa22 f303 	lsr.w	r3, r2, r3
 800a05c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a05e:	e01d      	b.n	800a09c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a060:	4b09      	ldr	r3, [pc, #36]	; (800a088 <UART_SetConfig+0x670>)
 800a062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a064:	e01a      	b.n	800a09c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a066:	4b09      	ldr	r3, [pc, #36]	; (800a08c <UART_SetConfig+0x674>)
 800a068:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a06a:	e017      	b.n	800a09c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a06c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a070:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a072:	e013      	b.n	800a09c <UART_SetConfig+0x684>
 800a074:	40011400 	.word	0x40011400
 800a078:	58024400 	.word	0x58024400
 800a07c:	40007800 	.word	0x40007800
 800a080:	40007c00 	.word	0x40007c00
 800a084:	58000c00 	.word	0x58000c00
 800a088:	03d09000 	.word	0x03d09000
 800a08c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a090:	2300      	movs	r3, #0
 800a092:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a09a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 824d 	beq.w	800a53e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	4aad      	ldr	r2, [pc, #692]	; (800a360 <UART_SetConfig+0x948>)
 800a0aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0b6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	4413      	add	r3, r2
 800a0c2:	6a3a      	ldr	r2, [r7, #32]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d305      	bcc.n	800a0d4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0ce:	6a3a      	ldr	r2, [r7, #32]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d903      	bls.n	800a0dc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a0da:	e230      	b.n	800a53e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f04f 0100 	mov.w	r1, #0
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	4a9d      	ldr	r2, [pc, #628]	; (800a360 <UART_SetConfig+0x948>)
 800a0ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	f04f 0400 	mov.w	r4, #0
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4623      	mov	r3, r4
 800a0f8:	f7f6 f94a 	bl	8000390 <__aeabi_uldivmod>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	4619      	mov	r1, r3
 800a102:	4622      	mov	r2, r4
 800a104:	f04f 0300 	mov.w	r3, #0
 800a108:	f04f 0400 	mov.w	r4, #0
 800a10c:	0214      	lsls	r4, r2, #8
 800a10e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a112:	020b      	lsls	r3, r1, #8
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	6852      	ldr	r2, [r2, #4]
 800a118:	0852      	lsrs	r2, r2, #1
 800a11a:	4611      	mov	r1, r2
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	eb13 0b01 	adds.w	fp, r3, r1
 800a124:	eb44 0c02 	adc.w	ip, r4, r2
 800a128:	4658      	mov	r0, fp
 800a12a:	4661      	mov	r1, ip
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f04f 0400 	mov.w	r4, #0
 800a134:	461a      	mov	r2, r3
 800a136:	4623      	mov	r3, r4
 800a138:	f7f6 f92a 	bl	8000390 <__aeabi_uldivmod>
 800a13c:	4603      	mov	r3, r0
 800a13e:	460c      	mov	r4, r1
 800a140:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a148:	d308      	bcc.n	800a15c <UART_SetConfig+0x744>
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a150:	d204      	bcs.n	800a15c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a158:	60da      	str	r2, [r3, #12]
 800a15a:	e1f0      	b.n	800a53e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a162:	e1ec      	b.n	800a53e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a16c:	f040 8100 	bne.w	800a370 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a170:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a174:	2b40      	cmp	r3, #64	; 0x40
 800a176:	f200 80b7 	bhi.w	800a2e8 <UART_SetConfig+0x8d0>
 800a17a:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <UART_SetConfig+0x768>)
 800a17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a180:	0800a285 	.word	0x0800a285
 800a184:	0800a28d 	.word	0x0800a28d
 800a188:	0800a2e9 	.word	0x0800a2e9
 800a18c:	0800a2e9 	.word	0x0800a2e9
 800a190:	0800a295 	.word	0x0800a295
 800a194:	0800a2e9 	.word	0x0800a2e9
 800a198:	0800a2e9 	.word	0x0800a2e9
 800a19c:	0800a2e9 	.word	0x0800a2e9
 800a1a0:	0800a2a5 	.word	0x0800a2a5
 800a1a4:	0800a2e9 	.word	0x0800a2e9
 800a1a8:	0800a2e9 	.word	0x0800a2e9
 800a1ac:	0800a2e9 	.word	0x0800a2e9
 800a1b0:	0800a2e9 	.word	0x0800a2e9
 800a1b4:	0800a2e9 	.word	0x0800a2e9
 800a1b8:	0800a2e9 	.word	0x0800a2e9
 800a1bc:	0800a2e9 	.word	0x0800a2e9
 800a1c0:	0800a2b5 	.word	0x0800a2b5
 800a1c4:	0800a2e9 	.word	0x0800a2e9
 800a1c8:	0800a2e9 	.word	0x0800a2e9
 800a1cc:	0800a2e9 	.word	0x0800a2e9
 800a1d0:	0800a2e9 	.word	0x0800a2e9
 800a1d4:	0800a2e9 	.word	0x0800a2e9
 800a1d8:	0800a2e9 	.word	0x0800a2e9
 800a1dc:	0800a2e9 	.word	0x0800a2e9
 800a1e0:	0800a2e9 	.word	0x0800a2e9
 800a1e4:	0800a2e9 	.word	0x0800a2e9
 800a1e8:	0800a2e9 	.word	0x0800a2e9
 800a1ec:	0800a2e9 	.word	0x0800a2e9
 800a1f0:	0800a2e9 	.word	0x0800a2e9
 800a1f4:	0800a2e9 	.word	0x0800a2e9
 800a1f8:	0800a2e9 	.word	0x0800a2e9
 800a1fc:	0800a2e9 	.word	0x0800a2e9
 800a200:	0800a2db 	.word	0x0800a2db
 800a204:	0800a2e9 	.word	0x0800a2e9
 800a208:	0800a2e9 	.word	0x0800a2e9
 800a20c:	0800a2e9 	.word	0x0800a2e9
 800a210:	0800a2e9 	.word	0x0800a2e9
 800a214:	0800a2e9 	.word	0x0800a2e9
 800a218:	0800a2e9 	.word	0x0800a2e9
 800a21c:	0800a2e9 	.word	0x0800a2e9
 800a220:	0800a2e9 	.word	0x0800a2e9
 800a224:	0800a2e9 	.word	0x0800a2e9
 800a228:	0800a2e9 	.word	0x0800a2e9
 800a22c:	0800a2e9 	.word	0x0800a2e9
 800a230:	0800a2e9 	.word	0x0800a2e9
 800a234:	0800a2e9 	.word	0x0800a2e9
 800a238:	0800a2e9 	.word	0x0800a2e9
 800a23c:	0800a2e9 	.word	0x0800a2e9
 800a240:	0800a2e9 	.word	0x0800a2e9
 800a244:	0800a2e9 	.word	0x0800a2e9
 800a248:	0800a2e9 	.word	0x0800a2e9
 800a24c:	0800a2e9 	.word	0x0800a2e9
 800a250:	0800a2e9 	.word	0x0800a2e9
 800a254:	0800a2e9 	.word	0x0800a2e9
 800a258:	0800a2e9 	.word	0x0800a2e9
 800a25c:	0800a2e9 	.word	0x0800a2e9
 800a260:	0800a2e9 	.word	0x0800a2e9
 800a264:	0800a2e9 	.word	0x0800a2e9
 800a268:	0800a2e9 	.word	0x0800a2e9
 800a26c:	0800a2e9 	.word	0x0800a2e9
 800a270:	0800a2e9 	.word	0x0800a2e9
 800a274:	0800a2e9 	.word	0x0800a2e9
 800a278:	0800a2e9 	.word	0x0800a2e9
 800a27c:	0800a2e9 	.word	0x0800a2e9
 800a280:	0800a2e1 	.word	0x0800a2e1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a284:	f7fb ff9c 	bl	80061c0 <HAL_RCC_GetPCLK1Freq>
 800a288:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a28a:	e033      	b.n	800a2f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a28c:	f7fb ffae 	bl	80061ec <HAL_RCC_GetPCLK2Freq>
 800a290:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a292:	e02f      	b.n	800a2f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a294:	f107 0314 	add.w	r3, r7, #20
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fd f955 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2a2:	e027      	b.n	800a2f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2a4:	f107 0308 	add.w	r3, r7, #8
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fd fa99 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2b2:	e01f      	b.n	800a2f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2b4:	4b2b      	ldr	r3, [pc, #172]	; (800a364 <UART_SetConfig+0x94c>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0320 	and.w	r3, r3, #32
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d009      	beq.n	800a2d4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2c0:	4b28      	ldr	r3, [pc, #160]	; (800a364 <UART_SetConfig+0x94c>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	08db      	lsrs	r3, r3, #3
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	4a27      	ldr	r2, [pc, #156]	; (800a368 <UART_SetConfig+0x950>)
 800a2cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2d2:	e00f      	b.n	800a2f4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a2d4:	4b24      	ldr	r3, [pc, #144]	; (800a368 <UART_SetConfig+0x950>)
 800a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2d8:	e00c      	b.n	800a2f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2da:	4b24      	ldr	r3, [pc, #144]	; (800a36c <UART_SetConfig+0x954>)
 800a2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2de:	e009      	b.n	800a2f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2e6:	e005      	b.n	800a2f4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a2f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 8121 	beq.w	800a53e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	4a17      	ldr	r2, [pc, #92]	; (800a360 <UART_SetConfig+0x948>)
 800a302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a306:	461a      	mov	r2, r3
 800a308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a30e:	005a      	lsls	r2, r3, #1
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	085b      	lsrs	r3, r3, #1
 800a316:	441a      	add	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a320:	b29b      	uxth	r3, r3
 800a322:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	2b0f      	cmp	r3, #15
 800a328:	d916      	bls.n	800a358 <UART_SetConfig+0x940>
 800a32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a330:	d212      	bcs.n	800a358 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a334:	b29b      	uxth	r3, r3
 800a336:	f023 030f 	bic.w	r3, r3, #15
 800a33a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33e:	085b      	lsrs	r3, r3, #1
 800a340:	b29b      	uxth	r3, r3
 800a342:	f003 0307 	and.w	r3, r3, #7
 800a346:	b29a      	uxth	r2, r3
 800a348:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a34a:	4313      	orrs	r3, r2
 800a34c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a354:	60da      	str	r2, [r3, #12]
 800a356:	e0f2      	b.n	800a53e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a35e:	e0ee      	b.n	800a53e <UART_SetConfig+0xb26>
 800a360:	0801344c 	.word	0x0801344c
 800a364:	58024400 	.word	0x58024400
 800a368:	03d09000 	.word	0x03d09000
 800a36c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a370:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a374:	2b40      	cmp	r3, #64	; 0x40
 800a376:	f200 80b7 	bhi.w	800a4e8 <UART_SetConfig+0xad0>
 800a37a:	a201      	add	r2, pc, #4	; (adr r2, 800a380 <UART_SetConfig+0x968>)
 800a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a380:	0800a485 	.word	0x0800a485
 800a384:	0800a48d 	.word	0x0800a48d
 800a388:	0800a4e9 	.word	0x0800a4e9
 800a38c:	0800a4e9 	.word	0x0800a4e9
 800a390:	0800a495 	.word	0x0800a495
 800a394:	0800a4e9 	.word	0x0800a4e9
 800a398:	0800a4e9 	.word	0x0800a4e9
 800a39c:	0800a4e9 	.word	0x0800a4e9
 800a3a0:	0800a4a5 	.word	0x0800a4a5
 800a3a4:	0800a4e9 	.word	0x0800a4e9
 800a3a8:	0800a4e9 	.word	0x0800a4e9
 800a3ac:	0800a4e9 	.word	0x0800a4e9
 800a3b0:	0800a4e9 	.word	0x0800a4e9
 800a3b4:	0800a4e9 	.word	0x0800a4e9
 800a3b8:	0800a4e9 	.word	0x0800a4e9
 800a3bc:	0800a4e9 	.word	0x0800a4e9
 800a3c0:	0800a4b5 	.word	0x0800a4b5
 800a3c4:	0800a4e9 	.word	0x0800a4e9
 800a3c8:	0800a4e9 	.word	0x0800a4e9
 800a3cc:	0800a4e9 	.word	0x0800a4e9
 800a3d0:	0800a4e9 	.word	0x0800a4e9
 800a3d4:	0800a4e9 	.word	0x0800a4e9
 800a3d8:	0800a4e9 	.word	0x0800a4e9
 800a3dc:	0800a4e9 	.word	0x0800a4e9
 800a3e0:	0800a4e9 	.word	0x0800a4e9
 800a3e4:	0800a4e9 	.word	0x0800a4e9
 800a3e8:	0800a4e9 	.word	0x0800a4e9
 800a3ec:	0800a4e9 	.word	0x0800a4e9
 800a3f0:	0800a4e9 	.word	0x0800a4e9
 800a3f4:	0800a4e9 	.word	0x0800a4e9
 800a3f8:	0800a4e9 	.word	0x0800a4e9
 800a3fc:	0800a4e9 	.word	0x0800a4e9
 800a400:	0800a4db 	.word	0x0800a4db
 800a404:	0800a4e9 	.word	0x0800a4e9
 800a408:	0800a4e9 	.word	0x0800a4e9
 800a40c:	0800a4e9 	.word	0x0800a4e9
 800a410:	0800a4e9 	.word	0x0800a4e9
 800a414:	0800a4e9 	.word	0x0800a4e9
 800a418:	0800a4e9 	.word	0x0800a4e9
 800a41c:	0800a4e9 	.word	0x0800a4e9
 800a420:	0800a4e9 	.word	0x0800a4e9
 800a424:	0800a4e9 	.word	0x0800a4e9
 800a428:	0800a4e9 	.word	0x0800a4e9
 800a42c:	0800a4e9 	.word	0x0800a4e9
 800a430:	0800a4e9 	.word	0x0800a4e9
 800a434:	0800a4e9 	.word	0x0800a4e9
 800a438:	0800a4e9 	.word	0x0800a4e9
 800a43c:	0800a4e9 	.word	0x0800a4e9
 800a440:	0800a4e9 	.word	0x0800a4e9
 800a444:	0800a4e9 	.word	0x0800a4e9
 800a448:	0800a4e9 	.word	0x0800a4e9
 800a44c:	0800a4e9 	.word	0x0800a4e9
 800a450:	0800a4e9 	.word	0x0800a4e9
 800a454:	0800a4e9 	.word	0x0800a4e9
 800a458:	0800a4e9 	.word	0x0800a4e9
 800a45c:	0800a4e9 	.word	0x0800a4e9
 800a460:	0800a4e9 	.word	0x0800a4e9
 800a464:	0800a4e9 	.word	0x0800a4e9
 800a468:	0800a4e9 	.word	0x0800a4e9
 800a46c:	0800a4e9 	.word	0x0800a4e9
 800a470:	0800a4e9 	.word	0x0800a4e9
 800a474:	0800a4e9 	.word	0x0800a4e9
 800a478:	0800a4e9 	.word	0x0800a4e9
 800a47c:	0800a4e9 	.word	0x0800a4e9
 800a480:	0800a4e1 	.word	0x0800a4e1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a484:	f7fb fe9c 	bl	80061c0 <HAL_RCC_GetPCLK1Freq>
 800a488:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a48a:	e033      	b.n	800a4f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a48c:	f7fb feae 	bl	80061ec <HAL_RCC_GetPCLK2Freq>
 800a490:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a492:	e02f      	b.n	800a4f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a494:	f107 0314 	add.w	r3, r7, #20
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fd f855 	bl	8007548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4a2:	e027      	b.n	800a4f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4a4:	f107 0308 	add.w	r3, r7, #8
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fd f999 	bl	80077e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4b2:	e01f      	b.n	800a4f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4b4:	4b2c      	ldr	r3, [pc, #176]	; (800a568 <UART_SetConfig+0xb50>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0320 	and.w	r3, r3, #32
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d009      	beq.n	800a4d4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4c0:	4b29      	ldr	r3, [pc, #164]	; (800a568 <UART_SetConfig+0xb50>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	08db      	lsrs	r3, r3, #3
 800a4c6:	f003 0303 	and.w	r3, r3, #3
 800a4ca:	4a28      	ldr	r2, [pc, #160]	; (800a56c <UART_SetConfig+0xb54>)
 800a4cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4d2:	e00f      	b.n	800a4f4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a4d4:	4b25      	ldr	r3, [pc, #148]	; (800a56c <UART_SetConfig+0xb54>)
 800a4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4d8:	e00c      	b.n	800a4f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4da:	4b25      	ldr	r3, [pc, #148]	; (800a570 <UART_SetConfig+0xb58>)
 800a4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4de:	e009      	b.n	800a4f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4e6:	e005      	b.n	800a4f4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a4f2:	bf00      	nop
    }

    if (pclk != 0U)
 800a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d021      	beq.n	800a53e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fe:	4a1d      	ldr	r2, [pc, #116]	; (800a574 <UART_SetConfig+0xb5c>)
 800a500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a504:	461a      	mov	r2, r3
 800a506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a508:	fbb3 f2f2 	udiv	r2, r3, r2
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	085b      	lsrs	r3, r3, #1
 800a512:	441a      	add	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	fbb2 f3f3 	udiv	r3, r2, r3
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	2b0f      	cmp	r3, #15
 800a524:	d908      	bls.n	800a538 <UART_SetConfig+0xb20>
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a52c:	d204      	bcs.n	800a538 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a534:	60da      	str	r2, [r3, #12]
 800a536:	e002      	b.n	800a53e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a55a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3738      	adds	r7, #56	; 0x38
 800a562:	46bd      	mov	sp, r7
 800a564:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a568:	58024400 	.word	0x58024400
 800a56c:	03d09000 	.word	0x03d09000
 800a570:	003d0900 	.word	0x003d0900
 800a574:	0801344c 	.word	0x0801344c

0800a578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a584:	f003 0301 	and.w	r3, r3, #1
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00a      	beq.n	800a5a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	430a      	orrs	r2, r1
 800a5a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a6:	f003 0302 	and.w	r3, r3, #2
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00a      	beq.n	800a5c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	430a      	orrs	r2, r1
 800a5c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c8:	f003 0304 	and.w	r3, r3, #4
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00a      	beq.n	800a5e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ea:	f003 0308 	and.w	r3, r3, #8
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00a      	beq.n	800a608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	430a      	orrs	r2, r1
 800a606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60c:	f003 0310 	and.w	r3, r3, #16
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00a      	beq.n	800a62a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62e:	f003 0320 	and.w	r3, r3, #32
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00a      	beq.n	800a64c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	430a      	orrs	r2, r1
 800a64a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a654:	2b00      	cmp	r3, #0
 800a656:	d01a      	beq.n	800a68e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a676:	d10a      	bne.n	800a68e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	605a      	str	r2, [r3, #4]
  }
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a6cc:	f7f7 f856 	bl	800177c <HAL_GetTick>
 800a6d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0308 	and.w	r3, r3, #8
 800a6dc:	2b08      	cmp	r3, #8
 800a6de:	d10e      	bne.n	800a6fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f82c 	bl	800a74c <UART_WaitOnFlagUntilTimeout>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e022      	b.n	800a744 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0304 	and.w	r3, r3, #4
 800a708:	2b04      	cmp	r3, #4
 800a70a:	d10e      	bne.n	800a72a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a70c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f816 	bl	800a74c <UART_WaitOnFlagUntilTimeout>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e00c      	b.n	800a744 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2220      	movs	r2, #32
 800a72e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2220      	movs	r2, #32
 800a736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	4613      	mov	r3, r2
 800a75a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a75c:	e062      	b.n	800a824 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a764:	d05e      	beq.n	800a824 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a766:	f7f7 f809 	bl	800177c <HAL_GetTick>
 800a76a:	4602      	mov	r2, r0
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	69ba      	ldr	r2, [r7, #24]
 800a772:	429a      	cmp	r2, r3
 800a774:	d302      	bcc.n	800a77c <UART_WaitOnFlagUntilTimeout+0x30>
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d11d      	bne.n	800a7b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a78a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689a      	ldr	r2, [r3, #8]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f022 0201 	bic.w	r2, r2, #1
 800a79a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2220      	movs	r2, #32
 800a7a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2220      	movs	r2, #32
 800a7a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e045      	b.n	800a844 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0304 	and.w	r3, r3, #4
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d02e      	beq.n	800a824 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	69db      	ldr	r3, [r3, #28]
 800a7cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7d4:	d126      	bne.n	800a824 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	689a      	ldr	r2, [r3, #8]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f022 0201 	bic.w	r2, r2, #1
 800a7fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2220      	movs	r2, #32
 800a804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2220      	movs	r2, #32
 800a80c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2220      	movs	r2, #32
 800a814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e00f      	b.n	800a844 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	69da      	ldr	r2, [r3, #28]
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	4013      	ands	r3, r2
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	429a      	cmp	r2, r3
 800a832:	bf0c      	ite	eq
 800a834:	2301      	moveq	r3, #1
 800a836:	2300      	movne	r3, #0
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	461a      	mov	r2, r3
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d08d      	beq.n	800a75e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d101      	bne.n	800a862 <HAL_UARTEx_DisableFifoMode+0x16>
 800a85e:	2302      	movs	r3, #2
 800a860:	e027      	b.n	800a8b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2224      	movs	r2, #36	; 0x24
 800a86e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f022 0201 	bic.w	r2, r2, #1
 800a888:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a890:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2220      	movs	r2, #32
 800a8a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b084      	sub	sp, #16
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d101      	bne.n	800a8d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8d2:	2302      	movs	r3, #2
 800a8d4:	e02d      	b.n	800a932 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2224      	movs	r2, #36	; 0x24
 800a8e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f022 0201 	bic.w	r2, r2, #1
 800a8fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	430a      	orrs	r2, r1
 800a910:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f850 	bl	800a9b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2220      	movs	r2, #32
 800a924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d101      	bne.n	800a952 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a94e:	2302      	movs	r3, #2
 800a950:	e02d      	b.n	800a9ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2224      	movs	r2, #36	; 0x24
 800a95e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f022 0201 	bic.w	r2, r2, #1
 800a978:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	430a      	orrs	r2, r1
 800a98c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f812 	bl	800a9b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2220      	movs	r2, #32
 800a9a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b089      	sub	sp, #36	; 0x24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a9c0:	4a2f      	ldr	r2, [pc, #188]	; (800aa80 <UARTEx_SetNbDataToProcess+0xc8>)
 800a9c2:	f107 0314 	add.w	r3, r7, #20
 800a9c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9ca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a9ce:	4a2d      	ldr	r2, [pc, #180]	; (800aa84 <UARTEx_SetNbDataToProcess+0xcc>)
 800a9d0:	f107 030c 	add.w	r3, r7, #12
 800a9d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9d8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d108      	bne.n	800a9f6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9f4:	e03d      	b.n	800aa72 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9f6:	2310      	movs	r3, #16
 800a9f8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9fa:	2310      	movs	r3, #16
 800a9fc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	0e5b      	lsrs	r3, r3, #25
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 0307 	and.w	r3, r3, #7
 800aa0c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	0f5b      	lsrs	r3, r3, #29
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aa1e:	7fbb      	ldrb	r3, [r7, #30]
 800aa20:	7f3a      	ldrb	r2, [r7, #28]
 800aa22:	f107 0120 	add.w	r1, r7, #32
 800aa26:	440a      	add	r2, r1
 800aa28:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aa2c:	fb02 f303 	mul.w	r3, r2, r3
 800aa30:	7f3a      	ldrb	r2, [r7, #28]
 800aa32:	f107 0120 	add.w	r1, r7, #32
 800aa36:	440a      	add	r2, r1
 800aa38:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aa3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aa48:	7ffb      	ldrb	r3, [r7, #31]
 800aa4a:	7f7a      	ldrb	r2, [r7, #29]
 800aa4c:	f107 0120 	add.w	r1, r7, #32
 800aa50:	440a      	add	r2, r1
 800aa52:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aa56:	fb02 f303 	mul.w	r3, r2, r3
 800aa5a:	7f7a      	ldrb	r2, [r7, #29]
 800aa5c:	f107 0120 	add.w	r1, r7, #32
 800aa60:	440a      	add	r2, r1
 800aa62:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aa66:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa6a:	b29a      	uxth	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa72:	bf00      	nop
 800aa74:	3724      	adds	r7, #36	; 0x24
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	0801339c 	.word	0x0801339c
 800aa84:	080133a4 	.word	0x080133a4

0800aa88 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa88:	b084      	sub	sp, #16
 800aa8a:	b480      	push	{r7}
 800aa8c:	b085      	sub	sp, #20
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	f107 001c 	add.w	r0, r7, #28
 800aa96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aaa2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800aaa6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800aaaa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800aaae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	4b07      	ldr	r3, [pc, #28]	; (800aad8 <SDMMC_Init+0x50>)
 800aabc:	4013      	ands	r3, r2
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	431a      	orrs	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	b004      	add	sp, #16
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	ffc02c00 	.word	0xffc02c00

0800aadc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b083      	sub	sp, #12
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f043 0203 	orr.w	r2, r3, #3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	370c      	adds	r7, #12
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b083      	sub	sp, #12
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f003 0303 	and.w	r3, r3, #3
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
	...

0800ab58 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab76:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab7c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68da      	ldr	r2, [r3, #12]
 800ab8e:	4b06      	ldr	r3, [pc, #24]	; (800aba8 <SDMMC_SendCommand+0x50>)
 800ab90:	4013      	ands	r3, r2
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	431a      	orrs	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	fffee0c0 	.word	0xfffee0c0

0800abac <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	b2db      	uxtb	r3, r3
}
 800abba:	4618      	mov	r0, r3
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b085      	sub	sp, #20
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
 800abce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	3314      	adds	r3, #20
 800abd4:	461a      	mov	r2, r3
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	4413      	add	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac12:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ac18:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ac1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	431a      	orrs	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0

}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b088      	sub	sp, #32
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac52:	2310      	movs	r3, #16
 800ac54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac66:	f107 0308 	add.w	r3, r7, #8
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7ff ff73 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac76:	2110      	movs	r1, #16
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 faaf 	bl	800b1dc <SDMMC_GetCmdResp1>
 800ac7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac80:	69fb      	ldr	r3, [r7, #28]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3720      	adds	r7, #32
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b088      	sub	sp, #32
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac98:	2311      	movs	r3, #17
 800ac9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acac:	f107 0308 	add.w	r3, r7, #8
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7ff ff50 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800acb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800acbc:	2111      	movs	r1, #17
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fa8c 	bl	800b1dc <SDMMC_GetCmdResp1>
 800acc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acc6:	69fb      	ldr	r3, [r7, #28]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3720      	adds	r7, #32
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b088      	sub	sp, #32
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800acde:	2312      	movs	r3, #18
 800ace0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ace2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ace6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ace8:	2300      	movs	r3, #0
 800acea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acf2:	f107 0308 	add.w	r3, r7, #8
 800acf6:	4619      	mov	r1, r3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f7ff ff2d 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad02:	2112      	movs	r1, #18
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fa69 	bl	800b1dc <SDMMC_GetCmdResp1>
 800ad0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3720      	adds	r7, #32
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b088      	sub	sp, #32
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad24:	2318      	movs	r3, #24
 800ad26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad38:	f107 0308 	add.w	r3, r7, #8
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7ff ff0a 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad48:	2118      	movs	r1, #24
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fa46 	bl	800b1dc <SDMMC_GetCmdResp1>
 800ad50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad52:	69fb      	ldr	r3, [r7, #28]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3720      	adds	r7, #32
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad6a:	2319      	movs	r3, #25
 800ad6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad74:	2300      	movs	r3, #0
 800ad76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad7e:	f107 0308 	add.w	r3, r7, #8
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff fee7 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad8e:	2119      	movs	r1, #25
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fa23 	bl	800b1dc <SDMMC_GetCmdResp1>
 800ad96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad98:	69fb      	ldr	r3, [r7, #28]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3720      	adds	r7, #32
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
	...

0800ada4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800adb0:	230c      	movs	r3, #12
 800adb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adba:	2300      	movs	r3, #0
 800adbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adc2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800addc:	f107 0308 	add.w	r3, r7, #8
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7ff feb8 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ade8:	4a0b      	ldr	r2, [pc, #44]	; (800ae18 <SDMMC_CmdStopTransfer+0x74>)
 800adea:	210c      	movs	r1, #12
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f9f5 	bl	800b1dc <SDMMC_GetCmdResp1>
 800adf2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae06:	d101      	bne.n	800ae0c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	05f5e100 	.word	0x05f5e100

0800ae1c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08a      	sub	sp, #40	; 0x28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae2c:	2307      	movs	r3, #7
 800ae2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae34:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae36:	2300      	movs	r3, #0
 800ae38:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae3e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae40:	f107 0310 	add.w	r3, r7, #16
 800ae44:	4619      	mov	r1, r3
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7ff fe86 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae50:	2107      	movs	r1, #7
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f000 f9c2 	bl	800b1dc <SDMMC_GetCmdResp1>
 800ae58:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3728      	adds	r7, #40	; 0x28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b088      	sub	sp, #32
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae70:	2300      	movs	r3, #0
 800ae72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae74:	2300      	movs	r3, #0
 800ae76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae82:	f107 0308 	add.w	r3, r7, #8
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7ff fe65 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f976 	bl	800b180 <SDMMC_GetCmdError>
 800ae94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae96:	69fb      	ldr	r3, [r7, #28]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3720      	adds	r7, #32
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b088      	sub	sp, #32
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aea8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aeac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aeae:	2308      	movs	r3, #8
 800aeb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aec0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aec2:	f107 0308 	add.w	r3, r7, #8
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff fe45 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fb78 	bl	800b5c4 <SDMMC_GetCmdResp7>
 800aed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aed6:	69fb      	ldr	r3, [r7, #28]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3720      	adds	r7, #32
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aeee:	2337      	movs	r3, #55	; 0x37
 800aef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aef8:	2300      	movs	r3, #0
 800aefa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aefc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af02:	f107 0308 	add.w	r3, r7, #8
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7ff fe25 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af12:	2137      	movs	r1, #55	; 0x37
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f961 	bl	800b1dc <SDMMC_GetCmdResp1>
 800af1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af1c:	69fb      	ldr	r3, [r7, #28]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3720      	adds	r7, #32
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b088      	sub	sp, #32
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af34:	2329      	movs	r3, #41	; 0x29
 800af36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af48:	f107 0308 	add.w	r3, r7, #8
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff fe02 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fa7d 	bl	800b454 <SDMMC_GetCmdResp3>
 800af5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af5c:	69fb      	ldr	r3, [r7, #28]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3720      	adds	r7, #32
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b088      	sub	sp, #32
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af74:	2306      	movs	r3, #6
 800af76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af7e:	2300      	movs	r3, #0
 800af80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af88:	f107 0308 	add.w	r3, r7, #8
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7ff fde2 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af94:	f241 3288 	movw	r2, #5000	; 0x1388
 800af98:	2106      	movs	r1, #6
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f91e 	bl	800b1dc <SDMMC_GetCmdResp1>
 800afa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afa2:	69fb      	ldr	r3, [r7, #28]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3720      	adds	r7, #32
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b088      	sub	sp, #32
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800afb4:	2300      	movs	r3, #0
 800afb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800afb8:	2333      	movs	r3, #51	; 0x33
 800afba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afc2:	2300      	movs	r3, #0
 800afc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afcc:	f107 0308 	add.w	r3, r7, #8
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7ff fdc0 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800afd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afdc:	2133      	movs	r1, #51	; 0x33
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f8fc 	bl	800b1dc <SDMMC_GetCmdResp1>
 800afe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afe6:	69fb      	ldr	r3, [r7, #28]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3720      	adds	r7, #32
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b088      	sub	sp, #32
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aff8:	2300      	movs	r3, #0
 800affa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800affc:	2302      	movs	r3, #2
 800affe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b000:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b006:	2300      	movs	r3, #0
 800b008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b00a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b00e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b010:	f107 0308 	add.w	r3, r7, #8
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7ff fd9e 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f9cf 	bl	800b3c0 <SDMMC_GetCmdResp2>
 800b022:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b024:	69fb      	ldr	r3, [r7, #28]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3720      	adds	r7, #32
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b088      	sub	sp, #32
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b03c:	2309      	movs	r3, #9
 800b03e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b040:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b046:	2300      	movs	r3, #0
 800b048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b04a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b04e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b050:	f107 0308 	add.w	r3, r7, #8
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7ff fd7e 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f9af 	bl	800b3c0 <SDMMC_GetCmdResp2>
 800b062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b064:	69fb      	ldr	r3, [r7, #28]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3720      	adds	r7, #32
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b088      	sub	sp, #32
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b078:	2300      	movs	r3, #0
 800b07a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b07c:	2303      	movs	r3, #3
 800b07e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b080:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b086:	2300      	movs	r3, #0
 800b088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b08a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b08e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b090:	f107 0308 	add.w	r3, r7, #8
 800b094:	4619      	mov	r1, r3
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7ff fd5e 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b09c:	683a      	ldr	r2, [r7, #0]
 800b09e:	2103      	movs	r1, #3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fa17 	bl	800b4d4 <SDMMC_GetCmdResp6>
 800b0a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0a8:	69fb      	ldr	r3, [r7, #28]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3720      	adds	r7, #32
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b088      	sub	sp, #32
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b0c0:	230d      	movs	r3, #13
 800b0c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0d4:	f107 0308 	add.w	r3, r7, #8
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7ff fd3c 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e4:	210d      	movs	r1, #13
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f878 	bl	800b1dc <SDMMC_GetCmdResp1>
 800b0ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0ee:	69fb      	ldr	r3, [r7, #28]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3720      	adds	r7, #32
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b088      	sub	sp, #32
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b100:	2300      	movs	r3, #0
 800b102:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b104:	230d      	movs	r3, #13
 800b106:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b10c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b10e:	2300      	movs	r3, #0
 800b110:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b116:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b118:	f107 0308 	add.w	r3, r7, #8
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff fd1a 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b124:	f241 3288 	movw	r2, #5000	; 0x1388
 800b128:	210d      	movs	r1, #13
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f856 	bl	800b1dc <SDMMC_GetCmdResp1>
 800b130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b132:	69fb      	ldr	r3, [r7, #28]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3720      	adds	r7, #32
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b088      	sub	sp, #32
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b144:	2300      	movs	r3, #0
 800b146:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b148:	230b      	movs	r3, #11
 800b14a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b14c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b152:	2300      	movs	r3, #0
 800b154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b15a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b15c:	f107 0308 	add.w	r3, r7, #8
 800b160:	4619      	mov	r1, r3
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f7ff fcf8 	bl	800ab58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b168:	f241 3288 	movw	r2, #5000	; 0x1388
 800b16c:	210b      	movs	r1, #11
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f834 	bl	800b1dc <SDMMC_GetCmdResp1>
 800b174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b176:	69fb      	ldr	r3, [r7, #28]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3720      	adds	r7, #32
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b188:	4b11      	ldr	r3, [pc, #68]	; (800b1d0 <SDMMC_GetCmdError+0x50>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a11      	ldr	r2, [pc, #68]	; (800b1d4 <SDMMC_GetCmdError+0x54>)
 800b18e:	fba2 2303 	umull	r2, r3, r2, r3
 800b192:	0a5b      	lsrs	r3, r3, #9
 800b194:	f241 3288 	movw	r2, #5000	; 0x1388
 800b198:	fb02 f303 	mul.w	r3, r2, r3
 800b19c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	1e5a      	subs	r2, r3, #1
 800b1a2:	60fa      	str	r2, [r7, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1ac:	e009      	b.n	800b1c2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0f1      	beq.n	800b19e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4a06      	ldr	r2, [pc, #24]	; (800b1d8 <SDMMC_GetCmdError+0x58>)
 800b1be:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	24000000 	.word	0x24000000
 800b1d4:	10624dd3 	.word	0x10624dd3
 800b1d8:	002000c5 	.word	0x002000c5

0800b1dc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b1ea:	4b70      	ldr	r3, [pc, #448]	; (800b3ac <SDMMC_GetCmdResp1+0x1d0>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a70      	ldr	r2, [pc, #448]	; (800b3b0 <SDMMC_GetCmdResp1+0x1d4>)
 800b1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f4:	0a5a      	lsrs	r2, r3, #9
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	fb02 f303 	mul.w	r3, r2, r3
 800b1fc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	1e5a      	subs	r2, r3, #1
 800b202:	61fa      	str	r2, [r7, #28]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d102      	bne.n	800b20e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b208:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b20c:	e0c9      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b212:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	4b67      	ldr	r3, [pc, #412]	; (800b3b4 <SDMMC_GetCmdResp1+0x1d8>)
 800b218:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0ef      	beq.n	800b1fe <SDMMC_GetCmdResp1+0x22>
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1ea      	bne.n	800b1fe <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b22c:	f003 0304 	and.w	r3, r3, #4
 800b230:	2b00      	cmp	r3, #0
 800b232:	d004      	beq.n	800b23e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2204      	movs	r2, #4
 800b238:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b23a:	2304      	movs	r3, #4
 800b23c:	e0b1      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	2b00      	cmp	r3, #0
 800b248:	d004      	beq.n	800b254 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2201      	movs	r2, #1
 800b24e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b250:	2301      	movs	r3, #1
 800b252:	e0a6      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	4a58      	ldr	r2, [pc, #352]	; (800b3b8 <SDMMC_GetCmdResp1+0x1dc>)
 800b258:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7ff fca6 	bl	800abac <SDMMC_GetCommandResponse>
 800b260:	4603      	mov	r3, r0
 800b262:	461a      	mov	r2, r3
 800b264:	7afb      	ldrb	r3, [r7, #11]
 800b266:	4293      	cmp	r3, r2
 800b268:	d001      	beq.n	800b26e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b26a:	2301      	movs	r3, #1
 800b26c:	e099      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b26e:	2100      	movs	r1, #0
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7ff fca8 	bl	800abc6 <SDMMC_GetResponse>
 800b276:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b278:	697a      	ldr	r2, [r7, #20]
 800b27a:	4b50      	ldr	r3, [pc, #320]	; (800b3bc <SDMMC_GetCmdResp1+0x1e0>)
 800b27c:	4013      	ands	r3, r2
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b282:	2300      	movs	r3, #0
 800b284:	e08d      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	da02      	bge.n	800b292 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b28c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b290:	e087      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b29c:	2340      	movs	r3, #64	; 0x40
 800b29e:	e080      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b2aa:	2380      	movs	r3, #128	; 0x80
 800b2ac:	e079      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b2b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2bc:	e071      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b2c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2cc:	e069      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2dc:	e061      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b2e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2ec:	e059      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2fc:	e051      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d002      	beq.n	800b30e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b30c:	e049      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b318:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b31c:	e041      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b32c:	e039      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b33c:	e031      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b348:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b34c:	e029      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b358:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b35c:	e021      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b368:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b36c:	e019      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b374:	2b00      	cmp	r3, #0
 800b376:	d002      	beq.n	800b37e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b378:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b37c:	e011      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b388:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b38c:	e009      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	f003 0308 	and.w	r3, r3, #8
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b398:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b39c:	e001      	b.n	800b3a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b39e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3720      	adds	r7, #32
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	24000000 	.word	0x24000000
 800b3b0:	10624dd3 	.word	0x10624dd3
 800b3b4:	00200045 	.word	0x00200045
 800b3b8:	002000c5 	.word	0x002000c5
 800b3bc:	fdffe008 	.word	0xfdffe008

0800b3c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3c8:	4b1f      	ldr	r3, [pc, #124]	; (800b448 <SDMMC_GetCmdResp2+0x88>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a1f      	ldr	r2, [pc, #124]	; (800b44c <SDMMC_GetCmdResp2+0x8c>)
 800b3ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d2:	0a5b      	lsrs	r3, r3, #9
 800b3d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d8:	fb02 f303 	mul.w	r3, r2, r3
 800b3dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	1e5a      	subs	r2, r3, #1
 800b3e2:	60fa      	str	r2, [r7, #12]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d102      	bne.n	800b3ee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3ec:	e026      	b.n	800b43c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0ef      	beq.n	800b3de <SDMMC_GetCmdResp2+0x1e>
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1ea      	bne.n	800b3de <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40c:	f003 0304 	and.w	r3, r3, #4
 800b410:	2b00      	cmp	r3, #0
 800b412:	d004      	beq.n	800b41e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2204      	movs	r2, #4
 800b418:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b41a:	2304      	movs	r3, #4
 800b41c:	e00e      	b.n	800b43c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b422:	f003 0301 	and.w	r3, r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	d004      	beq.n	800b434 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b430:	2301      	movs	r3, #1
 800b432:	e003      	b.n	800b43c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a06      	ldr	r2, [pc, #24]	; (800b450 <SDMMC_GetCmdResp2+0x90>)
 800b438:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	24000000 	.word	0x24000000
 800b44c:	10624dd3 	.word	0x10624dd3
 800b450:	002000c5 	.word	0x002000c5

0800b454 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b45c:	4b1a      	ldr	r3, [pc, #104]	; (800b4c8 <SDMMC_GetCmdResp3+0x74>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a1a      	ldr	r2, [pc, #104]	; (800b4cc <SDMMC_GetCmdResp3+0x78>)
 800b462:	fba2 2303 	umull	r2, r3, r2, r3
 800b466:	0a5b      	lsrs	r3, r3, #9
 800b468:	f241 3288 	movw	r2, #5000	; 0x1388
 800b46c:	fb02 f303 	mul.w	r3, r2, r3
 800b470:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	1e5a      	subs	r2, r3, #1
 800b476:	60fa      	str	r2, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d102      	bne.n	800b482 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b47c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b480:	e01b      	b.n	800b4ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b486:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d0ef      	beq.n	800b472 <SDMMC_GetCmdResp3+0x1e>
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1ea      	bne.n	800b472 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a0:	f003 0304 	and.w	r3, r3, #4
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d004      	beq.n	800b4b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2204      	movs	r2, #4
 800b4ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4ae:	2304      	movs	r3, #4
 800b4b0:	e003      	b.n	800b4ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a06      	ldr	r2, [pc, #24]	; (800b4d0 <SDMMC_GetCmdResp3+0x7c>)
 800b4b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	24000000 	.word	0x24000000
 800b4cc:	10624dd3 	.word	0x10624dd3
 800b4d0:	002000c5 	.word	0x002000c5

0800b4d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b088      	sub	sp, #32
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	460b      	mov	r3, r1
 800b4de:	607a      	str	r2, [r7, #4]
 800b4e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4e2:	4b35      	ldr	r3, [pc, #212]	; (800b5b8 <SDMMC_GetCmdResp6+0xe4>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a35      	ldr	r2, [pc, #212]	; (800b5bc <SDMMC_GetCmdResp6+0xe8>)
 800b4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ec:	0a5b      	lsrs	r3, r3, #9
 800b4ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f2:	fb02 f303 	mul.w	r3, r2, r3
 800b4f6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	1e5a      	subs	r2, r3, #1
 800b4fc:	61fa      	str	r2, [r7, #28]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d102      	bne.n	800b508 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b506:	e052      	b.n	800b5ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b50c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b514:	2b00      	cmp	r3, #0
 800b516:	d0ef      	beq.n	800b4f8 <SDMMC_GetCmdResp6+0x24>
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1ea      	bne.n	800b4f8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b526:	f003 0304 	and.w	r3, r3, #4
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2204      	movs	r2, #4
 800b532:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b534:	2304      	movs	r3, #4
 800b536:	e03a      	b.n	800b5ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53c:	f003 0301 	and.w	r3, r3, #1
 800b540:	2b00      	cmp	r3, #0
 800b542:	d004      	beq.n	800b54e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2201      	movs	r2, #1
 800b548:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e02f      	b.n	800b5ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f7ff fb2c 	bl	800abac <SDMMC_GetCommandResponse>
 800b554:	4603      	mov	r3, r0
 800b556:	461a      	mov	r2, r3
 800b558:	7afb      	ldrb	r3, [r7, #11]
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d001      	beq.n	800b562 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b55e:	2301      	movs	r3, #1
 800b560:	e025      	b.n	800b5ae <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4a16      	ldr	r2, [pc, #88]	; (800b5c0 <SDMMC_GetCmdResp6+0xec>)
 800b566:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b568:	2100      	movs	r1, #0
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff fb2b 	bl	800abc6 <SDMMC_GetResponse>
 800b570:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d106      	bne.n	800b58a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	0c1b      	lsrs	r3, r3, #16
 800b580:	b29a      	uxth	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b586:	2300      	movs	r3, #0
 800b588:	e011      	b.n	800b5ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b598:	e009      	b.n	800b5ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b5a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5a8:	e001      	b.n	800b5ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b5aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3720      	adds	r7, #32
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	24000000 	.word	0x24000000
 800b5bc:	10624dd3 	.word	0x10624dd3
 800b5c0:	002000c5 	.word	0x002000c5

0800b5c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5cc:	4b22      	ldr	r3, [pc, #136]	; (800b658 <SDMMC_GetCmdResp7+0x94>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a22      	ldr	r2, [pc, #136]	; (800b65c <SDMMC_GetCmdResp7+0x98>)
 800b5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5d6:	0a5b      	lsrs	r3, r3, #9
 800b5d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5dc:	fb02 f303 	mul.w	r3, r2, r3
 800b5e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	1e5a      	subs	r2, r3, #1
 800b5e6:	60fa      	str	r2, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d102      	bne.n	800b5f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5f0:	e02c      	b.n	800b64c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0ef      	beq.n	800b5e2 <SDMMC_GetCmdResp7+0x1e>
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1ea      	bne.n	800b5e2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b610:	f003 0304 	and.w	r3, r3, #4
 800b614:	2b00      	cmp	r3, #0
 800b616:	d004      	beq.n	800b622 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2204      	movs	r2, #4
 800b61c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b61e:	2304      	movs	r3, #4
 800b620:	e014      	b.n	800b64c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d004      	beq.n	800b638 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b634:	2301      	movs	r3, #1
 800b636:	e009      	b.n	800b64c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b640:	2b00      	cmp	r3, #0
 800b642:	d002      	beq.n	800b64a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2240      	movs	r2, #64	; 0x40
 800b648:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b64a:	2300      	movs	r3, #0

}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr
 800b658:	24000000 	.word	0x24000000
 800b65c:	10624dd3 	.word	0x10624dd3

0800b660 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b660:	b084      	sub	sp, #16
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	f107 001c 	add.w	r0, r7, #28
 800b66e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	2b01      	cmp	r3, #1
 800b676:	d120      	bne.n	800b6ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	68da      	ldr	r2, [r3, #12]
 800b688:	4b25      	ldr	r3, [pc, #148]	; (800b720 <USB_CoreInit+0xc0>)
 800b68a:	4013      	ands	r3, r2
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b69c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d105      	bne.n	800b6ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f001 fabe 	bl	800cc30 <USB_CoreReset>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	73fb      	strb	r3, [r7, #15]
 800b6b8:	e01a      	b.n	800b6f0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f001 fab2 	bl	800cc30 <USB_CoreReset>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d106      	bne.n	800b6e4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	639a      	str	r2, [r3, #56]	; 0x38
 800b6e2:	e005      	b.n	800b6f0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d10b      	bne.n	800b70e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	f043 0206 	orr.w	r2, r3, #6
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	f043 0220 	orr.w	r2, r3, #32
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b71a:	b004      	add	sp, #16
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	ffbdffbf 	.word	0xffbdffbf

0800b724 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	4613      	mov	r3, r2
 800b730:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b732:	79fb      	ldrb	r3, [r7, #7]
 800b734:	2b02      	cmp	r3, #2
 800b736:	d165      	bne.n	800b804 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	4a41      	ldr	r2, [pc, #260]	; (800b840 <USB_SetTurnaroundTime+0x11c>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d906      	bls.n	800b74e <USB_SetTurnaroundTime+0x2a>
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	4a40      	ldr	r2, [pc, #256]	; (800b844 <USB_SetTurnaroundTime+0x120>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d802      	bhi.n	800b74e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b748:	230f      	movs	r3, #15
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	e062      	b.n	800b814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	4a3c      	ldr	r2, [pc, #240]	; (800b844 <USB_SetTurnaroundTime+0x120>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d906      	bls.n	800b764 <USB_SetTurnaroundTime+0x40>
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	4a3b      	ldr	r2, [pc, #236]	; (800b848 <USB_SetTurnaroundTime+0x124>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d802      	bhi.n	800b764 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b75e:	230e      	movs	r3, #14
 800b760:	617b      	str	r3, [r7, #20]
 800b762:	e057      	b.n	800b814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	4a38      	ldr	r2, [pc, #224]	; (800b848 <USB_SetTurnaroundTime+0x124>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d906      	bls.n	800b77a <USB_SetTurnaroundTime+0x56>
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	4a37      	ldr	r2, [pc, #220]	; (800b84c <USB_SetTurnaroundTime+0x128>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d802      	bhi.n	800b77a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b774:	230d      	movs	r3, #13
 800b776:	617b      	str	r3, [r7, #20]
 800b778:	e04c      	b.n	800b814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	4a33      	ldr	r2, [pc, #204]	; (800b84c <USB_SetTurnaroundTime+0x128>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d906      	bls.n	800b790 <USB_SetTurnaroundTime+0x6c>
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	4a32      	ldr	r2, [pc, #200]	; (800b850 <USB_SetTurnaroundTime+0x12c>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d802      	bhi.n	800b790 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b78a:	230c      	movs	r3, #12
 800b78c:	617b      	str	r3, [r7, #20]
 800b78e:	e041      	b.n	800b814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	4a2f      	ldr	r2, [pc, #188]	; (800b850 <USB_SetTurnaroundTime+0x12c>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d906      	bls.n	800b7a6 <USB_SetTurnaroundTime+0x82>
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	4a2e      	ldr	r2, [pc, #184]	; (800b854 <USB_SetTurnaroundTime+0x130>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d802      	bhi.n	800b7a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b7a0:	230b      	movs	r3, #11
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	e036      	b.n	800b814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	4a2a      	ldr	r2, [pc, #168]	; (800b854 <USB_SetTurnaroundTime+0x130>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d906      	bls.n	800b7bc <USB_SetTurnaroundTime+0x98>
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	4a29      	ldr	r2, [pc, #164]	; (800b858 <USB_SetTurnaroundTime+0x134>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d802      	bhi.n	800b7bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b7b6:	230a      	movs	r3, #10
 800b7b8:	617b      	str	r3, [r7, #20]
 800b7ba:	e02b      	b.n	800b814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	4a26      	ldr	r2, [pc, #152]	; (800b858 <USB_SetTurnaroundTime+0x134>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d906      	bls.n	800b7d2 <USB_SetTurnaroundTime+0xae>
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	4a25      	ldr	r2, [pc, #148]	; (800b85c <USB_SetTurnaroundTime+0x138>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d802      	bhi.n	800b7d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b7cc:	2309      	movs	r3, #9
 800b7ce:	617b      	str	r3, [r7, #20]
 800b7d0:	e020      	b.n	800b814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	4a21      	ldr	r2, [pc, #132]	; (800b85c <USB_SetTurnaroundTime+0x138>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d906      	bls.n	800b7e8 <USB_SetTurnaroundTime+0xc4>
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	4a20      	ldr	r2, [pc, #128]	; (800b860 <USB_SetTurnaroundTime+0x13c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d802      	bhi.n	800b7e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b7e2:	2308      	movs	r3, #8
 800b7e4:	617b      	str	r3, [r7, #20]
 800b7e6:	e015      	b.n	800b814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	4a1d      	ldr	r2, [pc, #116]	; (800b860 <USB_SetTurnaroundTime+0x13c>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d906      	bls.n	800b7fe <USB_SetTurnaroundTime+0xda>
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	4a1c      	ldr	r2, [pc, #112]	; (800b864 <USB_SetTurnaroundTime+0x140>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d802      	bhi.n	800b7fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b7f8:	2307      	movs	r3, #7
 800b7fa:	617b      	str	r3, [r7, #20]
 800b7fc:	e00a      	b.n	800b814 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b7fe:	2306      	movs	r3, #6
 800b800:	617b      	str	r3, [r7, #20]
 800b802:	e007      	b.n	800b814 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d102      	bne.n	800b810 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b80a:	2309      	movs	r3, #9
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	e001      	b.n	800b814 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b810:	2309      	movs	r3, #9
 800b812:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	68da      	ldr	r2, [r3, #12]
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	029b      	lsls	r3, r3, #10
 800b828:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b82c:	431a      	orrs	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	371c      	adds	r7, #28
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	00d8acbf 	.word	0x00d8acbf
 800b844:	00e4e1bf 	.word	0x00e4e1bf
 800b848:	00f423ff 	.word	0x00f423ff
 800b84c:	0106737f 	.word	0x0106737f
 800b850:	011a499f 	.word	0x011a499f
 800b854:	01312cff 	.word	0x01312cff
 800b858:	014ca43f 	.word	0x014ca43f
 800b85c:	016e35ff 	.word	0x016e35ff
 800b860:	01a6ab1f 	.word	0x01a6ab1f
 800b864:	01e847ff 	.word	0x01e847ff

0800b868 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	f043 0201 	orr.w	r2, r3, #1
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	370c      	adds	r7, #12
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr

0800b88a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b083      	sub	sp, #12
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	f023 0201 	bic.w	r2, r3, #1
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b8c4:	78fb      	ldrb	r3, [r7, #3]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d106      	bne.n	800b8d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	60da      	str	r2, [r3, #12]
 800b8d6:	e00b      	b.n	800b8f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b8d8:	78fb      	ldrb	r3, [r7, #3]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d106      	bne.n	800b8ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	60da      	str	r2, [r3, #12]
 800b8ea:	e001      	b.n	800b8f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e003      	b.n	800b8f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b8f0:	2032      	movs	r0, #50	; 0x32
 800b8f2:	f7f5 ff4f 	bl	8001794 <HAL_Delay>

  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b900:	b084      	sub	sp, #16
 800b902:	b580      	push	{r7, lr}
 800b904:	b086      	sub	sp, #24
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b90e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b91a:	2300      	movs	r3, #0
 800b91c:	613b      	str	r3, [r7, #16]
 800b91e:	e009      	b.n	800b934 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	3340      	adds	r3, #64	; 0x40
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	2200      	movs	r2, #0
 800b92c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	3301      	adds	r3, #1
 800b932:	613b      	str	r3, [r7, #16]
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	2b0e      	cmp	r3, #14
 800b938:	d9f2      	bls.n	800b920 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b93a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d11c      	bne.n	800b97a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b94e:	f043 0302 	orr.w	r3, r3, #2
 800b952:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b958:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	601a      	str	r2, [r3, #0]
 800b978:	e005      	b.n	800b986 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b98c:	461a      	mov	r2, r3
 800b98e:	2300      	movs	r3, #0
 800b990:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b998:	4619      	mov	r1, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	680b      	ldr	r3, [r1, #0]
 800b9a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d10c      	bne.n	800b9c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d104      	bne.n	800b9bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 f949 	bl	800bc4c <USB_SetDevSpeed>
 800b9ba:	e008      	b.n	800b9ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b9bc:	2101      	movs	r1, #1
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f944 	bl	800bc4c <USB_SetDevSpeed>
 800b9c4:	e003      	b.n	800b9ce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b9c6:	2103      	movs	r1, #3
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 f93f 	bl	800bc4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b9ce:	2110      	movs	r1, #16
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f8f3 	bl	800bbbc <USB_FlushTxFifo>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f911 	bl	800bc08 <USB_FlushRxFifo>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba02:	461a      	mov	r2, r3
 800ba04:	2300      	movs	r3, #0
 800ba06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba0e:	461a      	mov	r2, r3
 800ba10:	2300      	movs	r3, #0
 800ba12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba14:	2300      	movs	r3, #0
 800ba16:	613b      	str	r3, [r7, #16]
 800ba18:	e043      	b.n	800baa2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	015a      	lsls	r2, r3, #5
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	4413      	add	r3, r2
 800ba22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba30:	d118      	bne.n	800ba64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10a      	bne.n	800ba4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	015a      	lsls	r2, r3, #5
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	4413      	add	r3, r2
 800ba40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba44:	461a      	mov	r2, r3
 800ba46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba4a:	6013      	str	r3, [r2, #0]
 800ba4c:	e013      	b.n	800ba76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	015a      	lsls	r2, r3, #5
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	4413      	add	r3, r2
 800ba56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba60:	6013      	str	r3, [r2, #0]
 800ba62:	e008      	b.n	800ba76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	015a      	lsls	r2, r3, #5
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba70:	461a      	mov	r2, r3
 800ba72:	2300      	movs	r3, #0
 800ba74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	015a      	lsls	r2, r3, #5
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba82:	461a      	mov	r2, r3
 800ba84:	2300      	movs	r3, #0
 800ba86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba94:	461a      	mov	r2, r3
 800ba96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	613b      	str	r3, [r7, #16]
 800baa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa4:	693a      	ldr	r2, [r7, #16]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d3b7      	bcc.n	800ba1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800baaa:	2300      	movs	r3, #0
 800baac:	613b      	str	r3, [r7, #16]
 800baae:	e043      	b.n	800bb38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	015a      	lsls	r2, r3, #5
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	4413      	add	r3, r2
 800bab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bac6:	d118      	bne.n	800bafa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10a      	bne.n	800bae4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	015a      	lsls	r2, r3, #5
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4413      	add	r3, r2
 800bad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bada:	461a      	mov	r2, r3
 800badc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bae0:	6013      	str	r3, [r2, #0]
 800bae2:	e013      	b.n	800bb0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	015a      	lsls	r2, r3, #5
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	4413      	add	r3, r2
 800baec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf0:	461a      	mov	r2, r3
 800baf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800baf6:	6013      	str	r3, [r2, #0]
 800baf8:	e008      	b.n	800bb0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	015a      	lsls	r2, r3, #5
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	4413      	add	r3, r2
 800bb02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb06:	461a      	mov	r2, r3
 800bb08:	2300      	movs	r3, #0
 800bb0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	015a      	lsls	r2, r3, #5
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4413      	add	r3, r2
 800bb14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb18:	461a      	mov	r2, r3
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	015a      	lsls	r2, r3, #5
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	4413      	add	r3, r2
 800bb26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	3301      	adds	r3, #1
 800bb36:	613b      	str	r3, [r7, #16]
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3a:	693a      	ldr	r2, [r7, #16]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d3b7      	bcc.n	800bab0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bb60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d105      	bne.n	800bb74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	f043 0210 	orr.w	r2, r3, #16
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	699a      	ldr	r2, [r3, #24]
 800bb78:	4b0e      	ldr	r3, [pc, #56]	; (800bbb4 <USB_DevInit+0x2b4>)
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d005      	beq.n	800bb92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	699b      	ldr	r3, [r3, #24]
 800bb8a:	f043 0208 	orr.w	r2, r3, #8
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bb92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d105      	bne.n	800bba4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	699a      	ldr	r2, [r3, #24]
 800bb9c:	4b06      	ldr	r3, [pc, #24]	; (800bbb8 <USB_DevInit+0x2b8>)
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bba4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3718      	adds	r7, #24
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbb0:	b004      	add	sp, #16
 800bbb2:	4770      	bx	lr
 800bbb4:	803c3800 	.word	0x803c3800
 800bbb8:	40000004 	.word	0x40000004

0800bbbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	019b      	lsls	r3, r3, #6
 800bbce:	f043 0220 	orr.w	r2, r3, #32
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	60fb      	str	r3, [r7, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	4a09      	ldr	r2, [pc, #36]	; (800bc04 <USB_FlushTxFifo+0x48>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d901      	bls.n	800bbe8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	e006      	b.n	800bbf6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	f003 0320 	and.w	r3, r3, #32
 800bbf0:	2b20      	cmp	r3, #32
 800bbf2:	d0f0      	beq.n	800bbd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3714      	adds	r7, #20
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	00030d40 	.word	0x00030d40

0800bc08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2210      	movs	r2, #16
 800bc18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	4a09      	ldr	r2, [pc, #36]	; (800bc48 <USB_FlushRxFifo+0x40>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d901      	bls.n	800bc2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bc28:	2303      	movs	r3, #3
 800bc2a:	e006      	b.n	800bc3a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	691b      	ldr	r3, [r3, #16]
 800bc30:	f003 0310 	and.w	r3, r3, #16
 800bc34:	2b10      	cmp	r3, #16
 800bc36:	d0f0      	beq.n	800bc1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3714      	adds	r7, #20
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	00030d40 	.word	0x00030d40

0800bc4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	460b      	mov	r3, r1
 800bc56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	68f9      	ldr	r1, [r7, #12]
 800bc68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b087      	sub	sp, #28
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	f003 0306 	and.w	r3, r3, #6
 800bc96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d102      	bne.n	800bca4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	75fb      	strb	r3, [r7, #23]
 800bca2:	e00a      	b.n	800bcba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d002      	beq.n	800bcb0 <USB_GetDevSpeed+0x32>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2b06      	cmp	r3, #6
 800bcae:	d102      	bne.n	800bcb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	75fb      	strb	r3, [r7, #23]
 800bcb4:	e001      	b.n	800bcba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bcb6:	230f      	movs	r3, #15
 800bcb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	371c      	adds	r7, #28
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	785b      	ldrb	r3, [r3, #1]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d139      	bne.n	800bd58 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcea:	69da      	ldr	r2, [r3, #28]
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	f003 030f 	and.w	r3, r3, #15
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	fa01 f303 	lsl.w	r3, r1, r3
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	68f9      	ldr	r1, [r7, #12]
 800bcfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd02:	4313      	orrs	r3, r2
 800bd04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	015a      	lsls	r2, r3, #5
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d153      	bne.n	800bdc4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	015a      	lsls	r2, r3, #5
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4413      	add	r3, r2
 800bd24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	78db      	ldrb	r3, [r3, #3]
 800bd36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	059b      	lsls	r3, r3, #22
 800bd3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd40:	431a      	orrs	r2, r3
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	0159      	lsls	r1, r3, #5
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	440b      	add	r3, r1
 800bd4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4b20      	ldr	r3, [pc, #128]	; (800bdd4 <USB_ActivateEndpoint+0x10c>)
 800bd52:	4313      	orrs	r3, r2
 800bd54:	600b      	str	r3, [r1, #0]
 800bd56:	e035      	b.n	800bdc4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd5e:	69da      	ldr	r2, [r3, #28]
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	f003 030f 	and.w	r3, r3, #15
 800bd68:	2101      	movs	r1, #1
 800bd6a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd6e:	041b      	lsls	r3, r3, #16
 800bd70:	68f9      	ldr	r1, [r7, #12]
 800bd72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd76:	4313      	orrs	r3, r2
 800bd78:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	015a      	lsls	r2, r3, #5
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	4413      	add	r3, r2
 800bd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d119      	bne.n	800bdc4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	015a      	lsls	r2, r3, #5
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	4413      	add	r3, r2
 800bd98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	78db      	ldrb	r3, [r3, #3]
 800bdaa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bdac:	430b      	orrs	r3, r1
 800bdae:	431a      	orrs	r2, r3
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	0159      	lsls	r1, r3, #5
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	440b      	add	r3, r1
 800bdb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4b05      	ldr	r3, [pc, #20]	; (800bdd4 <USB_ActivateEndpoint+0x10c>)
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3714      	adds	r7, #20
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	10008000 	.word	0x10008000

0800bdd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	785b      	ldrb	r3, [r3, #1]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d161      	bne.n	800beb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	015a      	lsls	r2, r3, #5
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be0a:	d11f      	bne.n	800be4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	015a      	lsls	r2, r3, #5
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	4413      	add	r3, r2
 800be14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	0151      	lsls	r1, r2, #5
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	440a      	add	r2, r1
 800be22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4413      	add	r3, r2
 800be34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	0151      	lsls	r1, r2, #5
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	440a      	add	r2, r1
 800be42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	f003 030f 	and.w	r3, r3, #15
 800be5c:	2101      	movs	r1, #1
 800be5e:	fa01 f303 	lsl.w	r3, r1, r3
 800be62:	b29b      	uxth	r3, r3
 800be64:	43db      	mvns	r3, r3
 800be66:	68f9      	ldr	r1, [r7, #12]
 800be68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be6c:	4013      	ands	r3, r2
 800be6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be76:	69da      	ldr	r2, [r3, #28]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	f003 030f 	and.w	r3, r3, #15
 800be80:	2101      	movs	r1, #1
 800be82:	fa01 f303 	lsl.w	r3, r1, r3
 800be86:	b29b      	uxth	r3, r3
 800be88:	43db      	mvns	r3, r3
 800be8a:	68f9      	ldr	r1, [r7, #12]
 800be8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be90:	4013      	ands	r3, r2
 800be92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	015a      	lsls	r2, r3, #5
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	4413      	add	r3, r2
 800be9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	0159      	lsls	r1, r3, #5
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	440b      	add	r3, r1
 800beaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beae:	4619      	mov	r1, r3
 800beb0:	4b35      	ldr	r3, [pc, #212]	; (800bf88 <USB_DeactivateEndpoint+0x1b0>)
 800beb2:	4013      	ands	r3, r2
 800beb4:	600b      	str	r3, [r1, #0]
 800beb6:	e060      	b.n	800bf7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	015a      	lsls	r2, r3, #5
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800beca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bece:	d11f      	bne.n	800bf10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	015a      	lsls	r2, r3, #5
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4413      	add	r3, r2
 800bed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	0151      	lsls	r1, r2, #5
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	440a      	add	r2, r1
 800bee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800beee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	015a      	lsls	r2, r3, #5
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	4413      	add	r3, r2
 800bef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	0151      	lsls	r1, r2, #5
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	440a      	add	r2, r1
 800bf06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	f003 030f 	and.w	r3, r3, #15
 800bf20:	2101      	movs	r1, #1
 800bf22:	fa01 f303 	lsl.w	r3, r1, r3
 800bf26:	041b      	lsls	r3, r3, #16
 800bf28:	43db      	mvns	r3, r3
 800bf2a:	68f9      	ldr	r1, [r7, #12]
 800bf2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf30:	4013      	ands	r3, r2
 800bf32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf3a:	69da      	ldr	r2, [r3, #28]
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	f003 030f 	and.w	r3, r3, #15
 800bf44:	2101      	movs	r1, #1
 800bf46:	fa01 f303 	lsl.w	r3, r1, r3
 800bf4a:	041b      	lsls	r3, r3, #16
 800bf4c:	43db      	mvns	r3, r3
 800bf4e:	68f9      	ldr	r1, [r7, #12]
 800bf50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf54:	4013      	ands	r3, r2
 800bf56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	0159      	lsls	r1, r3, #5
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	440b      	add	r3, r1
 800bf6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf72:	4619      	mov	r1, r3
 800bf74:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <USB_DeactivateEndpoint+0x1b4>)
 800bf76:	4013      	ands	r3, r2
 800bf78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr
 800bf88:	ec337800 	.word	0xec337800
 800bf8c:	eff37800 	.word	0xeff37800

0800bf90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08a      	sub	sp, #40	; 0x28
 800bf94:	af02      	add	r7, sp, #8
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	785b      	ldrb	r3, [r3, #1]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	f040 8163 	bne.w	800c278 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	695b      	ldr	r3, [r3, #20]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d132      	bne.n	800c020 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	015a      	lsls	r2, r3, #5
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfc6:	691a      	ldr	r2, [r3, #16]
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	0159      	lsls	r1, r3, #5
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	440b      	add	r3, r1
 800bfd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4ba5      	ldr	r3, [pc, #660]	; (800c26c <USB_EPStartXfer+0x2dc>)
 800bfd8:	4013      	ands	r3, r2
 800bfda:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	015a      	lsls	r2, r3, #5
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	69ba      	ldr	r2, [r7, #24]
 800bfec:	0151      	lsls	r1, r2, #5
 800bfee:	69fa      	ldr	r2, [r7, #28]
 800bff0:	440a      	add	r2, r1
 800bff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	4413      	add	r3, r2
 800c004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c008:	691a      	ldr	r2, [r3, #16]
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	0159      	lsls	r1, r3, #5
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	440b      	add	r3, r1
 800c012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c016:	4619      	mov	r1, r3
 800c018:	4b95      	ldr	r3, [pc, #596]	; (800c270 <USB_EPStartXfer+0x2e0>)
 800c01a:	4013      	ands	r3, r2
 800c01c:	610b      	str	r3, [r1, #16]
 800c01e:	e074      	b.n	800c10a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	015a      	lsls	r2, r3, #5
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	4413      	add	r3, r2
 800c028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c02c:	691a      	ldr	r2, [r3, #16]
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	0159      	lsls	r1, r3, #5
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	440b      	add	r3, r1
 800c036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c03a:	4619      	mov	r1, r3
 800c03c:	4b8c      	ldr	r3, [pc, #560]	; (800c270 <USB_EPStartXfer+0x2e0>)
 800c03e:	4013      	ands	r3, r2
 800c040:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	015a      	lsls	r2, r3, #5
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	4413      	add	r3, r2
 800c04a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c04e:	691a      	ldr	r2, [r3, #16]
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	0159      	lsls	r1, r3, #5
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	440b      	add	r3, r1
 800c058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c05c:	4619      	mov	r1, r3
 800c05e:	4b83      	ldr	r3, [pc, #524]	; (800c26c <USB_EPStartXfer+0x2dc>)
 800c060:	4013      	ands	r3, r2
 800c062:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	4413      	add	r3, r2
 800c06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c070:	691a      	ldr	r2, [r3, #16]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	6959      	ldr	r1, [r3, #20]
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	440b      	add	r3, r1
 800c07c:	1e59      	subs	r1, r3, #1
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	fbb1 f3f3 	udiv	r3, r1, r3
 800c086:	04d9      	lsls	r1, r3, #19
 800c088:	4b7a      	ldr	r3, [pc, #488]	; (800c274 <USB_EPStartXfer+0x2e4>)
 800c08a:	400b      	ands	r3, r1
 800c08c:	69b9      	ldr	r1, [r7, #24]
 800c08e:	0148      	lsls	r0, r1, #5
 800c090:	69f9      	ldr	r1, [r7, #28]
 800c092:	4401      	add	r1, r0
 800c094:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c098:	4313      	orrs	r3, r2
 800c09a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	015a      	lsls	r2, r3, #5
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a8:	691a      	ldr	r2, [r3, #16]
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	695b      	ldr	r3, [r3, #20]
 800c0ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0b2:	69b9      	ldr	r1, [r7, #24]
 800c0b4:	0148      	lsls	r0, r1, #5
 800c0b6:	69f9      	ldr	r1, [r7, #28]
 800c0b8:	4401      	add	r1, r0
 800c0ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	78db      	ldrb	r3, [r3, #3]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d11f      	bne.n	800c10a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	015a      	lsls	r2, r3, #5
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	69ba      	ldr	r2, [r7, #24]
 800c0da:	0151      	lsls	r1, r2, #5
 800c0dc:	69fa      	ldr	r2, [r7, #28]
 800c0de:	440a      	add	r2, r1
 800c0e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c0e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	015a      	lsls	r2, r3, #5
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	69ba      	ldr	r2, [r7, #24]
 800c0fa:	0151      	lsls	r1, r2, #5
 800c0fc:	69fa      	ldr	r2, [r7, #28]
 800c0fe:	440a      	add	r2, r1
 800c100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c108:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c10a:	79fb      	ldrb	r3, [r7, #7]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d14b      	bne.n	800c1a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d009      	beq.n	800c12c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c124:	461a      	mov	r2, r3
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	78db      	ldrb	r3, [r3, #3]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d128      	bne.n	800c186 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c140:	2b00      	cmp	r3, #0
 800c142:	d110      	bne.n	800c166 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	69ba      	ldr	r2, [r7, #24]
 800c154:	0151      	lsls	r1, r2, #5
 800c156:	69fa      	ldr	r2, [r7, #28]
 800c158:	440a      	add	r2, r1
 800c15a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c15e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c162:	6013      	str	r3, [r2, #0]
 800c164:	e00f      	b.n	800c186 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	015a      	lsls	r2, r3, #5
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	4413      	add	r3, r2
 800c16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	69ba      	ldr	r2, [r7, #24]
 800c176:	0151      	lsls	r1, r2, #5
 800c178:	69fa      	ldr	r2, [r7, #28]
 800c17a:	440a      	add	r2, r1
 800c17c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c184:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	015a      	lsls	r2, r3, #5
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	4413      	add	r3, r2
 800c18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	69ba      	ldr	r2, [r7, #24]
 800c196:	0151      	lsls	r1, r2, #5
 800c198:	69fa      	ldr	r2, [r7, #28]
 800c19a:	440a      	add	r2, r1
 800c19c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1a4:	6013      	str	r3, [r2, #0]
 800c1a6:	e133      	b.n	800c410 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	015a      	lsls	r2, r3, #5
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	69ba      	ldr	r2, [r7, #24]
 800c1b8:	0151      	lsls	r1, r2, #5
 800c1ba:	69fa      	ldr	r2, [r7, #28]
 800c1bc:	440a      	add	r2, r1
 800c1be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	78db      	ldrb	r3, [r3, #3]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d015      	beq.n	800c1fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	695b      	ldr	r3, [r3, #20]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 811b 	beq.w	800c410 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	f003 030f 	and.w	r3, r3, #15
 800c1ea:	2101      	movs	r1, #1
 800c1ec:	fa01 f303 	lsl.w	r3, r1, r3
 800c1f0:	69f9      	ldr	r1, [r7, #28]
 800c1f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	634b      	str	r3, [r1, #52]	; 0x34
 800c1fa:	e109      	b.n	800c410 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d110      	bne.n	800c22e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	015a      	lsls	r2, r3, #5
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	4413      	add	r3, r2
 800c214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	69ba      	ldr	r2, [r7, #24]
 800c21c:	0151      	lsls	r1, r2, #5
 800c21e:	69fa      	ldr	r2, [r7, #28]
 800c220:	440a      	add	r2, r1
 800c222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c226:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c22a:	6013      	str	r3, [r2, #0]
 800c22c:	e00f      	b.n	800c24e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	015a      	lsls	r2, r3, #5
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	4413      	add	r3, r2
 800c236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	69ba      	ldr	r2, [r7, #24]
 800c23e:	0151      	lsls	r1, r2, #5
 800c240:	69fa      	ldr	r2, [r7, #28]
 800c242:	440a      	add	r2, r1
 800c244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c24c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	68d9      	ldr	r1, [r3, #12]
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	781a      	ldrb	r2, [r3, #0]
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	b298      	uxth	r0, r3
 800c25c:	79fb      	ldrb	r3, [r7, #7]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	4603      	mov	r3, r0
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f000 fa38 	bl	800c6d8 <USB_WritePacket>
 800c268:	e0d2      	b.n	800c410 <USB_EPStartXfer+0x480>
 800c26a:	bf00      	nop
 800c26c:	e007ffff 	.word	0xe007ffff
 800c270:	fff80000 	.word	0xfff80000
 800c274:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	015a      	lsls	r2, r3, #5
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	4413      	add	r3, r2
 800c280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c284:	691a      	ldr	r2, [r3, #16]
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	0159      	lsls	r1, r3, #5
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	440b      	add	r3, r1
 800c28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c292:	4619      	mov	r1, r3
 800c294:	4b61      	ldr	r3, [pc, #388]	; (800c41c <USB_EPStartXfer+0x48c>)
 800c296:	4013      	ands	r3, r2
 800c298:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	015a      	lsls	r2, r3, #5
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a6:	691a      	ldr	r2, [r3, #16]
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	0159      	lsls	r1, r3, #5
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	440b      	add	r3, r1
 800c2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	4b5a      	ldr	r3, [pc, #360]	; (800c420 <USB_EPStartXfer+0x490>)
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	695b      	ldr	r3, [r3, #20]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d123      	bne.n	800c30c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	015a      	lsls	r2, r3, #5
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2d0:	691a      	ldr	r2, [r3, #16]
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2da:	69b9      	ldr	r1, [r7, #24]
 800c2dc:	0148      	lsls	r0, r1, #5
 800c2de:	69f9      	ldr	r1, [r7, #28]
 800c2e0:	4401      	add	r1, r0
 800c2e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	015a      	lsls	r2, r3, #5
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	69ba      	ldr	r2, [r7, #24]
 800c2fa:	0151      	lsls	r1, r2, #5
 800c2fc:	69fa      	ldr	r2, [r7, #28]
 800c2fe:	440a      	add	r2, r1
 800c300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c308:	6113      	str	r3, [r2, #16]
 800c30a:	e033      	b.n	800c374 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	695a      	ldr	r2, [r3, #20]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	4413      	add	r3, r2
 800c316:	1e5a      	subs	r2, r3, #1
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c320:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	015a      	lsls	r2, r3, #5
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	4413      	add	r3, r2
 800c32a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c32e:	691a      	ldr	r2, [r3, #16]
 800c330:	8afb      	ldrh	r3, [r7, #22]
 800c332:	04d9      	lsls	r1, r3, #19
 800c334:	4b3b      	ldr	r3, [pc, #236]	; (800c424 <USB_EPStartXfer+0x494>)
 800c336:	400b      	ands	r3, r1
 800c338:	69b9      	ldr	r1, [r7, #24]
 800c33a:	0148      	lsls	r0, r1, #5
 800c33c:	69f9      	ldr	r1, [r7, #28]
 800c33e:	4401      	add	r1, r0
 800c340:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c344:	4313      	orrs	r3, r2
 800c346:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	015a      	lsls	r2, r3, #5
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	4413      	add	r3, r2
 800c350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c354:	691a      	ldr	r2, [r3, #16]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	8af9      	ldrh	r1, [r7, #22]
 800c35c:	fb01 f303 	mul.w	r3, r1, r3
 800c360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c364:	69b9      	ldr	r1, [r7, #24]
 800c366:	0148      	lsls	r0, r1, #5
 800c368:	69f9      	ldr	r1, [r7, #28]
 800c36a:	4401      	add	r1, r0
 800c36c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c370:	4313      	orrs	r3, r2
 800c372:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c374:	79fb      	ldrb	r3, [r7, #7]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d10d      	bne.n	800c396 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d009      	beq.n	800c396 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	68d9      	ldr	r1, [r3, #12]
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	015a      	lsls	r2, r3, #5
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	4413      	add	r3, r2
 800c38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c392:	460a      	mov	r2, r1
 800c394:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	78db      	ldrb	r3, [r3, #3]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d128      	bne.n	800c3f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d110      	bne.n	800c3d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	015a      	lsls	r2, r3, #5
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	69ba      	ldr	r2, [r7, #24]
 800c3be:	0151      	lsls	r1, r2, #5
 800c3c0:	69fa      	ldr	r2, [r7, #28]
 800c3c2:	440a      	add	r2, r1
 800c3c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c3cc:	6013      	str	r3, [r2, #0]
 800c3ce:	e00f      	b.n	800c3f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	015a      	lsls	r2, r3, #5
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	69ba      	ldr	r2, [r7, #24]
 800c3e0:	0151      	lsls	r1, r2, #5
 800c3e2:	69fa      	ldr	r2, [r7, #28]
 800c3e4:	440a      	add	r2, r1
 800c3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	015a      	lsls	r2, r3, #5
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	0151      	lsls	r1, r2, #5
 800c402:	69fa      	ldr	r2, [r7, #28]
 800c404:	440a      	add	r2, r1
 800c406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c40a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c40e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3720      	adds	r7, #32
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	fff80000 	.word	0xfff80000
 800c420:	e007ffff 	.word	0xe007ffff
 800c424:	1ff80000 	.word	0x1ff80000

0800c428 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c428:	b480      	push	{r7}
 800c42a:	b087      	sub	sp, #28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	4613      	mov	r3, r2
 800c434:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	785b      	ldrb	r3, [r3, #1]
 800c444:	2b01      	cmp	r3, #1
 800c446:	f040 80cd 	bne.w	800c5e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	695b      	ldr	r3, [r3, #20]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d132      	bne.n	800c4b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	015a      	lsls	r2, r3, #5
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	4413      	add	r3, r2
 800c45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c45e:	691a      	ldr	r2, [r3, #16]
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	0159      	lsls	r1, r3, #5
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	440b      	add	r3, r1
 800c468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c46c:	4619      	mov	r1, r3
 800c46e:	4b98      	ldr	r3, [pc, #608]	; (800c6d0 <USB_EP0StartXfer+0x2a8>)
 800c470:	4013      	ands	r3, r2
 800c472:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	693a      	ldr	r2, [r7, #16]
 800c484:	0151      	lsls	r1, r2, #5
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	440a      	add	r2, r1
 800c48a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c48e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	015a      	lsls	r2, r3, #5
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	4413      	add	r3, r2
 800c49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4a0:	691a      	ldr	r2, [r3, #16]
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	0159      	lsls	r1, r3, #5
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	440b      	add	r3, r1
 800c4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	4b88      	ldr	r3, [pc, #544]	; (800c6d4 <USB_EP0StartXfer+0x2ac>)
 800c4b2:	4013      	ands	r3, r2
 800c4b4:	610b      	str	r3, [r1, #16]
 800c4b6:	e04e      	b.n	800c556 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	015a      	lsls	r2, r3, #5
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	4413      	add	r3, r2
 800c4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c4:	691a      	ldr	r2, [r3, #16]
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	0159      	lsls	r1, r3, #5
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	440b      	add	r3, r1
 800c4ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	4b7f      	ldr	r3, [pc, #508]	; (800c6d4 <USB_EP0StartXfer+0x2ac>)
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	015a      	lsls	r2, r3, #5
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e6:	691a      	ldr	r2, [r3, #16]
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	0159      	lsls	r1, r3, #5
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	440b      	add	r3, r1
 800c4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	4b76      	ldr	r3, [pc, #472]	; (800c6d0 <USB_EP0StartXfer+0x2a8>)
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	695a      	ldr	r2, [r3, #20]
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	429a      	cmp	r2, r3
 800c506:	d903      	bls.n	800c510 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	689a      	ldr	r2, [r3, #8]
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	015a      	lsls	r2, r3, #5
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	4413      	add	r3, r2
 800c518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	693a      	ldr	r2, [r7, #16]
 800c520:	0151      	lsls	r1, r2, #5
 800c522:	697a      	ldr	r2, [r7, #20]
 800c524:	440a      	add	r2, r1
 800c526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c52a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c52e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	015a      	lsls	r2, r3, #5
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	4413      	add	r3, r2
 800c538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c53c:	691a      	ldr	r2, [r3, #16]
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c546:	6939      	ldr	r1, [r7, #16]
 800c548:	0148      	lsls	r0, r1, #5
 800c54a:	6979      	ldr	r1, [r7, #20]
 800c54c:	4401      	add	r1, r0
 800c54e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c552:	4313      	orrs	r3, r2
 800c554:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c556:	79fb      	ldrb	r3, [r7, #7]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d11e      	bne.n	800c59a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d009      	beq.n	800c578 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	015a      	lsls	r2, r3, #5
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	4413      	add	r3, r2
 800c56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c570:	461a      	mov	r2, r3
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	015a      	lsls	r2, r3, #5
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	4413      	add	r3, r2
 800c580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	0151      	lsls	r1, r2, #5
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	440a      	add	r2, r1
 800c58e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c596:	6013      	str	r3, [r2, #0]
 800c598:	e092      	b.n	800c6c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	0151      	lsls	r1, r2, #5
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	440a      	add	r2, r1
 800c5b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	695b      	ldr	r3, [r3, #20]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d07e      	beq.n	800c6c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	f003 030f 	and.w	r3, r3, #15
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5d8:	6979      	ldr	r1, [r7, #20]
 800c5da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	634b      	str	r3, [r1, #52]	; 0x34
 800c5e2:	e06d      	b.n	800c6c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	015a      	lsls	r2, r3, #5
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f0:	691a      	ldr	r2, [r3, #16]
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	0159      	lsls	r1, r3, #5
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	440b      	add	r3, r1
 800c5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5fe:	4619      	mov	r1, r3
 800c600:	4b34      	ldr	r3, [pc, #208]	; (800c6d4 <USB_EP0StartXfer+0x2ac>)
 800c602:	4013      	ands	r3, r2
 800c604:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	015a      	lsls	r2, r3, #5
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	4413      	add	r3, r2
 800c60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c612:	691a      	ldr	r2, [r3, #16]
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	0159      	lsls	r1, r3, #5
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	440b      	add	r3, r1
 800c61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c620:	4619      	mov	r1, r3
 800c622:	4b2b      	ldr	r3, [pc, #172]	; (800c6d0 <USB_EP0StartXfer+0x2a8>)
 800c624:	4013      	ands	r3, r2
 800c626:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	695b      	ldr	r3, [r3, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d003      	beq.n	800c638 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	689a      	ldr	r2, [r3, #8]
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	015a      	lsls	r2, r3, #5
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	0151      	lsls	r1, r2, #5
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	440a      	add	r2, r1
 800c64e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c656:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	015a      	lsls	r2, r3, #5
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	4413      	add	r3, r2
 800c660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c664:	691a      	ldr	r2, [r3, #16]
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c66e:	6939      	ldr	r1, [r7, #16]
 800c670:	0148      	lsls	r0, r1, #5
 800c672:	6979      	ldr	r1, [r7, #20]
 800c674:	4401      	add	r1, r0
 800c676:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c67a:	4313      	orrs	r3, r2
 800c67c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c67e:	79fb      	ldrb	r3, [r7, #7]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d10d      	bne.n	800c6a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d009      	beq.n	800c6a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	68d9      	ldr	r1, [r3, #12]
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	015a      	lsls	r2, r3, #5
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	4413      	add	r3, r2
 800c698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c69c:	460a      	mov	r2, r1
 800c69e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	015a      	lsls	r2, r3, #5
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	693a      	ldr	r2, [r7, #16]
 800c6b0:	0151      	lsls	r1, r2, #5
 800c6b2:	697a      	ldr	r2, [r7, #20]
 800c6b4:	440a      	add	r2, r1
 800c6b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c6be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	371c      	adds	r7, #28
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	e007ffff 	.word	0xe007ffff
 800c6d4:	fff80000 	.word	0xfff80000

0800c6d8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b089      	sub	sp, #36	; 0x24
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	4611      	mov	r1, r2
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	71fb      	strb	r3, [r7, #7]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c6f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d11a      	bne.n	800c734 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c6fe:	88bb      	ldrh	r3, [r7, #4]
 800c700:	3303      	adds	r3, #3
 800c702:	089b      	lsrs	r3, r3, #2
 800c704:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c706:	2300      	movs	r3, #0
 800c708:	61bb      	str	r3, [r7, #24]
 800c70a:	e00f      	b.n	800c72c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	031a      	lsls	r2, r3, #12
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	4413      	add	r3, r2
 800c714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c718:	461a      	mov	r2, r3
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	3304      	adds	r3, #4
 800c724:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	3301      	adds	r3, #1
 800c72a:	61bb      	str	r3, [r7, #24]
 800c72c:	69ba      	ldr	r2, [r7, #24]
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	429a      	cmp	r2, r3
 800c732:	d3eb      	bcc.n	800c70c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3724      	adds	r7, #36	; 0x24
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c742:	b480      	push	{r7}
 800c744:	b089      	sub	sp, #36	; 0x24
 800c746:	af00      	add	r7, sp, #0
 800c748:	60f8      	str	r0, [r7, #12]
 800c74a:	60b9      	str	r1, [r7, #8]
 800c74c:	4613      	mov	r3, r2
 800c74e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c758:	88fb      	ldrh	r3, [r7, #6]
 800c75a:	3303      	adds	r3, #3
 800c75c:	089b      	lsrs	r3, r3, #2
 800c75e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c760:	2300      	movs	r3, #0
 800c762:	61bb      	str	r3, [r7, #24]
 800c764:	e00b      	b.n	800c77e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	601a      	str	r2, [r3, #0]
    pDest++;
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	3304      	adds	r3, #4
 800c776:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	3301      	adds	r3, #1
 800c77c:	61bb      	str	r3, [r7, #24]
 800c77e:	69ba      	ldr	r2, [r7, #24]
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	429a      	cmp	r2, r3
 800c784:	d3ef      	bcc.n	800c766 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c786:	69fb      	ldr	r3, [r7, #28]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3724      	adds	r7, #36	; 0x24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	785b      	ldrb	r3, [r3, #1]
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d12c      	bne.n	800c80a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	015a      	lsls	r2, r3, #5
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	db12      	blt.n	800c7e8 <USB_EPSetStall+0x54>
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00f      	beq.n	800c7e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	015a      	lsls	r2, r3, #5
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	68ba      	ldr	r2, [r7, #8]
 800c7d8:	0151      	lsls	r1, r2, #5
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	440a      	add	r2, r1
 800c7de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c7e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	015a      	lsls	r2, r3, #5
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	0151      	lsls	r1, r2, #5
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	440a      	add	r2, r1
 800c7fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c806:	6013      	str	r3, [r2, #0]
 800c808:	e02b      	b.n	800c862 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	015a      	lsls	r2, r3, #5
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	4413      	add	r3, r2
 800c812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	db12      	blt.n	800c842 <USB_EPSetStall+0xae>
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00f      	beq.n	800c842 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	015a      	lsls	r2, r3, #5
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	4413      	add	r3, r2
 800c82a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	0151      	lsls	r1, r2, #5
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	440a      	add	r2, r1
 800c838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c83c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c840:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	015a      	lsls	r2, r3, #5
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	4413      	add	r3, r2
 800c84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68ba      	ldr	r2, [r7, #8]
 800c852:	0151      	lsls	r1, r2, #5
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	440a      	add	r2, r1
 800c858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c85c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c860:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3714      	adds	r7, #20
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	785b      	ldrb	r3, [r3, #1]
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d128      	bne.n	800c8de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	015a      	lsls	r2, r3, #5
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	4413      	add	r3, r2
 800c894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	0151      	lsls	r1, r2, #5
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	440a      	add	r2, r1
 800c8a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	78db      	ldrb	r3, [r3, #3]
 800c8b0:	2b03      	cmp	r3, #3
 800c8b2:	d003      	beq.n	800c8bc <USB_EPClearStall+0x4c>
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	78db      	ldrb	r3, [r3, #3]
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d138      	bne.n	800c92e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	015a      	lsls	r2, r3, #5
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	68ba      	ldr	r2, [r7, #8]
 800c8cc:	0151      	lsls	r1, r2, #5
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	440a      	add	r2, r1
 800c8d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8da:	6013      	str	r3, [r2, #0]
 800c8dc:	e027      	b.n	800c92e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	015a      	lsls	r2, r3, #5
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	0151      	lsls	r1, r2, #5
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	440a      	add	r2, r1
 800c8f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	78db      	ldrb	r3, [r3, #3]
 800c902:	2b03      	cmp	r3, #3
 800c904:	d003      	beq.n	800c90e <USB_EPClearStall+0x9e>
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	78db      	ldrb	r3, [r3, #3]
 800c90a:	2b02      	cmp	r3, #2
 800c90c:	d10f      	bne.n	800c92e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	015a      	lsls	r2, r3, #5
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	4413      	add	r3, r2
 800c916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	0151      	lsls	r1, r2, #5
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	440a      	add	r2, r1
 800c924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c92c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	460b      	mov	r3, r1
 800c946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c95a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c95e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	78fb      	ldrb	r3, [r7, #3]
 800c96a:	011b      	lsls	r3, r3, #4
 800c96c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c970:	68f9      	ldr	r1, [r7, #12]
 800c972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c976:	4313      	orrs	r3, r2
 800c978:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9a2:	f023 0302 	bic.w	r3, r3, #2
 800c9a6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c9a8:	2003      	movs	r0, #3
 800c9aa:	f7f4 fef3 	bl	8001794 <HAL_Delay>

  return HAL_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9d2:	f043 0302 	orr.w	r3, r3, #2
 800c9d6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c9d8:	2003      	movs	r0, #3
 800c9da:	f7f4 fedb 	bl	8001794 <HAL_Delay>

  return HAL_OK;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	695b      	ldr	r3, [r3, #20]
 800c9f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca00:	68fb      	ldr	r3, [r7, #12]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3714      	adds	r7, #20
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b085      	sub	sp, #20
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca2a:	69db      	ldr	r3, [r3, #28]
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	4013      	ands	r3, r2
 800ca30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	0c1b      	lsrs	r3, r3, #16
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3714      	adds	r7, #20
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca42:	b480      	push	{r7}
 800ca44:	b085      	sub	sp, #20
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca54:	699b      	ldr	r3, [r3, #24]
 800ca56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca5e:	69db      	ldr	r3, [r3, #28]
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	4013      	ands	r3, r2
 800ca64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	b29b      	uxth	r3, r3
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr

0800ca76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ca76:	b480      	push	{r7}
 800ca78:	b085      	sub	sp, #20
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	460b      	mov	r3, r1
 800ca80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ca86:	78fb      	ldrb	r3, [r7, #3]
 800ca88:	015a      	lsls	r2, r3, #5
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca9c:	695b      	ldr	r3, [r3, #20]
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	4013      	ands	r3, r2
 800caa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800caa4:	68bb      	ldr	r3, [r7, #8]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b087      	sub	sp, #28
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
 800caba:	460b      	mov	r3, r1
 800cabc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cad6:	78fb      	ldrb	r3, [r7, #3]
 800cad8:	f003 030f 	and.w	r3, r3, #15
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	fa22 f303 	lsr.w	r3, r2, r3
 800cae2:	01db      	lsls	r3, r3, #7
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	693a      	ldr	r2, [r7, #16]
 800cae8:	4313      	orrs	r3, r2
 800caea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800caec:	78fb      	ldrb	r3, [r7, #3]
 800caee:	015a      	lsls	r2, r3, #5
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	4413      	add	r3, r2
 800caf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	693a      	ldr	r2, [r7, #16]
 800cafc:	4013      	ands	r3, r2
 800cafe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb00:	68bb      	ldr	r3, [r7, #8]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	371c      	adds	r7, #28
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cb0e:	b480      	push	{r7}
 800cb10:	b083      	sub	sp, #12
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	695b      	ldr	r3, [r3, #20]
 800cb1a:	f003 0301 	and.w	r3, r3, #1
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
	...

0800cb2c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb46:	4619      	mov	r1, r3
 800cb48:	4b09      	ldr	r3, [pc, #36]	; (800cb70 <USB_ActivateSetup+0x44>)
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	68fa      	ldr	r2, [r7, #12]
 800cb58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr
 800cb70:	fffff800 	.word	0xfffff800

0800cb74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b087      	sub	sp, #28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	607a      	str	r2, [r7, #4]
 800cb80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	333c      	adds	r3, #60	; 0x3c
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	4a26      	ldr	r2, [pc, #152]	; (800cc2c <USB_EP0_OutStart+0xb8>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d90a      	bls.n	800cbae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cba8:	d101      	bne.n	800cbae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	e037      	b.n	800cc1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbdc:	f043 0318 	orr.w	r3, r3, #24
 800cbe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbf0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cbf4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cbf6:	7afb      	ldrb	r3, [r7, #11]
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d10f      	bne.n	800cc1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc02:	461a      	mov	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	697a      	ldr	r2, [r7, #20]
 800cc12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cc1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	371c      	adds	r7, #28
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop
 800cc2c:	4f54300a 	.word	0x4f54300a

0800cc30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	4a13      	ldr	r2, [pc, #76]	; (800cc94 <USB_CoreReset+0x64>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d901      	bls.n	800cc4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	e01b      	b.n	800cc86 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	691b      	ldr	r3, [r3, #16]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	daf2      	bge.n	800cc3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc56:	2300      	movs	r3, #0
 800cc58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	f043 0201 	orr.w	r2, r3, #1
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	60fb      	str	r3, [r7, #12]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	4a09      	ldr	r2, [pc, #36]	; (800cc94 <USB_CoreReset+0x64>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d901      	bls.n	800cc78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc74:	2303      	movs	r3, #3
 800cc76:	e006      	b.n	800cc86 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	691b      	ldr	r3, [r3, #16]
 800cc7c:	f003 0301 	and.w	r3, r3, #1
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d0f0      	beq.n	800cc66 <USB_CoreReset+0x36>

  return HAL_OK;
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3714      	adds	r7, #20
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	00030d40 	.word	0x00030d40

0800cc98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cc9c:	4904      	ldr	r1, [pc, #16]	; (800ccb0 <MX_FATFS_Init+0x18>)
 800cc9e:	4805      	ldr	r0, [pc, #20]	; (800ccb4 <MX_FATFS_Init+0x1c>)
 800cca0:	f005 f9ea 	bl	8012078 <FATFS_LinkDriver>
 800cca4:	4603      	mov	r3, r0
 800cca6:	461a      	mov	r2, r3
 800cca8:	4b03      	ldr	r3, [pc, #12]	; (800ccb8 <MX_FATFS_Init+0x20>)
 800ccaa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ccac:	bf00      	nop
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	24000a74 	.word	0x24000a74
 800ccb4:	08013464 	.word	0x08013464
 800ccb8:	24000a70 	.word	0x24000a70

0800ccbc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ccc0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ccd6:	f000 f879 	bl	800cdcc <BSP_SD_IsDetected>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d001      	beq.n	800cce4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cce0:	2302      	movs	r3, #2
 800cce2:	e012      	b.n	800cd0a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cce4:	480b      	ldr	r0, [pc, #44]	; (800cd14 <BSP_SD_Init+0x48>)
 800cce6:	f7fb f977 	bl	8007fd8 <HAL_SD_Init>
 800ccea:	4603      	mov	r3, r0
 800ccec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ccee:	79fb      	ldrb	r3, [r7, #7]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d109      	bne.n	800cd08 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ccf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ccf8:	4806      	ldr	r0, [pc, #24]	; (800cd14 <BSP_SD_Init+0x48>)
 800ccfa:	f7fc f83b 	bl	8008d74 <HAL_SD_ConfigWideBusOperation>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d001      	beq.n	800cd08 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cd08:	79fb      	ldrb	r3, [r7, #7]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	24000564 	.word	0x24000564

0800cd18 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b088      	sub	sp, #32
 800cd1c:	af02      	add	r7, sp, #8
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cd26:	2300      	movs	r3, #0
 800cd28:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	68f9      	ldr	r1, [r7, #12]
 800cd34:	4806      	ldr	r0, [pc, #24]	; (800cd50 <BSP_SD_ReadBlocks+0x38>)
 800cd36:	f7fb fa73 	bl	8008220 <HAL_SD_ReadBlocks>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d001      	beq.n	800cd44 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	24000564 	.word	0x24000564

0800cd54 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b088      	sub	sp, #32
 800cd58:	af02      	add	r7, sp, #8
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
 800cd60:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cd62:	2300      	movs	r3, #0
 800cd64:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	9300      	str	r3, [sp, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	68ba      	ldr	r2, [r7, #8]
 800cd6e:	68f9      	ldr	r1, [r7, #12]
 800cd70:	4806      	ldr	r0, [pc, #24]	; (800cd8c <BSP_SD_WriteBlocks+0x38>)
 800cd72:	f7fb fbdf 	bl	8008534 <HAL_SD_WriteBlocks>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3718      	adds	r7, #24
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	24000564 	.word	0x24000564

0800cd90 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cd94:	4805      	ldr	r0, [pc, #20]	; (800cdac <BSP_SD_GetCardState+0x1c>)
 800cd96:	f7fc f897 	bl	8008ec8 <HAL_SD_GetCardState>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b04      	cmp	r3, #4
 800cd9e:	bf14      	ite	ne
 800cda0:	2301      	movne	r3, #1
 800cda2:	2300      	moveq	r3, #0
 800cda4:	b2db      	uxtb	r3, r3
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	24000564 	.word	0x24000564

0800cdb0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	4803      	ldr	r0, [pc, #12]	; (800cdc8 <BSP_SD_GetCardInfo+0x18>)
 800cdbc:	f7fb ffae 	bl	8008d1c <HAL_SD_GetCardInfo>
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	24000564 	.word	0x24000564

0800cdcc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b083      	sub	sp, #12
 800cdd0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800cdd6:	79fb      	ldrb	r3, [r7, #7]
 800cdd8:	b2db      	uxtb	r3, r3
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr
	...

0800cde8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	4603      	mov	r3, r0
 800cdf0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cdf2:	4b0b      	ldr	r3, [pc, #44]	; (800ce20 <SD_CheckStatus+0x38>)
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cdf8:	f7ff ffca 	bl	800cd90 <BSP_SD_GetCardState>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d107      	bne.n	800ce12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ce02:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <SD_CheckStatus+0x38>)
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	f023 0301 	bic.w	r3, r3, #1
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	4b04      	ldr	r3, [pc, #16]	; (800ce20 <SD_CheckStatus+0x38>)
 800ce10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ce12:	4b03      	ldr	r3, [pc, #12]	; (800ce20 <SD_CheckStatus+0x38>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	b2db      	uxtb	r3, r3
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	2400000d 	.word	0x2400000d

0800ce24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <SD_initialize+0x38>)
 800ce30:	2201      	movs	r2, #1
 800ce32:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ce34:	f7ff ff4a 	bl	800cccc <BSP_SD_Init>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d107      	bne.n	800ce4e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ce3e:	79fb      	ldrb	r3, [r7, #7]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7ff ffd1 	bl	800cde8 <SD_CheckStatus>
 800ce46:	4603      	mov	r3, r0
 800ce48:	461a      	mov	r2, r3
 800ce4a:	4b04      	ldr	r3, [pc, #16]	; (800ce5c <SD_initialize+0x38>)
 800ce4c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ce4e:	4b03      	ldr	r3, [pc, #12]	; (800ce5c <SD_initialize+0x38>)
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	b2db      	uxtb	r3, r3
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3708      	adds	r7, #8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	2400000d 	.word	0x2400000d

0800ce60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	4603      	mov	r3, r0
 800ce68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ce6a:	79fb      	ldrb	r3, [r7, #7]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff ffbb 	bl	800cde8 <SD_CheckStatus>
 800ce72:	4603      	mov	r3, r0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60b9      	str	r1, [r7, #8]
 800ce84:	607a      	str	r2, [r7, #4]
 800ce86:	603b      	str	r3, [r7, #0]
 800ce88:	4603      	mov	r3, r0
 800ce8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ce90:	f04f 33ff 	mov.w	r3, #4294967295
 800ce94:	683a      	ldr	r2, [r7, #0]
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	68b8      	ldr	r0, [r7, #8]
 800ce9a:	f7ff ff3d 	bl	800cd18 <BSP_SD_ReadBlocks>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d107      	bne.n	800ceb4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cea4:	bf00      	nop
 800cea6:	f7ff ff73 	bl	800cd90 <BSP_SD_GetCardState>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d1fa      	bne.n	800cea6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ceb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3718      	adds	r7, #24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b086      	sub	sp, #24
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
 800ceca:	4603      	mov	r3, r0
 800cecc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ced2:	f04f 33ff 	mov.w	r3, #4294967295
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	6879      	ldr	r1, [r7, #4]
 800ceda:	68b8      	ldr	r0, [r7, #8]
 800cedc:	f7ff ff3a 	bl	800cd54 <BSP_SD_WriteBlocks>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d107      	bne.n	800cef6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cee6:	bf00      	nop
 800cee8:	f7ff ff52 	bl	800cd90 <BSP_SD_GetCardState>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1fa      	bne.n	800cee8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cef2:	2300      	movs	r3, #0
 800cef4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3718      	adds	r7, #24
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b08c      	sub	sp, #48	; 0x30
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	4603      	mov	r3, r0
 800cf08:	603a      	str	r2, [r7, #0]
 800cf0a:	71fb      	strb	r3, [r7, #7]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cf16:	4b25      	ldr	r3, [pc, #148]	; (800cfac <SD_ioctl+0xac>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <SD_ioctl+0x28>
 800cf24:	2303      	movs	r3, #3
 800cf26:	e03c      	b.n	800cfa2 <SD_ioctl+0xa2>

  switch (cmd)
 800cf28:	79bb      	ldrb	r3, [r7, #6]
 800cf2a:	2b03      	cmp	r3, #3
 800cf2c:	d834      	bhi.n	800cf98 <SD_ioctl+0x98>
 800cf2e:	a201      	add	r2, pc, #4	; (adr r2, 800cf34 <SD_ioctl+0x34>)
 800cf30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf34:	0800cf45 	.word	0x0800cf45
 800cf38:	0800cf4d 	.word	0x0800cf4d
 800cf3c:	0800cf65 	.word	0x0800cf65
 800cf40:	0800cf7f 	.word	0x0800cf7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf4a:	e028      	b.n	800cf9e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf4c:	f107 0308 	add.w	r3, r7, #8
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff ff2d 	bl	800cdb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cf56:	6a3a      	ldr	r2, [r7, #32]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf62:	e01c      	b.n	800cf9e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf64:	f107 0308 	add.w	r3, r7, #8
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7ff ff21 	bl	800cdb0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cf76:	2300      	movs	r3, #0
 800cf78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf7c:	e00f      	b.n	800cf9e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf7e:	f107 0308 	add.w	r3, r7, #8
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff ff14 	bl	800cdb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8a:	0a5a      	lsrs	r2, r3, #9
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf90:	2300      	movs	r3, #0
 800cf92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf96:	e002      	b.n	800cf9e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cf98:	2304      	movs	r3, #4
 800cf9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cf9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3730      	adds	r7, #48	; 0x30
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	2400000d 	.word	0x2400000d

0800cfb0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800cfbc:	f248 0074 	movw	r0, #32884	; 0x8074
 800cfc0:	f005 fd92 	bl	8012ae8 <malloc>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d105      	bne.n	800cfda <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cfd6:	2302      	movs	r3, #2
 800cfd8:	e034      	b.n	800d044 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	7c1b      	ldrb	r3, [r3, #16]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d115      	bne.n	800d016 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cfea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfee:	2202      	movs	r2, #2
 800cff0:	2101      	movs	r1, #1
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f005 fbdf 	bl	80127b6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d000:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d004:	2202      	movs	r2, #2
 800d006:	2181      	movs	r1, #129	; 0x81
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f005 fbd4 	bl	80127b6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2201      	movs	r2, #1
 800d012:	871a      	strh	r2, [r3, #56]	; 0x38
 800d014:	e012      	b.n	800d03c <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d016:	2340      	movs	r3, #64	; 0x40
 800d018:	2202      	movs	r2, #2
 800d01a:	2101      	movs	r1, #1
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f005 fbca 	bl	80127b6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2201      	movs	r2, #1
 800d026:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d02a:	2340      	movs	r3, #64	; 0x40
 800d02c:	2202      	movs	r2, #2
 800d02e:	2181      	movs	r1, #129	; 0x81
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f005 fbc0 	bl	80127b6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f98e 	bl	800d35e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800d042:	2300      	movs	r3, #0
}
 800d044:	4618      	mov	r0, r3
 800d046:	3710      	adds	r7, #16
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	460b      	mov	r3, r1
 800d056:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800d058:	2101      	movs	r1, #1
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f005 fbd1 	bl	8012802 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800d068:	2181      	movs	r1, #129	; 0x81
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f005 fbc9 	bl	8012802 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f9cf 	bl	800d41a <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d082:	2b00      	cmp	r3, #0
 800d084:	d009      	beq.n	800d09a <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d08c:	4618      	mov	r0, r3
 800d08e:	f005 fd33 	bl	8012af8 <free>
    pdev->pClassData = NULL;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b086      	sub	sp, #24
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0b4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d04d      	beq.n	800d166 <USBD_MSC_Setup+0xc2>
 800d0ca:	2b20      	cmp	r3, #32
 800d0cc:	f040 80c6 	bne.w	800d25c <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	785b      	ldrb	r3, [r3, #1]
 800d0d4:	2bfe      	cmp	r3, #254	; 0xfe
 800d0d6:	d002      	beq.n	800d0de <USBD_MSC_Setup+0x3a>
 800d0d8:	2bff      	cmp	r3, #255	; 0xff
 800d0da:	d024      	beq.n	800d126 <USBD_MSC_Setup+0x82>
 800d0dc:	e03b      	b.n	800d156 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	885b      	ldrh	r3, [r3, #2]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d118      	bne.n	800d118 <USBD_MSC_Setup+0x74>
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	88db      	ldrh	r3, [r3, #6]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d114      	bne.n	800d118 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	da0f      	bge.n	800d118 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	4798      	blx	r3
 800d102:	4603      	mov	r3, r0
 800d104:	461a      	mov	r2, r3
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	2201      	movs	r2, #1
 800d10e:	4619      	mov	r1, r3
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f002 fdaa 	bl	800fc6a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d116:	e025      	b.n	800d164 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f002 fd34 	bl	800fb88 <USBD_CtlError>
        ret = USBD_FAIL;
 800d120:	2303      	movs	r3, #3
 800d122:	75fb      	strb	r3, [r7, #23]
      break;
 800d124:	e01e      	b.n	800d164 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	885b      	ldrh	r3, [r3, #2]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10c      	bne.n	800d148 <USBD_MSC_Setup+0xa4>
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	88db      	ldrh	r3, [r3, #6]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d108      	bne.n	800d148 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	db03      	blt.n	800d148 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 f947 	bl	800d3d4 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d146:	e00d      	b.n	800d164 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800d148:	6839      	ldr	r1, [r7, #0]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f002 fd1c 	bl	800fb88 <USBD_CtlError>
        ret = USBD_FAIL;
 800d150:	2303      	movs	r3, #3
 800d152:	75fb      	strb	r3, [r7, #23]
      break;
 800d154:	e006      	b.n	800d164 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f002 fd15 	bl	800fb88 <USBD_CtlError>
      ret = USBD_FAIL;
 800d15e:	2303      	movs	r3, #3
 800d160:	75fb      	strb	r3, [r7, #23]
      break;
 800d162:	bf00      	nop
    }
    break;
 800d164:	e081      	b.n	800d26a <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	785b      	ldrb	r3, [r3, #1]
 800d16a:	2b0b      	cmp	r3, #11
 800d16c:	d86d      	bhi.n	800d24a <USBD_MSC_Setup+0x1a6>
 800d16e:	a201      	add	r2, pc, #4	; (adr r2, 800d174 <USBD_MSC_Setup+0xd0>)
 800d170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d174:	0800d1a5 	.word	0x0800d1a5
 800d178:	0800d21b 	.word	0x0800d21b
 800d17c:	0800d24b 	.word	0x0800d24b
 800d180:	0800d24b 	.word	0x0800d24b
 800d184:	0800d24b 	.word	0x0800d24b
 800d188:	0800d24b 	.word	0x0800d24b
 800d18c:	0800d24b 	.word	0x0800d24b
 800d190:	0800d24b 	.word	0x0800d24b
 800d194:	0800d24b 	.word	0x0800d24b
 800d198:	0800d24b 	.word	0x0800d24b
 800d19c:	0800d1cd 	.word	0x0800d1cd
 800d1a0:	0800d1f5 	.word	0x0800d1f5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1aa:	2b03      	cmp	r3, #3
 800d1ac:	d107      	bne.n	800d1be <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d1ae:	f107 030e 	add.w	r3, r7, #14
 800d1b2:	2202      	movs	r2, #2
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f002 fd57 	bl	800fc6a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d1bc:	e04d      	b.n	800d25a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f002 fce1 	bl	800fb88 <USBD_CtlError>
        ret = USBD_FAIL;
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	75fb      	strb	r3, [r7, #23]
      break;
 800d1ca:	e046      	b.n	800d25a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1d2:	2b03      	cmp	r3, #3
 800d1d4:	d107      	bne.n	800d1e6 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	3304      	adds	r3, #4
 800d1da:	2201      	movs	r2, #1
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f002 fd43 	bl	800fc6a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d1e4:	e039      	b.n	800d25a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f002 fccd 	bl	800fb88 <USBD_CtlError>
        ret = USBD_FAIL;
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	75fb      	strb	r3, [r7, #23]
      break;
 800d1f2:	e032      	b.n	800d25a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1fa:	2b03      	cmp	r3, #3
 800d1fc:	d106      	bne.n	800d20c <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	885b      	ldrh	r3, [r3, #2]
 800d202:	b2db      	uxtb	r3, r3
 800d204:	461a      	mov	r2, r3
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d20a:	e026      	b.n	800d25a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f002 fcba 	bl	800fb88 <USBD_CtlError>
        ret = USBD_FAIL;
 800d214:	2303      	movs	r3, #3
 800d216:	75fb      	strb	r3, [r7, #23]
      break;
 800d218:	e01f      	b.n	800d25a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d220:	2b03      	cmp	r3, #3
 800d222:	d119      	bne.n	800d258 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	885b      	ldrh	r3, [r3, #2]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d115      	bne.n	800d258 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	889b      	ldrh	r3, [r3, #4]
 800d230:	b2db      	uxtb	r3, r3
 800d232:	4619      	mov	r1, r3
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f005 fb03 	bl	8012840 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	889b      	ldrh	r3, [r3, #4]
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	4619      	mov	r1, r3
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 fa90 	bl	800d768 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800d248:	e006      	b.n	800d258 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800d24a:	6839      	ldr	r1, [r7, #0]
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f002 fc9b 	bl	800fb88 <USBD_CtlError>
      ret = USBD_FAIL;
 800d252:	2303      	movs	r3, #3
 800d254:	75fb      	strb	r3, [r7, #23]
      break;
 800d256:	e000      	b.n	800d25a <USBD_MSC_Setup+0x1b6>
      break;
 800d258:	bf00      	nop
    }
    break;
 800d25a:	e006      	b.n	800d26a <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800d25c:	6839      	ldr	r1, [r7, #0]
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f002 fc92 	bl	800fb88 <USBD_CtlError>
    ret = USBD_FAIL;
 800d264:	2303      	movs	r3, #3
 800d266:	75fb      	strb	r3, [r7, #23]
    break;
 800d268:	bf00      	nop
  }

  return (uint8_t)ret;
 800d26a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3718      	adds	r7, #24
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d280:	78fb      	ldrb	r3, [r7, #3]
 800d282:	4619      	mov	r1, r3
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f8d9 	bl	800d43c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	460b      	mov	r3, r1
 800d29e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d2a0:	78fb      	ldrb	r3, [r7, #3]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 f8fd 	bl	800d4a4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800d2aa:	2300      	movs	r3, #0
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2220      	movs	r2, #32
 800d2c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800d2c2:	4b03      	ldr	r3, [pc, #12]	; (800d2d0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	24000048 	.word	0x24000048

0800d2d4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2220      	movs	r2, #32
 800d2e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800d2e2:	4b03      	ldr	r3, [pc, #12]	; (800d2f0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	24000068 	.word	0x24000068

0800d2f4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2220      	movs	r2, #32
 800d300:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800d302:	4b03      	ldr	r3, [pc, #12]	; (800d310 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d304:	4618      	mov	r0, r3
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr
 800d310:	24000088 	.word	0x24000088

0800d314 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	220a      	movs	r2, #10
 800d320:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800d322:	4b03      	ldr	r3, [pc, #12]	; (800d330 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d324:	4618      	mov	r0, r3
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr
 800d330:	240000a8 	.word	0x240000a8

0800d334 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d101      	bne.n	800d348 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d344:	2303      	movs	r3, #3
 800d346:	e004      	b.n	800d352 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	683a      	ldr	r2, [r7, #0]
 800d34c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b084      	sub	sp, #16
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d36c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2200      	movs	r2, #0
 800d372:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	f248 0361 	movw	r3, #32865	; 0x8061
 800d380:	4413      	add	r3, r2
 800d382:	2200      	movs	r2, #0
 800d384:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	f248 0360 	movw	r3, #32864	; 0x8060
 800d38c:	4413      	add	r3, r2
 800d38e:	2200      	movs	r2, #0
 800d390:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	f248 0362 	movw	r3, #32866	; 0x8062
 800d398:	4413      	add	r3, r2
 800d39a:	2200      	movs	r2, #0
 800d39c:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2000      	movs	r0, #0
 800d3a8:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800d3aa:	2101      	movs	r1, #1
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f005 fa47 	bl	8012840 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800d3b2:	2181      	movs	r1, #129	; 0x81
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f005 fa43 	bl	8012840 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f248 0210 	movw	r2, #32784	; 0x8010
 800d3c0:	441a      	add	r2, r3
 800d3c2:	231f      	movs	r3, #31
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f005 fb03 	bl	80129d2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d3cc:	bf00      	nop
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3e2:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800d3f0:	2181      	movs	r1, #129	; 0x81
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f005 fa62 	bl	80128bc <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800d3f8:	2101      	movs	r1, #1
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f005 fa5e 	bl	80128bc <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f248 0210 	movw	r2, #32784	; 0x8010
 800d406:	441a      	add	r2, r3
 800d408:	231f      	movs	r3, #31
 800d40a:	2101      	movs	r1, #1
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f005 fae0 	bl	80129d2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d412:	bf00      	nop
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800d41a:	b480      	push	{r7}
 800d41c:	b085      	sub	sp, #20
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d428:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	721a      	strb	r2, [r3, #8]
}
 800d430:	bf00      	nop
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	460b      	mov	r3, r1
 800d446:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d44e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	7a1b      	ldrb	r3, [r3, #8]
 800d454:	2b02      	cmp	r3, #2
 800d456:	d004      	beq.n	800d462 <MSC_BOT_DataIn+0x26>
 800d458:	2b02      	cmp	r3, #2
 800d45a:	db1c      	blt.n	800d496 <MSC_BOT_DataIn+0x5a>
 800d45c:	2b04      	cmp	r3, #4
 800d45e:	dc1a      	bgt.n	800d496 <MSC_BOT_DataIn+0x5a>
 800d460:	e014      	b.n	800d48c <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	f248 031d 	movw	r3, #32797	; 0x801d
 800d468:	4413      	add	r3, r2
 800d46a:	7819      	ldrb	r1, [r3, #0]
 800d46c:	68fa      	ldr	r2, [r7, #12]
 800d46e:	f248 031f 	movw	r3, #32799	; 0x801f
 800d472:	4413      	add	r3, r2
 800d474:	461a      	mov	r2, r3
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f99e 	bl	800d7b8 <SCSI_ProcessCmd>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	da0b      	bge.n	800d49a <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d482:	2101      	movs	r1, #1
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f90b 	bl	800d6a0 <MSC_BOT_SendCSW>
    }
    break;
 800d48a:	e006      	b.n	800d49a <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d48c:	2100      	movs	r1, #0
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f906 	bl	800d6a0 <MSC_BOT_SendCSW>
    break;
 800d494:	e002      	b.n	800d49c <MSC_BOT_DataIn+0x60>

  default:
    break;
 800d496:	bf00      	nop
 800d498:	e000      	b.n	800d49c <MSC_BOT_DataIn+0x60>
    break;
 800d49a:	bf00      	nop
  }
}
 800d49c:	bf00      	nop
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4b6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	7a1b      	ldrb	r3, [r3, #8]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d002      	beq.n	800d4c6 <MSC_BOT_DataOut+0x22>
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d004      	beq.n	800d4ce <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800d4c4:	e018      	b.n	800d4f8 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f81a 	bl	800d500 <MSC_BOT_CBW_Decode>
      break;
 800d4cc:	e014      	b.n	800d4f8 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d4ce:	68fa      	ldr	r2, [r7, #12]
 800d4d0:	f248 031d 	movw	r3, #32797	; 0x801d
 800d4d4:	4413      	add	r3, r2
 800d4d6:	7819      	ldrb	r1, [r3, #0]
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	f248 031f 	movw	r3, #32799	; 0x801f
 800d4de:	4413      	add	r3, r2
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 f968 	bl	800d7b8 <SCSI_ProcessCmd>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	da03      	bge.n	800d4f6 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d4ee:	2101      	movs	r1, #1
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f000 f8d5 	bl	800d6a0 <MSC_BOT_SendCSW>
      break;
 800d4f6:	bf00      	nop
  }
}
 800d4f8:	bf00      	nop
 800d4fa:	3710      	adds	r7, #16
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d50e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800d510:	68fa      	ldr	r2, [r7, #12]
 800d512:	f248 0314 	movw	r3, #32788	; 0x8014
 800d516:	4413      	add	r3, r2
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	68f9      	ldr	r1, [r7, #12]
 800d51c:	f248 0334 	movw	r3, #32820	; 0x8034
 800d520:	440b      	add	r3, r1
 800d522:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	f248 0318 	movw	r3, #32792	; 0x8018
 800d52a:	4413      	add	r3, r2
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	68f9      	ldr	r1, [r7, #12]
 800d530:	f248 0338 	movw	r3, #32824	; 0x8038
 800d534:	440b      	add	r3, r1
 800d536:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d538:	2101      	movs	r1, #1
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f005 fa6a 	bl	8012a14 <USBD_LL_GetRxDataSize>
 800d540:	4603      	mov	r3, r0
 800d542:	2b1f      	cmp	r3, #31
 800d544:	d11c      	bne.n	800d580 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	f248 0310 	movw	r3, #32784	; 0x8010
 800d54c:	4413      	add	r3, r2
 800d54e:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d550:	4a38      	ldr	r2, [pc, #224]	; (800d634 <MSC_BOT_CBW_Decode+0x134>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d114      	bne.n	800d580 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	f248 031d 	movw	r3, #32797	; 0x801d
 800d55c:	4413      	add	r3, r2
 800d55e:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d560:	2b01      	cmp	r3, #1
 800d562:	d80d      	bhi.n	800d580 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	f248 031e 	movw	r3, #32798	; 0x801e
 800d56a:	4413      	add	r3, r2
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d006      	beq.n	800d580 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 800d572:	68fa      	ldr	r2, [r7, #12]
 800d574:	f248 031e 	movw	r3, #32798	; 0x801e
 800d578:	4413      	add	r3, r2
 800d57a:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d57c:	2b10      	cmp	r3, #16
 800d57e:	d910      	bls.n	800d5a2 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	f248 031d 	movw	r3, #32797	; 0x801d
 800d586:	4413      	add	r3, r2
 800d588:	7819      	ldrb	r1, [r3, #0]
 800d58a:	2320      	movs	r3, #32
 800d58c:	2205      	movs	r2, #5
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 fd36 	bl	800e000 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2202      	movs	r2, #2
 800d598:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 f8b2 	bl	800d704 <MSC_BOT_Abort>
 800d5a0:	e044      	b.n	800d62c <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	f248 031d 	movw	r3, #32797	; 0x801d
 800d5a8:	4413      	add	r3, r2
 800d5aa:	7819      	ldrb	r1, [r3, #0]
 800d5ac:	68fa      	ldr	r2, [r7, #12]
 800d5ae:	f248 031f 	movw	r3, #32799	; 0x801f
 800d5b2:	4413      	add	r3, r2
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f8fe 	bl	800d7b8 <SCSI_ProcessCmd>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	da0c      	bge.n	800d5dc <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	7a1b      	ldrb	r3, [r3, #8]
 800d5c6:	2b05      	cmp	r3, #5
 800d5c8:	d104      	bne.n	800d5d4 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d5ca:	2101      	movs	r1, #1
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f867 	bl	800d6a0 <MSC_BOT_SendCSW>
 800d5d2:	e02b      	b.n	800d62c <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 f895 	bl	800d704 <MSC_BOT_Abort>
 800d5da:	e027      	b.n	800d62c <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	7a1b      	ldrb	r3, [r3, #8]
 800d5e0:	2b02      	cmp	r3, #2
 800d5e2:	d022      	beq.n	800d62a <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d01e      	beq.n	800d62a <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d5f0:	2b03      	cmp	r3, #3
 800d5f2:	d01a      	beq.n	800d62a <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d009      	beq.n	800d610 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f103 0110 	add.w	r1, r3, #16
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	461a      	mov	r2, r3
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f815 	bl	800d638 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d60e:	e00d      	b.n	800d62c <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d104      	bne.n	800d622 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d618:	2100      	movs	r1, #0
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 f840 	bl	800d6a0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d620:	e004      	b.n	800d62c <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 f86e 	bl	800d704 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d628:	e000      	b.n	800d62c <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 800d62a:	bf00      	nop
    }
  }
}
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	43425355 	.word	0x43425355

0800d638 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b086      	sub	sp, #24
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d64a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800d64c:	697a      	ldr	r2, [r7, #20]
 800d64e:	f248 0318 	movw	r3, #32792	; 0x8018
 800d652:	4413      	add	r3, r2
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	4293      	cmp	r3, r2
 800d65a:	bf28      	it	cs
 800d65c:	4613      	movcs	r3, r2
 800d65e:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800d660:	697a      	ldr	r2, [r7, #20]
 800d662:	f248 0338 	movw	r3, #32824	; 0x8038
 800d666:	4413      	add	r3, r2
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	1ad2      	subs	r2, r2, r3
 800d66e:	6979      	ldr	r1, [r7, #20]
 800d670:	f248 0338 	movw	r3, #32824	; 0x8038
 800d674:	440b      	add	r3, r1
 800d676:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d678:	697a      	ldr	r2, [r7, #20]
 800d67a:	f248 033c 	movw	r3, #32828	; 0x803c
 800d67e:	4413      	add	r3, r2
 800d680:	2200      	movs	r2, #0
 800d682:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	2204      	movs	r2, #4
 800d688:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	68ba      	ldr	r2, [r7, #8]
 800d68e:	2181      	movs	r1, #129	; 0x81
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	f005 f97d 	bl	8012990 <USBD_LL_Transmit>
}
 800d696:	bf00      	nop
 800d698:	3718      	adds	r7, #24
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
	...

0800d6a0 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6b2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	f248 0330 	movw	r3, #32816	; 0x8030
 800d6ba:	4413      	add	r3, r2
 800d6bc:	4a10      	ldr	r2, [pc, #64]	; (800d700 <MSC_BOT_SendCSW+0x60>)
 800d6be:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	f248 033c 	movw	r3, #32828	; 0x803c
 800d6c6:	4413      	add	r3, r2
 800d6c8:	78fa      	ldrb	r2, [r7, #3]
 800d6ca:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f248 0230 	movw	r2, #32816	; 0x8030
 800d6d8:	441a      	add	r2, r3
 800d6da:	230d      	movs	r3, #13
 800d6dc:	2181      	movs	r1, #129	; 0x81
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f005 f956 	bl	8012990 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f248 0210 	movw	r2, #32784	; 0x8010
 800d6ea:	441a      	add	r2, r3
 800d6ec:	231f      	movs	r3, #31
 800d6ee:	2101      	movs	r1, #1
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f005 f96e 	bl	80129d2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d6f6:	bf00      	nop
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	53425355 	.word	0x53425355

0800d704 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d712:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	f248 031c 	movw	r3, #32796	; 0x801c
 800d71a:	4413      	add	r3, r2
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d10e      	bne.n	800d740 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	f248 0318 	movw	r3, #32792	; 0x8018
 800d728:	4413      	add	r3, r2
 800d72a:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d007      	beq.n	800d740 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d734:	2b00      	cmp	r3, #0
 800d736:	d103      	bne.n	800d740 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d738:	2101      	movs	r1, #1
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f005 f89f 	bl	801287e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d740:	2181      	movs	r1, #129	; 0x81
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f005 f89b 	bl	801287e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	7a5b      	ldrb	r3, [r3, #9]
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d107      	bne.n	800d760 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d750:	2181      	movs	r1, #129	; 0x81
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f005 f893 	bl	801287e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d758:	2101      	movs	r1, #1
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f005 f88f 	bl	801287e <USBD_LL_StallEP>
  }
}
 800d760:	bf00      	nop
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	460b      	mov	r3, r1
 800d772:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d77a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	7a5b      	ldrb	r3, [r3, #9]
 800d780:	2b02      	cmp	r3, #2
 800d782:	d108      	bne.n	800d796 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d784:	2181      	movs	r1, #129	; 0x81
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f005 f879 	bl	801287e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d78c:	2101      	movs	r1, #1
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f005 f875 	bl	801287e <USBD_LL_StallEP>
 800d794:	e00d      	b.n	800d7b2 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	da08      	bge.n	800d7b0 <MSC_BOT_CplClrFeature+0x48>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	7a5b      	ldrb	r3, [r3, #9]
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d004      	beq.n	800d7b0 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d7a6:	2101      	movs	r1, #1
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7ff ff79 	bl	800d6a0 <MSC_BOT_SendCSW>
 800d7ae:	e000      	b.n	800d7b2 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800d7b0:	bf00      	nop
  }
}
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b086      	sub	sp, #24
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	607a      	str	r2, [r7, #4]
 800d7c4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7cc:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	2b25      	cmp	r3, #37	; 0x25
 800d7d4:	d06e      	beq.n	800d8b4 <SCSI_ProcessCmd+0xfc>
 800d7d6:	2b25      	cmp	r3, #37	; 0x25
 800d7d8:	dc11      	bgt.n	800d7fe <SCSI_ProcessCmd+0x46>
 800d7da:	2b1a      	cmp	r3, #26
 800d7dc:	d04f      	beq.n	800d87e <SCSI_ProcessCmd+0xc6>
 800d7de:	2b1a      	cmp	r3, #26
 800d7e0:	dc06      	bgt.n	800d7f0 <SCSI_ProcessCmd+0x38>
 800d7e2:	2b03      	cmp	r3, #3
 800d7e4:	d027      	beq.n	800d836 <SCSI_ProcessCmd+0x7e>
 800d7e6:	2b12      	cmp	r3, #18
 800d7e8:	d02e      	beq.n	800d848 <SCSI_ProcessCmd+0x90>
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d01a      	beq.n	800d824 <SCSI_ProcessCmd+0x6c>
 800d7ee:	e0a0      	b.n	800d932 <SCSI_ProcessCmd+0x17a>
 800d7f0:	2b1e      	cmp	r3, #30
 800d7f2:	d03b      	beq.n	800d86c <SCSI_ProcessCmd+0xb4>
 800d7f4:	2b23      	cmp	r3, #35	; 0x23
 800d7f6:	d054      	beq.n	800d8a2 <SCSI_ProcessCmd+0xea>
 800d7f8:	2b1b      	cmp	r3, #27
 800d7fa:	d02e      	beq.n	800d85a <SCSI_ProcessCmd+0xa2>
 800d7fc:	e099      	b.n	800d932 <SCSI_ProcessCmd+0x17a>
 800d7fe:	2b5a      	cmp	r3, #90	; 0x5a
 800d800:	d046      	beq.n	800d890 <SCSI_ProcessCmd+0xd8>
 800d802:	2b5a      	cmp	r3, #90	; 0x5a
 800d804:	dc07      	bgt.n	800d816 <SCSI_ProcessCmd+0x5e>
 800d806:	2b2a      	cmp	r3, #42	; 0x2a
 800d808:	d078      	beq.n	800d8fc <SCSI_ProcessCmd+0x144>
 800d80a:	2b2f      	cmp	r3, #47	; 0x2f
 800d80c:	f000 8088 	beq.w	800d920 <SCSI_ProcessCmd+0x168>
 800d810:	2b28      	cmp	r3, #40	; 0x28
 800d812:	d061      	beq.n	800d8d8 <SCSI_ProcessCmd+0x120>
 800d814:	e08d      	b.n	800d932 <SCSI_ProcessCmd+0x17a>
 800d816:	2ba8      	cmp	r3, #168	; 0xa8
 800d818:	d067      	beq.n	800d8ea <SCSI_ProcessCmd+0x132>
 800d81a:	2baa      	cmp	r3, #170	; 0xaa
 800d81c:	d077      	beq.n	800d90e <SCSI_ProcessCmd+0x156>
 800d81e:	2b9e      	cmp	r3, #158	; 0x9e
 800d820:	d051      	beq.n	800d8c6 <SCSI_ProcessCmd+0x10e>
 800d822:	e086      	b.n	800d932 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800d824:	7afb      	ldrb	r3, [r7, #11]
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	4619      	mov	r1, r3
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f000 f893 	bl	800d956 <SCSI_TestUnitReady>
 800d830:	4603      	mov	r3, r0
 800d832:	75fb      	strb	r3, [r7, #23]
    break;
 800d834:	e089      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800d836:	7afb      	ldrb	r3, [r7, #11]
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	4619      	mov	r1, r3
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f000 fb47 	bl	800ded0 <SCSI_RequestSense>
 800d842:	4603      	mov	r3, r0
 800d844:	75fb      	strb	r3, [r7, #23]
    break;
 800d846:	e080      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800d848:	7afb      	ldrb	r3, [r7, #11]
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	4619      	mov	r1, r3
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f000 f8d2 	bl	800d9f8 <SCSI_Inquiry>
 800d854:	4603      	mov	r3, r0
 800d856:	75fb      	strb	r3, [r7, #23]
    break;
 800d858:	e077      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800d85a:	7afb      	ldrb	r3, [r7, #11]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	4619      	mov	r1, r3
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	f000 fc27 	bl	800e0b4 <SCSI_StartStopUnit>
 800d866:	4603      	mov	r3, r0
 800d868:	75fb      	strb	r3, [r7, #23]
    break;
 800d86a:	e06e      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800d86c:	7afb      	ldrb	r3, [r7, #11]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	4619      	mov	r1, r3
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f000 fc71 	bl	800e15a <SCSI_AllowPreventRemovable>
 800d878:	4603      	mov	r3, r0
 800d87a:	75fb      	strb	r3, [r7, #23]
    break;
 800d87c:	e065      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800d87e:	7afb      	ldrb	r3, [r7, #11]
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	4619      	mov	r1, r3
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f000 fad7 	bl	800de38 <SCSI_ModeSense6>
 800d88a:	4603      	mov	r3, r0
 800d88c:	75fb      	strb	r3, [r7, #23]
    break;
 800d88e:	e05c      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800d890:	7afb      	ldrb	r3, [r7, #11]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	4619      	mov	r1, r3
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f000 faf4 	bl	800de84 <SCSI_ModeSense10>
 800d89c:	4603      	mov	r3, r0
 800d89e:	75fb      	strb	r3, [r7, #23]
    break;
 800d8a0:	e053      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d8a2:	7afb      	ldrb	r3, [r7, #11]
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f000 fa56 	bl	800dd5a <SCSI_ReadFormatCapacity>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	75fb      	strb	r3, [r7, #23]
    break;
 800d8b2:	e04a      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800d8b4:	7afb      	ldrb	r3, [r7, #11]
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f000 f910 	bl	800dae0 <SCSI_ReadCapacity10>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	75fb      	strb	r3, [r7, #23]
    break;
 800d8c4:	e041      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800d8c6:	7afb      	ldrb	r3, [r7, #11]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f000 f98b 	bl	800dbe8 <SCSI_ReadCapacity16>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	75fb      	strb	r3, [r7, #23]
    break;
 800d8d6:	e038      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800d8d8:	7afb      	ldrb	r3, [r7, #11]
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	4619      	mov	r1, r3
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f000 fc62 	bl	800e1a8 <SCSI_Read10>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	75fb      	strb	r3, [r7, #23]
    break;
 800d8e8:	e02f      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800d8ea:	7afb      	ldrb	r3, [r7, #11]
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f000 fd0b 	bl	800e30c <SCSI_Read12>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	75fb      	strb	r3, [r7, #23]
    break;
 800d8fa:	e026      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800d8fc:	7afb      	ldrb	r3, [r7, #11]
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	4619      	mov	r1, r3
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f000 fdbe 	bl	800e484 <SCSI_Write10>
 800d908:	4603      	mov	r3, r0
 800d90a:	75fb      	strb	r3, [r7, #23]
    break;
 800d90c:	e01d      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800d90e:	7afb      	ldrb	r3, [r7, #11]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	4619      	mov	r1, r3
 800d914:	68f8      	ldr	r0, [r7, #12]
 800d916:	f000 fe8d 	bl	800e634 <SCSI_Write12>
 800d91a:	4603      	mov	r3, r0
 800d91c:	75fb      	strb	r3, [r7, #23]
    break;
 800d91e:	e014      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800d920:	7afb      	ldrb	r3, [r7, #11]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	4619      	mov	r1, r3
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f000 ff6c 	bl	800e804 <SCSI_Verify10>
 800d92c:	4603      	mov	r3, r0
 800d92e:	75fb      	strb	r3, [r7, #23]
    break;
 800d930:	e00b      	b.n	800d94a <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d932:	7af9      	ldrb	r1, [r7, #11]
 800d934:	2320      	movs	r3, #32
 800d936:	2205      	movs	r2, #5
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f000 fb61 	bl	800e000 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	2202      	movs	r2, #2
 800d942:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800d944:	23ff      	movs	r3, #255	; 0xff
 800d946:	75fb      	strb	r3, [r7, #23]
    break;
 800d948:	bf00      	nop
  }

  return ret;
 800d94a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3718      	adds	r7, #24
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b086      	sub	sp, #24
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	60f8      	str	r0, [r7, #12]
 800d95e:	460b      	mov	r3, r1
 800d960:	607a      	str	r2, [r7, #4]
 800d962:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d96a:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	f248 0318 	movw	r3, #32792	; 0x8018
 800d972:	4413      	add	r3, r2
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d00c      	beq.n	800d994 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d97a:	697a      	ldr	r2, [r7, #20]
 800d97c:	f248 031d 	movw	r3, #32797	; 0x801d
 800d980:	4413      	add	r3, r2
 800d982:	7819      	ldrb	r1, [r3, #0]
 800d984:	2320      	movs	r3, #32
 800d986:	2205      	movs	r2, #5
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f000 fb39 	bl	800e000 <SCSI_SenseCode>

    return -1;
 800d98e:	f04f 33ff 	mov.w	r3, #4294967295
 800d992:	e02c      	b.n	800d9ee <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d994:	697a      	ldr	r2, [r7, #20]
 800d996:	f248 0362 	movw	r3, #32866	; 0x8062
 800d99a:	4413      	add	r3, r2
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	2b02      	cmp	r3, #2
 800d9a0:	d10b      	bne.n	800d9ba <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d9a2:	7af9      	ldrb	r1, [r7, #11]
 800d9a4:	233a      	movs	r3, #58	; 0x3a
 800d9a6:	2202      	movs	r2, #2
 800d9a8:	68f8      	ldr	r0, [r7, #12]
 800d9aa:	f000 fb29 	bl	800e000 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	2205      	movs	r2, #5
 800d9b2:	721a      	strb	r2, [r3, #8]
    return -1;
 800d9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b8:	e019      	b.n	800d9ee <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	7afa      	ldrb	r2, [r7, #11]
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	4798      	blx	r3
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00b      	beq.n	800d9e6 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d9ce:	7af9      	ldrb	r1, [r7, #11]
 800d9d0:	233a      	movs	r3, #58	; 0x3a
 800d9d2:	2202      	movs	r2, #2
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f000 fb13 	bl	800e000 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2205      	movs	r2, #5
 800d9de:	721a      	strb	r2, [r3, #8]

    return -1;
 800d9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e4:	e003      	b.n	800d9ee <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	60da      	str	r2, [r3, #12]

  return 0;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3718      	adds	r7, #24
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
	...

0800d9f8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b088      	sub	sp, #32
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	460b      	mov	r3, r1
 800da02:	607a      	str	r2, [r7, #4]
 800da04:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da0c:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800da0e:	69ba      	ldr	r2, [r7, #24]
 800da10:	f248 0318 	movw	r3, #32792	; 0x8018
 800da14:	4413      	add	r3, r2
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d10c      	bne.n	800da36 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800da1c:	69ba      	ldr	r2, [r7, #24]
 800da1e:	f248 031d 	movw	r3, #32797	; 0x801d
 800da22:	4413      	add	r3, r2
 800da24:	7819      	ldrb	r1, [r3, #0]
 800da26:	2320      	movs	r3, #32
 800da28:	2205      	movs	r2, #5
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f000 fae8 	bl	800e000 <SCSI_SenseCode>
    return -1;
 800da30:	f04f 33ff 	mov.w	r3, #4294967295
 800da34:	e04c      	b.n	800dad0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	3301      	adds	r3, #1
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	f003 0301 	and.w	r3, r3, #1
 800da40:	2b00      	cmp	r3, #0
 800da42:	d022      	beq.n	800da8a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	3302      	adds	r3, #2
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d105      	bne.n	800da5a <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800da4e:	2206      	movs	r2, #6
 800da50:	4921      	ldr	r1, [pc, #132]	; (800dad8 <SCSI_Inquiry+0xe0>)
 800da52:	69b8      	ldr	r0, [r7, #24]
 800da54:	f001 f862 	bl	800eb1c <SCSI_UpdateBotData>
 800da58:	e039      	b.n	800dace <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3302      	adds	r3, #2
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	2b80      	cmp	r3, #128	; 0x80
 800da62:	d105      	bne.n	800da70 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800da64:	2208      	movs	r2, #8
 800da66:	491d      	ldr	r1, [pc, #116]	; (800dadc <SCSI_Inquiry+0xe4>)
 800da68:	69b8      	ldr	r0, [r7, #24]
 800da6a:	f001 f857 	bl	800eb1c <SCSI_UpdateBotData>
 800da6e:	e02e      	b.n	800dace <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800da70:	69ba      	ldr	r2, [r7, #24]
 800da72:	f248 031d 	movw	r3, #32797	; 0x801d
 800da76:	4413      	add	r3, r2
 800da78:	7819      	ldrb	r1, [r3, #0]
 800da7a:	2324      	movs	r3, #36	; 0x24
 800da7c:	2205      	movs	r2, #5
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f000 fabe 	bl	800e000 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800da84:	f04f 33ff 	mov.w	r3, #4294967295
 800da88:	e022      	b.n	800dad0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da90:	69d9      	ldr	r1, [r3, #28]
 800da92:	7afa      	ldrb	r2, [r7, #11]
 800da94:	4613      	mov	r3, r2
 800da96:	00db      	lsls	r3, r3, #3
 800da98:	4413      	add	r3, r2
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	440b      	add	r3, r1
 800da9e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	3304      	adds	r3, #4
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	3305      	adds	r3, #5
 800daaa:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	3304      	adds	r3, #4
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	8bfa      	ldrh	r2, [r7, #30]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d303      	bcc.n	800dac2 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	3304      	adds	r3, #4
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800dac2:	8bfb      	ldrh	r3, [r7, #30]
 800dac4:	461a      	mov	r2, r3
 800dac6:	6979      	ldr	r1, [r7, #20]
 800dac8:	69b8      	ldr	r0, [r7, #24]
 800daca:	f001 f827 	bl	800eb1c <SCSI_UpdateBotData>
  }

  return 0;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3720      	adds	r7, #32
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	240000b4 	.word	0x240000b4
 800dadc:	240000bc 	.word	0x240000bc

0800dae0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dae0:	b590      	push	{r4, r7, lr}
 800dae2:	b087      	sub	sp, #28
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	460b      	mov	r3, r1
 800daea:	607a      	str	r2, [r7, #4]
 800daec:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daf4:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dafc:	685c      	ldr	r4, [r3, #4]
 800dafe:	697a      	ldr	r2, [r7, #20]
 800db00:	f248 0368 	movw	r3, #32872	; 0x8068
 800db04:	4413      	add	r3, r2
 800db06:	6979      	ldr	r1, [r7, #20]
 800db08:	f248 0264 	movw	r2, #32868	; 0x8064
 800db0c:	440a      	add	r2, r1
 800db0e:	7af8      	ldrb	r0, [r7, #11]
 800db10:	4619      	mov	r1, r3
 800db12:	47a0      	blx	r4
 800db14:	4603      	mov	r3, r0
 800db16:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800db18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d106      	bne.n	800db2e <SCSI_ReadCapacity10+0x4e>
 800db20:	697a      	ldr	r2, [r7, #20]
 800db22:	f248 0362 	movw	r3, #32866	; 0x8062
 800db26:	4413      	add	r3, r2
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	2b02      	cmp	r3, #2
 800db2c:	d108      	bne.n	800db40 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800db2e:	7af9      	ldrb	r1, [r7, #11]
 800db30:	233a      	movs	r3, #58	; 0x3a
 800db32:	2202      	movs	r2, #2
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f000 fa63 	bl	800e000 <SCSI_SenseCode>
    return -1;
 800db3a:	f04f 33ff 	mov.w	r3, #4294967295
 800db3e:	e04f      	b.n	800dbe0 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800db40:	697a      	ldr	r2, [r7, #20]
 800db42:	f248 0368 	movw	r3, #32872	; 0x8068
 800db46:	4413      	add	r3, r2
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	3b01      	subs	r3, #1
 800db4c:	0e1b      	lsrs	r3, r3, #24
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800db54:	697a      	ldr	r2, [r7, #20]
 800db56:	f248 0368 	movw	r3, #32872	; 0x8068
 800db5a:	4413      	add	r3, r2
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	3b01      	subs	r3, #1
 800db60:	0c1b      	lsrs	r3, r3, #16
 800db62:	b2da      	uxtb	r2, r3
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800db68:	697a      	ldr	r2, [r7, #20]
 800db6a:	f248 0368 	movw	r3, #32872	; 0x8068
 800db6e:	4413      	add	r3, r2
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	3b01      	subs	r3, #1
 800db74:	0a1b      	lsrs	r3, r3, #8
 800db76:	b2da      	uxtb	r2, r3
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	f248 0368 	movw	r3, #32872	; 0x8068
 800db82:	4413      	add	r3, r2
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	b2db      	uxtb	r3, r3
 800db88:	3b01      	subs	r3, #1
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	f248 0364 	movw	r3, #32868	; 0x8064
 800db96:	4413      	add	r3, r2
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	161b      	asrs	r3, r3, #24
 800db9c:	b2da      	uxtb	r2, r3
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800dba2:	697a      	ldr	r2, [r7, #20]
 800dba4:	f248 0364 	movw	r3, #32868	; 0x8064
 800dba8:	4413      	add	r3, r2
 800dbaa:	881b      	ldrh	r3, [r3, #0]
 800dbac:	141b      	asrs	r3, r3, #16
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800dbb4:	697a      	ldr	r2, [r7, #20]
 800dbb6:	f248 0364 	movw	r3, #32868	; 0x8064
 800dbba:	4413      	add	r3, r2
 800dbbc:	881b      	ldrh	r3, [r3, #0]
 800dbbe:	0a1b      	lsrs	r3, r3, #8
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800dbc8:	697a      	ldr	r2, [r7, #20]
 800dbca:	f248 0364 	movw	r3, #32868	; 0x8064
 800dbce:	4413      	add	r3, r2
 800dbd0:	881b      	ldrh	r3, [r3, #0]
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	2208      	movs	r2, #8
 800dbdc:	60da      	str	r2, [r3, #12]

  return 0;
 800dbde:	2300      	movs	r3, #0

}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	371c      	adds	r7, #28
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd90      	pop	{r4, r7, pc}

0800dbe8 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dbe8:	b590      	push	{r4, r7, lr}
 800dbea:	b089      	sub	sp, #36	; 0x24
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	607a      	str	r2, [r7, #4]
 800dbf4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbfc:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc04:	685c      	ldr	r4, [r3, #4]
 800dc06:	69ba      	ldr	r2, [r7, #24]
 800dc08:	f248 0368 	movw	r3, #32872	; 0x8068
 800dc0c:	4413      	add	r3, r2
 800dc0e:	69b9      	ldr	r1, [r7, #24]
 800dc10:	f248 0264 	movw	r2, #32868	; 0x8064
 800dc14:	440a      	add	r2, r1
 800dc16:	7af8      	ldrb	r0, [r7, #11]
 800dc18:	4619      	mov	r1, r3
 800dc1a:	47a0      	blx	r4
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dc20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d106      	bne.n	800dc36 <SCSI_ReadCapacity16+0x4e>
 800dc28:	69ba      	ldr	r2, [r7, #24]
 800dc2a:	f248 0362 	movw	r3, #32866	; 0x8062
 800dc2e:	4413      	add	r3, r2
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d108      	bne.n	800dc48 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dc36:	7af9      	ldrb	r1, [r7, #11]
 800dc38:	233a      	movs	r3, #58	; 0x3a
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f000 f9df 	bl	800e000 <SCSI_SenseCode>
    return -1;
 800dc42:	f04f 33ff 	mov.w	r3, #4294967295
 800dc46:	e084      	b.n	800dd52 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	330a      	adds	r3, #10
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	330b      	adds	r3, #11
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc58:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	330c      	adds	r3, #12
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800dc62:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	320d      	adds	r2, #13
 800dc68:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800dc6a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800dc70:	2300      	movs	r3, #0
 800dc72:	77fb      	strb	r3, [r7, #31]
 800dc74:	e007      	b.n	800dc86 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 800dc76:	7ffb      	ldrb	r3, [r7, #31]
 800dc78:	69ba      	ldr	r2, [r7, #24]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800dc80:	7ffb      	ldrb	r3, [r7, #31]
 800dc82:	3301      	adds	r3, #1
 800dc84:	77fb      	strb	r3, [r7, #31]
 800dc86:	7ffa      	ldrb	r2, [r7, #31]
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d3f2      	bcc.n	800dc76 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800dc90:	69ba      	ldr	r2, [r7, #24]
 800dc92:	f248 0368 	movw	r3, #32872	; 0x8068
 800dc96:	4413      	add	r3, r2
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	0e1b      	lsrs	r3, r3, #24
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800dca4:	69ba      	ldr	r2, [r7, #24]
 800dca6:	f248 0368 	movw	r3, #32872	; 0x8068
 800dcaa:	4413      	add	r3, r2
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	0c1b      	lsrs	r3, r3, #16
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800dcb8:	69ba      	ldr	r2, [r7, #24]
 800dcba:	f248 0368 	movw	r3, #32872	; 0x8068
 800dcbe:	4413      	add	r3, r2
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	0a1b      	lsrs	r3, r3, #8
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800dccc:	69ba      	ldr	r2, [r7, #24]
 800dcce:	f248 0368 	movw	r3, #32872	; 0x8068
 800dcd2:	4413      	add	r3, r2
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800dce0:	69ba      	ldr	r2, [r7, #24]
 800dce2:	f248 0364 	movw	r3, #32868	; 0x8064
 800dce6:	4413      	add	r3, r2
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	161b      	asrs	r3, r3, #24
 800dcec:	b2da      	uxtb	r2, r3
 800dcee:	69bb      	ldr	r3, [r7, #24]
 800dcf0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800dcf2:	69ba      	ldr	r2, [r7, #24]
 800dcf4:	f248 0364 	movw	r3, #32868	; 0x8064
 800dcf8:	4413      	add	r3, r2
 800dcfa:	881b      	ldrh	r3, [r3, #0]
 800dcfc:	141b      	asrs	r3, r3, #16
 800dcfe:	b2da      	uxtb	r2, r3
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800dd04:	69ba      	ldr	r2, [r7, #24]
 800dd06:	f248 0364 	movw	r3, #32868	; 0x8064
 800dd0a:	4413      	add	r3, r2
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	0a1b      	lsrs	r3, r3, #8
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800dd18:	69ba      	ldr	r2, [r7, #24]
 800dd1a:	f248 0364 	movw	r3, #32868	; 0x8064
 800dd1e:	4413      	add	r3, r2
 800dd20:	881b      	ldrh	r3, [r3, #0]
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	330a      	adds	r3, #10
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	330b      	adds	r3, #11
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dd38:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	330c      	adds	r3, #12
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800dd42:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	320d      	adds	r2, #13
 800dd48:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800dd4a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	60da      	str	r2, [r3, #12]

  return 0;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3724      	adds	r7, #36	; 0x24
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd90      	pop	{r4, r7, pc}

0800dd5a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b088      	sub	sp, #32
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	60f8      	str	r0, [r7, #12]
 800dd62:	460b      	mov	r3, r1
 800dd64:	607a      	str	r2, [r7, #4]
 800dd66:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd6e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	f107 0214 	add.w	r2, r7, #20
 800dd7c:	f107 0110 	add.w	r1, r7, #16
 800dd80:	7af8      	ldrb	r0, [r7, #11]
 800dd82:	4798      	blx	r3
 800dd84:	4603      	mov	r3, r0
 800dd86:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dd88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d106      	bne.n	800dd9e <SCSI_ReadFormatCapacity+0x44>
 800dd90:	69ba      	ldr	r2, [r7, #24]
 800dd92:	f248 0362 	movw	r3, #32866	; 0x8062
 800dd96:	4413      	add	r3, r2
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d108      	bne.n	800ddb0 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dd9e:	7af9      	ldrb	r1, [r7, #11]
 800dda0:	233a      	movs	r3, #58	; 0x3a
 800dda2:	2202      	movs	r2, #2
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f000 f92b 	bl	800e000 <SCSI_SenseCode>
    return -1;
 800ddaa:	f04f 33ff 	mov.w	r3, #4294967295
 800ddae:	e03e      	b.n	800de2e <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	83fb      	strh	r3, [r7, #30]
 800ddb4:	e007      	b.n	800ddc6 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 800ddb6:	8bfb      	ldrh	r3, [r7, #30]
 800ddb8:	69ba      	ldr	r2, [r7, #24]
 800ddba:	4413      	add	r3, r2
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800ddc0:	8bfb      	ldrh	r3, [r7, #30]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	83fb      	strh	r3, [r7, #30]
 800ddc6:	8bfb      	ldrh	r3, [r7, #30]
 800ddc8:	2b0b      	cmp	r3, #11
 800ddca:	d9f4      	bls.n	800ddb6 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	2208      	movs	r2, #8
 800ddd0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	3b01      	subs	r3, #1
 800ddd6:	0e1b      	lsrs	r3, r3, #24
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	3b01      	subs	r3, #1
 800dde2:	0c1b      	lsrs	r3, r3, #16
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	3b01      	subs	r3, #1
 800ddee:	0a1b      	lsrs	r3, r3, #8
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	b2da      	uxtb	r2, r3
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	2202      	movs	r2, #2
 800de06:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800de08:	8abb      	ldrh	r3, [r7, #20]
 800de0a:	141b      	asrs	r3, r3, #16
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800de12:	8abb      	ldrh	r3, [r7, #20]
 800de14:	0a1b      	lsrs	r3, r3, #8
 800de16:	b29b      	uxth	r3, r3
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800de1e:	8abb      	ldrh	r3, [r7, #20]
 800de20:	b2da      	uxtb	r2, r3
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	220c      	movs	r2, #12
 800de2a:	60da      	str	r2, [r3, #12]

  return 0;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3720      	adds	r7, #32
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
	...

0800de38 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b086      	sub	sp, #24
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	460b      	mov	r3, r1
 800de42:	607a      	str	r2, [r7, #4]
 800de44:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de4c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800de4e:	2317      	movs	r3, #23
 800de50:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	3304      	adds	r3, #4
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	b29b      	uxth	r3, r3
 800de5a:	8afa      	ldrh	r2, [r7, #22]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d303      	bcc.n	800de68 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	3304      	adds	r3, #4
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800de68:	8afb      	ldrh	r3, [r7, #22]
 800de6a:	461a      	mov	r2, r3
 800de6c:	4904      	ldr	r1, [pc, #16]	; (800de80 <SCSI_ModeSense6+0x48>)
 800de6e:	6938      	ldr	r0, [r7, #16]
 800de70:	f000 fe54 	bl	800eb1c <SCSI_UpdateBotData>

  return 0;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	240000c4 	.word	0x240000c4

0800de84 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b086      	sub	sp, #24
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	460b      	mov	r3, r1
 800de8e:	607a      	str	r2, [r7, #4]
 800de90:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de98:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800de9a:	231b      	movs	r3, #27
 800de9c:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	3308      	adds	r3, #8
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	8afa      	ldrh	r2, [r7, #22]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d303      	bcc.n	800deb4 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	3308      	adds	r3, #8
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800deb4:	8afb      	ldrh	r3, [r7, #22]
 800deb6:	461a      	mov	r2, r3
 800deb8:	4904      	ldr	r1, [pc, #16]	; (800decc <SCSI_ModeSense10+0x48>)
 800deba:	6938      	ldr	r0, [r7, #16]
 800debc:	f000 fe2e 	bl	800eb1c <SCSI_UpdateBotData>

  return 0;
 800dec0:	2300      	movs	r3, #0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3718      	adds	r7, #24
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	240000dc 	.word	0x240000dc

0800ded0 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	460b      	mov	r3, r1
 800deda:	607a      	str	r2, [r7, #4]
 800dedc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dee4:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800dee6:	693a      	ldr	r2, [r7, #16]
 800dee8:	f248 0318 	movw	r3, #32792	; 0x8018
 800deec:	4413      	add	r3, r2
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10c      	bne.n	800df0e <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800def4:	693a      	ldr	r2, [r7, #16]
 800def6:	f248 031d 	movw	r3, #32797	; 0x801d
 800defa:	4413      	add	r3, r2
 800defc:	7819      	ldrb	r1, [r3, #0]
 800defe:	2320      	movs	r3, #32
 800df00:	2205      	movs	r2, #5
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f000 f87c 	bl	800e000 <SCSI_SenseCode>
    return -1;
 800df08:	f04f 33ff 	mov.w	r3, #4294967295
 800df0c:	e074      	b.n	800dff8 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800df0e:	2300      	movs	r3, #0
 800df10:	75fb      	strb	r3, [r7, #23]
 800df12:	e007      	b.n	800df24 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 800df14:	7dfb      	ldrb	r3, [r7, #23]
 800df16:	693a      	ldr	r2, [r7, #16]
 800df18:	4413      	add	r3, r2
 800df1a:	2200      	movs	r2, #0
 800df1c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800df1e:	7dfb      	ldrb	r3, [r7, #23]
 800df20:	3301      	adds	r3, #1
 800df22:	75fb      	strb	r3, [r7, #23]
 800df24:	7dfb      	ldrb	r3, [r7, #23]
 800df26:	2b11      	cmp	r3, #17
 800df28:	d9f4      	bls.n	800df14 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	2270      	movs	r2, #112	; 0x70
 800df2e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	220c      	movs	r2, #12
 800df34:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800df36:	693a      	ldr	r2, [r7, #16]
 800df38:	f248 0360 	movw	r3, #32864	; 0x8060
 800df3c:	4413      	add	r3, r2
 800df3e:	781a      	ldrb	r2, [r3, #0]
 800df40:	6939      	ldr	r1, [r7, #16]
 800df42:	f248 0361 	movw	r3, #32865	; 0x8061
 800df46:	440b      	add	r3, r1
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d045      	beq.n	800dfda <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800df4e:	693a      	ldr	r2, [r7, #16]
 800df50:	f248 0360 	movw	r3, #32864	; 0x8060
 800df54:	4413      	add	r3, r2
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	4619      	mov	r1, r3
 800df5a:	693a      	ldr	r2, [r7, #16]
 800df5c:	f241 0308 	movw	r3, #4104	; 0x1008
 800df60:	440b      	add	r3, r1
 800df62:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800df6a:	693a      	ldr	r2, [r7, #16]
 800df6c:	f248 0360 	movw	r3, #32864	; 0x8060
 800df70:	4413      	add	r3, r2
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	4619      	mov	r1, r3
 800df76:	693a      	ldr	r2, [r7, #16]
 800df78:	f241 0308 	movw	r3, #4104	; 0x1008
 800df7c:	440b      	add	r3, r1
 800df7e:	00db      	lsls	r3, r3, #3
 800df80:	4413      	add	r3, r2
 800df82:	791a      	ldrb	r2, [r3, #4]
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800df88:	693a      	ldr	r2, [r7, #16]
 800df8a:	f248 0360 	movw	r3, #32864	; 0x8060
 800df8e:	4413      	add	r3, r2
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	4619      	mov	r1, r3
 800df94:	693a      	ldr	r2, [r7, #16]
 800df96:	f241 0308 	movw	r3, #4104	; 0x1008
 800df9a:	440b      	add	r3, r1
 800df9c:	00db      	lsls	r3, r3, #3
 800df9e:	4413      	add	r3, r2
 800dfa0:	795a      	ldrb	r2, [r3, #5]
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800dfa6:	693a      	ldr	r2, [r7, #16]
 800dfa8:	f248 0360 	movw	r3, #32864	; 0x8060
 800dfac:	4413      	add	r3, r2
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	b2d9      	uxtb	r1, r3
 800dfb4:	693a      	ldr	r2, [r7, #16]
 800dfb6:	f248 0360 	movw	r3, #32864	; 0x8060
 800dfba:	4413      	add	r3, r2
 800dfbc:	460a      	mov	r2, r1
 800dfbe:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	f248 0360 	movw	r3, #32864	; 0x8060
 800dfc6:	4413      	add	r3, r2
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	2b04      	cmp	r3, #4
 800dfcc:	d105      	bne.n	800dfda <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 800dfce:	693a      	ldr	r2, [r7, #16]
 800dfd0:	f248 0360 	movw	r3, #32864	; 0x8060
 800dfd4:	4413      	add	r3, r2
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	2212      	movs	r2, #18
 800dfde:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	2b12      	cmp	r3, #18
 800dfe8:	d805      	bhi.n	800dff6 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	3304      	adds	r3, #4
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	461a      	mov	r2, r3
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3718      	adds	r7, #24
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800e000:	b480      	push	{r7}
 800e002:	b085      	sub	sp, #20
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	4608      	mov	r0, r1
 800e00a:	4611      	mov	r1, r2
 800e00c:	461a      	mov	r2, r3
 800e00e:	4603      	mov	r3, r0
 800e010:	70fb      	strb	r3, [r7, #3]
 800e012:	460b      	mov	r3, r1
 800e014:	70bb      	strb	r3, [r7, #2]
 800e016:	4613      	mov	r3, r2
 800e018:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e020:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	f248 0361 	movw	r3, #32865	; 0x8061
 800e028:	4413      	add	r3, r2
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	4619      	mov	r1, r3
 800e02e:	68fa      	ldr	r2, [r7, #12]
 800e030:	f241 0308 	movw	r3, #4104	; 0x1008
 800e034:	440b      	add	r3, r1
 800e036:	78b9      	ldrb	r1, [r7, #2]
 800e038:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	f248 0361 	movw	r3, #32865	; 0x8061
 800e042:	4413      	add	r3, r2
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	4619      	mov	r1, r3
 800e048:	68fa      	ldr	r2, [r7, #12]
 800e04a:	f241 0308 	movw	r3, #4104	; 0x1008
 800e04e:	440b      	add	r3, r1
 800e050:	00db      	lsls	r3, r3, #3
 800e052:	4413      	add	r3, r2
 800e054:	787a      	ldrb	r2, [r7, #1]
 800e056:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800e058:	68fa      	ldr	r2, [r7, #12]
 800e05a:	f248 0361 	movw	r3, #32865	; 0x8061
 800e05e:	4413      	add	r3, r2
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	4619      	mov	r1, r3
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	f241 0308 	movw	r3, #4104	; 0x1008
 800e06a:	440b      	add	r3, r1
 800e06c:	00db      	lsls	r3, r3, #3
 800e06e:	4413      	add	r3, r2
 800e070:	2200      	movs	r2, #0
 800e072:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	f248 0361 	movw	r3, #32865	; 0x8061
 800e07a:	4413      	add	r3, r2
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	3301      	adds	r3, #1
 800e080:	b2d9      	uxtb	r1, r3
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	f248 0361 	movw	r3, #32865	; 0x8061
 800e088:	4413      	add	r3, r2
 800e08a:	460a      	mov	r2, r1
 800e08c:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	f248 0361 	movw	r3, #32865	; 0x8061
 800e094:	4413      	add	r3, r2
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	2b04      	cmp	r3, #4
 800e09a:	d105      	bne.n	800e0a8 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 800e09c:	68fa      	ldr	r2, [r7, #12]
 800e09e:	f248 0361 	movw	r3, #32865	; 0x8061
 800e0a2:	4413      	add	r3, r2
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	701a      	strb	r2, [r3, #0]
  }
}
 800e0a8:	bf00      	nop
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	607a      	str	r2, [r7, #4]
 800e0c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0c8:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800e0ca:	697a      	ldr	r2, [r7, #20]
 800e0cc:	f248 0362 	movw	r3, #32866	; 0x8062
 800e0d0:	4413      	add	r3, r2
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d10f      	bne.n	800e0f8 <SCSI_StartStopUnit+0x44>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	3304      	adds	r3, #4
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	f003 0303 	and.w	r3, r3, #3
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	d108      	bne.n	800e0f8 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e0e6:	7af9      	ldrb	r1, [r7, #11]
 800e0e8:	2324      	movs	r3, #36	; 0x24
 800e0ea:	2205      	movs	r2, #5
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f7ff ff87 	bl	800e000 <SCSI_SenseCode>

    return -1;
 800e0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f6:	e02c      	b.n	800e152 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	3304      	adds	r3, #4
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	f003 0303 	and.w	r3, r3, #3
 800e102:	2b01      	cmp	r3, #1
 800e104:	d106      	bne.n	800e114 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e106:	697a      	ldr	r2, [r7, #20]
 800e108:	f248 0362 	movw	r3, #32866	; 0x8062
 800e10c:	4413      	add	r3, r2
 800e10e:	2200      	movs	r2, #0
 800e110:	701a      	strb	r2, [r3, #0]
 800e112:	e01a      	b.n	800e14a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	3304      	adds	r3, #4
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	f003 0303 	and.w	r3, r3, #3
 800e11e:	2b02      	cmp	r3, #2
 800e120:	d106      	bne.n	800e130 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800e122:	697a      	ldr	r2, [r7, #20]
 800e124:	f248 0362 	movw	r3, #32866	; 0x8062
 800e128:	4413      	add	r3, r2
 800e12a:	2202      	movs	r2, #2
 800e12c:	701a      	strb	r2, [r3, #0]
 800e12e:	e00c      	b.n	800e14a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	3304      	adds	r3, #4
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	f003 0303 	and.w	r3, r3, #3
 800e13a:	2b03      	cmp	r3, #3
 800e13c:	d105      	bne.n	800e14a <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e13e:	697a      	ldr	r2, [r7, #20]
 800e140:	f248 0362 	movw	r3, #32866	; 0x8062
 800e144:	4413      	add	r3, r2
 800e146:	2200      	movs	r2, #0
 800e148:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	2200      	movs	r2, #0
 800e14e:	60da      	str	r2, [r3, #12]

  return 0;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3718      	adds	r7, #24
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e15a:	b480      	push	{r7}
 800e15c:	b087      	sub	sp, #28
 800e15e:	af00      	add	r7, sp, #0
 800e160:	60f8      	str	r0, [r7, #12]
 800e162:	460b      	mov	r3, r1
 800e164:	607a      	str	r2, [r7, #4]
 800e166:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e16e:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	3304      	adds	r3, #4
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d106      	bne.n	800e188 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e17a:	697a      	ldr	r2, [r7, #20]
 800e17c:	f248 0362 	movw	r3, #32866	; 0x8062
 800e180:	4413      	add	r3, r2
 800e182:	2200      	movs	r2, #0
 800e184:	701a      	strb	r2, [r3, #0]
 800e186:	e005      	b.n	800e194 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800e188:	697a      	ldr	r2, [r7, #20]
 800e18a:	f248 0362 	movw	r3, #32866	; 0x8062
 800e18e:	4413      	add	r3, r2
 800e190:	2201      	movs	r2, #1
 800e192:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	2200      	movs	r2, #0
 800e198:	60da      	str	r2, [r3, #12]

  return 0;
 800e19a:	2300      	movs	r3, #0
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	371c      	adds	r7, #28
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	607a      	str	r2, [r7, #4]
 800e1b4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1bc:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	7a1b      	ldrb	r3, [r3, #8]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	f040 8094 	bne.w	800e2f0 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	f248 031c 	movw	r3, #32796	; 0x801c
 800e1ce:	4413      	add	r3, r2
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	b25b      	sxtb	r3, r3
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	db0c      	blt.n	800e1f2 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e1d8:	697a      	ldr	r2, [r7, #20]
 800e1da:	f248 031d 	movw	r3, #32797	; 0x801d
 800e1de:	4413      	add	r3, r2
 800e1e0:	7819      	ldrb	r1, [r3, #0]
 800e1e2:	2320      	movs	r3, #32
 800e1e4:	2205      	movs	r2, #5
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f7ff ff0a 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f0:	e088      	b.n	800e304 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e1f2:	697a      	ldr	r2, [r7, #20]
 800e1f4:	f248 0362 	movw	r3, #32866	; 0x8062
 800e1f8:	4413      	add	r3, r2
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d108      	bne.n	800e212 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e200:	7af9      	ldrb	r1, [r7, #11]
 800e202:	233a      	movs	r3, #58	; 0x3a
 800e204:	2202      	movs	r2, #2
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f7ff fefa 	bl	800e000 <SCSI_SenseCode>

      return -1;
 800e20c:	f04f 33ff 	mov.w	r3, #4294967295
 800e210:	e078      	b.n	800e304 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	7afa      	ldrb	r2, [r7, #11]
 800e21c:	4610      	mov	r0, r2
 800e21e:	4798      	blx	r3
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d008      	beq.n	800e238 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e226:	7af9      	ldrb	r1, [r7, #11]
 800e228:	233a      	movs	r3, #58	; 0x3a
 800e22a:	2202      	movs	r2, #2
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f7ff fee7 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e232:	f04f 33ff 	mov.w	r3, #4294967295
 800e236:	e065      	b.n	800e304 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	3302      	adds	r3, #2
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	3303      	adds	r3, #3
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e248:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	3304      	adds	r3, #4
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e252:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	3205      	adds	r2, #5
 800e258:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e25a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e25c:	6979      	ldr	r1, [r7, #20]
 800e25e:	f248 036c 	movw	r3, #32876	; 0x806c
 800e262:	440b      	add	r3, r1
 800e264:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	3307      	adds	r3, #7
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	021b      	lsls	r3, r3, #8
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	3208      	adds	r2, #8
 800e272:	7812      	ldrb	r2, [r2, #0]
 800e274:	431a      	orrs	r2, r3
 800e276:	6979      	ldr	r1, [r7, #20]
 800e278:	f248 0370 	movw	r3, #32880	; 0x8070
 800e27c:	440b      	add	r3, r1
 800e27e:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e280:	697a      	ldr	r2, [r7, #20]
 800e282:	f248 036c 	movw	r3, #32876	; 0x806c
 800e286:	4413      	add	r3, r2
 800e288:	6818      	ldr	r0, [r3, #0]
 800e28a:	697a      	ldr	r2, [r7, #20]
 800e28c:	f248 0370 	movw	r3, #32880	; 0x8070
 800e290:	4413      	add	r3, r2
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	7af9      	ldrb	r1, [r7, #11]
 800e296:	4602      	mov	r2, r0
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 faeb 	bl	800e874 <SCSI_CheckAddressRange>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	da02      	bge.n	800e2aa <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a8:	e02c      	b.n	800e304 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e2aa:	697a      	ldr	r2, [r7, #20]
 800e2ac:	f248 0318 	movw	r3, #32792	; 0x8018
 800e2b0:	4413      	add	r3, r2
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	6979      	ldr	r1, [r7, #20]
 800e2b6:	f248 0370 	movw	r3, #32880	; 0x8070
 800e2ba:	440b      	add	r3, r1
 800e2bc:	6819      	ldr	r1, [r3, #0]
 800e2be:	6978      	ldr	r0, [r7, #20]
 800e2c0:	f248 0364 	movw	r3, #32868	; 0x8064
 800e2c4:	4403      	add	r3, r0
 800e2c6:	881b      	ldrh	r3, [r3, #0]
 800e2c8:	fb03 f301 	mul.w	r3, r3, r1
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d00c      	beq.n	800e2ea <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e2d0:	697a      	ldr	r2, [r7, #20]
 800e2d2:	f248 031d 	movw	r3, #32797	; 0x801d
 800e2d6:	4413      	add	r3, r2
 800e2d8:	7819      	ldrb	r1, [r3, #0]
 800e2da:	2320      	movs	r3, #32
 800e2dc:	2205      	movs	r2, #5
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f7ff fe8e 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2e8:	e00c      	b.n	800e304 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	2202      	movs	r2, #2
 800e2ee:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e2f6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e2f8:	7afb      	ldrb	r3, [r7, #11]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f000 fadd 	bl	800e8bc <SCSI_ProcessRead>
 800e302:	4603      	mov	r3, r0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3718      	adds	r7, #24
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b086      	sub	sp, #24
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	460b      	mov	r3, r1
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e320:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	7a1b      	ldrb	r3, [r3, #8]
 800e326:	2b00      	cmp	r3, #0
 800e328:	f040 809e 	bne.w	800e468 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	f248 031c 	movw	r3, #32796	; 0x801c
 800e332:	4413      	add	r3, r2
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	b25b      	sxtb	r3, r3
 800e338:	2b00      	cmp	r3, #0
 800e33a:	db0c      	blt.n	800e356 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e33c:	697a      	ldr	r2, [r7, #20]
 800e33e:	f248 031d 	movw	r3, #32797	; 0x801d
 800e342:	4413      	add	r3, r2
 800e344:	7819      	ldrb	r1, [r3, #0]
 800e346:	2320      	movs	r3, #32
 800e348:	2205      	movs	r2, #5
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	f7ff fe58 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e350:	f04f 33ff 	mov.w	r3, #4294967295
 800e354:	e092      	b.n	800e47c <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e356:	697a      	ldr	r2, [r7, #20]
 800e358:	f248 0362 	movw	r3, #32866	; 0x8062
 800e35c:	4413      	add	r3, r2
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	2b02      	cmp	r3, #2
 800e362:	d108      	bne.n	800e376 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e364:	7af9      	ldrb	r1, [r7, #11]
 800e366:	233a      	movs	r3, #58	; 0x3a
 800e368:	2202      	movs	r2, #2
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f7ff fe48 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e370:	f04f 33ff 	mov.w	r3, #4294967295
 800e374:	e082      	b.n	800e47c <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	7afa      	ldrb	r2, [r7, #11]
 800e380:	4610      	mov	r0, r2
 800e382:	4798      	blx	r3
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d008      	beq.n	800e39c <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e38a:	7af9      	ldrb	r1, [r7, #11]
 800e38c:	233a      	movs	r3, #58	; 0x3a
 800e38e:	2202      	movs	r2, #2
 800e390:	68f8      	ldr	r0, [r7, #12]
 800e392:	f7ff fe35 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e396:	f04f 33ff 	mov.w	r3, #4294967295
 800e39a:	e06f      	b.n	800e47c <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	3302      	adds	r3, #2
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	3303      	adds	r3, #3
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e3ac:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	3304      	adds	r3, #4
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e3b6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	3205      	adds	r2, #5
 800e3bc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e3be:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e3c0:	6979      	ldr	r1, [r7, #20]
 800e3c2:	f248 036c 	movw	r3, #32876	; 0x806c
 800e3c6:	440b      	add	r3, r1
 800e3c8:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	3306      	adds	r3, #6
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	3307      	adds	r3, #7
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e3da:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	3308      	adds	r3, #8
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e3e4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	3209      	adds	r2, #9
 800e3ea:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e3ec:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e3ee:	6979      	ldr	r1, [r7, #20]
 800e3f0:	f248 0370 	movw	r3, #32880	; 0x8070
 800e3f4:	440b      	add	r3, r1
 800e3f6:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e3f8:	697a      	ldr	r2, [r7, #20]
 800e3fa:	f248 036c 	movw	r3, #32876	; 0x806c
 800e3fe:	4413      	add	r3, r2
 800e400:	6818      	ldr	r0, [r3, #0]
 800e402:	697a      	ldr	r2, [r7, #20]
 800e404:	f248 0370 	movw	r3, #32880	; 0x8070
 800e408:	4413      	add	r3, r2
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	7af9      	ldrb	r1, [r7, #11]
 800e40e:	4602      	mov	r2, r0
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f000 fa2f 	bl	800e874 <SCSI_CheckAddressRange>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	da02      	bge.n	800e422 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e41c:	f04f 33ff 	mov.w	r3, #4294967295
 800e420:	e02c      	b.n	800e47c <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e422:	697a      	ldr	r2, [r7, #20]
 800e424:	f248 0318 	movw	r3, #32792	; 0x8018
 800e428:	4413      	add	r3, r2
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	6979      	ldr	r1, [r7, #20]
 800e42e:	f248 0370 	movw	r3, #32880	; 0x8070
 800e432:	440b      	add	r3, r1
 800e434:	6819      	ldr	r1, [r3, #0]
 800e436:	6978      	ldr	r0, [r7, #20]
 800e438:	f248 0364 	movw	r3, #32868	; 0x8064
 800e43c:	4403      	add	r3, r0
 800e43e:	881b      	ldrh	r3, [r3, #0]
 800e440:	fb03 f301 	mul.w	r3, r3, r1
 800e444:	429a      	cmp	r2, r3
 800e446:	d00c      	beq.n	800e462 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e448:	697a      	ldr	r2, [r7, #20]
 800e44a:	f248 031d 	movw	r3, #32797	; 0x801d
 800e44e:	4413      	add	r3, r2
 800e450:	7819      	ldrb	r1, [r3, #0]
 800e452:	2320      	movs	r3, #32
 800e454:	2205      	movs	r2, #5
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f7ff fdd2 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e45c:	f04f 33ff 	mov.w	r3, #4294967295
 800e460:	e00c      	b.n	800e47c <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	2202      	movs	r2, #2
 800e466:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e46e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e470:	7afb      	ldrb	r3, [r7, #11]
 800e472:	4619      	mov	r1, r3
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f000 fa21 	bl	800e8bc <SCSI_ProcessRead>
 800e47a:	4603      	mov	r3, r0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3718      	adds	r7, #24
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b086      	sub	sp, #24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	460b      	mov	r3, r1
 800e48e:	607a      	str	r2, [r7, #4]
 800e490:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e498:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	7a1b      	ldrb	r3, [r3, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f040 80be 	bne.w	800e620 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e4a4:	697a      	ldr	r2, [r7, #20]
 800e4a6:	f248 0318 	movw	r3, #32792	; 0x8018
 800e4aa:	4413      	add	r3, r2
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d10c      	bne.n	800e4cc <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e4b2:	697a      	ldr	r2, [r7, #20]
 800e4b4:	f248 031d 	movw	r3, #32797	; 0x801d
 800e4b8:	4413      	add	r3, r2
 800e4ba:	7819      	ldrb	r1, [r3, #0]
 800e4bc:	2320      	movs	r3, #32
 800e4be:	2205      	movs	r2, #5
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	f7ff fd9d 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ca:	e0af      	b.n	800e62c <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e4cc:	697a      	ldr	r2, [r7, #20]
 800e4ce:	f248 031c 	movw	r3, #32796	; 0x801c
 800e4d2:	4413      	add	r3, r2
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	b25b      	sxtb	r3, r3
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	da0c      	bge.n	800e4f6 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e4dc:	697a      	ldr	r2, [r7, #20]
 800e4de:	f248 031d 	movw	r3, #32797	; 0x801d
 800e4e2:	4413      	add	r3, r2
 800e4e4:	7819      	ldrb	r1, [r3, #0]
 800e4e6:	2320      	movs	r3, #32
 800e4e8:	2205      	movs	r2, #5
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7ff fd88 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4f4:	e09a      	b.n	800e62c <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	7afa      	ldrb	r2, [r7, #11]
 800e500:	4610      	mov	r0, r2
 800e502:	4798      	blx	r3
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	d008      	beq.n	800e51c <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e50a:	7af9      	ldrb	r1, [r7, #11]
 800e50c:	233a      	movs	r3, #58	; 0x3a
 800e50e:	2202      	movs	r2, #2
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f7ff fd75 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e516:	f04f 33ff 	mov.w	r3, #4294967295
 800e51a:	e087      	b.n	800e62c <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	7afa      	ldrb	r2, [r7, #11]
 800e526:	4610      	mov	r0, r2
 800e528:	4798      	blx	r3
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d008      	beq.n	800e542 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e530:	7af9      	ldrb	r1, [r7, #11]
 800e532:	2327      	movs	r3, #39	; 0x27
 800e534:	2202      	movs	r2, #2
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f7ff fd62 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e53c:	f04f 33ff 	mov.w	r3, #4294967295
 800e540:	e074      	b.n	800e62c <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3302      	adds	r3, #2
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	3303      	adds	r3, #3
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e552:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	3304      	adds	r3, #4
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e55c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	3205      	adds	r2, #5
 800e562:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e564:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e566:	6979      	ldr	r1, [r7, #20]
 800e568:	f248 036c 	movw	r3, #32876	; 0x806c
 800e56c:	440b      	add	r3, r1
 800e56e:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	3307      	adds	r3, #7
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	3208      	adds	r2, #8
 800e57c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e57e:	431a      	orrs	r2, r3
 800e580:	6979      	ldr	r1, [r7, #20]
 800e582:	f248 0370 	movw	r3, #32880	; 0x8070
 800e586:	440b      	add	r3, r1
 800e588:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e58a:	697a      	ldr	r2, [r7, #20]
 800e58c:	f248 036c 	movw	r3, #32876	; 0x806c
 800e590:	4413      	add	r3, r2
 800e592:	6818      	ldr	r0, [r3, #0]
 800e594:	697a      	ldr	r2, [r7, #20]
 800e596:	f248 0370 	movw	r3, #32880	; 0x8070
 800e59a:	4413      	add	r3, r2
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	7af9      	ldrb	r1, [r7, #11]
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f000 f966 	bl	800e874 <SCSI_CheckAddressRange>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	da02      	bge.n	800e5b4 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b2:	e03b      	b.n	800e62c <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e5b4:	697a      	ldr	r2, [r7, #20]
 800e5b6:	f248 0370 	movw	r3, #32880	; 0x8070
 800e5ba:	4413      	add	r3, r2
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	6979      	ldr	r1, [r7, #20]
 800e5c0:	f248 0364 	movw	r3, #32868	; 0x8064
 800e5c4:	440b      	add	r3, r1
 800e5c6:	881b      	ldrh	r3, [r3, #0]
 800e5c8:	fb03 f302 	mul.w	r3, r3, r2
 800e5cc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e5ce:	697a      	ldr	r2, [r7, #20]
 800e5d0:	f248 0318 	movw	r3, #32792	; 0x8018
 800e5d4:	4413      	add	r3, r2
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	693a      	ldr	r2, [r7, #16]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d00c      	beq.n	800e5f8 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e5de:	697a      	ldr	r2, [r7, #20]
 800e5e0:	f248 031d 	movw	r3, #32797	; 0x801d
 800e5e4:	4413      	add	r3, r2
 800e5e6:	7819      	ldrb	r1, [r3, #0]
 800e5e8:	2320      	movs	r3, #32
 800e5ea:	2205      	movs	r2, #5
 800e5ec:	68f8      	ldr	r0, [r7, #12]
 800e5ee:	f7ff fd07 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e5f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f6:	e019      	b.n	800e62c <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5fe:	bf28      	it	cs
 800e600:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e604:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	2201      	movs	r2, #1
 800e60a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	f103 0210 	add.w	r2, r3, #16
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	2101      	movs	r1, #1
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f004 f9db 	bl	80129d2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e61c:	2300      	movs	r3, #0
 800e61e:	e005      	b.n	800e62c <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 800e620:	7afb      	ldrb	r3, [r7, #11]
 800e622:	4619      	mov	r1, r3
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f000 f9d7 	bl	800e9d8 <SCSI_ProcessWrite>
 800e62a:	4603      	mov	r3, r0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3718      	adds	r7, #24
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	460b      	mov	r3, r1
 800e63e:	607a      	str	r2, [r7, #4]
 800e640:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e648:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	7a1b      	ldrb	r3, [r3, #8]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f040 80ce 	bne.w	800e7f0 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e654:	697a      	ldr	r2, [r7, #20]
 800e656:	f248 0318 	movw	r3, #32792	; 0x8018
 800e65a:	4413      	add	r3, r2
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d10c      	bne.n	800e67c <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e662:	697a      	ldr	r2, [r7, #20]
 800e664:	f248 031d 	movw	r3, #32797	; 0x801d
 800e668:	4413      	add	r3, r2
 800e66a:	7819      	ldrb	r1, [r3, #0]
 800e66c:	2320      	movs	r3, #32
 800e66e:	2205      	movs	r2, #5
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f7ff fcc5 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e676:	f04f 33ff 	mov.w	r3, #4294967295
 800e67a:	e0bf      	b.n	800e7fc <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e67c:	697a      	ldr	r2, [r7, #20]
 800e67e:	f248 031c 	movw	r3, #32796	; 0x801c
 800e682:	4413      	add	r3, r2
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	b25b      	sxtb	r3, r3
 800e688:	2b00      	cmp	r3, #0
 800e68a:	da0c      	bge.n	800e6a6 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e68c:	697a      	ldr	r2, [r7, #20]
 800e68e:	f248 031d 	movw	r3, #32797	; 0x801d
 800e692:	4413      	add	r3, r2
 800e694:	7819      	ldrb	r1, [r3, #0]
 800e696:	2320      	movs	r3, #32
 800e698:	2205      	movs	r2, #5
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f7ff fcb0 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a4:	e0aa      	b.n	800e7fc <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6ac:	689b      	ldr	r3, [r3, #8]
 800e6ae:	7afa      	ldrb	r2, [r7, #11]
 800e6b0:	4610      	mov	r0, r2
 800e6b2:	4798      	blx	r3
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d00b      	beq.n	800e6d2 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e6ba:	7af9      	ldrb	r1, [r7, #11]
 800e6bc:	233a      	movs	r3, #58	; 0x3a
 800e6be:	2202      	movs	r2, #2
 800e6c0:	68f8      	ldr	r0, [r7, #12]
 800e6c2:	f7ff fc9d 	bl	800e000 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	2205      	movs	r2, #5
 800e6ca:	721a      	strb	r2, [r3, #8]
      return -1;
 800e6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d0:	e094      	b.n	800e7fc <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	7afa      	ldrb	r2, [r7, #11]
 800e6dc:	4610      	mov	r0, r2
 800e6de:	4798      	blx	r3
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00b      	beq.n	800e6fe <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e6e6:	7af9      	ldrb	r1, [r7, #11]
 800e6e8:	2327      	movs	r3, #39	; 0x27
 800e6ea:	2202      	movs	r2, #2
 800e6ec:	68f8      	ldr	r0, [r7, #12]
 800e6ee:	f7ff fc87 	bl	800e000 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	2205      	movs	r2, #5
 800e6f6:	721a      	strb	r2, [r3, #8]
      return -1;
 800e6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6fc:	e07e      	b.n	800e7fc <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	3302      	adds	r3, #2
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	3303      	adds	r3, #3
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e70e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	3304      	adds	r3, #4
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e718:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	3205      	adds	r2, #5
 800e71e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e720:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e722:	6979      	ldr	r1, [r7, #20]
 800e724:	f248 036c 	movw	r3, #32876	; 0x806c
 800e728:	440b      	add	r3, r1
 800e72a:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	3306      	adds	r3, #6
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	3307      	adds	r3, #7
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e73c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	3308      	adds	r3, #8
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e746:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	3209      	adds	r2, #9
 800e74c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e74e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e750:	6979      	ldr	r1, [r7, #20]
 800e752:	f248 0370 	movw	r3, #32880	; 0x8070
 800e756:	440b      	add	r3, r1
 800e758:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e75a:	697a      	ldr	r2, [r7, #20]
 800e75c:	f248 036c 	movw	r3, #32876	; 0x806c
 800e760:	4413      	add	r3, r2
 800e762:	6818      	ldr	r0, [r3, #0]
 800e764:	697a      	ldr	r2, [r7, #20]
 800e766:	f248 0370 	movw	r3, #32880	; 0x8070
 800e76a:	4413      	add	r3, r2
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	7af9      	ldrb	r1, [r7, #11]
 800e770:	4602      	mov	r2, r0
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	f000 f87e 	bl	800e874 <SCSI_CheckAddressRange>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	da02      	bge.n	800e784 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e77e:	f04f 33ff 	mov.w	r3, #4294967295
 800e782:	e03b      	b.n	800e7fc <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e784:	697a      	ldr	r2, [r7, #20]
 800e786:	f248 0370 	movw	r3, #32880	; 0x8070
 800e78a:	4413      	add	r3, r2
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	6979      	ldr	r1, [r7, #20]
 800e790:	f248 0364 	movw	r3, #32868	; 0x8064
 800e794:	440b      	add	r3, r1
 800e796:	881b      	ldrh	r3, [r3, #0]
 800e798:	fb03 f302 	mul.w	r3, r3, r2
 800e79c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e79e:	697a      	ldr	r2, [r7, #20]
 800e7a0:	f248 0318 	movw	r3, #32792	; 0x8018
 800e7a4:	4413      	add	r3, r2
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	693a      	ldr	r2, [r7, #16]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d00c      	beq.n	800e7c8 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e7ae:	697a      	ldr	r2, [r7, #20]
 800e7b0:	f248 031d 	movw	r3, #32797	; 0x801d
 800e7b4:	4413      	add	r3, r2
 800e7b6:	7819      	ldrb	r1, [r3, #0]
 800e7b8:	2320      	movs	r3, #32
 800e7ba:	2205      	movs	r2, #5
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f7ff fc1f 	bl	800e000 <SCSI_SenseCode>
      return -1;
 800e7c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7c6:	e019      	b.n	800e7fc <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7ce:	bf28      	it	cs
 800e7d0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e7d4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	2201      	movs	r2, #1
 800e7da:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	f103 0210 	add.w	r2, r3, #16
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	2101      	movs	r1, #1
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f004 f8f3 	bl	80129d2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	e005      	b.n	800e7fc <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 800e7f0:	7afb      	ldrb	r3, [r7, #11]
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f000 f8ef 	bl	800e9d8 <SCSI_ProcessWrite>
 800e7fa:	4603      	mov	r3, r0
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3718      	adds	r7, #24
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b086      	sub	sp, #24
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	460b      	mov	r3, r1
 800e80e:	607a      	str	r2, [r7, #4]
 800e810:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e818:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	3301      	adds	r3, #1
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	f003 0302 	and.w	r3, r3, #2
 800e824:	2b00      	cmp	r3, #0
 800e826:	d008      	beq.n	800e83a <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e828:	7af9      	ldrb	r1, [r7, #11]
 800e82a:	2324      	movs	r3, #36	; 0x24
 800e82c:	2205      	movs	r2, #5
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f7ff fbe6 	bl	800e000 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e834:	f04f 33ff 	mov.w	r3, #4294967295
 800e838:	e018      	b.n	800e86c <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800e83a:	697a      	ldr	r2, [r7, #20]
 800e83c:	f248 036c 	movw	r3, #32876	; 0x806c
 800e840:	4413      	add	r3, r2
 800e842:	6818      	ldr	r0, [r3, #0]
 800e844:	697a      	ldr	r2, [r7, #20]
 800e846:	f248 0370 	movw	r3, #32880	; 0x8070
 800e84a:	4413      	add	r3, r2
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	7af9      	ldrb	r1, [r7, #11]
 800e850:	4602      	mov	r2, r0
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	f000 f80e 	bl	800e874 <SCSI_CheckAddressRange>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	da02      	bge.n	800e864 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 800e85e:	f04f 33ff 	mov.w	r3, #4294967295
 800e862:	e003      	b.n	800e86c <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	2200      	movs	r2, #0
 800e868:	60da      	str	r2, [r3, #12]

  return 0;
 800e86a:	2300      	movs	r3, #0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3718      	adds	r7, #24
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	607a      	str	r2, [r7, #4]
 800e87e:	603b      	str	r3, [r7, #0]
 800e880:	460b      	mov	r3, r1
 800e882:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e88a:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	441a      	add	r2, r3
 800e892:	6979      	ldr	r1, [r7, #20]
 800e894:	f248 0368 	movw	r3, #32872	; 0x8068
 800e898:	440b      	add	r3, r1
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d908      	bls.n	800e8b2 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e8a0:	7af9      	ldrb	r1, [r7, #11]
 800e8a2:	2321      	movs	r3, #33	; 0x21
 800e8a4:	2205      	movs	r2, #5
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	f7ff fbaa 	bl	800e000 <SCSI_SenseCode>
    return -1;
 800e8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b0:	e000      	b.n	800e8b4 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3718      	adds	r7, #24
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e8bc:	b5b0      	push	{r4, r5, r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8ce:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	f248 0370 	movw	r3, #32880	; 0x8070
 800e8d6:	4413      	add	r3, r2
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	68f9      	ldr	r1, [r7, #12]
 800e8dc:	f248 0364 	movw	r3, #32868	; 0x8064
 800e8e0:	440b      	add	r3, r1
 800e8e2:	881b      	ldrh	r3, [r3, #0]
 800e8e4:	fb03 f302 	mul.w	r3, r3, r2
 800e8e8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8f0:	bf28      	it	cs
 800e8f2:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e8f6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8fe:	691c      	ldr	r4, [r3, #16]
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f103 0110 	add.w	r1, r3, #16
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	f248 036c 	movw	r3, #32876	; 0x806c
 800e90c:	4413      	add	r3, r2
 800e90e:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	f248 0364 	movw	r3, #32868	; 0x8064
 800e916:	4413      	add	r3, r2
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	461a      	mov	r2, r3
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e922:	b29b      	uxth	r3, r3
 800e924:	78f8      	ldrb	r0, [r7, #3]
 800e926:	462a      	mov	r2, r5
 800e928:	47a0      	blx	r4
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	da08      	bge.n	800e942 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e930:	78f9      	ldrb	r1, [r7, #3]
 800e932:	2311      	movs	r3, #17
 800e934:	2204      	movs	r2, #4
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f7ff fb62 	bl	800e000 <SCSI_SenseCode>
    return -1;
 800e93c:	f04f 33ff 	mov.w	r3, #4294967295
 800e940:	e046      	b.n	800e9d0 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f103 0210 	add.w	r2, r3, #16
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	2181      	movs	r1, #129	; 0x81
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f004 f81f 	bl	8012990 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	f248 036c 	movw	r3, #32876	; 0x806c
 800e958:	4413      	add	r3, r2
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	68f9      	ldr	r1, [r7, #12]
 800e95e:	f248 0364 	movw	r3, #32868	; 0x8064
 800e962:	440b      	add	r3, r1
 800e964:	881b      	ldrh	r3, [r3, #0]
 800e966:	4619      	mov	r1, r3
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e96e:	441a      	add	r2, r3
 800e970:	68f9      	ldr	r1, [r7, #12]
 800e972:	f248 036c 	movw	r3, #32876	; 0x806c
 800e976:	440b      	add	r3, r1
 800e978:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	f248 0370 	movw	r3, #32880	; 0x8070
 800e980:	4413      	add	r3, r2
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	68f9      	ldr	r1, [r7, #12]
 800e986:	f248 0364 	movw	r3, #32868	; 0x8064
 800e98a:	440b      	add	r3, r1
 800e98c:	881b      	ldrh	r3, [r3, #0]
 800e98e:	4619      	mov	r1, r3
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	fbb3 f3f1 	udiv	r3, r3, r1
 800e996:	1ad2      	subs	r2, r2, r3
 800e998:	68f9      	ldr	r1, [r7, #12]
 800e99a:	f248 0370 	movw	r3, #32880	; 0x8070
 800e99e:	440b      	add	r3, r1
 800e9a0:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	f248 0338 	movw	r3, #32824	; 0x8038
 800e9a8:	4413      	add	r3, r2
 800e9aa:	681a      	ldr	r2, [r3, #0]
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	1ad2      	subs	r2, r2, r3
 800e9b0:	68f9      	ldr	r1, [r7, #12]
 800e9b2:	f248 0338 	movw	r3, #32824	; 0x8038
 800e9b6:	440b      	add	r3, r1
 800e9b8:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	f248 0370 	movw	r3, #32880	; 0x8070
 800e9c0:	4413      	add	r3, r2
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d102      	bne.n	800e9ce <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2203      	movs	r2, #3
 800e9cc:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bdb0      	pop	{r4, r5, r7, pc}

0800e9d8 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e9d8:	b5b0      	push	{r4, r5, r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9ea:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	f248 0370 	movw	r3, #32880	; 0x8070
 800e9f2:	4413      	add	r3, r2
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	68f9      	ldr	r1, [r7, #12]
 800e9f8:	f248 0364 	movw	r3, #32868	; 0x8064
 800e9fc:	440b      	add	r3, r1
 800e9fe:	881b      	ldrh	r3, [r3, #0]
 800ea00:	fb03 f302 	mul.w	r3, r3, r2
 800ea04:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea0c:	bf28      	it	cs
 800ea0e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800ea12:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea1a:	695c      	ldr	r4, [r3, #20]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f103 0110 	add.w	r1, r3, #16
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	f248 036c 	movw	r3, #32876	; 0x806c
 800ea28:	4413      	add	r3, r2
 800ea2a:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	f248 0364 	movw	r3, #32868	; 0x8064
 800ea32:	4413      	add	r3, r2
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	461a      	mov	r2, r3
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	78f8      	ldrb	r0, [r7, #3]
 800ea42:	462a      	mov	r2, r5
 800ea44:	47a0      	blx	r4
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	da08      	bge.n	800ea5e <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ea4c:	78f9      	ldrb	r1, [r7, #3]
 800ea4e:	2303      	movs	r3, #3
 800ea50:	2204      	movs	r2, #4
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f7ff fad4 	bl	800e000 <SCSI_SenseCode>
    return -1;
 800ea58:	f04f 33ff 	mov.w	r3, #4294967295
 800ea5c:	e05a      	b.n	800eb14 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	f248 036c 	movw	r3, #32876	; 0x806c
 800ea64:	4413      	add	r3, r2
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	68f9      	ldr	r1, [r7, #12]
 800ea6a:	f248 0364 	movw	r3, #32868	; 0x8064
 800ea6e:	440b      	add	r3, r1
 800ea70:	881b      	ldrh	r3, [r3, #0]
 800ea72:	4619      	mov	r1, r3
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea7a:	441a      	add	r2, r3
 800ea7c:	68f9      	ldr	r1, [r7, #12]
 800ea7e:	f248 036c 	movw	r3, #32876	; 0x806c
 800ea82:	440b      	add	r3, r1
 800ea84:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ea86:	68fa      	ldr	r2, [r7, #12]
 800ea88:	f248 0370 	movw	r3, #32880	; 0x8070
 800ea8c:	4413      	add	r3, r2
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	68f9      	ldr	r1, [r7, #12]
 800ea92:	f248 0364 	movw	r3, #32868	; 0x8064
 800ea96:	440b      	add	r3, r1
 800ea98:	881b      	ldrh	r3, [r3, #0]
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800eaa2:	1ad2      	subs	r2, r2, r3
 800eaa4:	68f9      	ldr	r1, [r7, #12]
 800eaa6:	f248 0370 	movw	r3, #32880	; 0x8070
 800eaaa:	440b      	add	r3, r1
 800eaac:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800eaae:	68fa      	ldr	r2, [r7, #12]
 800eab0:	f248 0338 	movw	r3, #32824	; 0x8038
 800eab4:	4413      	add	r3, r2
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	1ad2      	subs	r2, r2, r3
 800eabc:	68f9      	ldr	r1, [r7, #12]
 800eabe:	f248 0338 	movw	r3, #32824	; 0x8038
 800eac2:	440b      	add	r3, r1
 800eac4:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800eac6:	68fa      	ldr	r2, [r7, #12]
 800eac8:	f248 0370 	movw	r3, #32880	; 0x8070
 800eacc:	4413      	add	r3, r2
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d104      	bne.n	800eade <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ead4:	2100      	movs	r1, #0
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f7fe fde2 	bl	800d6a0 <MSC_BOT_SendCSW>
 800eadc:	e019      	b.n	800eb12 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800eade:	68fa      	ldr	r2, [r7, #12]
 800eae0:	f248 0370 	movw	r3, #32880	; 0x8070
 800eae4:	4413      	add	r3, r2
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	68f9      	ldr	r1, [r7, #12]
 800eaea:	f248 0364 	movw	r3, #32868	; 0x8064
 800eaee:	440b      	add	r3, r1
 800eaf0:	881b      	ldrh	r3, [r3, #0]
 800eaf2:	fb03 f302 	mul.w	r3, r3, r2
 800eaf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eafa:	bf28      	it	cs
 800eafc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800eb00:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f103 0210 	add.w	r2, r3, #16
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	2101      	movs	r1, #1
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f003 ff60 	bl	80129d2 <USBD_LL_PrepareReceive>
  }

  return 0;
 800eb12:	2300      	movs	r3, #0
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3710      	adds	r7, #16
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bdb0      	pop	{r4, r5, r7, pc}

0800eb1c <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b087      	sub	sp, #28
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	4613      	mov	r3, r2
 800eb28:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800eb2a:	88fb      	ldrh	r3, [r7, #6]
 800eb2c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800eb2e:	8afa      	ldrh	r2, [r7, #22]
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800eb34:	e00b      	b.n	800eb4e <SCSI_UpdateBotData+0x32>
  {
    len--;
 800eb36:	8afb      	ldrh	r3, [r7, #22]
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800eb3c:	8afb      	ldrh	r3, [r7, #22]
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	441a      	add	r2, r3
 800eb42:	8afb      	ldrh	r3, [r7, #22]
 800eb44:	7811      	ldrb	r1, [r2, #0]
 800eb46:	68fa      	ldr	r2, [r7, #12]
 800eb48:	4413      	add	r3, r2
 800eb4a:	460a      	mov	r2, r1
 800eb4c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800eb4e:	8afb      	ldrh	r3, [r7, #22]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d1f0      	bne.n	800eb36 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	371c      	adds	r7, #28
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr

0800eb62 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b086      	sub	sp, #24
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	60f8      	str	r0, [r7, #12]
 800eb6a:	60b9      	str	r1, [r7, #8]
 800eb6c:	4613      	mov	r3, r2
 800eb6e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d101      	bne.n	800eb7a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800eb76:	2303      	movs	r3, #3
 800eb78:	e025      	b.n	800ebc6 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d003      	beq.n	800eb8c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d003      	beq.n	800eb9e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d003      	beq.n	800ebac <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	79fa      	ldrb	r2, [r7, #7]
 800ebb8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ebba:	68f8      	ldr	r0, [r7, #12]
 800ebbc:	f003 fd90 	bl	80126e0 <USBD_LL_Init>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ebc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3718      	adds	r7, #24
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b084      	sub	sp, #16
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
 800ebd6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d101      	bne.n	800ebe6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	e010      	b.n	800ec08 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	683a      	ldr	r2, [r7, #0]
 800ebea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf6:	f107 020e 	add.w	r2, r7, #14
 800ebfa:	4610      	mov	r0, r2
 800ebfc:	4798      	blx	r3
 800ebfe:	4602      	mov	r2, r0
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f003 fdb1 	bl	8012780 <USBD_LL_Start>
 800ec1e:	4603      	mov	r3, r0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec30:	2300      	movs	r3, #0
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	370c      	adds	r7, #12
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr

0800ec3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b084      	sub	sp, #16
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	460b      	mov	r3, r1
 800ec48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ec4a:	2303      	movs	r3, #3
 800ec4c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d009      	beq.n	800ec6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	78fa      	ldrb	r2, [r7, #3]
 800ec62:	4611      	mov	r1, r2
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	4798      	blx	r3
 800ec68:	4603      	mov	r3, r0
 800ec6a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ec6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b082      	sub	sp, #8
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
 800ec7e:	460b      	mov	r3, r1
 800ec80:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d007      	beq.n	800ec9c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	78fa      	ldrb	r2, [r7, #3]
 800ec96:	4611      	mov	r1, r2
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	4798      	blx	r3
  }

  return USBD_OK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b084      	sub	sp, #16
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
 800ecae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f000 ff2b 	bl	800fb14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800eccc:	461a      	mov	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ecda:	f003 031f 	and.w	r3, r3, #31
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d00e      	beq.n	800ed00 <USBD_LL_SetupStage+0x5a>
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d302      	bcc.n	800ecec <USBD_LL_SetupStage+0x46>
 800ece6:	2b02      	cmp	r3, #2
 800ece8:	d014      	beq.n	800ed14 <USBD_LL_SetupStage+0x6e>
 800ecea:	e01d      	b.n	800ed28 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fa17 	bl	800f128 <USBD_StdDevReq>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	73fb      	strb	r3, [r7, #15]
      break;
 800ecfe:	e020      	b.n	800ed42 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed06:	4619      	mov	r1, r3
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 fa7b 	bl	800f204 <USBD_StdItfReq>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	73fb      	strb	r3, [r7, #15]
      break;
 800ed12:	e016      	b.n	800ed42 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 fab7 	bl	800f290 <USBD_StdEPReq>
 800ed22:	4603      	mov	r3, r0
 800ed24:	73fb      	strb	r3, [r7, #15]
      break;
 800ed26:	e00c      	b.n	800ed42 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	4619      	mov	r1, r3
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f003 fda1 	bl	801287e <USBD_LL_StallEP>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ed40:	bf00      	nop
  }

  return ret;
 800ed42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3710      	adds	r7, #16
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b086      	sub	sp, #24
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	460b      	mov	r3, r1
 800ed56:	607a      	str	r2, [r7, #4]
 800ed58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ed5a:	7afb      	ldrb	r3, [r7, #11]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d137      	bne.n	800edd0 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ed66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed6e:	2b03      	cmp	r3, #3
 800ed70:	d14a      	bne.n	800ee08 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	689a      	ldr	r2, [r3, #8]
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d913      	bls.n	800eda6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	689a      	ldr	r2, [r3, #8]
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	1ad2      	subs	r2, r2, r3
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	68da      	ldr	r2, [r3, #12]
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	4293      	cmp	r3, r2
 800ed96:	bf28      	it	cs
 800ed98:	4613      	movcs	r3, r2
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f000 ff8f 	bl	800fcc2 <USBD_CtlContinueRx>
 800eda4:	e030      	b.n	800ee08 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edac:	691b      	ldr	r3, [r3, #16]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00a      	beq.n	800edc8 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800edb8:	2b03      	cmp	r3, #3
 800edba:	d105      	bne.n	800edc8 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edc2:	691b      	ldr	r3, [r3, #16]
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f000 ff8b 	bl	800fce4 <USBD_CtlSendStatus>
 800edce:	e01b      	b.n	800ee08 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edd6:	699b      	ldr	r3, [r3, #24]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d013      	beq.n	800ee04 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	d10e      	bne.n	800ee04 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edec:	699b      	ldr	r3, [r3, #24]
 800edee:	7afa      	ldrb	r2, [r7, #11]
 800edf0:	4611      	mov	r1, r2
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	4798      	blx	r3
 800edf6:	4603      	mov	r3, r0
 800edf8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800edfa:	7dfb      	ldrb	r3, [r7, #23]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d003      	beq.n	800ee08 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ee00:	7dfb      	ldrb	r3, [r7, #23]
 800ee02:	e002      	b.n	800ee0a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ee04:	2303      	movs	r3, #3
 800ee06:	e000      	b.n	800ee0a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3718      	adds	r7, #24
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b086      	sub	sp, #24
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	60f8      	str	r0, [r7, #12]
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	607a      	str	r2, [r7, #4]
 800ee1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ee20:	7afb      	ldrb	r3, [r7, #11]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d16a      	bne.n	800eefc <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	3314      	adds	r3, #20
 800ee2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee32:	2b02      	cmp	r3, #2
 800ee34:	d155      	bne.n	800eee2 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	689a      	ldr	r2, [r3, #8]
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d914      	bls.n	800ee6c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	689a      	ldr	r2, [r3, #8]
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	1ad2      	subs	r2, r2, r3
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	461a      	mov	r2, r3
 800ee56:	6879      	ldr	r1, [r7, #4]
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f000 ff21 	bl	800fca0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee5e:	2300      	movs	r3, #0
 800ee60:	2200      	movs	r2, #0
 800ee62:	2100      	movs	r1, #0
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f003 fdb4 	bl	80129d2 <USBD_LL_PrepareReceive>
 800ee6a:	e03a      	b.n	800eee2 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	68da      	ldr	r2, [r3, #12]
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d11c      	bne.n	800eeb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	685a      	ldr	r2, [r3, #4]
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d316      	bcc.n	800eeb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	685a      	ldr	r2, [r3, #4]
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d20f      	bcs.n	800eeb2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ee92:	2200      	movs	r2, #0
 800ee94:	2100      	movs	r1, #0
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f000 ff02 	bl	800fca0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eea4:	2300      	movs	r3, #0
 800eea6:	2200      	movs	r2, #0
 800eea8:	2100      	movs	r1, #0
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f003 fd91 	bl	80129d2 <USBD_LL_PrepareReceive>
 800eeb0:	e017      	b.n	800eee2 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d00a      	beq.n	800eed4 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800eec4:	2b03      	cmp	r3, #3
 800eec6:	d105      	bne.n	800eed4 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eed4:	2180      	movs	r1, #128	; 0x80
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	f003 fcd1 	bl	801287e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eedc:	68f8      	ldr	r0, [r7, #12]
 800eede:	f000 ff14 	bl	800fd0a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d123      	bne.n	800ef34 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f7ff fe9b 	bl	800ec28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2200      	movs	r2, #0
 800eef6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800eefa:	e01b      	b.n	800ef34 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef02:	695b      	ldr	r3, [r3, #20]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d013      	beq.n	800ef30 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ef0e:	2b03      	cmp	r3, #3
 800ef10:	d10e      	bne.n	800ef30 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef18:	695b      	ldr	r3, [r3, #20]
 800ef1a:	7afa      	ldrb	r2, [r7, #11]
 800ef1c:	4611      	mov	r1, r2
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	4798      	blx	r3
 800ef22:	4603      	mov	r3, r0
 800ef24:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ef26:	7dfb      	ldrb	r3, [r7, #23]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d003      	beq.n	800ef34 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ef2c:	7dfb      	ldrb	r3, [r7, #23]
 800ef2e:	e002      	b.n	800ef36 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ef30:	2303      	movs	r3, #3
 800ef32:	e000      	b.n	800ef36 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ef34:	2300      	movs	r3, #0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3718      	adds	r7, #24
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b082      	sub	sp, #8
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2201      	movs	r2, #1
 800ef4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d009      	beq.n	800ef82 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	687a      	ldr	r2, [r7, #4]
 800ef78:	6852      	ldr	r2, [r2, #4]
 800ef7a:	b2d2      	uxtb	r2, r2
 800ef7c:	4611      	mov	r1, r2
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef82:	2340      	movs	r3, #64	; 0x40
 800ef84:	2200      	movs	r2, #0
 800ef86:	2100      	movs	r1, #0
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f003 fc14 	bl	80127b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2201      	movs	r2, #1
 800ef92:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2240      	movs	r2, #64	; 0x40
 800ef9a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef9e:	2340      	movs	r3, #64	; 0x40
 800efa0:	2200      	movs	r2, #0
 800efa2:	2180      	movs	r1, #128	; 0x80
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f003 fc06 	bl	80127b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2201      	movs	r2, #1
 800efae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2240      	movs	r2, #64	; 0x40
 800efb4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800efb6:	2300      	movs	r3, #0
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	460b      	mov	r3, r1
 800efca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	78fa      	ldrb	r2, [r7, #3]
 800efd0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2204      	movs	r2, #4
 800eff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800effc:	2300      	movs	r3, #0
}
 800effe:	4618      	mov	r0, r3
 800f000:	370c      	adds	r7, #12
 800f002:	46bd      	mov	sp, r7
 800f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f008:	4770      	bx	lr

0800f00a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f00a:	b480      	push	{r7}
 800f00c:	b083      	sub	sp, #12
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f018:	2b04      	cmp	r3, #4
 800f01a:	d105      	bne.n	800f028 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	370c      	adds	r7, #12
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr

0800f036 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f036:	b580      	push	{r7, lr}
 800f038:	b082      	sub	sp, #8
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f044:	2b03      	cmp	r3, #3
 800f046:	d10b      	bne.n	800f060 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f04e:	69db      	ldr	r3, [r3, #28]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d005      	beq.n	800f060 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f05a:	69db      	ldr	r3, [r3, #28]
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f06a:	b480      	push	{r7}
 800f06c:	b083      	sub	sp, #12
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
 800f072:	460b      	mov	r3, r1
 800f074:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f076:	2300      	movs	r3, #0
}
 800f078:	4618      	mov	r0, r3
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	460b      	mov	r3, r1
 800f08e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f090:	2300      	movs	r3, #0
}
 800f092:	4618      	mov	r0, r3
 800f094:	370c      	adds	r7, #12
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr

0800f09e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f09e:	b480      	push	{r7}
 800f0a0:	b083      	sub	sp, #12
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	370c      	adds	r7, #12
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr

0800f0b4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d009      	beq.n	800f0e2 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	6852      	ldr	r2, [r2, #4]
 800f0da:	b2d2      	uxtb	r2, r2
 800f0dc:	4611      	mov	r1, r2
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	4798      	blx	r3
  }

  return USBD_OK;
 800f0e2:	2300      	movs	r3, #0
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3708      	adds	r7, #8
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b087      	sub	sp, #28
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	3301      	adds	r3, #1
 800f102:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f10a:	8a3b      	ldrh	r3, [r7, #16]
 800f10c:	021b      	lsls	r3, r3, #8
 800f10e:	b21a      	sxth	r2, r3
 800f110:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f114:	4313      	orrs	r3, r2
 800f116:	b21b      	sxth	r3, r3
 800f118:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f11a:	89fb      	ldrh	r3, [r7, #14]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	371c      	adds	r7, #28
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr

0800f128 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f132:	2300      	movs	r3, #0
 800f134:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f13e:	2b20      	cmp	r3, #32
 800f140:	d004      	beq.n	800f14c <USBD_StdDevReq+0x24>
 800f142:	2b40      	cmp	r3, #64	; 0x40
 800f144:	d002      	beq.n	800f14c <USBD_StdDevReq+0x24>
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00a      	beq.n	800f160 <USBD_StdDevReq+0x38>
 800f14a:	e050      	b.n	800f1ee <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	6839      	ldr	r1, [r7, #0]
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	4798      	blx	r3
 800f15a:	4603      	mov	r3, r0
 800f15c:	73fb      	strb	r3, [r7, #15]
    break;
 800f15e:	e04b      	b.n	800f1f8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	785b      	ldrb	r3, [r3, #1]
 800f164:	2b09      	cmp	r3, #9
 800f166:	d83c      	bhi.n	800f1e2 <USBD_StdDevReq+0xba>
 800f168:	a201      	add	r2, pc, #4	; (adr r2, 800f170 <USBD_StdDevReq+0x48>)
 800f16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f16e:	bf00      	nop
 800f170:	0800f1c5 	.word	0x0800f1c5
 800f174:	0800f1d9 	.word	0x0800f1d9
 800f178:	0800f1e3 	.word	0x0800f1e3
 800f17c:	0800f1cf 	.word	0x0800f1cf
 800f180:	0800f1e3 	.word	0x0800f1e3
 800f184:	0800f1a3 	.word	0x0800f1a3
 800f188:	0800f199 	.word	0x0800f199
 800f18c:	0800f1e3 	.word	0x0800f1e3
 800f190:	0800f1bb 	.word	0x0800f1bb
 800f194:	0800f1ad 	.word	0x0800f1ad
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f198:	6839      	ldr	r1, [r7, #0]
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 f9ce 	bl	800f53c <USBD_GetDescriptor>
      break;
 800f1a0:	e024      	b.n	800f1ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f1a2:	6839      	ldr	r1, [r7, #0]
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 fb33 	bl	800f810 <USBD_SetAddress>
      break;
 800f1aa:	e01f      	b.n	800f1ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f1ac:	6839      	ldr	r1, [r7, #0]
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 fb70 	bl	800f894 <USBD_SetConfig>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	73fb      	strb	r3, [r7, #15]
      break;
 800f1b8:	e018      	b.n	800f1ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f1ba:	6839      	ldr	r1, [r7, #0]
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 fc0d 	bl	800f9dc <USBD_GetConfig>
      break;
 800f1c2:	e013      	b.n	800f1ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f1c4:	6839      	ldr	r1, [r7, #0]
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 fc3c 	bl	800fa44 <USBD_GetStatus>
      break;
 800f1cc:	e00e      	b.n	800f1ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f1ce:	6839      	ldr	r1, [r7, #0]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 fc6a 	bl	800faaa <USBD_SetFeature>
      break;
 800f1d6:	e009      	b.n	800f1ec <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fc79 	bl	800fad2 <USBD_ClrFeature>
      break;
 800f1e0:	e004      	b.n	800f1ec <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f1e2:	6839      	ldr	r1, [r7, #0]
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f000 fccf 	bl	800fb88 <USBD_CtlError>
      break;
 800f1ea:	bf00      	nop
    }
    break;
 800f1ec:	e004      	b.n	800f1f8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f1ee:	6839      	ldr	r1, [r7, #0]
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 fcc9 	bl	800fb88 <USBD_CtlError>
    break;
 800f1f6:	bf00      	nop
  }

  return ret;
 800f1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop

0800f204 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f20e:	2300      	movs	r3, #0
 800f210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f21a:	2b20      	cmp	r3, #32
 800f21c:	d003      	beq.n	800f226 <USBD_StdItfReq+0x22>
 800f21e:	2b40      	cmp	r3, #64	; 0x40
 800f220:	d001      	beq.n	800f226 <USBD_StdItfReq+0x22>
 800f222:	2b00      	cmp	r3, #0
 800f224:	d12a      	bne.n	800f27c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f22c:	3b01      	subs	r3, #1
 800f22e:	2b02      	cmp	r3, #2
 800f230:	d81d      	bhi.n	800f26e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	889b      	ldrh	r3, [r3, #4]
 800f236:	b2db      	uxtb	r3, r3
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d813      	bhi.n	800f264 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	6839      	ldr	r1, [r7, #0]
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	4798      	blx	r3
 800f24a:	4603      	mov	r3, r0
 800f24c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	88db      	ldrh	r3, [r3, #6]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d110      	bne.n	800f278 <USBD_StdItfReq+0x74>
 800f256:	7bfb      	ldrb	r3, [r7, #15]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d10d      	bne.n	800f278 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 fd41 	bl	800fce4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f262:	e009      	b.n	800f278 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 fc8e 	bl	800fb88 <USBD_CtlError>
      break;
 800f26c:	e004      	b.n	800f278 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800f26e:	6839      	ldr	r1, [r7, #0]
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 fc89 	bl	800fb88 <USBD_CtlError>
      break;
 800f276:	e000      	b.n	800f27a <USBD_StdItfReq+0x76>
      break;
 800f278:	bf00      	nop
    }
    break;
 800f27a:	e004      	b.n	800f286 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800f27c:	6839      	ldr	r1, [r7, #0]
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fc82 	bl	800fb88 <USBD_CtlError>
    break;
 800f284:	bf00      	nop
  }

  return ret;
 800f286:	7bfb      	ldrb	r3, [r7, #15]
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3710      	adds	r7, #16
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f29a:	2300      	movs	r3, #0
 800f29c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	889b      	ldrh	r3, [r3, #4]
 800f2a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2ac:	2b20      	cmp	r3, #32
 800f2ae:	d004      	beq.n	800f2ba <USBD_StdEPReq+0x2a>
 800f2b0:	2b40      	cmp	r3, #64	; 0x40
 800f2b2:	d002      	beq.n	800f2ba <USBD_StdEPReq+0x2a>
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d00a      	beq.n	800f2ce <USBD_StdEPReq+0x3e>
 800f2b8:	e135      	b.n	800f526 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2c0:	689b      	ldr	r3, [r3, #8]
 800f2c2:	6839      	ldr	r1, [r7, #0]
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	4798      	blx	r3
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800f2cc:	e130      	b.n	800f530 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	785b      	ldrb	r3, [r3, #1]
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d03e      	beq.n	800f354 <USBD_StdEPReq+0xc4>
 800f2d6:	2b03      	cmp	r3, #3
 800f2d8:	d002      	beq.n	800f2e0 <USBD_StdEPReq+0x50>
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d077      	beq.n	800f3ce <USBD_StdEPReq+0x13e>
 800f2de:	e11c      	b.n	800f51a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2e6:	2b02      	cmp	r3, #2
 800f2e8:	d002      	beq.n	800f2f0 <USBD_StdEPReq+0x60>
 800f2ea:	2b03      	cmp	r3, #3
 800f2ec:	d015      	beq.n	800f31a <USBD_StdEPReq+0x8a>
 800f2ee:	e02b      	b.n	800f348 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2f0:	7bbb      	ldrb	r3, [r7, #14]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d00c      	beq.n	800f310 <USBD_StdEPReq+0x80>
 800f2f6:	7bbb      	ldrb	r3, [r7, #14]
 800f2f8:	2b80      	cmp	r3, #128	; 0x80
 800f2fa:	d009      	beq.n	800f310 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2fc:	7bbb      	ldrb	r3, [r7, #14]
 800f2fe:	4619      	mov	r1, r3
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f003 fabc 	bl	801287e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f306:	2180      	movs	r1, #128	; 0x80
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f003 fab8 	bl	801287e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f30e:	e020      	b.n	800f352 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800f310:	6839      	ldr	r1, [r7, #0]
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fc38 	bl	800fb88 <USBD_CtlError>
        break;
 800f318:	e01b      	b.n	800f352 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	885b      	ldrh	r3, [r3, #2]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10e      	bne.n	800f340 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f322:	7bbb      	ldrb	r3, [r7, #14]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00b      	beq.n	800f340 <USBD_StdEPReq+0xb0>
 800f328:	7bbb      	ldrb	r3, [r7, #14]
 800f32a:	2b80      	cmp	r3, #128	; 0x80
 800f32c:	d008      	beq.n	800f340 <USBD_StdEPReq+0xb0>
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	88db      	ldrh	r3, [r3, #6]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d104      	bne.n	800f340 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f336:	7bbb      	ldrb	r3, [r7, #14]
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f003 fa9f 	bl	801287e <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 fccf 	bl	800fce4 <USBD_CtlSendStatus>

        break;
 800f346:	e004      	b.n	800f352 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800f348:	6839      	ldr	r1, [r7, #0]
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fc1c 	bl	800fb88 <USBD_CtlError>
        break;
 800f350:	bf00      	nop
      }
      break;
 800f352:	e0e7      	b.n	800f524 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f35a:	2b02      	cmp	r3, #2
 800f35c:	d002      	beq.n	800f364 <USBD_StdEPReq+0xd4>
 800f35e:	2b03      	cmp	r3, #3
 800f360:	d015      	beq.n	800f38e <USBD_StdEPReq+0xfe>
 800f362:	e02d      	b.n	800f3c0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f364:	7bbb      	ldrb	r3, [r7, #14]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00c      	beq.n	800f384 <USBD_StdEPReq+0xf4>
 800f36a:	7bbb      	ldrb	r3, [r7, #14]
 800f36c:	2b80      	cmp	r3, #128	; 0x80
 800f36e:	d009      	beq.n	800f384 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f370:	7bbb      	ldrb	r3, [r7, #14]
 800f372:	4619      	mov	r1, r3
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f003 fa82 	bl	801287e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f37a:	2180      	movs	r1, #128	; 0x80
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f003 fa7e 	bl	801287e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f382:	e023      	b.n	800f3cc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800f384:	6839      	ldr	r1, [r7, #0]
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f000 fbfe 	bl	800fb88 <USBD_CtlError>
        break;
 800f38c:	e01e      	b.n	800f3cc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	885b      	ldrh	r3, [r3, #2]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d119      	bne.n	800f3ca <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f396:	7bbb      	ldrb	r3, [r7, #14]
 800f398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d004      	beq.n	800f3aa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3a0:	7bbb      	ldrb	r3, [r7, #14]
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f003 fa89 	bl	80128bc <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 fc9a 	bl	800fce4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	6839      	ldr	r1, [r7, #0]
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	4798      	blx	r3
        }
        break;
 800f3be:	e004      	b.n	800f3ca <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800f3c0:	6839      	ldr	r1, [r7, #0]
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 fbe0 	bl	800fb88 <USBD_CtlError>
        break;
 800f3c8:	e000      	b.n	800f3cc <USBD_StdEPReq+0x13c>
        break;
 800f3ca:	bf00      	nop
      }
      break;
 800f3cc:	e0aa      	b.n	800f524 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3d4:	2b02      	cmp	r3, #2
 800f3d6:	d002      	beq.n	800f3de <USBD_StdEPReq+0x14e>
 800f3d8:	2b03      	cmp	r3, #3
 800f3da:	d032      	beq.n	800f442 <USBD_StdEPReq+0x1b2>
 800f3dc:	e097      	b.n	800f50e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3de:	7bbb      	ldrb	r3, [r7, #14]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d007      	beq.n	800f3f4 <USBD_StdEPReq+0x164>
 800f3e4:	7bbb      	ldrb	r3, [r7, #14]
 800f3e6:	2b80      	cmp	r3, #128	; 0x80
 800f3e8:	d004      	beq.n	800f3f4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800f3ea:	6839      	ldr	r1, [r7, #0]
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f000 fbcb 	bl	800fb88 <USBD_CtlError>
          break;
 800f3f2:	e091      	b.n	800f518 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	da0b      	bge.n	800f414 <USBD_StdEPReq+0x184>
 800f3fc:	7bbb      	ldrb	r3, [r7, #14]
 800f3fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f402:	4613      	mov	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	4413      	add	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	3310      	adds	r3, #16
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	4413      	add	r3, r2
 800f410:	3304      	adds	r3, #4
 800f412:	e00b      	b.n	800f42c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f414:	7bbb      	ldrb	r3, [r7, #14]
 800f416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f41a:	4613      	mov	r3, r2
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	4413      	add	r3, r2
 800f420:	009b      	lsls	r3, r3, #2
 800f422:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	4413      	add	r3, r2
 800f42a:	3304      	adds	r3, #4
 800f42c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	2200      	movs	r2, #0
 800f432:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	2202      	movs	r2, #2
 800f438:	4619      	mov	r1, r3
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 fc15 	bl	800fc6a <USBD_CtlSendData>
        break;
 800f440:	e06a      	b.n	800f518 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f446:	2b00      	cmp	r3, #0
 800f448:	da11      	bge.n	800f46e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f44a:	7bbb      	ldrb	r3, [r7, #14]
 800f44c:	f003 020f 	and.w	r2, r3, #15
 800f450:	6879      	ldr	r1, [r7, #4]
 800f452:	4613      	mov	r3, r2
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	4413      	add	r3, r2
 800f458:	009b      	lsls	r3, r3, #2
 800f45a:	440b      	add	r3, r1
 800f45c:	3324      	adds	r3, #36	; 0x24
 800f45e:	881b      	ldrh	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d117      	bne.n	800f494 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f464:	6839      	ldr	r1, [r7, #0]
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 fb8e 	bl	800fb88 <USBD_CtlError>
            break;
 800f46c:	e054      	b.n	800f518 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f46e:	7bbb      	ldrb	r3, [r7, #14]
 800f470:	f003 020f 	and.w	r2, r3, #15
 800f474:	6879      	ldr	r1, [r7, #4]
 800f476:	4613      	mov	r3, r2
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	4413      	add	r3, r2
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	440b      	add	r3, r1
 800f480:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f484:	881b      	ldrh	r3, [r3, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d104      	bne.n	800f494 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f48a:	6839      	ldr	r1, [r7, #0]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 fb7b 	bl	800fb88 <USBD_CtlError>
            break;
 800f492:	e041      	b.n	800f518 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	da0b      	bge.n	800f4b4 <USBD_StdEPReq+0x224>
 800f49c:	7bbb      	ldrb	r3, [r7, #14]
 800f49e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f4a2:	4613      	mov	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	4413      	add	r3, r2
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	3310      	adds	r3, #16
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	3304      	adds	r3, #4
 800f4b2:	e00b      	b.n	800f4cc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f4b4:	7bbb      	ldrb	r3, [r7, #14]
 800f4b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4ba:	4613      	mov	r3, r2
 800f4bc:	009b      	lsls	r3, r3, #2
 800f4be:	4413      	add	r3, r2
 800f4c0:	009b      	lsls	r3, r3, #2
 800f4c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	3304      	adds	r3, #4
 800f4cc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f4ce:	7bbb      	ldrb	r3, [r7, #14]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d002      	beq.n	800f4da <USBD_StdEPReq+0x24a>
 800f4d4:	7bbb      	ldrb	r3, [r7, #14]
 800f4d6:	2b80      	cmp	r3, #128	; 0x80
 800f4d8:	d103      	bne.n	800f4e2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	601a      	str	r2, [r3, #0]
 800f4e0:	e00e      	b.n	800f500 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f4e2:	7bbb      	ldrb	r3, [r7, #14]
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f003 fa07 	bl	80128fa <USBD_LL_IsStallEP>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d003      	beq.n	800f4fa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	601a      	str	r2, [r3, #0]
 800f4f8:	e002      	b.n	800f500 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	2202      	movs	r2, #2
 800f504:	4619      	mov	r1, r3
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fbaf 	bl	800fc6a <USBD_CtlSendData>
          break;
 800f50c:	e004      	b.n	800f518 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f50e:	6839      	ldr	r1, [r7, #0]
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f000 fb39 	bl	800fb88 <USBD_CtlError>
        break;
 800f516:	bf00      	nop
      }
      break;
 800f518:	e004      	b.n	800f524 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f51a:	6839      	ldr	r1, [r7, #0]
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 fb33 	bl	800fb88 <USBD_CtlError>
      break;
 800f522:	bf00      	nop
    }
    break;
 800f524:	e004      	b.n	800f530 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f526:	6839      	ldr	r1, [r7, #0]
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 fb2d 	bl	800fb88 <USBD_CtlError>
    break;
 800f52e:	bf00      	nop
  }

  return ret;
 800f530:	7bfb      	ldrb	r3, [r7, #15]
}
 800f532:	4618      	mov	r0, r3
 800f534:	3710      	adds	r7, #16
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
	...

0800f53c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f546:	2300      	movs	r3, #0
 800f548:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f54a:	2300      	movs	r3, #0
 800f54c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f54e:	2300      	movs	r3, #0
 800f550:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	885b      	ldrh	r3, [r3, #2]
 800f556:	0a1b      	lsrs	r3, r3, #8
 800f558:	b29b      	uxth	r3, r3
 800f55a:	3b01      	subs	r3, #1
 800f55c:	2b06      	cmp	r3, #6
 800f55e:	f200 8128 	bhi.w	800f7b2 <USBD_GetDescriptor+0x276>
 800f562:	a201      	add	r2, pc, #4	; (adr r2, 800f568 <USBD_GetDescriptor+0x2c>)
 800f564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f568:	0800f585 	.word	0x0800f585
 800f56c:	0800f59d 	.word	0x0800f59d
 800f570:	0800f5dd 	.word	0x0800f5dd
 800f574:	0800f7b3 	.word	0x0800f7b3
 800f578:	0800f7b3 	.word	0x0800f7b3
 800f57c:	0800f753 	.word	0x0800f753
 800f580:	0800f77f 	.word	0x0800f77f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	7c12      	ldrb	r2, [r2, #16]
 800f590:	f107 0108 	add.w	r1, r7, #8
 800f594:	4610      	mov	r0, r2
 800f596:	4798      	blx	r3
 800f598:	60f8      	str	r0, [r7, #12]
    break;
 800f59a:	e112      	b.n	800f7c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	7c1b      	ldrb	r3, [r3, #16]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d10d      	bne.n	800f5c0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5ac:	f107 0208 	add.w	r2, r7, #8
 800f5b0:	4610      	mov	r0, r2
 800f5b2:	4798      	blx	r3
 800f5b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f5be:	e100      	b.n	800f7c2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c8:	f107 0208 	add.w	r2, r7, #8
 800f5cc:	4610      	mov	r0, r2
 800f5ce:	4798      	blx	r3
 800f5d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	2202      	movs	r2, #2
 800f5d8:	701a      	strb	r2, [r3, #0]
    break;
 800f5da:	e0f2      	b.n	800f7c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	885b      	ldrh	r3, [r3, #2]
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	2b05      	cmp	r3, #5
 800f5e4:	f200 80ac 	bhi.w	800f740 <USBD_GetDescriptor+0x204>
 800f5e8:	a201      	add	r2, pc, #4	; (adr r2, 800f5f0 <USBD_GetDescriptor+0xb4>)
 800f5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ee:	bf00      	nop
 800f5f0:	0800f609 	.word	0x0800f609
 800f5f4:	0800f63d 	.word	0x0800f63d
 800f5f8:	0800f671 	.word	0x0800f671
 800f5fc:	0800f6a5 	.word	0x0800f6a5
 800f600:	0800f6d9 	.word	0x0800f6d9
 800f604:	0800f70d 	.word	0x0800f70d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00b      	beq.n	800f62c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	7c12      	ldrb	r2, [r2, #16]
 800f620:	f107 0108 	add.w	r1, r7, #8
 800f624:	4610      	mov	r0, r2
 800f626:	4798      	blx	r3
 800f628:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f62a:	e091      	b.n	800f750 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f62c:	6839      	ldr	r1, [r7, #0]
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 faaa 	bl	800fb88 <USBD_CtlError>
        err++;
 800f634:	7afb      	ldrb	r3, [r7, #11]
 800f636:	3301      	adds	r3, #1
 800f638:	72fb      	strb	r3, [r7, #11]
      break;
 800f63a:	e089      	b.n	800f750 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d00b      	beq.n	800f660 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f64e:	689b      	ldr	r3, [r3, #8]
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	7c12      	ldrb	r2, [r2, #16]
 800f654:	f107 0108 	add.w	r1, r7, #8
 800f658:	4610      	mov	r0, r2
 800f65a:	4798      	blx	r3
 800f65c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f65e:	e077      	b.n	800f750 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f660:	6839      	ldr	r1, [r7, #0]
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 fa90 	bl	800fb88 <USBD_CtlError>
        err++;
 800f668:	7afb      	ldrb	r3, [r7, #11]
 800f66a:	3301      	adds	r3, #1
 800f66c:	72fb      	strb	r3, [r7, #11]
      break;
 800f66e:	e06f      	b.n	800f750 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f676:	68db      	ldr	r3, [r3, #12]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00b      	beq.n	800f694 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	7c12      	ldrb	r2, [r2, #16]
 800f688:	f107 0108 	add.w	r1, r7, #8
 800f68c:	4610      	mov	r0, r2
 800f68e:	4798      	blx	r3
 800f690:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f692:	e05d      	b.n	800f750 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f694:	6839      	ldr	r1, [r7, #0]
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 fa76 	bl	800fb88 <USBD_CtlError>
        err++;
 800f69c:	7afb      	ldrb	r3, [r7, #11]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	72fb      	strb	r3, [r7, #11]
      break;
 800f6a2:	e055      	b.n	800f750 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6aa:	691b      	ldr	r3, [r3, #16]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d00b      	beq.n	800f6c8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6b6:	691b      	ldr	r3, [r3, #16]
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	7c12      	ldrb	r2, [r2, #16]
 800f6bc:	f107 0108 	add.w	r1, r7, #8
 800f6c0:	4610      	mov	r0, r2
 800f6c2:	4798      	blx	r3
 800f6c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f6c6:	e043      	b.n	800f750 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f000 fa5c 	bl	800fb88 <USBD_CtlError>
        err++;
 800f6d0:	7afb      	ldrb	r3, [r7, #11]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	72fb      	strb	r3, [r7, #11]
      break;
 800f6d6:	e03b      	b.n	800f750 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6de:	695b      	ldr	r3, [r3, #20]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d00b      	beq.n	800f6fc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6ea:	695b      	ldr	r3, [r3, #20]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	7c12      	ldrb	r2, [r2, #16]
 800f6f0:	f107 0108 	add.w	r1, r7, #8
 800f6f4:	4610      	mov	r0, r2
 800f6f6:	4798      	blx	r3
 800f6f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f6fa:	e029      	b.n	800f750 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f6fc:	6839      	ldr	r1, [r7, #0]
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 fa42 	bl	800fb88 <USBD_CtlError>
        err++;
 800f704:	7afb      	ldrb	r3, [r7, #11]
 800f706:	3301      	adds	r3, #1
 800f708:	72fb      	strb	r3, [r7, #11]
      break;
 800f70a:	e021      	b.n	800f750 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f712:	699b      	ldr	r3, [r3, #24]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d00b      	beq.n	800f730 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f71e:	699b      	ldr	r3, [r3, #24]
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	7c12      	ldrb	r2, [r2, #16]
 800f724:	f107 0108 	add.w	r1, r7, #8
 800f728:	4610      	mov	r0, r2
 800f72a:	4798      	blx	r3
 800f72c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f72e:	e00f      	b.n	800f750 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f730:	6839      	ldr	r1, [r7, #0]
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 fa28 	bl	800fb88 <USBD_CtlError>
        err++;
 800f738:	7afb      	ldrb	r3, [r7, #11]
 800f73a:	3301      	adds	r3, #1
 800f73c:	72fb      	strb	r3, [r7, #11]
      break;
 800f73e:	e007      	b.n	800f750 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f740:	6839      	ldr	r1, [r7, #0]
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f000 fa20 	bl	800fb88 <USBD_CtlError>
      err++;
 800f748:	7afb      	ldrb	r3, [r7, #11]
 800f74a:	3301      	adds	r3, #1
 800f74c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f74e:	bf00      	nop
    }
    break;
 800f750:	e037      	b.n	800f7c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	7c1b      	ldrb	r3, [r3, #16]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d109      	bne.n	800f76e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f762:	f107 0208 	add.w	r2, r7, #8
 800f766:	4610      	mov	r0, r2
 800f768:	4798      	blx	r3
 800f76a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f76c:	e029      	b.n	800f7c2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f76e:	6839      	ldr	r1, [r7, #0]
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f000 fa09 	bl	800fb88 <USBD_CtlError>
      err++;
 800f776:	7afb      	ldrb	r3, [r7, #11]
 800f778:	3301      	adds	r3, #1
 800f77a:	72fb      	strb	r3, [r7, #11]
    break;
 800f77c:	e021      	b.n	800f7c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	7c1b      	ldrb	r3, [r3, #16]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d10d      	bne.n	800f7a2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f78e:	f107 0208 	add.w	r2, r7, #8
 800f792:	4610      	mov	r0, r2
 800f794:	4798      	blx	r3
 800f796:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	3301      	adds	r3, #1
 800f79c:	2207      	movs	r2, #7
 800f79e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f7a0:	e00f      	b.n	800f7c2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f7a2:	6839      	ldr	r1, [r7, #0]
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 f9ef 	bl	800fb88 <USBD_CtlError>
      err++;
 800f7aa:	7afb      	ldrb	r3, [r7, #11]
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	72fb      	strb	r3, [r7, #11]
    break;
 800f7b0:	e007      	b.n	800f7c2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f7b2:	6839      	ldr	r1, [r7, #0]
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 f9e7 	bl	800fb88 <USBD_CtlError>
    err++;
 800f7ba:	7afb      	ldrb	r3, [r7, #11]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	72fb      	strb	r3, [r7, #11]
    break;
 800f7c0:	bf00      	nop
  }

  if (err != 0U)
 800f7c2:	7afb      	ldrb	r3, [r7, #11]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d11e      	bne.n	800f806 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	88db      	ldrh	r3, [r3, #6]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d016      	beq.n	800f7fe <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f7d0:	893b      	ldrh	r3, [r7, #8]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d00e      	beq.n	800f7f4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	88da      	ldrh	r2, [r3, #6]
 800f7da:	893b      	ldrh	r3, [r7, #8]
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	bf28      	it	cs
 800f7e0:	4613      	movcs	r3, r2
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f7e6:	893b      	ldrh	r3, [r7, #8]
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	68f9      	ldr	r1, [r7, #12]
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f000 fa3c 	bl	800fc6a <USBD_CtlSendData>
 800f7f2:	e009      	b.n	800f808 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f7f4:	6839      	ldr	r1, [r7, #0]
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f000 f9c6 	bl	800fb88 <USBD_CtlError>
 800f7fc:	e004      	b.n	800f808 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 fa70 	bl	800fce4 <USBD_CtlSendStatus>
 800f804:	e000      	b.n	800f808 <USBD_GetDescriptor+0x2cc>
    return;
 800f806:	bf00      	nop
    }
  }
}
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop

0800f810 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b084      	sub	sp, #16
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	889b      	ldrh	r3, [r3, #4]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d130      	bne.n	800f884 <USBD_SetAddress+0x74>
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	88db      	ldrh	r3, [r3, #6]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d12c      	bne.n	800f884 <USBD_SetAddress+0x74>
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	885b      	ldrh	r3, [r3, #2]
 800f82e:	2b7f      	cmp	r3, #127	; 0x7f
 800f830:	d828      	bhi.n	800f884 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	885b      	ldrh	r3, [r3, #2]
 800f836:	b2db      	uxtb	r3, r3
 800f838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f83c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f844:	2b03      	cmp	r3, #3
 800f846:	d104      	bne.n	800f852 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f848:	6839      	ldr	r1, [r7, #0]
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f000 f99c 	bl	800fb88 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f850:	e01c      	b.n	800f88c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	7bfa      	ldrb	r2, [r7, #15]
 800f856:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f85a:	7bfb      	ldrb	r3, [r7, #15]
 800f85c:	4619      	mov	r1, r3
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f003 f877 	bl	8012952 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f000 fa3d 	bl	800fce4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f86a:	7bfb      	ldrb	r3, [r7, #15]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d004      	beq.n	800f87a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2202      	movs	r2, #2
 800f874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f878:	e008      	b.n	800f88c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2201      	movs	r2, #1
 800f87e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f882:	e003      	b.n	800f88c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 f97e 	bl	800fb88 <USBD_CtlError>
  }
}
 800f88c:	bf00      	nop
 800f88e:	3710      	adds	r7, #16
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	885b      	ldrh	r3, [r3, #2]
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	4b4b      	ldr	r3, [pc, #300]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f8aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f8ac:	4b4a      	ldr	r3, [pc, #296]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d905      	bls.n	800f8c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f8b4:	6839      	ldr	r1, [r7, #0]
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 f966 	bl	800fb88 <USBD_CtlError>
    return USBD_FAIL;
 800f8bc:	2303      	movs	r3, #3
 800f8be:	e087      	b.n	800f9d0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8c6:	2b02      	cmp	r3, #2
 800f8c8:	d002      	beq.n	800f8d0 <USBD_SetConfig+0x3c>
 800f8ca:	2b03      	cmp	r3, #3
 800f8cc:	d025      	beq.n	800f91a <USBD_SetConfig+0x86>
 800f8ce:	e071      	b.n	800f9b4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f8d0:	4b41      	ldr	r3, [pc, #260]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d01c      	beq.n	800f912 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f8d8:	4b3f      	ldr	r3, [pc, #252]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f8e2:	4b3d      	ldr	r3, [pc, #244]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f7ff f9a8 	bl	800ec3e <USBD_SetClassConfig>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f8f2:	7bfb      	ldrb	r3, [r7, #15]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d004      	beq.n	800f902 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f8f8:	6839      	ldr	r1, [r7, #0]
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f000 f944 	bl	800fb88 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f900:	e065      	b.n	800f9ce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 f9ee 	bl	800fce4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2203      	movs	r2, #3
 800f90c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f910:	e05d      	b.n	800f9ce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 f9e6 	bl	800fce4 <USBD_CtlSendStatus>
    break;
 800f918:	e059      	b.n	800f9ce <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f91a:	4b2f      	ldr	r3, [pc, #188]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d112      	bne.n	800f948 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2202      	movs	r2, #2
 800f926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f92a:	4b2b      	ldr	r3, [pc, #172]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	461a      	mov	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f934:	4b28      	ldr	r3, [pc, #160]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	4619      	mov	r1, r3
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7ff f99b 	bl	800ec76 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f000 f9cf 	bl	800fce4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f946:	e042      	b.n	800f9ce <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f948:	4b23      	ldr	r3, [pc, #140]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	461a      	mov	r2, r3
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	685b      	ldr	r3, [r3, #4]
 800f952:	429a      	cmp	r2, r3
 800f954:	d02a      	beq.n	800f9ac <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	4619      	mov	r1, r3
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f7ff f989 	bl	800ec76 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f964:	4b1c      	ldr	r3, [pc, #112]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	461a      	mov	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f96e:	4b1a      	ldr	r3, [pc, #104]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	4619      	mov	r1, r3
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7ff f962 	bl	800ec3e <USBD_SetClassConfig>
 800f97a:	4603      	mov	r3, r0
 800f97c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f97e:	7bfb      	ldrb	r3, [r7, #15]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d00f      	beq.n	800f9a4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f984:	6839      	ldr	r1, [r7, #0]
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 f8fe 	bl	800fb88 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	b2db      	uxtb	r3, r3
 800f992:	4619      	mov	r1, r3
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7ff f96e 	bl	800ec76 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2202      	movs	r2, #2
 800f99e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f9a2:	e014      	b.n	800f9ce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 f99d 	bl	800fce4 <USBD_CtlSendStatus>
    break;
 800f9aa:	e010      	b.n	800f9ce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 f999 	bl	800fce4 <USBD_CtlSendStatus>
    break;
 800f9b2:	e00c      	b.n	800f9ce <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f9b4:	6839      	ldr	r1, [r7, #0]
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 f8e6 	bl	800fb88 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9bc:	4b06      	ldr	r3, [pc, #24]	; (800f9d8 <USBD_SetConfig+0x144>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7ff f957 	bl	800ec76 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f9c8:	2303      	movs	r3, #3
 800f9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800f9cc:	bf00      	nop
  }

  return ret;
 800f9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	240001f0 	.word	0x240001f0

0800f9dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	88db      	ldrh	r3, [r3, #6]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d004      	beq.n	800f9f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f9ee:	6839      	ldr	r1, [r7, #0]
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 f8c9 	bl	800fb88 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f9f6:	e021      	b.n	800fa3c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	db17      	blt.n	800fa32 <USBD_GetConfig+0x56>
 800fa02:	2b02      	cmp	r3, #2
 800fa04:	dd02      	ble.n	800fa0c <USBD_GetConfig+0x30>
 800fa06:	2b03      	cmp	r3, #3
 800fa08:	d00b      	beq.n	800fa22 <USBD_GetConfig+0x46>
 800fa0a:	e012      	b.n	800fa32 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	3308      	adds	r3, #8
 800fa16:	2201      	movs	r2, #1
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f000 f925 	bl	800fc6a <USBD_CtlSendData>
      break;
 800fa20:	e00c      	b.n	800fa3c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	3304      	adds	r3, #4
 800fa26:	2201      	movs	r2, #1
 800fa28:	4619      	mov	r1, r3
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f000 f91d 	bl	800fc6a <USBD_CtlSendData>
      break;
 800fa30:	e004      	b.n	800fa3c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800fa32:	6839      	ldr	r1, [r7, #0]
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f000 f8a7 	bl	800fb88 <USBD_CtlError>
      break;
 800fa3a:	bf00      	nop
}
 800fa3c:	bf00      	nop
 800fa3e:	3708      	adds	r7, #8
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa54:	3b01      	subs	r3, #1
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	d81e      	bhi.n	800fa98 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	88db      	ldrh	r3, [r3, #6]
 800fa5e:	2b02      	cmp	r3, #2
 800fa60:	d004      	beq.n	800fa6c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800fa62:	6839      	ldr	r1, [r7, #0]
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 f88f 	bl	800fb88 <USBD_CtlError>
      break;
 800fa6a:	e01a      	b.n	800faa2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d005      	beq.n	800fa88 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	68db      	ldr	r3, [r3, #12]
 800fa80:	f043 0202 	orr.w	r2, r3, #2
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	330c      	adds	r3, #12
 800fa8c:	2202      	movs	r2, #2
 800fa8e:	4619      	mov	r1, r3
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f000 f8ea 	bl	800fc6a <USBD_CtlSendData>
    break;
 800fa96:	e004      	b.n	800faa2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800fa98:	6839      	ldr	r1, [r7, #0]
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f000 f874 	bl	800fb88 <USBD_CtlError>
    break;
 800faa0:	bf00      	nop
  }
}
 800faa2:	bf00      	nop
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b082      	sub	sp, #8
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
 800fab2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	885b      	ldrh	r3, [r3, #2]
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d106      	bne.n	800faca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2201      	movs	r2, #1
 800fac0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 f90d 	bl	800fce4 <USBD_CtlSendStatus>
  }
}
 800faca:	bf00      	nop
 800facc:	3708      	adds	r7, #8
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}

0800fad2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b082      	sub	sp, #8
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
 800fada:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fae2:	3b01      	subs	r3, #1
 800fae4:	2b02      	cmp	r3, #2
 800fae6:	d80b      	bhi.n	800fb00 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	885b      	ldrh	r3, [r3, #2]
 800faec:	2b01      	cmp	r3, #1
 800faee:	d10c      	bne.n	800fb0a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f000 f8f3 	bl	800fce4 <USBD_CtlSendStatus>
      }
      break;
 800fafe:	e004      	b.n	800fb0a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800fb00:	6839      	ldr	r1, [r7, #0]
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f000 f840 	bl	800fb88 <USBD_CtlError>
      break;
 800fb08:	e000      	b.n	800fb0c <USBD_ClrFeature+0x3a>
      break;
 800fb0a:	bf00      	nop
  }
}
 800fb0c:	bf00      	nop
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b084      	sub	sp, #16
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	781a      	ldrb	r2, [r3, #0]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	781a      	ldrb	r2, [r3, #0]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb3e:	68f8      	ldr	r0, [r7, #12]
 800fb40:	f7ff fad4 	bl	800f0ec <SWAPBYTE>
 800fb44:	4603      	mov	r3, r0
 800fb46:	461a      	mov	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	3301      	adds	r3, #1
 800fb50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	3301      	adds	r3, #1
 800fb56:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f7ff fac7 	bl	800f0ec <SWAPBYTE>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	461a      	mov	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fb72:	68f8      	ldr	r0, [r7, #12]
 800fb74:	f7ff faba 	bl	800f0ec <SWAPBYTE>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	80da      	strh	r2, [r3, #6]
}
 800fb80:	bf00      	nop
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb92:	2180      	movs	r1, #128	; 0x80
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f002 fe72 	bl	801287e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f002 fe6e 	bl	801287e <USBD_LL_StallEP>
}
 800fba2:	bf00      	nop
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b086      	sub	sp, #24
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	60f8      	str	r0, [r7, #12]
 800fbb2:	60b9      	str	r1, [r7, #8]
 800fbb4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d036      	beq.n	800fc2e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fbc4:	6938      	ldr	r0, [r7, #16]
 800fbc6:	f000 f836 	bl	800fc36 <USBD_GetLen>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	3301      	adds	r3, #1
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	005b      	lsls	r3, r3, #1
 800fbd2:	b29a      	uxth	r2, r3
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fbd8:	7dfb      	ldrb	r3, [r7, #23]
 800fbda:	68ba      	ldr	r2, [r7, #8]
 800fbdc:	4413      	add	r3, r2
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	7812      	ldrb	r2, [r2, #0]
 800fbe2:	701a      	strb	r2, [r3, #0]
  idx++;
 800fbe4:	7dfb      	ldrb	r3, [r7, #23]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fbea:	7dfb      	ldrb	r3, [r7, #23]
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	4413      	add	r3, r2
 800fbf0:	2203      	movs	r2, #3
 800fbf2:	701a      	strb	r2, [r3, #0]
  idx++;
 800fbf4:	7dfb      	ldrb	r3, [r7, #23]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fbfa:	e013      	b.n	800fc24 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fbfc:	7dfb      	ldrb	r3, [r7, #23]
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	4413      	add	r3, r2
 800fc02:	693a      	ldr	r2, [r7, #16]
 800fc04:	7812      	ldrb	r2, [r2, #0]
 800fc06:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	613b      	str	r3, [r7, #16]
    idx++;
 800fc0e:	7dfb      	ldrb	r3, [r7, #23]
 800fc10:	3301      	adds	r3, #1
 800fc12:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fc14:	7dfb      	ldrb	r3, [r7, #23]
 800fc16:	68ba      	ldr	r2, [r7, #8]
 800fc18:	4413      	add	r3, r2
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	701a      	strb	r2, [r3, #0]
    idx++;
 800fc1e:	7dfb      	ldrb	r3, [r7, #23]
 800fc20:	3301      	adds	r3, #1
 800fc22:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d1e7      	bne.n	800fbfc <USBD_GetString+0x52>
 800fc2c:	e000      	b.n	800fc30 <USBD_GetString+0x86>
    return;
 800fc2e:	bf00      	nop
  }
}
 800fc30:	3718      	adds	r7, #24
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}

0800fc36 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fc36:	b480      	push	{r7}
 800fc38:	b085      	sub	sp, #20
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fc46:	e005      	b.n	800fc54 <USBD_GetLen+0x1e>
  {
    len++;
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	3301      	adds	r3, #1
 800fc52:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d1f5      	bne.n	800fc48 <USBD_GetLen+0x12>
  }

  return len;
 800fc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3714      	adds	r7, #20
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr

0800fc6a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fc6a:	b580      	push	{r7, lr}
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	60f8      	str	r0, [r7, #12]
 800fc72:	60b9      	str	r1, [r7, #8]
 800fc74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2202      	movs	r2, #2
 800fc7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	2100      	movs	r1, #0
 800fc90:	68f8      	ldr	r0, [r7, #12]
 800fc92:	f002 fe7d 	bl	8012990 <USBD_LL_Transmit>

  return USBD_OK;
 800fc96:	2300      	movs	r3, #0
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f002 fe6c 	bl	8012990 <USBD_LL_Transmit>

  return USBD_OK;
 800fcb8:	2300      	movs	r3, #0
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b084      	sub	sp, #16
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	60f8      	str	r0, [r7, #12]
 800fcca:	60b9      	str	r1, [r7, #8]
 800fccc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	68ba      	ldr	r2, [r7, #8]
 800fcd2:	2100      	movs	r1, #0
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f002 fe7c 	bl	80129d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fcda:	2300      	movs	r3, #0
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3710      	adds	r7, #16
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2204      	movs	r2, #4
 800fcf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f002 fe48 	bl	8012990 <USBD_LL_Transmit>

  return USBD_OK;
 800fd00:	2300      	movs	r3, #0
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b082      	sub	sp, #8
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2205      	movs	r2, #5
 800fd16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	2100      	movs	r1, #0
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f002 fe56 	bl	80129d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd26:	2300      	movs	r3, #0
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3708      	adds	r7, #8
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	4603      	mov	r3, r0
 800fd38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fd3a:	79fb      	ldrb	r3, [r7, #7]
 800fd3c:	4a08      	ldr	r2, [pc, #32]	; (800fd60 <disk_status+0x30>)
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	4413      	add	r3, r2
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	79fa      	ldrb	r2, [r7, #7]
 800fd48:	4905      	ldr	r1, [pc, #20]	; (800fd60 <disk_status+0x30>)
 800fd4a:	440a      	add	r2, r1
 800fd4c:	7a12      	ldrb	r2, [r2, #8]
 800fd4e:	4610      	mov	r0, r2
 800fd50:	4798      	blx	r3
 800fd52:	4603      	mov	r3, r0
 800fd54:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fd56:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3710      	adds	r7, #16
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	2400021c 	.word	0x2400021c

0800fd64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	4a0d      	ldr	r2, [pc, #52]	; (800fdac <disk_initialize+0x48>)
 800fd76:	5cd3      	ldrb	r3, [r2, r3]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d111      	bne.n	800fda0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fd7c:	79fb      	ldrb	r3, [r7, #7]
 800fd7e:	4a0b      	ldr	r2, [pc, #44]	; (800fdac <disk_initialize+0x48>)
 800fd80:	2101      	movs	r1, #1
 800fd82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fd84:	79fb      	ldrb	r3, [r7, #7]
 800fd86:	4a09      	ldr	r2, [pc, #36]	; (800fdac <disk_initialize+0x48>)
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4413      	add	r3, r2
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	79fa      	ldrb	r2, [r7, #7]
 800fd92:	4906      	ldr	r1, [pc, #24]	; (800fdac <disk_initialize+0x48>)
 800fd94:	440a      	add	r2, r1
 800fd96:	7a12      	ldrb	r2, [r2, #8]
 800fd98:	4610      	mov	r0, r2
 800fd9a:	4798      	blx	r3
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3710      	adds	r7, #16
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	2400021c 	.word	0x2400021c

0800fdb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fdb0:	b590      	push	{r4, r7, lr}
 800fdb2:	b087      	sub	sp, #28
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	60b9      	str	r1, [r7, #8]
 800fdb8:	607a      	str	r2, [r7, #4]
 800fdba:	603b      	str	r3, [r7, #0]
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fdc0:	7bfb      	ldrb	r3, [r7, #15]
 800fdc2:	4a0a      	ldr	r2, [pc, #40]	; (800fdec <disk_read+0x3c>)
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	4413      	add	r3, r2
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	689c      	ldr	r4, [r3, #8]
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
 800fdce:	4a07      	ldr	r2, [pc, #28]	; (800fdec <disk_read+0x3c>)
 800fdd0:	4413      	add	r3, r2
 800fdd2:	7a18      	ldrb	r0, [r3, #8]
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	687a      	ldr	r2, [r7, #4]
 800fdd8:	68b9      	ldr	r1, [r7, #8]
 800fdda:	47a0      	blx	r4
 800fddc:	4603      	mov	r3, r0
 800fdde:	75fb      	strb	r3, [r7, #23]
  return res;
 800fde0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	371c      	adds	r7, #28
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd90      	pop	{r4, r7, pc}
 800fdea:	bf00      	nop
 800fdec:	2400021c 	.word	0x2400021c

0800fdf0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fdf0:	b590      	push	{r4, r7, lr}
 800fdf2:	b087      	sub	sp, #28
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	60b9      	str	r1, [r7, #8]
 800fdf8:	607a      	str	r2, [r7, #4]
 800fdfa:	603b      	str	r3, [r7, #0]
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fe00:	7bfb      	ldrb	r3, [r7, #15]
 800fe02:	4a0a      	ldr	r2, [pc, #40]	; (800fe2c <disk_write+0x3c>)
 800fe04:	009b      	lsls	r3, r3, #2
 800fe06:	4413      	add	r3, r2
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	68dc      	ldr	r4, [r3, #12]
 800fe0c:	7bfb      	ldrb	r3, [r7, #15]
 800fe0e:	4a07      	ldr	r2, [pc, #28]	; (800fe2c <disk_write+0x3c>)
 800fe10:	4413      	add	r3, r2
 800fe12:	7a18      	ldrb	r0, [r3, #8]
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	68b9      	ldr	r1, [r7, #8]
 800fe1a:	47a0      	blx	r4
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	75fb      	strb	r3, [r7, #23]
  return res;
 800fe20:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	371c      	adds	r7, #28
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd90      	pop	{r4, r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	2400021c 	.word	0x2400021c

0800fe30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	4603      	mov	r3, r0
 800fe38:	603a      	str	r2, [r7, #0]
 800fe3a:	71fb      	strb	r3, [r7, #7]
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fe40:	79fb      	ldrb	r3, [r7, #7]
 800fe42:	4a09      	ldr	r2, [pc, #36]	; (800fe68 <disk_ioctl+0x38>)
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	4413      	add	r3, r2
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	691b      	ldr	r3, [r3, #16]
 800fe4c:	79fa      	ldrb	r2, [r7, #7]
 800fe4e:	4906      	ldr	r1, [pc, #24]	; (800fe68 <disk_ioctl+0x38>)
 800fe50:	440a      	add	r2, r1
 800fe52:	7a10      	ldrb	r0, [r2, #8]
 800fe54:	79b9      	ldrb	r1, [r7, #6]
 800fe56:	683a      	ldr	r2, [r7, #0]
 800fe58:	4798      	blx	r3
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	73fb      	strb	r3, [r7, #15]
  return res;
 800fe5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3710      	adds	r7, #16
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	2400021c 	.word	0x2400021c

0800fe6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b085      	sub	sp, #20
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	3301      	adds	r3, #1
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fe7c:	89fb      	ldrh	r3, [r7, #14]
 800fe7e:	021b      	lsls	r3, r3, #8
 800fe80:	b21a      	sxth	r2, r3
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	b21b      	sxth	r3, r3
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	b21b      	sxth	r3, r3
 800fe8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fe8e:	89fb      	ldrh	r3, [r7, #14]
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3714      	adds	r7, #20
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	3303      	adds	r3, #3
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	021b      	lsls	r3, r3, #8
 800feb0:	687a      	ldr	r2, [r7, #4]
 800feb2:	3202      	adds	r2, #2
 800feb4:	7812      	ldrb	r2, [r2, #0]
 800feb6:	4313      	orrs	r3, r2
 800feb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	021b      	lsls	r3, r3, #8
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	3201      	adds	r2, #1
 800fec2:	7812      	ldrb	r2, [r2, #0]
 800fec4:	4313      	orrs	r3, r2
 800fec6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	021b      	lsls	r3, r3, #8
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	7812      	ldrb	r2, [r2, #0]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	60fb      	str	r3, [r7, #12]
	return rv;
 800fed4:	68fb      	ldr	r3, [r7, #12]
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3714      	adds	r7, #20
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr

0800fee2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fee2:	b480      	push	{r7}
 800fee4:	b083      	sub	sp, #12
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
 800feea:	460b      	mov	r3, r1
 800feec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	1c5a      	adds	r2, r3, #1
 800fef2:	607a      	str	r2, [r7, #4]
 800fef4:	887a      	ldrh	r2, [r7, #2]
 800fef6:	b2d2      	uxtb	r2, r2
 800fef8:	701a      	strb	r2, [r3, #0]
 800fefa:	887b      	ldrh	r3, [r7, #2]
 800fefc:	0a1b      	lsrs	r3, r3, #8
 800fefe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	1c5a      	adds	r2, r3, #1
 800ff04:	607a      	str	r2, [r7, #4]
 800ff06:	887a      	ldrh	r2, [r7, #2]
 800ff08:	b2d2      	uxtb	r2, r2
 800ff0a:	701a      	strb	r2, [r3, #0]
}
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	1c5a      	adds	r2, r3, #1
 800ff26:	607a      	str	r2, [r7, #4]
 800ff28:	683a      	ldr	r2, [r7, #0]
 800ff2a:	b2d2      	uxtb	r2, r2
 800ff2c:	701a      	strb	r2, [r3, #0]
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	0a1b      	lsrs	r3, r3, #8
 800ff32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	1c5a      	adds	r2, r3, #1
 800ff38:	607a      	str	r2, [r7, #4]
 800ff3a:	683a      	ldr	r2, [r7, #0]
 800ff3c:	b2d2      	uxtb	r2, r2
 800ff3e:	701a      	strb	r2, [r3, #0]
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	0a1b      	lsrs	r3, r3, #8
 800ff44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	1c5a      	adds	r2, r3, #1
 800ff4a:	607a      	str	r2, [r7, #4]
 800ff4c:	683a      	ldr	r2, [r7, #0]
 800ff4e:	b2d2      	uxtb	r2, r2
 800ff50:	701a      	strb	r2, [r3, #0]
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	0a1b      	lsrs	r3, r3, #8
 800ff56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	1c5a      	adds	r2, r3, #1
 800ff5c:	607a      	str	r2, [r7, #4]
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	b2d2      	uxtb	r2, r2
 800ff62:	701a      	strb	r2, [r3, #0]
}
 800ff64:	bf00      	nop
 800ff66:	370c      	adds	r7, #12
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr

0800ff70 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ff70:	b480      	push	{r7}
 800ff72:	b087      	sub	sp, #28
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00d      	beq.n	800ffa6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ff8a:	693a      	ldr	r2, [r7, #16]
 800ff8c:	1c53      	adds	r3, r2, #1
 800ff8e:	613b      	str	r3, [r7, #16]
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	1c59      	adds	r1, r3, #1
 800ff94:	6179      	str	r1, [r7, #20]
 800ff96:	7812      	ldrb	r2, [r2, #0]
 800ff98:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	607b      	str	r3, [r7, #4]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1f1      	bne.n	800ff8a <mem_cpy+0x1a>
	}
}
 800ffa6:	bf00      	nop
 800ffa8:	371c      	adds	r7, #28
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ffb2:	b480      	push	{r7}
 800ffb4:	b087      	sub	sp, #28
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	60f8      	str	r0, [r7, #12]
 800ffba:	60b9      	str	r1, [r7, #8]
 800ffbc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	1c5a      	adds	r2, r3, #1
 800ffc6:	617a      	str	r2, [r7, #20]
 800ffc8:	68ba      	ldr	r2, [r7, #8]
 800ffca:	b2d2      	uxtb	r2, r2
 800ffcc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	3b01      	subs	r3, #1
 800ffd2:	607b      	str	r3, [r7, #4]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d1f3      	bne.n	800ffc2 <mem_set+0x10>
}
 800ffda:	bf00      	nop
 800ffdc:	371c      	adds	r7, #28
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ffe6:	b480      	push	{r7}
 800ffe8:	b089      	sub	sp, #36	; 0x24
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	60f8      	str	r0, [r7, #12]
 800ffee:	60b9      	str	r1, [r7, #8]
 800fff0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	61fb      	str	r3, [r7, #28]
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fffe:	69fb      	ldr	r3, [r7, #28]
 8010000:	1c5a      	adds	r2, r3, #1
 8010002:	61fa      	str	r2, [r7, #28]
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	4619      	mov	r1, r3
 8010008:	69bb      	ldr	r3, [r7, #24]
 801000a:	1c5a      	adds	r2, r3, #1
 801000c:	61ba      	str	r2, [r7, #24]
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	1acb      	subs	r3, r1, r3
 8010012:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	3b01      	subs	r3, #1
 8010018:	607b      	str	r3, [r7, #4]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d002      	beq.n	8010026 <mem_cmp+0x40>
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d0eb      	beq.n	800fffe <mem_cmp+0x18>

	return r;
 8010026:	697b      	ldr	r3, [r7, #20]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3724      	adds	r7, #36	; 0x24
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr

08010034 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010034:	b480      	push	{r7}
 8010036:	b083      	sub	sp, #12
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801003e:	e002      	b.n	8010046 <chk_chr+0x12>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	3301      	adds	r3, #1
 8010044:	607b      	str	r3, [r7, #4]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d005      	beq.n	801005a <chk_chr+0x26>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	461a      	mov	r2, r3
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	4293      	cmp	r3, r2
 8010058:	d1f2      	bne.n	8010040 <chk_chr+0xc>
	return *str;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	781b      	ldrb	r3, [r3, #0]
}
 801005e:	4618      	mov	r0, r3
 8010060:	370c      	adds	r7, #12
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
	...

0801006c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801006c:	b480      	push	{r7}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010076:	2300      	movs	r3, #0
 8010078:	60bb      	str	r3, [r7, #8]
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	60fb      	str	r3, [r7, #12]
 801007e:	e029      	b.n	80100d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010080:	4a27      	ldr	r2, [pc, #156]	; (8010120 <chk_lock+0xb4>)
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	011b      	lsls	r3, r3, #4
 8010086:	4413      	add	r3, r2
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d01d      	beq.n	80100ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801008e:	4a24      	ldr	r2, [pc, #144]	; (8010120 <chk_lock+0xb4>)
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	011b      	lsls	r3, r3, #4
 8010094:	4413      	add	r3, r2
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	429a      	cmp	r2, r3
 801009e:	d116      	bne.n	80100ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80100a0:	4a1f      	ldr	r2, [pc, #124]	; (8010120 <chk_lock+0xb4>)
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	011b      	lsls	r3, r3, #4
 80100a6:	4413      	add	r3, r2
 80100a8:	3304      	adds	r3, #4
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d10c      	bne.n	80100ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80100b4:	4a1a      	ldr	r2, [pc, #104]	; (8010120 <chk_lock+0xb4>)
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	011b      	lsls	r3, r3, #4
 80100ba:	4413      	add	r3, r2
 80100bc:	3308      	adds	r3, #8
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d102      	bne.n	80100ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80100c8:	e007      	b.n	80100da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80100ca:	2301      	movs	r3, #1
 80100cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	3301      	adds	r3, #1
 80100d2:	60fb      	str	r3, [r7, #12]
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2b01      	cmp	r3, #1
 80100d8:	d9d2      	bls.n	8010080 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	2b02      	cmp	r3, #2
 80100de:	d109      	bne.n	80100f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d102      	bne.n	80100ec <chk_lock+0x80>
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	2b02      	cmp	r3, #2
 80100ea:	d101      	bne.n	80100f0 <chk_lock+0x84>
 80100ec:	2300      	movs	r3, #0
 80100ee:	e010      	b.n	8010112 <chk_lock+0xa6>
 80100f0:	2312      	movs	r3, #18
 80100f2:	e00e      	b.n	8010112 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d108      	bne.n	801010c <chk_lock+0xa0>
 80100fa:	4a09      	ldr	r2, [pc, #36]	; (8010120 <chk_lock+0xb4>)
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	011b      	lsls	r3, r3, #4
 8010100:	4413      	add	r3, r2
 8010102:	330c      	adds	r3, #12
 8010104:	881b      	ldrh	r3, [r3, #0]
 8010106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801010a:	d101      	bne.n	8010110 <chk_lock+0xa4>
 801010c:	2310      	movs	r3, #16
 801010e:	e000      	b.n	8010112 <chk_lock+0xa6>
 8010110:	2300      	movs	r3, #0
}
 8010112:	4618      	mov	r0, r3
 8010114:	3714      	adds	r7, #20
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr
 801011e:	bf00      	nop
 8010120:	240001fc 	.word	0x240001fc

08010124 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801012a:	2300      	movs	r3, #0
 801012c:	607b      	str	r3, [r7, #4]
 801012e:	e002      	b.n	8010136 <enq_lock+0x12>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	3301      	adds	r3, #1
 8010134:	607b      	str	r3, [r7, #4]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2b01      	cmp	r3, #1
 801013a:	d806      	bhi.n	801014a <enq_lock+0x26>
 801013c:	4a09      	ldr	r2, [pc, #36]	; (8010164 <enq_lock+0x40>)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	011b      	lsls	r3, r3, #4
 8010142:	4413      	add	r3, r2
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d1f2      	bne.n	8010130 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2b02      	cmp	r3, #2
 801014e:	bf14      	ite	ne
 8010150:	2301      	movne	r3, #1
 8010152:	2300      	moveq	r3, #0
 8010154:	b2db      	uxtb	r3, r3
}
 8010156:	4618      	mov	r0, r3
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	240001fc 	.word	0x240001fc

08010168 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010168:	b480      	push	{r7}
 801016a:	b085      	sub	sp, #20
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010172:	2300      	movs	r3, #0
 8010174:	60fb      	str	r3, [r7, #12]
 8010176:	e01f      	b.n	80101b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010178:	4a41      	ldr	r2, [pc, #260]	; (8010280 <inc_lock+0x118>)
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	011b      	lsls	r3, r3, #4
 801017e:	4413      	add	r3, r2
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	429a      	cmp	r2, r3
 8010188:	d113      	bne.n	80101b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801018a:	4a3d      	ldr	r2, [pc, #244]	; (8010280 <inc_lock+0x118>)
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	011b      	lsls	r3, r3, #4
 8010190:	4413      	add	r3, r2
 8010192:	3304      	adds	r3, #4
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801019a:	429a      	cmp	r2, r3
 801019c:	d109      	bne.n	80101b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801019e:	4a38      	ldr	r2, [pc, #224]	; (8010280 <inc_lock+0x118>)
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	011b      	lsls	r3, r3, #4
 80101a4:	4413      	add	r3, r2
 80101a6:	3308      	adds	r3, #8
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d006      	beq.n	80101c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	3301      	adds	r3, #1
 80101b6:	60fb      	str	r3, [r7, #12]
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d9dc      	bls.n	8010178 <inc_lock+0x10>
 80101be:	e000      	b.n	80101c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80101c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2b02      	cmp	r3, #2
 80101c6:	d132      	bne.n	801022e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80101c8:	2300      	movs	r3, #0
 80101ca:	60fb      	str	r3, [r7, #12]
 80101cc:	e002      	b.n	80101d4 <inc_lock+0x6c>
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	3301      	adds	r3, #1
 80101d2:	60fb      	str	r3, [r7, #12]
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d806      	bhi.n	80101e8 <inc_lock+0x80>
 80101da:	4a29      	ldr	r2, [pc, #164]	; (8010280 <inc_lock+0x118>)
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	011b      	lsls	r3, r3, #4
 80101e0:	4413      	add	r3, r2
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d1f2      	bne.n	80101ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2b02      	cmp	r3, #2
 80101ec:	d101      	bne.n	80101f2 <inc_lock+0x8a>
 80101ee:	2300      	movs	r3, #0
 80101f0:	e040      	b.n	8010274 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	4922      	ldr	r1, [pc, #136]	; (8010280 <inc_lock+0x118>)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	011b      	lsls	r3, r3, #4
 80101fc:	440b      	add	r3, r1
 80101fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	689a      	ldr	r2, [r3, #8]
 8010204:	491e      	ldr	r1, [pc, #120]	; (8010280 <inc_lock+0x118>)
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	011b      	lsls	r3, r3, #4
 801020a:	440b      	add	r3, r1
 801020c:	3304      	adds	r3, #4
 801020e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	695a      	ldr	r2, [r3, #20]
 8010214:	491a      	ldr	r1, [pc, #104]	; (8010280 <inc_lock+0x118>)
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	011b      	lsls	r3, r3, #4
 801021a:	440b      	add	r3, r1
 801021c:	3308      	adds	r3, #8
 801021e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010220:	4a17      	ldr	r2, [pc, #92]	; (8010280 <inc_lock+0x118>)
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	011b      	lsls	r3, r3, #4
 8010226:	4413      	add	r3, r2
 8010228:	330c      	adds	r3, #12
 801022a:	2200      	movs	r2, #0
 801022c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d009      	beq.n	8010248 <inc_lock+0xe0>
 8010234:	4a12      	ldr	r2, [pc, #72]	; (8010280 <inc_lock+0x118>)
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	011b      	lsls	r3, r3, #4
 801023a:	4413      	add	r3, r2
 801023c:	330c      	adds	r3, #12
 801023e:	881b      	ldrh	r3, [r3, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d001      	beq.n	8010248 <inc_lock+0xe0>
 8010244:	2300      	movs	r3, #0
 8010246:	e015      	b.n	8010274 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d108      	bne.n	8010260 <inc_lock+0xf8>
 801024e:	4a0c      	ldr	r2, [pc, #48]	; (8010280 <inc_lock+0x118>)
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	011b      	lsls	r3, r3, #4
 8010254:	4413      	add	r3, r2
 8010256:	330c      	adds	r3, #12
 8010258:	881b      	ldrh	r3, [r3, #0]
 801025a:	3301      	adds	r3, #1
 801025c:	b29a      	uxth	r2, r3
 801025e:	e001      	b.n	8010264 <inc_lock+0xfc>
 8010260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010264:	4906      	ldr	r1, [pc, #24]	; (8010280 <inc_lock+0x118>)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	011b      	lsls	r3, r3, #4
 801026a:	440b      	add	r3, r1
 801026c:	330c      	adds	r3, #12
 801026e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	3301      	adds	r3, #1
}
 8010274:	4618      	mov	r0, r3
 8010276:	3714      	adds	r7, #20
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	240001fc 	.word	0x240001fc

08010284 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010284:	b480      	push	{r7}
 8010286:	b085      	sub	sp, #20
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	3b01      	subs	r3, #1
 8010290:	607b      	str	r3, [r7, #4]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2b01      	cmp	r3, #1
 8010296:	d825      	bhi.n	80102e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8010298:	4a17      	ldr	r2, [pc, #92]	; (80102f8 <dec_lock+0x74>)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	011b      	lsls	r3, r3, #4
 801029e:	4413      	add	r3, r2
 80102a0:	330c      	adds	r3, #12
 80102a2:	881b      	ldrh	r3, [r3, #0]
 80102a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80102a6:	89fb      	ldrh	r3, [r7, #14]
 80102a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102ac:	d101      	bne.n	80102b2 <dec_lock+0x2e>
 80102ae:	2300      	movs	r3, #0
 80102b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80102b2:	89fb      	ldrh	r3, [r7, #14]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d002      	beq.n	80102be <dec_lock+0x3a>
 80102b8:	89fb      	ldrh	r3, [r7, #14]
 80102ba:	3b01      	subs	r3, #1
 80102bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80102be:	4a0e      	ldr	r2, [pc, #56]	; (80102f8 <dec_lock+0x74>)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	011b      	lsls	r3, r3, #4
 80102c4:	4413      	add	r3, r2
 80102c6:	330c      	adds	r3, #12
 80102c8:	89fa      	ldrh	r2, [r7, #14]
 80102ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80102cc:	89fb      	ldrh	r3, [r7, #14]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d105      	bne.n	80102de <dec_lock+0x5a>
 80102d2:	4a09      	ldr	r2, [pc, #36]	; (80102f8 <dec_lock+0x74>)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	011b      	lsls	r3, r3, #4
 80102d8:	4413      	add	r3, r2
 80102da:	2200      	movs	r2, #0
 80102dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80102de:	2300      	movs	r3, #0
 80102e0:	737b      	strb	r3, [r7, #13]
 80102e2:	e001      	b.n	80102e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80102e4:	2302      	movs	r3, #2
 80102e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80102e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop
 80102f8:	240001fc 	.word	0x240001fc

080102fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b085      	sub	sp, #20
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010304:	2300      	movs	r3, #0
 8010306:	60fb      	str	r3, [r7, #12]
 8010308:	e010      	b.n	801032c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801030a:	4a0d      	ldr	r2, [pc, #52]	; (8010340 <clear_lock+0x44>)
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	011b      	lsls	r3, r3, #4
 8010310:	4413      	add	r3, r2
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	429a      	cmp	r2, r3
 8010318:	d105      	bne.n	8010326 <clear_lock+0x2a>
 801031a:	4a09      	ldr	r2, [pc, #36]	; (8010340 <clear_lock+0x44>)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	011b      	lsls	r3, r3, #4
 8010320:	4413      	add	r3, r2
 8010322:	2200      	movs	r2, #0
 8010324:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	3301      	adds	r3, #1
 801032a:	60fb      	str	r3, [r7, #12]
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2b01      	cmp	r3, #1
 8010330:	d9eb      	bls.n	801030a <clear_lock+0xe>
	}
}
 8010332:	bf00      	nop
 8010334:	3714      	adds	r7, #20
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr
 801033e:	bf00      	nop
 8010340:	240001fc 	.word	0x240001fc

08010344 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b086      	sub	sp, #24
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801034c:	2300      	movs	r3, #0
 801034e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	78db      	ldrb	r3, [r3, #3]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d034      	beq.n	80103c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801035c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	7858      	ldrb	r0, [r3, #1]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010368:	2301      	movs	r3, #1
 801036a:	697a      	ldr	r2, [r7, #20]
 801036c:	f7ff fd40 	bl	800fdf0 <disk_write>
 8010370:	4603      	mov	r3, r0
 8010372:	2b00      	cmp	r3, #0
 8010374:	d002      	beq.n	801037c <sync_window+0x38>
			res = FR_DISK_ERR;
 8010376:	2301      	movs	r3, #1
 8010378:	73fb      	strb	r3, [r7, #15]
 801037a:	e022      	b.n	80103c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2200      	movs	r2, #0
 8010380:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6a1b      	ldr	r3, [r3, #32]
 8010386:	697a      	ldr	r2, [r7, #20]
 8010388:	1ad2      	subs	r2, r2, r3
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	699b      	ldr	r3, [r3, #24]
 801038e:	429a      	cmp	r2, r3
 8010390:	d217      	bcs.n	80103c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	789b      	ldrb	r3, [r3, #2]
 8010396:	613b      	str	r3, [r7, #16]
 8010398:	e010      	b.n	80103bc <sync_window+0x78>
					wsect += fs->fsize;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	699b      	ldr	r3, [r3, #24]
 801039e:	697a      	ldr	r2, [r7, #20]
 80103a0:	4413      	add	r3, r2
 80103a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	7858      	ldrb	r0, [r3, #1]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103ae:	2301      	movs	r3, #1
 80103b0:	697a      	ldr	r2, [r7, #20]
 80103b2:	f7ff fd1d 	bl	800fdf0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	3b01      	subs	r3, #1
 80103ba:	613b      	str	r3, [r7, #16]
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d8eb      	bhi.n	801039a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80103c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3718      	adds	r7, #24
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80103d6:	2300      	movs	r3, #0
 80103d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103de:	683a      	ldr	r2, [r7, #0]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d01b      	beq.n	801041c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7ff ffad 	bl	8010344 <sync_window>
 80103ea:	4603      	mov	r3, r0
 80103ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80103ee:	7bfb      	ldrb	r3, [r7, #15]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d113      	bne.n	801041c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	7858      	ldrb	r0, [r3, #1]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103fe:	2301      	movs	r3, #1
 8010400:	683a      	ldr	r2, [r7, #0]
 8010402:	f7ff fcd5 	bl	800fdb0 <disk_read>
 8010406:	4603      	mov	r3, r0
 8010408:	2b00      	cmp	r3, #0
 801040a:	d004      	beq.n	8010416 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801040c:	f04f 33ff 	mov.w	r3, #4294967295
 8010410:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010412:	2301      	movs	r3, #1
 8010414:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	683a      	ldr	r2, [r7, #0]
 801041a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 801041c:	7bfb      	ldrb	r3, [r7, #15]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
	...

08010428 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f7ff ff87 	bl	8010344 <sync_window>
 8010436:	4603      	mov	r3, r0
 8010438:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801043a:	7bfb      	ldrb	r3, [r7, #15]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d158      	bne.n	80104f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	2b03      	cmp	r3, #3
 8010446:	d148      	bne.n	80104da <sync_fs+0xb2>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	791b      	ldrb	r3, [r3, #4]
 801044c:	2b01      	cmp	r3, #1
 801044e:	d144      	bne.n	80104da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	3330      	adds	r3, #48	; 0x30
 8010454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010458:	2100      	movs	r1, #0
 801045a:	4618      	mov	r0, r3
 801045c:	f7ff fda9 	bl	800ffb2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	3330      	adds	r3, #48	; 0x30
 8010464:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010468:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801046c:	4618      	mov	r0, r3
 801046e:	f7ff fd38 	bl	800fee2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	3330      	adds	r3, #48	; 0x30
 8010476:	4921      	ldr	r1, [pc, #132]	; (80104fc <sync_fs+0xd4>)
 8010478:	4618      	mov	r0, r3
 801047a:	f7ff fd4d 	bl	800ff18 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	3330      	adds	r3, #48	; 0x30
 8010482:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010486:	491e      	ldr	r1, [pc, #120]	; (8010500 <sync_fs+0xd8>)
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff fd45 	bl	800ff18 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	3330      	adds	r3, #48	; 0x30
 8010492:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	691b      	ldr	r3, [r3, #16]
 801049a:	4619      	mov	r1, r3
 801049c:	4610      	mov	r0, r2
 801049e:	f7ff fd3b 	bl	800ff18 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	3330      	adds	r3, #48	; 0x30
 80104a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	4619      	mov	r1, r3
 80104b0:	4610      	mov	r0, r2
 80104b2:	f7ff fd31 	bl	800ff18 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	69db      	ldr	r3, [r3, #28]
 80104ba:	1c5a      	adds	r2, r3, #1
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	7858      	ldrb	r0, [r3, #1]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104ce:	2301      	movs	r3, #1
 80104d0:	f7ff fc8e 	bl	800fdf0 <disk_write>
			fs->fsi_flag = 0;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2200      	movs	r2, #0
 80104d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	785b      	ldrb	r3, [r3, #1]
 80104de:	2200      	movs	r2, #0
 80104e0:	2100      	movs	r1, #0
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7ff fca4 	bl	800fe30 <disk_ioctl>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d001      	beq.n	80104f2 <sync_fs+0xca>
 80104ee:	2301      	movs	r3, #1
 80104f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80104f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3710      	adds	r7, #16
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	41615252 	.word	0x41615252
 8010500:	61417272 	.word	0x61417272

08010504 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010504:	b480      	push	{r7}
 8010506:	b083      	sub	sp, #12
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	3b02      	subs	r3, #2
 8010512:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	695b      	ldr	r3, [r3, #20]
 8010518:	3b02      	subs	r3, #2
 801051a:	683a      	ldr	r2, [r7, #0]
 801051c:	429a      	cmp	r2, r3
 801051e:	d301      	bcc.n	8010524 <clust2sect+0x20>
 8010520:	2300      	movs	r3, #0
 8010522:	e008      	b.n	8010536 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	895b      	ldrh	r3, [r3, #10]
 8010528:	461a      	mov	r2, r3
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	fb03 f202 	mul.w	r2, r3, r2
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010534:	4413      	add	r3, r2
}
 8010536:	4618      	mov	r0, r3
 8010538:	370c      	adds	r7, #12
 801053a:	46bd      	mov	sp, r7
 801053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010540:	4770      	bx	lr

08010542 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b086      	sub	sp, #24
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
 801054a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	2b01      	cmp	r3, #1
 8010556:	d904      	bls.n	8010562 <get_fat+0x20>
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	695b      	ldr	r3, [r3, #20]
 801055c:	683a      	ldr	r2, [r7, #0]
 801055e:	429a      	cmp	r2, r3
 8010560:	d302      	bcc.n	8010568 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010562:	2301      	movs	r3, #1
 8010564:	617b      	str	r3, [r7, #20]
 8010566:	e08c      	b.n	8010682 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010568:	f04f 33ff 	mov.w	r3, #4294967295
 801056c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	2b02      	cmp	r3, #2
 8010574:	d045      	beq.n	8010602 <get_fat+0xc0>
 8010576:	2b03      	cmp	r3, #3
 8010578:	d05d      	beq.n	8010636 <get_fat+0xf4>
 801057a:	2b01      	cmp	r3, #1
 801057c:	d177      	bne.n	801066e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	60fb      	str	r3, [r7, #12]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	085b      	lsrs	r3, r3, #1
 8010586:	68fa      	ldr	r2, [r7, #12]
 8010588:	4413      	add	r3, r2
 801058a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	6a1a      	ldr	r2, [r3, #32]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	0a5b      	lsrs	r3, r3, #9
 8010594:	4413      	add	r3, r2
 8010596:	4619      	mov	r1, r3
 8010598:	6938      	ldr	r0, [r7, #16]
 801059a:	f7ff ff17 	bl	80103cc <move_window>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d167      	bne.n	8010674 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	1c5a      	adds	r2, r3, #1
 80105a8:	60fa      	str	r2, [r7, #12]
 80105aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105ae:	693a      	ldr	r2, [r7, #16]
 80105b0:	4413      	add	r3, r2
 80105b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105b6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	6a1a      	ldr	r2, [r3, #32]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	0a5b      	lsrs	r3, r3, #9
 80105c0:	4413      	add	r3, r2
 80105c2:	4619      	mov	r1, r3
 80105c4:	6938      	ldr	r0, [r7, #16]
 80105c6:	f7ff ff01 	bl	80103cc <move_window>
 80105ca:	4603      	mov	r3, r0
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d153      	bne.n	8010678 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105d6:	693a      	ldr	r2, [r7, #16]
 80105d8:	4413      	add	r3, r2
 80105da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105de:	021b      	lsls	r3, r3, #8
 80105e0:	461a      	mov	r2, r3
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	4313      	orrs	r3, r2
 80105e6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	f003 0301 	and.w	r3, r3, #1
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d002      	beq.n	80105f8 <get_fat+0xb6>
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	091b      	lsrs	r3, r3, #4
 80105f6:	e002      	b.n	80105fe <get_fat+0xbc>
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80105fe:	617b      	str	r3, [r7, #20]
			break;
 8010600:	e03f      	b.n	8010682 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	6a1a      	ldr	r2, [r3, #32]
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	0a1b      	lsrs	r3, r3, #8
 801060a:	4413      	add	r3, r2
 801060c:	4619      	mov	r1, r3
 801060e:	6938      	ldr	r0, [r7, #16]
 8010610:	f7ff fedc 	bl	80103cc <move_window>
 8010614:	4603      	mov	r3, r0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d130      	bne.n	801067c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	005b      	lsls	r3, r3, #1
 8010624:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010628:	4413      	add	r3, r2
 801062a:	4618      	mov	r0, r3
 801062c:	f7ff fc1e 	bl	800fe6c <ld_word>
 8010630:	4603      	mov	r3, r0
 8010632:	617b      	str	r3, [r7, #20]
			break;
 8010634:	e025      	b.n	8010682 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	6a1a      	ldr	r2, [r3, #32]
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	09db      	lsrs	r3, r3, #7
 801063e:	4413      	add	r3, r2
 8010640:	4619      	mov	r1, r3
 8010642:	6938      	ldr	r0, [r7, #16]
 8010644:	f7ff fec2 	bl	80103cc <move_window>
 8010648:	4603      	mov	r3, r0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d118      	bne.n	8010680 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	009b      	lsls	r3, r3, #2
 8010658:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801065c:	4413      	add	r3, r2
 801065e:	4618      	mov	r0, r3
 8010660:	f7ff fc1c 	bl	800fe9c <ld_dword>
 8010664:	4603      	mov	r3, r0
 8010666:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801066a:	617b      	str	r3, [r7, #20]
			break;
 801066c:	e009      	b.n	8010682 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801066e:	2301      	movs	r3, #1
 8010670:	617b      	str	r3, [r7, #20]
 8010672:	e006      	b.n	8010682 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010674:	bf00      	nop
 8010676:	e004      	b.n	8010682 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010678:	bf00      	nop
 801067a:	e002      	b.n	8010682 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801067c:	bf00      	nop
 801067e:	e000      	b.n	8010682 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010680:	bf00      	nop
		}
	}

	return val;
 8010682:	697b      	ldr	r3, [r7, #20]
}
 8010684:	4618      	mov	r0, r3
 8010686:	3718      	adds	r7, #24
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801068c:	b590      	push	{r4, r7, lr}
 801068e:	b089      	sub	sp, #36	; 0x24
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010698:	2302      	movs	r3, #2
 801069a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	2b01      	cmp	r3, #1
 80106a0:	f240 80d6 	bls.w	8010850 <put_fat+0x1c4>
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	695b      	ldr	r3, [r3, #20]
 80106a8:	68ba      	ldr	r2, [r7, #8]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	f080 80d0 	bcs.w	8010850 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	781b      	ldrb	r3, [r3, #0]
 80106b4:	2b02      	cmp	r3, #2
 80106b6:	d073      	beq.n	80107a0 <put_fat+0x114>
 80106b8:	2b03      	cmp	r3, #3
 80106ba:	f000 8091 	beq.w	80107e0 <put_fat+0x154>
 80106be:	2b01      	cmp	r3, #1
 80106c0:	f040 80c6 	bne.w	8010850 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	61bb      	str	r3, [r7, #24]
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	085b      	lsrs	r3, r3, #1
 80106cc:	69ba      	ldr	r2, [r7, #24]
 80106ce:	4413      	add	r3, r2
 80106d0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6a1a      	ldr	r2, [r3, #32]
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	0a5b      	lsrs	r3, r3, #9
 80106da:	4413      	add	r3, r2
 80106dc:	4619      	mov	r1, r3
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f7ff fe74 	bl	80103cc <move_window>
 80106e4:	4603      	mov	r3, r0
 80106e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80106e8:	7ffb      	ldrb	r3, [r7, #31]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f040 80a9 	bne.w	8010842 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	1c59      	adds	r1, r3, #1
 80106fa:	61b9      	str	r1, [r7, #24]
 80106fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010700:	4413      	add	r3, r2
 8010702:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	f003 0301 	and.w	r3, r3, #1
 801070a:	2b00      	cmp	r3, #0
 801070c:	d00d      	beq.n	801072a <put_fat+0x9e>
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	b25b      	sxtb	r3, r3
 8010714:	f003 030f 	and.w	r3, r3, #15
 8010718:	b25a      	sxtb	r2, r3
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	b2db      	uxtb	r3, r3
 801071e:	011b      	lsls	r3, r3, #4
 8010720:	b25b      	sxtb	r3, r3
 8010722:	4313      	orrs	r3, r2
 8010724:	b25b      	sxtb	r3, r3
 8010726:	b2db      	uxtb	r3, r3
 8010728:	e001      	b.n	801072e <put_fat+0xa2>
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	b2db      	uxtb	r3, r3
 801072e:	697a      	ldr	r2, [r7, #20]
 8010730:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2201      	movs	r2, #1
 8010736:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6a1a      	ldr	r2, [r3, #32]
 801073c:	69bb      	ldr	r3, [r7, #24]
 801073e:	0a5b      	lsrs	r3, r3, #9
 8010740:	4413      	add	r3, r2
 8010742:	4619      	mov	r1, r3
 8010744:	68f8      	ldr	r0, [r7, #12]
 8010746:	f7ff fe41 	bl	80103cc <move_window>
 801074a:	4603      	mov	r3, r0
 801074c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801074e:	7ffb      	ldrb	r3, [r7, #31]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d178      	bne.n	8010846 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801075a:	69bb      	ldr	r3, [r7, #24]
 801075c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010760:	4413      	add	r3, r2
 8010762:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	f003 0301 	and.w	r3, r3, #1
 801076a:	2b00      	cmp	r3, #0
 801076c:	d003      	beq.n	8010776 <put_fat+0xea>
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	091b      	lsrs	r3, r3, #4
 8010772:	b2db      	uxtb	r3, r3
 8010774:	e00e      	b.n	8010794 <put_fat+0x108>
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	b25b      	sxtb	r3, r3
 801077c:	f023 030f 	bic.w	r3, r3, #15
 8010780:	b25a      	sxtb	r2, r3
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	0a1b      	lsrs	r3, r3, #8
 8010786:	b25b      	sxtb	r3, r3
 8010788:	f003 030f 	and.w	r3, r3, #15
 801078c:	b25b      	sxtb	r3, r3
 801078e:	4313      	orrs	r3, r2
 8010790:	b25b      	sxtb	r3, r3
 8010792:	b2db      	uxtb	r3, r3
 8010794:	697a      	ldr	r2, [r7, #20]
 8010796:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2201      	movs	r2, #1
 801079c:	70da      	strb	r2, [r3, #3]
			break;
 801079e:	e057      	b.n	8010850 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	6a1a      	ldr	r2, [r3, #32]
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	0a1b      	lsrs	r3, r3, #8
 80107a8:	4413      	add	r3, r2
 80107aa:	4619      	mov	r1, r3
 80107ac:	68f8      	ldr	r0, [r7, #12]
 80107ae:	f7ff fe0d 	bl	80103cc <move_window>
 80107b2:	4603      	mov	r3, r0
 80107b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80107b6:	7ffb      	ldrb	r3, [r7, #31]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d146      	bne.n	801084a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	005b      	lsls	r3, r3, #1
 80107c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80107ca:	4413      	add	r3, r2
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	b292      	uxth	r2, r2
 80107d0:	4611      	mov	r1, r2
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7ff fb85 	bl	800fee2 <st_word>
			fs->wflag = 1;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2201      	movs	r2, #1
 80107dc:	70da      	strb	r2, [r3, #3]
			break;
 80107de:	e037      	b.n	8010850 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	6a1a      	ldr	r2, [r3, #32]
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	09db      	lsrs	r3, r3, #7
 80107e8:	4413      	add	r3, r2
 80107ea:	4619      	mov	r1, r3
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f7ff fded 	bl	80103cc <move_window>
 80107f2:	4603      	mov	r3, r0
 80107f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80107f6:	7ffb      	ldrb	r3, [r7, #31]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d128      	bne.n	801084e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010810:	4413      	add	r3, r2
 8010812:	4618      	mov	r0, r3
 8010814:	f7ff fb42 	bl	800fe9c <ld_dword>
 8010818:	4603      	mov	r3, r0
 801081a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801081e:	4323      	orrs	r3, r4
 8010820:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	009b      	lsls	r3, r3, #2
 801082c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010830:	4413      	add	r3, r2
 8010832:	6879      	ldr	r1, [r7, #4]
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff fb6f 	bl	800ff18 <st_dword>
			fs->wflag = 1;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2201      	movs	r2, #1
 801083e:	70da      	strb	r2, [r3, #3]
			break;
 8010840:	e006      	b.n	8010850 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010842:	bf00      	nop
 8010844:	e004      	b.n	8010850 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010846:	bf00      	nop
 8010848:	e002      	b.n	8010850 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801084a:	bf00      	nop
 801084c:	e000      	b.n	8010850 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801084e:	bf00      	nop
		}
	}
	return res;
 8010850:	7ffb      	ldrb	r3, [r7, #31]
}
 8010852:	4618      	mov	r0, r3
 8010854:	3724      	adds	r7, #36	; 0x24
 8010856:	46bd      	mov	sp, r7
 8010858:	bd90      	pop	{r4, r7, pc}

0801085a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801085a:	b580      	push	{r7, lr}
 801085c:	b088      	sub	sp, #32
 801085e:	af00      	add	r7, sp, #0
 8010860:	60f8      	str	r0, [r7, #12]
 8010862:	60b9      	str	r1, [r7, #8]
 8010864:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010866:	2300      	movs	r3, #0
 8010868:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	2b01      	cmp	r3, #1
 8010874:	d904      	bls.n	8010880 <remove_chain+0x26>
 8010876:	69bb      	ldr	r3, [r7, #24]
 8010878:	695b      	ldr	r3, [r3, #20]
 801087a:	68ba      	ldr	r2, [r7, #8]
 801087c:	429a      	cmp	r2, r3
 801087e:	d301      	bcc.n	8010884 <remove_chain+0x2a>
 8010880:	2302      	movs	r3, #2
 8010882:	e04b      	b.n	801091c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00c      	beq.n	80108a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801088a:	f04f 32ff 	mov.w	r2, #4294967295
 801088e:	6879      	ldr	r1, [r7, #4]
 8010890:	69b8      	ldr	r0, [r7, #24]
 8010892:	f7ff fefb 	bl	801068c <put_fat>
 8010896:	4603      	mov	r3, r0
 8010898:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801089a:	7ffb      	ldrb	r3, [r7, #31]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d001      	beq.n	80108a4 <remove_chain+0x4a>
 80108a0:	7ffb      	ldrb	r3, [r7, #31]
 80108a2:	e03b      	b.n	801091c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80108a4:	68b9      	ldr	r1, [r7, #8]
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f7ff fe4b 	bl	8010542 <get_fat>
 80108ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d031      	beq.n	8010918 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d101      	bne.n	80108be <remove_chain+0x64>
 80108ba:	2302      	movs	r3, #2
 80108bc:	e02e      	b.n	801091c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108c4:	d101      	bne.n	80108ca <remove_chain+0x70>
 80108c6:	2301      	movs	r3, #1
 80108c8:	e028      	b.n	801091c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80108ca:	2200      	movs	r2, #0
 80108cc:	68b9      	ldr	r1, [r7, #8]
 80108ce:	69b8      	ldr	r0, [r7, #24]
 80108d0:	f7ff fedc 	bl	801068c <put_fat>
 80108d4:	4603      	mov	r3, r0
 80108d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80108d8:	7ffb      	ldrb	r3, [r7, #31]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d001      	beq.n	80108e2 <remove_chain+0x88>
 80108de:	7ffb      	ldrb	r3, [r7, #31]
 80108e0:	e01c      	b.n	801091c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	691a      	ldr	r2, [r3, #16]
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	695b      	ldr	r3, [r3, #20]
 80108ea:	3b02      	subs	r3, #2
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d20b      	bcs.n	8010908 <remove_chain+0xae>
			fs->free_clst++;
 80108f0:	69bb      	ldr	r3, [r7, #24]
 80108f2:	691b      	ldr	r3, [r3, #16]
 80108f4:	1c5a      	adds	r2, r3, #1
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80108fa:	69bb      	ldr	r3, [r7, #24]
 80108fc:	791b      	ldrb	r3, [r3, #4]
 80108fe:	f043 0301 	orr.w	r3, r3, #1
 8010902:	b2da      	uxtb	r2, r3
 8010904:	69bb      	ldr	r3, [r7, #24]
 8010906:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801090c:	69bb      	ldr	r3, [r7, #24]
 801090e:	695b      	ldr	r3, [r3, #20]
 8010910:	68ba      	ldr	r2, [r7, #8]
 8010912:	429a      	cmp	r2, r3
 8010914:	d3c6      	bcc.n	80108a4 <remove_chain+0x4a>
 8010916:	e000      	b.n	801091a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010918:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801091a:	2300      	movs	r3, #0
}
 801091c:	4618      	mov	r0, r3
 801091e:	3720      	adds	r7, #32
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b088      	sub	sp, #32
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d10d      	bne.n	8010956 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	68db      	ldr	r3, [r3, #12]
 801093e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010940:	69bb      	ldr	r3, [r7, #24]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d004      	beq.n	8010950 <create_chain+0x2c>
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	695b      	ldr	r3, [r3, #20]
 801094a:	69ba      	ldr	r2, [r7, #24]
 801094c:	429a      	cmp	r2, r3
 801094e:	d31b      	bcc.n	8010988 <create_chain+0x64>
 8010950:	2301      	movs	r3, #1
 8010952:	61bb      	str	r3, [r7, #24]
 8010954:	e018      	b.n	8010988 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010956:	6839      	ldr	r1, [r7, #0]
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f7ff fdf2 	bl	8010542 <get_fat>
 801095e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2b01      	cmp	r3, #1
 8010964:	d801      	bhi.n	801096a <create_chain+0x46>
 8010966:	2301      	movs	r3, #1
 8010968:	e070      	b.n	8010a4c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010970:	d101      	bne.n	8010976 <create_chain+0x52>
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	e06a      	b.n	8010a4c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	695b      	ldr	r3, [r3, #20]
 801097a:	68fa      	ldr	r2, [r7, #12]
 801097c:	429a      	cmp	r2, r3
 801097e:	d201      	bcs.n	8010984 <create_chain+0x60>
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	e063      	b.n	8010a4c <create_chain+0x128>
		scl = clst;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010988:	69bb      	ldr	r3, [r7, #24]
 801098a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	3301      	adds	r3, #1
 8010990:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	695b      	ldr	r3, [r3, #20]
 8010996:	69fa      	ldr	r2, [r7, #28]
 8010998:	429a      	cmp	r2, r3
 801099a:	d307      	bcc.n	80109ac <create_chain+0x88>
				ncl = 2;
 801099c:	2302      	movs	r3, #2
 801099e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80109a0:	69fa      	ldr	r2, [r7, #28]
 80109a2:	69bb      	ldr	r3, [r7, #24]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d901      	bls.n	80109ac <create_chain+0x88>
 80109a8:	2300      	movs	r3, #0
 80109aa:	e04f      	b.n	8010a4c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80109ac:	69f9      	ldr	r1, [r7, #28]
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f7ff fdc7 	bl	8010542 <get_fat>
 80109b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00e      	beq.n	80109da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2b01      	cmp	r3, #1
 80109c0:	d003      	beq.n	80109ca <create_chain+0xa6>
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109c8:	d101      	bne.n	80109ce <create_chain+0xaa>
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	e03e      	b.n	8010a4c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80109ce:	69fa      	ldr	r2, [r7, #28]
 80109d0:	69bb      	ldr	r3, [r7, #24]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d1da      	bne.n	801098c <create_chain+0x68>
 80109d6:	2300      	movs	r3, #0
 80109d8:	e038      	b.n	8010a4c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80109da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80109dc:	f04f 32ff 	mov.w	r2, #4294967295
 80109e0:	69f9      	ldr	r1, [r7, #28]
 80109e2:	6938      	ldr	r0, [r7, #16]
 80109e4:	f7ff fe52 	bl	801068c <put_fat>
 80109e8:	4603      	mov	r3, r0
 80109ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80109ec:	7dfb      	ldrb	r3, [r7, #23]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d109      	bne.n	8010a06 <create_chain+0xe2>
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d006      	beq.n	8010a06 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80109f8:	69fa      	ldr	r2, [r7, #28]
 80109fa:	6839      	ldr	r1, [r7, #0]
 80109fc:	6938      	ldr	r0, [r7, #16]
 80109fe:	f7ff fe45 	bl	801068c <put_fat>
 8010a02:	4603      	mov	r3, r0
 8010a04:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010a06:	7dfb      	ldrb	r3, [r7, #23]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d116      	bne.n	8010a3a <create_chain+0x116>
		fs->last_clst = ncl;
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	69fa      	ldr	r2, [r7, #28]
 8010a10:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	691a      	ldr	r2, [r3, #16]
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	695b      	ldr	r3, [r3, #20]
 8010a1a:	3b02      	subs	r3, #2
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d804      	bhi.n	8010a2a <create_chain+0x106>
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	691b      	ldr	r3, [r3, #16]
 8010a24:	1e5a      	subs	r2, r3, #1
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	791b      	ldrb	r3, [r3, #4]
 8010a2e:	f043 0301 	orr.w	r3, r3, #1
 8010a32:	b2da      	uxtb	r2, r3
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	711a      	strb	r2, [r3, #4]
 8010a38:	e007      	b.n	8010a4a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010a3a:	7dfb      	ldrb	r3, [r7, #23]
 8010a3c:	2b01      	cmp	r3, #1
 8010a3e:	d102      	bne.n	8010a46 <create_chain+0x122>
 8010a40:	f04f 33ff 	mov.w	r3, #4294967295
 8010a44:	e000      	b.n	8010a48 <create_chain+0x124>
 8010a46:	2301      	movs	r3, #1
 8010a48:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010a4a:	69fb      	ldr	r3, [r7, #28]
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3720      	adds	r7, #32
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b087      	sub	sp, #28
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a68:	3304      	adds	r3, #4
 8010a6a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	0a5b      	lsrs	r3, r3, #9
 8010a70:	68fa      	ldr	r2, [r7, #12]
 8010a72:	8952      	ldrh	r2, [r2, #10]
 8010a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	1d1a      	adds	r2, r3, #4
 8010a7e:	613a      	str	r2, [r7, #16]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d101      	bne.n	8010a8e <clmt_clust+0x3a>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	e010      	b.n	8010ab0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010a8e:	697a      	ldr	r2, [r7, #20]
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d307      	bcc.n	8010aa6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010a96:	697a      	ldr	r2, [r7, #20]
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	1ad3      	subs	r3, r2, r3
 8010a9c:	617b      	str	r3, [r7, #20]
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	3304      	adds	r3, #4
 8010aa2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010aa4:	e7e9      	b.n	8010a7a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010aa6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	4413      	add	r3, r2
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	371c      	adds	r7, #28
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr

08010abc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b086      	sub	sp, #24
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010ad2:	d204      	bcs.n	8010ade <dir_sdi+0x22>
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	f003 031f 	and.w	r3, r3, #31
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d001      	beq.n	8010ae2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010ade:	2302      	movs	r3, #2
 8010ae0:	e063      	b.n	8010baa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	683a      	ldr	r2, [r7, #0]
 8010ae6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	689b      	ldr	r3, [r3, #8]
 8010aec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d106      	bne.n	8010b02 <dir_sdi+0x46>
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	2b02      	cmp	r3, #2
 8010afa:	d902      	bls.n	8010b02 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b00:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d10c      	bne.n	8010b22 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	095b      	lsrs	r3, r3, #5
 8010b0c:	693a      	ldr	r2, [r7, #16]
 8010b0e:	8912      	ldrh	r2, [r2, #8]
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d301      	bcc.n	8010b18 <dir_sdi+0x5c>
 8010b14:	2302      	movs	r3, #2
 8010b16:	e048      	b.n	8010baa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	61da      	str	r2, [r3, #28]
 8010b20:	e029      	b.n	8010b76 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	895b      	ldrh	r3, [r3, #10]
 8010b26:	025b      	lsls	r3, r3, #9
 8010b28:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010b2a:	e019      	b.n	8010b60 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6979      	ldr	r1, [r7, #20]
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7ff fd06 	bl	8010542 <get_fat>
 8010b36:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b3e:	d101      	bne.n	8010b44 <dir_sdi+0x88>
 8010b40:	2301      	movs	r3, #1
 8010b42:	e032      	b.n	8010baa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d904      	bls.n	8010b54 <dir_sdi+0x98>
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	695b      	ldr	r3, [r3, #20]
 8010b4e:	697a      	ldr	r2, [r7, #20]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d301      	bcc.n	8010b58 <dir_sdi+0x9c>
 8010b54:	2302      	movs	r3, #2
 8010b56:	e028      	b.n	8010baa <dir_sdi+0xee>
			ofs -= csz;
 8010b58:	683a      	ldr	r2, [r7, #0]
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010b60:	683a      	ldr	r2, [r7, #0]
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d2e1      	bcs.n	8010b2c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010b68:	6979      	ldr	r1, [r7, #20]
 8010b6a:	6938      	ldr	r0, [r7, #16]
 8010b6c:	f7ff fcca 	bl	8010504 <clust2sect>
 8010b70:	4602      	mov	r2, r0
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	697a      	ldr	r2, [r7, #20]
 8010b7a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	69db      	ldr	r3, [r3, #28]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d101      	bne.n	8010b88 <dir_sdi+0xcc>
 8010b84:	2302      	movs	r3, #2
 8010b86:	e010      	b.n	8010baa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	69da      	ldr	r2, [r3, #28]
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	0a5b      	lsrs	r3, r3, #9
 8010b90:	441a      	add	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ba2:	441a      	add	r2, r3
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010ba8:	2300      	movs	r3, #0
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3718      	adds	r7, #24
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b086      	sub	sp, #24
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
 8010bba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	695b      	ldr	r3, [r3, #20]
 8010bc6:	3320      	adds	r3, #32
 8010bc8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	69db      	ldr	r3, [r3, #28]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d003      	beq.n	8010bda <dir_next+0x28>
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010bd8:	d301      	bcc.n	8010bde <dir_next+0x2c>
 8010bda:	2304      	movs	r3, #4
 8010bdc:	e0aa      	b.n	8010d34 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	f040 8098 	bne.w	8010d1a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	69db      	ldr	r3, [r3, #28]
 8010bee:	1c5a      	adds	r2, r3, #1
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	699b      	ldr	r3, [r3, #24]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d10b      	bne.n	8010c14 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	095b      	lsrs	r3, r3, #5
 8010c00:	68fa      	ldr	r2, [r7, #12]
 8010c02:	8912      	ldrh	r2, [r2, #8]
 8010c04:	4293      	cmp	r3, r2
 8010c06:	f0c0 8088 	bcc.w	8010d1a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	61da      	str	r2, [r3, #28]
 8010c10:	2304      	movs	r3, #4
 8010c12:	e08f      	b.n	8010d34 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	0a5b      	lsrs	r3, r3, #9
 8010c18:	68fa      	ldr	r2, [r7, #12]
 8010c1a:	8952      	ldrh	r2, [r2, #10]
 8010c1c:	3a01      	subs	r2, #1
 8010c1e:	4013      	ands	r3, r2
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d17a      	bne.n	8010d1a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	699b      	ldr	r3, [r3, #24]
 8010c2a:	4619      	mov	r1, r3
 8010c2c:	4610      	mov	r0, r2
 8010c2e:	f7ff fc88 	bl	8010542 <get_fat>
 8010c32:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	2b01      	cmp	r3, #1
 8010c38:	d801      	bhi.n	8010c3e <dir_next+0x8c>
 8010c3a:	2302      	movs	r3, #2
 8010c3c:	e07a      	b.n	8010d34 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c44:	d101      	bne.n	8010c4a <dir_next+0x98>
 8010c46:	2301      	movs	r3, #1
 8010c48:	e074      	b.n	8010d34 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	695b      	ldr	r3, [r3, #20]
 8010c4e:	697a      	ldr	r2, [r7, #20]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d358      	bcc.n	8010d06 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d104      	bne.n	8010c64 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	61da      	str	r2, [r3, #28]
 8010c60:	2304      	movs	r3, #4
 8010c62:	e067      	b.n	8010d34 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	699b      	ldr	r3, [r3, #24]
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	4610      	mov	r0, r2
 8010c6e:	f7ff fe59 	bl	8010924 <create_chain>
 8010c72:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d101      	bne.n	8010c7e <dir_next+0xcc>
 8010c7a:	2307      	movs	r3, #7
 8010c7c:	e05a      	b.n	8010d34 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d101      	bne.n	8010c88 <dir_next+0xd6>
 8010c84:	2302      	movs	r3, #2
 8010c86:	e055      	b.n	8010d34 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c8e:	d101      	bne.n	8010c94 <dir_next+0xe2>
 8010c90:	2301      	movs	r3, #1
 8010c92:	e04f      	b.n	8010d34 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010c94:	68f8      	ldr	r0, [r7, #12]
 8010c96:	f7ff fb55 	bl	8010344 <sync_window>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d001      	beq.n	8010ca4 <dir_next+0xf2>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	e047      	b.n	8010d34 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	3330      	adds	r3, #48	; 0x30
 8010ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010cac:	2100      	movs	r1, #0
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7ff f97f 	bl	800ffb2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	613b      	str	r3, [r7, #16]
 8010cb8:	6979      	ldr	r1, [r7, #20]
 8010cba:	68f8      	ldr	r0, [r7, #12]
 8010cbc:	f7ff fc22 	bl	8010504 <clust2sect>
 8010cc0:	4602      	mov	r2, r0
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8010cc6:	e012      	b.n	8010cee <dir_next+0x13c>
						fs->wflag = 1;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2201      	movs	r2, #1
 8010ccc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010cce:	68f8      	ldr	r0, [r7, #12]
 8010cd0:	f7ff fb38 	bl	8010344 <sync_window>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d001      	beq.n	8010cde <dir_next+0x12c>
 8010cda:	2301      	movs	r3, #1
 8010cdc:	e02a      	b.n	8010d34 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	613b      	str	r3, [r7, #16]
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ce8:	1c5a      	adds	r2, r3, #1
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	895b      	ldrh	r3, [r3, #10]
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d3e6      	bcc.n	8010cc8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	1ad2      	subs	r2, r2, r3
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	697a      	ldr	r2, [r7, #20]
 8010d0a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010d0c:	6979      	ldr	r1, [r7, #20]
 8010d0e:	68f8      	ldr	r0, [r7, #12]
 8010d10:	f7ff fbf8 	bl	8010504 <clust2sect>
 8010d14:	4602      	mov	r2, r0
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	68ba      	ldr	r2, [r7, #8]
 8010d1e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d2c:	441a      	add	r2, r3
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3718      	adds	r7, #24
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b086      	sub	sp, #24
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f7ff feb4 	bl	8010abc <dir_sdi>
 8010d54:	4603      	mov	r3, r0
 8010d56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010d58:	7dfb      	ldrb	r3, [r7, #23]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d12b      	bne.n	8010db6 <dir_alloc+0x7a>
		n = 0;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	69db      	ldr	r3, [r3, #28]
 8010d66:	4619      	mov	r1, r3
 8010d68:	68f8      	ldr	r0, [r7, #12]
 8010d6a:	f7ff fb2f 	bl	80103cc <move_window>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010d72:	7dfb      	ldrb	r3, [r7, #23]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d11d      	bne.n	8010db4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6a1b      	ldr	r3, [r3, #32]
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	2be5      	cmp	r3, #229	; 0xe5
 8010d80:	d004      	beq.n	8010d8c <dir_alloc+0x50>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6a1b      	ldr	r3, [r3, #32]
 8010d86:	781b      	ldrb	r3, [r3, #0]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d107      	bne.n	8010d9c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	3301      	adds	r3, #1
 8010d90:	613b      	str	r3, [r7, #16]
 8010d92:	693a      	ldr	r2, [r7, #16]
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d102      	bne.n	8010da0 <dir_alloc+0x64>
 8010d9a:	e00c      	b.n	8010db6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010da0:	2101      	movs	r1, #1
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	f7ff ff05 	bl	8010bb2 <dir_next>
 8010da8:	4603      	mov	r3, r0
 8010daa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010dac:	7dfb      	ldrb	r3, [r7, #23]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d0d7      	beq.n	8010d62 <dir_alloc+0x26>
 8010db2:	e000      	b.n	8010db6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010db4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010db6:	7dfb      	ldrb	r3, [r7, #23]
 8010db8:	2b04      	cmp	r3, #4
 8010dba:	d101      	bne.n	8010dc0 <dir_alloc+0x84>
 8010dbc:	2307      	movs	r3, #7
 8010dbe:	75fb      	strb	r3, [r7, #23]
	return res;
 8010dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3718      	adds	r7, #24
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}

08010dca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010dca:	b580      	push	{r7, lr}
 8010dcc:	b084      	sub	sp, #16
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6078      	str	r0, [r7, #4]
 8010dd2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	331a      	adds	r3, #26
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7ff f847 	bl	800fe6c <ld_word>
 8010dde:	4603      	mov	r3, r0
 8010de0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	2b03      	cmp	r3, #3
 8010de8:	d109      	bne.n	8010dfe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	3314      	adds	r3, #20
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7ff f83c 	bl	800fe6c <ld_word>
 8010df4:	4603      	mov	r3, r0
 8010df6:	041b      	lsls	r3, r3, #16
 8010df8:	68fa      	ldr	r2, [r7, #12]
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3710      	adds	r7, #16
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	331a      	adds	r3, #26
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	b292      	uxth	r2, r2
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7ff f85f 	bl	800fee2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	2b03      	cmp	r3, #3
 8010e2a:	d109      	bne.n	8010e40 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	f103 0214 	add.w	r2, r3, #20
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	0c1b      	lsrs	r3, r3, #16
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	4619      	mov	r1, r3
 8010e3a:	4610      	mov	r0, r2
 8010e3c:	f7ff f851 	bl	800fee2 <st_word>
	}
}
 8010e40:	bf00      	nop
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b086      	sub	sp, #24
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010e56:	2100      	movs	r1, #0
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f7ff fe2f 	bl	8010abc <dir_sdi>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010e62:	7dfb      	ldrb	r3, [r7, #23]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d001      	beq.n	8010e6c <dir_find+0x24>
 8010e68:	7dfb      	ldrb	r3, [r7, #23]
 8010e6a:	e03e      	b.n	8010eea <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	69db      	ldr	r3, [r3, #28]
 8010e70:	4619      	mov	r1, r3
 8010e72:	6938      	ldr	r0, [r7, #16]
 8010e74:	f7ff faaa 	bl	80103cc <move_window>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010e7c:	7dfb      	ldrb	r3, [r7, #23]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d12f      	bne.n	8010ee2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6a1b      	ldr	r3, [r3, #32]
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010e8a:	7bfb      	ldrb	r3, [r7, #15]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d102      	bne.n	8010e96 <dir_find+0x4e>
 8010e90:	2304      	movs	r3, #4
 8010e92:	75fb      	strb	r3, [r7, #23]
 8010e94:	e028      	b.n	8010ee8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6a1b      	ldr	r3, [r3, #32]
 8010e9a:	330b      	adds	r3, #11
 8010e9c:	781b      	ldrb	r3, [r3, #0]
 8010e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ea2:	b2da      	uxtb	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	6a1b      	ldr	r3, [r3, #32]
 8010eac:	330b      	adds	r3, #11
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	f003 0308 	and.w	r3, r3, #8
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d10a      	bne.n	8010ece <dir_find+0x86>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6a18      	ldr	r0, [r3, #32]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	3324      	adds	r3, #36	; 0x24
 8010ec0:	220b      	movs	r2, #11
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	f7ff f88f 	bl	800ffe6 <mem_cmp>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d00b      	beq.n	8010ee6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010ece:	2100      	movs	r1, #0
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f7ff fe6e 	bl	8010bb2 <dir_next>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010eda:	7dfb      	ldrb	r3, [r7, #23]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d0c5      	beq.n	8010e6c <dir_find+0x24>
 8010ee0:	e002      	b.n	8010ee8 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010ee2:	bf00      	nop
 8010ee4:	e000      	b.n	8010ee8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010ee6:	bf00      	nop

	return res;
 8010ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3718      	adds	r7, #24
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}

08010ef2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010ef2:	b580      	push	{r7, lr}
 8010ef4:	b084      	sub	sp, #16
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010f00:	2101      	movs	r1, #1
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f7ff ff1a 	bl	8010d3c <dir_alloc>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010f0c:	7bfb      	ldrb	r3, [r7, #15]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d11c      	bne.n	8010f4c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	69db      	ldr	r3, [r3, #28]
 8010f16:	4619      	mov	r1, r3
 8010f18:	68b8      	ldr	r0, [r7, #8]
 8010f1a:	f7ff fa57 	bl	80103cc <move_window>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010f22:	7bfb      	ldrb	r3, [r7, #15]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d111      	bne.n	8010f4c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6a1b      	ldr	r3, [r3, #32]
 8010f2c:	2220      	movs	r2, #32
 8010f2e:	2100      	movs	r1, #0
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7ff f83e 	bl	800ffb2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6a18      	ldr	r0, [r3, #32]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	3324      	adds	r3, #36	; 0x24
 8010f3e:	220b      	movs	r2, #11
 8010f40:	4619      	mov	r1, r3
 8010f42:	f7ff f815 	bl	800ff70 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
	...

08010f58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b088      	sub	sp, #32
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
 8010f60:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	60fb      	str	r3, [r7, #12]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	3324      	adds	r3, #36	; 0x24
 8010f6c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010f6e:	220b      	movs	r2, #11
 8010f70:	2120      	movs	r1, #32
 8010f72:	68b8      	ldr	r0, [r7, #8]
 8010f74:	f7ff f81d 	bl	800ffb2 <mem_set>
	si = i = 0; ni = 8;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	613b      	str	r3, [r7, #16]
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	617b      	str	r3, [r7, #20]
 8010f80:	2308      	movs	r3, #8
 8010f82:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	1c5a      	adds	r2, r3, #1
 8010f88:	617a      	str	r2, [r7, #20]
 8010f8a:	68fa      	ldr	r2, [r7, #12]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010f92:	7ffb      	ldrb	r3, [r7, #31]
 8010f94:	2b20      	cmp	r3, #32
 8010f96:	d94e      	bls.n	8011036 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010f98:	7ffb      	ldrb	r3, [r7, #31]
 8010f9a:	2b2f      	cmp	r3, #47	; 0x2f
 8010f9c:	d006      	beq.n	8010fac <create_name+0x54>
 8010f9e:	7ffb      	ldrb	r3, [r7, #31]
 8010fa0:	2b5c      	cmp	r3, #92	; 0x5c
 8010fa2:	d110      	bne.n	8010fc6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010fa4:	e002      	b.n	8010fac <create_name+0x54>
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	617b      	str	r3, [r7, #20]
 8010fac:	68fa      	ldr	r2, [r7, #12]
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	2b2f      	cmp	r3, #47	; 0x2f
 8010fb6:	d0f6      	beq.n	8010fa6 <create_name+0x4e>
 8010fb8:	68fa      	ldr	r2, [r7, #12]
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	2b5c      	cmp	r3, #92	; 0x5c
 8010fc2:	d0f0      	beq.n	8010fa6 <create_name+0x4e>
			break;
 8010fc4:	e038      	b.n	8011038 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010fc6:	7ffb      	ldrb	r3, [r7, #31]
 8010fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8010fca:	d003      	beq.n	8010fd4 <create_name+0x7c>
 8010fcc:	693a      	ldr	r2, [r7, #16]
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d30c      	bcc.n	8010fee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010fd4:	69bb      	ldr	r3, [r7, #24]
 8010fd6:	2b0b      	cmp	r3, #11
 8010fd8:	d002      	beq.n	8010fe0 <create_name+0x88>
 8010fda:	7ffb      	ldrb	r3, [r7, #31]
 8010fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8010fde:	d001      	beq.n	8010fe4 <create_name+0x8c>
 8010fe0:	2306      	movs	r3, #6
 8010fe2:	e044      	b.n	801106e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010fe4:	2308      	movs	r3, #8
 8010fe6:	613b      	str	r3, [r7, #16]
 8010fe8:	230b      	movs	r3, #11
 8010fea:	61bb      	str	r3, [r7, #24]
			continue;
 8010fec:	e022      	b.n	8011034 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010fee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	da04      	bge.n	8011000 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010ff6:	7ffb      	ldrb	r3, [r7, #31]
 8010ff8:	3b80      	subs	r3, #128	; 0x80
 8010ffa:	4a1f      	ldr	r2, [pc, #124]	; (8011078 <create_name+0x120>)
 8010ffc:	5cd3      	ldrb	r3, [r2, r3]
 8010ffe:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011000:	7ffb      	ldrb	r3, [r7, #31]
 8011002:	4619      	mov	r1, r3
 8011004:	481d      	ldr	r0, [pc, #116]	; (801107c <create_name+0x124>)
 8011006:	f7ff f815 	bl	8010034 <chk_chr>
 801100a:	4603      	mov	r3, r0
 801100c:	2b00      	cmp	r3, #0
 801100e:	d001      	beq.n	8011014 <create_name+0xbc>
 8011010:	2306      	movs	r3, #6
 8011012:	e02c      	b.n	801106e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011014:	7ffb      	ldrb	r3, [r7, #31]
 8011016:	2b60      	cmp	r3, #96	; 0x60
 8011018:	d905      	bls.n	8011026 <create_name+0xce>
 801101a:	7ffb      	ldrb	r3, [r7, #31]
 801101c:	2b7a      	cmp	r3, #122	; 0x7a
 801101e:	d802      	bhi.n	8011026 <create_name+0xce>
 8011020:	7ffb      	ldrb	r3, [r7, #31]
 8011022:	3b20      	subs	r3, #32
 8011024:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	1c5a      	adds	r2, r3, #1
 801102a:	613a      	str	r2, [r7, #16]
 801102c:	68ba      	ldr	r2, [r7, #8]
 801102e:	4413      	add	r3, r2
 8011030:	7ffa      	ldrb	r2, [r7, #31]
 8011032:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011034:	e7a6      	b.n	8010f84 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011036:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011038:	68fa      	ldr	r2, [r7, #12]
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	441a      	add	r2, r3
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d101      	bne.n	801104c <create_name+0xf4>
 8011048:	2306      	movs	r3, #6
 801104a:	e010      	b.n	801106e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	2be5      	cmp	r3, #229	; 0xe5
 8011052:	d102      	bne.n	801105a <create_name+0x102>
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	2205      	movs	r2, #5
 8011058:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801105a:	7ffb      	ldrb	r3, [r7, #31]
 801105c:	2b20      	cmp	r3, #32
 801105e:	d801      	bhi.n	8011064 <create_name+0x10c>
 8011060:	2204      	movs	r2, #4
 8011062:	e000      	b.n	8011066 <create_name+0x10e>
 8011064:	2200      	movs	r2, #0
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	330b      	adds	r3, #11
 801106a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801106c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801106e:	4618      	mov	r0, r3
 8011070:	3720      	adds	r7, #32
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	08013478 	.word	0x08013478
 801107c:	080133ac 	.word	0x080133ac

08011080 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b086      	sub	sp, #24
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011094:	e002      	b.n	801109c <follow_path+0x1c>
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	3301      	adds	r3, #1
 801109a:	603b      	str	r3, [r7, #0]
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	2b2f      	cmp	r3, #47	; 0x2f
 80110a2:	d0f8      	beq.n	8011096 <follow_path+0x16>
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	2b5c      	cmp	r3, #92	; 0x5c
 80110aa:	d0f4      	beq.n	8011096 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	2200      	movs	r2, #0
 80110b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	2b1f      	cmp	r3, #31
 80110b8:	d80a      	bhi.n	80110d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2280      	movs	r2, #128	; 0x80
 80110be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80110c2:	2100      	movs	r1, #0
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f7ff fcf9 	bl	8010abc <dir_sdi>
 80110ca:	4603      	mov	r3, r0
 80110cc:	75fb      	strb	r3, [r7, #23]
 80110ce:	e043      	b.n	8011158 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80110d0:	463b      	mov	r3, r7
 80110d2:	4619      	mov	r1, r3
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7ff ff3f 	bl	8010f58 <create_name>
 80110da:	4603      	mov	r3, r0
 80110dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80110de:	7dfb      	ldrb	r3, [r7, #23]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d134      	bne.n	801114e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7ff feaf 	bl	8010e48 <dir_find>
 80110ea:	4603      	mov	r3, r0
 80110ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80110f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80110f6:	7dfb      	ldrb	r3, [r7, #23]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d00a      	beq.n	8011112 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80110fc:	7dfb      	ldrb	r3, [r7, #23]
 80110fe:	2b04      	cmp	r3, #4
 8011100:	d127      	bne.n	8011152 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011102:	7afb      	ldrb	r3, [r7, #11]
 8011104:	f003 0304 	and.w	r3, r3, #4
 8011108:	2b00      	cmp	r3, #0
 801110a:	d122      	bne.n	8011152 <follow_path+0xd2>
 801110c:	2305      	movs	r3, #5
 801110e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011110:	e01f      	b.n	8011152 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011112:	7afb      	ldrb	r3, [r7, #11]
 8011114:	f003 0304 	and.w	r3, r3, #4
 8011118:	2b00      	cmp	r3, #0
 801111a:	d11c      	bne.n	8011156 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801111c:	693b      	ldr	r3, [r7, #16]
 801111e:	799b      	ldrb	r3, [r3, #6]
 8011120:	f003 0310 	and.w	r3, r3, #16
 8011124:	2b00      	cmp	r3, #0
 8011126:	d102      	bne.n	801112e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011128:	2305      	movs	r3, #5
 801112a:	75fb      	strb	r3, [r7, #23]
 801112c:	e014      	b.n	8011158 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	695b      	ldr	r3, [r3, #20]
 8011138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801113c:	4413      	add	r3, r2
 801113e:	4619      	mov	r1, r3
 8011140:	68f8      	ldr	r0, [r7, #12]
 8011142:	f7ff fe42 	bl	8010dca <ld_clust>
 8011146:	4602      	mov	r2, r0
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801114c:	e7c0      	b.n	80110d0 <follow_path+0x50>
			if (res != FR_OK) break;
 801114e:	bf00      	nop
 8011150:	e002      	b.n	8011158 <follow_path+0xd8>
				break;
 8011152:	bf00      	nop
 8011154:	e000      	b.n	8011158 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011156:	bf00      	nop
			}
		}
	}

	return res;
 8011158:	7dfb      	ldrb	r3, [r7, #23]
}
 801115a:	4618      	mov	r0, r3
 801115c:	3718      	adds	r7, #24
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}

08011162 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011162:	b480      	push	{r7}
 8011164:	b087      	sub	sp, #28
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801116a:	f04f 33ff 	mov.w	r3, #4294967295
 801116e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d031      	beq.n	80111dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	617b      	str	r3, [r7, #20]
 801117e:	e002      	b.n	8011186 <get_ldnumber+0x24>
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	3301      	adds	r3, #1
 8011184:	617b      	str	r3, [r7, #20]
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	2b20      	cmp	r3, #32
 801118c:	d903      	bls.n	8011196 <get_ldnumber+0x34>
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	781b      	ldrb	r3, [r3, #0]
 8011192:	2b3a      	cmp	r3, #58	; 0x3a
 8011194:	d1f4      	bne.n	8011180 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	2b3a      	cmp	r3, #58	; 0x3a
 801119c:	d11c      	bne.n	80111d8 <get_ldnumber+0x76>
			tp = *path;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	1c5a      	adds	r2, r3, #1
 80111a8:	60fa      	str	r2, [r7, #12]
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	3b30      	subs	r3, #48	; 0x30
 80111ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	2b09      	cmp	r3, #9
 80111b4:	d80e      	bhi.n	80111d4 <get_ldnumber+0x72>
 80111b6:	68fa      	ldr	r2, [r7, #12]
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d10a      	bne.n	80111d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d107      	bne.n	80111d4 <get_ldnumber+0x72>
					vol = (int)i;
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	3301      	adds	r3, #1
 80111cc:	617b      	str	r3, [r7, #20]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	697a      	ldr	r2, [r7, #20]
 80111d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	e002      	b.n	80111de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80111d8:	2300      	movs	r3, #0
 80111da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80111dc:	693b      	ldr	r3, [r7, #16]
}
 80111de:	4618      	mov	r0, r3
 80111e0:	371c      	adds	r7, #28
 80111e2:	46bd      	mov	sp, r7
 80111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e8:	4770      	bx	lr
	...

080111ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b082      	sub	sp, #8
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2200      	movs	r2, #0
 80111fa:	70da      	strb	r2, [r3, #3]
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011202:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011204:	6839      	ldr	r1, [r7, #0]
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f7ff f8e0 	bl	80103cc <move_window>
 801120c:	4603      	mov	r3, r0
 801120e:	2b00      	cmp	r3, #0
 8011210:	d001      	beq.n	8011216 <check_fs+0x2a>
 8011212:	2304      	movs	r3, #4
 8011214:	e038      	b.n	8011288 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	3330      	adds	r3, #48	; 0x30
 801121a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801121e:	4618      	mov	r0, r3
 8011220:	f7fe fe24 	bl	800fe6c <ld_word>
 8011224:	4603      	mov	r3, r0
 8011226:	461a      	mov	r2, r3
 8011228:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801122c:	429a      	cmp	r2, r3
 801122e:	d001      	beq.n	8011234 <check_fs+0x48>
 8011230:	2303      	movs	r3, #3
 8011232:	e029      	b.n	8011288 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801123a:	2be9      	cmp	r3, #233	; 0xe9
 801123c:	d009      	beq.n	8011252 <check_fs+0x66>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011244:	2beb      	cmp	r3, #235	; 0xeb
 8011246:	d11e      	bne.n	8011286 <check_fs+0x9a>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801124e:	2b90      	cmp	r3, #144	; 0x90
 8011250:	d119      	bne.n	8011286 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	3330      	adds	r3, #48	; 0x30
 8011256:	3336      	adds	r3, #54	; 0x36
 8011258:	4618      	mov	r0, r3
 801125a:	f7fe fe1f 	bl	800fe9c <ld_dword>
 801125e:	4603      	mov	r3, r0
 8011260:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011264:	4a0a      	ldr	r2, [pc, #40]	; (8011290 <check_fs+0xa4>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d101      	bne.n	801126e <check_fs+0x82>
 801126a:	2300      	movs	r3, #0
 801126c:	e00c      	b.n	8011288 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	3330      	adds	r3, #48	; 0x30
 8011272:	3352      	adds	r3, #82	; 0x52
 8011274:	4618      	mov	r0, r3
 8011276:	f7fe fe11 	bl	800fe9c <ld_dword>
 801127a:	4602      	mov	r2, r0
 801127c:	4b05      	ldr	r3, [pc, #20]	; (8011294 <check_fs+0xa8>)
 801127e:	429a      	cmp	r2, r3
 8011280:	d101      	bne.n	8011286 <check_fs+0x9a>
 8011282:	2300      	movs	r3, #0
 8011284:	e000      	b.n	8011288 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011286:	2302      	movs	r3, #2
}
 8011288:	4618      	mov	r0, r3
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	00544146 	.word	0x00544146
 8011294:	33544146 	.word	0x33544146

08011298 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b096      	sub	sp, #88	; 0x58
 801129c:	af00      	add	r7, sp, #0
 801129e:	60f8      	str	r0, [r7, #12]
 80112a0:	60b9      	str	r1, [r7, #8]
 80112a2:	4613      	mov	r3, r2
 80112a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	2200      	movs	r2, #0
 80112aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f7ff ff58 	bl	8011162 <get_ldnumber>
 80112b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80112b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	da01      	bge.n	80112be <find_volume+0x26>
 80112ba:	230b      	movs	r3, #11
 80112bc:	e22e      	b.n	801171c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80112be:	4aa8      	ldr	r2, [pc, #672]	; (8011560 <find_volume+0x2c8>)
 80112c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80112c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d101      	bne.n	80112d2 <find_volume+0x3a>
 80112ce:	230c      	movs	r3, #12
 80112d0:	e224      	b.n	801171c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80112d8:	79fb      	ldrb	r3, [r7, #7]
 80112da:	f023 0301 	bic.w	r3, r3, #1
 80112de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80112e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d01a      	beq.n	801131e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80112e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ea:	785b      	ldrb	r3, [r3, #1]
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7fe fd1f 	bl	800fd30 <disk_status>
 80112f2:	4603      	mov	r3, r0
 80112f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80112f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112fc:	f003 0301 	and.w	r3, r3, #1
 8011300:	2b00      	cmp	r3, #0
 8011302:	d10c      	bne.n	801131e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011304:	79fb      	ldrb	r3, [r7, #7]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d007      	beq.n	801131a <find_volume+0x82>
 801130a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801130e:	f003 0304 	and.w	r3, r3, #4
 8011312:	2b00      	cmp	r3, #0
 8011314:	d001      	beq.n	801131a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011316:	230a      	movs	r3, #10
 8011318:	e200      	b.n	801171c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 801131a:	2300      	movs	r3, #0
 801131c:	e1fe      	b.n	801171c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801131e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011320:	2200      	movs	r2, #0
 8011322:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011326:	b2da      	uxtb	r2, r3
 8011328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801132c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132e:	785b      	ldrb	r3, [r3, #1]
 8011330:	4618      	mov	r0, r3
 8011332:	f7fe fd17 	bl	800fd64 <disk_initialize>
 8011336:	4603      	mov	r3, r0
 8011338:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801133c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011340:	f003 0301 	and.w	r3, r3, #1
 8011344:	2b00      	cmp	r3, #0
 8011346:	d001      	beq.n	801134c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011348:	2303      	movs	r3, #3
 801134a:	e1e7      	b.n	801171c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801134c:	79fb      	ldrb	r3, [r7, #7]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d007      	beq.n	8011362 <find_volume+0xca>
 8011352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011356:	f003 0304 	and.w	r3, r3, #4
 801135a:	2b00      	cmp	r3, #0
 801135c:	d001      	beq.n	8011362 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801135e:	230a      	movs	r3, #10
 8011360:	e1dc      	b.n	801171c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011362:	2300      	movs	r3, #0
 8011364:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011366:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011368:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801136a:	f7ff ff3f 	bl	80111ec <check_fs>
 801136e:	4603      	mov	r3, r0
 8011370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011378:	2b02      	cmp	r3, #2
 801137a:	d14b      	bne.n	8011414 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801137c:	2300      	movs	r3, #0
 801137e:	643b      	str	r3, [r7, #64]	; 0x40
 8011380:	e01f      	b.n	80113c2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011384:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801138a:	011b      	lsls	r3, r3, #4
 801138c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011390:	4413      	add	r3, r2
 8011392:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011396:	3304      	adds	r3, #4
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d006      	beq.n	80113ac <find_volume+0x114>
 801139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a0:	3308      	adds	r3, #8
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fe fd7a 	bl	800fe9c <ld_dword>
 80113a8:	4602      	mov	r2, r0
 80113aa:	e000      	b.n	80113ae <find_volume+0x116>
 80113ac:	2200      	movs	r2, #0
 80113ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113b0:	009b      	lsls	r3, r3, #2
 80113b2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80113b6:	440b      	add	r3, r1
 80113b8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80113bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113be:	3301      	adds	r3, #1
 80113c0:	643b      	str	r3, [r7, #64]	; 0x40
 80113c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113c4:	2b03      	cmp	r3, #3
 80113c6:	d9dc      	bls.n	8011382 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80113c8:	2300      	movs	r3, #0
 80113ca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80113cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d002      	beq.n	80113d8 <find_volume+0x140>
 80113d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113d4:	3b01      	subs	r3, #1
 80113d6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80113d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80113e0:	4413      	add	r3, r2
 80113e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80113e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80113e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d005      	beq.n	80113fa <find_volume+0x162>
 80113ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80113f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113f2:	f7ff fefb 	bl	80111ec <check_fs>
 80113f6:	4603      	mov	r3, r0
 80113f8:	e000      	b.n	80113fc <find_volume+0x164>
 80113fa:	2303      	movs	r3, #3
 80113fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011404:	2b01      	cmp	r3, #1
 8011406:	d905      	bls.n	8011414 <find_volume+0x17c>
 8011408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801140a:	3301      	adds	r3, #1
 801140c:	643b      	str	r3, [r7, #64]	; 0x40
 801140e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011410:	2b03      	cmp	r3, #3
 8011412:	d9e1      	bls.n	80113d8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011414:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011418:	2b04      	cmp	r3, #4
 801141a:	d101      	bne.n	8011420 <find_volume+0x188>
 801141c:	2301      	movs	r3, #1
 801141e:	e17d      	b.n	801171c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011424:	2b01      	cmp	r3, #1
 8011426:	d901      	bls.n	801142c <find_volume+0x194>
 8011428:	230d      	movs	r3, #13
 801142a:	e177      	b.n	801171c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801142c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142e:	3330      	adds	r3, #48	; 0x30
 8011430:	330b      	adds	r3, #11
 8011432:	4618      	mov	r0, r3
 8011434:	f7fe fd1a 	bl	800fe6c <ld_word>
 8011438:	4603      	mov	r3, r0
 801143a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801143e:	d001      	beq.n	8011444 <find_volume+0x1ac>
 8011440:	230d      	movs	r3, #13
 8011442:	e16b      	b.n	801171c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011446:	3330      	adds	r3, #48	; 0x30
 8011448:	3316      	adds	r3, #22
 801144a:	4618      	mov	r0, r3
 801144c:	f7fe fd0e 	bl	800fe6c <ld_word>
 8011450:	4603      	mov	r3, r0
 8011452:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011456:	2b00      	cmp	r3, #0
 8011458:	d106      	bne.n	8011468 <find_volume+0x1d0>
 801145a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145c:	3330      	adds	r3, #48	; 0x30
 801145e:	3324      	adds	r3, #36	; 0x24
 8011460:	4618      	mov	r0, r3
 8011462:	f7fe fd1b 	bl	800fe9c <ld_dword>
 8011466:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801146c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801146e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011470:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8011474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011476:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147a:	789b      	ldrb	r3, [r3, #2]
 801147c:	2b01      	cmp	r3, #1
 801147e:	d005      	beq.n	801148c <find_volume+0x1f4>
 8011480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011482:	789b      	ldrb	r3, [r3, #2]
 8011484:	2b02      	cmp	r3, #2
 8011486:	d001      	beq.n	801148c <find_volume+0x1f4>
 8011488:	230d      	movs	r3, #13
 801148a:	e147      	b.n	801171c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801148c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801148e:	789b      	ldrb	r3, [r3, #2]
 8011490:	461a      	mov	r2, r3
 8011492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011494:	fb02 f303 	mul.w	r3, r2, r3
 8011498:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80114a0:	b29a      	uxth	r2, r3
 80114a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80114a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a8:	895b      	ldrh	r3, [r3, #10]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d008      	beq.n	80114c0 <find_volume+0x228>
 80114ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b0:	895b      	ldrh	r3, [r3, #10]
 80114b2:	461a      	mov	r2, r3
 80114b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b6:	895b      	ldrh	r3, [r3, #10]
 80114b8:	3b01      	subs	r3, #1
 80114ba:	4013      	ands	r3, r2
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d001      	beq.n	80114c4 <find_volume+0x22c>
 80114c0:	230d      	movs	r3, #13
 80114c2:	e12b      	b.n	801171c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80114c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c6:	3330      	adds	r3, #48	; 0x30
 80114c8:	3311      	adds	r3, #17
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fe fcce 	bl	800fe6c <ld_word>
 80114d0:	4603      	mov	r3, r0
 80114d2:	461a      	mov	r2, r3
 80114d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80114d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114da:	891b      	ldrh	r3, [r3, #8]
 80114dc:	f003 030f 	and.w	r3, r3, #15
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d001      	beq.n	80114ea <find_volume+0x252>
 80114e6:	230d      	movs	r3, #13
 80114e8:	e118      	b.n	801171c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80114ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ec:	3330      	adds	r3, #48	; 0x30
 80114ee:	3313      	adds	r3, #19
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7fe fcbb 	bl	800fe6c <ld_word>
 80114f6:	4603      	mov	r3, r0
 80114f8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80114fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d106      	bne.n	801150e <find_volume+0x276>
 8011500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011502:	3330      	adds	r3, #48	; 0x30
 8011504:	3320      	adds	r3, #32
 8011506:	4618      	mov	r0, r3
 8011508:	f7fe fcc8 	bl	800fe9c <ld_dword>
 801150c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801150e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011510:	3330      	adds	r3, #48	; 0x30
 8011512:	330e      	adds	r3, #14
 8011514:	4618      	mov	r0, r3
 8011516:	f7fe fca9 	bl	800fe6c <ld_word>
 801151a:	4603      	mov	r3, r0
 801151c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801151e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011520:	2b00      	cmp	r3, #0
 8011522:	d101      	bne.n	8011528 <find_volume+0x290>
 8011524:	230d      	movs	r3, #13
 8011526:	e0f9      	b.n	801171c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011528:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801152a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801152c:	4413      	add	r3, r2
 801152e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011530:	8912      	ldrh	r2, [r2, #8]
 8011532:	0912      	lsrs	r2, r2, #4
 8011534:	b292      	uxth	r2, r2
 8011536:	4413      	add	r3, r2
 8011538:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801153a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153e:	429a      	cmp	r2, r3
 8011540:	d201      	bcs.n	8011546 <find_volume+0x2ae>
 8011542:	230d      	movs	r3, #13
 8011544:	e0ea      	b.n	801171c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011546:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801154e:	8952      	ldrh	r2, [r2, #10]
 8011550:	fbb3 f3f2 	udiv	r3, r3, r2
 8011554:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011558:	2b00      	cmp	r3, #0
 801155a:	d103      	bne.n	8011564 <find_volume+0x2cc>
 801155c:	230d      	movs	r3, #13
 801155e:	e0dd      	b.n	801171c <find_volume+0x484>
 8011560:	240001f4 	.word	0x240001f4
		fmt = FS_FAT32;
 8011564:	2303      	movs	r3, #3
 8011566:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011570:	4293      	cmp	r3, r2
 8011572:	d802      	bhi.n	801157a <find_volume+0x2e2>
 8011574:	2302      	movs	r3, #2
 8011576:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011580:	4293      	cmp	r3, r2
 8011582:	d802      	bhi.n	801158a <find_volume+0x2f2>
 8011584:	2301      	movs	r3, #1
 8011586:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158c:	1c9a      	adds	r2, r3, #2
 801158e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011590:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8011592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011594:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011596:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011598:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801159a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801159c:	441a      	add	r2, r3
 801159e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80115a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a6:	441a      	add	r2, r3
 80115a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115aa:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80115ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80115b0:	2b03      	cmp	r3, #3
 80115b2:	d11e      	bne.n	80115f2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80115b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b6:	3330      	adds	r3, #48	; 0x30
 80115b8:	332a      	adds	r3, #42	; 0x2a
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7fe fc56 	bl	800fe6c <ld_word>
 80115c0:	4603      	mov	r3, r0
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d001      	beq.n	80115ca <find_volume+0x332>
 80115c6:	230d      	movs	r3, #13
 80115c8:	e0a8      	b.n	801171c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80115ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115cc:	891b      	ldrh	r3, [r3, #8]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d001      	beq.n	80115d6 <find_volume+0x33e>
 80115d2:	230d      	movs	r3, #13
 80115d4:	e0a2      	b.n	801171c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80115d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d8:	3330      	adds	r3, #48	; 0x30
 80115da:	332c      	adds	r3, #44	; 0x2c
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fe fc5d 	bl	800fe9c <ld_dword>
 80115e2:	4602      	mov	r2, r0
 80115e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80115e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ea:	695b      	ldr	r3, [r3, #20]
 80115ec:	009b      	lsls	r3, r3, #2
 80115ee:	647b      	str	r3, [r7, #68]	; 0x44
 80115f0:	e01f      	b.n	8011632 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80115f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f4:	891b      	ldrh	r3, [r3, #8]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d101      	bne.n	80115fe <find_volume+0x366>
 80115fa:	230d      	movs	r3, #13
 80115fc:	e08e      	b.n	801171c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80115fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011600:	6a1a      	ldr	r2, [r3, #32]
 8011602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011604:	441a      	add	r2, r3
 8011606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011608:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801160a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801160e:	2b02      	cmp	r3, #2
 8011610:	d103      	bne.n	801161a <find_volume+0x382>
 8011612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011614:	695b      	ldr	r3, [r3, #20]
 8011616:	005b      	lsls	r3, r3, #1
 8011618:	e00a      	b.n	8011630 <find_volume+0x398>
 801161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161c:	695a      	ldr	r2, [r3, #20]
 801161e:	4613      	mov	r3, r2
 8011620:	005b      	lsls	r3, r3, #1
 8011622:	4413      	add	r3, r2
 8011624:	085a      	lsrs	r2, r3, #1
 8011626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011628:	695b      	ldr	r3, [r3, #20]
 801162a:	f003 0301 	and.w	r3, r3, #1
 801162e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011630:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011634:	699a      	ldr	r2, [r3, #24]
 8011636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011638:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801163c:	0a5b      	lsrs	r3, r3, #9
 801163e:	429a      	cmp	r2, r3
 8011640:	d201      	bcs.n	8011646 <find_volume+0x3ae>
 8011642:	230d      	movs	r3, #13
 8011644:	e06a      	b.n	801171c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011648:	f04f 32ff 	mov.w	r2, #4294967295
 801164c:	611a      	str	r2, [r3, #16]
 801164e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011650:	691a      	ldr	r2, [r3, #16]
 8011652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011654:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8011656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011658:	2280      	movs	r2, #128	; 0x80
 801165a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801165c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011660:	2b03      	cmp	r3, #3
 8011662:	d149      	bne.n	80116f8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011666:	3330      	adds	r3, #48	; 0x30
 8011668:	3330      	adds	r3, #48	; 0x30
 801166a:	4618      	mov	r0, r3
 801166c:	f7fe fbfe 	bl	800fe6c <ld_word>
 8011670:	4603      	mov	r3, r0
 8011672:	2b01      	cmp	r3, #1
 8011674:	d140      	bne.n	80116f8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011678:	3301      	adds	r3, #1
 801167a:	4619      	mov	r1, r3
 801167c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801167e:	f7fe fea5 	bl	80103cc <move_window>
 8011682:	4603      	mov	r3, r0
 8011684:	2b00      	cmp	r3, #0
 8011686:	d137      	bne.n	80116f8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8011688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168a:	2200      	movs	r2, #0
 801168c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801168e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011690:	3330      	adds	r3, #48	; 0x30
 8011692:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011696:	4618      	mov	r0, r3
 8011698:	f7fe fbe8 	bl	800fe6c <ld_word>
 801169c:	4603      	mov	r3, r0
 801169e:	461a      	mov	r2, r3
 80116a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d127      	bne.n	80116f8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80116a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116aa:	3330      	adds	r3, #48	; 0x30
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7fe fbf5 	bl	800fe9c <ld_dword>
 80116b2:	4602      	mov	r2, r0
 80116b4:	4b1b      	ldr	r3, [pc, #108]	; (8011724 <find_volume+0x48c>)
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d11e      	bne.n	80116f8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80116ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116bc:	3330      	adds	r3, #48	; 0x30
 80116be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7fe fbea 	bl	800fe9c <ld_dword>
 80116c8:	4602      	mov	r2, r0
 80116ca:	4b17      	ldr	r3, [pc, #92]	; (8011728 <find_volume+0x490>)
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d113      	bne.n	80116f8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80116d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d2:	3330      	adds	r3, #48	; 0x30
 80116d4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80116d8:	4618      	mov	r0, r3
 80116da:	f7fe fbdf 	bl	800fe9c <ld_dword>
 80116de:	4602      	mov	r2, r0
 80116e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80116e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e6:	3330      	adds	r3, #48	; 0x30
 80116e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80116ec:	4618      	mov	r0, r3
 80116ee:	f7fe fbd5 	bl	800fe9c <ld_dword>
 80116f2:	4602      	mov	r2, r0
 80116f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80116f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80116fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011700:	4b0a      	ldr	r3, [pc, #40]	; (801172c <find_volume+0x494>)
 8011702:	881b      	ldrh	r3, [r3, #0]
 8011704:	3301      	adds	r3, #1
 8011706:	b29a      	uxth	r2, r3
 8011708:	4b08      	ldr	r3, [pc, #32]	; (801172c <find_volume+0x494>)
 801170a:	801a      	strh	r2, [r3, #0]
 801170c:	4b07      	ldr	r3, [pc, #28]	; (801172c <find_volume+0x494>)
 801170e:	881a      	ldrh	r2, [r3, #0]
 8011710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011712:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011716:	f7fe fdf1 	bl	80102fc <clear_lock>
#endif
	return FR_OK;
 801171a:	2300      	movs	r3, #0
}
 801171c:	4618      	mov	r0, r3
 801171e:	3758      	adds	r7, #88	; 0x58
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}
 8011724:	41615252 	.word	0x41615252
 8011728:	61417272 	.word	0x61417272
 801172c:	240001f8 	.word	0x240001f8

08011730 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b084      	sub	sp, #16
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801173a:	2309      	movs	r3, #9
 801173c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d01c      	beq.n	801177e <validate+0x4e>
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d018      	beq.n	801177e <validate+0x4e>
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d013      	beq.n	801177e <validate+0x4e>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	889a      	ldrh	r2, [r3, #4]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	88db      	ldrh	r3, [r3, #6]
 8011760:	429a      	cmp	r2, r3
 8011762:	d10c      	bne.n	801177e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	785b      	ldrb	r3, [r3, #1]
 801176a:	4618      	mov	r0, r3
 801176c:	f7fe fae0 	bl	800fd30 <disk_status>
 8011770:	4603      	mov	r3, r0
 8011772:	f003 0301 	and.w	r3, r3, #1
 8011776:	2b00      	cmp	r3, #0
 8011778:	d101      	bne.n	801177e <validate+0x4e>
			res = FR_OK;
 801177a:	2300      	movs	r3, #0
 801177c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801177e:	7bfb      	ldrb	r3, [r7, #15]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d102      	bne.n	801178a <validate+0x5a>
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	e000      	b.n	801178c <validate+0x5c>
 801178a:	2300      	movs	r3, #0
 801178c:	683a      	ldr	r2, [r7, #0]
 801178e:	6013      	str	r3, [r2, #0]
	return res;
 8011790:	7bfb      	ldrb	r3, [r7, #15]
}
 8011792:	4618      	mov	r0, r3
 8011794:	3710      	adds	r7, #16
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
	...

0801179c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b088      	sub	sp, #32
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	60f8      	str	r0, [r7, #12]
 80117a4:	60b9      	str	r1, [r7, #8]
 80117a6:	4613      	mov	r3, r2
 80117a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80117ae:	f107 0310 	add.w	r3, r7, #16
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7ff fcd5 	bl	8011162 <get_ldnumber>
 80117b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80117ba:	69fb      	ldr	r3, [r7, #28]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	da01      	bge.n	80117c4 <f_mount+0x28>
 80117c0:	230b      	movs	r3, #11
 80117c2:	e02b      	b.n	801181c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80117c4:	4a17      	ldr	r2, [pc, #92]	; (8011824 <f_mount+0x88>)
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d005      	beq.n	80117e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80117d4:	69b8      	ldr	r0, [r7, #24]
 80117d6:	f7fe fd91 	bl	80102fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	2200      	movs	r2, #0
 80117de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d002      	beq.n	80117ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	2200      	movs	r2, #0
 80117ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80117ec:	68fa      	ldr	r2, [r7, #12]
 80117ee:	490d      	ldr	r1, [pc, #52]	; (8011824 <f_mount+0x88>)
 80117f0:	69fb      	ldr	r3, [r7, #28]
 80117f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d002      	beq.n	8011802 <f_mount+0x66>
 80117fc:	79fb      	ldrb	r3, [r7, #7]
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d001      	beq.n	8011806 <f_mount+0x6a>
 8011802:	2300      	movs	r3, #0
 8011804:	e00a      	b.n	801181c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011806:	f107 010c 	add.w	r1, r7, #12
 801180a:	f107 0308 	add.w	r3, r7, #8
 801180e:	2200      	movs	r2, #0
 8011810:	4618      	mov	r0, r3
 8011812:	f7ff fd41 	bl	8011298 <find_volume>
 8011816:	4603      	mov	r3, r0
 8011818:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801181a:	7dfb      	ldrb	r3, [r7, #23]
}
 801181c:	4618      	mov	r0, r3
 801181e:	3720      	adds	r7, #32
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}
 8011824:	240001f4 	.word	0x240001f4

08011828 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b098      	sub	sp, #96	; 0x60
 801182c:	af00      	add	r7, sp, #0
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	60b9      	str	r1, [r7, #8]
 8011832:	4613      	mov	r3, r2
 8011834:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d101      	bne.n	8011840 <f_open+0x18>
 801183c:	2309      	movs	r3, #9
 801183e:	e1ad      	b.n	8011b9c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011840:	79fb      	ldrb	r3, [r7, #7]
 8011842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011846:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011848:	79fa      	ldrb	r2, [r7, #7]
 801184a:	f107 0110 	add.w	r1, r7, #16
 801184e:	f107 0308 	add.w	r3, r7, #8
 8011852:	4618      	mov	r0, r3
 8011854:	f7ff fd20 	bl	8011298 <find_volume>
 8011858:	4603      	mov	r3, r0
 801185a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801185e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011862:	2b00      	cmp	r3, #0
 8011864:	f040 8191 	bne.w	8011b8a <f_open+0x362>
		dj.obj.fs = fs;
 8011868:	693b      	ldr	r3, [r7, #16]
 801186a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801186c:	68ba      	ldr	r2, [r7, #8]
 801186e:	f107 0314 	add.w	r3, r7, #20
 8011872:	4611      	mov	r1, r2
 8011874:	4618      	mov	r0, r3
 8011876:	f7ff fc03 	bl	8011080 <follow_path>
 801187a:	4603      	mov	r3, r0
 801187c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011880:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011884:	2b00      	cmp	r3, #0
 8011886:	d11a      	bne.n	80118be <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011888:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801188c:	b25b      	sxtb	r3, r3
 801188e:	2b00      	cmp	r3, #0
 8011890:	da03      	bge.n	801189a <f_open+0x72>
				res = FR_INVALID_NAME;
 8011892:	2306      	movs	r3, #6
 8011894:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011898:	e011      	b.n	80118be <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801189a:	79fb      	ldrb	r3, [r7, #7]
 801189c:	f023 0301 	bic.w	r3, r3, #1
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	bf14      	ite	ne
 80118a4:	2301      	movne	r3, #1
 80118a6:	2300      	moveq	r3, #0
 80118a8:	b2db      	uxtb	r3, r3
 80118aa:	461a      	mov	r2, r3
 80118ac:	f107 0314 	add.w	r3, r7, #20
 80118b0:	4611      	mov	r1, r2
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fe fbda 	bl	801006c <chk_lock>
 80118b8:	4603      	mov	r3, r0
 80118ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80118be:	79fb      	ldrb	r3, [r7, #7]
 80118c0:	f003 031c 	and.w	r3, r3, #28
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d07f      	beq.n	80119c8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80118c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d017      	beq.n	8011900 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80118d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118d4:	2b04      	cmp	r3, #4
 80118d6:	d10e      	bne.n	80118f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80118d8:	f7fe fc24 	bl	8010124 <enq_lock>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d006      	beq.n	80118f0 <f_open+0xc8>
 80118e2:	f107 0314 	add.w	r3, r7, #20
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7ff fb03 	bl	8010ef2 <dir_register>
 80118ec:	4603      	mov	r3, r0
 80118ee:	e000      	b.n	80118f2 <f_open+0xca>
 80118f0:	2312      	movs	r3, #18
 80118f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80118f6:	79fb      	ldrb	r3, [r7, #7]
 80118f8:	f043 0308 	orr.w	r3, r3, #8
 80118fc:	71fb      	strb	r3, [r7, #7]
 80118fe:	e010      	b.n	8011922 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011900:	7ebb      	ldrb	r3, [r7, #26]
 8011902:	f003 0311 	and.w	r3, r3, #17
 8011906:	2b00      	cmp	r3, #0
 8011908:	d003      	beq.n	8011912 <f_open+0xea>
					res = FR_DENIED;
 801190a:	2307      	movs	r3, #7
 801190c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011910:	e007      	b.n	8011922 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011912:	79fb      	ldrb	r3, [r7, #7]
 8011914:	f003 0304 	and.w	r3, r3, #4
 8011918:	2b00      	cmp	r3, #0
 801191a:	d002      	beq.n	8011922 <f_open+0xfa>
 801191c:	2308      	movs	r3, #8
 801191e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011926:	2b00      	cmp	r3, #0
 8011928:	d168      	bne.n	80119fc <f_open+0x1d4>
 801192a:	79fb      	ldrb	r3, [r7, #7]
 801192c:	f003 0308 	and.w	r3, r3, #8
 8011930:	2b00      	cmp	r3, #0
 8011932:	d063      	beq.n	80119fc <f_open+0x1d4>
				dw = GET_FATTIME();
 8011934:	f7fb f9c2 	bl	800ccbc <get_fattime>
 8011938:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801193c:	330e      	adds	r3, #14
 801193e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011940:	4618      	mov	r0, r3
 8011942:	f7fe fae9 	bl	800ff18 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011948:	3316      	adds	r3, #22
 801194a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801194c:	4618      	mov	r0, r3
 801194e:	f7fe fae3 	bl	800ff18 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011954:	330b      	adds	r3, #11
 8011956:	2220      	movs	r2, #32
 8011958:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801195e:	4611      	mov	r1, r2
 8011960:	4618      	mov	r0, r3
 8011962:	f7ff fa32 	bl	8010dca <ld_clust>
 8011966:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801196c:	2200      	movs	r2, #0
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff fa4a 	bl	8010e08 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011976:	331c      	adds	r3, #28
 8011978:	2100      	movs	r1, #0
 801197a:	4618      	mov	r0, r3
 801197c:	f7fe facc 	bl	800ff18 <st_dword>
					fs->wflag = 1;
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	2201      	movs	r2, #1
 8011984:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011988:	2b00      	cmp	r3, #0
 801198a:	d037      	beq.n	80119fc <f_open+0x1d4>
						dw = fs->winsect;
 801198c:	693b      	ldr	r3, [r7, #16]
 801198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011990:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011992:	f107 0314 	add.w	r3, r7, #20
 8011996:	2200      	movs	r2, #0
 8011998:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801199a:	4618      	mov	r0, r3
 801199c:	f7fe ff5d 	bl	801085a <remove_chain>
 80119a0:	4603      	mov	r3, r0
 80119a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80119a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d126      	bne.n	80119fc <f_open+0x1d4>
							res = move_window(fs, dw);
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fe fd0a 	bl	80103cc <move_window>
 80119b8:	4603      	mov	r3, r0
 80119ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119c2:	3a01      	subs	r2, #1
 80119c4:	60da      	str	r2, [r3, #12]
 80119c6:	e019      	b.n	80119fc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80119c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d115      	bne.n	80119fc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80119d0:	7ebb      	ldrb	r3, [r7, #26]
 80119d2:	f003 0310 	and.w	r3, r3, #16
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d003      	beq.n	80119e2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80119da:	2304      	movs	r3, #4
 80119dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80119e0:	e00c      	b.n	80119fc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80119e2:	79fb      	ldrb	r3, [r7, #7]
 80119e4:	f003 0302 	and.w	r3, r3, #2
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d007      	beq.n	80119fc <f_open+0x1d4>
 80119ec:	7ebb      	ldrb	r3, [r7, #26]
 80119ee:	f003 0301 	and.w	r3, r3, #1
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d002      	beq.n	80119fc <f_open+0x1d4>
						res = FR_DENIED;
 80119f6:	2307      	movs	r3, #7
 80119f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80119fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d128      	bne.n	8011a56 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011a04:	79fb      	ldrb	r3, [r7, #7]
 8011a06:	f003 0308 	and.w	r3, r3, #8
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d003      	beq.n	8011a16 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8011a0e:	79fb      	ldrb	r3, [r7, #7]
 8011a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a14:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011a24:	79fb      	ldrb	r3, [r7, #7]
 8011a26:	f023 0301 	bic.w	r3, r3, #1
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	bf14      	ite	ne
 8011a2e:	2301      	movne	r3, #1
 8011a30:	2300      	moveq	r3, #0
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	461a      	mov	r2, r3
 8011a36:	f107 0314 	add.w	r3, r7, #20
 8011a3a:	4611      	mov	r1, r2
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fe fb93 	bl	8010168 <inc_lock>
 8011a42:	4602      	mov	r2, r0
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	691b      	ldr	r3, [r3, #16]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d102      	bne.n	8011a56 <f_open+0x22e>
 8011a50:	2302      	movs	r3, #2
 8011a52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011a56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	f040 8095 	bne.w	8011b8a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a64:	4611      	mov	r1, r2
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7ff f9af 	bl	8010dca <ld_clust>
 8011a6c:	4602      	mov	r2, r0
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a74:	331c      	adds	r3, #28
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7fe fa10 	bl	800fe9c <ld_dword>
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2200      	movs	r2, #0
 8011a86:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011a88:	693a      	ldr	r2, [r7, #16]
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011a8e:	693b      	ldr	r3, [r7, #16]
 8011a90:	88da      	ldrh	r2, [r3, #6]
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	79fa      	ldrb	r2, [r7, #7]
 8011a9a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	3330      	adds	r3, #48	; 0x30
 8011ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ab6:	2100      	movs	r1, #0
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fe fa7a 	bl	800ffb2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011abe:	79fb      	ldrb	r3, [r7, #7]
 8011ac0:	f003 0320 	and.w	r3, r3, #32
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d060      	beq.n	8011b8a <f_open+0x362>
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	68db      	ldr	r3, [r3, #12]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d05c      	beq.n	8011b8a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	68da      	ldr	r2, [r3, #12]
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	895b      	ldrh	r3, [r3, #10]
 8011adc:	025b      	lsls	r3, r3, #9
 8011ade:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	689b      	ldr	r3, [r3, #8]
 8011ae4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	68db      	ldr	r3, [r3, #12]
 8011aea:	657b      	str	r3, [r7, #84]	; 0x54
 8011aec:	e016      	b.n	8011b1c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7fe fd25 	bl	8010542 <get_fat>
 8011af8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	d802      	bhi.n	8011b06 <f_open+0x2de>
 8011b00:	2302      	movs	r3, #2
 8011b02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b0c:	d102      	bne.n	8011b14 <f_open+0x2ec>
 8011b0e:	2301      	movs	r3, #1
 8011b10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b18:	1ad3      	subs	r3, r2, r3
 8011b1a:	657b      	str	r3, [r7, #84]	; 0x54
 8011b1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d103      	bne.n	8011b2c <f_open+0x304>
 8011b24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d8e0      	bhi.n	8011aee <f_open+0x2c6>
				}
				fp->clust = clst;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b30:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d127      	bne.n	8011b8a <f_open+0x362>
 8011b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d022      	beq.n	8011b8a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7fe fcdb 	bl	8010504 <clust2sect>
 8011b4e:	6478      	str	r0, [r7, #68]	; 0x44
 8011b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d103      	bne.n	8011b5e <f_open+0x336>
						res = FR_INT_ERR;
 8011b56:	2302      	movs	r3, #2
 8011b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011b5c:	e015      	b.n	8011b8a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b60:	0a5a      	lsrs	r2, r3, #9
 8011b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b64:	441a      	add	r2, r3
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	7858      	ldrb	r0, [r3, #1]
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	6a1a      	ldr	r2, [r3, #32]
 8011b78:	2301      	movs	r3, #1
 8011b7a:	f7fe f919 	bl	800fdb0 <disk_read>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d002      	beq.n	8011b8a <f_open+0x362>
 8011b84:	2301      	movs	r3, #1
 8011b86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d002      	beq.n	8011b98 <f_open+0x370>
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2200      	movs	r2, #0
 8011b96:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011b98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3760      	adds	r7, #96	; 0x60
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b08c      	sub	sp, #48	; 0x30
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	60f8      	str	r0, [r7, #12]
 8011bac:	60b9      	str	r1, [r7, #8]
 8011bae:	607a      	str	r2, [r7, #4]
 8011bb0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	f107 0210 	add.w	r2, r7, #16
 8011bc2:	4611      	mov	r1, r2
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7ff fdb3 	bl	8011730 <validate>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d107      	bne.n	8011be8 <f_write+0x44>
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	7d5b      	ldrb	r3, [r3, #21]
 8011bdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011be0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d002      	beq.n	8011bee <f_write+0x4a>
 8011be8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bec:	e14b      	b.n	8011e86 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	7d1b      	ldrb	r3, [r3, #20]
 8011bf2:	f003 0302 	and.w	r3, r3, #2
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d101      	bne.n	8011bfe <f_write+0x5a>
 8011bfa:	2307      	movs	r3, #7
 8011bfc:	e143      	b.n	8011e86 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	699a      	ldr	r2, [r3, #24]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	441a      	add	r2, r3
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	699b      	ldr	r3, [r3, #24]
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	f080 812d 	bcs.w	8011e6a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	699b      	ldr	r3, [r3, #24]
 8011c14:	43db      	mvns	r3, r3
 8011c16:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011c18:	e127      	b.n	8011e6a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	699b      	ldr	r3, [r3, #24]
 8011c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f040 80e3 	bne.w	8011dee <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	699b      	ldr	r3, [r3, #24]
 8011c2c:	0a5b      	lsrs	r3, r3, #9
 8011c2e:	693a      	ldr	r2, [r7, #16]
 8011c30:	8952      	ldrh	r2, [r2, #10]
 8011c32:	3a01      	subs	r2, #1
 8011c34:	4013      	ands	r3, r2
 8011c36:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011c38:	69bb      	ldr	r3, [r7, #24]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d143      	bne.n	8011cc6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	699b      	ldr	r3, [r3, #24]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d10c      	bne.n	8011c60 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	689b      	ldr	r3, [r3, #8]
 8011c4a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d11a      	bne.n	8011c88 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2100      	movs	r1, #0
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7fe fe64 	bl	8010924 <create_chain>
 8011c5c:	62b8      	str	r0, [r7, #40]	; 0x28
 8011c5e:	e013      	b.n	8011c88 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d007      	beq.n	8011c78 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	699b      	ldr	r3, [r3, #24]
 8011c6c:	4619      	mov	r1, r3
 8011c6e:	68f8      	ldr	r0, [r7, #12]
 8011c70:	f7fe fef0 	bl	8010a54 <clmt_clust>
 8011c74:	62b8      	str	r0, [r7, #40]	; 0x28
 8011c76:	e007      	b.n	8011c88 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	69db      	ldr	r3, [r3, #28]
 8011c7e:	4619      	mov	r1, r3
 8011c80:	4610      	mov	r0, r2
 8011c82:	f7fe fe4f 	bl	8010924 <create_chain>
 8011c86:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	f000 80f2 	beq.w	8011e74 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d104      	bne.n	8011ca0 <f_write+0xfc>
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	2202      	movs	r2, #2
 8011c9a:	755a      	strb	r2, [r3, #21]
 8011c9c:	2302      	movs	r3, #2
 8011c9e:	e0f2      	b.n	8011e86 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ca6:	d104      	bne.n	8011cb2 <f_write+0x10e>
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2201      	movs	r2, #1
 8011cac:	755a      	strb	r2, [r3, #21]
 8011cae:	2301      	movs	r3, #1
 8011cb0:	e0e9      	b.n	8011e86 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cb6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	689b      	ldr	r3, [r3, #8]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d102      	bne.n	8011cc6 <f_write+0x122>
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cc4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	7d1b      	ldrb	r3, [r3, #20]
 8011cca:	b25b      	sxtb	r3, r3
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	da18      	bge.n	8011d02 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	7858      	ldrb	r0, [r3, #1]
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	6a1a      	ldr	r2, [r3, #32]
 8011cde:	2301      	movs	r3, #1
 8011ce0:	f7fe f886 	bl	800fdf0 <disk_write>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d004      	beq.n	8011cf4 <f_write+0x150>
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	2201      	movs	r2, #1
 8011cee:	755a      	strb	r2, [r3, #21]
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	e0c8      	b.n	8011e86 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	7d1b      	ldrb	r3, [r3, #20]
 8011cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cfc:	b2da      	uxtb	r2, r3
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011d02:	693a      	ldr	r2, [r7, #16]
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	69db      	ldr	r3, [r3, #28]
 8011d08:	4619      	mov	r1, r3
 8011d0a:	4610      	mov	r0, r2
 8011d0c:	f7fe fbfa 	bl	8010504 <clust2sect>
 8011d10:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d104      	bne.n	8011d22 <f_write+0x17e>
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2202      	movs	r2, #2
 8011d1c:	755a      	strb	r2, [r3, #21]
 8011d1e:	2302      	movs	r3, #2
 8011d20:	e0b1      	b.n	8011e86 <f_write+0x2e2>
			sect += csect;
 8011d22:	697a      	ldr	r2, [r7, #20]
 8011d24:	69bb      	ldr	r3, [r7, #24]
 8011d26:	4413      	add	r3, r2
 8011d28:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	0a5b      	lsrs	r3, r3, #9
 8011d2e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011d30:	6a3b      	ldr	r3, [r7, #32]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d03c      	beq.n	8011db0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011d36:	69ba      	ldr	r2, [r7, #24]
 8011d38:	6a3b      	ldr	r3, [r7, #32]
 8011d3a:	4413      	add	r3, r2
 8011d3c:	693a      	ldr	r2, [r7, #16]
 8011d3e:	8952      	ldrh	r2, [r2, #10]
 8011d40:	4293      	cmp	r3, r2
 8011d42:	d905      	bls.n	8011d50 <f_write+0x1ac>
					cc = fs->csize - csect;
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	895b      	ldrh	r3, [r3, #10]
 8011d48:	461a      	mov	r2, r3
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	1ad3      	subs	r3, r2, r3
 8011d4e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	7858      	ldrb	r0, [r3, #1]
 8011d54:	6a3b      	ldr	r3, [r7, #32]
 8011d56:	697a      	ldr	r2, [r7, #20]
 8011d58:	69f9      	ldr	r1, [r7, #28]
 8011d5a:	f7fe f849 	bl	800fdf0 <disk_write>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d004      	beq.n	8011d6e <f_write+0x1ca>
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2201      	movs	r2, #1
 8011d68:	755a      	strb	r2, [r3, #21]
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	e08b      	b.n	8011e86 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	6a1a      	ldr	r2, [r3, #32]
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	1ad3      	subs	r3, r2, r3
 8011d76:	6a3a      	ldr	r2, [r7, #32]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d915      	bls.n	8011da8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	6a1a      	ldr	r2, [r3, #32]
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	1ad3      	subs	r3, r2, r3
 8011d8a:	025b      	lsls	r3, r3, #9
 8011d8c:	69fa      	ldr	r2, [r7, #28]
 8011d8e:	4413      	add	r3, r2
 8011d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d94:	4619      	mov	r1, r3
 8011d96:	f7fe f8eb 	bl	800ff70 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	7d1b      	ldrb	r3, [r3, #20]
 8011d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011da2:	b2da      	uxtb	r2, r3
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011da8:	6a3b      	ldr	r3, [r7, #32]
 8011daa:	025b      	lsls	r3, r3, #9
 8011dac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011dae:	e03f      	b.n	8011e30 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	6a1b      	ldr	r3, [r3, #32]
 8011db4:	697a      	ldr	r2, [r7, #20]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d016      	beq.n	8011de8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	699a      	ldr	r2, [r3, #24]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d210      	bcs.n	8011de8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	7858      	ldrb	r0, [r3, #1]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	697a      	ldr	r2, [r7, #20]
 8011dd4:	f7fd ffec 	bl	800fdb0 <disk_read>
 8011dd8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d004      	beq.n	8011de8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	2201      	movs	r2, #1
 8011de2:	755a      	strb	r2, [r3, #21]
 8011de4:	2301      	movs	r3, #1
 8011de6:	e04e      	b.n	8011e86 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	697a      	ldr	r2, [r7, #20]
 8011dec:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	699b      	ldr	r3, [r3, #24]
 8011df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011df6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011dfa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d901      	bls.n	8011e08 <f_write+0x264>
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	699b      	ldr	r3, [r3, #24]
 8011e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e16:	4413      	add	r3, r2
 8011e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e1a:	69f9      	ldr	r1, [r7, #28]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fe f8a7 	bl	800ff70 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	7d1b      	ldrb	r3, [r3, #20]
 8011e26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e2a:	b2da      	uxtb	r2, r3
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011e30:	69fa      	ldr	r2, [r7, #28]
 8011e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e34:	4413      	add	r3, r2
 8011e36:	61fb      	str	r3, [r7, #28]
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	699a      	ldr	r2, [r3, #24]
 8011e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3e:	441a      	add	r2, r3
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	619a      	str	r2, [r3, #24]
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	68da      	ldr	r2, [r3, #12]
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	699b      	ldr	r3, [r3, #24]
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	bf38      	it	cc
 8011e50:	461a      	movcc	r2, r3
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	60da      	str	r2, [r3, #12]
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5c:	441a      	add	r2, r3
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	601a      	str	r2, [r3, #0]
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e66:	1ad3      	subs	r3, r2, r3
 8011e68:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f47f aed4 	bne.w	8011c1a <f_write+0x76>
 8011e72:	e000      	b.n	8011e76 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011e74:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	7d1b      	ldrb	r3, [r3, #20]
 8011e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e7e:	b2da      	uxtb	r2, r3
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011e84:	2300      	movs	r3, #0
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3730      	adds	r7, #48	; 0x30
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}

08011e8e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011e8e:	b580      	push	{r7, lr}
 8011e90:	b086      	sub	sp, #24
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f107 0208 	add.w	r2, r7, #8
 8011e9c:	4611      	mov	r1, r2
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7ff fc46 	bl	8011730 <validate>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011ea8:	7dfb      	ldrb	r3, [r7, #23]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d168      	bne.n	8011f80 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	7d1b      	ldrb	r3, [r3, #20]
 8011eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d062      	beq.n	8011f80 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	7d1b      	ldrb	r3, [r3, #20]
 8011ebe:	b25b      	sxtb	r3, r3
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	da15      	bge.n	8011ef0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	7858      	ldrb	r0, [r3, #1]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6a1a      	ldr	r2, [r3, #32]
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	f7fd ff8c 	bl	800fdf0 <disk_write>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d001      	beq.n	8011ee2 <f_sync+0x54>
 8011ede:	2301      	movs	r3, #1
 8011ee0:	e04f      	b.n	8011f82 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	7d1b      	ldrb	r3, [r3, #20]
 8011ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011eea:	b2da      	uxtb	r2, r3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011ef0:	f7fa fee4 	bl	800ccbc <get_fattime>
 8011ef4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011ef6:	68ba      	ldr	r2, [r7, #8]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011efc:	4619      	mov	r1, r3
 8011efe:	4610      	mov	r0, r2
 8011f00:	f7fe fa64 	bl	80103cc <move_window>
 8011f04:	4603      	mov	r3, r0
 8011f06:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011f08:	7dfb      	ldrb	r3, [r7, #23]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d138      	bne.n	8011f80 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f12:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	330b      	adds	r3, #11
 8011f18:	781a      	ldrb	r2, [r3, #0]
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	330b      	adds	r3, #11
 8011f1e:	f042 0220 	orr.w	r2, r2, #32
 8011f22:	b2d2      	uxtb	r2, r2
 8011f24:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6818      	ldr	r0, [r3, #0]
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	689b      	ldr	r3, [r3, #8]
 8011f2e:	461a      	mov	r2, r3
 8011f30:	68f9      	ldr	r1, [r7, #12]
 8011f32:	f7fe ff69 	bl	8010e08 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	f103 021c 	add.w	r2, r3, #28
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	68db      	ldr	r3, [r3, #12]
 8011f40:	4619      	mov	r1, r3
 8011f42:	4610      	mov	r0, r2
 8011f44:	f7fd ffe8 	bl	800ff18 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	3316      	adds	r3, #22
 8011f4c:	6939      	ldr	r1, [r7, #16]
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7fd ffe2 	bl	800ff18 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	3312      	adds	r3, #18
 8011f58:	2100      	movs	r1, #0
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7fd ffc1 	bl	800fee2 <st_word>
					fs->wflag = 1;
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	2201      	movs	r2, #1
 8011f64:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fe fa5d 	bl	8010428 <sync_fs>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	7d1b      	ldrb	r3, [r3, #20]
 8011f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f7a:	b2da      	uxtb	r2, r3
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f82:	4618      	mov	r0, r3
 8011f84:	3718      	adds	r7, #24
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b084      	sub	sp, #16
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f7ff ff7b 	bl	8011e8e <f_sync>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011f9c:	7bfb      	ldrb	r3, [r7, #15]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d118      	bne.n	8011fd4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f107 0208 	add.w	r2, r7, #8
 8011fa8:	4611      	mov	r1, r2
 8011faa:	4618      	mov	r0, r3
 8011fac:	f7ff fbc0 	bl	8011730 <validate>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011fb4:	7bfb      	ldrb	r3, [r7, #15]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d10c      	bne.n	8011fd4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	691b      	ldr	r3, [r3, #16]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fe f960 	bl	8010284 <dec_lock>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011fc8:	7bfb      	ldrb	r3, [r7, #15]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d102      	bne.n	8011fd4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3710      	adds	r7, #16
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
	...

08011fe0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b087      	sub	sp, #28
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	60b9      	str	r1, [r7, #8]
 8011fea:	4613      	mov	r3, r2
 8011fec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011fee:	2301      	movs	r3, #1
 8011ff0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011ff6:	4b1f      	ldr	r3, [pc, #124]	; (8012074 <FATFS_LinkDriverEx+0x94>)
 8011ff8:	7a5b      	ldrb	r3, [r3, #9]
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d131      	bne.n	8012064 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012000:	4b1c      	ldr	r3, [pc, #112]	; (8012074 <FATFS_LinkDriverEx+0x94>)
 8012002:	7a5b      	ldrb	r3, [r3, #9]
 8012004:	b2db      	uxtb	r3, r3
 8012006:	461a      	mov	r2, r3
 8012008:	4b1a      	ldr	r3, [pc, #104]	; (8012074 <FATFS_LinkDriverEx+0x94>)
 801200a:	2100      	movs	r1, #0
 801200c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801200e:	4b19      	ldr	r3, [pc, #100]	; (8012074 <FATFS_LinkDriverEx+0x94>)
 8012010:	7a5b      	ldrb	r3, [r3, #9]
 8012012:	b2db      	uxtb	r3, r3
 8012014:	4a17      	ldr	r2, [pc, #92]	; (8012074 <FATFS_LinkDriverEx+0x94>)
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	4413      	add	r3, r2
 801201a:	68fa      	ldr	r2, [r7, #12]
 801201c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801201e:	4b15      	ldr	r3, [pc, #84]	; (8012074 <FATFS_LinkDriverEx+0x94>)
 8012020:	7a5b      	ldrb	r3, [r3, #9]
 8012022:	b2db      	uxtb	r3, r3
 8012024:	461a      	mov	r2, r3
 8012026:	4b13      	ldr	r3, [pc, #76]	; (8012074 <FATFS_LinkDriverEx+0x94>)
 8012028:	4413      	add	r3, r2
 801202a:	79fa      	ldrb	r2, [r7, #7]
 801202c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801202e:	4b11      	ldr	r3, [pc, #68]	; (8012074 <FATFS_LinkDriverEx+0x94>)
 8012030:	7a5b      	ldrb	r3, [r3, #9]
 8012032:	b2db      	uxtb	r3, r3
 8012034:	1c5a      	adds	r2, r3, #1
 8012036:	b2d1      	uxtb	r1, r2
 8012038:	4a0e      	ldr	r2, [pc, #56]	; (8012074 <FATFS_LinkDriverEx+0x94>)
 801203a:	7251      	strb	r1, [r2, #9]
 801203c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801203e:	7dbb      	ldrb	r3, [r7, #22]
 8012040:	3330      	adds	r3, #48	; 0x30
 8012042:	b2da      	uxtb	r2, r3
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	3301      	adds	r3, #1
 801204c:	223a      	movs	r2, #58	; 0x3a
 801204e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	3302      	adds	r3, #2
 8012054:	222f      	movs	r2, #47	; 0x2f
 8012056:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	3303      	adds	r3, #3
 801205c:	2200      	movs	r2, #0
 801205e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012060:	2300      	movs	r3, #0
 8012062:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012064:	7dfb      	ldrb	r3, [r7, #23]
}
 8012066:	4618      	mov	r0, r3
 8012068:	371c      	adds	r7, #28
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop
 8012074:	2400021c 	.word	0x2400021c

08012078 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012082:	2200      	movs	r2, #0
 8012084:	6839      	ldr	r1, [r7, #0]
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f7ff ffaa 	bl	8011fe0 <FATFS_LinkDriverEx>
 801208c:	4603      	mov	r3, r0
}
 801208e:	4618      	mov	r0, r3
 8012090:	3708      	adds	r7, #8
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
	...

08012098 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801209c:	2200      	movs	r2, #0
 801209e:	4913      	ldr	r1, [pc, #76]	; (80120ec <MX_USB_DEVICE_Init+0x54>)
 80120a0:	4813      	ldr	r0, [pc, #76]	; (80120f0 <MX_USB_DEVICE_Init+0x58>)
 80120a2:	f7fc fd5e 	bl	800eb62 <USBD_Init>
 80120a6:	4603      	mov	r3, r0
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d001      	beq.n	80120b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80120ac:	f7ee ff98 	bl	8000fe0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80120b0:	4910      	ldr	r1, [pc, #64]	; (80120f4 <MX_USB_DEVICE_Init+0x5c>)
 80120b2:	480f      	ldr	r0, [pc, #60]	; (80120f0 <MX_USB_DEVICE_Init+0x58>)
 80120b4:	f7fc fd8b 	bl	800ebce <USBD_RegisterClass>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d001      	beq.n	80120c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80120be:	f7ee ff8f 	bl	8000fe0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80120c2:	490d      	ldr	r1, [pc, #52]	; (80120f8 <MX_USB_DEVICE_Init+0x60>)
 80120c4:	480a      	ldr	r0, [pc, #40]	; (80120f0 <MX_USB_DEVICE_Init+0x58>)
 80120c6:	f7fb f935 	bl	800d334 <USBD_MSC_RegisterStorage>
 80120ca:	4603      	mov	r3, r0
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d001      	beq.n	80120d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80120d0:	f7ee ff86 	bl	8000fe0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80120d4:	4806      	ldr	r0, [pc, #24]	; (80120f0 <MX_USB_DEVICE_Init+0x58>)
 80120d6:	f7fc fd9b 	bl	800ec10 <USBD_Start>
 80120da:	4603      	mov	r3, r0
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d001      	beq.n	80120e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80120e0:	f7ee ff7e 	bl	8000fe0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80120e4:	f7f3 f8e4 	bl	80052b0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80120e8:	bf00      	nop
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	240000f8 	.word	0x240000f8
 80120f0:	24000ed8 	.word	0x24000ed8
 80120f4:	24000010 	.word	0x24000010
 80120f8:	24000148 	.word	0x24000148

080120fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120fc:	b480      	push	{r7}
 80120fe:	b083      	sub	sp, #12
 8012100:	af00      	add	r7, sp, #0
 8012102:	4603      	mov	r3, r0
 8012104:	6039      	str	r1, [r7, #0]
 8012106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	2212      	movs	r2, #18
 801210c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801210e:	4b03      	ldr	r3, [pc, #12]	; (801211c <USBD_FS_DeviceDescriptor+0x20>)
}
 8012110:	4618      	mov	r0, r3
 8012112:	370c      	adds	r7, #12
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr
 801211c:	24000114 	.word	0x24000114

08012120 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012120:	b480      	push	{r7}
 8012122:	b083      	sub	sp, #12
 8012124:	af00      	add	r7, sp, #0
 8012126:	4603      	mov	r3, r0
 8012128:	6039      	str	r1, [r7, #0]
 801212a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	2204      	movs	r2, #4
 8012130:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012132:	4b03      	ldr	r3, [pc, #12]	; (8012140 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012134:	4618      	mov	r0, r3
 8012136:	370c      	adds	r7, #12
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr
 8012140:	24000128 	.word	0x24000128

08012144 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b082      	sub	sp, #8
 8012148:	af00      	add	r7, sp, #0
 801214a:	4603      	mov	r3, r0
 801214c:	6039      	str	r1, [r7, #0]
 801214e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012150:	79fb      	ldrb	r3, [r7, #7]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d105      	bne.n	8012162 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012156:	683a      	ldr	r2, [r7, #0]
 8012158:	4907      	ldr	r1, [pc, #28]	; (8012178 <USBD_FS_ProductStrDescriptor+0x34>)
 801215a:	4808      	ldr	r0, [pc, #32]	; (801217c <USBD_FS_ProductStrDescriptor+0x38>)
 801215c:	f7fd fd25 	bl	800fbaa <USBD_GetString>
 8012160:	e004      	b.n	801216c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012162:	683a      	ldr	r2, [r7, #0]
 8012164:	4904      	ldr	r1, [pc, #16]	; (8012178 <USBD_FS_ProductStrDescriptor+0x34>)
 8012166:	4805      	ldr	r0, [pc, #20]	; (801217c <USBD_FS_ProductStrDescriptor+0x38>)
 8012168:	f7fd fd1f 	bl	800fbaa <USBD_GetString>
  }
  return USBD_StrDesc;
 801216c:	4b02      	ldr	r3, [pc, #8]	; (8012178 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801216e:	4618      	mov	r0, r3
 8012170:	3708      	adds	r7, #8
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	240011a8 	.word	0x240011a8
 801217c:	080133f0 	.word	0x080133f0

08012180 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	4603      	mov	r3, r0
 8012188:	6039      	str	r1, [r7, #0]
 801218a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801218c:	683a      	ldr	r2, [r7, #0]
 801218e:	4904      	ldr	r1, [pc, #16]	; (80121a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012190:	4804      	ldr	r0, [pc, #16]	; (80121a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012192:	f7fd fd0a 	bl	800fbaa <USBD_GetString>
  return USBD_StrDesc;
 8012196:	4b02      	ldr	r3, [pc, #8]	; (80121a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012198:	4618      	mov	r0, r3
 801219a:	3708      	adds	r7, #8
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	240011a8 	.word	0x240011a8
 80121a4:	08013404 	.word	0x08013404

080121a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	4603      	mov	r3, r0
 80121b0:	6039      	str	r1, [r7, #0]
 80121b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	221a      	movs	r2, #26
 80121b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80121ba:	f000 f843 	bl	8012244 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80121be:	4b02      	ldr	r3, [pc, #8]	; (80121c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}
 80121c8:	2400012c 	.word	0x2400012c

080121cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b082      	sub	sp, #8
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	4603      	mov	r3, r0
 80121d4:	6039      	str	r1, [r7, #0]
 80121d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80121d8:	79fb      	ldrb	r3, [r7, #7]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d105      	bne.n	80121ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80121de:	683a      	ldr	r2, [r7, #0]
 80121e0:	4907      	ldr	r1, [pc, #28]	; (8012200 <USBD_FS_ConfigStrDescriptor+0x34>)
 80121e2:	4808      	ldr	r0, [pc, #32]	; (8012204 <USBD_FS_ConfigStrDescriptor+0x38>)
 80121e4:	f7fd fce1 	bl	800fbaa <USBD_GetString>
 80121e8:	e004      	b.n	80121f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80121ea:	683a      	ldr	r2, [r7, #0]
 80121ec:	4904      	ldr	r1, [pc, #16]	; (8012200 <USBD_FS_ConfigStrDescriptor+0x34>)
 80121ee:	4805      	ldr	r0, [pc, #20]	; (8012204 <USBD_FS_ConfigStrDescriptor+0x38>)
 80121f0:	f7fd fcdb 	bl	800fbaa <USBD_GetString>
  }
  return USBD_StrDesc;
 80121f4:	4b02      	ldr	r3, [pc, #8]	; (8012200 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	240011a8 	.word	0x240011a8
 8012204:	08013418 	.word	0x08013418

08012208 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	4603      	mov	r3, r0
 8012210:	6039      	str	r1, [r7, #0]
 8012212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012214:	79fb      	ldrb	r3, [r7, #7]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d105      	bne.n	8012226 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801221a:	683a      	ldr	r2, [r7, #0]
 801221c:	4907      	ldr	r1, [pc, #28]	; (801223c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801221e:	4808      	ldr	r0, [pc, #32]	; (8012240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012220:	f7fd fcc3 	bl	800fbaa <USBD_GetString>
 8012224:	e004      	b.n	8012230 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012226:	683a      	ldr	r2, [r7, #0]
 8012228:	4904      	ldr	r1, [pc, #16]	; (801223c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801222a:	4805      	ldr	r0, [pc, #20]	; (8012240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801222c:	f7fd fcbd 	bl	800fbaa <USBD_GetString>
  }
  return USBD_StrDesc;
 8012230:	4b02      	ldr	r3, [pc, #8]	; (801223c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012232:	4618      	mov	r0, r3
 8012234:	3708      	adds	r7, #8
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
 801223a:	bf00      	nop
 801223c:	240011a8 	.word	0x240011a8
 8012240:	08013424 	.word	0x08013424

08012244 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801224a:	4b0f      	ldr	r3, [pc, #60]	; (8012288 <Get_SerialNum+0x44>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012250:	4b0e      	ldr	r3, [pc, #56]	; (801228c <Get_SerialNum+0x48>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012256:	4b0e      	ldr	r3, [pc, #56]	; (8012290 <Get_SerialNum+0x4c>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801225c:	68fa      	ldr	r2, [r7, #12]
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	4413      	add	r3, r2
 8012262:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d009      	beq.n	801227e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801226a:	2208      	movs	r2, #8
 801226c:	4909      	ldr	r1, [pc, #36]	; (8012294 <Get_SerialNum+0x50>)
 801226e:	68f8      	ldr	r0, [r7, #12]
 8012270:	f000 f814 	bl	801229c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012274:	2204      	movs	r2, #4
 8012276:	4908      	ldr	r1, [pc, #32]	; (8012298 <Get_SerialNum+0x54>)
 8012278:	68b8      	ldr	r0, [r7, #8]
 801227a:	f000 f80f 	bl	801229c <IntToUnicode>
  }
}
 801227e:	bf00      	nop
 8012280:	3710      	adds	r7, #16
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	1ff1e800 	.word	0x1ff1e800
 801228c:	1ff1e804 	.word	0x1ff1e804
 8012290:	1ff1e808 	.word	0x1ff1e808
 8012294:	2400012e 	.word	0x2400012e
 8012298:	2400013e 	.word	0x2400013e

0801229c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801229c:	b480      	push	{r7}
 801229e:	b087      	sub	sp, #28
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	4613      	mov	r3, r2
 80122a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80122aa:	2300      	movs	r3, #0
 80122ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80122ae:	2300      	movs	r3, #0
 80122b0:	75fb      	strb	r3, [r7, #23]
 80122b2:	e027      	b.n	8012304 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	0f1b      	lsrs	r3, r3, #28
 80122b8:	2b09      	cmp	r3, #9
 80122ba:	d80b      	bhi.n	80122d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	0f1b      	lsrs	r3, r3, #28
 80122c0:	b2da      	uxtb	r2, r3
 80122c2:	7dfb      	ldrb	r3, [r7, #23]
 80122c4:	005b      	lsls	r3, r3, #1
 80122c6:	4619      	mov	r1, r3
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	440b      	add	r3, r1
 80122cc:	3230      	adds	r2, #48	; 0x30
 80122ce:	b2d2      	uxtb	r2, r2
 80122d0:	701a      	strb	r2, [r3, #0]
 80122d2:	e00a      	b.n	80122ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	0f1b      	lsrs	r3, r3, #28
 80122d8:	b2da      	uxtb	r2, r3
 80122da:	7dfb      	ldrb	r3, [r7, #23]
 80122dc:	005b      	lsls	r3, r3, #1
 80122de:	4619      	mov	r1, r3
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	440b      	add	r3, r1
 80122e4:	3237      	adds	r2, #55	; 0x37
 80122e6:	b2d2      	uxtb	r2, r2
 80122e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	011b      	lsls	r3, r3, #4
 80122ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80122f0:	7dfb      	ldrb	r3, [r7, #23]
 80122f2:	005b      	lsls	r3, r3, #1
 80122f4:	3301      	adds	r3, #1
 80122f6:	68ba      	ldr	r2, [r7, #8]
 80122f8:	4413      	add	r3, r2
 80122fa:	2200      	movs	r2, #0
 80122fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80122fe:	7dfb      	ldrb	r3, [r7, #23]
 8012300:	3301      	adds	r3, #1
 8012302:	75fb      	strb	r3, [r7, #23]
 8012304:	7dfa      	ldrb	r2, [r7, #23]
 8012306:	79fb      	ldrb	r3, [r7, #7]
 8012308:	429a      	cmp	r2, r3
 801230a:	d3d3      	bcc.n	80122b4 <IntToUnicode+0x18>
  }
}
 801230c:	bf00      	nop
 801230e:	371c      	adds	r7, #28
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr

08012318 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8012318:	b480      	push	{r7}
 801231a:	b083      	sub	sp, #12
 801231c:	af00      	add	r7, sp, #0
 801231e:	4603      	mov	r3, r0
 8012320:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8012322:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8012324:	4618      	mov	r0, r3
 8012326:	370c      	adds	r7, #12
 8012328:	46bd      	mov	sp, r7
 801232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232e:	4770      	bx	lr

08012330 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b08e      	sub	sp, #56	; 0x38
 8012334:	af00      	add	r7, sp, #0
 8012336:	4603      	mov	r3, r0
 8012338:	60b9      	str	r1, [r7, #8]
 801233a:	607a      	str	r2, [r7, #4]
 801233c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801233e:	23ff      	movs	r3, #255	; 0xff
 8012340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8012344:	f107 0310 	add.w	r3, r7, #16
 8012348:	4619      	mov	r1, r3
 801234a:	480a      	ldr	r0, [pc, #40]	; (8012374 <STORAGE_GetCapacity_FS+0x44>)
 801234c:	f7f6 fce6 	bl	8008d1c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8012350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012352:	1e5a      	subs	r2, r3, #1
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8012358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235a:	b29a      	uxth	r2, r3
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8012360:	2300      	movs	r3, #0
 8012362:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8012366:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801236a:	4618      	mov	r0, r3
 801236c:	3738      	adds	r7, #56	; 0x38
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	24000564 	.word	0x24000564

08012378 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8012378:	b480      	push	{r7}
 801237a:	b083      	sub	sp, #12
 801237c:	af00      	add	r7, sp, #0
 801237e:	4603      	mov	r3, r0
 8012380:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012382:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012384:	4618      	mov	r0, r3
 8012386:	370c      	adds	r7, #12
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr

08012390 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8012390:	b480      	push	{r7}
 8012392:	b083      	sub	sp, #12
 8012394:	af00      	add	r7, sp, #0
 8012396:	4603      	mov	r3, r0
 8012398:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801239a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801239c:	4618      	mov	r0, r3
 801239e:	370c      	adds	r7, #12
 80123a0:	46bd      	mov	sp, r7
 80123a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a6:	4770      	bx	lr

080123a8 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b088      	sub	sp, #32
 80123ac:	af02      	add	r7, sp, #8
 80123ae:	60b9      	str	r1, [r7, #8]
 80123b0:	607a      	str	r2, [r7, #4]
 80123b2:	461a      	mov	r2, r3
 80123b4:	4603      	mov	r3, r0
 80123b6:	73fb      	strb	r3, [r7, #15]
 80123b8:	4613      	mov	r3, r2
 80123ba:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 80123bc:	23ff      	movs	r3, #255	; 0xff
 80123be:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80123c0:	89ba      	ldrh	r2, [r7, #12]
 80123c2:	f04f 33ff 	mov.w	r3, #4294967295
 80123c6:	9300      	str	r3, [sp, #0]
 80123c8:	4613      	mov	r3, r2
 80123ca:	687a      	ldr	r2, [r7, #4]
 80123cc:	68b9      	ldr	r1, [r7, #8]
 80123ce:	4809      	ldr	r0, [pc, #36]	; (80123f4 <STORAGE_Read_FS+0x4c>)
 80123d0:	f7f5 ff26 	bl	8008220 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80123d4:	bf00      	nop
 80123d6:	4807      	ldr	r0, [pc, #28]	; (80123f4 <STORAGE_Read_FS+0x4c>)
 80123d8:	f7f6 fd76 	bl	8008ec8 <HAL_SD_GetCardState>
 80123dc:	4603      	mov	r3, r0
 80123de:	2b04      	cmp	r3, #4
 80123e0:	d1f9      	bne.n	80123d6 <STORAGE_Read_FS+0x2e>
	ret = 0;
 80123e2:	2300      	movs	r3, #0
 80123e4:	75fb      	strb	r3, [r7, #23]
	return ret;
 80123e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	3718      	adds	r7, #24
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}
 80123f2:	bf00      	nop
 80123f4:	24000564 	.word	0x24000564

080123f8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b088      	sub	sp, #32
 80123fc:	af02      	add	r7, sp, #8
 80123fe:	60b9      	str	r1, [r7, #8]
 8012400:	607a      	str	r2, [r7, #4]
 8012402:	461a      	mov	r2, r3
 8012404:	4603      	mov	r3, r0
 8012406:	73fb      	strb	r3, [r7, #15]
 8012408:	4613      	mov	r3, r2
 801240a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 801240c:	23ff      	movs	r3, #255	; 0xff
 801240e:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8012410:	89ba      	ldrh	r2, [r7, #12]
 8012412:	f04f 33ff 	mov.w	r3, #4294967295
 8012416:	9300      	str	r3, [sp, #0]
 8012418:	4613      	mov	r3, r2
 801241a:	687a      	ldr	r2, [r7, #4]
 801241c:	68b9      	ldr	r1, [r7, #8]
 801241e:	4809      	ldr	r0, [pc, #36]	; (8012444 <STORAGE_Write_FS+0x4c>)
 8012420:	f7f6 f888 	bl	8008534 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8012424:	bf00      	nop
 8012426:	4807      	ldr	r0, [pc, #28]	; (8012444 <STORAGE_Write_FS+0x4c>)
 8012428:	f7f6 fd4e 	bl	8008ec8 <HAL_SD_GetCardState>
 801242c:	4603      	mov	r3, r0
 801242e:	2b04      	cmp	r3, #4
 8012430:	d1f9      	bne.n	8012426 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8012432:	2300      	movs	r3, #0
 8012434:	75fb      	strb	r3, [r7, #23]
	return ret;
 8012436:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801243a:	4618      	mov	r0, r3
 801243c:	3718      	adds	r7, #24
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}
 8012442:	bf00      	nop
 8012444:	24000564 	.word	0x24000564

08012448 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8012448:	b480      	push	{r7}
 801244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801244c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801244e:	4618      	mov	r0, r3
 8012450:	46bd      	mov	sp, r7
 8012452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012456:	4770      	bx	lr

08012458 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b08a      	sub	sp, #40	; 0x28
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012460:	f107 0314 	add.w	r3, r7, #20
 8012464:	2200      	movs	r2, #0
 8012466:	601a      	str	r2, [r3, #0]
 8012468:	605a      	str	r2, [r3, #4]
 801246a:	609a      	str	r2, [r3, #8]
 801246c:	60da      	str	r2, [r3, #12]
 801246e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	4a1e      	ldr	r2, [pc, #120]	; (80124f0 <HAL_PCD_MspInit+0x98>)
 8012476:	4293      	cmp	r3, r2
 8012478:	d136      	bne.n	80124e8 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801247a:	4b1e      	ldr	r3, [pc, #120]	; (80124f4 <HAL_PCD_MspInit+0x9c>)
 801247c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012480:	4a1c      	ldr	r2, [pc, #112]	; (80124f4 <HAL_PCD_MspInit+0x9c>)
 8012482:	f043 0301 	orr.w	r3, r3, #1
 8012486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801248a:	4b1a      	ldr	r3, [pc, #104]	; (80124f4 <HAL_PCD_MspInit+0x9c>)
 801248c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012490:	f003 0301 	and.w	r3, r3, #1
 8012494:	613b      	str	r3, [r7, #16]
 8012496:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012498:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801249e:	2302      	movs	r3, #2
 80124a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124a2:	2300      	movs	r3, #0
 80124a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124a6:	2300      	movs	r3, #0
 80124a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80124aa:	230a      	movs	r3, #10
 80124ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80124ae:	f107 0314 	add.w	r3, r7, #20
 80124b2:	4619      	mov	r1, r3
 80124b4:	4810      	ldr	r0, [pc, #64]	; (80124f8 <HAL_PCD_MspInit+0xa0>)
 80124b6:	f7f1 fad5 	bl	8003a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80124ba:	4b0e      	ldr	r3, [pc, #56]	; (80124f4 <HAL_PCD_MspInit+0x9c>)
 80124bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80124c0:	4a0c      	ldr	r2, [pc, #48]	; (80124f4 <HAL_PCD_MspInit+0x9c>)
 80124c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80124c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80124ca:	4b0a      	ldr	r3, [pc, #40]	; (80124f4 <HAL_PCD_MspInit+0x9c>)
 80124cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80124d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80124d4:	60fb      	str	r3, [r7, #12]
 80124d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80124d8:	2200      	movs	r2, #0
 80124da:	2100      	movs	r1, #0
 80124dc:	2065      	movs	r0, #101	; 0x65
 80124de:	f7ef fa62 	bl	80019a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80124e2:	2065      	movs	r0, #101	; 0x65
 80124e4:	f7ef fa79 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80124e8:	bf00      	nop
 80124ea:	3728      	adds	r7, #40	; 0x28
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	40080000 	.word	0x40080000
 80124f4:	58024400 	.word	0x58024400
 80124f8:	58020000 	.word	0x58020000

080124fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012510:	4619      	mov	r1, r3
 8012512:	4610      	mov	r0, r2
 8012514:	f7fc fbc7 	bl	800eca6 <USBD_LL_SetupStage>
}
 8012518:	bf00      	nop
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	460b      	mov	r3, r1
 801252a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012532:	78fa      	ldrb	r2, [r7, #3]
 8012534:	6879      	ldr	r1, [r7, #4]
 8012536:	4613      	mov	r3, r2
 8012538:	00db      	lsls	r3, r3, #3
 801253a:	1a9b      	subs	r3, r3, r2
 801253c:	009b      	lsls	r3, r3, #2
 801253e:	440b      	add	r3, r1
 8012540:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012544:	681a      	ldr	r2, [r3, #0]
 8012546:	78fb      	ldrb	r3, [r7, #3]
 8012548:	4619      	mov	r1, r3
 801254a:	f7fc fbff 	bl	800ed4c <USBD_LL_DataOutStage>
}
 801254e:	bf00      	nop
 8012550:	3708      	adds	r7, #8
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012556:	b580      	push	{r7, lr}
 8012558:	b082      	sub	sp, #8
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
 801255e:	460b      	mov	r3, r1
 8012560:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012568:	78fa      	ldrb	r2, [r7, #3]
 801256a:	6879      	ldr	r1, [r7, #4]
 801256c:	4613      	mov	r3, r2
 801256e:	00db      	lsls	r3, r3, #3
 8012570:	1a9b      	subs	r3, r3, r2
 8012572:	009b      	lsls	r3, r3, #2
 8012574:	440b      	add	r3, r1
 8012576:	3348      	adds	r3, #72	; 0x48
 8012578:	681a      	ldr	r2, [r3, #0]
 801257a:	78fb      	ldrb	r3, [r7, #3]
 801257c:	4619      	mov	r1, r3
 801257e:	f7fc fc48 	bl	800ee12 <USBD_LL_DataInStage>
}
 8012582:	bf00      	nop
 8012584:	3708      	adds	r7, #8
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}

0801258a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801258a:	b580      	push	{r7, lr}
 801258c:	b082      	sub	sp, #8
 801258e:	af00      	add	r7, sp, #0
 8012590:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012598:	4618      	mov	r0, r3
 801259a:	f7fc fd4c 	bl	800f036 <USBD_LL_SOF>
}
 801259e:	bf00      	nop
 80125a0:	3708      	adds	r7, #8
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b084      	sub	sp, #16
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80125ae:	2301      	movs	r3, #1
 80125b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d102      	bne.n	80125c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80125ba:	2300      	movs	r3, #0
 80125bc:	73fb      	strb	r3, [r7, #15]
 80125be:	e008      	b.n	80125d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	68db      	ldr	r3, [r3, #12]
 80125c4:	2b02      	cmp	r3, #2
 80125c6:	d102      	bne.n	80125ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80125c8:	2301      	movs	r3, #1
 80125ca:	73fb      	strb	r3, [r7, #15]
 80125cc:	e001      	b.n	80125d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80125ce:	f7ee fd07 	bl	8000fe0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80125d8:	7bfa      	ldrb	r2, [r7, #15]
 80125da:	4611      	mov	r1, r2
 80125dc:	4618      	mov	r0, r3
 80125de:	f7fc fcef 	bl	800efc0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fc fca8 	bl	800ef3e <USBD_LL_Reset>
}
 80125ee:	bf00      	nop
 80125f0:	3710      	adds	r7, #16
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}
	...

080125f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012606:	4618      	mov	r0, r3
 8012608:	f7fc fcea 	bl	800efe0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	6812      	ldr	r2, [r2, #0]
 801261a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801261e:	f043 0301 	orr.w	r3, r3, #1
 8012622:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6a1b      	ldr	r3, [r3, #32]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d005      	beq.n	8012638 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801262c:	4b04      	ldr	r3, [pc, #16]	; (8012640 <HAL_PCD_SuspendCallback+0x48>)
 801262e:	691b      	ldr	r3, [r3, #16]
 8012630:	4a03      	ldr	r2, [pc, #12]	; (8012640 <HAL_PCD_SuspendCallback+0x48>)
 8012632:	f043 0306 	orr.w	r3, r3, #6
 8012636:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012638:	bf00      	nop
 801263a:	3708      	adds	r7, #8
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}
 8012640:	e000ed00 	.word	0xe000ed00

08012644 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012652:	4618      	mov	r0, r3
 8012654:	f7fc fcd9 	bl	800f00a <USBD_LL_Resume>
}
 8012658:	bf00      	nop
 801265a:	3708      	adds	r7, #8
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}

08012660 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	460b      	mov	r3, r1
 801266a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012672:	78fa      	ldrb	r2, [r7, #3]
 8012674:	4611      	mov	r1, r2
 8012676:	4618      	mov	r0, r3
 8012678:	f7fc fd04 	bl	800f084 <USBD_LL_IsoOUTIncomplete>
}
 801267c:	bf00      	nop
 801267e:	3708      	adds	r7, #8
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	460b      	mov	r3, r1
 801268e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012696:	78fa      	ldrb	r2, [r7, #3]
 8012698:	4611      	mov	r1, r2
 801269a:	4618      	mov	r0, r3
 801269c:	f7fc fce5 	bl	800f06a <USBD_LL_IsoINIncomplete>
}
 80126a0:	bf00      	nop
 80126a2:	3708      	adds	r7, #8
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}

080126a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7fc fcf1 	bl	800f09e <USBD_LL_DevConnected>
}
 80126bc:	bf00      	nop
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7fc fcee 	bl	800f0b4 <USBD_LL_DevDisconnected>
}
 80126d8:	bf00      	nop
 80126da:	3708      	adds	r7, #8
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d13e      	bne.n	801276e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80126f0:	4a21      	ldr	r2, [pc, #132]	; (8012778 <USBD_LL_Init+0x98>)
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	4a1f      	ldr	r2, [pc, #124]	; (8012778 <USBD_LL_Init+0x98>)
 80126fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012700:	4b1d      	ldr	r3, [pc, #116]	; (8012778 <USBD_LL_Init+0x98>)
 8012702:	4a1e      	ldr	r2, [pc, #120]	; (801277c <USBD_LL_Init+0x9c>)
 8012704:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012706:	4b1c      	ldr	r3, [pc, #112]	; (8012778 <USBD_LL_Init+0x98>)
 8012708:	2209      	movs	r2, #9
 801270a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801270c:	4b1a      	ldr	r3, [pc, #104]	; (8012778 <USBD_LL_Init+0x98>)
 801270e:	2202      	movs	r2, #2
 8012710:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012712:	4b19      	ldr	r3, [pc, #100]	; (8012778 <USBD_LL_Init+0x98>)
 8012714:	2200      	movs	r2, #0
 8012716:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012718:	4b17      	ldr	r3, [pc, #92]	; (8012778 <USBD_LL_Init+0x98>)
 801271a:	2202      	movs	r2, #2
 801271c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801271e:	4b16      	ldr	r3, [pc, #88]	; (8012778 <USBD_LL_Init+0x98>)
 8012720:	2200      	movs	r2, #0
 8012722:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012724:	4b14      	ldr	r3, [pc, #80]	; (8012778 <USBD_LL_Init+0x98>)
 8012726:	2200      	movs	r2, #0
 8012728:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801272a:	4b13      	ldr	r3, [pc, #76]	; (8012778 <USBD_LL_Init+0x98>)
 801272c:	2200      	movs	r2, #0
 801272e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012730:	4b11      	ldr	r3, [pc, #68]	; (8012778 <USBD_LL_Init+0x98>)
 8012732:	2200      	movs	r2, #0
 8012734:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012736:	4b10      	ldr	r3, [pc, #64]	; (8012778 <USBD_LL_Init+0x98>)
 8012738:	2200      	movs	r2, #0
 801273a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801273c:	4b0e      	ldr	r3, [pc, #56]	; (8012778 <USBD_LL_Init+0x98>)
 801273e:	2200      	movs	r2, #0
 8012740:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012742:	480d      	ldr	r0, [pc, #52]	; (8012778 <USBD_LL_Init+0x98>)
 8012744:	f7f1 fb72 	bl	8003e2c <HAL_PCD_Init>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	d001      	beq.n	8012752 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801274e:	f7ee fc47 	bl	8000fe0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012752:	2180      	movs	r1, #128	; 0x80
 8012754:	4808      	ldr	r0, [pc, #32]	; (8012778 <USBD_LL_Init+0x98>)
 8012756:	f7f2 fd30 	bl	80051ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801275a:	2240      	movs	r2, #64	; 0x40
 801275c:	2100      	movs	r1, #0
 801275e:	4806      	ldr	r0, [pc, #24]	; (8012778 <USBD_LL_Init+0x98>)
 8012760:	f7f2 fce4 	bl	800512c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012764:	2280      	movs	r2, #128	; 0x80
 8012766:	2101      	movs	r1, #1
 8012768:	4803      	ldr	r0, [pc, #12]	; (8012778 <USBD_LL_Init+0x98>)
 801276a:	f7f2 fcdf 	bl	800512c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801276e:	2300      	movs	r3, #0
}
 8012770:	4618      	mov	r0, r3
 8012772:	3708      	adds	r7, #8
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}
 8012778:	240013a8 	.word	0x240013a8
 801277c:	40080000 	.word	0x40080000

08012780 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b084      	sub	sp, #16
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012788:	2300      	movs	r3, #0
 801278a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801278c:	2300      	movs	r3, #0
 801278e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012796:	4618      	mov	r0, r3
 8012798:	f7f1 fc6c 	bl	8004074 <HAL_PCD_Start>
 801279c:	4603      	mov	r3, r0
 801279e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127a0:	7bfb      	ldrb	r3, [r7, #15]
 80127a2:	4618      	mov	r0, r3
 80127a4:	f000 f94a 	bl	8012a3c <USBD_Get_USB_Status>
 80127a8:	4603      	mov	r3, r0
 80127aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b084      	sub	sp, #16
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
 80127be:	4608      	mov	r0, r1
 80127c0:	4611      	mov	r1, r2
 80127c2:	461a      	mov	r2, r3
 80127c4:	4603      	mov	r3, r0
 80127c6:	70fb      	strb	r3, [r7, #3]
 80127c8:	460b      	mov	r3, r1
 80127ca:	70bb      	strb	r3, [r7, #2]
 80127cc:	4613      	mov	r3, r2
 80127ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127d0:	2300      	movs	r3, #0
 80127d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127d4:	2300      	movs	r3, #0
 80127d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80127de:	78bb      	ldrb	r3, [r7, #2]
 80127e0:	883a      	ldrh	r2, [r7, #0]
 80127e2:	78f9      	ldrb	r1, [r7, #3]
 80127e4:	f7f2 f87d 	bl	80048e2 <HAL_PCD_EP_Open>
 80127e8:	4603      	mov	r3, r0
 80127ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127ec:	7bfb      	ldrb	r3, [r7, #15]
 80127ee:	4618      	mov	r0, r3
 80127f0:	f000 f924 	bl	8012a3c <USBD_Get_USB_Status>
 80127f4:	4603      	mov	r3, r0
 80127f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3710      	adds	r7, #16
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}

08012802 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012802:	b580      	push	{r7, lr}
 8012804:	b084      	sub	sp, #16
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
 801280a:	460b      	mov	r3, r1
 801280c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801280e:	2300      	movs	r3, #0
 8012810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012812:	2300      	movs	r3, #0
 8012814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801281c:	78fa      	ldrb	r2, [r7, #3]
 801281e:	4611      	mov	r1, r2
 8012820:	4618      	mov	r0, r3
 8012822:	f7f2 f8c6 	bl	80049b2 <HAL_PCD_EP_Close>
 8012826:	4603      	mov	r3, r0
 8012828:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801282a:	7bfb      	ldrb	r3, [r7, #15]
 801282c:	4618      	mov	r0, r3
 801282e:	f000 f905 	bl	8012a3c <USBD_Get_USB_Status>
 8012832:	4603      	mov	r3, r0
 8012834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012836:	7bbb      	ldrb	r3, [r7, #14]
}
 8012838:	4618      	mov	r0, r3
 801283a:	3710      	adds	r7, #16
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	460b      	mov	r3, r1
 801284a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801284c:	2300      	movs	r3, #0
 801284e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012850:	2300      	movs	r3, #0
 8012852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801285a:	78fa      	ldrb	r2, [r7, #3]
 801285c:	4611      	mov	r1, r2
 801285e:	4618      	mov	r0, r3
 8012860:	f7f2 fa58 	bl	8004d14 <HAL_PCD_EP_Flush>
 8012864:	4603      	mov	r3, r0
 8012866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012868:	7bfb      	ldrb	r3, [r7, #15]
 801286a:	4618      	mov	r0, r3
 801286c:	f000 f8e6 	bl	8012a3c <USBD_Get_USB_Status>
 8012870:	4603      	mov	r3, r0
 8012872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012874:	7bbb      	ldrb	r3, [r7, #14]
}
 8012876:	4618      	mov	r0, r3
 8012878:	3710      	adds	r7, #16
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}

0801287e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801287e:	b580      	push	{r7, lr}
 8012880:	b084      	sub	sp, #16
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
 8012886:	460b      	mov	r3, r1
 8012888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801288a:	2300      	movs	r3, #0
 801288c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801288e:	2300      	movs	r3, #0
 8012890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012898:	78fa      	ldrb	r2, [r7, #3]
 801289a:	4611      	mov	r1, r2
 801289c:	4618      	mov	r0, r3
 801289e:	f7f2 f97f 	bl	8004ba0 <HAL_PCD_EP_SetStall>
 80128a2:	4603      	mov	r3, r0
 80128a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128a6:	7bfb      	ldrb	r3, [r7, #15]
 80128a8:	4618      	mov	r0, r3
 80128aa:	f000 f8c7 	bl	8012a3c <USBD_Get_USB_Status>
 80128ae:	4603      	mov	r3, r0
 80128b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3710      	adds	r7, #16
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b084      	sub	sp, #16
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	460b      	mov	r3, r1
 80128c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128c8:	2300      	movs	r3, #0
 80128ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128cc:	2300      	movs	r3, #0
 80128ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80128d6:	78fa      	ldrb	r2, [r7, #3]
 80128d8:	4611      	mov	r1, r2
 80128da:	4618      	mov	r0, r3
 80128dc:	f7f2 f9c4 	bl	8004c68 <HAL_PCD_EP_ClrStall>
 80128e0:	4603      	mov	r3, r0
 80128e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128e4:	7bfb      	ldrb	r3, [r7, #15]
 80128e6:	4618      	mov	r0, r3
 80128e8:	f000 f8a8 	bl	8012a3c <USBD_Get_USB_Status>
 80128ec:	4603      	mov	r3, r0
 80128ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3710      	adds	r7, #16
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}

080128fa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128fa:	b480      	push	{r7}
 80128fc:	b085      	sub	sp, #20
 80128fe:	af00      	add	r7, sp, #0
 8012900:	6078      	str	r0, [r7, #4]
 8012902:	460b      	mov	r3, r1
 8012904:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801290c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801290e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012912:	2b00      	cmp	r3, #0
 8012914:	da0b      	bge.n	801292e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012916:	78fb      	ldrb	r3, [r7, #3]
 8012918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801291c:	68f9      	ldr	r1, [r7, #12]
 801291e:	4613      	mov	r3, r2
 8012920:	00db      	lsls	r3, r3, #3
 8012922:	1a9b      	subs	r3, r3, r2
 8012924:	009b      	lsls	r3, r3, #2
 8012926:	440b      	add	r3, r1
 8012928:	333e      	adds	r3, #62	; 0x3e
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	e00b      	b.n	8012946 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801292e:	78fb      	ldrb	r3, [r7, #3]
 8012930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012934:	68f9      	ldr	r1, [r7, #12]
 8012936:	4613      	mov	r3, r2
 8012938:	00db      	lsls	r3, r3, #3
 801293a:	1a9b      	subs	r3, r3, r2
 801293c:	009b      	lsls	r3, r3, #2
 801293e:	440b      	add	r3, r1
 8012940:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012944:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012946:	4618      	mov	r0, r3
 8012948:	3714      	adds	r7, #20
 801294a:	46bd      	mov	sp, r7
 801294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012950:	4770      	bx	lr

08012952 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b084      	sub	sp, #16
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
 801295a:	460b      	mov	r3, r1
 801295c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801295e:	2300      	movs	r3, #0
 8012960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012962:	2300      	movs	r3, #0
 8012964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801296c:	78fa      	ldrb	r2, [r7, #3]
 801296e:	4611      	mov	r1, r2
 8012970:	4618      	mov	r0, r3
 8012972:	f7f1 ff91 	bl	8004898 <HAL_PCD_SetAddress>
 8012976:	4603      	mov	r3, r0
 8012978:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801297a:	7bfb      	ldrb	r3, [r7, #15]
 801297c:	4618      	mov	r0, r3
 801297e:	f000 f85d 	bl	8012a3c <USBD_Get_USB_Status>
 8012982:	4603      	mov	r3, r0
 8012984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012986:	7bbb      	ldrb	r3, [r7, #14]
}
 8012988:	4618      	mov	r0, r3
 801298a:	3710      	adds	r7, #16
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b086      	sub	sp, #24
 8012994:	af00      	add	r7, sp, #0
 8012996:	60f8      	str	r0, [r7, #12]
 8012998:	607a      	str	r2, [r7, #4]
 801299a:	603b      	str	r3, [r7, #0]
 801299c:	460b      	mov	r3, r1
 801299e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129a0:	2300      	movs	r3, #0
 80129a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129a4:	2300      	movs	r3, #0
 80129a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80129ae:	7af9      	ldrb	r1, [r7, #11]
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	f7f2 f8aa 	bl	8004b0c <HAL_PCD_EP_Transmit>
 80129b8:	4603      	mov	r3, r0
 80129ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129bc:	7dfb      	ldrb	r3, [r7, #23]
 80129be:	4618      	mov	r0, r3
 80129c0:	f000 f83c 	bl	8012a3c <USBD_Get_USB_Status>
 80129c4:	4603      	mov	r3, r0
 80129c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80129c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3718      	adds	r7, #24
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}

080129d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b086      	sub	sp, #24
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	60f8      	str	r0, [r7, #12]
 80129da:	607a      	str	r2, [r7, #4]
 80129dc:	603b      	str	r3, [r7, #0]
 80129de:	460b      	mov	r3, r1
 80129e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129e2:	2300      	movs	r3, #0
 80129e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129e6:	2300      	movs	r3, #0
 80129e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80129f0:	7af9      	ldrb	r1, [r7, #11]
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	f7f2 f826 	bl	8004a46 <HAL_PCD_EP_Receive>
 80129fa:	4603      	mov	r3, r0
 80129fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129fe:	7dfb      	ldrb	r3, [r7, #23]
 8012a00:	4618      	mov	r0, r3
 8012a02:	f000 f81b 	bl	8012a3c <USBD_Get_USB_Status>
 8012a06:	4603      	mov	r3, r0
 8012a08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012a0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3718      	adds	r7, #24
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	460b      	mov	r3, r1
 8012a1e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a26:	78fa      	ldrb	r2, [r7, #3]
 8012a28:	4611      	mov	r1, r2
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7f2 f856 	bl	8004adc <HAL_PCD_EP_GetRxCount>
 8012a30:	4603      	mov	r3, r0
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3708      	adds	r7, #8
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
	...

08012a3c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	b085      	sub	sp, #20
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	4603      	mov	r3, r0
 8012a44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012a4a:	79fb      	ldrb	r3, [r7, #7]
 8012a4c:	2b03      	cmp	r3, #3
 8012a4e:	d817      	bhi.n	8012a80 <USBD_Get_USB_Status+0x44>
 8012a50:	a201      	add	r2, pc, #4	; (adr r2, 8012a58 <USBD_Get_USB_Status+0x1c>)
 8012a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a56:	bf00      	nop
 8012a58:	08012a69 	.word	0x08012a69
 8012a5c:	08012a6f 	.word	0x08012a6f
 8012a60:	08012a75 	.word	0x08012a75
 8012a64:	08012a7b 	.word	0x08012a7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8012a6c:	e00b      	b.n	8012a86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012a6e:	2303      	movs	r3, #3
 8012a70:	73fb      	strb	r3, [r7, #15]
    break;
 8012a72:	e008      	b.n	8012a86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012a74:	2301      	movs	r3, #1
 8012a76:	73fb      	strb	r3, [r7, #15]
    break;
 8012a78:	e005      	b.n	8012a86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012a7a:	2303      	movs	r3, #3
 8012a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8012a7e:	e002      	b.n	8012a86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012a80:	2303      	movs	r3, #3
 8012a82:	73fb      	strb	r3, [r7, #15]
    break;
 8012a84:	bf00      	nop
  }
  return usb_status;
 8012a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3714      	adds	r7, #20
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr

08012a94 <__errno>:
 8012a94:	4b01      	ldr	r3, [pc, #4]	; (8012a9c <__errno+0x8>)
 8012a96:	6818      	ldr	r0, [r3, #0]
 8012a98:	4770      	bx	lr
 8012a9a:	bf00      	nop
 8012a9c:	24000168 	.word	0x24000168

08012aa0 <__libc_init_array>:
 8012aa0:	b570      	push	{r4, r5, r6, lr}
 8012aa2:	4e0d      	ldr	r6, [pc, #52]	; (8012ad8 <__libc_init_array+0x38>)
 8012aa4:	4c0d      	ldr	r4, [pc, #52]	; (8012adc <__libc_init_array+0x3c>)
 8012aa6:	1ba4      	subs	r4, r4, r6
 8012aa8:	10a4      	asrs	r4, r4, #2
 8012aaa:	2500      	movs	r5, #0
 8012aac:	42a5      	cmp	r5, r4
 8012aae:	d109      	bne.n	8012ac4 <__libc_init_array+0x24>
 8012ab0:	4e0b      	ldr	r6, [pc, #44]	; (8012ae0 <__libc_init_array+0x40>)
 8012ab2:	4c0c      	ldr	r4, [pc, #48]	; (8012ae4 <__libc_init_array+0x44>)
 8012ab4:	f000 fc38 	bl	8013328 <_init>
 8012ab8:	1ba4      	subs	r4, r4, r6
 8012aba:	10a4      	asrs	r4, r4, #2
 8012abc:	2500      	movs	r5, #0
 8012abe:	42a5      	cmp	r5, r4
 8012ac0:	d105      	bne.n	8012ace <__libc_init_array+0x2e>
 8012ac2:	bd70      	pop	{r4, r5, r6, pc}
 8012ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012ac8:	4798      	blx	r3
 8012aca:	3501      	adds	r5, #1
 8012acc:	e7ee      	b.n	8012aac <__libc_init_array+0xc>
 8012ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012ad2:	4798      	blx	r3
 8012ad4:	3501      	adds	r5, #1
 8012ad6:	e7f2      	b.n	8012abe <__libc_init_array+0x1e>
 8012ad8:	08013558 	.word	0x08013558
 8012adc:	08013558 	.word	0x08013558
 8012ae0:	08013558 	.word	0x08013558
 8012ae4:	0801355c 	.word	0x0801355c

08012ae8 <malloc>:
 8012ae8:	4b02      	ldr	r3, [pc, #8]	; (8012af4 <malloc+0xc>)
 8012aea:	4601      	mov	r1, r0
 8012aec:	6818      	ldr	r0, [r3, #0]
 8012aee:	f000 b86d 	b.w	8012bcc <_malloc_r>
 8012af2:	bf00      	nop
 8012af4:	24000168 	.word	0x24000168

08012af8 <free>:
 8012af8:	4b02      	ldr	r3, [pc, #8]	; (8012b04 <free+0xc>)
 8012afa:	4601      	mov	r1, r0
 8012afc:	6818      	ldr	r0, [r3, #0]
 8012afe:	f000 b817 	b.w	8012b30 <_free_r>
 8012b02:	bf00      	nop
 8012b04:	24000168 	.word	0x24000168

08012b08 <memcpy>:
 8012b08:	b510      	push	{r4, lr}
 8012b0a:	1e43      	subs	r3, r0, #1
 8012b0c:	440a      	add	r2, r1
 8012b0e:	4291      	cmp	r1, r2
 8012b10:	d100      	bne.n	8012b14 <memcpy+0xc>
 8012b12:	bd10      	pop	{r4, pc}
 8012b14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b1c:	e7f7      	b.n	8012b0e <memcpy+0x6>

08012b1e <memset>:
 8012b1e:	4402      	add	r2, r0
 8012b20:	4603      	mov	r3, r0
 8012b22:	4293      	cmp	r3, r2
 8012b24:	d100      	bne.n	8012b28 <memset+0xa>
 8012b26:	4770      	bx	lr
 8012b28:	f803 1b01 	strb.w	r1, [r3], #1
 8012b2c:	e7f9      	b.n	8012b22 <memset+0x4>
	...

08012b30 <_free_r>:
 8012b30:	b538      	push	{r3, r4, r5, lr}
 8012b32:	4605      	mov	r5, r0
 8012b34:	2900      	cmp	r1, #0
 8012b36:	d045      	beq.n	8012bc4 <_free_r+0x94>
 8012b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b3c:	1f0c      	subs	r4, r1, #4
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	bfb8      	it	lt
 8012b42:	18e4      	addlt	r4, r4, r3
 8012b44:	f000 f8cc 	bl	8012ce0 <__malloc_lock>
 8012b48:	4a1f      	ldr	r2, [pc, #124]	; (8012bc8 <_free_r+0x98>)
 8012b4a:	6813      	ldr	r3, [r2, #0]
 8012b4c:	4610      	mov	r0, r2
 8012b4e:	b933      	cbnz	r3, 8012b5e <_free_r+0x2e>
 8012b50:	6063      	str	r3, [r4, #4]
 8012b52:	6014      	str	r4, [r2, #0]
 8012b54:	4628      	mov	r0, r5
 8012b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b5a:	f000 b8c2 	b.w	8012ce2 <__malloc_unlock>
 8012b5e:	42a3      	cmp	r3, r4
 8012b60:	d90c      	bls.n	8012b7c <_free_r+0x4c>
 8012b62:	6821      	ldr	r1, [r4, #0]
 8012b64:	1862      	adds	r2, r4, r1
 8012b66:	4293      	cmp	r3, r2
 8012b68:	bf04      	itt	eq
 8012b6a:	681a      	ldreq	r2, [r3, #0]
 8012b6c:	685b      	ldreq	r3, [r3, #4]
 8012b6e:	6063      	str	r3, [r4, #4]
 8012b70:	bf04      	itt	eq
 8012b72:	1852      	addeq	r2, r2, r1
 8012b74:	6022      	streq	r2, [r4, #0]
 8012b76:	6004      	str	r4, [r0, #0]
 8012b78:	e7ec      	b.n	8012b54 <_free_r+0x24>
 8012b7a:	4613      	mov	r3, r2
 8012b7c:	685a      	ldr	r2, [r3, #4]
 8012b7e:	b10a      	cbz	r2, 8012b84 <_free_r+0x54>
 8012b80:	42a2      	cmp	r2, r4
 8012b82:	d9fa      	bls.n	8012b7a <_free_r+0x4a>
 8012b84:	6819      	ldr	r1, [r3, #0]
 8012b86:	1858      	adds	r0, r3, r1
 8012b88:	42a0      	cmp	r0, r4
 8012b8a:	d10b      	bne.n	8012ba4 <_free_r+0x74>
 8012b8c:	6820      	ldr	r0, [r4, #0]
 8012b8e:	4401      	add	r1, r0
 8012b90:	1858      	adds	r0, r3, r1
 8012b92:	4282      	cmp	r2, r0
 8012b94:	6019      	str	r1, [r3, #0]
 8012b96:	d1dd      	bne.n	8012b54 <_free_r+0x24>
 8012b98:	6810      	ldr	r0, [r2, #0]
 8012b9a:	6852      	ldr	r2, [r2, #4]
 8012b9c:	605a      	str	r2, [r3, #4]
 8012b9e:	4401      	add	r1, r0
 8012ba0:	6019      	str	r1, [r3, #0]
 8012ba2:	e7d7      	b.n	8012b54 <_free_r+0x24>
 8012ba4:	d902      	bls.n	8012bac <_free_r+0x7c>
 8012ba6:	230c      	movs	r3, #12
 8012ba8:	602b      	str	r3, [r5, #0]
 8012baa:	e7d3      	b.n	8012b54 <_free_r+0x24>
 8012bac:	6820      	ldr	r0, [r4, #0]
 8012bae:	1821      	adds	r1, r4, r0
 8012bb0:	428a      	cmp	r2, r1
 8012bb2:	bf04      	itt	eq
 8012bb4:	6811      	ldreq	r1, [r2, #0]
 8012bb6:	6852      	ldreq	r2, [r2, #4]
 8012bb8:	6062      	str	r2, [r4, #4]
 8012bba:	bf04      	itt	eq
 8012bbc:	1809      	addeq	r1, r1, r0
 8012bbe:	6021      	streq	r1, [r4, #0]
 8012bc0:	605c      	str	r4, [r3, #4]
 8012bc2:	e7c7      	b.n	8012b54 <_free_r+0x24>
 8012bc4:	bd38      	pop	{r3, r4, r5, pc}
 8012bc6:	bf00      	nop
 8012bc8:	24000228 	.word	0x24000228

08012bcc <_malloc_r>:
 8012bcc:	b570      	push	{r4, r5, r6, lr}
 8012bce:	1ccd      	adds	r5, r1, #3
 8012bd0:	f025 0503 	bic.w	r5, r5, #3
 8012bd4:	3508      	adds	r5, #8
 8012bd6:	2d0c      	cmp	r5, #12
 8012bd8:	bf38      	it	cc
 8012bda:	250c      	movcc	r5, #12
 8012bdc:	2d00      	cmp	r5, #0
 8012bde:	4606      	mov	r6, r0
 8012be0:	db01      	blt.n	8012be6 <_malloc_r+0x1a>
 8012be2:	42a9      	cmp	r1, r5
 8012be4:	d903      	bls.n	8012bee <_malloc_r+0x22>
 8012be6:	230c      	movs	r3, #12
 8012be8:	6033      	str	r3, [r6, #0]
 8012bea:	2000      	movs	r0, #0
 8012bec:	bd70      	pop	{r4, r5, r6, pc}
 8012bee:	f000 f877 	bl	8012ce0 <__malloc_lock>
 8012bf2:	4a21      	ldr	r2, [pc, #132]	; (8012c78 <_malloc_r+0xac>)
 8012bf4:	6814      	ldr	r4, [r2, #0]
 8012bf6:	4621      	mov	r1, r4
 8012bf8:	b991      	cbnz	r1, 8012c20 <_malloc_r+0x54>
 8012bfa:	4c20      	ldr	r4, [pc, #128]	; (8012c7c <_malloc_r+0xb0>)
 8012bfc:	6823      	ldr	r3, [r4, #0]
 8012bfe:	b91b      	cbnz	r3, 8012c08 <_malloc_r+0x3c>
 8012c00:	4630      	mov	r0, r6
 8012c02:	f000 f83d 	bl	8012c80 <_sbrk_r>
 8012c06:	6020      	str	r0, [r4, #0]
 8012c08:	4629      	mov	r1, r5
 8012c0a:	4630      	mov	r0, r6
 8012c0c:	f000 f838 	bl	8012c80 <_sbrk_r>
 8012c10:	1c43      	adds	r3, r0, #1
 8012c12:	d124      	bne.n	8012c5e <_malloc_r+0x92>
 8012c14:	230c      	movs	r3, #12
 8012c16:	6033      	str	r3, [r6, #0]
 8012c18:	4630      	mov	r0, r6
 8012c1a:	f000 f862 	bl	8012ce2 <__malloc_unlock>
 8012c1e:	e7e4      	b.n	8012bea <_malloc_r+0x1e>
 8012c20:	680b      	ldr	r3, [r1, #0]
 8012c22:	1b5b      	subs	r3, r3, r5
 8012c24:	d418      	bmi.n	8012c58 <_malloc_r+0x8c>
 8012c26:	2b0b      	cmp	r3, #11
 8012c28:	d90f      	bls.n	8012c4a <_malloc_r+0x7e>
 8012c2a:	600b      	str	r3, [r1, #0]
 8012c2c:	50cd      	str	r5, [r1, r3]
 8012c2e:	18cc      	adds	r4, r1, r3
 8012c30:	4630      	mov	r0, r6
 8012c32:	f000 f856 	bl	8012ce2 <__malloc_unlock>
 8012c36:	f104 000b 	add.w	r0, r4, #11
 8012c3a:	1d23      	adds	r3, r4, #4
 8012c3c:	f020 0007 	bic.w	r0, r0, #7
 8012c40:	1ac3      	subs	r3, r0, r3
 8012c42:	d0d3      	beq.n	8012bec <_malloc_r+0x20>
 8012c44:	425a      	negs	r2, r3
 8012c46:	50e2      	str	r2, [r4, r3]
 8012c48:	e7d0      	b.n	8012bec <_malloc_r+0x20>
 8012c4a:	428c      	cmp	r4, r1
 8012c4c:	684b      	ldr	r3, [r1, #4]
 8012c4e:	bf16      	itet	ne
 8012c50:	6063      	strne	r3, [r4, #4]
 8012c52:	6013      	streq	r3, [r2, #0]
 8012c54:	460c      	movne	r4, r1
 8012c56:	e7eb      	b.n	8012c30 <_malloc_r+0x64>
 8012c58:	460c      	mov	r4, r1
 8012c5a:	6849      	ldr	r1, [r1, #4]
 8012c5c:	e7cc      	b.n	8012bf8 <_malloc_r+0x2c>
 8012c5e:	1cc4      	adds	r4, r0, #3
 8012c60:	f024 0403 	bic.w	r4, r4, #3
 8012c64:	42a0      	cmp	r0, r4
 8012c66:	d005      	beq.n	8012c74 <_malloc_r+0xa8>
 8012c68:	1a21      	subs	r1, r4, r0
 8012c6a:	4630      	mov	r0, r6
 8012c6c:	f000 f808 	bl	8012c80 <_sbrk_r>
 8012c70:	3001      	adds	r0, #1
 8012c72:	d0cf      	beq.n	8012c14 <_malloc_r+0x48>
 8012c74:	6025      	str	r5, [r4, #0]
 8012c76:	e7db      	b.n	8012c30 <_malloc_r+0x64>
 8012c78:	24000228 	.word	0x24000228
 8012c7c:	2400022c 	.word	0x2400022c

08012c80 <_sbrk_r>:
 8012c80:	b538      	push	{r3, r4, r5, lr}
 8012c82:	4c06      	ldr	r4, [pc, #24]	; (8012c9c <_sbrk_r+0x1c>)
 8012c84:	2300      	movs	r3, #0
 8012c86:	4605      	mov	r5, r0
 8012c88:	4608      	mov	r0, r1
 8012c8a:	6023      	str	r3, [r4, #0]
 8012c8c:	f7ee fc04 	bl	8001498 <_sbrk>
 8012c90:	1c43      	adds	r3, r0, #1
 8012c92:	d102      	bne.n	8012c9a <_sbrk_r+0x1a>
 8012c94:	6823      	ldr	r3, [r4, #0]
 8012c96:	b103      	cbz	r3, 8012c9a <_sbrk_r+0x1a>
 8012c98:	602b      	str	r3, [r5, #0]
 8012c9a:	bd38      	pop	{r3, r4, r5, pc}
 8012c9c:	240017b0 	.word	0x240017b0

08012ca0 <siprintf>:
 8012ca0:	b40e      	push	{r1, r2, r3}
 8012ca2:	b500      	push	{lr}
 8012ca4:	b09c      	sub	sp, #112	; 0x70
 8012ca6:	ab1d      	add	r3, sp, #116	; 0x74
 8012ca8:	9002      	str	r0, [sp, #8]
 8012caa:	9006      	str	r0, [sp, #24]
 8012cac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012cb0:	4809      	ldr	r0, [pc, #36]	; (8012cd8 <siprintf+0x38>)
 8012cb2:	9107      	str	r1, [sp, #28]
 8012cb4:	9104      	str	r1, [sp, #16]
 8012cb6:	4909      	ldr	r1, [pc, #36]	; (8012cdc <siprintf+0x3c>)
 8012cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cbc:	9105      	str	r1, [sp, #20]
 8012cbe:	6800      	ldr	r0, [r0, #0]
 8012cc0:	9301      	str	r3, [sp, #4]
 8012cc2:	a902      	add	r1, sp, #8
 8012cc4:	f000 f868 	bl	8012d98 <_svfiprintf_r>
 8012cc8:	9b02      	ldr	r3, [sp, #8]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	701a      	strb	r2, [r3, #0]
 8012cce:	b01c      	add	sp, #112	; 0x70
 8012cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cd4:	b003      	add	sp, #12
 8012cd6:	4770      	bx	lr
 8012cd8:	24000168 	.word	0x24000168
 8012cdc:	ffff0208 	.word	0xffff0208

08012ce0 <__malloc_lock>:
 8012ce0:	4770      	bx	lr

08012ce2 <__malloc_unlock>:
 8012ce2:	4770      	bx	lr

08012ce4 <__ssputs_r>:
 8012ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce8:	688e      	ldr	r6, [r1, #8]
 8012cea:	429e      	cmp	r6, r3
 8012cec:	4682      	mov	sl, r0
 8012cee:	460c      	mov	r4, r1
 8012cf0:	4690      	mov	r8, r2
 8012cf2:	4699      	mov	r9, r3
 8012cf4:	d837      	bhi.n	8012d66 <__ssputs_r+0x82>
 8012cf6:	898a      	ldrh	r2, [r1, #12]
 8012cf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012cfc:	d031      	beq.n	8012d62 <__ssputs_r+0x7e>
 8012cfe:	6825      	ldr	r5, [r4, #0]
 8012d00:	6909      	ldr	r1, [r1, #16]
 8012d02:	1a6f      	subs	r7, r5, r1
 8012d04:	6965      	ldr	r5, [r4, #20]
 8012d06:	2302      	movs	r3, #2
 8012d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8012d10:	f109 0301 	add.w	r3, r9, #1
 8012d14:	443b      	add	r3, r7
 8012d16:	429d      	cmp	r5, r3
 8012d18:	bf38      	it	cc
 8012d1a:	461d      	movcc	r5, r3
 8012d1c:	0553      	lsls	r3, r2, #21
 8012d1e:	d530      	bpl.n	8012d82 <__ssputs_r+0x9e>
 8012d20:	4629      	mov	r1, r5
 8012d22:	f7ff ff53 	bl	8012bcc <_malloc_r>
 8012d26:	4606      	mov	r6, r0
 8012d28:	b950      	cbnz	r0, 8012d40 <__ssputs_r+0x5c>
 8012d2a:	230c      	movs	r3, #12
 8012d2c:	f8ca 3000 	str.w	r3, [sl]
 8012d30:	89a3      	ldrh	r3, [r4, #12]
 8012d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d36:	81a3      	strh	r3, [r4, #12]
 8012d38:	f04f 30ff 	mov.w	r0, #4294967295
 8012d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d40:	463a      	mov	r2, r7
 8012d42:	6921      	ldr	r1, [r4, #16]
 8012d44:	f7ff fee0 	bl	8012b08 <memcpy>
 8012d48:	89a3      	ldrh	r3, [r4, #12]
 8012d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d52:	81a3      	strh	r3, [r4, #12]
 8012d54:	6126      	str	r6, [r4, #16]
 8012d56:	6165      	str	r5, [r4, #20]
 8012d58:	443e      	add	r6, r7
 8012d5a:	1bed      	subs	r5, r5, r7
 8012d5c:	6026      	str	r6, [r4, #0]
 8012d5e:	60a5      	str	r5, [r4, #8]
 8012d60:	464e      	mov	r6, r9
 8012d62:	454e      	cmp	r6, r9
 8012d64:	d900      	bls.n	8012d68 <__ssputs_r+0x84>
 8012d66:	464e      	mov	r6, r9
 8012d68:	4632      	mov	r2, r6
 8012d6a:	4641      	mov	r1, r8
 8012d6c:	6820      	ldr	r0, [r4, #0]
 8012d6e:	f000 fa93 	bl	8013298 <memmove>
 8012d72:	68a3      	ldr	r3, [r4, #8]
 8012d74:	1b9b      	subs	r3, r3, r6
 8012d76:	60a3      	str	r3, [r4, #8]
 8012d78:	6823      	ldr	r3, [r4, #0]
 8012d7a:	441e      	add	r6, r3
 8012d7c:	6026      	str	r6, [r4, #0]
 8012d7e:	2000      	movs	r0, #0
 8012d80:	e7dc      	b.n	8012d3c <__ssputs_r+0x58>
 8012d82:	462a      	mov	r2, r5
 8012d84:	f000 faa1 	bl	80132ca <_realloc_r>
 8012d88:	4606      	mov	r6, r0
 8012d8a:	2800      	cmp	r0, #0
 8012d8c:	d1e2      	bne.n	8012d54 <__ssputs_r+0x70>
 8012d8e:	6921      	ldr	r1, [r4, #16]
 8012d90:	4650      	mov	r0, sl
 8012d92:	f7ff fecd 	bl	8012b30 <_free_r>
 8012d96:	e7c8      	b.n	8012d2a <__ssputs_r+0x46>

08012d98 <_svfiprintf_r>:
 8012d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d9c:	461d      	mov	r5, r3
 8012d9e:	898b      	ldrh	r3, [r1, #12]
 8012da0:	061f      	lsls	r7, r3, #24
 8012da2:	b09d      	sub	sp, #116	; 0x74
 8012da4:	4680      	mov	r8, r0
 8012da6:	460c      	mov	r4, r1
 8012da8:	4616      	mov	r6, r2
 8012daa:	d50f      	bpl.n	8012dcc <_svfiprintf_r+0x34>
 8012dac:	690b      	ldr	r3, [r1, #16]
 8012dae:	b96b      	cbnz	r3, 8012dcc <_svfiprintf_r+0x34>
 8012db0:	2140      	movs	r1, #64	; 0x40
 8012db2:	f7ff ff0b 	bl	8012bcc <_malloc_r>
 8012db6:	6020      	str	r0, [r4, #0]
 8012db8:	6120      	str	r0, [r4, #16]
 8012dba:	b928      	cbnz	r0, 8012dc8 <_svfiprintf_r+0x30>
 8012dbc:	230c      	movs	r3, #12
 8012dbe:	f8c8 3000 	str.w	r3, [r8]
 8012dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8012dc6:	e0c8      	b.n	8012f5a <_svfiprintf_r+0x1c2>
 8012dc8:	2340      	movs	r3, #64	; 0x40
 8012dca:	6163      	str	r3, [r4, #20]
 8012dcc:	2300      	movs	r3, #0
 8012dce:	9309      	str	r3, [sp, #36]	; 0x24
 8012dd0:	2320      	movs	r3, #32
 8012dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012dd6:	2330      	movs	r3, #48	; 0x30
 8012dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ddc:	9503      	str	r5, [sp, #12]
 8012dde:	f04f 0b01 	mov.w	fp, #1
 8012de2:	4637      	mov	r7, r6
 8012de4:	463d      	mov	r5, r7
 8012de6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012dea:	b10b      	cbz	r3, 8012df0 <_svfiprintf_r+0x58>
 8012dec:	2b25      	cmp	r3, #37	; 0x25
 8012dee:	d13e      	bne.n	8012e6e <_svfiprintf_r+0xd6>
 8012df0:	ebb7 0a06 	subs.w	sl, r7, r6
 8012df4:	d00b      	beq.n	8012e0e <_svfiprintf_r+0x76>
 8012df6:	4653      	mov	r3, sl
 8012df8:	4632      	mov	r2, r6
 8012dfa:	4621      	mov	r1, r4
 8012dfc:	4640      	mov	r0, r8
 8012dfe:	f7ff ff71 	bl	8012ce4 <__ssputs_r>
 8012e02:	3001      	adds	r0, #1
 8012e04:	f000 80a4 	beq.w	8012f50 <_svfiprintf_r+0x1b8>
 8012e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e0a:	4453      	add	r3, sl
 8012e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8012e0e:	783b      	ldrb	r3, [r7, #0]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	f000 809d 	beq.w	8012f50 <_svfiprintf_r+0x1b8>
 8012e16:	2300      	movs	r3, #0
 8012e18:	f04f 32ff 	mov.w	r2, #4294967295
 8012e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e20:	9304      	str	r3, [sp, #16]
 8012e22:	9307      	str	r3, [sp, #28]
 8012e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e28:	931a      	str	r3, [sp, #104]	; 0x68
 8012e2a:	462f      	mov	r7, r5
 8012e2c:	2205      	movs	r2, #5
 8012e2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012e32:	4850      	ldr	r0, [pc, #320]	; (8012f74 <_svfiprintf_r+0x1dc>)
 8012e34:	f7ed fa5c 	bl	80002f0 <memchr>
 8012e38:	9b04      	ldr	r3, [sp, #16]
 8012e3a:	b9d0      	cbnz	r0, 8012e72 <_svfiprintf_r+0xda>
 8012e3c:	06d9      	lsls	r1, r3, #27
 8012e3e:	bf44      	itt	mi
 8012e40:	2220      	movmi	r2, #32
 8012e42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012e46:	071a      	lsls	r2, r3, #28
 8012e48:	bf44      	itt	mi
 8012e4a:	222b      	movmi	r2, #43	; 0x2b
 8012e4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012e50:	782a      	ldrb	r2, [r5, #0]
 8012e52:	2a2a      	cmp	r2, #42	; 0x2a
 8012e54:	d015      	beq.n	8012e82 <_svfiprintf_r+0xea>
 8012e56:	9a07      	ldr	r2, [sp, #28]
 8012e58:	462f      	mov	r7, r5
 8012e5a:	2000      	movs	r0, #0
 8012e5c:	250a      	movs	r5, #10
 8012e5e:	4639      	mov	r1, r7
 8012e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e64:	3b30      	subs	r3, #48	; 0x30
 8012e66:	2b09      	cmp	r3, #9
 8012e68:	d94d      	bls.n	8012f06 <_svfiprintf_r+0x16e>
 8012e6a:	b1b8      	cbz	r0, 8012e9c <_svfiprintf_r+0x104>
 8012e6c:	e00f      	b.n	8012e8e <_svfiprintf_r+0xf6>
 8012e6e:	462f      	mov	r7, r5
 8012e70:	e7b8      	b.n	8012de4 <_svfiprintf_r+0x4c>
 8012e72:	4a40      	ldr	r2, [pc, #256]	; (8012f74 <_svfiprintf_r+0x1dc>)
 8012e74:	1a80      	subs	r0, r0, r2
 8012e76:	fa0b f000 	lsl.w	r0, fp, r0
 8012e7a:	4318      	orrs	r0, r3
 8012e7c:	9004      	str	r0, [sp, #16]
 8012e7e:	463d      	mov	r5, r7
 8012e80:	e7d3      	b.n	8012e2a <_svfiprintf_r+0x92>
 8012e82:	9a03      	ldr	r2, [sp, #12]
 8012e84:	1d11      	adds	r1, r2, #4
 8012e86:	6812      	ldr	r2, [r2, #0]
 8012e88:	9103      	str	r1, [sp, #12]
 8012e8a:	2a00      	cmp	r2, #0
 8012e8c:	db01      	blt.n	8012e92 <_svfiprintf_r+0xfa>
 8012e8e:	9207      	str	r2, [sp, #28]
 8012e90:	e004      	b.n	8012e9c <_svfiprintf_r+0x104>
 8012e92:	4252      	negs	r2, r2
 8012e94:	f043 0302 	orr.w	r3, r3, #2
 8012e98:	9207      	str	r2, [sp, #28]
 8012e9a:	9304      	str	r3, [sp, #16]
 8012e9c:	783b      	ldrb	r3, [r7, #0]
 8012e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8012ea0:	d10c      	bne.n	8012ebc <_svfiprintf_r+0x124>
 8012ea2:	787b      	ldrb	r3, [r7, #1]
 8012ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8012ea6:	d133      	bne.n	8012f10 <_svfiprintf_r+0x178>
 8012ea8:	9b03      	ldr	r3, [sp, #12]
 8012eaa:	1d1a      	adds	r2, r3, #4
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	9203      	str	r2, [sp, #12]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	bfb8      	it	lt
 8012eb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8012eb8:	3702      	adds	r7, #2
 8012eba:	9305      	str	r3, [sp, #20]
 8012ebc:	4d2e      	ldr	r5, [pc, #184]	; (8012f78 <_svfiprintf_r+0x1e0>)
 8012ebe:	7839      	ldrb	r1, [r7, #0]
 8012ec0:	2203      	movs	r2, #3
 8012ec2:	4628      	mov	r0, r5
 8012ec4:	f7ed fa14 	bl	80002f0 <memchr>
 8012ec8:	b138      	cbz	r0, 8012eda <_svfiprintf_r+0x142>
 8012eca:	2340      	movs	r3, #64	; 0x40
 8012ecc:	1b40      	subs	r0, r0, r5
 8012ece:	fa03 f000 	lsl.w	r0, r3, r0
 8012ed2:	9b04      	ldr	r3, [sp, #16]
 8012ed4:	4303      	orrs	r3, r0
 8012ed6:	3701      	adds	r7, #1
 8012ed8:	9304      	str	r3, [sp, #16]
 8012eda:	7839      	ldrb	r1, [r7, #0]
 8012edc:	4827      	ldr	r0, [pc, #156]	; (8012f7c <_svfiprintf_r+0x1e4>)
 8012ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ee2:	2206      	movs	r2, #6
 8012ee4:	1c7e      	adds	r6, r7, #1
 8012ee6:	f7ed fa03 	bl	80002f0 <memchr>
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d038      	beq.n	8012f60 <_svfiprintf_r+0x1c8>
 8012eee:	4b24      	ldr	r3, [pc, #144]	; (8012f80 <_svfiprintf_r+0x1e8>)
 8012ef0:	bb13      	cbnz	r3, 8012f38 <_svfiprintf_r+0x1a0>
 8012ef2:	9b03      	ldr	r3, [sp, #12]
 8012ef4:	3307      	adds	r3, #7
 8012ef6:	f023 0307 	bic.w	r3, r3, #7
 8012efa:	3308      	adds	r3, #8
 8012efc:	9303      	str	r3, [sp, #12]
 8012efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f00:	444b      	add	r3, r9
 8012f02:	9309      	str	r3, [sp, #36]	; 0x24
 8012f04:	e76d      	b.n	8012de2 <_svfiprintf_r+0x4a>
 8012f06:	fb05 3202 	mla	r2, r5, r2, r3
 8012f0a:	2001      	movs	r0, #1
 8012f0c:	460f      	mov	r7, r1
 8012f0e:	e7a6      	b.n	8012e5e <_svfiprintf_r+0xc6>
 8012f10:	2300      	movs	r3, #0
 8012f12:	3701      	adds	r7, #1
 8012f14:	9305      	str	r3, [sp, #20]
 8012f16:	4619      	mov	r1, r3
 8012f18:	250a      	movs	r5, #10
 8012f1a:	4638      	mov	r0, r7
 8012f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f20:	3a30      	subs	r2, #48	; 0x30
 8012f22:	2a09      	cmp	r2, #9
 8012f24:	d903      	bls.n	8012f2e <_svfiprintf_r+0x196>
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d0c8      	beq.n	8012ebc <_svfiprintf_r+0x124>
 8012f2a:	9105      	str	r1, [sp, #20]
 8012f2c:	e7c6      	b.n	8012ebc <_svfiprintf_r+0x124>
 8012f2e:	fb05 2101 	mla	r1, r5, r1, r2
 8012f32:	2301      	movs	r3, #1
 8012f34:	4607      	mov	r7, r0
 8012f36:	e7f0      	b.n	8012f1a <_svfiprintf_r+0x182>
 8012f38:	ab03      	add	r3, sp, #12
 8012f3a:	9300      	str	r3, [sp, #0]
 8012f3c:	4622      	mov	r2, r4
 8012f3e:	4b11      	ldr	r3, [pc, #68]	; (8012f84 <_svfiprintf_r+0x1ec>)
 8012f40:	a904      	add	r1, sp, #16
 8012f42:	4640      	mov	r0, r8
 8012f44:	f3af 8000 	nop.w
 8012f48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012f4c:	4681      	mov	r9, r0
 8012f4e:	d1d6      	bne.n	8012efe <_svfiprintf_r+0x166>
 8012f50:	89a3      	ldrh	r3, [r4, #12]
 8012f52:	065b      	lsls	r3, r3, #25
 8012f54:	f53f af35 	bmi.w	8012dc2 <_svfiprintf_r+0x2a>
 8012f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f5a:	b01d      	add	sp, #116	; 0x74
 8012f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f60:	ab03      	add	r3, sp, #12
 8012f62:	9300      	str	r3, [sp, #0]
 8012f64:	4622      	mov	r2, r4
 8012f66:	4b07      	ldr	r3, [pc, #28]	; (8012f84 <_svfiprintf_r+0x1ec>)
 8012f68:	a904      	add	r1, sp, #16
 8012f6a:	4640      	mov	r0, r8
 8012f6c:	f000 f882 	bl	8013074 <_printf_i>
 8012f70:	e7ea      	b.n	8012f48 <_svfiprintf_r+0x1b0>
 8012f72:	bf00      	nop
 8012f74:	0801351c 	.word	0x0801351c
 8012f78:	08013522 	.word	0x08013522
 8012f7c:	08013526 	.word	0x08013526
 8012f80:	00000000 	.word	0x00000000
 8012f84:	08012ce5 	.word	0x08012ce5

08012f88 <_printf_common>:
 8012f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f8c:	4691      	mov	r9, r2
 8012f8e:	461f      	mov	r7, r3
 8012f90:	688a      	ldr	r2, [r1, #8]
 8012f92:	690b      	ldr	r3, [r1, #16]
 8012f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	bfb8      	it	lt
 8012f9c:	4613      	movlt	r3, r2
 8012f9e:	f8c9 3000 	str.w	r3, [r9]
 8012fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012fa6:	4606      	mov	r6, r0
 8012fa8:	460c      	mov	r4, r1
 8012faa:	b112      	cbz	r2, 8012fb2 <_printf_common+0x2a>
 8012fac:	3301      	adds	r3, #1
 8012fae:	f8c9 3000 	str.w	r3, [r9]
 8012fb2:	6823      	ldr	r3, [r4, #0]
 8012fb4:	0699      	lsls	r1, r3, #26
 8012fb6:	bf42      	ittt	mi
 8012fb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012fbc:	3302      	addmi	r3, #2
 8012fbe:	f8c9 3000 	strmi.w	r3, [r9]
 8012fc2:	6825      	ldr	r5, [r4, #0]
 8012fc4:	f015 0506 	ands.w	r5, r5, #6
 8012fc8:	d107      	bne.n	8012fda <_printf_common+0x52>
 8012fca:	f104 0a19 	add.w	sl, r4, #25
 8012fce:	68e3      	ldr	r3, [r4, #12]
 8012fd0:	f8d9 2000 	ldr.w	r2, [r9]
 8012fd4:	1a9b      	subs	r3, r3, r2
 8012fd6:	42ab      	cmp	r3, r5
 8012fd8:	dc28      	bgt.n	801302c <_printf_common+0xa4>
 8012fda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012fde:	6822      	ldr	r2, [r4, #0]
 8012fe0:	3300      	adds	r3, #0
 8012fe2:	bf18      	it	ne
 8012fe4:	2301      	movne	r3, #1
 8012fe6:	0692      	lsls	r2, r2, #26
 8012fe8:	d42d      	bmi.n	8013046 <_printf_common+0xbe>
 8012fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012fee:	4639      	mov	r1, r7
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	47c0      	blx	r8
 8012ff4:	3001      	adds	r0, #1
 8012ff6:	d020      	beq.n	801303a <_printf_common+0xb2>
 8012ff8:	6823      	ldr	r3, [r4, #0]
 8012ffa:	68e5      	ldr	r5, [r4, #12]
 8012ffc:	f8d9 2000 	ldr.w	r2, [r9]
 8013000:	f003 0306 	and.w	r3, r3, #6
 8013004:	2b04      	cmp	r3, #4
 8013006:	bf08      	it	eq
 8013008:	1aad      	subeq	r5, r5, r2
 801300a:	68a3      	ldr	r3, [r4, #8]
 801300c:	6922      	ldr	r2, [r4, #16]
 801300e:	bf0c      	ite	eq
 8013010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013014:	2500      	movne	r5, #0
 8013016:	4293      	cmp	r3, r2
 8013018:	bfc4      	itt	gt
 801301a:	1a9b      	subgt	r3, r3, r2
 801301c:	18ed      	addgt	r5, r5, r3
 801301e:	f04f 0900 	mov.w	r9, #0
 8013022:	341a      	adds	r4, #26
 8013024:	454d      	cmp	r5, r9
 8013026:	d11a      	bne.n	801305e <_printf_common+0xd6>
 8013028:	2000      	movs	r0, #0
 801302a:	e008      	b.n	801303e <_printf_common+0xb6>
 801302c:	2301      	movs	r3, #1
 801302e:	4652      	mov	r2, sl
 8013030:	4639      	mov	r1, r7
 8013032:	4630      	mov	r0, r6
 8013034:	47c0      	blx	r8
 8013036:	3001      	adds	r0, #1
 8013038:	d103      	bne.n	8013042 <_printf_common+0xba>
 801303a:	f04f 30ff 	mov.w	r0, #4294967295
 801303e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013042:	3501      	adds	r5, #1
 8013044:	e7c3      	b.n	8012fce <_printf_common+0x46>
 8013046:	18e1      	adds	r1, r4, r3
 8013048:	1c5a      	adds	r2, r3, #1
 801304a:	2030      	movs	r0, #48	; 0x30
 801304c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013050:	4422      	add	r2, r4
 8013052:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013056:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801305a:	3302      	adds	r3, #2
 801305c:	e7c5      	b.n	8012fea <_printf_common+0x62>
 801305e:	2301      	movs	r3, #1
 8013060:	4622      	mov	r2, r4
 8013062:	4639      	mov	r1, r7
 8013064:	4630      	mov	r0, r6
 8013066:	47c0      	blx	r8
 8013068:	3001      	adds	r0, #1
 801306a:	d0e6      	beq.n	801303a <_printf_common+0xb2>
 801306c:	f109 0901 	add.w	r9, r9, #1
 8013070:	e7d8      	b.n	8013024 <_printf_common+0x9c>
	...

08013074 <_printf_i>:
 8013074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013078:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801307c:	460c      	mov	r4, r1
 801307e:	7e09      	ldrb	r1, [r1, #24]
 8013080:	b085      	sub	sp, #20
 8013082:	296e      	cmp	r1, #110	; 0x6e
 8013084:	4617      	mov	r7, r2
 8013086:	4606      	mov	r6, r0
 8013088:	4698      	mov	r8, r3
 801308a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801308c:	f000 80b3 	beq.w	80131f6 <_printf_i+0x182>
 8013090:	d822      	bhi.n	80130d8 <_printf_i+0x64>
 8013092:	2963      	cmp	r1, #99	; 0x63
 8013094:	d036      	beq.n	8013104 <_printf_i+0x90>
 8013096:	d80a      	bhi.n	80130ae <_printf_i+0x3a>
 8013098:	2900      	cmp	r1, #0
 801309a:	f000 80b9 	beq.w	8013210 <_printf_i+0x19c>
 801309e:	2958      	cmp	r1, #88	; 0x58
 80130a0:	f000 8083 	beq.w	80131aa <_printf_i+0x136>
 80130a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80130a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80130ac:	e032      	b.n	8013114 <_printf_i+0xa0>
 80130ae:	2964      	cmp	r1, #100	; 0x64
 80130b0:	d001      	beq.n	80130b6 <_printf_i+0x42>
 80130b2:	2969      	cmp	r1, #105	; 0x69
 80130b4:	d1f6      	bne.n	80130a4 <_printf_i+0x30>
 80130b6:	6820      	ldr	r0, [r4, #0]
 80130b8:	6813      	ldr	r3, [r2, #0]
 80130ba:	0605      	lsls	r5, r0, #24
 80130bc:	f103 0104 	add.w	r1, r3, #4
 80130c0:	d52a      	bpl.n	8013118 <_printf_i+0xa4>
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	6011      	str	r1, [r2, #0]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	da03      	bge.n	80130d2 <_printf_i+0x5e>
 80130ca:	222d      	movs	r2, #45	; 0x2d
 80130cc:	425b      	negs	r3, r3
 80130ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80130d2:	486f      	ldr	r0, [pc, #444]	; (8013290 <_printf_i+0x21c>)
 80130d4:	220a      	movs	r2, #10
 80130d6:	e039      	b.n	801314c <_printf_i+0xd8>
 80130d8:	2973      	cmp	r1, #115	; 0x73
 80130da:	f000 809d 	beq.w	8013218 <_printf_i+0x1a4>
 80130de:	d808      	bhi.n	80130f2 <_printf_i+0x7e>
 80130e0:	296f      	cmp	r1, #111	; 0x6f
 80130e2:	d020      	beq.n	8013126 <_printf_i+0xb2>
 80130e4:	2970      	cmp	r1, #112	; 0x70
 80130e6:	d1dd      	bne.n	80130a4 <_printf_i+0x30>
 80130e8:	6823      	ldr	r3, [r4, #0]
 80130ea:	f043 0320 	orr.w	r3, r3, #32
 80130ee:	6023      	str	r3, [r4, #0]
 80130f0:	e003      	b.n	80130fa <_printf_i+0x86>
 80130f2:	2975      	cmp	r1, #117	; 0x75
 80130f4:	d017      	beq.n	8013126 <_printf_i+0xb2>
 80130f6:	2978      	cmp	r1, #120	; 0x78
 80130f8:	d1d4      	bne.n	80130a4 <_printf_i+0x30>
 80130fa:	2378      	movs	r3, #120	; 0x78
 80130fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013100:	4864      	ldr	r0, [pc, #400]	; (8013294 <_printf_i+0x220>)
 8013102:	e055      	b.n	80131b0 <_printf_i+0x13c>
 8013104:	6813      	ldr	r3, [r2, #0]
 8013106:	1d19      	adds	r1, r3, #4
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	6011      	str	r1, [r2, #0]
 801310c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013114:	2301      	movs	r3, #1
 8013116:	e08c      	b.n	8013232 <_printf_i+0x1be>
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	6011      	str	r1, [r2, #0]
 801311c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013120:	bf18      	it	ne
 8013122:	b21b      	sxthne	r3, r3
 8013124:	e7cf      	b.n	80130c6 <_printf_i+0x52>
 8013126:	6813      	ldr	r3, [r2, #0]
 8013128:	6825      	ldr	r5, [r4, #0]
 801312a:	1d18      	adds	r0, r3, #4
 801312c:	6010      	str	r0, [r2, #0]
 801312e:	0628      	lsls	r0, r5, #24
 8013130:	d501      	bpl.n	8013136 <_printf_i+0xc2>
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	e002      	b.n	801313c <_printf_i+0xc8>
 8013136:	0668      	lsls	r0, r5, #25
 8013138:	d5fb      	bpl.n	8013132 <_printf_i+0xbe>
 801313a:	881b      	ldrh	r3, [r3, #0]
 801313c:	4854      	ldr	r0, [pc, #336]	; (8013290 <_printf_i+0x21c>)
 801313e:	296f      	cmp	r1, #111	; 0x6f
 8013140:	bf14      	ite	ne
 8013142:	220a      	movne	r2, #10
 8013144:	2208      	moveq	r2, #8
 8013146:	2100      	movs	r1, #0
 8013148:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801314c:	6865      	ldr	r5, [r4, #4]
 801314e:	60a5      	str	r5, [r4, #8]
 8013150:	2d00      	cmp	r5, #0
 8013152:	f2c0 8095 	blt.w	8013280 <_printf_i+0x20c>
 8013156:	6821      	ldr	r1, [r4, #0]
 8013158:	f021 0104 	bic.w	r1, r1, #4
 801315c:	6021      	str	r1, [r4, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d13d      	bne.n	80131de <_printf_i+0x16a>
 8013162:	2d00      	cmp	r5, #0
 8013164:	f040 808e 	bne.w	8013284 <_printf_i+0x210>
 8013168:	4665      	mov	r5, ip
 801316a:	2a08      	cmp	r2, #8
 801316c:	d10b      	bne.n	8013186 <_printf_i+0x112>
 801316e:	6823      	ldr	r3, [r4, #0]
 8013170:	07db      	lsls	r3, r3, #31
 8013172:	d508      	bpl.n	8013186 <_printf_i+0x112>
 8013174:	6923      	ldr	r3, [r4, #16]
 8013176:	6862      	ldr	r2, [r4, #4]
 8013178:	429a      	cmp	r2, r3
 801317a:	bfde      	ittt	le
 801317c:	2330      	movle	r3, #48	; 0x30
 801317e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013182:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013186:	ebac 0305 	sub.w	r3, ip, r5
 801318a:	6123      	str	r3, [r4, #16]
 801318c:	f8cd 8000 	str.w	r8, [sp]
 8013190:	463b      	mov	r3, r7
 8013192:	aa03      	add	r2, sp, #12
 8013194:	4621      	mov	r1, r4
 8013196:	4630      	mov	r0, r6
 8013198:	f7ff fef6 	bl	8012f88 <_printf_common>
 801319c:	3001      	adds	r0, #1
 801319e:	d14d      	bne.n	801323c <_printf_i+0x1c8>
 80131a0:	f04f 30ff 	mov.w	r0, #4294967295
 80131a4:	b005      	add	sp, #20
 80131a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131aa:	4839      	ldr	r0, [pc, #228]	; (8013290 <_printf_i+0x21c>)
 80131ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80131b0:	6813      	ldr	r3, [r2, #0]
 80131b2:	6821      	ldr	r1, [r4, #0]
 80131b4:	1d1d      	adds	r5, r3, #4
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	6015      	str	r5, [r2, #0]
 80131ba:	060a      	lsls	r2, r1, #24
 80131bc:	d50b      	bpl.n	80131d6 <_printf_i+0x162>
 80131be:	07ca      	lsls	r2, r1, #31
 80131c0:	bf44      	itt	mi
 80131c2:	f041 0120 	orrmi.w	r1, r1, #32
 80131c6:	6021      	strmi	r1, [r4, #0]
 80131c8:	b91b      	cbnz	r3, 80131d2 <_printf_i+0x15e>
 80131ca:	6822      	ldr	r2, [r4, #0]
 80131cc:	f022 0220 	bic.w	r2, r2, #32
 80131d0:	6022      	str	r2, [r4, #0]
 80131d2:	2210      	movs	r2, #16
 80131d4:	e7b7      	b.n	8013146 <_printf_i+0xd2>
 80131d6:	064d      	lsls	r5, r1, #25
 80131d8:	bf48      	it	mi
 80131da:	b29b      	uxthmi	r3, r3
 80131dc:	e7ef      	b.n	80131be <_printf_i+0x14a>
 80131de:	4665      	mov	r5, ip
 80131e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80131e4:	fb02 3311 	mls	r3, r2, r1, r3
 80131e8:	5cc3      	ldrb	r3, [r0, r3]
 80131ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80131ee:	460b      	mov	r3, r1
 80131f0:	2900      	cmp	r1, #0
 80131f2:	d1f5      	bne.n	80131e0 <_printf_i+0x16c>
 80131f4:	e7b9      	b.n	801316a <_printf_i+0xf6>
 80131f6:	6813      	ldr	r3, [r2, #0]
 80131f8:	6825      	ldr	r5, [r4, #0]
 80131fa:	6961      	ldr	r1, [r4, #20]
 80131fc:	1d18      	adds	r0, r3, #4
 80131fe:	6010      	str	r0, [r2, #0]
 8013200:	0628      	lsls	r0, r5, #24
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	d501      	bpl.n	801320a <_printf_i+0x196>
 8013206:	6019      	str	r1, [r3, #0]
 8013208:	e002      	b.n	8013210 <_printf_i+0x19c>
 801320a:	066a      	lsls	r2, r5, #25
 801320c:	d5fb      	bpl.n	8013206 <_printf_i+0x192>
 801320e:	8019      	strh	r1, [r3, #0]
 8013210:	2300      	movs	r3, #0
 8013212:	6123      	str	r3, [r4, #16]
 8013214:	4665      	mov	r5, ip
 8013216:	e7b9      	b.n	801318c <_printf_i+0x118>
 8013218:	6813      	ldr	r3, [r2, #0]
 801321a:	1d19      	adds	r1, r3, #4
 801321c:	6011      	str	r1, [r2, #0]
 801321e:	681d      	ldr	r5, [r3, #0]
 8013220:	6862      	ldr	r2, [r4, #4]
 8013222:	2100      	movs	r1, #0
 8013224:	4628      	mov	r0, r5
 8013226:	f7ed f863 	bl	80002f0 <memchr>
 801322a:	b108      	cbz	r0, 8013230 <_printf_i+0x1bc>
 801322c:	1b40      	subs	r0, r0, r5
 801322e:	6060      	str	r0, [r4, #4]
 8013230:	6863      	ldr	r3, [r4, #4]
 8013232:	6123      	str	r3, [r4, #16]
 8013234:	2300      	movs	r3, #0
 8013236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801323a:	e7a7      	b.n	801318c <_printf_i+0x118>
 801323c:	6923      	ldr	r3, [r4, #16]
 801323e:	462a      	mov	r2, r5
 8013240:	4639      	mov	r1, r7
 8013242:	4630      	mov	r0, r6
 8013244:	47c0      	blx	r8
 8013246:	3001      	adds	r0, #1
 8013248:	d0aa      	beq.n	80131a0 <_printf_i+0x12c>
 801324a:	6823      	ldr	r3, [r4, #0]
 801324c:	079b      	lsls	r3, r3, #30
 801324e:	d413      	bmi.n	8013278 <_printf_i+0x204>
 8013250:	68e0      	ldr	r0, [r4, #12]
 8013252:	9b03      	ldr	r3, [sp, #12]
 8013254:	4298      	cmp	r0, r3
 8013256:	bfb8      	it	lt
 8013258:	4618      	movlt	r0, r3
 801325a:	e7a3      	b.n	80131a4 <_printf_i+0x130>
 801325c:	2301      	movs	r3, #1
 801325e:	464a      	mov	r2, r9
 8013260:	4639      	mov	r1, r7
 8013262:	4630      	mov	r0, r6
 8013264:	47c0      	blx	r8
 8013266:	3001      	adds	r0, #1
 8013268:	d09a      	beq.n	80131a0 <_printf_i+0x12c>
 801326a:	3501      	adds	r5, #1
 801326c:	68e3      	ldr	r3, [r4, #12]
 801326e:	9a03      	ldr	r2, [sp, #12]
 8013270:	1a9b      	subs	r3, r3, r2
 8013272:	42ab      	cmp	r3, r5
 8013274:	dcf2      	bgt.n	801325c <_printf_i+0x1e8>
 8013276:	e7eb      	b.n	8013250 <_printf_i+0x1dc>
 8013278:	2500      	movs	r5, #0
 801327a:	f104 0919 	add.w	r9, r4, #25
 801327e:	e7f5      	b.n	801326c <_printf_i+0x1f8>
 8013280:	2b00      	cmp	r3, #0
 8013282:	d1ac      	bne.n	80131de <_printf_i+0x16a>
 8013284:	7803      	ldrb	r3, [r0, #0]
 8013286:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801328a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801328e:	e76c      	b.n	801316a <_printf_i+0xf6>
 8013290:	0801352d 	.word	0x0801352d
 8013294:	0801353e 	.word	0x0801353e

08013298 <memmove>:
 8013298:	4288      	cmp	r0, r1
 801329a:	b510      	push	{r4, lr}
 801329c:	eb01 0302 	add.w	r3, r1, r2
 80132a0:	d807      	bhi.n	80132b2 <memmove+0x1a>
 80132a2:	1e42      	subs	r2, r0, #1
 80132a4:	4299      	cmp	r1, r3
 80132a6:	d00a      	beq.n	80132be <memmove+0x26>
 80132a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80132b0:	e7f8      	b.n	80132a4 <memmove+0xc>
 80132b2:	4283      	cmp	r3, r0
 80132b4:	d9f5      	bls.n	80132a2 <memmove+0xa>
 80132b6:	1881      	adds	r1, r0, r2
 80132b8:	1ad2      	subs	r2, r2, r3
 80132ba:	42d3      	cmn	r3, r2
 80132bc:	d100      	bne.n	80132c0 <memmove+0x28>
 80132be:	bd10      	pop	{r4, pc}
 80132c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80132c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80132c8:	e7f7      	b.n	80132ba <memmove+0x22>

080132ca <_realloc_r>:
 80132ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132cc:	4607      	mov	r7, r0
 80132ce:	4614      	mov	r4, r2
 80132d0:	460e      	mov	r6, r1
 80132d2:	b921      	cbnz	r1, 80132de <_realloc_r+0x14>
 80132d4:	4611      	mov	r1, r2
 80132d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80132da:	f7ff bc77 	b.w	8012bcc <_malloc_r>
 80132de:	b922      	cbnz	r2, 80132ea <_realloc_r+0x20>
 80132e0:	f7ff fc26 	bl	8012b30 <_free_r>
 80132e4:	4625      	mov	r5, r4
 80132e6:	4628      	mov	r0, r5
 80132e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132ea:	f000 f814 	bl	8013316 <_malloc_usable_size_r>
 80132ee:	42a0      	cmp	r0, r4
 80132f0:	d20f      	bcs.n	8013312 <_realloc_r+0x48>
 80132f2:	4621      	mov	r1, r4
 80132f4:	4638      	mov	r0, r7
 80132f6:	f7ff fc69 	bl	8012bcc <_malloc_r>
 80132fa:	4605      	mov	r5, r0
 80132fc:	2800      	cmp	r0, #0
 80132fe:	d0f2      	beq.n	80132e6 <_realloc_r+0x1c>
 8013300:	4631      	mov	r1, r6
 8013302:	4622      	mov	r2, r4
 8013304:	f7ff fc00 	bl	8012b08 <memcpy>
 8013308:	4631      	mov	r1, r6
 801330a:	4638      	mov	r0, r7
 801330c:	f7ff fc10 	bl	8012b30 <_free_r>
 8013310:	e7e9      	b.n	80132e6 <_realloc_r+0x1c>
 8013312:	4635      	mov	r5, r6
 8013314:	e7e7      	b.n	80132e6 <_realloc_r+0x1c>

08013316 <_malloc_usable_size_r>:
 8013316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801331a:	1f18      	subs	r0, r3, #4
 801331c:	2b00      	cmp	r3, #0
 801331e:	bfbc      	itt	lt
 8013320:	580b      	ldrlt	r3, [r1, r0]
 8013322:	18c0      	addlt	r0, r0, r3
 8013324:	4770      	bx	lr
	...

08013328 <_init>:
 8013328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801332a:	bf00      	nop
 801332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801332e:	bc08      	pop	{r3}
 8013330:	469e      	mov	lr, r3
 8013332:	4770      	bx	lr

08013334 <_fini>:
 8013334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013336:	bf00      	nop
 8013338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801333a:	bc08      	pop	{r3}
 801333c:	469e      	mov	lr, r3
 801333e:	4770      	bx	lr
